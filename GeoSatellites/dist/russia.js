!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=122)}([function(t,n,e){var r=e(26)("wks"),i=e(18),o=e(1).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(1),i=e(11),o=e(9),u=e(8),a=e(10),c=function(t,n,e){var s,l,f,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,m=t&c.B,y=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,w=d?i:i[n]||(i[n]={}),x=w.prototype||(w.prototype={});for(s in d&&(e=n),e)f=((l=!p&&y&&void 0!==y[s])?y:e)[s],h=m&&l?a(f,r):g&&"function"==typeof f?a(Function.call,f):f,y&&u(y,s,f,t&c.U),w[s]!=f&&o(w,s,h),g&&x[s]!=f&&(x[s]=f)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(3);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(4),i=e(52),o=e(34),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(9),o=e(12),u=e(18)("src"),a=e(80),c=(""+a).split("toString");e(11).inspectSource=function(t){return a.call(t)},(t.exports=function(t,n,e,a){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,u)||i(e,u,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:a?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(t,n,e){var r=e(6),i=e(19);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(54),i=e(15);t.exports=function(t){return r(i(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(15);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=!1},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports={}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(55),i=e(38);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(27),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(6).f,i=e(12),o=e(0)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){"use strict";var r=e(51),i=e(53),o=e(20),u=e(13);t.exports=e(35)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r=e(11),i=e(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(14),i=e(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){"use strict";var r=e(28),i={};i[e(0)("toStringTag")]="z",i+""!="[object z]"&&e(8)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){"use strict";var r=e(2),i=e(45)(0),o=e(31)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){for(var r=e(25),i=e(22),o=e(8),u=e(1),a=e(9),c=e(20),s=e(0),l=s("iterator"),f=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,m=d[v],y=p[m],w=u[m],x=w&&w.prototype;if(x&&(x[l]||a(x,l,h),x[f]||a(x,f,m),c[m]=h,y))for(g in r)x[g]||o(x,g,r[g],!0)}},function(t,n,e){var r=e(3),i=e(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){"use strict";var r=e(17),i=e(2),o=e(8),u=e(9),a=e(20),c=e(81),s=e(24),l=e(84),f=e(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,g,m){c(e,n,d);var y,w,x,b=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=n+" Iterator",S="values"==v,M=!1,E=t.prototype,C=E[f]||E["@@iterator"]||v&&E[v],A=C||b(v),T=v?S?b("entries"):A:void 0,N="Array"==n&&E.entries||C;if(N&&(x=l(N.call(new t)))!==Object.prototype&&x.next&&(s(x,_,!0),r||"function"==typeof x[f]||u(x,f,p)),S&&C&&"values"!==C.name&&(M=!0,A=function(){return C.call(this)}),r&&!m||!h&&!M&&E[f]||u(E,f,A),a[n]=A,a[_]=p,v)if(y={values:S?A:b("values"),keys:g?A:b("keys"),entries:T},m)for(w in y)w in E||o(E,w,y[w]);else i(i.P+i.F*(h||M),n,y);return y}},function(t,n,e){var r=e(4),i=e(82),o=e(38),u=e(37)("IE_PROTO"),a=function(){},c=function(){var t,n=e(33)("iframe"),r=o.length;for(n.style.display="none",e(57).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(a.prototype=r(t),e=new a,a.prototype=null,e[u]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(26)("keys"),i=e(18);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(10),i=e(60),o=e(61),u=e(4),a=e(23),c=e(62),s={},l={};(n=t.exports=function(t,n,e,f,h){var p,d,v,g,m=h?function(){return t}:c(t),y=r(e,f,n?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=a(t.length);p>w;w++)if((g=n?y(u(d=t[w])[0],d[1]):y(t[w]))===s||g===l)return g}else for(v=m.call(t);!(d=v.next()).done;)if((g=i(v,y,d.value,n))===s||g===l)return g}).BREAK=s,n.RETURN=l},function(t,n,e){var r=e(8);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(66)(!0);e(35)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(10),i=e(2),o=e(16),u=e(60),a=e(61),c=e(23),s=e(91),l=e(62);i(i.S+i.F*!e(42)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,f,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,m=0,y=l(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&a(y))for(e=new p(n=c(h.length));n>m;m++)s(e,m,g?v(h[m],m):h[m]);else for(f=y.call(h),e=new p;!(i=f.next()).done;m++)s(e,m,g?u(f,v,[i.value,m],!0):i.value);return e.length=m,e}})},function(t,n,e){var r=e(10),i=e(54),o=e(16),u=e(23),a=e(92);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,l=4==t,f=6==t,h=5==t||f,p=n||a;return function(n,a,d){for(var v,g,m=o(n),y=i(m),w=r(a,d,3),x=u(y.length),b=0,_=e?p(n,x):c?p(n,0):void 0;x>b;b++)if((h||b in y)&&(g=w(v=y[b],b,m),t))if(e)_[b]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return b;case 2:_.push(v)}else if(l)return!1;return f?-1:s||l?l:_}}},function(t,n,e){var r=e(14);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(4);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(18)("meta"),i=e(3),o=e(12),u=e(6).f,a=0,c=Object.isExtensible||function(){return!0},s=!e(5)(function(){return c(Object.preventExtensions({}))}),l=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";l(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!o(t,r)&&l(t),t}}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(0)("unscopables"),i=Array.prototype;null==i[r]&&e(9)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){t.exports=!e(7)&&!e(5)(function(){return 7!=Object.defineProperty(e(33)("div"),"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){var r=e(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(12),i=e(13),o=e(56)(!1),u=e(37)("IE_PROTO");t.exports=function(t,n){var e,a=i(t),c=0,s=[];for(e in a)e!=u&&r(a,e)&&s.push(e);for(;n.length>c;)r(a,e=n[c++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(13),i=e(23),o=e(83);t.exports=function(t){return function(n,e,u){var a,c=r(n),s=i(c.length),l=o(u,s);if(t&&e!=e){for(;s>l;)if((a=c[l++])!=a)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===e)return t||l||0;return!t&&-1}}},function(t,n,e){var r=e(1).document;t.exports=r&&r.documentElement},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function c(t,n,e,r){var i=n&&n.prototype instanceof v?n:v,o=Object.create(i.prototype),u=new A(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return N()}for(e.method=i,e.arg=o;;){var u=e.delegate;if(u){var a=M(u,e);if(a){if(a===d)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var c=s(t,n,e);if("normal"===c.type){if(r=e.done?p:f,c.arg===d)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=p,e.method="throw",e.arg=c.arg)}}}(t,e,u),o}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l="suspendedStart",f="suspendedYield",h="executing",p="completed",d={};function v(){}function g(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==e&&r.call(x,o)&&(y=x);var b=m.prototype=v.prototype=Object.create(y);function _(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function S(t){var n;this._invoke=function(e,i){function o(){return new Promise(function(n,o){!function n(e,i,o,u){var a=s(t[e],t,i);if("throw"!==a.type){var c=a.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,o,u)},function(t){n("throw",t,o,u)}):Promise.resolve(l).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,u)})}u(a.arg)}(e,i,n,o)})}return n=n?n.then(o,o):o()}}function M(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,M(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=s(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function C(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function T(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,u=function e(){for(;++i<t.length;)if(r.call(t,i))return e.value=t[i],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:N}}function N(){return{value:n,done:!0}}return g.prototype=b.constructor=m,m.constructor=g,m[a]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,i){var o=new S(c(n,e,r,i));return t.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},_(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function i(r,i){return a.type="throw",a.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return i("end");if(u.tryLoc<=this.prev){var c=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(c&&s){if(this.prev<u.catchLoc)return i(u.catchLoc,!0);if(this.prev<u.finallyLoc)return i(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return i(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return i(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),C(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;C(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){"use strict";var r,i,o,u,a=e(17),c=e(1),s=e(10),l=e(28),f=e(2),h=e(3),p=e(21),d=e(39),v=e(40),g=e(85),m=e(63).set,y=e(87)(),w=e(64),x=e(88),b=e(89),_=e(90),S=c.TypeError,M=c.process,E=M&&M.versions,C=E&&E.v8||"",A=c.Promise,T="process"==l(M),N=function(){},k=i=w.f,P=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(0)("species")]=function(t){t(N,N)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(N)instanceof n&&0!==C.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),O=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},D=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,u=function(n){var e,o,u,a=i?n.ok:n.fail,c=n.resolve,s=n.reject,l=n.domain;try{a?(i||(2==t._h&&L(t),t._h=1),!0===a?e=r:(l&&l.enter(),e=a(r),l&&(l.exit(),u=!0)),e===n.promise?s(S("Promise-chain cycle")):(o=O(e))?o.call(e,c,s):c(e)):s(r)}catch(t){l&&!u&&l.exit(),s(t)}};e.length>o;)u(e[o++]);t._c=[],t._n=!1,n&&!t._h&&U(t)})}},U=function(t){m.call(c,function(){var n,e,r,i=t._v,o=j(t);if(o&&(n=x(function(){T?M.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=T||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(c,function(){var n;T?M.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},F=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),D(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=O(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(R,r,1),s(F,r,1))}catch(t){F.call(r,t)}}):(e._v=t,e._s=1,D(e,!1))}catch(t){F.call({_w:e,_d:!1},t)}}};P||(A=function(t){d(this,A,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(41)(A.prototype,{then:function(t,n){var e=k(g(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=T?M.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&D(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(F,t,1)},w.f=k=function(t){return t===A||t===u?new o(t):i(t)}),f(f.G+f.W+f.F*!P,{Promise:A}),e(24)(A,"Promise"),e(65)("Promise"),u=e(11).Promise,f(f.S+f.F*!P,"Promise",{reject:function(t){var n=k(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(a||!P),"Promise",{resolve:function(t){return _(a&&this===u?A:this,t)}}),f(f.S+f.F*!(P&&e(42)(function(t){A.all(t).catch(N)})),"Promise",{all:function(t){var n=this,e=k(n),r=e.resolve,i=e.reject,o=x(function(){var e=[],o=0,u=1;v(t,!1,function(t){var a=o++,c=!1;e.push(void 0),u++,n.resolve(t).then(function(t){c||(c=!0,e[a]=t,--u||r(e))},i)}),--u||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=k(n),r=e.reject,i=x(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){var r=e(4);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(20),i=e(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(28),i=e(0)("iterator"),o=e(20);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r,i,o,u=e(10),a=e(86),c=e(57),s=e(33),l=e(1),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},w=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){a("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(14)(f)?r=function(t){f.nextTick(u(y,t,1))}:v&&v.now?r=function(t){v.now(u(y,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=w,r=u(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(21);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(1),i=e(6),o=e(7),u=e(0)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(27),i=e(15);t.exports=function(t){return function(n,e){var o,u,a=String(i(n)),c=r(e),s=a.length;return c<0||c>=s?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):o:t?a.slice(c,c+2):u-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(23),u=e(27),a=e(94),c=e(95),s=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(96)("replace",2,function(t,n,e,d){return[function(r,i){var o=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=d(e,t,this,n);if(i.done)return i.value;var f=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=f.global;if(g){var m=f.unicode;f.lastIndex=0}for(var y=[];;){var w=c(f,h);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(f.lastIndex=a(h,o(f.lastIndex),m))}for(var x,b="",_=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),E=s(l(u(w.index),h.length),0),C=[],A=1;A<w.length;A++)C.push(void 0===(x=w[A])?x:String(x));var T=w.groups;if(p){var N=[M].concat(C,E,h);void 0!==T&&N.push(T);var k=String(n.apply(void 0,N))}else k=v(M,h,E,C,T,n);E>=_&&(b+=h.slice(_,E)+k,_=E+M.length)}return b+h.slice(_)}];function v(t,n,r,o,u,a){var c=r+t.length,s=o.length,l=p;return void 0!==u&&(u=i(u),l=h),e.call(a,l,function(e,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":a=u[i.slice(1,-1)];break;default:var l=+i;if(0===l)return e;if(l>s){var h=f(l/10);return 0===h?e:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}a=o[l-1]}return void 0===a?"":a})}})},function(t,n,e){"use strict";var r,i,o=e(47),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,s=(r=/a/,i=/b*/g,u.call(r,"a"),u.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(s||l)&&(c=function(t){var n,e,r,i,c=this;return l&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),r=u.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),l&&r&&r.length>1&&a.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";e(101);var r=e(4),i=e(47),o=e(7),u=/./.toString,a=function(t){e(8)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(8)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(1),i=e(11),o=e(17),u=e(72),a=e(6).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||a(n,t,{value:u.f(t)})}},function(t,n,e){n.f=e(0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(55),i=e(38).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(49),i=e(19),o=e(13),u=e(34),a=e(12),c=e(52),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=o(t),n=u(n,!0),c)try{return s(t,n)}catch(t){}if(a(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){"use strict";var r=e(6).f,i=e(36),o=e(41),u=e(10),a=e(39),c=e(40),s=e(35),l=e(53),f=e(65),h=e(7),p=e(48).fastKey,d=e(50),v=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var l=t(function(t,r){a(t,l,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return o(l.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,n),t)}}),h&&r(l.prototype,"size",{get:function(){return d(this,n)[v]}}),l},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?l(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,l(1))},e?"entries":"values",!e,!0),f(n)}}},function(t,n,e){"use strict";var r=e(1),i=e(2),o=e(8),u=e(41),a=e(48),c=e(40),s=e(39),l=e(3),f=e(5),h=e(42),p=e(24),d=e(111);t.exports=function(t,n,e,v,g,m){var y=r[t],w=y,x=g?"set":"add",b=w&&w.prototype,_={},S=function(t){var n=b[t];o(b,t,"delete"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!l(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof w&&(m||b.forEach&&!f(function(){(new w).entries().next()}))){var M=new w,E=M[x](m?{}:-0,1)!=M,C=f(function(){M.has(1)}),A=h(function(t){new w(t)}),T=!m&&f(function(){for(var t=new w,n=5;n--;)t[x](n,n);return!t.has(-0)});A||((w=n(function(n,e){s(n,w,t);var r=d(new y,n,w);return null!=e&&c(e,g,r[x],r),r})).prototype=b,b.constructor=w),(C||T)&&(S("delete"),S("has"),g&&S("get")),(T||E)&&S(x),m&&b.clear&&delete b.clear}else w=v.getConstructor(n,t,g,x),u(w.prototype,e),a.NEED=!0;return p(w,t),_[t]=w,i(i.G+i.W+i.F*(w!=y),_),m||v.setStrong(w,t,g),w}},function(t,n,e){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(s(t,n),setTimeout(function(){l(t,n)},e))}function u(t){return Math.max(Math.min(t,100),0)}function a(t){return Array.isArray(t)?t:[t]}function c(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function s(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||""),r=n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,i=n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop;return{x:r,y:i}}function h(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function v(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),i=t[r-1],o=t[r],u=n[r-1],a=n[r];return u+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],e)/h(u,a)}function g(t,n,e,r){if(100===r)return r;var i=d(r,t),o=t[i-1],u=t[i];return e?r-o>(u-o)/2?u:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(r-t[i-1],n[i-1]):r}function m(n,e,r){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(e[0]),o?r.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(r.xSteps[0]=e[1]),r.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/h(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*i;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,n){return t[0][0]-n[0][0]}):i.sort(function(t,n){return t[0]-n[0]}),r=0;r<i.length;r++)m(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},w.prototype.toStepping=function(t){return t=v(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),i=t[r-1],o=t[r],u=n[r-1],a=n[r];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(e-u)*h(u,a))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function b(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function _(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function S(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new w(e,n.snap,n.singleStep)}function M(n,e){if(e=a(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function E(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function A(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function T(n,e){var r,i=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<n.handles;r++)i.push(e);i.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=e}n.connect=i}function N(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function k(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function P(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function O(n,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function D(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function U(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=e.indexOf("tap")>=0,i=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,u=e.indexOf("snap")>=0,a=e.indexOf("hover")>=0,c=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");k(n,n.start[1]-n.start[0])}if(c&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:r||u,drag:i,fixed:o,snap:u,hover:a,unconstrained:c}}function j(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(!0)}else{if(n.tooltips=a(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach(function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function L(t,n){t.ariaFormat=n,b(n)}function F(t,n){t.format=n,b(n)}function R(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function H(t,n){t.documentElement=n}function I(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function V(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var r in n.cssClasses={},e)e.hasOwnProperty(r)&&(n.cssClasses[r]=n.cssPrefix+e[r]);else n.cssClasses=e}function Y(n){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:_},start:{r:!0,t:M},connect:{r:!0,t:T},direction:{r:!0,t:D},snap:{r:!1,t:E},animate:{r:!1,t:C},animationDuration:{r:!1,t:A},range:{r:!0,t:S},orientation:{r:!1,t:N},margin:{r:!1,t:k},limit:{r:!1,t:P},padding:{r:!1,t:O},behaviour:{r:!0,t:U},ariaFormat:{r:!1,t:L},format:{r:!1,t:F},tooltips:{r:!1,t:j},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:H},cssPrefix:{r:!0,t:I},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach(function(u){if(!e(n[u])&&void 0===o[u]){if(i[u].r)throw new Error("noUiSlider ("+t+"): '"+u+"' is required.");return!0}i[u].t(r,e(n[u])?n[u]:o[u])}),r.pips=n.pips;var u=document.createElement("div"),a=void 0!==u.style.msTransform,c=void 0!==u.style.transform;return r.transformRule=c?"transform":a?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function z(e,i,c){var h,p,d,v,g,m,y,w,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},b=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),_=b&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),S=e,M=i.spectrum,E=[],C=[],A=[],T=0,N={},k=e.ownerDocument,P=i.documentElement||k.documentElement,O=k.body,D=-1,U=0,j=1,L=2,F="rtl"===k.dir||1===i.ort?0:100;function R(t,n){var e=k.createElement("div");return n&&s(e,n),t.appendChild(e),e}function H(t,n){var e=R(t,i.cssClasses.origin),r=R(e,i.cssClasses.handle);return R(r,i.cssClasses.touchArea),r.setAttribute("data-handle",n),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",function(t){return function(t,n){if(z()||q(n))return!1;var e=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),u=o===r[0]||o===e[0],a=o===r[1]||o===e[1];if(!u&&!a)return!0;t.preventDefault();var c=u?0:1,s=wt(n)[c];return null!==s&&(!1===s&&(s=M.getDefaultStep(C[n],u,10)),s=Math.max(s,1e-7),s*=u?-1:1,mt(n,E[n]+s,!0),!1)}(t,n)})),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?s(r,i.cssClasses.handleLower):n===i.handles-1&&s(r,i.cssClasses.handleUpper),e}function I(t,n){return!!n&&R(t,i.cssClasses.connect)}function V(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function z(){return S.hasAttribute("disabled")}function q(t){var n=p[t];return n.hasAttribute("disabled")}function B(){g&&(ut("update.tooltips"),g.forEach(function(t){t&&n(t)}),g=null)}function X(){B(),g=p.map(V),ot("update.tooltips",function(t,n,e){if(g[n]){var r=t[n];!0!==i.tooltips[n]&&(r=i.tooltips[n].to(e[n])),g[n].innerHTML=r}})}function $(t,n,e){var r=k.createElement("div"),o=[];o[U]=i.cssClasses.valueNormal,o[j]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var u=[];u[U]=i.cssClasses.markerNormal,u[j]=i.cssClasses.markerLarge,u[L]=i.cssClasses.markerSub;var a=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function l(t,n){var e=n===i.cssClasses.value,r=e?a:c,s=e?o:u;return n+" "+r[i.ort]+" "+s[t]}return s(r,i.cssClasses.pips),s(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(o){!function(t,o,u){if((u=n?n(o,u):u)!==D){var a=R(r,!1);a.className=l(u,i.cssClasses.marker),a.style[i.style]=t+"%",u>U&&((a=R(r,!1)).className=l(u,i.cssClasses.value),a.setAttribute("data-value",o),a.style[i.style]=t+"%",a.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])}),r}function G(){v&&(n(v),v=null)}function W(n){G();var e=n.mode,r=n.density||1,i=n.filter||!1,o=n.values||!1,u=n.stepped||!1,a=function(n,e,r){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=e-1,o=100/i;for(e=[];i--;)e[i]=i*o;e.push(100),n="positions"}return"positions"===n?e.map(function(t){return M.fromStepping(r?M.getStep(t):t)}):"values"===n?r?e.map(function(t){return M.fromStepping(M.getStep(M.toStepping(t)))}):e:void 0}(e,o,u),c=function(t,n,e){var r,i={},o=M.xVal[0],u=M.xVal[M.xVal.length-1],a=!1,c=!1,s=0;return(r=e.slice().sort(function(t,n){return t-n}),e=r.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==o&&(e.unshift(o),a=!0),e[e.length-1]!==u&&(e.push(u),c=!0),e.forEach(function(r,o){var u,l,f,h,p,d,v,g,m,y,w=r,x=e[o+1],b="steps"===n;if(b&&(u=M.xNumSteps[o]),u||(u=x-w),!1!==w&&void 0!==x)for(u=Math.max(u,1e-7),l=w;l<=x;l=(l+u).toFixed(7)/1){for(g=(p=(h=M.toStepping(l))-s)/t,y=p/(m=Math.round(g)),f=1;f<=m;f+=1)i[(d=s+f*y).toFixed(5)]=[M.fromStepping(d),0];v=e.indexOf(l)>-1?j:b?L:U,!o&&a&&(v=0),l===x&&c||(i[h.toFixed(5)]=[l,v]),s=h}}),i}(r,e,a),s=n.format||{to:Math.round};return v=S.appendChild($(c,i,s))}function Z(){var t=h.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||h[n]:t.height||h[n]}function J(t,n,e,r){var o=function(o){return!!(o=function(t,n,e){var r,i,o=0===t.type.indexOf("touch"),u=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),o){var c=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var s=Array.prototype.filter.call(t.touches,c);if(s.length>1)return!1;r=s[0].pageX,i=s[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,c);if(!l)return!1;r=l.pageX,i=l.pageY}}return n=n||f(k),(u||a)&&(r=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[r,i],t.cursor=u||a,t}(o,r.pageOffset,r.target||n))&&!(z()&&!r.doNotReject)&&(u=S,a=i.cssClasses.tap,!((u.classList?u.classList.contains(a):new RegExp("\\b"+a+"\\b").test(u.className))&&!r.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(_||o.preventDefault(),o.calcPoint=o.points[i.ort],void e(o,r)));var u,a},u=[];return t.split(" ").forEach(function(t){n.addEventListener(t,o,!!_&&{passive:!0}),u.push([t,o])}),u}function Q(t){var n,e,r,o,a,c,s=t-(n=h,e=i.ort,r=n.getBoundingClientRect(),o=n.ownerDocument,a=o.documentElement,c=f(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),e?r.top+c.y-a.clientTop:r.left+c.x-a.clientLeft),l=100*s/Z();return l=u(l),i.dir?100-l:l}function K(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&nt(t,n)}function tt(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return nt(t,n);var e=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint),r=100*e/n.baseSize;lt(e>0,r,n.locations,n.handleNumbers)}function nt(t,n){n.handle&&(l(n.handle,i.cssClasses.active),T-=1),n.listeners.forEach(function(t){P.removeEventListener(t[0],t[1])}),0===T&&(l(S,i.cssClasses.drag),ht(),t.cursor&&(O.style.cursor="",O.removeEventListener("selectstart",r))),n.handleNumbers.forEach(function(t){at("change",t),at("set",t),at("end",t)})}function et(t,n){if(n.handleNumbers.some(q))return!1;var e;if(1===n.handleNumbers.length){var o=p[n.handleNumbers[0]];e=o.children[0],T+=1,s(e,i.cssClasses.active)}t.stopPropagation();var u=[],a=J(x.move,P,tt,{target:t.target,handle:e,listeners:u,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:C.slice()}),c=J(x.end,P,nt,{target:t.target,handle:e,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers}),l=J("mouseout",P,K,{target:t.target,handle:e,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers});u.push.apply(u,a.concat(c,l)),t.cursor&&(O.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&s(S,i.cssClasses.drag),O.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach(function(t){at("start",t)})}function rt(t){t.stopPropagation();var n=Q(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach(function(r,i){if(!q(i)){var o=Math.abs(C[i]-t);(o<n||100===o&&100===n)&&(e=i,n=o)}}),e}(n);if(!1===e)return!1;i.events.snap||o(S,i.cssClasses.tap,i.animationDuration),pt(e,n,!0,!0),ht(),at("slide",e,!0),at("update",e,!0),at("change",e,!0),at("set",e,!0),i.events.snap&&et(t,{handleNumbers:[e]})}function it(t){var n=Q(t.calcPoint),e=M.getStep(n),r=M.fromStepping(e);Object.keys(N).forEach(function(t){"hover"===t.split(".")[0]&&N[t].forEach(function(t){t.call(m,r)})})}function ot(t,n){N[t]=N[t]||[],N[t].push(n),"update"===t.split(".")[0]&&p.forEach(function(t,n){at("update",n)})}function ut(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(N).forEach(function(t){var r=t.split(".")[0],i=t.substring(r.length);n&&n!==r||e&&e!==i||delete N[t]})}function at(t,n,e){Object.keys(N).forEach(function(r){var o=r.split(".")[0];t===o&&N[r].forEach(function(t){t.call(m,E.map(i.format.to),n,E.slice(),e||!1,C.slice())})})}function ct(t,n,e,r,o,a){return p.length>1&&!i.events.unconstrained&&(r&&n>0&&(e=Math.max(e,t[n-1]+i.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-i.margin))),p.length>1&&i.limit&&(r&&n>0&&(e=Math.min(e,t[n-1]+i.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-i.limit))),i.padding&&(0===n&&(e=Math.max(e,i.padding[0])),n===p.length-1&&(e=Math.min(e,100-i.padding[1]))),!((e=u(e=M.getStep(e)))===t[n]&&!a)&&e}function st(t,n){var e=i.ort;return(e?n:t)+", "+(e?t:n)}function lt(t,n,e,r){var i=e.slice(),o=[!t,t],u=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach(function(t,e){var r=ct(i,t,i[t]+n,o[e],u[e],!1);!1===r?n=0:(n=r-i[t],i[t]=r)}):o=u=[!0];var a=!1;r.forEach(function(t,r){a=pt(t,e[t]+n,o[r],u[r])||a}),a&&r.forEach(function(t){at("update",t),at("slide",t)})}function ft(t,n){return i.dir?100-t-n:t}function ht(){A.forEach(function(t){var n=C[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e})}function pt(t,n,e,r){return!1!==(n=ct(C,t,n,e,r,!1))&&(function(t,n){C[t]=n,E[t]=M.fromStepping(n);var e="translate("+st(ft(n,0)-F+"%","0")+")";p[t].style[i.transformRule]=e,dt(t),dt(t+1)}(t,n),!0)}function dt(t){if(d[t]){var n=0,e=100;0!==t&&(n=C[t-1]),t!==d.length-1&&(e=C[t]);var r=e-n,o="translate("+st(ft(n,r)+"%","0")+")",u="scale("+st(r/100,"1")+")";d[t].style[i.transformRule]=o+" "+u}}function vt(t,n){return null===t||!1===t||void 0===t?C[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?C[n]:t)}function gt(t,n){var e=a(t),r=void 0===C[0];n=void 0===n||!!n,i.animate&&!r&&o(S,i.cssClasses.tap,i.animationDuration),A.forEach(function(t){pt(t,vt(e[t],t),!0,!1)}),A.forEach(function(t){pt(t,C[t],!0,!0)}),ht(),A.forEach(function(t){at("update",t),null!==e[t]&&n&&at("set",t)})}function mt(n,e,r){if(!((n=Number(n))>=0&&n<A.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);pt(n,vt(e,n),!0,!0),at("update",n),r&&at("set",n)}function yt(){var t=E.map(i.format.to);return 1===t.length?t[0]:t}function wt(t){var n=C[t],e=M.getNearbySteps(n),r=E[t],i=e.thisStep.step,o=null;!1!==i&&r+i>e.stepAfter.startValue&&(i=e.stepAfter.startValue-r),o=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===n?i=null:0===n&&(o=null);var u=M.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(u))),null!==o&&!1!==o&&(o=Number(o.toFixed(u))),[o,i]}return s(w=S,i.cssClasses.target),0===i.dir?s(w,i.cssClasses.ltr):s(w,i.cssClasses.rtl),0===i.ort?s(w,i.cssClasses.horizontal):s(w,i.cssClasses.vertical),h=R(w,i.cssClasses.base),function(t,n){var e=R(n,i.cssClasses.connects);p=[],(d=[]).push(I(e,t[0]));for(var r=0;r<i.handles;r++)p.push(H(n,r)),A[r]=r,d.push(I(e,t[r+1]))}(i.connect,h),(y=i.events).fixed||p.forEach(function(t,n){J(x.start,t.children[0],et,{handleNumbers:[n]})}),y.tap&&J(x.start,h,rt,{}),y.hover&&J(x.move,h,it,{hover:!0}),y.drag&&d.forEach(function(t,n){if(!1!==t&&0!==n&&n!==d.length-1){var e=p[n-1],r=p[n],o=[t];s(t,i.cssClasses.draggable),y.fixed&&(o.push(e.children[0]),o.push(r.children[0])),o.forEach(function(t){J(x.start,t,et,{handles:[e,r],handleNumbers:[n-1,n]})})}}),gt(i.start),i.pips&&W(i.pips),i.tooltips&&X(),ot("update",function(t,n,e,r,o){A.forEach(function(t){var n=p[t],r=ct(C,t,0,!0,!0,!0),u=ct(C,t,100,!0,!0,!0),a=o[t],c=i.ariaFormat.to(e[t]);r=M.fromStepping(r).toFixed(1),u=M.fromStepping(u).toFixed(1),a=M.fromStepping(a).toFixed(1),n.children[0].setAttribute("aria-valuemin",r),n.children[0].setAttribute("aria-valuemax",u),n.children[0].setAttribute("aria-valuenow",a),n.children[0].setAttribute("aria-valuetext",c)})}),m={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&l(S,i.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return A.map(wt)},on:ot,off:ut,get:yt,set:gt,setHandle:mt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,e){lt(t,n,C,e)},options:c,updateOptions:function(t,n){var e=yt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach(function(n){void 0!==t[n]&&(c[n]=t[n])});var o=Y(c);r.forEach(function(n){void 0!==t[n]&&(i[n]=o[n])}),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?W(i.pips):G(),i.tooltips?X():B(),C=[],gt(t.start||e,n)},target:S,removePips:G,removeTooltips:B,pips:W}}return{__spectrum:w,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=Y(e),i=z(n,r,e);return n.noUiSlider=i,i}}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){"use strict";e(32),e(25),e(58),e(59),e(29),e(43),e(44),e(30),e(67),e(98);var r={calculate:function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()},isMobile:function(){var t=this.calculate();return"xsmall"==t||"small"==t}},i=function(){return new o};function o(){this.reset()}o.prototype={constructor:o,reset:function(){this.s=this.t=0},add:function(t){a(u,t,this.t),a(this,u.s,this.s),this.s?this.t+=u.t:this.s=u.t},valueOf:function(){return this.s}};var u=new o;function a(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var c=1e-6,s=Math.PI,l=s/2,f=s/4,h=2*s,p=180/s,d=s/180,v=Math.abs,g=Math.atan,m=Math.atan2,y=Math.cos,w=(Math.ceil,Math.exp),x=(Math.floor,Math.log),b=(Math.pow,Math.sin),_=(Math.sign,Math.sqrt),S=Math.tan;function M(t){return t>1?0:t<-1?s:Math.acos(t)}function E(t){return t>1?l:t<-1?-l:Math.asin(t)}function C(){}function A(t,n){t&&N.hasOwnProperty(t.type)&&N[t.type](t,n)}var T={Feature:function(t,n){A(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)A(e[r].geometry,n)}},N={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){k(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)k(e[r],n,0)},Polygon:function(t,n){P(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)P(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)A(e[r],n)}};function k(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function P(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)k(t[e],n,1);n.polygonEnd()}var O=function(t,n){t&&T.hasOwnProperty(t.type)?T[t.type](t,n):A(t,n)};i(),i();function D(t){return[m(t[1],t[0]),E(t[2])]}function U(t){var n=t[0],e=t[1],r=y(e);return[r*y(n),r*b(n),b(e)]}function j(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function L(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function F(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function R(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function H(t){var n=_(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}i();var I=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function V(t,n){return[v(t)>s?t+Math.round(-t/h)*h:t,n]}function Y(t,n,e){return(t%=h)?n||e?I(q(t),B(n,e)):q(t):n||e?B(n,e):V}function z(t){return function(n,e){return[(n+=t)>s?n-h:n<-s?n+h:n,e]}}function q(t){var n=z(t);return n.invert=z(-t),n}function B(t,n){var e=y(t),r=b(t),i=y(n),o=b(n);function u(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),l=s*e+a*r;return[m(c*i-l*o,a*e-s*r),E(l*i+c*o)]}return u.invert=function(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),l=s*i-c*o;return[m(c*i+s*o,a*e+l*r),E(l*e-a*r)]},u}V.invert=V;function X(t,n,e,r,i,o){if(e){var u=y(n),a=b(n),c=r*e;null==i?(i=n+r*h,o=n-c/2):(i=$(u,i),o=$(u,o),(r>0?i<o:i>o)&&(i+=r*h));for(var s,l=i;r>0?l>o:l<o;l-=c)s=D([u,-a*y(l),-a*b(l)]),t.point(s[0],s[1])}}function $(t,n){(n=U(n))[0]-=t,H(n);var e=M(-n[1]);return((-n[2]<0?-e:e)+h-c)%h}var G=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:C,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},W=function(t,n){return v(t[0]-n[0])<c&&v(t[1]-n[1])<c};function Z(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var J=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(W(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Z(r,t,null,!0)),c.push(e.o=new Z(r,null,e,!1)),a.push(e=new Z(u,t,null,!1)),c.push(e.o=new Z(u,null,e,!0))}}),a.length){for(c.sort(n),Q(a),Q(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((l=s[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((l=s[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function Q(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var K=i(),tt=function(t,n){var e=n[0],r=n[1],i=b(r),o=[b(e),-y(e),0],u=0,a=0;K.reset(),1===i?r=l+c:-1===i&&(r=-l-c);for(var p=0,d=t.length;p<d;++p)if(g=(v=t[p]).length)for(var v,g,w=v[g-1],x=w[0],_=w[1]/2+f,S=b(_),M=y(_),C=0;C<g;++C,x=T,S=k,M=P,w=A){var A=v[C],T=A[0],N=A[1]/2+f,k=b(N),P=y(N),O=T-x,D=O>=0?1:-1,j=D*O,F=j>s,R=S*k;if(K.add(m(R*D*b(j),M*P+R*y(j))),u+=F?O+D*h:O,F^x>=e^T>=e){var I=L(U(w),U(A));H(I);var V=L(o,I);H(V);var Y=(F^O>=0?-1:1)*E(V[2]);(r>Y||r===Y&&(I[0]||I[1]))&&(a+=F^O>=0?1:-1)}}return(u<-c||u<c&&K<-c)^1&a},nt=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN};var et,rt;1===(et=nt).length&&(rt=et,et=function(t,n){return nt(rt(t),n)});var it=Array.prototype;it.slice,it.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var ot=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e};var ut=function(t,n,e,r){return function(i){var o,u,a,c=n(i),s=G(),l=n(s),f=!1,h={point:p,lineStart:v,lineEnd:g,polygonStart:function(){h.point=m,h.lineStart=y,h.lineEnd=w,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=v,h.lineEnd=g,u=ot(u);var t=tt(o,r);u.length?(f||(i.polygonStart(),f=!0),J(u,ct,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function d(t,n){c.point(t,n)}function v(){h.point=d,c.lineStart()}function g(){h.point=p,c.lineEnd()}function m(t,n){a.push([t,n]),l.point(t,n)}function y(){l.lineStart(),a=[]}function w(){m(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(at))}return h}};function at(t){return t.length>1}function ct(t,n){return((t=t.x)[0]<0?t[1]-l-c:l-t[1])-((n=n.x)[0]<0?n[1]-l-c:l-n[1])}var st=ut(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?s:-s,f=v(o-e);v(f-s)<c?(t.point(e,r=(r+u)/2>0?l:-l),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&f>=s&&(v(e-i)<c&&(e-=i*c),v(o-a)<c&&(o-=a*c),r=function(t,n,e,r){var i,o,u=b(t-e);return v(u)>c?g((b(n)*(o=y(r))*b(e)-b(r)*(i=y(n))*b(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*l,r.point(-s,i),r.point(0,i),r.point(s,i),r.point(s,0),r.point(s,-i),r.point(0,-i),r.point(-s,-i),r.point(-s,0),r.point(-s,i);else if(v(t[0]-n[0])>c){var o=t[0]<n[0]?s:-s;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-s,-l]);var lt=function(t){var n=y(t),e=6*d,r=n>0,i=v(n)>c;function o(t,e){return y(t)*y(e)>n}function u(t,e,r){var i=[1,0,0],o=L(U(t),U(e)),u=j(o,o),a=o[0],l=u-a*a;if(!l)return!r&&t;var f=n*u/l,h=-n*a/l,p=L(i,o),d=R(i,f);F(d,R(o,h));var g=p,m=j(d,g),y=j(g,g),w=m*m-y*(j(d,d)-1);if(!(w<0)){var x=_(w),b=R(g,(-m-x)/y);if(F(b,d),b=D(b),!r)return b;var S,M=t[0],E=e[0],C=t[1],A=e[1];E<M&&(S=M,M=E,E=S);var T=E-M,N=v(T-s)<c;if(!N&&A<C&&(S=C,C=A,A=S),N||T<c?N?C+A>0^b[1]<(v(b[0]-M)<c?C:A):C<=b[1]&&b[1]<=A:T>s^(M<=b[0]&&b[0]<=E)){var k=R(g,(-m+x)/y);return F(k,d),[b,D(k)]}}}function a(n,e){var i=r?t:s-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return ut(o,function(t){var n,e,l,f,h;return{lineStart:function(){f=l=!1,h=1},point:function(p,d){var v,g=[p,d],m=o(p,d),y=r?m?0:a(p,d):m?a(p+(p<0?s:-s),d):0;if(!n&&(f=l=m)&&t.lineStart(),m!==l&&(!(v=u(n,g))||W(n,v)||W(g,v))&&(g[0]+=c,g[1]+=c,m=o(g[0],g[1])),m!==l)h=0,m?(t.lineStart(),v=u(g,n),t.point(v[0],v[1])):(v=u(n,g),t.point(v[0],v[1]),t.lineEnd()),n=v;else if(i&&n&&r^m){var w;y&e||!(w=u(g,n,!0))||(h=0,r?(t.lineStart(),t.point(w[0][0],w[0][1]),t.point(w[1][0],w[1][1]),t.lineEnd()):(t.point(w[1][0],w[1][1]),t.lineEnd(),t.lineStart(),t.point(w[0][0],w[0][1])))}!m||n&&W(n,g)||t.point(g[0],g[1]),n=g,l=m,e=y},lineEnd:function(){l&&t.lineEnd(),n=null},clean:function(){return h|(f&&l)<<1}}},function(n,r,i,o){X(o,t,e,i,n,r)},r?[0,-t]:[-s,t-s])},ft=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,l=1,f=n[0]-a,h=n[1]-c;if(u=e-a,f||!(u>0)){if(u/=f,f<0){if(u<s)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>s&&(s=u)}if(u=i-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>s&&(s=u)}else if(f>0){if(u<s)return;u<l&&(l=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<l&&(l=u)}return s>0&&(t[0]=a+s*f,t[1]=c+s*h),l<1&&(n[0]=a+l*f,n[1]=c+l*h),!0}}}}},ht=1e9,pt=-ht;function dt(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,c){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||s(i,o)<0^a>0)do{c.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else c.point(o[0],o[1])}function u(r,i){return v(r[0]-t)<c?i>0?0:3:v(r[0]-e)<c?i>0?2:1:v(r[1]-n)<c?i>0?1:0:i>0?3:2}function a(t,n){return s(t.x,n.x)}function s(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,l,f,h,p,d,v,g,m,y,w=u,x=G(),b={point:_,lineStart:function(){b.point=S,s&&s.push(l=[]);m=!0,g=!1,d=v=NaN},lineEnd:function(){c&&(S(f,h),p&&g&&x.rejoin(),c.push(x.result()));b.point=_,g&&w.lineEnd()},polygonStart:function(){w=x,c=[],s=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,l=a.length,f=a[0],h=f[0],p=f[1];c<l;++c)o=h,u=p,f=a[c],h=f[0],p=f[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=y&&n,i=(c=ot(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&J(c,a,n,o,u),u.polygonEnd());w=u,c=s=l=null}};function _(t,n){i(t,n)&&w.point(t,n)}function S(o,u){var a=i(o,u);if(s&&l.push([o,u]),m)f=o,h=u,p=a,m=!1,a&&(w.lineStart(),w.point(o,u));else if(a&&g)w.point(o,u);else{var c=[d=Math.max(pt,Math.min(ht,d)),v=Math.max(pt,Math.min(ht,v))],x=[o=Math.max(pt,Math.min(ht,o)),u=Math.max(pt,Math.min(ht,u))];ft(c,x,t,n,e,r)?(g||(w.lineStart(),w.point(c[0],c[1])),w.point(x[0],x[1]),a||w.lineEnd(),y=!1):a&&(w.lineStart(),w.point(o,u),y=!1)}d=o,v=u,g=a}return b}}i();var vt,gt,mt,yt,wt=function(t){return t},xt=i(),bt=i(),_t={point:C,lineStart:C,lineEnd:C,polygonStart:function(){_t.lineStart=St,_t.lineEnd=Ct},polygonEnd:function(){_t.lineStart=_t.lineEnd=_t.point=C,xt.add(v(bt)),bt.reset()},result:function(){var t=xt/2;return xt.reset(),t}};function St(){_t.point=Mt}function Mt(t,n){_t.point=Et,vt=mt=t,gt=yt=n}function Et(t,n){bt.add(yt*t-mt*n),mt=t,yt=n}function Ct(){Et(vt,gt)}var At=_t,Tt=1/0,Nt=Tt,kt=-Tt,Pt=kt;var Ot,Dt,Ut,jt,Lt={point:function(t,n){t<Tt&&(Tt=t);t>kt&&(kt=t);n<Nt&&(Nt=n);n>Pt&&(Pt=n)},lineStart:C,lineEnd:C,polygonStart:C,polygonEnd:C,result:function(){var t=[[Tt,Nt],[kt,Pt]];return kt=Pt=-(Nt=Tt=1/0),t}},Ft=0,Rt=0,Ht=0,It=0,Vt=0,Yt=0,zt=0,qt=0,Bt=0,Xt={point:$t,lineStart:Gt,lineEnd:Jt,polygonStart:function(){Xt.lineStart=Qt,Xt.lineEnd=Kt},polygonEnd:function(){Xt.point=$t,Xt.lineStart=Gt,Xt.lineEnd=Jt},result:function(){var t=Bt?[zt/Bt,qt/Bt]:Yt?[It/Yt,Vt/Yt]:Ht?[Ft/Ht,Rt/Ht]:[NaN,NaN];return Ft=Rt=Ht=It=Vt=Yt=zt=qt=Bt=0,t}};function $t(t,n){Ft+=t,Rt+=n,++Ht}function Gt(){Xt.point=Wt}function Wt(t,n){Xt.point=Zt,$t(Ut=t,jt=n)}function Zt(t,n){var e=t-Ut,r=n-jt,i=_(e*e+r*r);It+=i*(Ut+t)/2,Vt+=i*(jt+n)/2,Yt+=i,$t(Ut=t,jt=n)}function Jt(){Xt.point=$t}function Qt(){Xt.point=tn}function Kt(){nn(Ot,Dt)}function tn(t,n){Xt.point=nn,$t(Ot=Ut=t,Dt=jt=n)}function nn(t,n){var e=t-Ut,r=n-jt,i=_(e*e+r*r);It+=i*(Ut+t)/2,Vt+=i*(jt+n)/2,Yt+=i,zt+=(i=jt*t-Ut*n)*(Ut+t),qt+=i*(jt+n),Bt+=3*i,$t(Ut=t,jt=n)}var en=Xt;function rn(t){this._context=t}rn.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,h)}},result:C};var on,un,an,cn,sn,ln=i(),fn={point:C,lineStart:function(){fn.point=hn},lineEnd:function(){on&&pn(un,an),fn.point=C},polygonStart:function(){on=!0},polygonEnd:function(){on=null},result:function(){var t=+ln;return ln.reset(),t}};function hn(t,n){fn.point=pn,un=cn=t,an=sn=n}function pn(t,n){cn-=t,sn-=n,ln.add(_(cn*cn+sn*sn)),cn=t,sn=n}var dn=fn;function vn(){this._string=[]}function gn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}vn.prototype={_radius:4.5,_circle:gn(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=gn(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var mn=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),O(t,e(r))),r.result()}return o.area=function(t){return O(t,e(At)),At.result()},o.measure=function(t){return O(t,e(dn)),dn.result()},o.bounds=function(t){return O(t,e(Lt)),Lt.result()},o.centroid=function(t){return O(t,e(en)),en.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,wt):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new vn):new rn(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)};function yn(t){return function(n){var e=new wn;for(var r in t)e[r]=t[r];return e.stream=n,e}}function wn(){}function xn(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),O(e,t.stream(Lt)),n(Lt.result()),null!=r&&t.clipExtent(r),t}function bn(t,n,e){return xn(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function _n(t,n,e){return bn(t,[[0,0],n],e)}function Sn(t,n,e){return xn(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function Mn(t,n,e){return xn(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}wn.prototype={constructor:wn,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var En=16,Cn=y(30*d),An=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,s,l,f,h,p,d,g,y,w){var x=l-r,b=f-i,S=x*x+b*b;if(S>4*n&&y--){var M=u+p,C=a+d,A=s+g,T=_(M*M+C*C+A*A),N=E(A/=T),k=v(v(A)-1)<c||v(o-h)<c?(o+h)/2:m(C,M),P=t(k,N),O=P[0],D=P[1],U=O-r,j=D-i,L=b*U-x*j;(L*L/S>n||v((x*U+b*j)/S-.5)>.3||u*p+a*d+s*g<Cn)&&(e(r,i,o,u,a,s,O,D,k,M/=T,C/=T,A,y,w),w.point(O,D),e(O,D,k,M,C,A,l,f,h,p,d,g,y,w))}}return function(n){var r,i,o,u,a,c,s,l,f,h,p,d,v={point:g,lineStart:m,lineEnd:w,polygonStart:function(){n.polygonStart(),v.lineStart=x},polygonEnd:function(){n.polygonEnd(),v.lineStart=m}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){l=NaN,v.point=y,n.lineStart()}function y(r,i){var o=U([r,i]),u=t(r,i);e(l,f,s,h,p,d,l=u[0],f=u[1],s=r,h=o[0],p=o[1],d=o[2],En,n),n.point(l,f)}function w(){v.point=g,n.lineEnd()}function x(){m(),v.point=b,v.lineEnd=_}function b(t,n){y(r=t,n),i=l,o=f,u=h,a=p,c=d,v.point=y}function _(){e(l,f,s,h,p,d,i,o,r,u,a,c,En,n),v.lineEnd=w,w()}return v}}(t,n):function(t){return yn({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var Tn=yn({point:function(t,n){this.stream.point(t*d,n*d)}});function Nn(t,n,e,r){var i=y(r),o=b(r),u=i*t,a=o*t,c=i/t,s=o/t,l=(o*e-i*n)/t,f=(o*n+i*e)/t;function h(t,r){return[u*t-a*r+n,e-a*t-u*r]}return h.invert=function(t,n){return[c*t-s*n+l,f-s*t-c*n]},h}function kn(t){return Pn(function(){return t})()}function Pn(t){var n,e,r,i,o,u,a,c,s,l,f=150,h=480,v=250,g=0,m=0,y=0,w=0,x=0,b=0,S=null,M=st,E=null,C=wt,A=.5;function T(t){return c(t[0]*d,t[1]*d)}function N(t){return(t=c.invert(t[0],t[1]))&&[t[0]*p,t[1]*p]}function k(){var t=Nn(f,0,0,b).apply(null,n(g,m)),r=(b?Nn:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(f,h-t[0],v-t[1],b);return e=Y(y,w,x),a=I(n,r),c=I(e,a),u=An(a,A),P()}function P(){return s=l=null,T}return T.stream=function(t){return s&&l===t?s:s=Tn(function(t){return yn({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(u(C(l=t)))))},T.preclip=function(t){return arguments.length?(M=t,S=void 0,P()):M},T.postclip=function(t){return arguments.length?(C=t,E=r=i=o=null,P()):C},T.clipAngle=function(t){return arguments.length?(M=+t?lt(S=t*d):(S=null,st),P()):S*p},T.clipExtent=function(t){return arguments.length?(C=null==t?(E=r=i=o=null,wt):dt(E=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),P()):null==E?null:[[E,r],[i,o]]},T.scale=function(t){return arguments.length?(f=+t,k()):f},T.translate=function(t){return arguments.length?(h=+t[0],v=+t[1],k()):[h,v]},T.center=function(t){return arguments.length?(g=t[0]%360*d,m=t[1]%360*d,k()):[g*p,m*p]},T.rotate=function(t){return arguments.length?(y=t[0]%360*d,w=t[1]%360*d,x=t.length>2?t[2]%360*d:0,k()):[y*p,w*p,x*p]},T.angle=function(t){return arguments.length?(b=t%360*d,k()):b*p},T.precision=function(t){return arguments.length?(u=An(a,A=t*t),P()):_(A)},T.fitExtent=function(t,n){return bn(T,t,n)},T.fitSize=function(t,n){return _n(T,t,n)},T.fitWidth=function(t,n){return Sn(T,t,n)},T.fitHeight=function(t,n){return Mn(T,t,n)},function(){return n=t.apply(this,arguments),T.invert=n.invert&&N,k()}}function On(t){return function(n,e){var r=y(n),i=y(e),o=t(r*i);return[o*i*b(n),o*b(e)]}}function Dn(t){return function(n,e){var r=_(n*n+e*e),i=t(r),o=b(i),u=y(i);return[m(n*o,r*u),E(r&&e*o/r)]}}var Un=On(function(t){return _(2/(1+t))});Un.invert=Dn(function(t){return 2*E(t/2)});var jn=On(function(t){return(t=M(t))&&t/b(t)});jn.invert=Dn(function(t){return t});function Ln(t,n){return[t,x(S((l+n)/2))]}Ln.invert=function(t,n){return[t,2*g(w(n))-l]};function Fn(t,n){return[t,n]}Fn.invert=Fn;var Rn=1.340264,Hn=-.081106,In=893e-6,Vn=.003796,Yn=_(3)/2;function zn(t,n){var e=E(Yn*b(n)),r=e*e,i=r*r*r;return[t*y(e)/(Yn*(Rn+3*Hn*r+i*(7*In+9*Vn*r))),e*(Rn+Hn*r+i*(In+Vn*r))]}zn.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Rn+Hn*i+o*(In+Vn*i))-n)/(Rn+3*Hn*i+o*(7*In+9*Vn*i)))*r)*i*i,!(v(e)<1e-12));++u);return[Yn*t*(Rn+3*Hn*i+o*(7*In+9*Vn*i))/y(r),E(b(r)/Yn)]};function qn(t,n){var e=y(n),r=y(t)*e;return[e*b(t)/r,b(n)/r]}qn.invert=Dn(g);function Bn(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Bn.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(v(e)>c&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function Xn(t,n){return[y(n)*b(t),b(n)]}Xn.invert=Dn(E);var $n=function(){return kn(Xn).scale(249.5).clipAngle(90+c)};function Gn(t,n){var e=y(n),r=1+y(t)*e;return[e*b(t)/r,b(n)/r]}Gn.invert=Dn(function(t){return 2*g(t)});function Wn(t,n){return[x(S((l+n)/2)),-t]}Wn.invert=function(t,n){return[-n,2*g(w(t))-l]};var Zn=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Jn=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return Zn(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var Qn=Jn(Zn),Kn=Qn.right,te=(Qn.left,Kn);var ne=Array.prototype,ee=(ne.slice,ne.map,Math.sqrt(50)),re=Math.sqrt(10),ie=Math.sqrt(2),oe=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=ue(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function ue(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=ee?10:o>=re?5:o>=ie?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=ee?10:o>=re?5:o>=ie?2:1)}function ae(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=ee?i*=10:o>=re?i*=5:o>=ie&&(i*=2),n<t?-i:i}function ce(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Symbol("implicit");var se=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function le(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function fe(){}var he="\\s*([+-]?\\d+)\\s*",pe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",de="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",ve=/^#([0-9a-f]{3})$/,ge=/^#([0-9a-f]{6})$/,me=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),ye=new RegExp("^rgb\\("+[de,de,de]+"\\)$"),we=new RegExp("^rgba\\("+[he,he,he,pe]+"\\)$"),xe=new RegExp("^rgba\\("+[de,de,de,pe]+"\\)$"),be=new RegExp("^hsl\\("+[pe,de,de]+"\\)$"),_e=new RegExp("^hsla\\("+[pe,de,de,pe]+"\\)$"),Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Me(t){var n;return t=(t+"").trim().toLowerCase(),(n=ve.exec(t))?new Ne((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ge.exec(t))?Ee(parseInt(n[1],16)):(n=me.exec(t))?new Ne(n[1],n[2],n[3],1):(n=ye.exec(t))?new Ne(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=we.exec(t))?Ce(n[1],n[2],n[3],n[4]):(n=xe.exec(t))?Ce(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=be.exec(t))?Pe(n[1],n[2]/100,n[3]/100,1):(n=_e.exec(t))?Pe(n[1],n[2]/100,n[3]/100,n[4]):Se.hasOwnProperty(t)?Ee(Se[t]):"transparent"===t?new Ne(NaN,NaN,NaN,0):null}function Ee(t){return new Ne(t>>16&255,t>>8&255,255&t,1)}function Ce(t,n,e,r){return r<=0&&(t=n=e=NaN),new Ne(t,n,e,r)}function Ae(t){return t instanceof fe||(t=Me(t)),t?new Ne((t=t.rgb()).r,t.g,t.b,t.opacity):new Ne}function Te(t,n,e,r){return 1===arguments.length?Ae(t):new Ne(t,n,e,null==r?1:r)}function Ne(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ke(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Pe(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new De(t,n,e,r)}function Oe(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof De)return new De(t.h,t.s,t.l,t.opacity);if(t instanceof fe||(t=Me(t)),!t)return new De;if(t instanceof De)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new De(u,a,c,t.opacity)}(t):new De(t,n,e,null==r?1:r)}function De(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ue(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}se(fe,Me,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),se(Ne,Te,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ne(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ke(this.r)+ke(this.g)+ke(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),se(De,Oe,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new De(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new De(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Ne(Ue(t>=240?t-240:t+120,i,r),Ue(t,i,r),Ue(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var je=Math.PI/180,Le=180/Math.PI,Fe=.96422,Re=1,He=.82521,Ie=4/29,Ve=6/29,Ye=3*Ve*Ve,ze=Ve*Ve*Ve;function qe(t){if(t instanceof Xe)return new Xe(t.l,t.a,t.b,t.opacity);if(t instanceof Ke){if(isNaN(t.h))return new Xe(t.l,0,0,t.opacity);var n=t.h*je;return new Xe(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Ne||(t=Ae(t));var e,r,i=Ze(t.r),o=Ze(t.g),u=Ze(t.b),a=$e((.2225045*i+.7168786*o+.0606169*u)/Re);return i===o&&o===u?e=r=a:(e=$e((.4360747*i+.3850649*o+.1430804*u)/Fe),r=$e((.0139322*i+.0971045*o+.7141733*u)/He)),new Xe(116*a-16,500*(e-a),200*(a-r),t.opacity)}function Be(t,n,e,r){return 1===arguments.length?qe(t):new Xe(t,n,e,null==r?1:r)}function Xe(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function $e(t){return t>ze?Math.pow(t,1/3):t/Ye+Ie}function Ge(t){return t>Ve?t*t*t:Ye*(t-Ie)}function We(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ze(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Je(t){if(t instanceof Ke)return new Ke(t.h,t.c,t.l,t.opacity);if(t instanceof Xe||(t=qe(t)),0===t.a&&0===t.b)return new Ke(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Le;return new Ke(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Qe(t,n,e,r){return 1===arguments.length?Je(t):new Ke(t,n,e,null==r?1:r)}function Ke(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}se(Xe,Be,le(fe,{brighter:function(t){return new Xe(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Xe(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Ne(We(3.1338561*(n=Fe*Ge(n))-1.6168667*(t=Re*Ge(t))-.4906146*(e=He*Ge(e))),We(-.9787684*n+1.9161415*t+.033454*e),We(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),se(Ke,Qe,le(fe,{brighter:function(t){return new Ke(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ke(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return qe(this).rgb()}}));var tr=-.29227,nr=-.90649,er=1.97294,rr=er*nr,ir=1.78277*er,or=1.78277*tr- -.14861*nr;function ur(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof ar)return new ar(t.h,t.s,t.l,t.opacity);t instanceof Ne||(t=Ae(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(or*r+rr*n-ir*e)/(or+rr-ir),o=r-i,u=(er*(e-i)-tr*o)/nr,a=Math.sqrt(u*u+o*o)/(er*i*(1-i)),c=a?Math.atan2(u,o)*Le-120:NaN;return new ar(c<0?c+360:c,a,i,t.opacity)}(t):new ar(t,n,e,null==r?1:r)}function ar(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function cr(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}se(ar,ur,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ar(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ar(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*je,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Ne(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(tr*r+nr*i)),255*(n+e*(er*r)),this.opacity)}}));var sr=function(t){return function(){return t}};function lr(t,n){return function(e){return t+e*n}}function fr(t,n){var e=n-t;return e?lr(t,e>180||e<-180?e-360*Math.round(e/360):e):sr(isNaN(t)?n:t)}function hr(t){return 1==(t=+t)?pr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):sr(isNaN(n)?e:n)}}function pr(t,n){var e=n-t;return e?lr(t,e):sr(isNaN(t)?n:t)}var dr=function t(n){var e=hr(n);function r(t,n){var r=e((t=Te(t)).r,(n=Te(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=pr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function vr(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Te(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}vr(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return cr((e-r/n)*n,u,i,o,a)}}),vr(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return cr((e-r/n)*n,i,o,u,a)}});var gr=function(t,n){return n-=t=+t,function(e){return t+n*e}},mr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yr=new RegExp(mr.source,"g");var wr,xr,br,_r,Sr=function(t,n){var e,r,i,o=mr.lastIndex=yr.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=mr.exec(t))&&(r=yr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:gr(e,r)})),o=yr.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Mr=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?sr(n):("number"===r?gr:"string"===r?(e=Me(n))?(n=e,dr):Sr:n instanceof Me?dr:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Mr(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Mr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:gr)(t,n)},Er=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Cr=180/Math.PI,Ar={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Tr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Cr,skewX:Math.atan(c)*Cr,scaleX:u,scaleY:a}};function Nr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:gr(t,i)},{i:c-2,x:gr(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:gr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:gr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:gr(t,e)},{i:a-2,x:gr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var kr=Nr(function(t){return"none"===t?Ar:(wr||(wr=document.createElement("DIV"),xr=document.documentElement,br=document.defaultView),wr.style.transform=t,t=br.getComputedStyle(xr.appendChild(wr),null).getPropertyValue("transform"),xr.removeChild(wr),t=t.slice(7,-1).split(","),Tr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Pr=Nr(function(t){return null==t?Ar:(_r||(_r=document.createElementNS("http://www.w3.org/2000/svg","g")),_r.setAttribute("transform",t),(t=_r.transform.baseVal.consolidate())?(t=t.matrix,Tr(t.a,t.b,t.c,t.d,t.e,t.f)):Ar)},", ",")",")");Math.SQRT2;function Or(t){return function(n,e){var r=t((n=Oe(n)).h,(e=Oe(e)).h),i=pr(n.s,e.s),o=pr(n.l,e.l),u=pr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Or(fr),Or(pr);function Dr(t){return function(n,e){var r=t((n=Qe(n)).h,(e=Qe(e)).h),i=pr(n.c,e.c),o=pr(n.l,e.l),u=pr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Dr(fr),Dr(pr);function Ur(t){return function n(e){function r(n,r){var i=t((n=ur(n)).h,(r=ur(r)).h),o=pr(n.s,r.s),u=pr(n.l,r.l),a=pr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}Ur(fr),Ur(pr);var jr=function(t){return function(){return t}},Lr=function(t){return+t},Fr=[0,1];function Rr(t){return t}function Hr(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:jr(isNaN(n)?NaN:.5)}function Ir(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Vr(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Hr(i,r),o=e(u,o)):(r=Hr(r,i),o=e(o,u)),function(t){return o(r(t))}}function Yr(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Hr(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=te(t,n,1,r)-1;return o[e](i[e](n))}}function zr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function qr(){var t,n,e,r,i,o,u=Fr,a=Fr,c=Mr,s=Rr;function l(){return r=Math.min(u.length,a.length)>2?Yr:Vr,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(a,u.map(t),gr)))(e)))},f.domain=function(t){return arguments.length?(u=Array.from(t,Lr),s===Rr||(s=Ir(u)),l()):u.slice()},f.range=function(t){return arguments.length?(a=Array.from(t),l()):a.slice()},f.rangeRound=function(t){return a=Array.from(t),c=Er,l()},f.clamp=function(t){return arguments.length?(s=t?Ir(u):Rr,f):s!==Rr},f.interpolate=function(t){return arguments.length?(c=t,l()):c},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function Br(t,n){return qr()(t,n)}var Xr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},$r=function(t){return(t=Xr(Math.abs(t)))?t[1]:NaN},Gr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wr(t){return new Zr(t)}function Zr(t){if(!(n=Gr.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Wr.prototype=Zr.prototype,Zr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Jr,Qr,Kr,ti,ni=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},ei=function(t,n){var e=Xr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ri={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ei(100*t,n)},r:ei,s:function(t,n){var e=Xr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Jr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Xr(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},ii=function(t){return t},oi=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];Qr=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):ii,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ii,a=t.percent||"%";function c(t){var n=(t=Wr(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.trim,v=t.type;"n"===v?(h=!0,v="g"):ri[v]||(null==p&&(p=12),d=!0,v="g"),(l||"0"===n&&"="===e)&&(l=!0,n="0",e="=");var g="$"===s?i[0]:"#"===s&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",m="$"===s?i[1]:/[%p]/.test(v)?a:"",y=ri[v],w=/[defgprs%]/.test(v);function x(t){var i,a,s,x=g,b=m;if("c"===v)b=y(t)+b,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=ni(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,b=("s"===v?oi[8+Jr/3]:"")+b+(_&&"("===c?")":""),w)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var S=x.length+t.length+b.length,M=S<f?new Array(f-S+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?f-b.length:1/0),M=""),e){case"<":t=x+t+b+M;break;case"=":t=x+M+t+b;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+b+M.slice(S);break;default:t=M+x+t+b}return u(t)}return p=null==p?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=Wr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor($r(n)/3))),i=Math.pow(10,-r),o=oi[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Kr=Qr.format,ti=Qr.formatPrefix;var ui=function(t,n,e,r){var i,o=ae(t,n,e);switch((r=Wr(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor($r(n)/3)))-$r(Math.abs(t)))}(o,u))||(r.precision=i),ti(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,$r(n)-$r(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-$r(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Kr(r)};function ai(t){var n=t.domain;return t.ticks=function(t){var e=n();return oe(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ui(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=ue(a,c,e))>0?r=ue(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=ue(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function ci(){var t=Br(Rr,Rr);return t.copy=function(){return zr(t,ci())},ce.apply(t,arguments),ai(t)}var si=new Date,li=new Date;function fi(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return fi(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return si.setTime(+n),li.setTime(+r),t(si),t(li),Math.floor(e(si,li))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var hi=fi(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});hi.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?fi(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):hi:null};hi.range;var pi=6e4,di=6048e5,vi=fi(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),gi=(vi.range,fi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*pi)},function(t,n){return(n-t)/pi},function(t){return t.getMinutes()})),mi=(gi.range,fi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*pi)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),yi=(mi.range,fi(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*pi)/864e5},function(t){return t.getDate()-1})),wi=yi;yi.range;function xi(t){return fi(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*pi)/di})}var bi=xi(0),_i=xi(1),Si=xi(2),Mi=xi(3),Ei=xi(4),Ci=xi(5),Ai=xi(6),Ti=(bi.range,_i.range,Si.range,Mi.range,Ei.range,Ci.range,Ai.range,fi(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ni=(Ti.range,fi(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ni.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var ki=Ni,Pi=(Ni.range,fi(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*pi)},function(t,n){return(n-t)/pi},function(t){return t.getUTCMinutes()})),Oi=(Pi.range,fi(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Di=(Oi.range,fi(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Ui=Di;Di.range;function ji(t){return fi(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/di})}var Li=ji(0),Fi=ji(1),Ri=ji(2),Hi=ji(3),Ii=ji(4),Vi=ji(5),Yi=ji(6),zi=(Li.range,Fi.range,Ri.range,Hi.range,Ii.range,Vi.range,Yi.range,fi(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),qi=(zi.range,fi(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));qi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Bi=qi;qi.range;function Xi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function $i(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Gi(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Wi,Zi,Ji,Qi={"-":"",_:" ",0:"0"},Ki=/^\s*\d+/,to=/^%/,no=/[\\^$*+?|[\]().{}]/g;function eo(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ro(t){return t.replace(no,"\\$&")}function io(t){return new RegExp("^(?:"+t.map(ro).join("|")+")","i")}function oo(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function uo(t,n,e){var r=Ki.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ao(t,n,e){var r=Ki.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function co(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function so(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function lo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function fo(t,n,e){var r=Ki.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ho(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function po(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function vo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function go(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function mo(t,n,e){var r=Ki.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function yo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function wo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function xo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function bo(t,n,e){var r=Ki.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function _o(t,n,e){var r=Ki.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function So(t,n,e){var r=to.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Mo(t,n,e){var r=Ki.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Eo(t,n,e){var r=Ki.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Co(t,n){return eo(t.getDate(),n,2)}function Ao(t,n){return eo(t.getHours(),n,2)}function To(t,n){return eo(t.getHours()%12||12,n,2)}function No(t,n){return eo(1+wi.count(ki(t),t),n,3)}function ko(t,n){return eo(t.getMilliseconds(),n,3)}function Po(t,n){return ko(t,n)+"000"}function Oo(t,n){return eo(t.getMonth()+1,n,2)}function Do(t,n){return eo(t.getMinutes(),n,2)}function Uo(t,n){return eo(t.getSeconds(),n,2)}function jo(t){var n=t.getDay();return 0===n?7:n}function Lo(t,n){return eo(bi.count(ki(t),t),n,2)}function Fo(t,n){var e=t.getDay();return t=e>=4||0===e?Ei(t):Ei.ceil(t),eo(Ei.count(ki(t),t)+(4===ki(t).getDay()),n,2)}function Ro(t){return t.getDay()}function Ho(t,n){return eo(_i.count(ki(t),t),n,2)}function Io(t,n){return eo(t.getFullYear()%100,n,2)}function Vo(t,n){return eo(t.getFullYear()%1e4,n,4)}function Yo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+eo(n/60|0,"0",2)+eo(n%60,"0",2)}function zo(t,n){return eo(t.getUTCDate(),n,2)}function qo(t,n){return eo(t.getUTCHours(),n,2)}function Bo(t,n){return eo(t.getUTCHours()%12||12,n,2)}function Xo(t,n){return eo(1+Ui.count(Bi(t),t),n,3)}function $o(t,n){return eo(t.getUTCMilliseconds(),n,3)}function Go(t,n){return $o(t,n)+"000"}function Wo(t,n){return eo(t.getUTCMonth()+1,n,2)}function Zo(t,n){return eo(t.getUTCMinutes(),n,2)}function Jo(t,n){return eo(t.getUTCSeconds(),n,2)}function Qo(t){var n=t.getUTCDay();return 0===n?7:n}function Ko(t,n){return eo(Li.count(Bi(t),t),n,2)}function tu(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ii(t):Ii.ceil(t),eo(Ii.count(Bi(t),t)+(4===Bi(t).getUTCDay()),n,2)}function nu(t){return t.getUTCDay()}function eu(t,n){return eo(Fi.count(Bi(t),t),n,2)}function ru(t,n){return eo(t.getUTCFullYear()%100,n,2)}function iu(t,n){return eo(t.getUTCFullYear()%1e4,n,4)}function ou(){return"+0000"}function uu(){return"%"}function au(t){return+t}function cu(t){return Math.floor(+t/1e3)}!function(t){Wi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=io(i),l=oo(i),f=io(o),h=oo(o),p=io(u),d=oo(u),v=io(a),g=oo(a),m=io(c),y=oo(c),w={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Co,e:Co,f:Po,H:Ao,I:To,j:No,L:ko,m:Oo,M:Do,p:function(t){return i[+(t.getHours()>=12)]},Q:au,s:cu,S:Uo,u:jo,U:Lo,V:Fo,w:Ro,W:Ho,x:null,X:null,y:Io,Y:Vo,Z:Yo,"%":uu},x={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:zo,e:zo,f:Go,H:qo,I:Bo,j:Xo,L:$o,m:Wo,M:Zo,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:au,s:cu,S:Jo,u:Qo,U:Ko,V:tu,w:nu,W:eu,x:null,X:null,y:ru,Y:iu,Z:ou,"%":uu},b={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:go,e:go,f:_o,H:yo,I:yo,j:mo,L:bo,m:vo,M:wo,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},Q:Mo,s:Eo,S:xo,u:ao,U:co,V:so,w:uo,W:lo,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:ho,Y:fo,Z:po,"%":So};function _(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Qi[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(e){var r,i,o=Gi(1900);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=$i(Gi(o.y))).getUTCDay(),r=i>4||0===i?Fi.ceil(r):Fi(r),r=Ui.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Gi(o.y))).getDay(),r=i>4||0===i?_i.ceil(r):_i(r),r=wi.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?$i(Gi(o.y)).getUTCDay():n(Gi(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,$i(o)):n(o)}}function M(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=b[i in Qi?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),x.x=_(e,x),x.X=_(r,x),x.c=_(n,x),{format:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",Xi);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t,$i);return n.toString=function(){return t},n}}}(t),Wi.format,Wi.parse,Zi=Wi.utcFormat,Ji=Wi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Zi("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ji("%Y-%m-%dT%H:%M:%S.%LZ");var su="http://www.w3.org/1999/xhtml",lu={svg:"http://www.w3.org/2000/svg",xhtml:su,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},fu=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),lu.hasOwnProperty(n)?{space:lu[n],local:t}:t};var hu=function(t){var n=fu(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===su&&n.documentElement.namespaceURI===su?n.createElement(t):n.createElementNS(e,t)}})(n)};function pu(){}var du=function(t){return null==t?pu:function(){return this.querySelector(t)}};function vu(){return[]}var gu=function(t){return null==t?vu:function(){return this.querySelectorAll(t)}},mu=function(t){return function(){return this.matches(t)}},yu=function(t){return new Array(t.length)};function wu(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}wu.prototype={constructor:wu,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var xu="$";function bu(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new wu(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function _u(t,n,e,r,i,o,u){var a,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s=xu+u.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)(c=l[s=xu+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[s]=null):e[a]=new wu(t,o[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Su(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Mu=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Eu(t,n){return t.style.getPropertyValue(n)||Mu(t).getComputedStyle(t,null).getPropertyValue(n)}function Cu(t){return t.trim().split(/^|\s+/)}function Au(t){return t.classList||new Tu(t)}function Tu(t){this._node=t,this._names=Cu(t.getAttribute("class")||"")}function Nu(t,n){for(var e=Au(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ku(t,n){for(var e=Au(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Tu.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Pu(){this.textContent=""}function Ou(){this.innerHTML=""}function Du(){this.nextSibling&&this.parentNode.appendChild(this)}function Uu(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ju(){return null}function Lu(){var t=this.parentNode;t&&t.removeChild(this)}function Fu(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ru(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Hu={},Iu=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Hu={mouseenter:"mouseover",mouseleave:"mouseout"}));function Vu(t,n,e){return t=Yu(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Yu(t,n,e){return function(r){var i=Iu;Iu=r;try{t.call(this,this.__data__,n,e)}finally{Iu=i}}}function zu(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function qu(t,n,e){var r=Hu.hasOwnProperty(t.type)?Vu:Yu;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function Bu(t,n,e){var r=Mu(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Xu=[null];function $u(t,n){this._groups=t,this._parents=n}function Gu(){return new $u([[document.documentElement]],Xu)}$u.prototype=Gu.prototype={constructor:$u,select:function(t){"function"!=typeof t&&(t=du(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new $u(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=gu(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new $u(r,i)},filter:function(t){"function"!=typeof t&&(t=mu(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new $u(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each(function(t){d[++l]=t}),d;var e,r=n?_u:bu,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),v=d.length,g=c[l]=new Array(v),m=a[l]=new Array(v);r(f,h,g,m,s[l]=new Array(p),d,n);for(var y,w,x=0,b=0;x<v;++x)if(y=g[x]){for(x>=b&&(b=x+1);!(w=m[b])&&++b<v;);y._next=w||null}}return(a=new $u(a,i))._enter=c,a._exit=s,a},enter:function(){return new $u(this._enter||this._groups.map(yu),this._parents)},exit:function(){return new $u(this._exit||this._groups.map(yu),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new $u(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Su);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(n)}return new $u(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=fu(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Eu(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Cu(t+"");if(arguments.length<2){for(var r=Au(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Nu:ku)(this,t)}}:n?function(t){return function(){Nu(this,t)}}:function(t){return function(){ku(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Pu:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ou:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Du)},lower:function(){return this.each(Uu)},append:function(t){var n="function"==typeof t?t:hu(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:hu(t),r=null==n?ju:"function"==typeof n?n:du(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Lu)},clone:function(t){return this.select(t?Ru:Fu)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?qu:zu,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Bu(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Bu(this,t,n)}})(t,n))}};var Wu=Gu,Zu=function(t){return"string"==typeof t?new $u([[document.querySelector(t)]],[document.documentElement]):new $u([[t]],Xu)},Ju=0;function Qu(){this._="@"+(++Ju).toString(36)}Qu.prototype=function(){return new Qu}.prototype={constructor:Qu,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};e(69),e(70);e(102);var Ku={value:function(){}};function ta(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new na(r)}function na(t){this._=t}function ea(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ra(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ku,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}na.prototype=ta.prototype={constructor:na,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(e=(t=o[u]).type)i[e]=ra(i[e],t.name,n);else if(null==n)for(e in i)i[e]=ra(i[e],t.name,null);return this}for(;++u<a;)if((e=(t=o[u]).type)&&(e=ea(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new na(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ia,oa,ua=ta,aa=0,ca=0,sa=0,la=1e3,fa=0,ha=0,pa=0,da="object"==typeof performance&&performance.now?performance:Date,va="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ga(){return ha||(va(ma),ha=da.now()+pa)}function ma(){ha=0}function ya(){this._call=this._time=this._next=null}function wa(t,n,e){var r=new ya;return r.restart(t,n,e),r}function xa(){ha=(fa=da.now())+pa,aa=ca=0;try{!function(){ga(),++aa;for(var t,n=ia;n;)(t=ha-n._time)>=0&&n._call.call(null,t),n=n._next;--aa}()}finally{aa=0,function(){var t,n,e=ia,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ia=n);oa=t,_a(r)}(),ha=0}}function ba(){var t=da.now(),n=t-fa;n>la&&(pa-=n,fa=t)}function _a(t){aa||(ca&&(ca=clearTimeout(ca)),t-ha>24?(t<1/0&&(ca=setTimeout(xa,t-da.now()-pa)),sa&&(sa=clearInterval(sa))):(sa||(fa=da.now(),sa=setInterval(ba,la)),aa=1,va(xa)))}ya.prototype=wa.prototype={constructor:ya,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ga():+e)+(null==n?0:+n),this._next||oa===this||(oa?oa._next=this:ia=this,oa=this),this._call=t,this._time=e,_a()},stop:function(){this._call&&(this._call=null,this._time=1/0,_a())}};var Sa=function(t,n,e){var r=new ya;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ma=ua("start","end","cancel","interrupt"),Ea=[],Ca=0,Aa=1,Ta=2,Na=3,ka=4,Pa=5,Oa=6,Da=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(e.state!==Aa)return a();for(s in i)if((h=i[s]).name===e.name){if(h.state===Na)return Sa(o);h.state===ka?(h.state=Oa,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=Oa,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Sa(function(){e.state===Na&&(e.state=ka,e.timer.restart(u,e.delay,e.time),u(c))}),e.state=Ta,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Ta){for(e.state=Na,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Pa,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);e.state===Pa&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=Oa,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=wa(function(t){e.state=Aa,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ma,tween:Ea,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ca})};function Ua(t,n){var e=La(t,n);if(e.state>Ca)throw new Error("too late; already scheduled");return e}function ja(t,n){var e=La(t,n);if(e.state>Na)throw new Error("too late; already running");return e}function La(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Fa(t,n,e){var r=t._id;return t.each(function(){var t=ja(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return La(t,r).value[n]}}var Ra=function(t,n){var e;return("number"==typeof n?gr:n instanceof Me?dr:(e=Me(n))?(n=e,dr):Sr)(t,n)};var Ha=Wu.prototype.constructor;function Ia(t){return function(){this.style.removeProperty(t)}}var Va=0;function Ya(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function za(){return++Va}var qa=Wu.prototype;Ya.prototype=function(t){return Wu().transition(t)}.prototype={constructor:Ya,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=du(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],l=s.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,Da(f[h],n,e,h,f,La(a,e)));return new Ya(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=gu(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=La(c,e),v=0,g=p.length;v<g;++v)(h=p[v])&&Da(h,n,e,v,p,d);o.push(p),u.push(c)}return new Ya(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=mu(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Ya(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Ya(u,this._parents,this._name,this._id)},selection:function(){return new Ha(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=za(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var l=La(u,n);Da(u,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ya(r,this._parents,t,e)},call:qa.call,nodes:qa.nodes,node:qa.node,size:qa.size,empty:qa.empty,each:qa.each,on:function(t,n){var e=this._id;return arguments.length<2?La(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Ua:ja;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}(e,t,n))},attr:function(t,n){var e=fu(t),r="transform"===e?Pr:Ra;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}})(e,r,Fa(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=fu(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?kr:Ra;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Eu(this,t),u=(this.style.removeProperty(t),Eu(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Ia(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Eu(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Eu(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,Fa(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=ja(this,t),s=c.on,l=null==c.value[u]?o||(o=Ia(n)):void 0;s===e&&i===l||(r=(e=s).copy()).on(a,i=l),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Eu(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Fa(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=La(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=ja(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=ja(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ua(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ua(this,t).delay=n}})(n,t)):La(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ja(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ja(this,t).duration=n}})(n,t)):La(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ja(this,t).ease=n}}(n,t)):La(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each(function(){var e=ja(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Ba=2*Math.PI,Xa=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function $a(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xa.time=ga(),Xa;return e}Wu.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Ta&&e.state<Pa,e.state=Oa,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}(this,t)})},Wu.prototype.transition=function(t){var n,e;t instanceof Ya?(n=t._id,t=t._name):(n=za(),(e=Xa).time=ga(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&Da(u,t,n,s,a,e||$a(u,n));return new Ya(r,this._parents,t,n)};var Ga=Zu(".tooltip"),Wa={show:function(t){var n=Iu.pageY-100,e=Iu.pageX;e+10>document.body.clientWidth-115&&(e=document.body.clientWidth+5-175),n<25&&(n+=85),Ga.transition().duration(200).style("opacity",.9).on("end",function(){Ga.classed("isActive",!0),Ga.select(".tooltip-close").on("click",this.hide)}),Ga.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){Ga.transition().duration(500).style("opacity",0)},formatContent:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach(function(t,r){var i=null;t.class&&(i=t.class);var o="",u="<br />";n&&(o='<li class="'.concat(i,'">'),u="</li>");var a=Object.keys(t)[0];e+="".concat(o,'<span class="tooltip-label">').concat(a,":</span> ").concat(t[a]).concat(u)}),n&&(e+="</ul>"),e}},Za=function(t){return t},Ja=function(t){if(null==t)return Za;var n,e,r=t.scale[0],i=t.scale[1],o=t.translate[0],u=t.translate[1];return function(t,a){a||(n=e=0);var c=2,s=t.length,l=new Array(s);for(l[0]=(n+=t[0])*r+o,l[1]=(e+=t[1])*i+u;c<s;)l[c]=t[c],++c;return l}},Qa=function(t,n){for(var e,r=t.length,i=r-n;i<--r;)e=t[i],t[i++]=t[r],t[r]=e},Ka=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return tc(t,n)})}:tc(t,n)};function tc(t,n){var e=n.id,r=n.bbox,i=null==n.properties?{}:n.properties,o=nc(t,n);return null==e&&null==r?{type:"Feature",properties:i,geometry:o}:null==r?{type:"Feature",id:e,properties:i,geometry:o}:{type:"Feature",id:e,bbox:r,properties:i,geometry:o}}function nc(t,n){var e=Ja(t.transform),r=t.arcs;function i(t,n){n.length&&n.pop();for(var i=r[t<0?~t:t],o=0,u=i.length;o<u;++o)n.push(e(i[o],o));t<0&&Qa(n,u)}function o(t){return e(t)}function u(t){for(var n=[],e=0,r=t.length;e<r;++e)i(t[e],n);return n.length<2&&n.push(n[0]),n}function a(t){for(var n=u(t);n.length<4;)n.push(n[0]);return n}function c(t){return t.map(a)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=o(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(o);break;case"LineString":e=u(n.arcs);break;case"MultiLineString":e=n.arcs.map(u);break;case"Polygon":e=c(n.arcs);break;case"MultiPolygon":e=n.arcs.map(c);break;default:return null}return{type:r,coordinates:e}}(n)}var ec=new ArrayBuffer(16);new Float64Array(ec),new Uint32Array(ec);Math.PI,Math.abs,Math.atan2,Math.cos,Math.sin;var rc,ic,oc,uc,ac,cc=function(){var t={top:10,right:10,bottom:10,left:10},n={orbit:{x:{min:-1,max:1},y:{min:-.309,max:.309}},earth:{x:{min:-.151,max:.151},y:{min:-.151,max:.151}}},e=$n(),r=mn(),i=0,o=0,u=ci(),a=ci();function c(c){var l=c.datum();!function(t){var n=t.container,e=t.data,r=n.selectAll("svg").data([e]).enter().append("svg").append("g");r.append("g").attr("class","g-orbit").append("path").attr("fill","none").attr("stroke","#000");var i=r.append("g").attr("class","g-earth");i.append("circle").attr("class","water").attr("fill","#b7c7d1"),i.append("path").attr("class","land").style("fill","#f2f1ee").style("stroke","#ccc").style("stroke-width","0.3px"),r.append("g").attr("class","g-geoSatellites"),r.append("g").attr("class","g-plot")}({container:c,data:l}),function(t){t.data;u.domain([n.orbit.x.min,n.orbit.x.max]).range([0,i]),a.domain([n.orbit.y.min,n.orbit.y.max]).range([o,0])}({data:l}),function(c){var l=c.container,f=c.data,h=c.geoSatellitesData,p=l.select("svg").attr("viewBox","0 0 "+(i+t.left+t.right)+" "+(o+t.top+t.bottom)).select("g").attr("transform","translate("+t.left+","+t.top+")"),d=p.select(".g-earth"),v=Math.abs(a(n.earth.y.max)-a(0));e.translate([u(0),a(0)]).scale(v).rotate(oc),r.projection(e),d.select(".water").attr("cx",u(0)).attr("cy",a(0)).attr("r",e.scale()),d.select(".land").datum(Ka(ic,ic.objects.countries)).attr("d",r),p.select(".g-geoSatellites").selectAll(".satellite").data(h,function(t){return t.sat_name}).join(function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",function(t){return t.is_perp}).classed("satellite--geo",function(t){return t.is_geo}).attr("r",3).attr("cx",function(t){return u(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",s.mouseover).on("mouseleave",s.mouseleave)},function(t){return t.attr("cx",function(t){return u(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)})}),p.select(".g-plot").selectAll(".satellite").data(f,function(t){return t.sat_name}).join(function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",function(t){return t.is_perp}).classed("satellite--target",function(t){return t.is_target}).attr("r",5).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).attr("transform",function(t){return"translate(".concat(u(t.x_coord),", ").concat(a(t.y_coord),")")}).on("mouseover",s.mouseover).on("mouseleave",s.mouseleave)},function(t){return t.attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).call(function(t){return t.transition(uc).attr("transform",function(t){return"translate(".concat(u(t.x_coord),", ").concat(a(t.y_coord),")")})})})}({container:c,data:l,geoSatellitesData:ac})}var s={mouseover:function(t){s.showTooltip(t),Zu(this).classed("is-active",!0)},mouseleave:function(){Wa.hide(),Zu(this).classed("is-active",!1)},showTooltip:function(t){var n=[{Operator:t.sat_operator},{Date:t.timestamp},{Longitude:t.long_string}];t.is_geo&&delete n[1];var e='\n      <p class="tooltip-heading">\n        '.concat(t.sat_name,"</p>\n      ").concat(Wa.formatContent(n,!0));Wa.show(e)}};return c.width=function(){return arguments.length?(i=(arguments.length<=0?void 0:arguments[0])-t.left-t.right,c):i},c.height=function(){return arguments.length?(o=(arguments.length<=0?void 0:arguments[0])-t.top-t.bottom,c):o},c}();var sc={init:function(t){var n;(rc=Zu(t.container)).datum(t.data),uc=t.transitionDuration,n=Math.min(rc.node().offsetWidth,window.innerHeight),cc.width(n).height(n/3),rc.call(cc)},setWorld:function(t,n){ic=t,oc=n},setGeoSatellites:function(t){ac=t}},lc={btns:document.querySelectorAll(".speed-btn"),init:function(t){var n=t.currentSpeed,e=t.onClick;document.querySelector(".speed-btn--"+n).classList.add("is-active"),Array.from(this.btns).forEach(function(t){t.addEventListener("click",e)})},getCurrentSpeed:function(){return document.querySelector(".speed-btn.is-active").dataset.speed}},fc=e(78),hc={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),controlBtn:document.querySelector(".control-btn"),currentDateEl:document.querySelector(".timeline-current-date"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,step:864e5,updateCurrentDate:function(t){this.currentDateEl.innerHTML="".concat(this.formatDate(t))},formatDate:function(t){return t=new Date(t),t=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),"".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=t.onUpdate;this.endDate=e,this.startDate=n,fc.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}},pips:{mode:"range",density:15}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r),this.el.noUiSlider.on("slide",function(t,n){var e=new Date(t[n]);e=new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()).getTime(),hc.el.noUiSlider.set(e)}),this.el.querySelector("[data-value='".concat(n,"']")).innerHTML=this.formatDate(n),this.el.querySelector("[data-value='".concat(e,"']")).innerHTML=this.formatDate(e)},setupBtnControls:function(){this.btnControls.addEventListener("click",function(){hc.getCurrentDate()==hc.endDate&&hc.el.noUiSlider.set(hc.startDate),1!=hc.playing?hc.startTimeline():hc.stopTimeline()})},startTimeline:function(){hc.timer=setInterval(function(){var t=hc.getCurrentDate(),n=new Date(t),e=n.setDate(n.getDate()+1);hc.el.noUiSlider.set(e)},hc.transitionDuration),hc.controlBtn.classList.remove("play-btn"),hc.controlBtn.classList.add("pause-btn"),hc.playing=!0},stopTimeline:function(){clearInterval(hc.timer),hc.playing=!1,hc.btnControls.classList.remove("pause-btn"),hc.btnControls.classList.add("play-btn")}},pc=hc;e(104),e(105),e(108),e(109),e(110),e(113),e(114),e(115),e(116),e(120);var dc={},vc={},gc=34,mc=10,yc=13;function wc(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function xc(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function bc(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function _c(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+bc(-n,6):n>9999?"+"+bc(n,6):bc(n,4))+"-"+bc(t.getUTCMonth()+1,2)+"-"+bc(t.getUTCDate(),2)+(o?"T"+bc(e,2)+":"+bc(r,2)+":"+bc(i,2)+"."+bc(o,3)+"Z":i?"T"+bc(e,2)+":"+bc(r,2)+":"+bc(i,2)+"Z":r||e?"T"+bc(e,2)+":"+bc(r,2)+"Z":"")}var Sc=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function l(){if(c)return vc;if(s)return s=!1,dc;var n,r,i=u;if(t.charCodeAt(i)===gc){for(;u++<o&&t.charCodeAt(u)!==gc||t.charCodeAt(++u)===gc;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===mc?s=!0:r===yc&&(s=!0,t.charCodeAt(u)===mc&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===mc)s=!0;else if(r===yc)s=!0,t.charCodeAt(u)===mc&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===mc&&--o,t.charCodeAt(o-1)===yc&&--o;(r=l())!==vc;){for(var f=[];r!==dc&&r!==vc;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return u(n[t])}).join(t)})}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?_c(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=wc(t);return function(r,i){return n(e(r),i,t)}}(t,n):wc(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=xc(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=xc(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Mc=Sc(","),Ec=Mc.parse,Cc=(Mc.parseRows,Mc.format,Mc.formatBody,Mc.formatRows,Sc("\t")),Ac=Cc.parse;Cc.parseRows,Cc.format,Cc.formatBody,Cc.formatRows;function Tc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Nc=function(t,n){return fetch(t,n).then(Tc)};function kc(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Nc(n,e).then(function(n){return t(n,r)})}}var Pc=kc(Ec);kc(Ac);function Oc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var Dc=function(t,n){return fetch(t,n).then(Oc)};function Uc(t){return function(n,e){return Nc(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}Uc("application/xml"),Uc("text/html"),Uc("image/svg+xml");function jc(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Lc(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Fc(t,n,e,r,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,i)}function Rc(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function u(t){Fc(o,r,i,u,a,"next",t)}function a(t){Fc(o,r,i,u,a,"throw",t)}u(void 0)})}}var Hc=["US","China","Russia"];function Ic(t,n){return Vc.apply(this,arguments)}function Vc(){return(Vc=Rc(regeneratorRuntime.mark(function t(n,e){var r,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=Pc(n),i=Pc(e),o=Promise.all([r,i]).then(function(t){var n=Lc(t,2),e=n[0],r=n[1],i=Yc(e);i.forEach(function(t){zc(t,!0)});var o=Yc(r);o.forEach(function(t){zc(t,!1)});var u=Array.from(new Set(jc(i.map(function(t){return t.timestamp})))),a=Array.from(new Set(jc(i.map(function(t){return t.sat_name})))),c={perp:new Map,geoSatellites:o};return u.forEach(function(t,n){var e=[];a.forEach(function(n){var r=i.filter(function(e){return e.timestamp===t&&e.sat_name===n});r.length&&e.push(r[0])}),c.perp.set(new Date(t).getTime(),e)}),c.perp=new Map(Array.from(c.perp).sort(function(t,n){return t[0]-n[0]})),c}),t.abrupt("return",o);case 4:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Yc(t){return t.filter(function(t){return"TRUE"===t.include})}function zc(t,n){return t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("ï¿½","&#176;"),t.country.includes("U.S.")&&(t.country="US"),Hc.includes(t.country)||(t.country="Other"),t.is_perp=n,t.is_geo=!n,t}function qc(){return Bc.apply(this,arguments)}function Bc(){return(Bc=Rc(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n=Dc("./data/world-110m.json").then(function(t){return t}),t.abrupt("return",n);case 2:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Xc(t,n,e,r,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,i)}var $c,Gc,Wc,Zc,Jc,Qc={half:600,"1x":300,"2x":150},Kc=r.calculate(),ts="1x",ns=Qc[ts];function es(){var t;return t=regeneratorRuntime.mark(function t(n,e,r,i,o){var u;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Ic(n,e);case 2:return $c=t.sent,sc.setGeoSatellites($c.geoSatellites),t.next=6,qc();case 6:Gc=t.sent,sc.setWorld(Gc,o),u=Array.from($c.perp.keys()),Zc=u[0],Jc=u[u.length-1],Wc=Zc,os(r,i),lc.init({currentSpeed:ts,onClick:function(t){pc.stopTimeline(),Array.from(lc.btns).forEach(function(t){return t.classList.remove("is-active")}),this.classList.add("is-active"),ts=lc.getCurrentSpeed(),ns=Qc[ts],pc.transitionDuration=ns,pc.startTimeline()}}),is(),us();case 16:case"end":return t.stop()}},t)}),(es=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function u(t){Xc(o,r,i,u,a,"next",t)}function a(t){Xc(o,r,i,u,a,"throw",t)}u(void 0)})}).apply(this,arguments)}function rs(){Wc=pc.getCurrentDate();var t=$c.perp.get(Wc);sc.init({data:t,transitionDuration:ns,container:".chart"})}function is(){pc.transitionDuration=ns,pc.setupTimeline({startDate:Zc,endDate:Jc,transitionDuration:ns,onUpdate:function(t,n){rs(),pc.updateCurrentDate(Wc),Wc==Jc&&pc.stopTimeline()}})}function os(t,n){Array.from(document.querySelectorAll(".satellite-name")).forEach(function(n){n.textContent=t}),Array.from(document.querySelectorAll(".satellite-country")).forEach(function(t){t.textContent=n})}function us(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach(function(t){return t.classList.remove("hide-on-load")})}window.addEventListener("resize",function(){var t=r.calculate();Kc!=t&&(Kc=t,rs())});n.a=function(t,n,e,r,i){return es.apply(this,arguments)}},function(t,n,e){t.exports=e(26)("native-function-to-string",Function.toString)},function(t,n,e){"use strict";var r=e(36),i=e(19),o=e(24),u={};e(9)(u,e(0)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(6),i=e(4),o=e(22);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),a=u.length,c=0;a>c;)r.f(t,e=u[c++],n[e]);return t}},function(t,n,e){var r=e(27),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(12),i=e(16),o=e(37)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(4),i=e(21),o=e(0)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[o])?n:i(e)}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(1),i=e(63).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==e(14)(u);t.exports=function(){var t,n,e,s=function(){var r,i;for(c&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){u.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);e=function(){l.then(s)}}else e=function(){i.call(r,s)};else{var f=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(4),i=e(3),o=e(64);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(6),i=e(19);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(93);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(3),i=e(46),o=e(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(66)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){"use strict";var r=e(28),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(97);var r=e(8),i=e(9),o=e(5),u=e(15),a=e(0),c=e(68),s=a("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=a(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!l||"split"===t&&!f){var v=/./[h],g=e(u,h,""[t],function(t,n,e,r,i){return n.exec===c?p&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){"use strict";var r=e(68);e(2)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){"use strict";e(99)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){var r=e(2),i=e(15),o=e(5),u=e(100),a="["+u+"]",c=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),l=function(t,n,e){var i={},a=o(function(){return!!u[t]()||"âÂ"!="âÂ"[t]()}),c=i[t]=a?n(f):u[t];e&&(i[e]=c),r(r.P+r.F*a,"String",i)},f=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=l},function(t,n){t.exports="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(6).f(RegExp.prototype,"flags",{configurable:!0,get:e(47)})},function(t,n,e){var r=e(16),i=e(22);e(103)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(2),i=e(11),o=e(5);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){e(71)("asyncIterator")},function(t,n,e){"use strict";var r=e(1),i=e(12),o=e(7),u=e(2),a=e(8),c=e(48).KEY,s=e(5),l=e(26),f=e(24),h=e(18),p=e(0),d=e(72),v=e(71),g=e(106),m=e(46),y=e(4),w=e(3),x=e(13),b=e(34),_=e(19),S=e(36),M=e(107),E=e(75),C=e(6),A=e(22),T=E.f,N=C.f,k=M.f,P=r.Symbol,O=r.JSON,D=O&&O.stringify,U=p("_hidden"),j=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),R=l("symbols"),H=l("op-symbols"),I=Object.prototype,V="function"==typeof P,Y=r.QObject,z=!Y||!Y.prototype||!Y.prototype.findChild,q=o&&s(function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=T(I,n);r&&delete I[n],N(t,n,e),r&&t!==I&&N(I,n,r)}:N,B=function(t){var n=R[t]=S(P.prototype);return n._k=t,n},X=V&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},$=function(t,n,e){return t===I&&$(H,n,e),y(t),n=b(n,!0),y(e),i(R,n)?(e.enumerable?(i(t,U)&&t[U][n]&&(t[U][n]=!1),e=S(e,{enumerable:_(0,!1)})):(i(t,U)||N(t,U,_(1,{})),t[U][n]=!0),q(t,n,e)):N(t,n,e)},G=function(t,n){y(t);for(var e,r=g(n=x(n)),i=0,o=r.length;o>i;)$(t,e=r[i++],n[e]);return t},W=function(t){var n=L.call(this,t=b(t,!0));return!(this===I&&i(R,t)&&!i(H,t))&&(!(n||!i(this,t)||!i(R,t)||i(this,U)&&this[U][t])||n)},Z=function(t,n){if(t=x(t),n=b(n,!0),t!==I||!i(R,n)||i(H,n)){var e=T(t,n);return!e||!i(R,n)||i(t,U)&&t[U][n]||(e.enumerable=!0),e}},J=function(t){for(var n,e=k(x(t)),r=[],o=0;e.length>o;)i(R,n=e[o++])||n==U||n==c||r.push(n);return r},Q=function(t){for(var n,e=t===I,r=k(e?H:x(t)),o=[],u=0;r.length>u;)!i(R,n=r[u++])||e&&!i(I,n)||o.push(R[n]);return o};V||(a((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===I&&n.call(H,e),i(this,U)&&i(this[U],t)&&(this[U][t]=!1),q(this,t,_(1,e))};return o&&z&&q(I,t,{configurable:!0,set:n}),B(t)}).prototype,"toString",function(){return this._k}),E.f=Z,C.f=$,e(74).f=M.f=J,e(49).f=W,e(73).f=Q,o&&!e(17)&&a(I,"propertyIsEnumerable",W,!0),d.f=function(t){return B(p(t))}),u(u.G+u.W+u.F*!V,{Symbol:P});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)p(K[tt++]);for(var nt=A(p.store),et=0;nt.length>et;)v(nt[et++]);u(u.S+u.F*!V,"Symbol",{for:function(t){return i(F,t+="")?F[t]:F[t]=P(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var n in F)if(F[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),u(u.S+u.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):G(S(t),n)},defineProperty:$,defineProperties:G,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),O&&u(u.S+u.F*(!V||s(function(){var t=P();return"[null]"!=D([t])||"{}"!=D({a:t})||"{}"!=D(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(w(n)||void 0!==t)&&!X(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!X(n))return n}),r[1]=n,D.apply(O,r)}}),P.prototype[j]||e(9)(P.prototype,j,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,n,e){var r=e(22),i=e(73),o=e(49);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,a=e(t),c=o.f,s=0;a.length>s;)c.call(t,u=a[s++])&&n.push(u);return n}},function(t,n,e){var r=e(13),i=e(74).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,n,e){var r=e(2);r(r.S,"Array",{isArray:e(46)})},function(t,n,e){"use strict";var r=e(2),i=e(21),o=e(16),u=e(5),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!e(31)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(76),i=e(50);t.exports=e(77)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){var r=e(3),i=e(112).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(3),i=e(4),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(10)(Function.call,e(75).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){"use strict";var r=e(2),i=e(45)(1);r(r.P+r.F*!e(31)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(76),i=e(50);t.exports=e(77)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r=e(2),i=e(56)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(51)("includes")},function(t,n,e){"use strict";var r=e(2),i=e(117);r(r.P+r.F*e(119)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(118),i=e(15);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(3),i=e(14),o=e(0)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(0)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){"use strict";var r=e(2),i=e(45)(2);r(r.P+r.F*!e(31)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},,function(t,n,e){"use strict";e.r(n);var r=e(79),i="Luch-Olymp",o="Russian",u="./data/20190401-russia.csv",a="./data/20190328-all-geo-satellites.csv",c=[-15,-18];window.addEventListener("DOMContentLoaded",function(){Object(r.a)(u,a,i,o,c)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,