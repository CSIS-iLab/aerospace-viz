/*! For license information please see russia.js.LICENSE.txt */
(()=>{var t,n,e,r,o,i,a,u={7762:(t,n,e)=>{"use strict";e(5666),e(9554),e(4747),e(1038),e(8783),e(8674),e(1539),e(6992),e(3948),e(3210),e(5306),e(4916);const r=function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()};e(9600),e(2222),e(4678);var o=1e-6,i=Math.PI,a=i/2,u=i/4,s=2*i,c=180/i,l=i/180,f=Math.abs,p=Math.atan,h=Math.atan2,d=Math.cos,v=(Math.ceil,Math.exp,Math.floor,Math.hypot,Math.log,Math.pow,Math.sin),g=Math.sign||function(t){return t>0?1:t<0?-1:0},m=Math.sqrt;function y(t){return t>1?a:t<-1?-a:Math.asin(t)}function w(){}function x(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:w,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function b(t,n){return f(t[0]-n[0])<o&&f(t[1]-n[1])<o}function _(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function S(t,n,e,r,o){var i,a,u=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(b(r,a)){if(!r[2]&&!a[2]){for(o.lineStart(),i=0;i<n;++i)o.point((r=t[i])[0],r[1]);return void o.lineEnd()}a[0]+=2e-6}u.push(e=new _(r,t,null,!0)),s.push(e.o=new _(r,null,e,!1)),u.push(e=new _(a,t,null,!1)),s.push(e.o=new _(a,null,e,!0))}})),u.length){for(s.sort(n),E(u),E(s),i=0,a=s.length;i<a;++i)s[i].e=e=!e;for(var c,l,f=u[0];;){for(var p=f,h=!0;p.v;)if((p=p.n)===f)return;c=p.z,o.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(i=0,a=c.length;i<a;++i)o.point((l=c[i])[0],l[1]);else r(p.x,p.n.x,1,o);p=p.n}else{if(h)for(c=p.p.z,i=c.length-1;i>=0;--i)o.point((l=c[i])[0],l[1]);else r(p.x,p.p.x,-1,o);p=p.p}c=(p=p.o).z,h=!h}while(!p.v);o.lineEnd()}}}function E(t){if(n=t.length){for(var n,e,r=0,o=t[0];++r<n;)o.n=e=t[r],e.p=o,o=e;o.n=e=t[0],e.p=o}}Math.tan;class A{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const n=this._partials;let e=0;for(let r=0;r<this._n&&r<32;r++){const o=n[r],i=t+o,a=Math.abs(t)<Math.abs(o)?t-(i-o):o-(i-t);a&&(n[e++]=a),t=i}return n[e]=t,this._n=e+1,this}valueOf(){const t=this._partials;let n,e,r,o=this._n,i=0;if(o>0){for(i=t[--o];o>0&&(n=i,e=t[--o],i=n+e,r=e-(i-n),!r););o>0&&(r<0&&t[o-1]<0||r>0&&t[o-1]>0)&&(e=2*r,n=i+e,e==n-i&&(i=n))}return i}}function M(t){return[h(t[1],t[0]),y(t[2])]}function k(t){var n=t[0],e=t[1],r=d(e);return[r*d(n),r*v(n),v(e)]}function N(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function C(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function O(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function P(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function j(t){var n=m(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function T(t){return f(t[0])<=i?t[0]:g(t[0])*((f(t[0])+i)%s-i)}function D(t){return Array.from(function*(t){for(const n of t)yield*n}(t))}function L(t,n,e,r){return function(c){var l,f,p,g=n(c),m=x(),w=n(m),b=!1,_={point:E,lineStart:N,lineEnd:O,polygonStart:function(){_.point=P,_.lineStart=L,_.lineEnd=U,f=[],l=[]},polygonEnd:function(){_.point=E,_.lineStart=N,_.lineEnd=O,f=D(f);var t=function(t,n){var e=T(n),r=n[1],c=v(r),l=[v(e),-d(e),0],f=0,p=0,g=new A;1===c?r=a+o:-1===c&&(r=-a-o);for(var m=0,w=t.length;m<w;++m)if(b=(x=t[m]).length)for(var x,b,_=x[b-1],S=T(_),E=_[1]/2+u,M=v(E),N=d(E),O=0;O<b;++O,S=D,M=I,N=R,_=P){var P=x[O],D=T(P),L=P[1]/2+u,I=v(L),R=d(L),U=D-S,F=U>=0?1:-1,V=F*U,H=V>i,q=M*I;if(g.add(h(q*F*v(V),N*R+q*d(V))),f+=H?U+F*s:U,H^S>=e^D>=e){var z=C(k(_),k(P));j(z);var B=C(l,z);j(B);var $=(H^U>=0?-1:1)*y(B[2]);(r>$||r===$&&(z[0]||z[1]))&&(p+=H^U>=0?1:-1)}}return(f<-o||f<o&&g<-1e-12)^1&p}(l,r);f.length?(b||(c.polygonStart(),b=!0),S(f,R,t,e,c)):t&&(b||(c.polygonStart(),b=!0),c.lineStart(),e(null,null,1,c),c.lineEnd()),b&&(c.polygonEnd(),b=!1),f=l=null},sphere:function(){c.polygonStart(),c.lineStart(),e(null,null,1,c),c.lineEnd(),c.polygonEnd()}};function E(n,e){t(n,e)&&c.point(n,e)}function M(t,n){g.point(t,n)}function N(){_.point=M,g.lineStart()}function O(){_.point=E,g.lineEnd()}function P(t,n){p.push([t,n]),w.point(t,n)}function L(){w.lineStart(),p=[]}function U(){P(p[0][0],p[0][1]),w.lineEnd();var t,n,e,r,o=w.clean(),i=m.result(),a=i.length;if(p.pop(),l.push(p),p=null,a)if(1&o){if((n=(e=i[0]).length-1)>0){for(b||(c.polygonStart(),b=!0),c.lineStart(),t=0;t<n;++t)c.point((r=e[t])[0],r[1]);c.lineEnd()}}else a>1&&2&o&&i.push(i.pop().concat(i.shift())),f.push(i.filter(I))}return _}}function I(t){return t.length>1}function R(t,n){return((t=t.x)[0]<0?t[1]-a-o:a-t[1])-((n=n.x)[0]<0?n[1]-a-o:a-n[1])}const U=L((function(){return!0}),(function(t){var n,e=NaN,r=NaN,u=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(s,c){var l=s>0?i:-i,h=f(s-e);f(h-i)<o?(t.point(e,r=(r+c)/2>0?a:-a),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(l,r),t.point(s,r),n=0):u!==l&&h>=i&&(f(e-u)<o&&(e-=u*o),f(s-l)<o&&(s-=l*o),r=function(t,n,e,r){var i,a,u=v(t-e);return f(u)>o?p((v(n)*(a=d(r))*v(e)-v(r)*(i=d(n))*v(t))/(i*a*u)):(n+r)/2}(e,r,s,c),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(l,r),n=0),t.point(e=s,r=c),u=l},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var u;if(null==t)u=e*a,r.point(-i,u),r.point(0,u),r.point(i,u),r.point(i,0),r.point(i,-u),r.point(0,-u),r.point(-i,-u),r.point(-i,0),r.point(-i,u);else if(f(t[0]-n[0])>o){var s=t[0]<n[0]?i:-i;u=e*s/2,r.point(-s,u),r.point(0,u),r.point(s,u)}else r.point(n[0],n[1])}),[-i,-a]);function F(t,n){(n=k(n))[0]-=t,j(n);var e,r=(e=-n[1])>1?0:e<-1?i:Math.acos(e);return((-n[2]<0?-r:r)+s-o)%s}function V(t){var n=d(t),e=6*l,r=n>0,a=f(n)>o;function u(t,e){return d(t)*d(e)>n}function c(t,e,r){var a=[1,0,0],u=C(k(t),k(e)),s=N(u,u),c=u[0],l=s-c*c;if(!l)return!r&&t;var p=n*s/l,h=-n*c/l,d=C(a,u),v=P(a,p);O(v,P(u,h));var g=d,y=N(v,g),w=N(g,g),x=y*y-w*(N(v,v)-1);if(!(x<0)){var b=m(x),_=P(g,(-y-b)/w);if(O(_,v),_=M(_),!r)return _;var S,E=t[0],A=e[0],j=t[1],T=e[1];A<E&&(S=E,E=A,A=S);var D=A-E,L=f(D-i)<o;if(!L&&T<j&&(S=j,j=T,T=S),L||D<o?L?j+T>0^_[1]<(f(_[0]-E)<o?j:T):j<=_[1]&&_[1]<=T:D>i^(E<=_[0]&&_[0]<=A)){var I=P(g,(-y+b)/w);return O(I,v),[_,M(I)]}}}function p(n,e){var o=r?t:i-t,a=0;return n<-o?a|=1:n>o&&(a|=2),e<-o?a|=4:e>o&&(a|=8),a}return L(u,(function(t){var n,e,o,s,l;return{lineStart:function(){s=o=!1,l=1},point:function(f,h){var d,v=[f,h],g=u(f,h),m=r?g?0:p(f,h):g?p(f+(f<0?i:-i),h):0;if(!n&&(s=o=g)&&t.lineStart(),g!==o&&(!(d=c(n,v))||b(n,d)||b(v,d))&&(v[2]=1),g!==o)l=0,g?(t.lineStart(),d=c(v,n),t.point(d[0],d[1])):(d=c(n,v),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(a&&n&&r^g){var y;m&e||!(y=c(v,n,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!g||n&&b(n,v)||t.point(v[0],v[1]),n=v,o=g,e=m},lineEnd:function(){o&&t.lineEnd(),n=null},clean:function(){return l|(s&&o)<<1}}}),(function(n,r,o,i){!function(t,n,e,r,o,i){if(e){var a=d(n),u=v(n),c=r*e;null==o?(o=n+r*s,i=n-c/2):(o=F(a,o),i=F(a,i),(r>0?o<i:o>i)&&(o+=r*s));for(var l,f=o;r>0?f>i:f<i;f-=c)l=M([a,-u*d(f),-u*v(f)]),t.point(l[0],l[1])}}(i,t,e,o,n,r)}),r?[0,-t]:[-i,t-i])}var H=1e9,q=-H;function z(t,n,e,r){function i(o,i){return t<=o&&o<=e&&n<=i&&i<=r}function a(o,i,a,s){var l=0,f=0;if(null==o||(l=u(o,a))!==(f=u(i,a))||c(o,i)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(i[0],i[1])}function u(r,i){return f(r[0]-t)<o?i>0?0:3:f(r[0]-e)<o?i>0?2:1:f(r[1]-n)<o?i>0?1:0:i>0?3:2}function s(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){var u,c,l,f,p,h,d,v,g,m,y,w=o,b=x(),_={point:E,lineStart:function(){_.point=A,c&&c.push(l=[]),m=!0,g=!1,d=v=NaN},lineEnd:function(){u&&(A(f,p),h&&g&&b.rejoin(),u.push(b.result())),_.point=E,g&&w.lineEnd()},polygonStart:function(){w=b,u=[],c=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,o=c.length;e<o;++e)for(var i,a,u=c[e],s=1,l=u.length,f=u[0],p=f[0],h=f[1];s<l;++s)i=p,a=h,p=(f=u[s])[0],h=f[1],a<=r?h>r&&(p-i)*(r-a)>(h-a)*(t-i)&&++n:h<=r&&(p-i)*(r-a)<(h-a)*(t-i)&&--n;return n}(),e=y&&n,i=(u=D(u)).length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),a(null,null,1,o),o.lineEnd()),i&&S(u,s,n,a,o),o.polygonEnd()),w=o,u=c=l=null}};function E(t,n){i(t,n)&&w.point(t,n)}function A(o,a){var u=i(o,a);if(c&&l.push([o,a]),m)f=o,p=a,h=u,m=!1,u&&(w.lineStart(),w.point(o,a));else if(u&&g)w.point(o,a);else{var s=[d=Math.max(q,Math.min(H,d)),v=Math.max(q,Math.min(H,v))],x=[o=Math.max(q,Math.min(H,o)),a=Math.max(q,Math.min(H,a))];!function(t,n,e,r,o,i){var a,u=t[0],s=t[1],c=0,l=1,f=n[0]-u,p=n[1]-s;if(a=e-u,f||!(a>0)){if(a/=f,f<0){if(a<c)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>c&&(c=a)}if(a=o-u,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>c&&(c=a)}else if(f>0){if(a<c)return;a<l&&(l=a)}if(a=r-s,p||!(a>0)){if(a/=p,p<0){if(a<c)return;a<l&&(l=a)}else if(p>0){if(a>l)return;a>c&&(c=a)}if(a=i-s,p||!(a<0)){if(a/=p,p<0){if(a>l)return;a>c&&(c=a)}else if(p>0){if(a<c)return;a<l&&(l=a)}return c>0&&(t[0]=u+c*f,t[1]=s+c*p),l<1&&(n[0]=u+l*f,n[1]=s+l*p),!0}}}}}(s,x,t,n,e,r)?u&&(w.lineStart(),w.point(o,a),y=!1):(g||(w.lineStart(),w.point(s[0],s[1])),w.point(x[0],x[1]),u||w.lineEnd(),y=!1)}d=o,v=a,g=u}return _}}function B(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}const $=t=>t;function X(t,n){return[f(t)>i?t+Math.round(-t/s)*s:t,n]}function G(t){return function(n,e){return[(n+=t)>i?n-s:n<-i?n+s:n,e]}}function Y(t){var n=G(t);return n.invert=G(-t),n}function W(t,n){var e=d(t),r=v(t),o=d(n),i=v(n);function a(t,n){var a=d(n),u=d(t)*a,s=v(t)*a,c=v(n),l=c*e+u*r;return[h(s*o-l*i,u*e-c*r),y(l*o+s*i)]}return a.invert=function(t,n){var a=d(n),u=d(t)*a,s=v(t)*a,c=v(n),l=c*o-s*i;return[h(s*o+c*i,u*e+l*r),y(l*e-u*r)]},a}function K(t){return function(n){var e=new Z;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Z(){}function Q(t,n){t&&tt.hasOwnProperty(t.type)&&tt[t.type](t,n)}X.invert=X,Z.prototype={constructor:Z,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var J={Feature:function(t,n){Q(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,o=e.length;++r<o;)Q(e[r].geometry,n)}},tt={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){nt(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)nt(e[r],n,0)},Polygon:function(t,n){et(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)et(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,o=e.length;++r<o;)Q(e[r],n)}};function nt(t,n,e){var r,o=-1,i=t.length-e;for(n.lineStart();++o<i;)r=t[o],n.point(r[0],r[1],r[2]);n.lineEnd()}function et(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)nt(t[e],n,1);n.polygonEnd()}function rt(t,n){t&&J.hasOwnProperty(t.type)?J[t.type](t,n):Q(t,n)}var ot=1/0,it=ot,at=-ot,ut=at;const st={point:function(t,n){t<ot&&(ot=t),t>at&&(at=t),n<it&&(it=n),n>ut&&(ut=n)},lineStart:w,lineEnd:w,polygonStart:w,polygonEnd:w,result:function(){var t=[[ot,it],[at,ut]];return at=ut=-(it=ot=1/0),t}};function ct(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),rt(e,t.stream(st)),n(st.result()),null!=r&&t.clipExtent(r),t}function lt(t,n,e){return ct(t,(function(e){var r=n[1][0]-n[0][0],o=n[1][1]-n[0][1],i=Math.min(r/(e[1][0]-e[0][0]),o/(e[1][1]-e[0][1])),a=+n[0][0]+(r-i*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(o-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([a,u])}),e)}var ft=d(30*l);function pt(t,n){return+n?function(t,n){function e(r,i,a,u,s,c,l,p,d,v,g,w,x,b){var _=l-r,S=p-i,E=_*_+S*S;if(E>4*n&&x--){var A=u+v,M=s+g,k=c+w,N=m(A*A+M*M+k*k),C=y(k/=N),O=f(f(k)-1)<o||f(a-d)<o?(a+d)/2:h(M,A),P=t(O,C),j=P[0],T=P[1],D=j-r,L=T-i,I=S*D-_*L;(I*I/E>n||f((_*D+S*L)/E-.5)>.3||u*v+s*g+c*w<ft)&&(e(r,i,a,u,s,c,j,T,O,A/=N,M/=N,k,x,b),b.point(j,T),e(j,T,O,A,M,k,l,p,d,v,g,w,x,b))}}return function(n){var r,o,i,a,u,s,c,l,f,p,h,d,v={point:g,lineStart:m,lineEnd:w,polygonStart:function(){n.polygonStart(),v.lineStart=x},polygonEnd:function(){n.polygonEnd(),v.lineStart=m}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){l=NaN,v.point=y,n.lineStart()}function y(r,o){var i=k([r,o]),a=t(r,o);e(l,f,c,p,h,d,l=a[0],f=a[1],c=r,p=i[0],h=i[1],d=i[2],16,n),n.point(l,f)}function w(){v.point=g,n.lineEnd()}function x(){m(),v.point=b,v.lineEnd=_}function b(t,n){y(r=t,n),o=l,i=f,a=p,u=h,s=d,v.point=y}function _(){e(l,f,c,p,h,d,o,i,r,a,u,s,16,n),v.lineEnd=w,w()}return v}}(t,n):function(t){return K({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var ht,dt=K({point:function(t,n){this.stream.point(t*l,n*l)}});function vt(t,n,e,r,o,i){if(!i)return function(t,n,e,r,o){function i(i,a){return[n+t*(i*=r),e-t*(a*=o)]}return i.invert=function(i,a){return[(i-n)/t*r,(e-a)/t*o]},i}(t,n,e,r,o);var a=d(i),u=v(i),s=a*t,c=u*t,l=a/t,f=u/t,p=(u*e-a*n)/t,h=(u*n+a*e)/t;function g(t,i){return[s*(t*=r)-c*(i*=o)+n,e-c*t-s*i]}return g.invert=function(t,n){return[r*(l*t-f*n+p),o*(h-f*t-l*n)]},g}function gt(t){return function(t){var n,e,r,o,i,a,u,f,p,h,d=150,v=480,g=250,y=0,w=0,x=0,b=0,_=0,S=0,E=1,A=1,M=null,k=U,N=null,C=$,O=.5;function P(t){return f(t[0]*l,t[1]*l)}function j(t){return(t=f.invert(t[0],t[1]))&&[t[0]*c,t[1]*c]}function T(){var t=vt(d,0,0,E,A,S).apply(null,n(y,w)),r=vt(d,v-t[0],g-t[1],E,A,S);return e=function(t,n,e){return(t%=s)?n||e?B(Y(t),W(n,e)):Y(t):n||e?W(n,e):X}(x,b,_),u=B(n,r),f=B(e,u),a=pt(u,O),D()}function D(){return p=h=null,P}return P.stream=function(t){return p&&h===t?p:p=dt(function(t){return K({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(k(a(C(h=t)))))},P.preclip=function(t){return arguments.length?(k=t,M=void 0,D()):k},P.postclip=function(t){return arguments.length?(C=t,N=r=o=i=null,D()):C},P.clipAngle=function(t){return arguments.length?(k=+t?V(M=t*l):(M=null,U),D()):M*c},P.clipExtent=function(t){return arguments.length?(C=null==t?(N=r=o=i=null,$):z(N=+t[0][0],r=+t[0][1],o=+t[1][0],i=+t[1][1]),D()):null==N?null:[[N,r],[o,i]]},P.scale=function(t){return arguments.length?(d=+t,T()):d},P.translate=function(t){return arguments.length?(v=+t[0],g=+t[1],T()):[v,g]},P.center=function(t){return arguments.length?(y=t[0]%360*l,w=t[1]%360*l,T()):[y*c,w*c]},P.rotate=function(t){return arguments.length?(x=t[0]%360*l,b=t[1]%360*l,_=t.length>2?t[2]%360*l:0,T()):[x*c,b*c,_*c]},P.angle=function(t){return arguments.length?(S=t%360*l,T()):S*c},P.reflectX=function(t){return arguments.length?(E=t?-1:1,T()):E<0},P.reflectY=function(t){return arguments.length?(A=t?-1:1,T()):A<0},P.precision=function(t){return arguments.length?(a=pt(u,O=t*t),D()):m(O)},P.fitExtent=function(t,n){return lt(P,t,n)},P.fitSize=function(t,n){return function(t,n,e){return lt(t,[[0,0],n],e)}(P,t,n)},P.fitWidth=function(t,n){return function(t,n,e){return ct(t,(function(e){var r=+n,o=r/(e[1][0]-e[0][0]),i=(r-o*(e[1][0]+e[0][0]))/2,a=-o*e[0][1];t.scale(150*o).translate([i,a])}),e)}(P,t,n)},P.fitHeight=function(t,n){return function(t,n,e){return ct(t,(function(e){var r=+n,o=r/(e[1][1]-e[0][1]),i=-o*e[0][0],a=(r-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([i,a])}),e)}(P,t,n)},function(){return n=t.apply(this,arguments),P.invert=n.invert&&j,T()}}((function(){return t}))()}function mt(t,n){return[d(n)*v(t),v(n)]}function yt(){return gt(mt).scale(249.5).clipAngle(90.000001)}mt.invert=(ht=y,function(t,n){var e=m(t*t+n*n),r=ht(e),o=v(r),i=d(r);return[h(t*o,e*i),y(e&&n*o/e)]});var wt,xt,bt,_t,St=new A,Et=new A,At={point:w,lineStart:w,lineEnd:w,polygonStart:function(){At.lineStart=Mt,At.lineEnd=Ct},polygonEnd:function(){At.lineStart=At.lineEnd=At.point=w,St.add(f(Et)),Et=new A},result:function(){var t=St/2;return St=new A,t}};function Mt(){At.point=kt}function kt(t,n){At.point=Nt,wt=bt=t,xt=_t=n}function Nt(t,n){Et.add(_t*t-bt*n),bt=t,_t=n}function Ct(){Nt(wt,xt)}const Ot=At;var Pt,jt,Tt,Dt,Lt=0,It=0,Rt=0,Ut=0,Ft=0,Vt=0,Ht=0,qt=0,zt=0,Bt={point:$t,lineStart:Xt,lineEnd:Wt,polygonStart:function(){Bt.lineStart=Kt,Bt.lineEnd=Zt},polygonEnd:function(){Bt.point=$t,Bt.lineStart=Xt,Bt.lineEnd=Wt},result:function(){var t=zt?[Ht/zt,qt/zt]:Vt?[Ut/Vt,Ft/Vt]:Rt?[Lt/Rt,It/Rt]:[NaN,NaN];return Lt=It=Rt=Ut=Ft=Vt=Ht=qt=zt=0,t}};function $t(t,n){Lt+=t,It+=n,++Rt}function Xt(){Bt.point=Gt}function Gt(t,n){Bt.point=Yt,$t(Tt=t,Dt=n)}function Yt(t,n){var e=t-Tt,r=n-Dt,o=m(e*e+r*r);Ut+=o*(Tt+t)/2,Ft+=o*(Dt+n)/2,Vt+=o,$t(Tt=t,Dt=n)}function Wt(){Bt.point=$t}function Kt(){Bt.point=Qt}function Zt(){Jt(Pt,jt)}function Qt(t,n){Bt.point=Jt,$t(Pt=Tt=t,jt=Dt=n)}function Jt(t,n){var e=t-Tt,r=n-Dt,o=m(e*e+r*r);Ut+=o*(Tt+t)/2,Ft+=o*(Dt+n)/2,Vt+=o,Ht+=(o=Dt*t-Tt*n)*(Tt+t),qt+=o*(Dt+n),zt+=3*o,$t(Tt=t,Dt=n)}const tn=Bt;function nn(t){this._context=t}nn.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,s)}},result:w};var en,rn,on,an,un,sn=new A,cn={point:w,lineStart:function(){cn.point=ln},lineEnd:function(){en&&fn(rn,on),cn.point=w},polygonStart:function(){en=!0},polygonEnd:function(){en=null},result:function(){var t=+sn;return sn=new A,t}};function ln(t,n){cn.point=fn,rn=an=t,on=un=n}function fn(t,n){an-=t,un-=n,sn.add(m(an*an+un*un)),an=t,un=n}const pn=cn;function hn(){this._string=[]}function dn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}hn.prototype={_radius:4.5,_circle:dn(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=dn(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var vn=Math.sqrt(50),gn=Math.sqrt(10),mn=Math.sqrt(2);function yn(t,n,e){var r=(n-t)/Math.max(0,e),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=vn?10:i>=gn?5:i>=mn?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=vn?10:i>=gn?5:i>=mn?2:1)}function wn(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function xn(t){let n=t,e=t;function r(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){const i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r}return 1===t.length&&(n=(n,e)=>t(n)-e,e=function(t){return(n,e)=>wn(t(n),e)}(t)),{left:r,center:function(t,e,o,i){null==o&&(o=0),null==i&&(i=t.length);const a=r(t,e,o,i-1);return a>o&&n(t[a-1],e)>-n(t[a],e)?a-1:a},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){const i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}}const bn=xn(wn),_n=bn.right,Sn=(bn.left,xn((function(t){return null===t?NaN:+t})).center,_n);function En(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function An(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Mn(){}var kn=.7,Nn=1/kn,Cn="\\s*([+-]?\\d+)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jn=/^#([0-9a-f]{3,8})$/,Tn=new RegExp("^rgb\\("+[Cn,Cn,Cn]+"\\)$"),Dn=new RegExp("^rgb\\("+[Pn,Pn,Pn]+"\\)$"),Ln=new RegExp("^rgba\\("+[Cn,Cn,Cn,On]+"\\)$"),In=new RegExp("^rgba\\("+[Pn,Pn,Pn,On]+"\\)$"),Rn=new RegExp("^hsl\\("+[On,Pn,Pn]+"\\)$"),Un=new RegExp("^hsla\\("+[On,Pn,Pn,On]+"\\)$"),Fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Vn(){return this.rgb().formatHex()}function Hn(){return this.rgb().formatRgb()}function qn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=jn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?zn(n):3===e?new Gn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Bn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Bn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Tn.exec(t))?new Gn(n[1],n[2],n[3],1):(n=Dn.exec(t))?new Gn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ln.exec(t))?Bn(n[1],n[2],n[3],n[4]):(n=In.exec(t))?Bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Rn.exec(t))?Zn(n[1],n[2]/100,n[3]/100,1):(n=Un.exec(t))?Zn(n[1],n[2]/100,n[3]/100,n[4]):Fn.hasOwnProperty(t)?zn(Fn[t]):"transparent"===t?new Gn(NaN,NaN,NaN,0):null}function zn(t){return new Gn(t>>16&255,t>>8&255,255&t,1)}function Bn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Gn(t,n,e,r)}function $n(t){return t instanceof Mn||(t=qn(t)),t?new Gn((t=t.rgb()).r,t.g,t.b,t.opacity):new Gn}function Xn(t,n,e,r){return 1===arguments.length?$n(t):new Gn(t,n,e,null==r?1:r)}function Gn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Yn(){return"#"+Kn(this.r)+Kn(this.g)+Kn(this.b)}function Wn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Kn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Zn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Jn(t,n,e,r)}function Qn(t){if(t instanceof Jn)return new Jn(t.h,t.s,t.l,t.opacity);if(t instanceof Mn||(t=qn(t)),!t)return new Jn;if(t instanceof Jn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,o=Math.min(n,e,r),i=Math.max(n,e,r),a=NaN,u=i-o,s=(i+o)/2;return u?(a=n===i?(e-r)/u+6*(e<r):e===i?(r-n)/u+2:(n-e)/u+4,u/=s<.5?i+o:2-i-o,a*=60):u=s>0&&s<1?0:a,new Jn(a,u,s,t.opacity)}function Jn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function te(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ne(t,n,e,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*n+(4-6*i+3*a)*e+(1+3*t+3*i-3*a)*r+a*o)/6}En(Mn,qn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Vn,formatHex:Vn,formatHsl:function(){return Qn(this).formatHsl()},formatRgb:Hn,toString:Hn}),En(Gn,Xn,An(Mn,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Gn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Gn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Yn,formatHex:Yn,formatRgb:Wn,toString:Wn})),En(Jn,(function(t,n,e,r){return 1===arguments.length?Qn(t):new Jn(t,n,e,null==r?1:r)}),An(Mn,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Jn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Jn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,o=2*e-r;return new Gn(te(t>=240?t-240:t+120,o,r),te(t,o,r),te(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const ee=t=>()=>t;function re(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ee(isNaN(t)?n:t)}const oe=function t(n){var e=function(t){return 1==(t=+t)?re:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ee(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Xn(t)).r,(n=Xn(n)).r),o=e(t.g,n.g),i=e(t.b,n.b),a=re(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=o(n),t.b=i(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function ie(t){return function(n){var e,r,o=n.length,i=new Array(o),a=new Array(o),u=new Array(o);for(e=0;e<o;++e)r=Xn(n[e]),i[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return i=t(i),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=a(t),r.b=u(t),r+""}}}function ae(t,n){var e,r=n?n.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),a=new Array(r);for(e=0;e<o;++e)i[e]=de(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<o;++e)a[e]=i[e](t);return a}}function ue(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function se(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function ce(t,n){var e,r={},o={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=de(t[e],n[e]):o[e]=n[e];return function(t){for(e in r)o[e]=r[e](t);return o}}ie((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),o=t[r],i=t[r+1],a=r>0?t[r-1]:2*o-i,u=r<n-1?t[r+2]:2*i-o;return ne((e-r/n)*n,a,o,i,u)}})),ie((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),o=t[(r+n-1)%n],i=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return ne((e-r/n)*n,o,i,a,u)}}));var le=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,fe=new RegExp(le.source,"g");function pe(t,n){var e,r,o,i=le.lastIndex=fe.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=le.exec(t))&&(r=fe.exec(n));)(o=r.index)>i&&(o=n.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:se(e,r)})),i=fe.lastIndex;return i<n.length&&(o=n.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function he(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,o=n.slice();return function(i){for(e=0;e<r;++e)o[e]=t[e]*(1-i)+n[e]*i;return o}}function de(t,n){var e,r,o=typeof n;return null==n||"boolean"===o?ee(n):("number"===o?se:"string"===o?(e=qn(n))?(n=e,oe):pe:n instanceof qn?oe:n instanceof Date?ue:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?ae:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?ce:se:he))(t,n)}function ve(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function ge(t){return+t}var me=[0,1];function ye(t){return t}function we(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function xe(t,n,e){var r=t[0],o=t[1],i=n[0],a=n[1];return o<r?(r=we(o,r),i=e(a,i)):(r=we(r,o),i=e(i,a)),function(t){return i(r(t))}}function be(t,n,e){var r=Math.min(t.length,n.length)-1,o=new Array(r),i=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)o[a]=we(t[a],t[a+1]),i[a]=e(n[a],n[a+1]);return function(n){var e=Sn(t,n,1,r)-1;return i[e](o[e](n))}}function _e(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Se(){return function(){var t,n,e,r,o,i,a=me,u=me,s=de,c=ye;function l(){var t,n,e,s=Math.min(a.length,u.length);return c!==ye&&(t=a[0],n=a[s-1],t>n&&(e=t,t=n,n=e),c=function(e){return Math.max(t,Math.min(n,e))}),r=s>2?be:xe,o=i=null,f}function f(n){return isNaN(n=+n)?e:(o||(o=r(a.map(t),u,s)))(t(c(n)))}return f.invert=function(e){return c(n((i||(i=r(u,a.map(t),se)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,ge),l()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=ve,l()},f.clamp=function(t){return arguments.length?(c=!!t||ye,l()):c!==ye},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}()(ye,ye)}function Ee(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Ae,Me=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ke(t){if(!(n=Me.exec(t)))throw new Error("invalid format: "+t);var n;return new Ne({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ne(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Ce(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Oe(t){return(t=Ce(Math.abs(t)))?t[1]:NaN}function Pe(t,n){var e=Ce(t,n);if(!e)return t+"";var r=e[0],o=e[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")}ke.prototype=Ne.prototype,Ne.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const je={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>Pe(100*t,n),r:Pe,s:function(t,n){var e=Ce(t,n);if(!e)return t+"";var r=e[0],o=e[1],i=o-(Ae=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Ce(t,Math.max(0,n+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Te(t){return t}var De,Le,Ie,Re=Array.prototype.map,Ue=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Fe(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,o,i,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(o=t,t=n,n=o),0===(a=yn(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),i=new Array(o=Math.ceil(n-t+1));++u<o;)i[u]=(t+u)*a;else for(a=-a,t=Math.ceil(t*a),n=Math.floor(n*a),i=new Array(o=Math.ceil(n-t+1));++u<o;)i[u]=(t+u)/a;return r&&i.reverse(),i}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var o,i=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=vn?o*=10:i>=gn?o*=5:i>=mn&&(o*=2),n<t?-o:o}(t,n,e);switch((r=ke(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(o=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Oe(n)/3)))-Oe(Math.abs(t)))}(i,a))||(r.precision=o),Ie(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Oe(n)-Oe(t))+1}(i,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-Oe(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return Le(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,o,i=n(),a=0,u=i.length-1,s=i[a],c=i[u],l=10;for(c<s&&(o=s,s=c,c=o,o=a,a=u,u=o);l-- >0;){if((o=yn(s,c,e))===r)return i[a]=s,i[u]=c,n(i);if(o>0)s=Math.floor(s/o)*o,c=Math.ceil(c/o)*o;else{if(!(o<0))break;s=Math.ceil(s*o)/o,c=Math.floor(c*o)/o}r=o}return t},t}function Ve(){var t=Se();return t.copy=function(){return _e(t,Ve())},Ee.apply(t,arguments),Fe(t)}function He(){}function qe(t){return null==t?He:function(){return this.querySelector(t)}}function ze(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Be(){return[]}function $e(t){return null==t?Be:function(){return this.querySelectorAll(t)}}function Xe(t){return function(){return this.matches(t)}}function Ge(t){return function(n){return n.matches(t)}}De=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Te:(n=Re.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var o=t.length,i=[],a=0,u=n[0],s=0;o>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),i.push(t.substring(o-=u,o+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return i.reverse().join(e)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Te:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Re.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ke(t)).fill,e=t.align,f=t.sign,p=t.symbol,h=t.zero,d=t.width,v=t.comma,g=t.precision,m=t.trim,y=t.type;"n"===y?(v=!0,y="g"):je[y]||(void 0===g&&(g=12),m=!0,y="g"),(h||"0"===n&&"="===e)&&(h=!0,n="0",e="=");var w="$"===p?o:"#"===p&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===p?i:/[%p]/.test(y)?s:"",b=je[y],_=/[defgprs%]/.test(y);function S(t){var o,i,s,p=w,S=x;if("c"===y)S=b(t)+S,t="";else{var E=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:b(Math.abs(t),g),m&&(t=function(t){t:for(var n,e=t.length,r=1,o=-1;r<e;++r)switch(t[r]){case".":o=n=r;break;case"0":0===o&&(o=r),n=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(n+1):t}(t)),E&&0==+t&&"+"!==f&&(E=!1),p=(E?"("===f?f:c:"-"===f||"("===f?"":f)+p,S=("s"===y?Ue[8+Ae/3]:"")+S+(E&&"("===f?")":""),_)for(o=-1,i=t.length;++o<i;)if(48>(s=t.charCodeAt(o))||s>57){S=(46===s?a+t.slice(o+1):t.slice(o))+S,t=t.slice(0,o);break}}v&&!h&&(t=r(t,1/0));var A=p.length+t.length+S.length,M=A<d?new Array(d-A+1).join(n):"";switch(v&&h&&(t=r(M+t,M.length?d-S.length:1/0),M=""),e){case"<":t=p+t+S+M;break;case"=":t=p+M+t+S;break;case"^":t=M.slice(0,A=M.length>>1)+p+t+S+M.slice(A);break;default:t=M+p+t+S}return u(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:f,formatPrefix:function(t,n){var e=f(((t=ke(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Oe(n)/3))),o=Math.pow(10,-r),i=Ue[8+r/3];return function(t){return e(o*t)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),Le=De.format,Ie=De.formatPrefix;var Ye=Array.prototype.find;function We(){return this.firstElementChild}var Ke=Array.prototype.filter;function Ze(){return this.children}function Qe(t){return new Array(t.length)}function Je(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function tr(t){return function(){return t}}function nr(t,n,e,r,o,i){for(var a,u=0,s=n.length,c=i.length;u<c;++u)(a=n[u])?(a.__data__=i[u],r[u]=a):e[u]=new Je(t,i[u]);for(;u<s;++u)(a=n[u])&&(o[u]=a)}function er(t,n,e,r,o,i,a){var u,s,c,l=new Map,f=n.length,p=i.length,h=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(h[u]=c=a.call(s,s.__data__,u,n)+"",l.has(c)?o[u]=s:l.set(c,s));for(u=0;u<p;++u)c=a.call(t,i[u],u,i)+"",(s=l.get(c))?(r[u]=s,s.__data__=i[u],l.delete(c)):e[u]=new Je(t,i[u]);for(u=0;u<f;++u)(s=n[u])&&l.get(h[u])===s&&(o[u]=s)}function rr(t){return t.__data__}function or(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}Je.prototype={constructor:Je,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ir="http://www.w3.org/1999/xhtml";const ar={svg:"http://www.w3.org/2000/svg",xhtml:ir,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ur(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),ar.hasOwnProperty(n)?{space:ar[n],local:t}:t}function sr(t){return function(){this.removeAttribute(t)}}function cr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function lr(t,n){return function(){this.setAttribute(t,n)}}function fr(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function pr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function hr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function dr(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function vr(t){return function(){this.style.removeProperty(t)}}function gr(t,n,e){return function(){this.style.setProperty(t,n,e)}}function mr(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function yr(t,n){return t.style.getPropertyValue(n)||dr(t).getComputedStyle(t,null).getPropertyValue(n)}function wr(t){return function(){delete this[t]}}function xr(t,n){return function(){this[t]=n}}function br(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function _r(t){return t.trim().split(/^|\s+/)}function Sr(t){return t.classList||new Er(t)}function Er(t){this._node=t,this._names=_r(t.getAttribute("class")||"")}function Ar(t,n){for(var e=Sr(t),r=-1,o=n.length;++r<o;)e.add(n[r])}function Mr(t,n){for(var e=Sr(t),r=-1,o=n.length;++r<o;)e.remove(n[r])}function kr(t){return function(){Ar(this,t)}}function Nr(t){return function(){Mr(this,t)}}function Cr(t,n){return function(){(n.apply(this,arguments)?Ar:Mr)(this,t)}}function Or(){this.textContent=""}function Pr(t){return function(){this.textContent=t}}function jr(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Tr(){this.innerHTML=""}function Dr(t){return function(){this.innerHTML=t}}function Lr(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Ir(){this.nextSibling&&this.parentNode.appendChild(this)}function Rr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ur(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===ir&&n.documentElement.namespaceURI===ir?n.createElement(t):n.createElementNS(e,t)}}function Fr(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Vr(t){var n=ur(t);return(n.local?Fr:Ur)(n)}function Hr(){return null}function qr(){var t=this.parentNode;t&&t.removeChild(this)}function zr(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Br(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function $r(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Xr(t){return function(){var n=this.__on;if(n){for(var e,r=0,o=-1,i=n.length;r<i;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++o]=e:this.removeEventListener(e.type,e.listener,e.options);++o?n.length=o:delete this.__on}}}function Gr(t,n,e){return function(){var r,o=this.__on,i=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=e),void(r.value=n);this.addEventListener(t.type,i,e),r={type:t.type,name:t.name,value:n,listener:i,options:e},o?o.push(r):this.__on=[r]}}function Yr(t,n,e){var r=dr(t),o=r.CustomEvent;"function"==typeof o?o=new o(n,e):(o=r.document.createEvent("Event"),e?(o.initEvent(n,e.bubbles,e.cancelable),o.detail=e.detail):o.initEvent(n,!1,!1)),t.dispatchEvent(o)}function Wr(t,n){return function(){return Yr(this,t,n)}}function Kr(t,n){return function(){return Yr(this,t,n.apply(this,arguments))}}Er.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Zr=[null];function Qr(t,n){this._groups=t,this._parents=n}function Jr(){return new Qr([[document.documentElement]],Zr)}Qr.prototype=Jr.prototype={constructor:Qr,select:function(t){"function"!=typeof t&&(t=qe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a,u=n[o],s=u.length,c=r[o]=new Array(s),l=0;l<s;++l)(i=u[l])&&(a=t.call(i,i.__data__,l,u))&&("__data__"in i&&(a.__data__=i.__data__),c[l]=a);return new Qr(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);return null==n?[]:ze(n)}}(t):$e(t);for(var n=this._groups,e=n.length,r=[],o=[],i=0;i<e;++i)for(var a,u=n[i],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),o.push(a));return new Qr(r,o)},selectChild:function(t){return this.select(null==t?We:function(t){return function(){return Ye.call(this.children,t)}}("function"==typeof t?t:Ge(t)))},selectChildren:function(t){return this.selectAll(null==t?Ze:function(t){return function(){return Ke.call(this.children,t)}}("function"==typeof t?t:Ge(t)))},filter:function(t){"function"!=typeof t&&(t=Xe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new Qr(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,rr);var e=n?er:nr,r=this._parents,o=this._groups;"function"!=typeof t&&(t=tr(t));for(var i=o.length,a=new Array(i),u=new Array(i),s=new Array(i),c=0;c<i;++c){var l=r[c],f=o[c],p=f.length,h=ze(t.call(l,l&&l.__data__,c,r)),d=h.length,v=u[c]=new Array(d),g=a[c]=new Array(d),m=s[c]=new Array(p);e(l,f,v,g,m,h,n);for(var y,w,x=0,b=0;x<d;++x)if(y=v[x]){for(x>=b&&(b=x+1);!(w=g[b])&&++b<d;);y._next=w||null}}return(a=new Qr(a,r))._enter=u,a._exit=s,a},enter:function(){return new Qr(this._enter||this._groups.map(Qe),this._parents)},exit:function(){return new Qr(this._exit||this._groups.map(Qe),this._parents)},join:function(t,n,e){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(o=n(o)),null==e?i.remove():e(i),r&&o?r.merge(o).order():o},merge:function(t){if(!(t instanceof Qr))throw new Error("invalid merge");for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=n[u],l=e[u],f=c.length,p=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(p[h]=s);for(;u<r;++u)a[u]=n[u];return new Qr(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,o=t[n],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=or);for(var e=this._groups,r=e.length,o=new Array(r),i=0;i<r;++i){for(var a,u=e[i],s=u.length,c=o[i]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new Qr(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var o,i=n[e],a=0,u=i.length;a<u;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,n){var e=ur(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?cr:sr:"function"==typeof n?e.local?hr:pr:e.local?fr:lr)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?vr:"function"==typeof n?mr:gr)(t,n,null==e?"":e)):yr(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?wr:"function"==typeof n?br:xr)(t,n)):this.node()[t]},classed:function(t,n){var e=_r(t+"");if(arguments.length<2){for(var r=Sr(this.node()),o=-1,i=e.length;++o<i;)if(!r.contains(e[o]))return!1;return!0}return this.each(("function"==typeof n?Cr:n?kr:Nr)(e,n))},text:function(t){return arguments.length?this.each(null==t?Or:("function"==typeof t?jr:Pr)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Tr:("function"==typeof t?Lr:Dr)(t)):this.node().innerHTML},raise:function(){return this.each(Ir)},lower:function(){return this.each(Rr)},append:function(t){var n="function"==typeof t?t:Vr(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Vr(t),r=null==n?Hr:"function"==typeof n?n:qe(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(qr)},clone:function(t){return this.select(t?Br:zr)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,o,i=$r(t+""),a=i.length;if(!(arguments.length<2)){for(u=n?Gr:Xr,r=0;r<a;++r)this.each(u(i[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((o=i[r]).type===s.type&&o.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Kr:Wr)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,o=t[n],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};const to=Jr;function no(t){return"string"==typeof t?new Qr([[document.querySelector(t)]],[document.documentElement]):new Qr([[t]],Zr)}e(7941);var eo={value:()=>{}};function ro(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new oo(r)}function oo(t){this._=t}function io(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ao(t,n){for(var e,r=0,o=t.length;r<o;++r)if((e=t[r]).name===n)return e.value}function uo(t,n,e){for(var r=0,o=t.length;r<o;++r)if(t[r].name===n){t[r]=eo,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}oo.prototype=ro.prototype={constructor:oo,on:function(t,n){var e,r=this._,o=io(t+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++i<a;)if(e=(t=o[i]).type)r[e]=uo(r[e],t.name,n);else if(null==n)for(e in r)r[e]=uo(r[e],t.name,null);return this}for(;++i<a;)if((e=(t=o[i]).type)&&(e=ao(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new oo(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,o=new Array(e),i=0;i<e;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,e=(r=this._[t]).length;i<e;++i)r[i].value.apply(n,o)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(n,e)}};const so=ro;var co,lo,fo=0,po=0,ho=0,vo=0,go=0,mo=0,yo="object"==typeof performance&&performance.now?performance:Date,wo="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xo(){return go||(wo(bo),go=yo.now()+mo)}function bo(){go=0}function _o(){this._call=this._time=this._next=null}function So(t,n,e){var r=new _o;return r.restart(t,n,e),r}function Eo(){go=(vo=yo.now())+mo,fo=po=0;try{!function(){xo(),++fo;for(var t,n=co;n;)(t=go-n._time)>=0&&n._call.call(null,t),n=n._next;--fo}()}finally{fo=0,function(){for(var t,n,e=co,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:co=n);lo=t,Mo(r)}(),go=0}}function Ao(){var t=yo.now(),n=t-vo;n>1e3&&(mo-=n,vo=t)}function Mo(t){fo||(po&&(po=clearTimeout(po)),t-go>24?(t<1/0&&(po=setTimeout(Eo,t-yo.now()-mo)),ho&&(ho=clearInterval(ho))):(ho||(vo=yo.now(),ho=setInterval(Ao,1e3)),fo=1,wo(Eo)))}function ko(t,n,e){var r=new _o;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}_o.prototype=So.prototype={constructor:_o,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?xo():+e)+(null==n?0:+n),this._next||lo===this||(lo?lo._next=this:co=this,lo=this),this._call=t,this._time=e,Mo()},stop:function(){this._call&&(this._call=null,this._time=1/0,Mo())}};var No=so("start","end","cancel","interrupt"),Co=[];function Oo(t,n,e,r,o,i){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,o=t.__transition;function i(s){var c,l,f,p;if(1!==e.state)return u();for(c in o)if((p=o[c]).name===e.name){if(3===p.state)return ko(i);4===p.state?(p.state=6,p.timer.stop(),p.on.call("interrupt",t,t.__data__,p.index,p.group),delete o[c]):+c<n&&(p.state=6,p.timer.stop(),p.on.call("cancel",t,t.__data__,p.index,p.group),delete o[c])}if(ko((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(p=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=p);r.length=l+1}}function a(n){for(var o=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),i=-1,a=r.length;++i<a;)r[i].call(t,o);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete o[n],o)return;delete t.__transition}o[n]=e,e.timer=So((function(t){e.state=1,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:o,on:No,tween:Co,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function Po(t,n){var e=To(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function jo(t,n){var e=To(t,n);if(e.state>3)throw new Error("too late; already running");return e}function To(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Do,Lo=180/Math.PI,Io={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ro(t,n,e,r,o,i){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(n,t)*Lo,skewX:Math.atan(s)*Lo,scaleX:a,scaleY:u}}function Uo(t,n,e,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var u=[],s=[];return i=t(i),a=t(a),function(t,r,o,i,a,u){if(t!==o||r!==i){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:se(t,o)},{i:s-2,x:se(r,i)})}else(o||i)&&a.push("translate("+o+n+i+e)}(i.translateX,i.translateY,a.translateX,a.translateY,u,s),function(t,n,e,i){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),i.push({i:e.push(o(e)+"rotate(",null,r)-2,x:se(t,n)})):n&&e.push(o(e)+"rotate("+n+r)}(i.rotate,a.rotate,u,s),function(t,n,e,i){t!==n?i.push({i:e.push(o(e)+"skewX(",null,r)-2,x:se(t,n)}):n&&e.push(o(e)+"skewX("+n+r)}(i.skewX,a.skewX,u,s),function(t,n,e,r,i,a){if(t!==e||n!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:se(t,e)},{i:u-2,x:se(n,r)})}else 1===e&&1===r||i.push(o(i)+"scale("+e+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,s),i=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var Fo=Uo((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Io:Ro(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),Vo=Uo((function(t){return null==t?Io:(Do||(Do=document.createElementNS("http://www.w3.org/2000/svg","g")),Do.setAttribute("transform",t),(t=Do.transform.baseVal.consolidate())?Ro((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Io)}),", ",")",")");function Ho(t,n){var e,r;return function(){var o=jo(this,t),i=o.tween;if(i!==e)for(var a=0,u=(r=e=i).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}o.tween=r}}function qo(t,n,e){var r,o;if("function"!=typeof e)throw new Error;return function(){var i=jo(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:n,value:e},s=0,c=o.length;s<c;++s)if(o[s].name===n){o[s]=u;break}s===c&&o.push(u)}i.tween=o}}function zo(t,n,e){var r=t._id;return t.each((function(){var t=jo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return To(t,r).value[n]}}function Bo(t,n){var e;return("number"==typeof n?se:n instanceof qn?oe:(e=qn(n))?(n=e,oe):pe)(t,n)}function $o(t){return function(){this.removeAttribute(t)}}function Xo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Go(t,n,e){var r,o,i=e+"";return function(){var a=this.getAttribute(t);return a===i?null:a===r?o:o=n(r=a,e)}}function Yo(t,n,e){var r,o,i=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===i?null:a===r?o:o=n(r=a,e)}}function Wo(t,n,e){var r,o,i;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===o?i:(o=u,i=n(r=a,s));this.removeAttribute(t)}}function Ko(t,n,e){var r,o,i;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===o?i:(o=u,i=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function Zo(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Qo(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Jo(t,n){var e,r;function o(){var o=n.apply(this,arguments);return o!==r&&(e=(r=o)&&Qo(t,o)),e}return o._value=n,o}function ti(t,n){var e,r;function o(){var o=n.apply(this,arguments);return o!==r&&(e=(r=o)&&Zo(t,o)),e}return o._value=n,o}function ni(t,n){return function(){Po(this,t).delay=+n.apply(this,arguments)}}function ei(t,n){return n=+n,function(){Po(this,t).delay=n}}function ri(t,n){return function(){jo(this,t).duration=+n.apply(this,arguments)}}function oi(t,n){return n=+n,function(){jo(this,t).duration=n}}function ii(t,n){if("function"!=typeof n)throw new Error;return function(){jo(this,t).ease=n}}function ai(t,n,e){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Po:jo;return function(){var a=i(this,t),u=a.on;u!==r&&(o=(r=u).copy()).on(n,e),a.on=o}}var ui=to.prototype.constructor;function si(t){return function(){this.style.removeProperty(t)}}function ci(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function li(t,n,e){var r,o;function i(){var i=n.apply(this,arguments);return i!==o&&(r=(o=i)&&ci(t,i,e)),r}return i._value=n,i}function fi(t){return function(n){this.textContent=t.call(this,n)}}function pi(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&fi(r)),n}return r._value=t,r}var hi=0;function di(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function vi(){return++hi}var gi=to.prototype;di.prototype=function(t){return to().transition(t)}.prototype={constructor:di,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=qe(t));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var u,s,c=r[a],l=c.length,f=i[a]=new Array(l),p=0;p<l;++p)(u=c[p])&&(s=t.call(u,u.__data__,p,c))&&("__data__"in u&&(s.__data__=u.__data__),f[p]=s,Oo(f[p],n,e,p,f,To(u,e)));return new di(i,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=$e(t));for(var r=this._groups,o=r.length,i=[],a=[],u=0;u<o;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var p,h=t.call(s,s.__data__,f,c),d=To(s,e),v=0,g=h.length;v<g;++v)(p=h[v])&&Oo(p,n,e,v,h,d);i.push(h),a.push(s)}return new di(i,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Xe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new di(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=n[u],l=e[u],f=c.length,p=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(p[h]=s);for(;u<r;++u)a[u]=n[u];return new di(a,this._parents,this._name,this._id)},selection:function(){return new ui(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=vi(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=To(a,n);Oo(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new di(r,this._parents,t,e)},call:gi.call,nodes:gi.nodes,node:gi.node,size:gi.size,empty:gi.empty,each:gi.each,on:function(t,n){var e=this._id;return arguments.length<2?To(this.node(),e).on.on(t):this.each(ai(e,t,n))},attr:function(t,n){var e=ur(t),r="transform"===e?Vo:Bo;return this.attrTween(t,"function"==typeof n?(e.local?Ko:Wo)(e,r,zo(this,"attr."+t,n)):null==n?(e.local?Xo:$o)(e):(e.local?Yo:Go)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=ur(t);return this.tween(e,(r.local?Jo:ti)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Fo:Bo;return null==n?this.styleTween(t,function(t,n){var e,r,o;return function(){var i=yr(this,t),a=(this.style.removeProperty(t),yr(this,t));return i===a?null:i===e&&a===r?o:o=n(e=i,r=a)}}(t,r)).on("end.style."+t,si(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,o,i;return function(){var a=yr(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=yr(this,t)),a===s?null:a===r&&s===o?i:(o=s,i=n(r=a,u))}}(t,r,zo(this,"style."+t,n))).each(function(t,n){var e,r,o,i,a="style."+n,u="end."+a;return function(){var s=jo(this,t),c=s.on,l=null==s.value[a]?i||(i=si(n)):void 0;c===e&&o===l||(r=(e=c).copy()).on(u,o=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,o,i=e+"";return function(){var a=yr(this,t);return a===i?null:a===r?o:o=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,li(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(zo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,pi(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,o=To(this.node(),e).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==n?Ho:qo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ni:ei)(n,t)):To(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ri:oi)(n,t)):To(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ii(n,t)):To(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;jo(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,o=e.size();return new Promise((function(i,a){var u={value:a},s={value:function(){0==--o&&i()}};e.each((function(){var e=jo(this,r),o=e.on;o!==t&&((n=(t=o).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===o&&i()}))},[Symbol.iterator]:gi[Symbol.iterator]};var mi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function yi(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}to.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,o,i=t.__transition,a=!0;if(i){for(o in n=null==n?null:n+"",i)(e=i[o]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete i[o]):a=!1;a&&delete t.__transition}}(this,t)}))},to.prototype.transition=function(t){var n,e;t instanceof di?(n=t._id,t=t._name):(n=vi(),(e=mi).time=xo(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)(a=u[c])&&Oo(a,t,n,c,u,e||yi(a,n));return new di(r,this._parents,t,n)};var wi=no(".tooltip");function xi(t){return t}function bi(t,n){var e=n.id,r=n.bbox,o=null==n.properties?{}:n.properties,i=function(t,n){var e=function(t){if(null==t)return xi;var n,e,r=t.scale[0],o=t.scale[1],i=t.translate[0],a=t.translate[1];return function(t,u){u||(n=e=0);var s=2,c=t.length,l=new Array(c);for(l[0]=(n+=t[0])*r+i,l[1]=(e+=t[1])*o+a;s<c;)l[s]=t[s],++s;return l}}(t.transform),r=t.arcs;function o(t,n){n.length&&n.pop();for(var o=r[t<0?~t:t],i=0,a=o.length;i<a;++i)n.push(e(o[i],i));t<0&&function(t,n){for(var e,r=t.length,o=r-n;o<--r;)e=t[o],t[o++]=t[r],t[r]=e}(n,a)}function i(t){return e(t)}function a(t){for(var n=[],e=0,r=t.length;e<r;++e)o(t[e],n);return n.length<2&&n.push(n[0]),n}function u(t){for(var n=a(t);n.length<4;)n.push(n[0]);return n}function s(t){return t.map(u)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=i(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(i);break;case"LineString":e=a(n.arcs);break;case"MultiLineString":e=n.arcs.map(a);break;case"Polygon":e=s(n.arcs);break;case"MultiPolygon":e=n.arcs.map(s);break;default:return null}return{type:r,coordinates:e}}(n)}(t,n);return null==e&&null==r?{type:"Feature",properties:o,geometry:i}:null==r?{type:"Feature",id:e,properties:o,geometry:i}:{type:"Feature",id:e,bbox:r,properties:o,geometry:i}}var _i,Si,Ei,Ai,Mi=function(){var t=10,n=10,e=10,r=10,o={x:{min:-1,max:1},y:{min:-.309,max:.309}},i={x:{min:-.151,max:.151},y:{min:-.151,max:.151}},a=yt(),u=function(t,n){var e,r,o=4.5;function i(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),rt(t,e(r))),r.result()}return i.area=function(t){return rt(t,e(Ot)),Ot.result()},i.measure=function(t){return rt(t,e(pn)),pn.result()},i.bounds=function(t){return rt(t,e(st)),st.result()},i.centroid=function(t){return rt(t,e(tn)),tn.result()},i.projection=function(n){return arguments.length?(e=null==n?(t=null,$):(t=n).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(n=null,new hn):new nn(n=t),"function"!=typeof o&&r.pointRadius(o),i):n},i.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),i):o},i.projection(t).context(n)}(),s=0,c=0,l=5,f=Ve(),p=Ve();function h(h){var v=h.datum();!function(t){var n=t.data,e=t.container.selectAll("svg").data([n]).enter().append("svg").append("g");e.append("g").attr("class","g-orbit").append("path").attr("fill","none").attr("stroke","#b5bdc1").attr("stroke-width",2);var r=e.append("g").attr("class","g-earth");r.append("circle").attr("class","water").attr("fill","#b7c7d1"),r.append("path").attr("class","land").style("fill","#f2f1ee").style("stroke","#ccc").style("stroke-width","0.3px"),e.append("g").attr("class","g-plot")}({container:h,data:v}),f.domain([o.x.min,o.x.max]).range([0,s]),p.domain([o.y.min,o.y.max]).range([c,0]),function(h){var v,g,m=h.container,y=h.data,w=m.select("svg").attr("viewBox","0 0 "+(s+r+n)+" "+(c+t+e)).select("g").attr("transform","translate("+r+","+t+")"),x=w.select(".g-earth"),b=Math.abs(p(i.y.max)-p(0));a.translate([f(0),p(0)]).scale(b).rotate(Ei),u.projection(a),x.select(".water").attr("cx",f(0)).attr("cy",p(0)).attr("r",a.scale()),x.select(".land").datum((v=Si,g=Si.objects.countries,"string"==typeof g&&(g=v.objects[g]),"GeometryCollection"===g.type?{type:"FeatureCollection",features:g.geometries.map((function(t){return bi(v,t)}))}:bi(v,g))).attr("d",u);var _,S,E,A,M,k=w.select(".g-orbit path"),N=Math.abs(f(o.x.max)-f(0)),C=Math.abs(p(o.y.max)-p(0));k.attr("d",(S=(_={cx:f(0),cy:p(0),rx:N,ry:C}).cx,E=_.cy,A=_.rx,M=_.ry,S=parseFloat(S,10),E=parseFloat(E,10),A=parseFloat(A,10),M=parseFloat(M,10),"\n        M".concat(S-A,", ").concat(E,"\n        a").concat(A,", ").concat(M," 0 1, 0 ").concat(2*A,", 0\n        a").concat(A,", ").concat(M," 0 1, 0 ").concat(-2*A,", 0\n        "))),w.select(".g-plot").selectAll(".satellite").data(y,(function(t){return t.sat_name})).join((function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",(function(t){return t.is_perp})).classed("satellite--target",(function(t){return t.is_target})).attr("r",l).attr("data-x",(function(t){return t.x_coord})).attr("data-y",(function(t){return t.y_coord})).attr("transform",(function(t){return"translate(".concat(f(t.x_coord),", ").concat(p(t.y_coord),")")})).on("mouseover",d.mouseover).on("mouseleave",d.mouseleave)}),(function(t){return t.attr("data-x",(function(t){return t.x_coord})).attr("data-y",(function(t){return t.y_coord})).call((function(t){return t.transition(Ai).attr("transform",(function(t){return"translate(".concat(f(t.x_coord),", ").concat(p(t.y_coord),")")}))}))}))}({container:h,data:v})}var d={mouseover:function(t,n){d.showTooltip(n),no(this).classed("is-active",!0)},mouseleave:function(){wi.transition().duration(500).style("opacity",0),no(this).classed("is-active",!1)},showTooltip:function(t,n){var e=[{Date:n.timestamp},{Longitude:n.long_string}];!function(t,n){var e=function(t,n){if(t=function(t){let n;for(;n=t.sourceEvent;)t=n;return t}(t),void 0===n&&(n=t.currentTarget),n){var e=n.ownerSVGElement||n;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=t.clientX,r.y=t.clientY,[(r=r.matrixTransform(n.getScreenCTM().inverse())).x,r.y]}if(n.getBoundingClientRect){var o=n.getBoundingClientRect();return[t.clientX-o.left-n.clientLeft,t.clientY-o.top-n.clientTop]}}return[t.pageX,t.pageY]}(t),r=e.pageY-100,o=e.pageX;o+10>document.body.clientWidth-115&&(o=document.body.clientWidth+5-175),r<25&&(r+=85),wi.transition().duration(200).style("opacity",.9).on("end",(function(){wi.classed("isActive",!0),wi.select(".tooltip-close").on("click",this.hide)})),wi.html(n).style("visibility","visible").style("left",o+"px").style("top",r+"px")}(t,'\n      <p class="tooltip-heading">\n        '.concat(n.sat_name,"</p>\n      ").concat(function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach((function(t,r){var o=null;t.class&&(o=t.class);var i="",a="<br />";n&&(i='<li class="'.concat(o,'">'),a="</li>");var u=Object.keys(t)[0];e+="".concat(i,'<span class="tooltip-label">').concat(u,":</span> ").concat(t[u]).concat(a)})),n&&(e+="</ul>"),e}(e,!0)))}};return h.width=function(){return arguments.length?(s=(arguments.length<=0?void 0:arguments[0])-r-n,h):s},h.height=function(){return arguments.length?(c=(arguments.length<=0?void 0:arguments[0])-t-e,l=Math.max(.025*c,3),Math.max(.0117*c,1),h):c},h}();const ki=function(t){var n;(_i=no(t.container)).datum(t.data),Ai=t.transitionDuration,n=Math.min(_i.node().offsetWidth,window.innerHeight),Mi.width(n).height(n/3),_i.call(Mi)},Ni=function(t,n){Si=t,Ei=n},Ci={btns:document.querySelectorAll(".speed-btn"),init:function(t){var n=t.currentSpeed,e=t.onClick;document.querySelector(".speed-btn--"+n).classList.add("is-active"),Array.from(this.btns).forEach((function(t){t.addEventListener("click",e)}))},getCurrentSpeed:function(){return document.querySelector(".speed-btn.is-active").dataset.speed}};e(3710),e(1058),e(2564);var Oi=e(9365),Pi={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),controlBtn:document.querySelector(".control-btn"),currentDateEl:document.querySelector(".timeline-current-date"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,step:864e5,updateCurrentDate:function(t){this.currentDateEl.innerHTML="".concat(this.formatDate(t))},formatDate:function(t){return t=new Date(t),t=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),"".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=t.onUpdate;this.endDate=e,this.startDate=n,Oi.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}},pips:{mode:"range",density:15}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r),this.el.noUiSlider.on("slide",(function(t,n){var e=new Date(t[n]);e=new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()).getTime(),Pi.el.noUiSlider.set(e)})),this.el.querySelector("[data-value='".concat(n,"']")).innerHTML=this.formatDate(n),this.el.querySelector("[data-value='".concat(e,"']")).innerHTML=this.formatDate(e)},setupBtnControls:function(){this.btnControls.addEventListener("click",(function(){Pi.getCurrentDate()==Pi.endDate&&Pi.el.noUiSlider.set(Pi.startDate),1!=Pi.playing?Pi.startTimeline():Pi.stopTimeline()}))},startTimeline:function(){Pi.timer=setInterval((function(){var t=Pi.getCurrentDate(),n=new Date(t),e=n.setDate(n.getDate()+1);Pi.el.noUiSlider.set(e)}),Pi.transitionDuration),Pi.controlBtn.classList.remove("play-btn"),Pi.controlBtn.classList.add("pause-btn"),Pi.playing=!0},stopTimeline:function(){clearInterval(Pi.timer),Pi.playing=!1,Pi.btnControls.classList.remove("pause-btn"),Pi.btnControls.classList.add("play-btn")}};const ji=Pi;e(7327),e(6699),e(2023),e(189),e(1249),e(1532),e(2707),e(9753),e(2526),e(1817),e(2165),e(7042),e(8309);var Ti={},Di={};function Li(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function Ii(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function Ri(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Ui(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,o=[],i=t.length,a=0,u=0,s=i<=0,c=!1;function l(){if(s)return Di;if(c)return c=!1,Ti;var n,r,o=a;if(34===t.charCodeAt(o)){for(;a++<i&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=i?s=!0:10===(r=t.charCodeAt(a++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(a)&&++a),t.slice(o+1,n-1).replace(/""/g,'"')}for(;a<i;){if(10===(r=t.charCodeAt(n=a++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(o,n)}return s=!0,t.slice(o,i)}for(10===t.charCodeAt(i-1)&&--i,13===t.charCodeAt(i-1)&&--i;(r=l())!==Di;){for(var f=[];r!==Ti&&r!==Di;)f.push(r),r=l();n&&null==(f=n(f,u++))||o.push(f)}return o}function o(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function i(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),o=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Ri(-n,6):n>9999?"+"+Ri(n,6):Ri(n,4))+"-"+Ri(t.getUTCMonth()+1,2)+"-"+Ri(t.getUTCDate(),2)+(i?"T"+Ri(e,2)+":"+Ri(r,2)+":"+Ri(o,2)+"."+Ri(i,3)+"Z":o?"T"+Ri(e,2)+":"+Ri(r,2)+":"+Ri(o,2)+"Z":r||e?"T"+Ri(e,2)+":"+Ri(r,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,o,i=r(t,(function(t,r){if(e)return e(t,r-1);o=t,e=n?function(t,n){var e=Li(t);return function(r,o){return n(e(r),o,t)}}(t,n):Li(t)}));return i.columns=o||[],i},parseRows:r,format:function(n,e){return null==e&&(e=Ii(n)),[e.map(a).join(t)].concat(o(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Ii(t)),o(t,n).join("\n")},formatRows:function(t){return t.map(i).join("\n")},formatRow:i,formatValue:a}}var Fi=Ui(","),Vi=Fi.parse,Hi=(Fi.parseRows,Fi.format,Fi.formatBody,Fi.formatRows,Fi.formatRow,Fi.formatValue,Ui("\t")),qi=Hi.parse;function zi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function Bi(t,n){return fetch(t,n).then(zi)}function $i(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Bi(n,e).then((function(n){return t(n,r)}))}}Hi.parseRows,Hi.format,Hi.formatBody,Hi.formatRows,Hi.formatRow,Hi.formatValue;var Xi=$i(Vi);function Gi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Yi(t,n){return fetch(t,n).then(Gi)}function Wi(t){return function(t){if(Array.isArray(t))return Qi(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||Zi(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ki(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return e}}(t,n)||Zi(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zi(t,n){if(t){if("string"==typeof t)return Qi(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?Qi(t,n):void 0}}function Qi(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function Ji(t,n,e,r,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,o)}function ta(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function a(t){Ji(i,r,o,a,u,"next",t)}function u(t){Ji(i,r,o,a,u,"throw",t)}a(void 0)}))}}$i(qi);var na=["US","China","Russia"];function ea(t){return ra.apply(this,arguments)}function ra(){return(ra=ta(regeneratorRuntime.mark((function t(n){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Xi(n),r=Promise.all([e]).then((function(t){var n=oa(Ki(t,1)[0]);n.forEach((function(t){ia(t,!0)}));var e=Array.from(new Set(Wi(n.map((function(t){return t.timestamp}))))),r=Array.from(new Set(Wi(n.map((function(t){return t.sat_name}))))),o={perp:new Map};return e.forEach((function(t,e){var i=[];r.forEach((function(e){var r=n.filter((function(n){return n.timestamp===t&&n.sat_name===e}));r.length&&i.push(r[0])})),o.perp.set(new Date(t).getTime(),i)})),o.perp=new Map(Array.from(o.perp).sort((function(t,n){return t[0]-n[0]}))),o})),t.abrupt("return",r);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function oa(t){return t.filter((function(t){return"TRUE"===t.include}))}function ia(t,n){return t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("�","&#176;"),t.country.includes("U.S.")&&(t.country="US"),na.includes(t.country)||(t.country="Other"),t.is_perp=n,t.is_geo=!n,t}function aa(){return ua.apply(this,arguments)}function ua(){return(ua=ta(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=Yi("./data/world-110m.json").then((function(t){return t})),t.abrupt("return",n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function sa(t,n,e,r,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,o)}function ca(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function a(t){sa(i,r,o,a,u,"next",t)}function u(t){sa(i,r,o,a,u,"throw",t)}a(void 0)}))}}var la,fa,pa,ha,da,va={half:400,"1x":200,"2x":100},ga=r(),ma="1x",ya=va[ma];function wa(){return(wa=ca(regeneratorRuntime.mark((function t(n,e,r,o){var i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ea(n);case 2:return la=t.sent,t.next=5,aa();case 5:fa=t.sent,Ni(fa,o),i=Array.from(la.perp.keys()),ha=i[0],da=i[i.length-1],pa=ha,Sa(e,r),ba(),_a(),Ea();case 15:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function xa(){pa=ji.getCurrentDate();var t=la.perp.get(pa);ki({data:t,transitionDuration:ya,container:".chart"})}function ba(){Ci.init({currentSpeed:ma,onClick:function(t){ji.stopTimeline(),Array.from(Ci.btns).forEach((function(t){return t.classList.remove("is-active")})),this.classList.add("is-active"),ma=Ci.getCurrentSpeed(),ya=va[ma],ji.transitionDuration=ya,ji.startTimeline()}})}function _a(){ji.transitionDuration=ya,ji.setupTimeline({startDate:ha,endDate:da,transitionDuration:ya,onUpdate:function(t,n){xa(),ji.updateCurrentDate(pa),pa==da&&ji.stopTimeline()}})}function Sa(t,n){Array.from(document.querySelectorAll(".satellite-name")).forEach((function(n){n.textContent=t})),Array.from(document.querySelectorAll(".satellite-country")).forEach((function(t){t.textContent=n}))}function Ea(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach((function(t){return t.classList.remove("hide-on-load")}))}window.addEventListener("resize",(function(){var t=r();ga!=t&&(ga=t,xa())}));var Aa=[0,-18];window.addEventListener("DOMContentLoaded",(function(){!function(t,n,e,r){wa.apply(this,arguments)}("./data/data-russia.csv","Luch","Russian",Aa)}))},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,n,e)=>{var r=e(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,n,e)=>{var r=e(5112),o=e(30),i=e(3070),a=r("unscopables"),u=Array.prototype;null==u[a]&&i.f(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},1530:(t,n,e)=>{"use strict";var r=e(8710).charAt;t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},5787:t=>{t.exports=function(t,n,e){if(!(t instanceof n))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return t}},9670:(t,n,e)=>{var r=e(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},8533:(t,n,e)=>{"use strict";var r=e(2092).forEach,o=e(9341)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,n,e)=>{"use strict";var r=e(9974),o=e(7908),i=e(3411),a=e(7659),u=e(7466),s=e(6135),c=e(1246);t.exports=function(t){var n,e,l,f,p,h,d=o(t),v="function"==typeof this?this:Array,g=arguments.length,m=g>1?arguments[1]:void 0,y=void 0!==m,w=c(d),x=0;if(y&&(m=r(m,g>2?arguments[2]:void 0,2)),null==w||v==Array&&a(w))for(e=new v(n=u(d.length));n>x;x++)h=y?m(d[x],x):d[x],s(e,x,h);else for(p=(f=w.call(d)).next,e=new v;!(l=p.call(f)).done;x++)h=y?i(f,m,[l.value,x],!0):l.value,s(e,x,h);return e.length=x,e}},1318:(t,n,e)=>{var r=e(5656),o=e(7466),i=e(1400),a=function(t){return function(n,e,a){var u,s=r(n),c=o(s.length),l=i(a,c);if(t&&e!=e){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((t||l in s)&&s[l]===e)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,n,e)=>{var r=e(9974),o=e(8361),i=e(7908),a=e(7466),u=e(5417),s=[].push,c=function(t){var n=1==t,e=2==t,c=3==t,l=4==t,f=6==t,p=7==t,h=5==t||f;return function(d,v,g,m){for(var y,w,x=i(d),b=o(x),_=r(v,g,3),S=a(b.length),E=0,A=m||u,M=n?A(d,S):e||p?A(d,0):void 0;S>E;E++)if((h||E in b)&&(w=_(y=b[E],E,x),t))if(n)M[E]=w;else if(w)switch(t){case 3:return!0;case 5:return y;case 6:return E;case 2:s.call(M,y)}else switch(t){case 4:return!1;case 7:s.call(M,y)}return f?-1:c||l?l:M}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},1194:(t,n,e)=>{var r=e(7293),o=e(5112),i=e(7392),a=o("species");t.exports=function(t){return i>=51||!r((function(){var n=[];return(n.constructor={})[a]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},9341:(t,n,e)=>{"use strict";var r=e(7293);t.exports=function(t,n){var e=[][t];return!!e&&r((function(){e.call(null,n||function(){throw 1},1)}))}},5417:(t,n,e)=>{var r=e(111),o=e(3157),i=e(5112)("species");t.exports=function(t,n){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===n?0:n)}},3411:(t,n,e)=>{var r=e(9670),o=e(9212);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){throw o(t),n}}},7072:(t,n,e)=>{var r=e(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i={};i[r]=function(){return{next:function(){return{done:e=!0}}}},t(i)}catch(t){}return e}},4326:t=>{var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},648:(t,n,e)=>{var r=e(1694),o=e(4326),i=e(5112)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:a?o(n):"Object"==(r=o(n))&&"function"==typeof n.callee?"Arguments":r}},5631:(t,n,e)=>{"use strict";var r=e(3070).f,o=e(30),i=e(2248),a=e(9974),u=e(5787),s=e(408),c=e(654),l=e(6340),f=e(9781),p=e(2423).fastKey,h=e(9909),d=h.set,v=h.getterFor;t.exports={getConstructor:function(t,n,e,c){var l=t((function(t,r){u(t,l,n),d(t,{type:n,index:o(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&s(r,t[c],{that:t,AS_ENTRIES:e})})),h=v(n),g=function(t,n,e){var r,o,i=h(t),a=m(t,n);return a?a.value=e:(i.last=a={index:o=p(n,!0),key:n,value:e,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),f?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},m=function(t,n){var e,r=h(t),o=p(n);if("F"!==o)return r.index[o];for(e=r.first;e;e=e.next)if(e.key==n)return e};return i(l.prototype,{clear:function(){for(var t=h(this),n=t.index,e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=void 0),delete n[e.index],e=e.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var n=this,e=h(n),r=m(n,t);if(r){var o=r.next,i=r.previous;delete e.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),e.first==r&&(e.first=o),e.last==r&&(e.last=i),f?e.size--:n.size--}return!!r},forEach:function(t){for(var n,e=h(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.next:e.first;)for(r(n.value,n.key,this);n&&n.removed;)n=n.previous},has:function(t){return!!m(this,t)}}),i(l.prototype,e?{get:function(t){var n=m(this,t);return n&&n.value},set:function(t,n){return g(this,0===t?0:t,n)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return h(this).size}}),l},setStrong:function(t,n,e){var r=n+" Iterator",o=v(n),i=v(r);c(t,n,(function(t,n){d(this,{type:r,target:t,state:o(t),kind:n,last:void 0})}),(function(){for(var t=i(this),n=t.kind,e=t.last;e&&e.removed;)e=e.previous;return t.target&&(t.last=e=e?e.next:t.state.first)?"keys"==n?{value:e.key,done:!1}:"values"==n?{value:e.value,done:!1}:{value:[e.key,e.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),e?"entries":"values",!e,!0),l(n)}}},7710:(t,n,e)=>{"use strict";var r=e(2109),o=e(7854),i=e(4705),a=e(1320),u=e(2423),s=e(408),c=e(5787),l=e(111),f=e(7293),p=e(7072),h=e(8003),d=e(9587);t.exports=function(t,n,e){var v=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),m=v?"set":"add",y=o[t],w=y&&y.prototype,x=y,b={},_=function(t){var n=w[t];a(w,t,"add"==t?function(t){return n.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&n.call(this,0===t?0:t)}:function(t,e){return n.call(this,0===t?0:t,e),this})};if(i(t,"function"!=typeof y||!(g||w.forEach&&!f((function(){(new y).entries().next()})))))x=e.getConstructor(n,t,v,m),u.REQUIRED=!0;else if(i(t,!0)){var S=new x,E=S[m](g?{}:-0,1)!=S,A=f((function(){S.has(1)})),M=p((function(t){new y(t)})),k=!g&&f((function(){for(var t=new y,n=5;n--;)t[m](n,n);return!t.has(-0)}));M||((x=n((function(n,e){c(n,x,t);var r=d(new y,n,x);return null!=e&&s(e,r[m],{that:r,AS_ENTRIES:v}),r}))).prototype=w,w.constructor=x),(A||k)&&(_("delete"),_("has"),v&&_("get")),(k||E)&&_(m),g&&w.clear&&delete w.clear}return b[t]=x,r({global:!0,forced:x!=y},b),h(x,t),g||e.setStrong(x,t,v),x}},9920:(t,n,e)=>{var r=e(6656),o=e(3887),i=e(1236),a=e(3070);t.exports=function(t,n){for(var e=o(n),u=a.f,s=i.f,c=0;c<e.length;c++){var l=e[c];r(t,l)||u(t,l,s(n,l))}}},4964:(t,n,e)=>{var r=e(5112)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,"/./"[t](n)}catch(t){}}return!1}},8544:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:(t,n,e)=>{"use strict";var r=e(3383).IteratorPrototype,o=e(30),i=e(9114),a=e(8003),u=e(7497),s=function(){return this};t.exports=function(t,n,e){var c=n+" Iterator";return t.prototype=o(r,{next:i(1,e)}),a(t,c,!1,!0),u[c]=s,t}},8880:(t,n,e)=>{var r=e(9781),o=e(3070),i=e(9114);t.exports=r?function(t,n,e){return o.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},9114:t=>{t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},6135:(t,n,e)=>{"use strict";var r=e(7593),o=e(3070),i=e(9114);t.exports=function(t,n,e){var a=r(n);a in t?o.f(t,a,i(0,e)):t[a]=e}},654:(t,n,e)=>{"use strict";var r=e(2109),o=e(4994),i=e(9518),a=e(7674),u=e(8003),s=e(8880),c=e(1320),l=e(5112),f=e(1913),p=e(7497),h=e(3383),d=h.IteratorPrototype,v=h.BUGGY_SAFARI_ITERATORS,g=l("iterator"),m="keys",y="values",w="entries",x=function(){return this};t.exports=function(t,n,e,l,h,b,_){o(e,n,l);var S,E,A,M=function(t){if(t===h&&P)return P;if(!v&&t in C)return C[t];switch(t){case m:case y:case w:return function(){return new e(this,t)}}return function(){return new e(this)}},k=n+" Iterator",N=!1,C=t.prototype,O=C[g]||C["@@iterator"]||h&&C[h],P=!v&&O||M(h),j="Array"==n&&C.entries||O;if(j&&(S=i(j.call(new t)),d!==Object.prototype&&S.next&&(f||i(S)===d||(a?a(S,d):"function"!=typeof S[g]&&s(S,g,x)),u(S,k,!0,!0),f&&(p[k]=x))),h==y&&O&&O.name!==y&&(N=!0,P=function(){return O.call(this)}),f&&!_||C[g]===P||s(C,g,P),p[n]=P,h)if(E={values:M(y),keys:b?P:M(m),entries:M(w)},_)for(A in E)(v||N||!(A in C))&&c(C,A,E[A]);else r({target:n,proto:!0,forced:v||N},E);return E}},7235:(t,n,e)=>{var r=e(857),o=e(6656),i=e(6061),a=e(3070).f;t.exports=function(t){var n=r.Symbol||(r.Symbol={});o(n,t)||a(n,t,{value:i.f(t)})}},9781:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,n,e)=>{var r=e(7854),o=e(111),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},6833:(t,n,e)=>{var r=e(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},5268:(t,n,e)=>{var r=e(4326),o=e(7854);t.exports="process"==r(o.process)},1036:(t,n,e)=>{var r=e(8113);t.exports=/web0s(?!.*chrome)/i.test(r)},8113:(t,n,e)=>{var r=e(5005);t.exports=r("navigator","userAgent")||""},7392:(t,n,e)=>{var r,o,i=e(7854),a=e(8113),u=i.process,s=u&&u.versions,c=s&&s.v8;c?o=(r=c.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,n,e)=>{var r=e(7854),o=e(1236).f,i=e(8880),a=e(1320),u=e(3505),s=e(9920),c=e(4705);t.exports=function(t,n){var e,l,f,p,h,d=t.target,v=t.global,g=t.stat;if(e=v?r:g?r[d]||u(d,{}):(r[d]||{}).prototype)for(l in n){if(p=n[l],f=t.noTargetGet?(h=o(e,l))&&h.value:e[l],!c(v?l:d+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;s(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(e,l,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,n,e)=>{"use strict";e(4916);var r=e(1320),o=e(7293),i=e(5112),a=e(2261),u=e(8880),s=i("species"),c=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=i("replace"),p=!!/./[f]&&""===/./[f]("a","$0"),h=!o((function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2!==e.length||"a"!==e[0]||"b"!==e[1]}));t.exports=function(t,n,e,f){var d=i(t),v=!o((function(){var n={};return n[d]=function(){return 7},7!=""[t](n)})),g=v&&!o((function(){var n=!1,e=/a/;return"split"===t&&((e={}).constructor={},e.constructor[s]=function(){return e},e.flags="",e[d]=/./[d]),e.exec=function(){return n=!0,null},e[d](""),!n}));if(!v||!g||"replace"===t&&(!c||!l||p)||"split"===t&&!h){var m=/./[d],y=e(d,""[t],(function(t,n,e,r,o){return n.exec===a?v&&!o?{done:!0,value:m.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),w=y[0],x=y[1];r(String.prototype,t,w),r(RegExp.prototype,d,2==n?function(t,n){return x.call(t,this,n)}:function(t){return x.call(t,this)})}f&&u(RegExp.prototype[d],"sham",!0)}},6677:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,n,e)=>{var r=e(3099);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 0:return function(){return t.call(n)};case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},5005:(t,n,e)=>{var r=e(857),o=e(7854),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][n]||o[t]&&o[t][n]}},1246:(t,n,e)=>{var r=e(648),o=e(7497),i=e(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},647:(t,n,e)=>{var r=e(7908),o=Math.floor,i="".replace,a=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,n,e,s,c,l){var f=e+t.length,p=s.length,h=u;return void 0!==c&&(c=r(c),h=a),i.call(l,h,(function(r,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(f);case"<":a=c[i.slice(1,-1)];break;default:var u=+i;if(0===u)return r;if(u>p){var l=o(u/10);return 0===l?r:l<=p?void 0===s[l-1]?i.charAt(1):s[l-1]+i.charAt(1):r}a=s[u-1]}return void 0===a?"":a}))}},7854:(t,n,e)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e.g&&e.g)||function(){return this}()||Function("return this")()},6656:t=>{var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},3501:t=>{t.exports={}},842:(t,n,e)=>{var r=e(7854);t.exports=function(t,n){var e=r.console;e&&e.error&&(1===arguments.length?e.error(t):e.error(t,n))}},490:(t,n,e)=>{var r=e(5005);t.exports=r("document","documentElement")},4664:(t,n,e)=>{var r=e(9781),o=e(7293),i=e(317);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,n,e)=>{var r=e(7293),o=e(4326),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},9587:(t,n,e)=>{var r=e(111),o=e(7674);t.exports=function(t,n,e){var i,a;return o&&"function"==typeof(i=n.constructor)&&i!==e&&r(a=i.prototype)&&a!==e.prototype&&o(t,a),t}},2788:(t,n,e)=>{var r=e(5465),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},2423:(t,n,e)=>{var r=e(3501),o=e(111),i=e(6656),a=e(3070).f,u=e(9711),s=e(6677),c=u("meta"),l=0,f=Object.isExtensible||function(){return!0},p=function(t){a(t,c,{value:{objectID:"O"+ ++l,weakData:{}}})},h=t.exports={REQUIRED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,c)){if(!f(t))return"F";if(!n)return"E";p(t)}return t[c].objectID},getWeakData:function(t,n){if(!i(t,c)){if(!f(t))return!0;if(!n)return!1;p(t)}return t[c].weakData},onFreeze:function(t){return s&&h.REQUIRED&&f(t)&&!i(t,c)&&p(t),t}};r[c]=!0},9909:(t,n,e)=>{var r,o,i,a=e(8536),u=e(7854),s=e(111),c=e(8880),l=e(6656),f=e(5465),p=e(6200),h=e(3501),d=u.WeakMap;if(a){var v=f.state||(f.state=new d),g=v.get,m=v.has,y=v.set;r=function(t,n){return n.facade=t,y.call(v,t,n),n},o=function(t){return g.call(v,t)||{}},i=function(t){return m.call(v,t)}}else{var w=p("state");h[w]=!0,r=function(t,n){return n.facade=t,c(t,w,n),n},o=function(t){return l(t,w)?t[w]:{}},i=function(t){return l(t,w)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(n){var e;if(!s(n)||(e=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},7659:(t,n,e)=>{var r=e(5112),o=e(7497),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},3157:(t,n,e)=>{var r=e(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},4705:(t,n,e)=>{var r=e(7293),o=/#|\.prototype\./,i=function(t,n){var e=u[a(t)];return e==c||e!=s&&("function"==typeof n?r(n):!!n)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";t.exports=i},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,n,e)=>{var r=e(111),o=e(4326),i=e(5112)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},408:(t,n,e)=>{var r=e(9670),o=e(7659),i=e(7466),a=e(9974),u=e(1246),s=e(9212),c=function(t,n){this.stopped=t,this.result=n};t.exports=function(t,n,e){var l,f,p,h,d,v,g,m=e&&e.that,y=!(!e||!e.AS_ENTRIES),w=!(!e||!e.IS_ITERATOR),x=!(!e||!e.INTERRUPTED),b=a(n,m,1+y+x),_=function(t){return l&&s(l),new c(!0,t)},S=function(t){return y?(r(t),x?b(t[0],t[1],_):b(t[0],t[1])):x?b(t,_):b(t)};if(w)l=t;else{if("function"!=typeof(f=u(t)))throw TypeError("Target is not iterable");if(o(f)){for(p=0,h=i(t.length);h>p;p++)if((d=S(t[p]))&&d instanceof c)return d;return new c(!1)}l=f.call(t)}for(v=l.next;!(g=v.call(l)).done;){try{d=S(g.value)}catch(t){throw s(l),t}if("object"==typeof d&&d&&d instanceof c)return d}return new c(!1)}},9212:(t,n,e)=>{var r=e(9670);t.exports=function(t){var n=t.return;if(void 0!==n)return r(n.call(t)).value}},3383:(t,n,e)=>{"use strict";var r,o,i,a=e(7293),u=e(9518),s=e(8880),c=e(6656),l=e(5112),f=e(1913),p=l("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(r=o):h=!0);var d=null==r||a((function(){var t={};return r[p].call(t)!==t}));d&&(r={}),f&&!d||c(r,p)||s(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},7497:t=>{t.exports={}},5948:(t,n,e)=>{var r,o,i,a,u,s,c,l,f=e(7854),p=e(1236).f,h=e(261).set,d=e(6833),v=e(1036),g=e(5268),m=f.MutationObserver||f.WebKitMutationObserver,y=f.document,w=f.process,x=f.Promise,b=p(f,"queueMicrotask"),_=b&&b.value;_||(r=function(){var t,n;for(g&&(t=w.domain)&&t.exit();o;){n=o.fn,o=o.next;try{n()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},d||g||v||!m||!y?x&&x.resolve?(c=x.resolve(void 0),l=c.then,a=function(){l.call(c,r)}):a=g?function(){w.nextTick(r)}:function(){h.call(f,r)}:(u=!0,s=y.createTextNode(""),new m(r).observe(s,{characterData:!0}),a=function(){s.data=u=!u})),t.exports=_||function(t){var n={fn:t,next:void 0};i&&(i.next=n),o||(o=n,a()),i=n}},3366:(t,n,e)=>{var r=e(7854);t.exports=r.Promise},133:(t,n,e)=>{var r=e(5268),o=e(7392),i=e(7293);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},8536:(t,n,e)=>{var r=e(7854),o=e(2788),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},8523:(t,n,e)=>{"use strict";var r=e(3099),o=function(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=r(n),this.reject=r(e)};t.exports.f=function(t){return new o(t)}},3929:(t,n,e)=>{var r=e(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},2814:(t,n,e)=>{var r=e(7854),o=e(3111).trim,i=e(1361),a=r.parseFloat,u=1/a(i+"-0")!=-1/0;t.exports=u?function(t){var n=o(String(t)),e=a(n);return 0===e&&"-"==n.charAt(0)?-0:e}:a},3009:(t,n,e)=>{var r=e(7854),o=e(3111).trim,i=e(1361),a=r.parseInt,u=/^[+-]?0[Xx]/,s=8!==a(i+"08")||22!==a(i+"0x16");t.exports=s?function(t,n){var e=o(String(t));return a(e,n>>>0||(u.test(e)?16:10))}:a},30:(t,n,e)=>{var r,o=e(9670),i=e(6048),a=e(748),u=e(3501),s=e(490),c=e(317),l=e(6200)("IE_PROTO"),f=function(){},p=function(t){return"<script>"+t+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,n;h=r?function(t){t.write(p("")),t.close();var n=t.parentWindow.Object;return t=null,n}(r):((n=c("iframe")).style.display="none",s.appendChild(n),n.src=String("javascript:"),(t=n.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var e=a.length;e--;)delete h.prototype[a[e]];return h()};u[l]=!0,t.exports=Object.create||function(t,n){var e;return null!==t?(f.prototype=o(t),e=new f,f.prototype=null,e[l]=t):e=h(),void 0===n?e:i(e,n)}},6048:(t,n,e)=>{var r=e(9781),o=e(3070),i=e(9670),a=e(1956);t.exports=r?Object.defineProperties:function(t,n){i(t);for(var e,r=a(n),u=r.length,s=0;u>s;)o.f(t,e=r[s++],n[e]);return t}},3070:(t,n,e)=>{var r=e(9781),o=e(4664),i=e(9670),a=e(7593),u=Object.defineProperty;n.f=r?u:function(t,n,e){if(i(t),n=a(n,!0),i(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},1236:(t,n,e)=>{var r=e(9781),o=e(5296),i=e(9114),a=e(5656),u=e(7593),s=e(6656),c=e(4664),l=Object.getOwnPropertyDescriptor;n.f=r?l:function(t,n){if(t=a(t),n=u(n,!0),c)try{return l(t,n)}catch(t){}if(s(t,n))return i(!o.f.call(t,n),t[n])}},1156:(t,n,e)=>{var r=e(5656),o=e(8006).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},8006:(t,n,e)=>{var r=e(6324),o=e(748).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},5181:(t,n)=>{n.f=Object.getOwnPropertySymbols},9518:(t,n,e)=>{var r=e(6656),o=e(7908),i=e(6200),a=e(8544),u=i("IE_PROTO"),s=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},6324:(t,n,e)=>{var r=e(6656),o=e(5656),i=e(1318).indexOf,a=e(3501);t.exports=function(t,n){var e,u=o(t),s=0,c=[];for(e in u)!r(a,e)&&r(u,e)&&c.push(e);for(;n.length>s;)r(u,e=n[s++])&&(~i(c,e)||c.push(e));return c}},1956:(t,n,e)=>{var r=e(6324),o=e(748);t.exports=Object.keys||function(t){return r(t,o)}},5296:(t,n)=>{"use strict";var e={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!e.call({1:2},1);n.f=o?function(t){var n=r(this,t);return!!n&&n.enumerable}:e},7674:(t,n,e)=>{var r=e(9670),o=e(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,e={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),n=e instanceof Array}catch(t){}return function(e,i){return r(e),o(i),n?t.call(e,i):e.__proto__=i,e}}():void 0)},288:(t,n,e)=>{"use strict";var r=e(1694),o=e(648);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},3887:(t,n,e)=>{var r=e(5005),o=e(8006),i=e(5181),a=e(9670);t.exports=r("Reflect","ownKeys")||function(t){var n=o.f(a(t)),e=i.f;return e?n.concat(e(t)):n}},857:(t,n,e)=>{var r=e(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,n,e)=>{var r=e(9670),o=e(111),i=e(8523);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},2248:(t,n,e)=>{var r=e(1320);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},1320:(t,n,e)=>{var r=e(7854),o=e(8880),i=e(6656),a=e(3505),u=e(2788),s=e(9909),c=s.get,l=s.enforce,f=String(String).split("String");(t.exports=function(t,n,e,u){var s,c=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,h=!!u&&!!u.noTargetGet;"function"==typeof e&&("string"!=typeof n||i(e,"name")||o(e,"name",n),(s=l(e)).source||(s.source=f.join("string"==typeof n?n:""))),t!==r?(c?!h&&t[n]&&(p=!0):delete t[n],p?t[n]=e:o(t,n,e)):p?t[n]=e:a(n,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},7651:(t,n,e)=>{var r=e(4326),o=e(2261);t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},2261:(t,n,e)=>{"use strict";var r,o,i=e(7066),a=e(2999),u=RegExp.prototype.exec,s=String.prototype.replace,c=u,l=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(l||p||f)&&(c=function(t){var n,e,r,o,a=this,c=f&&a.sticky,h=i.call(a),d=a.source,v=0,g=t;return c&&(-1===(h=h.replace("y","")).indexOf("g")&&(h+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",g=" "+g,v++),e=new RegExp("^(?:"+d+")",h)),p&&(e=new RegExp("^"+d+"$(?!\\s)",h)),l&&(n=a.lastIndex),r=u.call(c?e:a,g),c?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),p&&r&&r.length>1&&s.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=c},7066:(t,n,e)=>{"use strict";var r=e(9670);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.dotAll&&(n+="s"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},2999:(t,n,e)=>{"use strict";var r=e(7293);function o(t,n){return RegExp(t,n)}n.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),n.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,n,e)=>{var r=e(7854),o=e(8880);t.exports=function(t,n){try{o(r,t,n)}catch(e){r[t]=n}return n}},6340:(t,n,e)=>{"use strict";var r=e(5005),o=e(3070),i=e(5112),a=e(9781),u=i("species");t.exports=function(t){var n=r(t),e=o.f;a&&n&&!n[u]&&e(n,u,{configurable:!0,get:function(){return this}})}},8003:(t,n,e)=>{var r=e(3070).f,o=e(6656),i=e(5112)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},6200:(t,n,e)=>{var r=e(2309),o=e(9711),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,n,e)=>{var r=e(7854),o=e(3505),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},2309:(t,n,e)=>{var r=e(1913),o=e(5465);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.9.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,n,e)=>{var r=e(9670),o=e(3099),i=e(5112)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[i])?n:o(e)}},8710:(t,n,e)=>{var r=e(9958),o=e(4488),i=function(t){return function(n,e){var i,a,u=String(o(n)),s=r(e),c=u.length;return s<0||s>=c?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):i:t?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},6091:(t,n,e)=>{var r=e(7293),o=e(1361);t.exports=function(t){return r((function(){return!!o[t]()||"​᠎"!="​᠎"[t]()||o[t].name!==t}))}},3111:(t,n,e)=>{var r=e(4488),o="["+e(1361)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),u=function(t){return function(n){var e=String(r(n));return 1&t&&(e=e.replace(i,"")),2&t&&(e=e.replace(a,"")),e}};t.exports={start:u(1),end:u(2),trim:u(3)}},261:(t,n,e)=>{var r,o,i,a=e(7854),u=e(7293),s=e(9974),c=e(490),l=e(317),f=e(6833),p=e(5268),h=a.location,d=a.setImmediate,v=a.clearImmediate,g=a.process,m=a.MessageChannel,y=a.Dispatch,w=0,x={},b=function(t){if(x.hasOwnProperty(t)){var n=x[t];delete x[t],n()}},_=function(t){return function(){b(t)}},S=function(t){b(t.data)},E=function(t){a.postMessage(t+"",h.protocol+"//"+h.host)};d&&v||(d=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return x[++w]=function(){("function"==typeof t?t:Function(t)).apply(void 0,n)},r(w),w},v=function(t){delete x[t]},p?r=function(t){g.nextTick(_(t))}:y&&y.now?r=function(t){y.now(_(t))}:m&&!f?(i=(o=new m).port2,o.port1.onmessage=S,r=s(i.postMessage,i,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&h&&"file:"!==h.protocol&&!u(E)?(r=E,a.addEventListener("message",S,!1)):r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),b(t)}}:function(t){setTimeout(_(t),0)}),t.exports={set:d,clear:v}},1400:(t,n,e)=>{var r=e(9958),o=Math.max,i=Math.min;t.exports=function(t,n){var e=r(t);return e<0?o(e+n,0):i(e,n)}},5656:(t,n,e)=>{var r=e(8361),o=e(4488);t.exports=function(t){return r(o(t))}},9958:t=>{var n=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:n)(t)}},7466:(t,n,e)=>{var r=e(9958),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},7908:(t,n,e)=>{var r=e(4488);t.exports=function(t){return Object(r(t))}},7593:(t,n,e)=>{var r=e(111);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},1694:(t,n,e)=>{var r={};r[e(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},9711:t=>{var n=0,e=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+e).toString(36)}},3307:(t,n,e)=>{var r=e(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,n,e)=>{var r=e(5112);n.f=r},5112:(t,n,e)=>{var r=e(7854),o=e(2309),i=e(6656),a=e(9711),u=e(133),s=e(3307),c=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;t.exports=function(t){return i(c,t)&&(u||"string"==typeof c[t])||(u&&i(l,t)?c[t]=l[t]:c[t]=f("Symbol."+t)),c[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2222:(t,n,e)=>{"use strict";var r=e(2109),o=e(7293),i=e(3157),a=e(111),u=e(7908),s=e(7466),c=e(6135),l=e(5417),f=e(1194),p=e(5112),h=e(7392),d=p("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",m=h>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),y=f("concat"),w=function(t){if(!a(t))return!1;var n=t[d];return void 0!==n?!!n:i(t)};r({target:"Array",proto:!0,forced:!m||!y},{concat:function(t){var n,e,r,o,i,a=u(this),f=l(a,0),p=0;for(n=-1,r=arguments.length;n<r;n++)if(w(i=-1===n?a:arguments[n])){if(p+(o=s(i.length))>v)throw TypeError(g);for(e=0;e<o;e++,p++)e in i&&c(f,p,i[e])}else{if(p>=v)throw TypeError(g);c(f,p++,i)}return f.length=p,f}})},7327:(t,n,e)=>{"use strict";var r=e(2109),o=e(2092).filter;r({target:"Array",proto:!0,forced:!e(1194)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9554:(t,n,e)=>{"use strict";var r=e(2109),o=e(8533);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},1038:(t,n,e)=>{var r=e(2109),o=e(8457);r({target:"Array",stat:!0,forced:!e(7072)((function(t){Array.from(t)}))},{from:o})},6699:(t,n,e)=>{"use strict";var r=e(2109),o=e(1318).includes,i=e(1223);r({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},9753:(t,n,e)=>{e(2109)({target:"Array",stat:!0},{isArray:e(3157)})},6992:(t,n,e)=>{"use strict";var r=e(5656),o=e(1223),i=e(7497),a=e(9909),u=e(654),s="Array Iterator",c=a.set,l=a.getterFor(s);t.exports=u(Array,"Array",(function(t,n){c(this,{type:s,target:r(t),index:0,kind:n})}),(function(){var t=l(this),n=t.target,e=t.kind,r=t.index++;return!n||r>=n.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==e?{value:r,done:!1}:"values"==e?{value:n[r],done:!1}:{value:[r,n[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},9600:(t,n,e)=>{"use strict";var r=e(2109),o=e(8361),i=e(5656),a=e(9341),u=[].join,s=o!=Object,c=a("join",",");r({target:"Array",proto:!0,forced:s||!c},{join:function(t){return u.call(i(this),void 0===t?",":t)}})},1249:(t,n,e)=>{"use strict";var r=e(2109),o=e(2092).map;r({target:"Array",proto:!0,forced:!e(1194)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},7042:(t,n,e)=>{"use strict";var r=e(2109),o=e(111),i=e(3157),a=e(1400),u=e(7466),s=e(5656),c=e(6135),l=e(5112),f=e(1194)("slice"),p=l("species"),h=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,n){var e,r,l,f=s(this),v=u(f.length),g=a(t,v),m=a(void 0===n?v:n,v);if(i(f)&&("function"!=typeof(e=f.constructor)||e!==Array&&!i(e.prototype)?o(e)&&null===(e=e[p])&&(e=void 0):e=void 0,e===Array||void 0===e))return h.call(f,g,m);for(r=new(void 0===e?Array:e)(d(m-g,0)),l=0;g<m;g++,l++)g in f&&c(r,l,f[g]);return r.length=l,r}})},2707:(t,n,e)=>{"use strict";var r=e(2109),o=e(3099),i=e(7908),a=e(7293),u=e(9341),s=[],c=s.sort,l=a((function(){s.sort(void 0)})),f=a((function(){s.sort(null)})),p=u("sort");r({target:"Array",proto:!0,forced:l||!f||!p},{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},3710:(t,n,e)=>{var r=e(1320),o=Date.prototype,i="Invalid Date",a=o.toString,u=o.getTime;new Date(NaN)+""!=i&&r(o,"toString",(function(){var t=u.call(this);return t==t?a.call(this):i}))},8309:(t,n,e)=>{var r=e(9781),o=e(3070).f,i=Function.prototype,a=i.toString,u=/^\s*function ([^ (]*)/,s="name";r&&!(s in i)&&o(i,s,{configurable:!0,get:function(){try{return a.call(this).match(u)[1]}catch(t){return""}}})},1532:(t,n,e)=>{"use strict";var r=e(7710),o=e(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},7941:(t,n,e)=>{var r=e(2109),o=e(7908),i=e(1956);r({target:"Object",stat:!0,forced:e(7293)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},1539:(t,n,e)=>{var r=e(1694),o=e(1320),i=e(288);r||o(Object.prototype,"toString",i,{unsafe:!0})},4678:(t,n,e)=>{var r=e(2109),o=e(2814);r({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:(t,n,e)=>{var r=e(2109),o=e(3009);r({global:!0,forced:parseInt!=o},{parseInt:o})},8674:(t,n,e)=>{"use strict";var r,o,i,a,u=e(2109),s=e(1913),c=e(7854),l=e(5005),f=e(3366),p=e(1320),h=e(2248),d=e(8003),v=e(6340),g=e(111),m=e(3099),y=e(5787),w=e(2788),x=e(408),b=e(7072),_=e(6707),S=e(261).set,E=e(5948),A=e(9478),M=e(842),k=e(8523),N=e(2534),C=e(9909),O=e(4705),P=e(5112),j=e(5268),T=e(7392),D=P("species"),L="Promise",I=C.get,R=C.set,U=C.getterFor(L),F=f,V=c.TypeError,H=c.document,q=c.process,z=l("fetch"),B=k.f,$=B,X=!!(H&&H.createEvent&&c.dispatchEvent),G="function"==typeof PromiseRejectionEvent,Y="unhandledrejection",W=O(L,(function(){if(w(F)===String(F)){if(66===T)return!0;if(!j&&!G)return!0}if(s&&!F.prototype.finally)return!0;if(T>=51&&/native code/.test(F))return!1;var t=F.resolve(1),n=function(t){t((function(){}),(function(){}))};return(t.constructor={})[D]=n,!(t.then((function(){}))instanceof n)})),K=W||!b((function(t){F.all(t).catch((function(){}))})),Z=function(t){var n;return!(!g(t)||"function"!=typeof(n=t.then))&&n},Q=function(t,n){if(!t.notified){t.notified=!0;var e=t.reactions;E((function(){for(var r=t.value,o=1==t.state,i=0;e.length>i;){var a,u,s,c=e[i++],l=o?c.ok:c.fail,f=c.resolve,p=c.reject,h=c.domain;try{l?(o||(2===t.rejection&&et(t),t.rejection=1),!0===l?a=r:(h&&h.enter(),a=l(r),h&&(h.exit(),s=!0)),a===c.promise?p(V("Promise-chain cycle")):(u=Z(a))?u.call(a,f,p):f(a)):p(r)}catch(t){h&&!s&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&tt(t)}))}},J=function(t,n,e){var r,o;X?((r=H.createEvent("Event")).promise=n,r.reason=e,r.initEvent(t,!1,!0),c.dispatchEvent(r)):r={promise:n,reason:e},!G&&(o=c["on"+t])?o(r):t===Y&&M("Unhandled promise rejection",e)},tt=function(t){S.call(c,(function(){var n,e=t.facade,r=t.value;if(nt(t)&&(n=N((function(){j?q.emit("unhandledRejection",r,e):J(Y,e,r)})),t.rejection=j||nt(t)?2:1,n.error))throw n.value}))},nt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){S.call(c,(function(){var n=t.facade;j?q.emit("rejectionHandled",n):J("rejectionhandled",n,t.value)}))},rt=function(t,n,e){return function(r){t(n,r,e)}},ot=function(t,n,e){t.done||(t.done=!0,e&&(t=e),t.value=n,t.state=2,Q(t,!0))},it=function(t,n,e){if(!t.done){t.done=!0,e&&(t=e);try{if(t.facade===n)throw V("Promise can't be resolved itself");var r=Z(n);r?E((function(){var e={done:!1};try{r.call(n,rt(it,e,t),rt(ot,e,t))}catch(n){ot(e,n,t)}})):(t.value=n,t.state=1,Q(t,!1))}catch(n){ot({done:!1},n,t)}}};W&&(F=function(t){y(this,F,L),m(t),r.call(this);var n=I(this);try{t(rt(it,n),rt(ot,n))}catch(t){ot(n,t)}},(r=function(t){R(this,{type:L,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(F.prototype,{then:function(t,n){var e=U(this),r=B(_(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=j?q.domain:void 0,e.parent=!0,e.reactions.push(r),0!=e.state&&Q(e,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,n=I(t);this.promise=t,this.resolve=rt(it,n),this.reject=rt(ot,n)},k.f=B=function(t){return t===F||t===i?new o(t):$(t)},s||"function"!=typeof f||(a=f.prototype.then,p(f.prototype,"then",(function(t,n){var e=this;return new F((function(t,n){a.call(e,t,n)})).then(t,n)}),{unsafe:!0}),"function"==typeof z&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return A(F,z.apply(c,arguments))}}))),u({global:!0,wrap:!0,forced:W},{Promise:F}),d(F,L,!1,!0),v(L),i=l(L),u({target:L,stat:!0,forced:W},{reject:function(t){var n=B(this);return n.reject.call(void 0,t),n.promise}}),u({target:L,stat:!0,forced:s||W},{resolve:function(t){return A(s&&this===i?F:this,t)}}),u({target:L,stat:!0,forced:K},{all:function(t){var n=this,e=B(n),r=e.resolve,o=e.reject,i=N((function(){var e=m(n.resolve),i=[],a=0,u=1;x(t,(function(t){var s=a++,c=!1;i.push(void 0),u++,e.call(n,t).then((function(t){c||(c=!0,i[s]=t,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),e.promise},race:function(t){var n=this,e=B(n),r=e.reject,o=N((function(){var o=m(n.resolve);x(t,(function(t){o.call(n,t).then(e.resolve,r)}))}));return o.error&&r(o.value),e.promise}})},4916:(t,n,e)=>{"use strict";var r=e(2109),o=e(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},189:(t,n,e)=>{"use strict";var r=e(7710),o=e(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},2023:(t,n,e)=>{"use strict";var r=e(2109),o=e(3929),i=e(4488);r({target:"String",proto:!0,forced:!e(4964)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},8783:(t,n,e)=>{"use strict";var r=e(8710).charAt,o=e(9909),i=e(654),a="String Iterator",u=o.set,s=o.getterFor(a);i(String,"String",(function(t){u(this,{type:a,string:String(t),index:0})}),(function(){var t,n=s(this),e=n.string,o=n.index;return o>=e.length?{value:void 0,done:!0}:(t=r(e,o),n.index+=t.length,{value:t,done:!1})}))},5306:(t,n,e)=>{"use strict";var r=e(7007),o=e(9670),i=e(7466),a=e(9958),u=e(4488),s=e(1530),c=e(647),l=e(7651),f=Math.max,p=Math.min;r("replace",2,(function(t,n,e,r){var h=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=r.REPLACE_KEEPS_$0,v=h?"$":"$0";return[function(e,r){var o=u(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,r):n.call(String(o),e,r)},function(t,r){if(!h&&d||"string"==typeof r&&-1===r.indexOf(v)){var u=e(n,t,this,r);if(u.done)return u.value}var g=o(t),m=String(this),y="function"==typeof r;y||(r=String(r));var w=g.global;if(w){var x=g.unicode;g.lastIndex=0}for(var b=[];;){var _=l(g,m);if(null===_)break;if(b.push(_),!w)break;""===String(_[0])&&(g.lastIndex=s(m,i(g.lastIndex),x))}for(var S,E="",A=0,M=0;M<b.length;M++){_=b[M];for(var k=String(_[0]),N=f(p(a(_.index),m.length),0),C=[],O=1;O<_.length;O++)C.push(void 0===(S=_[O])?S:String(S));var P=_.groups;if(y){var j=[k].concat(C,N,m);void 0!==P&&j.push(P);var T=String(r.apply(void 0,j))}else T=c(k,m,N,C,P,r);N>=A&&(E+=m.slice(A,N)+T,A=N+k.length)}return E+m.slice(A)}]}))},3210:(t,n,e)=>{"use strict";var r=e(2109),o=e(3111).trim;r({target:"String",proto:!0,forced:e(6091)("trim")},{trim:function(){return o(this)}})},1817:(t,n,e)=>{"use strict";var r=e(2109),o=e(9781),i=e(7854),a=e(6656),u=e(111),s=e(3070).f,c=e(9920),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof p?new l(t):void 0===t?l():l(t);return""===t&&(f[n]=!0),n};c(p,l);var h=p.prototype=l.prototype;h.constructor=p;var d=h.toString,v="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;s(h,"description",{configurable:!0,get:function(){var t=u(this)?this.valueOf():this,n=d.call(t);if(a(f,t))return"";var e=v?n.slice(7,-1):n.replace(g,"$1");return""===e?void 0:e}}),r({global:!0,forced:!0},{Symbol:p})}},2165:(t,n,e)=>{e(7235)("iterator")},2526:(t,n,e)=>{"use strict";var r=e(2109),o=e(7854),i=e(5005),a=e(1913),u=e(9781),s=e(133),c=e(3307),l=e(7293),f=e(6656),p=e(3157),h=e(111),d=e(9670),v=e(7908),g=e(5656),m=e(7593),y=e(9114),w=e(30),x=e(1956),b=e(8006),_=e(1156),S=e(5181),E=e(1236),A=e(3070),M=e(5296),k=e(8880),N=e(1320),C=e(2309),O=e(6200),P=e(3501),j=e(9711),T=e(5112),D=e(6061),L=e(7235),I=e(8003),R=e(9909),U=e(2092).forEach,F=O("hidden"),V="Symbol",H=T("toPrimitive"),q=R.set,z=R.getterFor(V),B=Object.prototype,$=o.Symbol,X=i("JSON","stringify"),G=E.f,Y=A.f,W=_.f,K=M.f,Z=C("symbols"),Q=C("op-symbols"),J=C("string-to-symbol-registry"),tt=C("symbol-to-string-registry"),nt=C("wks"),et=o.QObject,rt=!et||!et.prototype||!et.prototype.findChild,ot=u&&l((function(){return 7!=w(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(t,n,e){var r=G(B,n);r&&delete B[n],Y(t,n,e),r&&t!==B&&Y(B,n,r)}:Y,it=function(t,n){var e=Z[t]=w($.prototype);return q(e,{type:V,tag:t,description:n}),u||(e.description=n),e},at=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof $},ut=function(t,n,e){t===B&&ut(Q,n,e),d(t);var r=m(n,!0);return d(e),f(Z,r)?(e.enumerable?(f(t,F)&&t[F][r]&&(t[F][r]=!1),e=w(e,{enumerable:y(0,!1)})):(f(t,F)||Y(t,F,y(1,{})),t[F][r]=!0),ot(t,r,e)):Y(t,r,e)},st=function(t,n){d(t);var e=g(n),r=x(e).concat(pt(e));return U(r,(function(n){u&&!ct.call(e,n)||ut(t,n,e[n])})),t},ct=function(t){var n=m(t,!0),e=K.call(this,n);return!(this===B&&f(Z,n)&&!f(Q,n))&&(!(e||!f(this,n)||!f(Z,n)||f(this,F)&&this[F][n])||e)},lt=function(t,n){var e=g(t),r=m(n,!0);if(e!==B||!f(Z,r)||f(Q,r)){var o=G(e,r);return!o||!f(Z,r)||f(e,F)&&e[F][r]||(o.enumerable=!0),o}},ft=function(t){var n=W(g(t)),e=[];return U(n,(function(t){f(Z,t)||f(P,t)||e.push(t)})),e},pt=function(t){var n=t===B,e=W(n?Q:g(t)),r=[];return U(e,(function(t){!f(Z,t)||n&&!f(B,t)||r.push(Z[t])})),r};s||(N(($=function(){if(this instanceof $)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,n=j(t),e=function(t){this===B&&e.call(Q,t),f(this,F)&&f(this[F],n)&&(this[F][n]=!1),ot(this,n,y(1,t))};return u&&rt&&ot(B,n,{configurable:!0,set:e}),it(n,t)}).prototype,"toString",(function(){return z(this).tag})),N($,"withoutSetter",(function(t){return it(j(t),t)})),M.f=ct,A.f=ut,E.f=lt,b.f=_.f=ft,S.f=pt,D.f=function(t){return it(T(t),t)},u&&(Y($.prototype,"description",{configurable:!0,get:function(){return z(this).description}}),a||N(B,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:$}),U(x(nt),(function(t){L(t)})),r({target:V,stat:!0,forced:!s},{for:function(t){var n=String(t);if(f(J,n))return J[n];var e=$(n);return J[n]=e,tt[e]=n,e},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(f(tt,t))return tt[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!u},{create:function(t,n){return void 0===n?w(t):st(w(t),n)},defineProperty:ut,defineProperties:st,getOwnPropertyDescriptor:lt}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ft,getOwnPropertySymbols:pt}),r({target:"Object",stat:!0,forced:l((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(v(t))}}),X&&r({target:"JSON",stat:!0,forced:!s||l((function(){var t=$();return"[null]"!=X([t])||"{}"!=X({a:t})||"{}"!=X(Object(t))}))},{stringify:function(t,n,e){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=n,(h(n)||void 0!==t)&&!at(t))return p(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!at(n))return n}),o[1]=n,X.apply(null,o)}}),$.prototype[H]||k($.prototype,H,$.prototype.valueOf),I($,V),P[F]=!0},4747:(t,n,e)=>{var r=e(7854),o=e(8324),i=e(8533),a=e(8880);for(var u in o){var s=r[u],c=s&&s.prototype;if(c&&c.forEach!==i)try{a(c,"forEach",i)}catch(t){c.forEach=i}}},3948:(t,n,e)=>{var r=e(7854),o=e(8324),i=e(6992),a=e(8880),u=e(5112),s=u("iterator"),c=u("toStringTag"),l=i.values;for(var f in o){var p=r[f],h=p&&p.prototype;if(h){if(h[s]!==l)try{a(h,s,l)}catch(t){h[s]=l}if(h[c]||a(h,c,f),o[f])for(var d in i)if(h[d]!==i[d])try{a(h,d,i[d])}catch(t){h[d]=i[d]}}}},2564:(t,n,e)=>{var r=e(2109),o=e(7854),i=e(8113),a=[].slice,u=function(t){return function(n,e){var r=arguments.length>2,o=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:u(o.setTimeout),setInterval:u(o.setInterval)})},9365:(t,n)=>{var e,r;void 0===(r="function"==typeof(e=function(){"use strict";var t="14.6.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function o(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function i(t,n,e){e>0&&(c(t,n),setTimeout((function(){l(t,n)}),e))}function a(t){return Math.max(Math.min(t,100),0)}function u(t){return Array.isArray(t)?t:[t]}function s(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function c(t,n){t.classList&&!/\s/.test(n)?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList&&!/\s/.test(n)?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||"");return{x:n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,y:n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop}}function p(t,n){return 100/(n-t)}function h(t,n,e){return 100*n/(t[e+1]-t[e])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function v(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),o=t[r-1],i=t[r],a=n[r-1],u=n[r];return a+function(t,n){return h(t,t[0]<0?n+Math.abs(t[0]):n-t[0],0)}([o,i],e)/p(a,u)}function g(t,n,e,r){if(100===r)return r;var o=d(r,t),i=t[o-1],a=t[o];return e?r-i>(a-i)/2?a:i:n[o-1]?t[o-1]+function(t,n){return Math.round(t/n)*n}(r-t[o-1],n[o-1]):r}function m(t,n,e){var r;if("number"==typeof n&&(n=[n]),!Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'range' contains invalid value.");if(!o(r="min"===t?0:"max"===t?100:parseFloat(t))||!o(n[0]))throw new Error("noUiSlider (14.6.3): 'range' value isn't numeric.");e.xPct.push(r),e.xVal.push(n[0]),r?e.xSteps.push(!isNaN(n[1])&&n[1]):isNaN(n[1])||(e.xSteps[0]=n[1]),e.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=h([e.xVal[t],e.xVal[t+1]],n,0)/p(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],o=Math.ceil(Number(r.toFixed(3))-1),i=e.xVal[t]+e.xNumSteps[t]*o;e.xHighestCompleteStep[t]=i}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var o=[];for(r in t)t.hasOwnProperty(r)&&o.push([t[r],r]);for(o.length&&"object"==typeof o[0][0]?o.sort((function(t,n){return t[0][0]-n[0][0]})):o.sort((function(t,n){return t[0]-n[0]})),r=0;r<o.length;r++)m(o[r][1],o[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getDistance=function(t){var n,e=[];for(n=0;n<this.xNumSteps.length-1;n++){var r=this.xNumSteps[n];if(r&&t/r%1!=0)throw new Error("noUiSlider (14.6.3): 'limit', 'margin' and 'padding' of "+this.xPct[n]+"% range must be divisible by step.");e[n]=h(this.xVal,t,n)}return e},w.prototype.getAbsoluteDistance=function(t,n,e){var r,o=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[o+1];)o++;else t===this.xPct[this.xPct.length-1]&&(o=this.xPct.length-2);e||t!==this.xPct[o+1]||o++;var i=1,a=n[o],u=0,s=0,c=0,l=0;for(r=e?(t-this.xPct[o])/(this.xPct[o+1]-this.xPct[o]):(this.xPct[o+1]-t)/(this.xPct[o+1]-this.xPct[o]);a>0;)u=this.xPct[o+1+l]-this.xPct[o+l],n[o+l]*i+100-100*r>100?(s=u*r,i=(a-100*r)/n[o+l],r=1):(s=n[o+l]*u/100*i,i=0),e?(c-=s,this.xPct.length+l>=1&&l--):(c+=s,this.xPct.length-l>=1&&l++),a=n[o+l]*i;return t+c},w.prototype.toStepping=function(t){return v(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),o=t[r-1],i=t[r],a=n[r-1];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([o,i],(e-a)*p(a,n[r]))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(s);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number},b={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},_=".__tooltips",S=".__aria";function E(t){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(t))return!0;throw new Error("noUiSlider (14.6.3): 'format' requires 'to' and 'from' methods.")}function A(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'step' is not numeric.");t.singleStep=n}function M(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'keyboardPageMultiplier' is not numeric.");t.keyboardPageMultiplier=n}function k(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'keyboardDefaultStep' is not numeric.");t.keyboardDefaultStep=n}function N(t,n){if("object"!=typeof n||Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'range' is not an object.");if(void 0===n.min||void 0===n.max)throw new Error("noUiSlider (14.6.3): Missing 'min' or 'max' in 'range'.");if(n.min===n.max)throw new Error("noUiSlider (14.6.3): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new w(n,t.snap,t.singleStep)}function C(t,n){if(n=u(n),!Array.isArray(n)||!n.length)throw new Error("noUiSlider (14.6.3): 'start' option is incorrect.");t.handles=n.length,t.start=n}function O(t,n){if(t.snap=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'snap' option must be a boolean.")}function P(t,n){if(t.animate=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'animate' option must be a boolean.")}function j(t,n){if(t.animationDuration=n,"number"!=typeof n)throw new Error("noUiSlider (14.6.3): 'animationDuration' option must be a number.")}function T(t,n){var e,r=[!1];if("lower"===n?n=[!0,!1]:"upper"===n&&(n=[!1,!0]),!0===n||!1===n){for(e=1;e<t.handles;e++)r.push(n);r.push(!1)}else{if(!Array.isArray(n)||!n.length||n.length!==t.handles+1)throw new Error("noUiSlider (14.6.3): 'connect' option doesn't match handle count.");r=n}t.connect=r}function D(t,n){switch(n){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider (14.6.3): 'orientation' option is invalid.")}}function L(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'margin' option must be numeric.");0!==n&&(t.margin=t.spectrum.getDistance(n))}function I(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'limit' option must be numeric.");if(t.limit=t.spectrum.getDistance(n),!t.limit||t.handles<2)throw new Error("noUiSlider (14.6.3): 'limit' option is only supported on linear sliders with 2 or more handles.")}function R(t,n){var e;if(!o(n)&&!Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(n)&&2!==n.length&&!o(n[0])&&!o(n[1]))throw new Error("noUiSlider (14.6.3): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==n){for(Array.isArray(n)||(n=[n,n]),t.padding=[t.spectrum.getDistance(n[0]),t.spectrum.getDistance(n[1])],e=0;e<t.spectrum.xNumSteps.length-1;e++)if(t.padding[0][e]<0||t.padding[1][e]<0)throw new Error("noUiSlider (14.6.3): 'padding' option must be a positive number(s).");var r=n[0]+n[1],i=t.spectrum.xVal[0];if(r/(t.spectrum.xVal[t.spectrum.xVal.length-1]-i)>1)throw new Error("noUiSlider (14.6.3): 'padding' option must not exceed 100% of the range.")}}function U(t,n){switch(n){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider (14.6.3): 'direction' option was not recognized.")}}function F(t,n){if("string"!=typeof n)throw new Error("noUiSlider (14.6.3): 'behaviour' must be a string containing options.");var e=n.indexOf("tap")>=0,r=n.indexOf("drag")>=0,o=n.indexOf("fixed")>=0,i=n.indexOf("snap")>=0,a=n.indexOf("hover")>=0,u=n.indexOf("unconstrained")>=0;if(o){if(2!==t.handles)throw new Error("noUiSlider (14.6.3): 'fixed' behaviour must be used with 2 handles");L(t,t.start[1]-t.start[0])}if(u&&(t.margin||t.limit))throw new Error("noUiSlider (14.6.3): 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:e||i,drag:r,fixed:o,snap:i,hover:a,unconstrained:u}}function V(t,n){if(!1!==n)if(!0===n){t.tooltips=[];for(var e=0;e<t.handles;e++)t.tooltips.push(!0)}else{if(t.tooltips=u(n),t.tooltips.length!==t.handles)throw new Error("noUiSlider (14.6.3): must pass a formatter for all handles.");t.tooltips.forEach((function(t){if("boolean"!=typeof t&&("object"!=typeof t||"function"!=typeof t.to))throw new Error("noUiSlider (14.6.3): 'tooltips' must be passed a formatter or 'false'.")}))}}function H(t,n){t.ariaFormat=n,E(n)}function q(t,n){t.format=n,E(n)}function z(t,n){if(t.keyboardSupport=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'keyboardSupport' option must be a boolean.")}function B(t,n){t.documentElement=n}function $(t,n){if("string"!=typeof n&&!1!==n)throw new Error("noUiSlider (14.6.3): 'cssPrefix' must be a string or `false`.");t.cssPrefix=n}function X(t,n){if("object"!=typeof n)throw new Error("noUiSlider (14.6.3): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix)for(var e in t.cssClasses={},n)n.hasOwnProperty(e)&&(t.cssClasses[e]=t.cssPrefix+n[e]);else t.cssClasses=n}function G(t){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},r={step:{r:!1,t:A},keyboardPageMultiplier:{r:!1,t:M},keyboardDefaultStep:{r:!1,t:k},start:{r:!0,t:C},connect:{r:!0,t:T},direction:{r:!0,t:U},snap:{r:!1,t:O},animate:{r:!1,t:P},animationDuration:{r:!1,t:j},range:{r:!0,t:N},orientation:{r:!1,t:D},margin:{r:!1,t:L},limit:{r:!1,t:I},padding:{r:!1,t:R},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:H},format:{r:!1,t:q},tooltips:{r:!1,t:V},keyboardSupport:{r:!0,t:z},documentElement:{r:!1,t:B},cssPrefix:{r:!0,t:$},cssClasses:{r:!0,t:X}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:b,keyboardPageMultiplier:5,keyboardDefaultStep:10};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(r).forEach((function(i){if(!e(t[i])&&void 0===o[i]){if(r[i].r)throw new Error("noUiSlider (14.6.3): '"+i+"' is required.");return!0}r[i].t(n,e(t[i])?t[i]:o[i])})),n.pips=t.pips;var i=document.createElement("div"),a=void 0!==i.style.msTransform,u=void 0!==i.style.transform;n.transformRule=u?"transform":a?"msTransform":"webkitTransform";return n.style=[["left","top"],["right","bottom"]][n.dir][n.ort],n}function Y(t,e,o){var s,p,h,d,v,g,m,y,w=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},x=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),b=t,E=e.spectrum,A=[],M=[],k=[],N=0,C={},O=t.ownerDocument,P=e.documentElement||O.documentElement,j=O.body,T="rtl"===O.dir||1===e.ort?0:100;function D(t,n){var e=O.createElement("div");return n&&c(e,n),t.appendChild(e),e}function L(t,n){var r=D(t,e.cssClasses.origin),o=D(r,e.cssClasses.handle);return D(o,e.cssClasses.touchArea),o.setAttribute("data-handle",n),e.keyboardSupport&&(o.setAttribute("tabindex","0"),o.addEventListener("keydown",(function(t){return function(t,n){if(U()||F(n))return!1;var r=["Left","Right"],o=["Down","Up"],i=["PageDown","PageUp"],a=["Home","End"];e.dir&&!e.ort?r.reverse():e.ort&&!e.dir&&(o.reverse(),i.reverse());var u,s=t.key.replace("Arrow",""),c=s===i[0],l=s===i[1],f=s===o[0]||s===r[0]||c,p=s===o[1]||s===r[1]||l,h=s===a[0],d=s===a[1];if(!(f||p||h||d))return!0;if(t.preventDefault(),p||f){var v=e.keyboardPageMultiplier,g=f?0:1,m=dt(n)[g];if(null===m)return!1;!1===m&&(m=E.getDefaultStep(M[n],f,e.keyboardDefaultStep)),(l||c)&&(m*=v),m=Math.max(m,1e-7),m*=f?-1:1,u=A[n]+m}else u=d?e.spectrum.xVal[e.spectrum.xVal.length-1]:e.spectrum.xVal[0];return ct(n,E.toStepping(u),!0,!0),rt("slide",n),rt("update",n),rt("change",n),rt("set",n),!1}(t,n)}))),o.setAttribute("role","slider"),o.setAttribute("aria-orientation",e.ort?"vertical":"horizontal"),0===n?c(o,e.cssClasses.handleLower):n===e.handles-1&&c(o,e.cssClasses.handleUpper),r}function I(t,n){return!!n&&D(t,e.cssClasses.connect)}function R(t,n){return!!e.tooltips[n]&&D(t.firstChild,e.cssClasses.tooltip)}function U(){return b.hasAttribute("disabled")}function F(t){return p[t].hasAttribute("disabled")}function V(){v&&(et("update"+_),v.forEach((function(t){t&&n(t)})),v=null)}function H(){V(),v=p.map(R),nt("update"+_,(function(t,n,r){if(v[n]){var o=t[n];!0!==e.tooltips[n]&&(o=e.tooltips[n].to(r[n])),v[n].innerHTML=o}}))}function q(t,n,r){var o=O.createElement("div"),i=[];i[0]=e.cssClasses.valueNormal,i[1]=e.cssClasses.valueLarge,i[2]=e.cssClasses.valueSub;var a=[];a[0]=e.cssClasses.markerNormal,a[1]=e.cssClasses.markerLarge,a[2]=e.cssClasses.markerSub;var u=[e.cssClasses.valueHorizontal,e.cssClasses.valueVertical],s=[e.cssClasses.markerHorizontal,e.cssClasses.markerVertical];function l(t,n){var r=n===e.cssClasses.value,o=r?i:a;return n+" "+(r?u:s)[e.ort]+" "+o[t]}return c(o,e.cssClasses.pips),c(o,0===e.ort?e.cssClasses.pipsHorizontal:e.cssClasses.pipsVertical),Object.keys(t).forEach((function(i){!function(t,i,a){if(-1!==(a=n?n(i,a):a)){var u=D(o,!1);u.className=l(a,e.cssClasses.marker),u.style[e.style]=t+"%",a>0&&((u=D(o,!1)).className=l(a,e.cssClasses.value),u.setAttribute("data-value",i),u.style[e.style]=t+"%",u.innerHTML=r.to(i))}}(i,t[i][0],t[i][1])})),o}function z(){d&&(n(d),d=null)}function B(t){z();var n=t.mode,e=t.density||1,r=t.filter||!1,o=function(t,n,e){var r,o={},i=E.xVal[0],a=E.xVal[E.xVal.length-1],u=!1,s=!1,c=0;return(r=e.slice().sort((function(t,n){return t-n})),e=r.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==i&&(e.unshift(i),u=!0),e[e.length-1]!==a&&(e.push(a),s=!0),e.forEach((function(r,i){var a,l,f,p,h,d,v,g,m,y,w=r,x=e[i+1],b="steps"===n;if(b&&(a=E.xNumSteps[i]),a||(a=x-w),!1!==w)for(void 0===x&&(x=w),a=Math.max(a,1e-7),l=w;l<=x;l=(l+a).toFixed(7)/1){for(g=(h=(p=E.toStepping(l))-c)/t,y=h/(m=Math.round(g)),f=1;f<=m;f+=1)o[(d=c+f*y).toFixed(5)]=[E.fromStepping(d),0];v=e.indexOf(l)>-1?1:b?2:0,!i&&u&&l!==x&&(v=0),l===x&&s||(o[p.toFixed(5)]=[l,v]),c=p}})),o}(e,n,function(t,n,e){if("range"===t||"steps"===t)return E.xVal;if("count"===t){if(n<2)throw new Error("noUiSlider (14.6.3): 'values' (>= 2) required for mode 'count'.");var r=n-1,o=100/r;for(n=[];r--;)n[r]=r*o;n.push(100),t="positions"}return"positions"===t?n.map((function(t){return E.fromStepping(e?E.getStep(t):t)})):"values"===t?e?n.map((function(t){return E.fromStepping(E.getStep(E.toStepping(t)))})):n:void 0}(n,t.values||!1,t.stepped||!1)),i=t.format||{to:Math.round};return d=b.appendChild(q(o,r,i))}function $(){var t=s.getBoundingClientRect(),n="offset"+["Width","Height"][e.ort];return 0===e.ort?t.width||s[n]:t.height||s[n]}function X(t,n,r,o){var i=function(i){return!!(i=function(t,n,e){var r,o,i=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),u=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(u=!0),"mousedown"===t.type&&!t.buttons&&!t.touches)return!1;if(i){var s=function(t){return t.target===e||e.contains(t.target)||t.target.shadowRoot&&t.target.shadowRoot.contains(e)};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,s);if(c.length>1)return!1;r=c[0].pageX,o=c[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,s);if(!l)return!1;r=l.pageX,o=l.pageY}}return n=n||f(O),(a||u)&&(r=t.clientX+n.x,o=t.clientY+n.y),t.pageOffset=n,t.points=[r,o],t.cursor=a||u,t}(i,o.pageOffset,o.target||n))&&!(U()&&!o.doNotReject)&&(a=b,u=e.cssClasses.tap,!((a.classList?a.classList.contains(u):new RegExp("\\b"+u+"\\b").test(a.className))&&!o.doNotReject))&&!(t===w.start&&void 0!==i.buttons&&i.buttons>1)&&(!o.hover||!i.buttons)&&(x||i.preventDefault(),i.calcPoint=i.points[e.ort],void r(i,o));var a,u},a=[];return t.split(" ").forEach((function(t){n.addEventListener(t,i,!!x&&{passive:!0}),a.push([t,i])})),a}function Y(t){var n,r,o,i,u,c,l=100*(t-(n=s,r=e.ort,o=n.getBoundingClientRect(),i=n.ownerDocument,u=i.documentElement,c=f(i),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),r?o.top+c.y-u.clientTop:o.left+c.x-u.clientLeft))/$();return l=a(l),e.dir?100-l:l}function W(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&Z(t,n)}function K(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return Z(t,n);var r=(e.dir?-1:1)*(t.calcPoint-n.startCalcPoint);at(r>0,100*r/n.baseSize,n.locations,n.handleNumbers)}function Z(t,n){n.handle&&(l(n.handle,e.cssClasses.active),N-=1),n.listeners.forEach((function(t){P.removeEventListener(t[0],t[1])})),0===N&&(l(b,e.cssClasses.drag),st(),t.cursor&&(j.style.cursor="",j.removeEventListener("selectstart",r))),n.handleNumbers.forEach((function(t){rt("change",t),rt("set",t),rt("end",t)}))}function Q(t,n){if(n.handleNumbers.some(F))return!1;var o;1===n.handleNumbers.length&&(o=p[n.handleNumbers[0]].children[0],N+=1,c(o,e.cssClasses.active)),t.stopPropagation();var i=[],a=X(w.move,P,K,{target:t.target,handle:o,listeners:i,startCalcPoint:t.calcPoint,baseSize:$(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:M.slice()}),u=X(w.end,P,Z,{target:t.target,handle:o,listeners:i,doNotReject:!0,handleNumbers:n.handleNumbers}),s=X("mouseout",P,W,{target:t.target,handle:o,listeners:i,doNotReject:!0,handleNumbers:n.handleNumbers});i.push.apply(i,a.concat(u,s)),t.cursor&&(j.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&c(b,e.cssClasses.drag),j.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach((function(t){rt("start",t)}))}function J(t){t.stopPropagation();var n=Y(t.calcPoint),r=function(t){var n=100,e=!1;return p.forEach((function(r,o){if(!F(o)){var i=M[o],a=Math.abs(i-t);(a<n||a<=n&&t>i||100===a&&100===n)&&(e=o,n=a)}})),e}(n);if(!1===r)return!1;e.events.snap||i(b,e.cssClasses.tap,e.animationDuration),ct(r,n,!0,!0),st(),rt("slide",r,!0),rt("update",r,!0),rt("change",r,!0),rt("set",r,!0),e.events.snap&&Q(t,{handleNumbers:[r]})}function tt(t){var n=Y(t.calcPoint),e=E.getStep(n),r=E.fromStepping(e);Object.keys(C).forEach((function(t){"hover"===t.split(".")[0]&&C[t].forEach((function(t){t.call(g,r)}))}))}function nt(t,n){C[t]=C[t]||[],C[t].push(n),"update"===t.split(".")[0]&&p.forEach((function(t,n){rt("update",n)}))}function et(t){var n=t&&t.split(".")[0],e=n?t.substring(n.length):t;Object.keys(C).forEach((function(t){var r=t.split(".")[0],o=t.substring(r.length);n&&n!==r||e&&e!==o||function(t){return t===S||t===_}(o)&&e!==o||delete C[t]}))}function rt(t,n,r){Object.keys(C).forEach((function(o){var i=o.split(".")[0];t===i&&C[o].forEach((function(t){t.call(g,A.map(e.format.to),n,A.slice(),r||!1,M.slice(),g)}))}))}function ot(t,n,r,o,i,u){var s;return p.length>1&&!e.events.unconstrained&&(o&&n>0&&(s=E.getAbsoluteDistance(t[n-1],e.margin,0),r=Math.max(r,s)),i&&n<p.length-1&&(s=E.getAbsoluteDistance(t[n+1],e.margin,1),r=Math.min(r,s))),p.length>1&&e.limit&&(o&&n>0&&(s=E.getAbsoluteDistance(t[n-1],e.limit,0),r=Math.min(r,s)),i&&n<p.length-1&&(s=E.getAbsoluteDistance(t[n+1],e.limit,1),r=Math.max(r,s))),e.padding&&(0===n&&(s=E.getAbsoluteDistance(0,e.padding[0],0),r=Math.max(r,s)),n===p.length-1&&(s=E.getAbsoluteDistance(100,e.padding[1],1),r=Math.min(r,s))),!((r=a(r=E.getStep(r)))===t[n]&&!u)&&r}function it(t,n){var r=e.ort;return(r?n:t)+", "+(r?t:n)}function at(t,n,e,r){var o=e.slice(),i=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,e){var r=ot(o,t,o[t]+n,i[e],a[e],!1);!1===r?n=0:(n=r-o[t],o[t]=r)})):i=a=[!0];var u=!1;r.forEach((function(t,r){u=ct(t,e[t]+n,i[r],a[r])||u})),u&&r.forEach((function(t){rt("update",t),rt("slide",t)}))}function ut(t,n){return e.dir?100-t-n:t}function st(){k.forEach((function(t){var n=M[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e}))}function ct(t,n,r,o,i){return i||(n=ot(M,t,n,r,o,!1)),!1!==n&&(function(t,n){M[t]=n,A[t]=E.fromStepping(n);var r="translate("+it(10*(ut(n,0)-T)+"%","0")+")";p[t].style[e.transformRule]=r,lt(t),lt(t+1)}(t,n),!0)}function lt(t){if(h[t]){var n=0,r=100;0!==t&&(n=M[t-1]),t!==h.length-1&&(r=M[t]);var o=r-n,i="translate("+it(ut(n,o)+"%","0")+")",a="scale("+it(o/100,"1")+")";h[t].style[e.transformRule]=i+" "+a}}function ft(t,n){return null===t||!1===t||void 0===t?M[n]:("number"==typeof t&&(t=String(t)),t=e.format.from(t),!1===(t=E.toStepping(t))||isNaN(t)?M[n]:t)}function pt(t,n,r){var o=u(t),a=void 0===M[0];n=void 0===n||!!n,e.animate&&!a&&i(b,e.cssClasses.tap,e.animationDuration),k.forEach((function(t){ct(t,ft(o[t],t),!0,!1,r)}));for(var s=1===k.length?0:1;s<k.length;++s)k.forEach((function(t){ct(t,M[t],!0,!0,r)}));st(),k.forEach((function(t){rt("update",t),null!==o[t]&&n&&rt("set",t)}))}function ht(){var t=A.map(e.format.to);return 1===t.length?t[0]:t}function dt(t){var n=M[t],r=E.getNearbySteps(n),o=A[t],i=r.thisStep.step,a=null;if(e.snap)return[o-r.stepBefore.startValue||null,r.stepAfter.startValue-o||null];!1!==i&&o+i>r.stepAfter.startValue&&(i=r.stepAfter.startValue-o),a=o>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&o-r.stepBefore.highestStep,100===n?i=null:0===n&&(a=null);var u=E.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(u))),null!==a&&!1!==a&&(a=Number(a.toFixed(u))),[a,i]}return c(y=b,e.cssClasses.target),0===e.dir?c(y,e.cssClasses.ltr):c(y,e.cssClasses.rtl),0===e.ort?c(y,e.cssClasses.horizontal):c(y,e.cssClasses.vertical),c(y,"rtl"===getComputedStyle(y).direction?e.cssClasses.textDirectionRtl:e.cssClasses.textDirectionLtr),s=D(y,e.cssClasses.base),function(t,n){var r=D(n,e.cssClasses.connects);p=[],(h=[]).push(I(r,t[0]));for(var o=0;o<e.handles;o++)p.push(L(n,o)),k[o]=o,h.push(I(r,t[o+1]))}(e.connect,s),(m=e.events).fixed||p.forEach((function(t,n){X(w.start,t.children[0],Q,{handleNumbers:[n]})})),m.tap&&X(w.start,s,J,{}),m.hover&&X(w.move,s,tt,{hover:!0}),m.drag&&h.forEach((function(t,n){if(!1!==t&&0!==n&&n!==h.length-1){var r=p[n-1],o=p[n],i=[t];c(t,e.cssClasses.draggable),m.fixed&&(i.push(r.children[0]),i.push(o.children[0])),i.forEach((function(t){X(w.start,t,Q,{handles:[r,o],handleNumbers:[n-1,n]})}))}})),pt(e.start),e.pips&&B(e.pips),e.tooltips&&H(),et("update"+S),nt("update"+S,(function(t,n,r,o,i){k.forEach((function(t){var n=p[t],o=ot(M,t,0,!0,!0,!0),a=ot(M,t,100,!0,!0,!0),u=i[t],s=e.ariaFormat.to(r[t]);o=E.fromStepping(o).toFixed(1),a=E.fromStepping(a).toFixed(1),u=E.fromStepping(u).toFixed(1),n.children[0].setAttribute("aria-valuemin",o),n.children[0].setAttribute("aria-valuemax",a),n.children[0].setAttribute("aria-valuenow",u),n.children[0].setAttribute("aria-valuetext",s)}))})),g={destroy:function(){for(var t in et(S),et(_),e.cssClasses)e.cssClasses.hasOwnProperty(t)&&l(b,e.cssClasses[t]);for(;b.firstChild;)b.removeChild(b.firstChild);delete b.noUiSlider},steps:function(){return k.map(dt)},on:nt,off:et,get:ht,set:pt,setHandle:function(t,n,e,r){if(!((t=Number(t))>=0&&t<k.length))throw new Error("noUiSlider (14.6.3): invalid handle number, got: "+t);ct(t,ft(n,t),!0,!0,r),rt("update",t),e&&rt("set",t)},reset:function(t){pt(e.start,t)},__moveHandles:function(t,n,e){at(t,n,M,e)},options:o,updateOptions:function(t,n){var r=ht(),i=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];i.forEach((function(n){void 0!==t[n]&&(o[n]=t[n])}));var a=G(o);i.forEach((function(n){void 0!==t[n]&&(e[n]=a[n])})),E=a.spectrum,e.margin=a.margin,e.limit=a.limit,e.padding=a.padding,e.pips?B(e.pips):z(),e.tooltips?H():V(),M=[],pt(t.start||r,n)},target:b,removePips:z,removeTooltips:V,getTooltips:function(){return v},getOrigins:function(){return p},pips:B}}return{__spectrum:w,version:t,cssClasses:b,create:function(t,n){if(!t||!t.nodeName)throw new Error("noUiSlider (14.6.3): create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider (14.6.3): Slider was already initialized.");var e=Y(t,G(n),n);return t.noUiSlider=e,e}}})?e.apply(n,[]):e)||(t.exports=r)},5666:t=>{var n=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function s(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{s({},"")}catch(t){s=function(t,n,e){return t[n]=e}}function c(t,n,e,r){var o=n&&n.prototype instanceof g?n:g,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(t,n,e){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return O()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=A(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===f)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var s=l(t,n,e);if("normal"===s.type){if(r=e.done?d:p,s.arg===v)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r=d,e.method="throw",e.arg=s.arg)}}}(t,e,a),i}function l(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={};function g(){}function m(){}function y(){}var w={};w[i]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(C([])));b&&b!==e&&r.call(b,i)&&(w=b);var _=y.prototype=g.prototype=Object.create(w);function S(t){["next","throw","return"].forEach((function(n){s(t,n,(function(t){return this._invoke(n,t)}))}))}function E(t,n){function e(o,i,a,u){var s=l(t[o],t,i);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?n.resolve(f.__await).then((function(t){e("next",t,a,u)}),(function(t){e("throw",t,a,u)})):n.resolve(f).then((function(t){c.value=t,a(c)}),(function(t){return e("throw",t,a,u)}))}u(s.arg)}var o;this._invoke=function(t,r){function i(){return new n((function(n,o){e(t,r,n,o)}))}return o=o?o.then(i,i):i()}}function A(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,A(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function M(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function k(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function C(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:O}}function O(){return{value:n,done:!0}}return m.prototype=_.constructor=y,y.constructor=m,m.displayName=s(y,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,s(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},S(E.prototype),E.prototype[a]=function(){return this},t.AsyncIterator=E,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var a=new E(c(n,e,r,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(_),s(_,u,"Generator"),_[i]=function(){return this},_.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=C,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:C(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}},s={};function c(t){var n=s[t];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var e=s[t]={exports:{}};try{var r={id:t,module:e,factory:u[t],require:c};c.i.forEach((function(t){t(r)})),e=r.module,r.factory.call(e.exports,e,e.exports,r.require)}catch(t){throw e.error=t,t}return e.exports}c.m=u,c.c=s,c.i=[],c.hu=t=>t+"."+c.h()+".hot-update.js",c.miniCssF=t=>{},c.hmrF=()=>"russia."+c.h()+".hot-update.json",c.h=()=>"b6e12ce6380a0902e076",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),c.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),t={},n="geo-satellites:",c.l=(e,r,o,i)=>{if(t[e])t[e].push(r);else{var a,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var f=s[l];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==n+o){a=f;break}}a||(u=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,c.nc&&a.setAttribute("nonce",c.nc),a.setAttribute("data-webpack",n+o),a.src=e),t[e]=[r];var p=(n,r)=>{a.onerror=a.onload=null,clearTimeout(h);var o=t[e];if(delete t[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((t=>t(r))),n)return n(r)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),u&&document.head.appendChild(a)}},(()=>{var t,n,e,r,o={},i=c.c,a=[],u=[],s="idle";function l(t){s=t;for(var n=0;n<u.length;n++)u[n].call(null,t)}function f(t){if(0===n.length)return t();var e=n;return n=[],Promise.all(e).then((function(){return f(t)}))}function p(t){if("idle"!==s)throw new Error("check() is only allowed in idle status");return l("check"),c.hmrM().then((function(r){if(!r)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return n=[],e=[],Promise.all(Object.keys(c.hmrC).reduce((function(t,n){return c.hmrC[n](r.c,r.r,r.m,t,e,o),t}),[])).then((function(){return f((function(){return t?d(t):(l("ready"),o)}))}))}))}function h(t){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):d(t)}function d(t){t=t||{},v();var n=e.map((function(n){return n(t)}));e=void 0;var o,i=n.map((function(t){return t.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),n.forEach((function(t){t.dispose&&t.dispose()})),l("apply");var a=function(t){o||(o=t)},u=[];return n.forEach((function(t){if(t.apply){var n=t.apply(a);if(n)for(var e=0;e<n.length;e++)u.push(n[e])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):r?d(t).then((function(t){return u.forEach((function(n){t.indexOf(n)<0&&t.push(n)})),t})):(l("idle"),Promise.resolve(u))}function v(){if(r)return e||(e=[]),Object.keys(c.hmrI).forEach((function(t){r.forEach((function(n){c.hmrI[t](n,e)}))})),r=void 0,!0}c.hmrD=o,c.i.push((function(d){var v,g,m,y=d.module,w=function(e,r){var o=i[r];if(!o)return e;var u=function(n){if(o.hot.active){if(i[n]){var u=i[n].parents;-1===u.indexOf(r)&&u.push(r)}else a=[r],t=n;-1===o.children.indexOf(n)&&o.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+r),a=[];return e(n)},c=function(t){return{configurable:!0,enumerable:!0,get:function(){return e[t]},set:function(n){e[t]=n}}};for(var p in e)Object.prototype.hasOwnProperty.call(e,p)&&"e"!==p&&Object.defineProperty(u,p,c(p));return u.e=function(t){return function(t){switch(s){case"ready":return l("prepare"),n.push(t),f((function(){l("ready")})),t;case"prepare":return n.push(t),t;default:return t}}(e.e(t))},u}(d.require,d.id);y.hot=(v=d.id,g=y,m={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==v,_requireSelf:function(){a=g.parents.slice(),t=v,c(v)},active:!0,accept:function(t,n,e){if(void 0===t)m._selfAccepted=!0;else if("function"==typeof t)m._selfAccepted=t;else if("object"==typeof t&&null!==t)for(var r=0;r<t.length;r++)m._acceptedDependencies[t[r]]=n||function(){},m._acceptedErrorHandlers[t[r]]=e;else m._acceptedDependencies[t]=n||function(){},m._acceptedErrorHandlers[t]=e},decline:function(t){if(void 0===t)m._selfDeclined=!0;else if("object"==typeof t&&null!==t)for(var n=0;n<t.length;n++)m._declinedDependencies[t[n]]=!0;else m._declinedDependencies[t]=!0},dispose:function(t){m._disposeHandlers.push(t)},addDisposeHandler:function(t){m._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=m._disposeHandlers.indexOf(t);n>=0&&m._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":e=[],Object.keys(c.hmrI).forEach((function(t){c.hmrI[t](v,e)})),l("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(t){c.hmrI[t](v,e)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(v)}},check:p,apply:h,status:function(t){if(!t)return s;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var n=u.indexOf(t);n>=0&&u.splice(n,1)},data:o[v]},t=void 0,m),y.parents=a,y.children=[],a=[],d.require=w})),c.hmrC={},c.hmrI={}})(),(()=>{var t;c.g.importScripts&&(t=c.g.location+"");var n=c.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=t})(),e=(t,n,e,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)e();else{var a=i&&("load"===i.type?"missing":i.type),u=i&&i.target&&i.target.href||n,s=new Error("Loading CSS chunk "+t+" failed.\n("+u+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=a,s.request=u,o.parentNode.removeChild(o),r(s)}},o.href=n,document.head.appendChild(o),o},r=(t,n)=>{for(var e=document.getElementsByTagName("link"),r=0;r<e.length;r++){var o=(a=e[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===t||o===n))return a}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var a;if((o=(a=i[r]).getAttribute("data-href"))===t||o===n)return a}},o=[],i=[],a=t=>({dispose:()=>{for(var t=0;t<o.length;t++){var n=o[t];n.parentNode&&n.parentNode.removeChild(n)}o.length=0},apply:()=>{for(var t=0;t<i.length;t++)i[t].rel="stylesheet";i.length=0}}),c.hmrC.miniCss=(t,n,u,s,l,f)=>{l.push(a),t.forEach((t=>{var n=c.miniCssF(t),a=c.p+n;const u=r(n,a);u&&s.push(new Promise(((n,r)=>{var s=e(t,a,(()=>{s.as="style",s.rel="preload",n()}),r);o.push(u),i.push(s)})))}))},(()=>{var t,n,e,r,o={23:0},i={};function a(t){return new Promise(((n,e)=>{i[t]=n;var r=c.p+c.hu(t),o=new Error;c.l(r,(n=>{if(i[t]){i[t]=void 0;var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,e(o)}}))}))}function u(i){function a(t){for(var n=[t],e={},r=n.map((function(t){return{chain:[t],id:t}}));r.length>0;){var o=r.pop(),i=o.id,a=o.chain,s=c.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<s.parents.length;l++){var f=s.parents[l],p=c.c[f];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===n.indexOf(f)&&(p.hot._acceptedDependencies[i]?(e[f]||(e[f]=[]),u(e[f],[i])):(delete e[f],n.push(f),r.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function u(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}c.f&&delete c.f.jsonpHmr,t=void 0;var s={},l=[],f={},p=function(t){console.warn("[HMR] unexpected require("+t.id+") to disposed module")};for(var h in n)if(c.o(n,h)){var d,v=n[h],g=!1,m=!1,y=!1,w="";switch((d=v?a(h):{type:"disposed",moduleId:h}).chain&&(w="\nUpdate propagation: "+d.chain.join(" -> ")),d.type){case"self-declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(g=new Error("Aborted because of self decline: "+d.moduleId+w));break;case"declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+d.moduleId+" in "+d.parentId+w));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(d),i.ignoreUnaccepted||(g=new Error("Aborted because "+h+" is not accepted"+w));break;case"accepted":i.onAccepted&&i.onAccepted(d),m=!0;break;case"disposed":i.onDisposed&&i.onDisposed(d),y=!0;break;default:throw new Error("Unexception type "+d.type)}if(g)return{error:g};if(m)for(h in f[h]=v,u(l,d.outdatedModules),d.outdatedDependencies)c.o(d.outdatedDependencies,h)&&(s[h]||(s[h]=[]),u(s[h],d.outdatedDependencies[h]));y&&(u(l,[d.moduleId]),f[h]=p)}n=void 0;for(var x,b=[],_=0;_<l.length;_++){var S=l[_],E=c.c[S];E&&E.hot._selfAccepted&&f[S]!==p&&!E.hot._selfInvalidated&&b.push({module:S,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var t;e.forEach((function(t){delete o[t]})),e=void 0;for(var n,r=l.slice();r.length>0;){var i=r.pop(),a=c.c[i];if(a){var u={},f=a.hot._disposeHandlers;for(_=0;_<f.length;_++)f[_].call(null,u);for(c.hmrD[i]=u,a.hot.active=!1,delete c.c[i],delete s[i],_=0;_<a.children.length;_++){var p=c.c[a.children[_]];p&&(t=p.parents.indexOf(i))>=0&&p.parents.splice(t,1)}}}for(var h in s)if(c.o(s,h)&&(a=c.c[h]))for(x=s[h],_=0;_<x.length;_++)n=x[_],(t=a.children.indexOf(n))>=0&&a.children.splice(t,1)},apply:function(t){for(var n in f)c.o(f,n)&&(c.m[n]=f[n]);for(var e=0;e<r.length;e++)r[e](c);for(var o in s)if(c.o(s,o)){var a=c.c[o];if(a){x=s[o];for(var u=[],p=[],h=[],d=0;d<x.length;d++){var v=x[d],g=a.hot._acceptedDependencies[v],m=a.hot._acceptedErrorHandlers[v];if(g){if(-1!==u.indexOf(g))continue;u.push(g),p.push(m),h.push(v)}}for(var y=0;y<u.length;y++)try{u[y].call(null,x)}catch(n){if("function"==typeof p[y])try{p[y](n,{moduleId:o,dependencyId:h[y]})}catch(e){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:h[y],error:e,originalError:n}),i.ignoreErrored||(t(e),t(n))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:h[y],error:n}),i.ignoreErrored||t(n)}}}for(var w=0;w<b.length;w++){var _=b[w],S=_.module;try{_.require(S)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:S,module:c.c[S]})}catch(e){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:e,originalError:n}),i.ignoreErrored||(t(e),t(n))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:S,error:n}),i.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdategeo_satellites=(t,e,o)=>{for(var a in e)c.o(e,a)&&(n[a]=e[a]);o&&r.push(o),i[t]&&(i[t](),i[t]=void 0)},c.hmrI.jsonp=function(t,o){n||(n={},r=[],e=[],o.push(u)),c.o(n,t)||(n[t]=c.m[t])},c.hmrC.jsonp=function(i,s,l,f,p,h){p.push(u),t={},e=s,n=l.reduce((function(t,n){return t[n]=!1,t}),{}),r=[],i.forEach((function(n){c.o(o,n)&&void 0!==o[n]&&(f.push(a(n)),t[n]=!0)})),c.f&&(c.f.jsonpHmr=function(n,e){t&&!c.o(t,n)&&c.o(o,n)&&void 0!==o[n]&&(e.push(a(n)),t[n]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((t=>{if(404!==t.status){if(!t.ok)throw new Error("Failed to fetch update manifest "+t.statusText);return t.json()}}))}})(),c(7762)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,