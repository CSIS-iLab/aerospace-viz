!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=122)}([function(t,n,e){var r=e(26)("wks"),i=e(18),o=e(1).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(1),i=e(11),o=e(9),a=e(8),u=e(10),c=function(t,n,e){var s,l,f,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,m=t&c.B,y=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,w=d?i:i[n]||(i[n]={}),x=w.prototype||(w.prototype={});for(s in d&&(e=n),e)f=((l=!p&&y&&void 0!==y[s])?y:e)[s],h=m&&l?u(f,r):g&&"function"==typeof f?u(Function.call,f):f,y&&a(y,s,f,t&c.U),w[s]!=f&&o(w,s,h),g&&x[s]!=f&&(x[s]=f)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(3);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(4),i=e(50),o=e(33),a=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(9),o=e(12),a=e(18)("src"),u=e(79),c=(""+u).split("toString");e(11).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,a)||i(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(6),i=e(19);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(52),i=e(15);t.exports=function(t){return r(i(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(15);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=!1},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports={}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(53),i=e(37);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(27),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(6).f,i=e(12),o=e(0)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){"use strict";var r=e(49),i=e(51),o=e(20),a=e(13);t.exports=e(34)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r=e(11),i=e(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(14),i=e(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){"use strict";var r=e(28),i={};i[e(0)("toStringTag")]="z",i+""!="[object z]"&&e(8)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){for(var r=e(25),i=e(22),o=e(8),a=e(1),u=e(9),c=e(20),s=e(0),l=s("iterator"),f=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,m=d[v],y=p[m],w=a[m],x=w&&w.prototype;if(x&&(x[l]||u(x,l,h),x[f]||u(x,f,m),c[m]=h,y))for(g in r)x[g]||o(x,g,r[g],!0)}},function(t,n,e){var r=e(3),i=e(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){"use strict";var r=e(17),i=e(2),o=e(8),a=e(9),u=e(20),c=e(80),s=e(24),l=e(83),f=e(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,g,m){c(e,n,d);var y,w,x,b=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=n+" Iterator",S="values"==v,M=!1,E=t.prototype,C=E[f]||E["@@iterator"]||v&&E[v],A=C||b(v),T=v?S?b("entries"):A:void 0,N="Array"==n&&E.entries||C;if(N&&(x=l(N.call(new t)))!==Object.prototype&&x.next&&(s(x,_,!0),r||"function"==typeof x[f]||a(x,f,p)),S&&C&&"values"!==C.name&&(M=!0,A=function(){return C.call(this)}),r&&!m||!h&&!M&&E[f]||a(E,f,A),u[n]=A,u[_]=p,v)if(y={values:S?A:b("values"),keys:g?A:b("keys"),entries:T},m)for(w in y)w in E||o(E,w,y[w]);else i(i.P+i.F*(h||M),n,y);return y}},function(t,n,e){var r=e(4),i=e(81),o=e(37),a=e(36)("IE_PROTO"),u=function(){},c=function(){var t,n=e(32)("iframe"),r=o.length;for(n.style.display="none",e(55).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(26)("keys"),i=e(18);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(10),i=e(59),o=e(60),a=e(4),u=e(23),c=e(61),s={},l={};(n=t.exports=function(t,n,e,f,h){var p,d,v,g,m=h?function(){return t}:c(t),y=r(e,f,n?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=u(t.length);p>w;w++)if((g=n?y(a(d=t[w])[0],d[1]):y(t[w]))===s||g===l)return g}else for(v=m.call(t);!(d=v.next()).done;)if((g=i(v,y,d.value,n))===s||g===l)return g}).BREAK=s,n.RETURN=l},function(t,n,e){var r=e(8);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){"use strict";var r=e(2),i=e(43)(0),o=e(30)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(10),i=e(52),o=e(16),a=e(23),u=e(91);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,l=4==t,f=6==t,h=5==t||f,p=n||u;return function(n,u,d){for(var v,g,m=o(n),y=i(m),w=r(u,d,3),x=a(y.length),b=0,_=e?p(n,x):c?p(n,0):void 0;x>b;b++)if((h||b in y)&&(g=w(v=y[b],b,m),t))if(e)_[b]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return b;case 2:_.push(v)}else if(l)return!1;return f?-1:s||l?l:_}}},function(t,n,e){var r=e(14);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(4);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(18)("meta"),i=e(3),o=e(12),a=e(6).f,u=0,c=Object.isExtensible||function(){return!0},s=!e(5)(function(){return c(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";l(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!o(t,r)&&l(t),t}}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(0)("unscopables"),i=Array.prototype;null==i[r]&&e(9)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){t.exports=!e(7)&&!e(5)(function(){return 7!=Object.defineProperty(e(32)("div"),"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){var r=e(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(12),i=e(13),o=e(54)(!1),a=e(36)("IE_PROTO");t.exports=function(t,n){var e,u=i(t),c=0,s=[];for(e in u)e!=a&&r(u,e)&&s.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(13),i=e(23),o=e(82);t.exports=function(t){return function(n,e,a){var u,c=r(n),s=i(c.length),l=o(a,s);if(t&&e!=e){for(;s>l;)if((u=c[l++])!=u)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===e)return t||l||0;return!t&&-1}}},function(t,n,e){var r=e(1).document;t.exports=r&&r.documentElement},function(t,n,e){"use strict";var r=e(57)(!0);e(34)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){var r=e(27),i=e(15);t.exports=function(t){return function(n,e){var o,a,u=String(i(n)),c=r(e),s=u.length;return c<0||c>=s?t?"":void 0:(o=u.charCodeAt(c))<55296||o>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):o:t?u.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(10),i=e(2),o=e(16),a=e(59),u=e(60),c=e(23),s=e(84),l=e(61);i(i.S+i.F*!e(38)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,f,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,m=0,y=l(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(e=new p(n=c(h.length));n>m;m++)s(e,m,g?v(h[m],m):h[m]);else for(f=y.call(h),e=new p;!(i=f.next()).done;m++)s(e,m,g?a(f,v,[i.value,m],!0):i.value);return e.length=m,e}})},function(t,n,e){var r=e(4);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(20),i=e(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(28),i=e(0)("iterator"),o=e(20);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function c(t,n,e,r){var i=n&&n.prototype instanceof v?n:v,o=Object.create(i.prototype),a=new A(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return N()}for(e.method=i,e.arg=o;;){var a=e.delegate;if(a){var u=M(a,e);if(u){if(u===d)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var c=s(t,n,e);if("normal"===c.type){if(r=e.done?p:f,c.arg===d)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=p,e.method="throw",e.arg=c.arg)}}}(t,e,a),o}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l="suspendedStart",f="suspendedYield",h="executing",p="completed",d={};function v(){}function g(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==e&&r.call(x,o)&&(y=x);var b=m.prototype=v.prototype=Object.create(y);function _(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function S(t){var n;this._invoke=function(e,i){function o(){return new Promise(function(n,o){!function n(e,i,o,a){var u=s(t[e],t,i);if("throw"!==u.type){var c=u.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(l).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,a)})}a(u.arg)}(e,i,n,o)})}return n=n?n.then(o,o):o()}}function M(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,M(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=s(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function C(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function T(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function e(){for(;++i<t.length;)if(r.call(t,i))return e.value=t[i],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:N}}function N(){return{value:n,done:!0}}return g.prototype=b.constructor=m,m.constructor=g,m[u]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,i){var o=new S(c(n,e,r,i));return t.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},_(b),b[u]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function i(r,i){return u.type="throw",u.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var c=r.call(a,"catchLoc"),s=r.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),C(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;C(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){"use strict";var r,i,o,a,u=e(17),c=e(1),s=e(10),l=e(28),f=e(2),h=e(3),p=e(21),d=e(39),v=e(40),g=e(85),m=e(64).set,y=e(87)(),w=e(65),x=e(88),b=e(89),_=e(90),S=c.TypeError,M=c.process,E=M&&M.versions,C=E&&E.v8||"",A=c.Promise,T="process"==l(M),N=function(){},k=i=w.f,O=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(0)("species")]=function(t){t(N,N)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(N)instanceof n&&0!==C.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),P=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},U=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,a=function(n){var e,o,a,u=i?n.ok:n.fail,c=n.resolve,s=n.reject,l=n.domain;try{u?(i||(2==t._h&&L(t),t._h=1),!0===u?e=r:(l&&l.enter(),e=u(r),l&&(l.exit(),a=!0)),e===n.promise?s(S("Promise-chain cycle")):(o=P(e))?o.call(e,c,s):c(e)):s(r)}catch(t){l&&!a&&l.exit(),s(t)}};e.length>o;)a(e[o++]);t._c=[],t._n=!1,n&&!t._h&&D(t)})}},D=function(t){m.call(c,function(){var n,e,r,i=t._v,o=j(t);if(o&&(n=x(function(){T?M.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=T||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(c,function(){var n;T?M.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},F=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),U(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=P(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(R,r,1),s(F,r,1))}catch(t){F.call(r,t)}}):(e._v=t,e._s=1,U(e,!1))}catch(t){F.call({_w:e,_d:!1},t)}}};O||(A=function(t){d(this,A,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(41)(A.prototype,{then:function(t,n){var e=k(g(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=T?M.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&U(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(F,t,1)},w.f=k=function(t){return t===A||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!O,{Promise:A}),e(24)(A,"Promise"),e(66)("Promise"),a=e(11).Promise,f(f.S+f.F*!O,"Promise",{reject:function(t){var n=k(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(u||!O),"Promise",{resolve:function(t){return _(u&&this===a?A:this,t)}}),f(f.S+f.F*!(O&&e(38)(function(t){A.all(t).catch(N)})),"Promise",{all:function(t){var n=this,e=k(n),r=e.resolve,i=e.reject,o=x(function(){var e=[],o=0,a=1;v(t,!1,function(t){var u=o++,c=!1;e.push(void 0),a++,n.resolve(t).then(function(t){c||(c=!0,e[u]=t,--a||r(e))},i)}),--a||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=k(n),r=e.reject,i=x(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){var r,i,o,a=e(10),u=e(86),c=e(55),s=e(32),l=e(1),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},w=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(14)(f)?r=function(t){f.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=w,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(21);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(1),i=e(6),o=e(7),a=e(0)("species");t.exports=function(t){var n=r[t];o&&n&&!n[a]&&i.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(23),a=e(27),u=e(93),c=e(94),s=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(95)("replace",2,function(t,n,e,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=d(e,t,this,n);if(i.done)return i.value;var f=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=f.global;if(g){var m=f.unicode;f.lastIndex=0}for(var y=[];;){var w=c(f,h);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(f.lastIndex=u(h,o(f.lastIndex),m))}for(var x,b="",_=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),E=s(l(a(w.index),h.length),0),C=[],A=1;A<w.length;A++)C.push(void 0===(x=w[A])?x:String(x));var T=w.groups;if(p){var N=[M].concat(C,E,h);void 0!==T&&N.push(T);var k=String(n.apply(void 0,N))}else k=v(M,h,E,C,T,n);E>=_&&(b+=h.slice(_,E)+k,_=E+M.length)}return b+h.slice(_)}];function v(t,n,r,o,a,u){var c=r+t.length,s=o.length,l=p;return void 0!==a&&(a=i(a),l=h),e.call(u,l,function(e,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return e;if(l>s){var h=f(l/10);return 0===h?e:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}u=o[l-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r,i,o=e(45),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(s||l)&&(c=function(t){var n,e,r,i,c=this;return l&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),l&&r&&r.length>1&&u.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";e(100);var r=e(4),i=e(45),o=e(7),a=/./.toString,u=function(t){e(8)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(8)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(1),i=e(11),o=e(17),a=e(72),u=e(6).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){n.f=e(0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(53),i=e(37).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(47),i=e(19),o=e(13),a=e(33),u=e(12),c=e(50),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=o(t),n=a(n,!0),c)try{return s(t,n)}catch(t){}if(u(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){"use strict";var r=e(6).f,i=e(35),o=e(41),a=e(10),u=e(39),c=e(40),s=e(34),l=e(51),f=e(66),h=e(7),p=e(46).fastKey,d=e(48),v=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var l=t(function(t,r){u(t,l,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return o(l.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,n),t)}}),h&&r(l.prototype,"size",{get:function(){return d(this,n)[v]}}),l},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?l(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,l(1))},e?"entries":"values",!e,!0),f(n)}}},function(t,n,e){"use strict";var r=e(1),i=e(2),o=e(8),a=e(41),u=e(46),c=e(40),s=e(39),l=e(3),f=e(5),h=e(38),p=e(24),d=e(111);t.exports=function(t,n,e,v,g,m){var y=r[t],w=y,x=g?"set":"add",b=w&&w.prototype,_={},S=function(t){var n=b[t];o(b,t,"delete"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!l(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof w&&(m||b.forEach&&!f(function(){(new w).entries().next()}))){var M=new w,E=M[x](m?{}:-0,1)!=M,C=f(function(){M.has(1)}),A=h(function(t){new w(t)}),T=!m&&f(function(){for(var t=new w,n=5;n--;)t[x](n,n);return!t.has(-0)});A||((w=n(function(n,e){s(n,w,t);var r=d(new y,n,w);return null!=e&&c(e,g,r[x],r),r})).prototype=b,b.constructor=w),(C||T)&&(S("delete"),S("has"),g&&S("get")),(T||E)&&S(x),m&&b.clear&&delete b.clear}else w=v.getConstructor(n,t,g,x),a(w.prototype,e),u.NEED=!0;return p(w,t),_[t]=w,i(i.G+i.W+i.F*(w!=y),_),m||v.setStrong(w,t,g),w}},function(t,n,e){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(s(t,n),setTimeout(function(){l(t,n)},e))}function a(t){return Math.max(Math.min(t,100),0)}function u(t){return Array.isArray(t)?t:[t]}function c(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function s(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||""),r=n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,i=n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop;return{x:r,y:i}}function h(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function v(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),i=t[r-1],o=t[r],a=n[r-1],u=n[r];return a+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],e)/h(a,u)}function g(t,n,e,r){if(100===r)return r;var i=d(r,t),o=t[i-1],a=t[i];return e?r-o>(a-o)/2?a:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(r-t[i-1],n[i-1]):r}function m(n,e,r){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(e[0]),o?r.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(r.xSteps[0]=e[1]),r.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/h(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*i;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,n){return t[0][0]-n[0][0]}):i.sort(function(t,n){return t[0]-n[0]}),r=0;r<i.length;r++)m(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},w.prototype.toStepping=function(t){return t=v(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),i=t[r-1],o=t[r],a=n[r-1],u=n[r];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(e-a)*h(a,u))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function b(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function _(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function S(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new w(e,n.snap,n.singleStep)}function M(n,e){if(e=u(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function E(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function A(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function T(n,e){var r,i=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<n.handles;r++)i.push(e);i.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=e}n.connect=i}function N(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function k(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function O(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function P(n,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function U(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function D(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=e.indexOf("tap")>=0,i=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,a=e.indexOf("snap")>=0,u=e.indexOf("hover")>=0,c=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");k(n,n.start[1]-n.start[0])}if(c&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:r||a,drag:i,fixed:o,snap:a,hover:u,unconstrained:c}}function j(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(!0)}else{if(n.tooltips=u(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach(function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function L(t,n){t.ariaFormat=n,b(n)}function F(t,n){t.format=n,b(n)}function R(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function H(t,n){t.documentElement=n}function I(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function V(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var r in n.cssClasses={},e)e.hasOwnProperty(r)&&(n.cssClasses[r]=n.cssPrefix+e[r]);else n.cssClasses=e}function Y(n){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:_},start:{r:!0,t:M},connect:{r:!0,t:T},direction:{r:!0,t:U},snap:{r:!1,t:E},animate:{r:!1,t:C},animationDuration:{r:!1,t:A},range:{r:!0,t:S},orientation:{r:!1,t:N},margin:{r:!1,t:k},limit:{r:!1,t:O},padding:{r:!1,t:P},behaviour:{r:!0,t:D},ariaFormat:{r:!1,t:L},format:{r:!1,t:F},tooltips:{r:!1,t:j},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:H},cssPrefix:{r:!0,t:I},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach(function(a){if(!e(n[a])&&void 0===o[a]){if(i[a].r)throw new Error("noUiSlider ("+t+"): '"+a+"' is required.");return!0}i[a].t(r,e(n[a])?n[a]:o[a])}),r.pips=n.pips;var a=document.createElement("div"),u=void 0!==a.style.msTransform,c=void 0!==a.style.transform;return r.transformRule=c?"transform":u?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function z(e,i,c){var h,p,d,v,g,m,y,w,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},b=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),_=b&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),S=e,M=i.spectrum,E=[],C=[],A=[],T=0,N={},k=e.ownerDocument,O=i.documentElement||k.documentElement,P=k.body,U=-1,D=0,j=1,L=2,F="rtl"===k.dir||1===i.ort?0:100;function R(t,n){var e=k.createElement("div");return n&&s(e,n),t.appendChild(e),e}function H(t,n){var e=R(t,i.cssClasses.origin),r=R(e,i.cssClasses.handle);return R(r,i.cssClasses.touchArea),r.setAttribute("data-handle",n),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",function(t){return function(t,n){if(z()||q(n))return!1;var e=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),a=o===r[0]||o===e[0],u=o===r[1]||o===e[1];if(!a&&!u)return!0;t.preventDefault();var c=a?0:1,s=wt(n)[c];return null!==s&&(!1===s&&(s=M.getDefaultStep(C[n],a,10)),s=Math.max(s,1e-7),s*=a?-1:1,mt(n,E[n]+s,!0),!1)}(t,n)})),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?s(r,i.cssClasses.handleLower):n===i.handles-1&&s(r,i.cssClasses.handleUpper),e}function I(t,n){return!!n&&R(t,i.cssClasses.connect)}function V(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function z(){return S.hasAttribute("disabled")}function q(t){var n=p[t];return n.hasAttribute("disabled")}function X(){g&&(at("update.tooltips"),g.forEach(function(t){t&&n(t)}),g=null)}function B(){X(),g=p.map(V),ot("update.tooltips",function(t,n,e){if(g[n]){var r=t[n];!0!==i.tooltips[n]&&(r=i.tooltips[n].to(e[n])),g[n].innerHTML=r}})}function $(t,n,e){var r=k.createElement("div"),o=[];o[D]=i.cssClasses.valueNormal,o[j]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var a=[];a[D]=i.cssClasses.markerNormal,a[j]=i.cssClasses.markerLarge,a[L]=i.cssClasses.markerSub;var u=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function l(t,n){var e=n===i.cssClasses.value,r=e?u:c,s=e?o:a;return n+" "+r[i.ort]+" "+s[t]}return s(r,i.cssClasses.pips),s(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(o){!function(t,o,a){if((a=n?n(o,a):a)!==U){var u=R(r,!1);u.className=l(a,i.cssClasses.marker),u.style[i.style]=t+"%",a>D&&((u=R(r,!1)).className=l(a,i.cssClasses.value),u.setAttribute("data-value",o),u.style[i.style]=t+"%",u.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])}),r}function W(){v&&(n(v),v=null)}function G(n){W();var e=n.mode,r=n.density||1,i=n.filter||!1,o=n.values||!1,a=n.stepped||!1,u=function(n,e,r){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=e-1,o=100/i;for(e=[];i--;)e[i]=i*o;e.push(100),n="positions"}return"positions"===n?e.map(function(t){return M.fromStepping(r?M.getStep(t):t)}):"values"===n?r?e.map(function(t){return M.fromStepping(M.getStep(M.toStepping(t)))}):e:void 0}(e,o,a),c=function(t,n,e){var r,i={},o=M.xVal[0],a=M.xVal[M.xVal.length-1],u=!1,c=!1,s=0;return(r=e.slice().sort(function(t,n){return t-n}),e=r.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==o&&(e.unshift(o),u=!0),e[e.length-1]!==a&&(e.push(a),c=!0),e.forEach(function(r,o){var a,l,f,h,p,d,v,g,m,y,w=r,x=e[o+1],b="steps"===n;if(b&&(a=M.xNumSteps[o]),a||(a=x-w),!1!==w&&void 0!==x)for(a=Math.max(a,1e-7),l=w;l<=x;l=(l+a).toFixed(7)/1){for(g=(p=(h=M.toStepping(l))-s)/t,y=p/(m=Math.round(g)),f=1;f<=m;f+=1)i[(d=s+f*y).toFixed(5)]=[M.fromStepping(d),0];v=e.indexOf(l)>-1?j:b?L:D,!o&&u&&(v=0),l===x&&c||(i[h.toFixed(5)]=[l,v]),s=h}}),i}(r,e,u),s=n.format||{to:Math.round};return v=S.appendChild($(c,i,s))}function Z(){var t=h.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||h[n]:t.height||h[n]}function J(t,n,e,r){var o=function(o){return!!(o=function(t,n,e){var r,i,o=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),u=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(u=!0),o){var c=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var s=Array.prototype.filter.call(t.touches,c);if(s.length>1)return!1;r=s[0].pageX,i=s[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,c);if(!l)return!1;r=l.pageX,i=l.pageY}}return n=n||f(k),(a||u)&&(r=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[r,i],t.cursor=a||u,t}(o,r.pageOffset,r.target||n))&&!(z()&&!r.doNotReject)&&(a=S,u=i.cssClasses.tap,!((a.classList?a.classList.contains(u):new RegExp("\\b"+u+"\\b").test(a.className))&&!r.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(_||o.preventDefault(),o.calcPoint=o.points[i.ort],void e(o,r)));var a,u},a=[];return t.split(" ").forEach(function(t){n.addEventListener(t,o,!!_&&{passive:!0}),a.push([t,o])}),a}function Q(t){var n,e,r,o,u,c,s=t-(n=h,e=i.ort,r=n.getBoundingClientRect(),o=n.ownerDocument,u=o.documentElement,c=f(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),e?r.top+c.y-u.clientTop:r.left+c.x-u.clientLeft),l=100*s/Z();return l=a(l),i.dir?100-l:l}function K(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&nt(t,n)}function tt(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return nt(t,n);var e=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint),r=100*e/n.baseSize;lt(e>0,r,n.locations,n.handleNumbers)}function nt(t,n){n.handle&&(l(n.handle,i.cssClasses.active),T-=1),n.listeners.forEach(function(t){O.removeEventListener(t[0],t[1])}),0===T&&(l(S,i.cssClasses.drag),ht(),t.cursor&&(P.style.cursor="",P.removeEventListener("selectstart",r))),n.handleNumbers.forEach(function(t){ut("change",t),ut("set",t),ut("end",t)})}function et(t,n){if(n.handleNumbers.some(q))return!1;var e;if(1===n.handleNumbers.length){var o=p[n.handleNumbers[0]];e=o.children[0],T+=1,s(e,i.cssClasses.active)}t.stopPropagation();var a=[],u=J(x.move,O,tt,{target:t.target,handle:e,listeners:a,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:C.slice()}),c=J(x.end,O,nt,{target:t.target,handle:e,listeners:a,doNotReject:!0,handleNumbers:n.handleNumbers}),l=J("mouseout",O,K,{target:t.target,handle:e,listeners:a,doNotReject:!0,handleNumbers:n.handleNumbers});a.push.apply(a,u.concat(c,l)),t.cursor&&(P.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&s(S,i.cssClasses.drag),P.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach(function(t){ut("start",t)})}function rt(t){t.stopPropagation();var n=Q(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach(function(r,i){if(!q(i)){var o=Math.abs(C[i]-t);(o<n||100===o&&100===n)&&(e=i,n=o)}}),e}(n);if(!1===e)return!1;i.events.snap||o(S,i.cssClasses.tap,i.animationDuration),pt(e,n,!0,!0),ht(),ut("slide",e,!0),ut("update",e,!0),ut("change",e,!0),ut("set",e,!0),i.events.snap&&et(t,{handleNumbers:[e]})}function it(t){var n=Q(t.calcPoint),e=M.getStep(n),r=M.fromStepping(e);Object.keys(N).forEach(function(t){"hover"===t.split(".")[0]&&N[t].forEach(function(t){t.call(m,r)})})}function ot(t,n){N[t]=N[t]||[],N[t].push(n),"update"===t.split(".")[0]&&p.forEach(function(t,n){ut("update",n)})}function at(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(N).forEach(function(t){var r=t.split(".")[0],i=t.substring(r.length);n&&n!==r||e&&e!==i||delete N[t]})}function ut(t,n,e){Object.keys(N).forEach(function(r){var o=r.split(".")[0];t===o&&N[r].forEach(function(t){t.call(m,E.map(i.format.to),n,E.slice(),e||!1,C.slice())})})}function ct(t,n,e,r,o,u){return p.length>1&&!i.events.unconstrained&&(r&&n>0&&(e=Math.max(e,t[n-1]+i.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-i.margin))),p.length>1&&i.limit&&(r&&n>0&&(e=Math.min(e,t[n-1]+i.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-i.limit))),i.padding&&(0===n&&(e=Math.max(e,i.padding[0])),n===p.length-1&&(e=Math.min(e,100-i.padding[1]))),!((e=a(e=M.getStep(e)))===t[n]&&!u)&&e}function st(t,n){var e=i.ort;return(e?n:t)+", "+(e?t:n)}function lt(t,n,e,r){var i=e.slice(),o=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach(function(t,e){var r=ct(i,t,i[t]+n,o[e],a[e],!1);!1===r?n=0:(n=r-i[t],i[t]=r)}):o=a=[!0];var u=!1;r.forEach(function(t,r){u=pt(t,e[t]+n,o[r],a[r])||u}),u&&r.forEach(function(t){ut("update",t),ut("slide",t)})}function ft(t,n){return i.dir?100-t-n:t}function ht(){A.forEach(function(t){var n=C[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e})}function pt(t,n,e,r){return!1!==(n=ct(C,t,n,e,r,!1))&&(function(t,n){C[t]=n,E[t]=M.fromStepping(n);var e="translate("+st(ft(n,0)-F+"%","0")+")";p[t].style[i.transformRule]=e,dt(t),dt(t+1)}(t,n),!0)}function dt(t){if(d[t]){var n=0,e=100;0!==t&&(n=C[t-1]),t!==d.length-1&&(e=C[t]);var r=e-n,o="translate("+st(ft(n,r)+"%","0")+")",a="scale("+st(r/100,"1")+")";d[t].style[i.transformRule]=o+" "+a}}function vt(t,n){return null===t||!1===t||void 0===t?C[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?C[n]:t)}function gt(t,n){var e=u(t),r=void 0===C[0];n=void 0===n||!!n,i.animate&&!r&&o(S,i.cssClasses.tap,i.animationDuration),A.forEach(function(t){pt(t,vt(e[t],t),!0,!1)}),A.forEach(function(t){pt(t,C[t],!0,!0)}),ht(),A.forEach(function(t){ut("update",t),null!==e[t]&&n&&ut("set",t)})}function mt(n,e,r){if(!((n=Number(n))>=0&&n<A.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);pt(n,vt(e,n),!0,!0),ut("update",n),r&&ut("set",n)}function yt(){var t=E.map(i.format.to);return 1===t.length?t[0]:t}function wt(t){var n=C[t],e=M.getNearbySteps(n),r=E[t],i=e.thisStep.step,o=null;!1!==i&&r+i>e.stepAfter.startValue&&(i=e.stepAfter.startValue-r),o=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===n?i=null:0===n&&(o=null);var a=M.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(a))),null!==o&&!1!==o&&(o=Number(o.toFixed(a))),[o,i]}return s(w=S,i.cssClasses.target),0===i.dir?s(w,i.cssClasses.ltr):s(w,i.cssClasses.rtl),0===i.ort?s(w,i.cssClasses.horizontal):s(w,i.cssClasses.vertical),h=R(w,i.cssClasses.base),function(t,n){var e=R(n,i.cssClasses.connects);p=[],(d=[]).push(I(e,t[0]));for(var r=0;r<i.handles;r++)p.push(H(n,r)),A[r]=r,d.push(I(e,t[r+1]))}(i.connect,h),(y=i.events).fixed||p.forEach(function(t,n){J(x.start,t.children[0],et,{handleNumbers:[n]})}),y.tap&&J(x.start,h,rt,{}),y.hover&&J(x.move,h,it,{hover:!0}),y.drag&&d.forEach(function(t,n){if(!1!==t&&0!==n&&n!==d.length-1){var e=p[n-1],r=p[n],o=[t];s(t,i.cssClasses.draggable),y.fixed&&(o.push(e.children[0]),o.push(r.children[0])),o.forEach(function(t){J(x.start,t,et,{handles:[e,r],handleNumbers:[n-1,n]})})}}),gt(i.start),i.pips&&G(i.pips),i.tooltips&&B(),ot("update",function(t,n,e,r,o){A.forEach(function(t){var n=p[t],r=ct(C,t,0,!0,!0,!0),a=ct(C,t,100,!0,!0,!0),u=o[t],c=i.ariaFormat.to(e[t]);r=M.fromStepping(r).toFixed(1),a=M.fromStepping(a).toFixed(1),u=M.fromStepping(u).toFixed(1),n.children[0].setAttribute("aria-valuemin",r),n.children[0].setAttribute("aria-valuemax",a),n.children[0].setAttribute("aria-valuenow",u),n.children[0].setAttribute("aria-valuetext",c)})}),m={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&l(S,i.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return A.map(wt)},on:ot,off:at,get:yt,set:gt,setHandle:mt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,e){lt(t,n,C,e)},options:c,updateOptions:function(t,n){var e=yt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach(function(n){void 0!==t[n]&&(c[n]=t[n])});var o=Y(c);r.forEach(function(n){void 0!==t[n]&&(i[n]=o[n])}),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?G(i.pips):W(),i.tooltips?B():X(),C=[],gt(t.start||e,n)},target:S,removePips:W,removeTooltips:X,pips:G}}return{__spectrum:w,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=Y(e),i=z(n,r,e);return n.noUiSlider=i,i}}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){t.exports=e(26)("native-function-to-string",Function.toString)},function(t,n,e){"use strict";var r=e(35),i=e(19),o=e(24),a={};e(9)(a,e(0)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(6),i=e(4),o=e(22);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(27),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(12),i=e(16),o=e(36)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,e){"use strict";var r=e(6),i=e(19);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(4),i=e(21),o=e(0)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[o])?n:i(e)}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(1),i=e(64).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(14)(a);t.exports=function(){var t,n,e,s=function(){var r,i;for(c&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var l=u.resolve(void 0);e=function(){l.then(s)}}else e=function(){i.call(r,s)};else{var f=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(4),i=e(3),o=e(65);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){var r=e(92);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(3),i=e(44),o=e(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(57)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){"use strict";var r=e(28),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(96);var r=e(8),i=e(9),o=e(5),a=e(15),u=e(0),c=e(68),s=u("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!l||"split"===t&&!f){var v=/./[h],g=e(a,h,""[t],function(t,n,e,r,i){return n.exec===c?p&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){"use strict";var r=e(68);e(2)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){"use strict";e(98)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){var r=e(2),i=e(15),o=e(5),a=e(99),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),l=function(t,n,e){var i={},u=o(function(){return!!a[t]()||"âÂ"!="âÂ"[t]()}),c=i[t]=u?n(f):a[t];e&&(i[e]=c),r(r.P+r.F*u,"String",i)},f=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=l},function(t,n){t.exports="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(6).f(RegExp.prototype,"flags",{configurable:!0,get:e(45)})},function(t,n,e){var r=e(16),i=e(22);e(102)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(2),i=e(11),o=e(5);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",a)}},function(t,n,e){e(71)("asyncIterator")},function(t,n,e){"use strict";var r=e(1),i=e(12),o=e(7),a=e(2),u=e(8),c=e(46).KEY,s=e(5),l=e(26),f=e(24),h=e(18),p=e(0),d=e(72),v=e(71),g=e(105),m=e(44),y=e(4),w=e(3),x=e(13),b=e(33),_=e(19),S=e(35),M=e(106),E=e(75),C=e(6),A=e(22),T=E.f,N=C.f,k=M.f,O=r.Symbol,P=r.JSON,U=P&&P.stringify,D=p("_hidden"),j=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),R=l("symbols"),H=l("op-symbols"),I=Object.prototype,V="function"==typeof O,Y=r.QObject,z=!Y||!Y.prototype||!Y.prototype.findChild,q=o&&s(function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=T(I,n);r&&delete I[n],N(t,n,e),r&&t!==I&&N(I,n,r)}:N,X=function(t){var n=R[t]=S(O.prototype);return n._k=t,n},B=V&&"symbol"==typeof O.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof O},$=function(t,n,e){return t===I&&$(H,n,e),y(t),n=b(n,!0),y(e),i(R,n)?(e.enumerable?(i(t,D)&&t[D][n]&&(t[D][n]=!1),e=S(e,{enumerable:_(0,!1)})):(i(t,D)||N(t,D,_(1,{})),t[D][n]=!0),q(t,n,e)):N(t,n,e)},W=function(t,n){y(t);for(var e,r=g(n=x(n)),i=0,o=r.length;o>i;)$(t,e=r[i++],n[e]);return t},G=function(t){var n=L.call(this,t=b(t,!0));return!(this===I&&i(R,t)&&!i(H,t))&&(!(n||!i(this,t)||!i(R,t)||i(this,D)&&this[D][t])||n)},Z=function(t,n){if(t=x(t),n=b(n,!0),t!==I||!i(R,n)||i(H,n)){var e=T(t,n);return!e||!i(R,n)||i(t,D)&&t[D][n]||(e.enumerable=!0),e}},J=function(t){for(var n,e=k(x(t)),r=[],o=0;e.length>o;)i(R,n=e[o++])||n==D||n==c||r.push(n);return r},Q=function(t){for(var n,e=t===I,r=k(e?H:x(t)),o=[],a=0;r.length>a;)!i(R,n=r[a++])||e&&!i(I,n)||o.push(R[n]);return o};V||(u((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===I&&n.call(H,e),i(this,D)&&i(this[D],t)&&(this[D][t]=!1),q(this,t,_(1,e))};return o&&z&&q(I,t,{configurable:!0,set:n}),X(t)}).prototype,"toString",function(){return this._k}),E.f=Z,C.f=$,e(74).f=M.f=J,e(47).f=G,e(73).f=Q,o&&!e(17)&&u(I,"propertyIsEnumerable",G,!0),d.f=function(t){return X(p(t))}),a(a.G+a.W+a.F*!V,{Symbol:O});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)p(K[tt++]);for(var nt=A(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return i(F,t+="")?F[t]:F[t]=O(t)},keyFor:function(t){if(!B(t))throw TypeError(t+" is not a symbol!");for(var n in F)if(F[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):W(S(t),n)},defineProperty:$,defineProperties:W,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),P&&a(a.S+a.F*(!V||s(function(){var t=O();return"[null]"!=U([t])||"{}"!=U({a:t})||"{}"!=U(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(w(n)||void 0!==t)&&!B(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!B(n))return n}),r[1]=n,U.apply(P,r)}}),O.prototype[j]||e(9)(O.prototype,j,O.prototype.valueOf),f(O,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,n,e){var r=e(22),i=e(73),o=e(47);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var a,u=e(t),c=o.f,s=0;u.length>s;)c.call(t,a=u[s++])&&n.push(a);return n}},function(t,n,e){var r=e(13),i=e(74).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,n,e){var r=e(2);r(r.S,"Array",{isArray:e(44)})},function(t,n,e){"use strict";var r=e(2),i=e(21),o=e(16),a=e(5),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!e(30)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(2),i=e(43)(2);r(r.P+r.F*!e(30)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(76),i=e(48);t.exports=e(77)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){var r=e(3),i=e(112).set;t.exports=function(t,n,e){var o,a=n.constructor;return a!==e&&"function"==typeof a&&(o=a.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(3),i=e(4),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(10)(Function.call,e(75).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){"use strict";var r=e(2),i=e(43)(1);r(r.P+r.F*!e(30)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(76),i=e(48);t.exports=e(77)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r=e(2),i=e(54)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(49)("includes")},function(t,n,e){"use strict";var r=e(2),i=e(117);r(r.P+r.F*e(119)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(118),i=e(15);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(3),i=e(14),o=e(0)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(0)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){},function(t,n,e){},function(t,n,e){"use strict";e.r(n);e(31),e(25),e(56),e(58),e(62),e(63),e(29),e(42),e(67),e(97);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),a=o.right,u=(o.left,a);var c=Array.prototype,s=(c.slice,c.map,Math.sqrt(50)),l=Math.sqrt(10),f=Math.sqrt(2),h=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=p(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function p(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=s?10:o>=l?5:o>=f?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=s?10:o>=l?5:o>=f?2:1)}function d(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=s?i*=10:o>=l?i*=5:o>=f&&(i*=2),n<t?-i:i}function v(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Symbol("implicit");var g=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function m(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function y(){}var w="\\s*([+-]?\\d+)\\s*",x="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",b="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",_=/^#([0-9a-f]{3})$/,S=/^#([0-9a-f]{6})$/,M=new RegExp("^rgb\\("+[w,w,w]+"\\)$"),E=new RegExp("^rgb\\("+[b,b,b]+"\\)$"),C=new RegExp("^rgba\\("+[w,w,w,x]+"\\)$"),A=new RegExp("^rgba\\("+[b,b,b,x]+"\\)$"),T=new RegExp("^hsl\\("+[x,b,b]+"\\)$"),N=new RegExp("^hsla\\("+[x,b,b,x]+"\\)$"),k={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function O(t){var n;return t=(t+"").trim().toLowerCase(),(n=_.exec(t))?new L((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=S.exec(t))?P(parseInt(n[1],16)):(n=M.exec(t))?new L(n[1],n[2],n[3],1):(n=E.exec(t))?new L(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=C.exec(t))?U(n[1],n[2],n[3],n[4]):(n=A.exec(t))?U(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=T.exec(t))?R(n[1],n[2]/100,n[3]/100,1):(n=N.exec(t))?R(n[1],n[2]/100,n[3]/100,n[4]):k.hasOwnProperty(t)?P(k[t]):"transparent"===t?new L(NaN,NaN,NaN,0):null}function P(t){return new L(t>>16&255,t>>8&255,255&t,1)}function U(t,n,e,r){return r<=0&&(t=n=e=NaN),new L(t,n,e,r)}function D(t){return t instanceof y||(t=O(t)),t?new L((t=t.rgb()).r,t.g,t.b,t.opacity):new L}function j(t,n,e,r){return 1===arguments.length?D(t):new L(t,n,e,null==r?1:r)}function L(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function F(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function R(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new I(t,n,e,r)}function H(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof I)return new I(t.h,t.s,t.l,t.opacity);if(t instanceof y||(t=O(t)),!t)return new I;if(t instanceof I)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new I(a,u,c,t.opacity)}(t):new I(t,n,e,null==r?1:r)}function I(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function V(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}g(y,O,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),g(L,j,m(y,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new L(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new L(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+F(this.r)+F(this.g)+F(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),g(I,H,m(y,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new I(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new I(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new L(V(t>=240?t-240:t+120,i,r),V(t,i,r),V(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Y=Math.PI/180,z=180/Math.PI,q=.96422,X=1,B=.82521,$=4/29,W=6/29,G=3*W*W,Z=W*W*W;function J(t){if(t instanceof K)return new K(t.l,t.a,t.b,t.opacity);if(t instanceof at){if(isNaN(t.h))return new K(t.l,0,0,t.opacity);var n=t.h*Y;return new K(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof L||(t=D(t));var e,r,i=rt(t.r),o=rt(t.g),a=rt(t.b),u=tt((.2225045*i+.7168786*o+.0606169*a)/X);return i===o&&o===a?e=r=u:(e=tt((.4360747*i+.3850649*o+.1430804*a)/q),r=tt((.0139322*i+.0971045*o+.7141733*a)/B)),new K(116*u-16,500*(e-u),200*(u-r),t.opacity)}function Q(t,n,e,r){return 1===arguments.length?J(t):new K(t,n,e,null==r?1:r)}function K(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function tt(t){return t>Z?Math.pow(t,1/3):t/G+$}function nt(t){return t>W?t*t*t:G*(t-$)}function et(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function rt(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function it(t){if(t instanceof at)return new at(t.h,t.c,t.l,t.opacity);if(t instanceof K||(t=J(t)),0===t.a&&0===t.b)return new at(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*z;return new at(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function ot(t,n,e,r){return 1===arguments.length?it(t):new at(t,n,e,null==r?1:r)}function at(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}g(K,Q,m(y,{brighter:function(t){return new K(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new K(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new L(et(3.1338561*(n=q*nt(n))-1.6168667*(t=X*nt(t))-.4906146*(e=B*nt(e))),et(-.9787684*n+1.9161415*t+.033454*e),et(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),g(at,ot,m(y,{brighter:function(t){return new at(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new at(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return J(this).rgb()}}));var ut=-.14861,ct=1.78277,st=-.29227,lt=-.90649,ft=1.97294,ht=ft*lt,pt=ft*ct,dt=ct*st-lt*ut;function vt(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof gt)return new gt(t.h,t.s,t.l,t.opacity);t instanceof L||(t=D(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(dt*r+ht*n-pt*e)/(dt+ht-pt),o=r-i,a=(ft*(e-i)-st*o)/lt,u=Math.sqrt(a*a+o*o)/(ft*i*(1-i)),c=u?Math.atan2(a,o)*z-120:NaN;return new gt(c<0?c+360:c,u,i,t.opacity)}(t):new gt(t,n,e,null==r?1:r)}function gt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function mt(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}g(gt,vt,m(y,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new gt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new gt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Y,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new L(255*(n+e*(ut*r+ct*i)),255*(n+e*(st*r+lt*i)),255*(n+e*(ft*r)),this.opacity)}}));var yt=function(t){return function(){return t}};function wt(t,n){return function(e){return t+e*n}}function xt(t,n){var e=n-t;return e?wt(t,e>180||e<-180?e-360*Math.round(e/360):e):yt(isNaN(t)?n:t)}function bt(t){return 1==(t=+t)?_t:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):yt(isNaN(n)?e:n)}}function _t(t,n){var e=n-t;return e?wt(t,e):yt(isNaN(t)?n:t)}var St=function t(n){var e=bt(n);function r(t,n){var r=e((t=j(t)).r,(n=j(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=_t(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Mt(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=j(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Mt(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return mt((e-r/n)*n,a,i,o,u)}}),Mt(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return mt((e-r/n)*n,i,o,a,u)}});var Et=function(t,n){return n-=t=+t,function(e){return t+n*e}},Ct=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,At=new RegExp(Ct.source,"g");var Tt,Nt,kt,Ot,Pt=function(t,n){var e,r,i,o=Ct.lastIndex=At.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=Ct.exec(t))&&(r=At.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Et(e,r)})),o=At.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})},Ut=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?yt(n):("number"===r?Et:"string"===r?(e=O(n))?(n=e,St):Pt:n instanceof O?St:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Ut(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Ut(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:Et)(t,n)},Dt=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},jt=180/Math.PI,Lt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Ft=function(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*jt,skewX:Math.atan(c)*jt,scaleX:a,scaleY:u}};function Rt(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:Et(t,i)},{i:c-2,x:Et(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Et(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Et(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Et(t,e)},{i:u-2,x:Et(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var Ht=Rt(function(t){return"none"===t?Lt:(Tt||(Tt=document.createElement("DIV"),Nt=document.documentElement,kt=document.defaultView),Tt.style.transform=t,t=kt.getComputedStyle(Nt.appendChild(Tt),null).getPropertyValue("transform"),Nt.removeChild(Tt),t=t.slice(7,-1).split(","),Ft(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),It=Rt(function(t){return null==t?Lt:(Ot||(Ot=document.createElementNS("http://www.w3.org/2000/svg","g")),Ot.setAttribute("transform",t),(t=Ot.transform.baseVal.consolidate())?(t=t.matrix,Ft(t.a,t.b,t.c,t.d,t.e,t.f)):Lt)},", ",")",")");Math.SQRT2;function Vt(t){return function(n,e){var r=t((n=H(n)).h,(e=H(e)).h),i=_t(n.s,e.s),o=_t(n.l,e.l),a=_t(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}Vt(xt),Vt(_t);function Yt(t){return function(n,e){var r=t((n=ot(n)).h,(e=ot(e)).h),i=_t(n.c,e.c),o=_t(n.l,e.l),a=_t(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}Yt(xt),Yt(_t);function zt(t){return function n(e){function r(n,r){var i=t((n=vt(n)).h,(r=vt(r)).h),o=_t(n.s,r.s),a=_t(n.l,r.l),u=_t(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}zt(xt),zt(_t);var qt=function(t){return function(){return t}},Xt=function(t){return+t},Bt=[0,1];function $t(t){return t}function Wt(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:qt(isNaN(n)?NaN:.5)}function Gt(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Zt(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Wt(i,r),o=e(a,o)):(r=Wt(r,i),o=e(o,a)),function(t){return o(r(t))}}function Jt(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Wt(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=u(t,n,1,r)-1;return o[e](i[e](n))}}function Qt(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Kt(){var t,n,e,r,i,o,a=Bt,u=Bt,c=Ut,s=$t;function l(){return r=Math.min(a.length,u.length)>2?Jt:Zt,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(u,a.map(t),Et)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,Xt),s===$t||(s=Gt(a)),l()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),c=Dt,l()},f.clamp=function(t){return arguments.length?(s=t?Gt(a):$t,f):s!==$t},f.interpolate=function(t){return arguments.length?(c=t,l()):c},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function tn(t,n){return Kt()(t,n)}var nn=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},en=function(t){return(t=nn(Math.abs(t)))?t[1]:NaN},rn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function on(t){return new an(t)}function an(t){if(!(n=rn.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}on.prototype=an.prototype,an.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var un,cn,sn,ln,fn=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},hn=function(t,n){var e=nn(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},pn={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return hn(100*t,n)},r:hn,s:function(t,n){var e=nn(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(un=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+nn(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},dn=function(t){return t},vn=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];cn=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):dn,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):dn,u=t.percent||"%";function c(t){var n=(t=on(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.trim,v=t.type;"n"===v?(h=!0,v="g"):pn[v]||(null==p&&(p=12),d=!0,v="g"),(l||"0"===n&&"="===e)&&(l=!0,n="0",e="=");var g="$"===s?i[0]:"#"===s&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",m="$"===s?i[1]:/[%p]/.test(v)?u:"",y=pn[v],w=/[defgprs%]/.test(v);function x(t){var i,u,s,x=g,b=m;if("c"===v)b=y(t)+b,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=fn(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,b=("s"===v?vn[8+un/3]:"")+b+(_&&"("===c?")":""),w)for(i=-1,u=t.length;++i<u;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var S=x.length+t.length+b.length,M=S<f?new Array(f-S+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?f-b.length:1/0),M=""),e){case"<":t=x+t+b+M;break;case"=":t=x+M+t+b;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+b+M.slice(S);break;default:t=M+x+t+b}return a(t)}return p=null==p?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=on(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(en(n)/3))),i=Math.pow(10,-r),o=vn[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),sn=cn.format,ln=cn.formatPrefix;var gn=function(t,n,e,r){var i,o=d(t,n,e);switch((r=on(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(en(n)/3)))-en(Math.abs(t)))}(o,a))||(r.precision=i),ln(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,en(n)-en(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-en(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return sn(r)};function mn(t){var n=t.domain;return t.ticks=function(t){var e=n();return h(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return gn(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],c=i[a];return c<u&&(r=u,u=c,c=r,r=o,o=a,a=r),(r=p(u,c,e))>0?r=p(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=p(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(c*r)/r,n(i)),t},t}function yn(){var t=tn($t,$t);return t.copy=function(){return Qt(t,yn())},v.apply(t,arguments),mn(t)}var wn=new Date,xn=new Date;function bn(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return bn(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return wn.setTime(+n),xn.setTime(+r),t(wn),t(xn),Math.floor(e(wn,xn))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var _n=bn(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});_n.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?bn(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):_n:null};_n.range;var Sn=6e4,Mn=6048e5,En=bn(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Cn=(En.range,bn(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Sn)},function(t,n){return(n-t)/Sn},function(t){return t.getMinutes()})),An=(Cn.range,bn(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Sn)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Tn=(An.range,bn(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Sn)/864e5},function(t){return t.getDate()-1})),Nn=Tn;Tn.range;function kn(t){return bn(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Sn)/Mn})}var On=kn(0),Pn=kn(1),Un=kn(2),Dn=kn(3),jn=kn(4),Ln=kn(5),Fn=kn(6),Rn=(On.range,Pn.range,Un.range,Dn.range,jn.range,Ln.range,Fn.range,bn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Hn=(Rn.range,bn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Hn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?bn(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var In=Hn,Vn=(Hn.range,bn(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Sn)},function(t,n){return(n-t)/Sn},function(t){return t.getUTCMinutes()})),Yn=(Vn.range,bn(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),zn=(Yn.range,bn(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),qn=zn;zn.range;function Xn(t){return bn(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Mn})}var Bn=Xn(0),$n=Xn(1),Wn=Xn(2),Gn=Xn(3),Zn=Xn(4),Jn=Xn(5),Qn=Xn(6),Kn=(Bn.range,$n.range,Wn.range,Gn.range,Zn.range,Jn.range,Qn.range,bn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),te=(Kn.range,bn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));te.every=function(t){return isFinite(t=Math.floor(t))&&t>0?bn(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var ne=te;te.range;function ee(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function re(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ie(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var oe,ae,ue,ce={"-":"",_:" ",0:"0"},se=/^\s*\d+/,le=/^%/,fe=/[\\^$*+?|[\]().{}]/g;function he(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function pe(t){return t.replace(fe,"\\$&")}function de(t){return new RegExp("^(?:"+t.map(pe).join("|")+")","i")}function ve(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ge(t,n,e){var r=se.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function me(t,n,e){var r=se.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ye(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function we(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function xe(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function be(t,n,e){var r=se.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function _e(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Se(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Me(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Ee(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Ce(t,n,e){var r=se.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ae(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Te(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Ne(t,n,e){var r=se.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function ke(t,n,e){var r=se.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Oe(t,n,e){var r=se.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Pe(t,n,e){var r=le.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Ue(t,n,e){var r=se.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function De(t,n,e){var r=se.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function je(t,n){return he(t.getDate(),n,2)}function Le(t,n){return he(t.getHours(),n,2)}function Fe(t,n){return he(t.getHours()%12||12,n,2)}function Re(t,n){return he(1+Nn.count(In(t),t),n,3)}function He(t,n){return he(t.getMilliseconds(),n,3)}function Ie(t,n){return He(t,n)+"000"}function Ve(t,n){return he(t.getMonth()+1,n,2)}function Ye(t,n){return he(t.getMinutes(),n,2)}function ze(t,n){return he(t.getSeconds(),n,2)}function qe(t){var n=t.getDay();return 0===n?7:n}function Xe(t,n){return he(On.count(In(t),t),n,2)}function Be(t,n){var e=t.getDay();return t=e>=4||0===e?jn(t):jn.ceil(t),he(jn.count(In(t),t)+(4===In(t).getDay()),n,2)}function $e(t){return t.getDay()}function We(t,n){return he(Pn.count(In(t),t),n,2)}function Ge(t,n){return he(t.getFullYear()%100,n,2)}function Ze(t,n){return he(t.getFullYear()%1e4,n,4)}function Je(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+he(n/60|0,"0",2)+he(n%60,"0",2)}function Qe(t,n){return he(t.getUTCDate(),n,2)}function Ke(t,n){return he(t.getUTCHours(),n,2)}function tr(t,n){return he(t.getUTCHours()%12||12,n,2)}function nr(t,n){return he(1+qn.count(ne(t),t),n,3)}function er(t,n){return he(t.getUTCMilliseconds(),n,3)}function rr(t,n){return er(t,n)+"000"}function ir(t,n){return he(t.getUTCMonth()+1,n,2)}function or(t,n){return he(t.getUTCMinutes(),n,2)}function ar(t,n){return he(t.getUTCSeconds(),n,2)}function ur(t){var n=t.getUTCDay();return 0===n?7:n}function cr(t,n){return he(Bn.count(ne(t),t),n,2)}function sr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Zn(t):Zn.ceil(t),he(Zn.count(ne(t),t)+(4===ne(t).getUTCDay()),n,2)}function lr(t){return t.getUTCDay()}function fr(t,n){return he($n.count(ne(t),t),n,2)}function hr(t,n){return he(t.getUTCFullYear()%100,n,2)}function pr(t,n){return he(t.getUTCFullYear()%1e4,n,4)}function dr(){return"+0000"}function vr(){return"%"}function gr(t){return+t}function mr(t){return Math.floor(+t/1e3)}!function(t){oe=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=de(i),l=ve(i),f=de(o),h=ve(o),p=de(a),d=ve(a),v=de(u),g=ve(u),m=de(c),y=ve(c),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:je,e:je,f:Ie,H:Le,I:Fe,j:Re,L:He,m:Ve,M:Ye,p:function(t){return i[+(t.getHours()>=12)]},Q:gr,s:mr,S:ze,u:qe,U:Xe,V:Be,w:$e,W:We,x:null,X:null,y:Ge,Y:Ze,Z:Je,"%":vr},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Qe,e:Qe,f:rr,H:Ke,I:tr,j:nr,L:er,m:ir,M:or,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:gr,s:mr,S:ar,u:ur,U:cr,V:sr,w:lr,W:fr,x:null,X:null,y:hr,Y:pr,Z:dr,"%":vr},b={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:Ee,e:Ee,f:Oe,H:Ae,I:Ae,j:Ce,L:ke,m:Me,M:Te,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},Q:Ue,s:De,S:Ne,u:me,U:ye,V:we,w:ge,W:xe,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:_e,Y:be,Z:Se,"%":Pe};function _(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=ce[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function S(t,n){return function(e){var r,i,o=ie(1900);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=re(ie(o.y))).getUTCDay(),r=i>4||0===i?$n.ceil(r):$n(r),r=qn.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(ie(o.y))).getDay(),r=i>4||0===i?Pn.ceil(r):Pn(r),r=Nn.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?re(ie(o.y)).getUTCDay():n(ie(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,re(o)):n(o)}}function M(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=b[i in ce?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),x.x=_(e,x),x.X=_(r,x),x.c=_(n,x),{format:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",ee);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t,re);return n.toString=function(){return t},n}}}(t),oe.format,oe.parse,ae=oe.utcFormat,ue=oe.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ae("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ue("%Y-%m-%dT%H:%M:%S.%LZ");var yr="http://www.w3.org/1999/xhtml",wr={svg:"http://www.w3.org/2000/svg",xhtml:yr,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},xr=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),wr.hasOwnProperty(n)?{space:wr[n],local:t}:t};var br=function(t){var n=xr(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===yr&&n.documentElement.namespaceURI===yr?n.createElement(t):n.createElementNS(e,t)}})(n)};function _r(){}var Sr=function(t){return null==t?_r:function(){return this.querySelector(t)}};function Mr(){return[]}var Er=function(t){return null==t?Mr:function(){return this.querySelectorAll(t)}},Cr=function(t){return function(){return this.matches(t)}},Ar=function(t){return new Array(t.length)};function Tr(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Tr.prototype={constructor:Tr,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Nr="$";function kr(t,n,e,r,i,o){for(var a,u=0,c=n.length,s=o.length;u<s;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new Tr(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function Or(t,n,e,r,i,o,a){var u,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(c=n[u])&&(p[u]=s=Nr+a.call(c,c.__data__,u,n),s in l?i[u]=c:l[s]=c);for(u=0;u<h;++u)(c=l[s=Nr+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],l[s]=null):e[u]=new Tr(t,o[u]);for(u=0;u<f;++u)(c=n[u])&&l[p[u]]===c&&(i[u]=c)}function Pr(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Ur=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Dr(t,n){return t.style.getPropertyValue(n)||Ur(t).getComputedStyle(t,null).getPropertyValue(n)}function jr(t){return t.trim().split(/^|\s+/)}function Lr(t){return t.classList||new Fr(t)}function Fr(t){this._node=t,this._names=jr(t.getAttribute("class")||"")}function Rr(t,n){for(var e=Lr(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Hr(t,n){for(var e=Lr(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Fr.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Ir(){this.textContent=""}function Vr(){this.innerHTML=""}function Yr(){this.nextSibling&&this.parentNode.appendChild(this)}function zr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function qr(){return null}function Xr(){var t=this.parentNode;t&&t.removeChild(this)}function Br(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function $r(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Wr={},Gr=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Wr={mouseenter:"mouseover",mouseleave:"mouseout"}));function Zr(t,n,e){return t=Jr(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Jr(t,n,e){return function(r){var i=Gr;Gr=r;try{t.call(this,this.__data__,n,e)}finally{Gr=i}}}function Qr(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Kr(t,n,e){var r=Wr.hasOwnProperty(t.type)?Zr:Jr;return function(i,o,a){var u,c=this.__on,s=r(n,o,a);if(c)for(var l=0,f=c.length;l<f;++l)if((u=c[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=e),void(u.value=n);this.addEventListener(t.type,s,e),u={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(u):this.__on=[u]}}function ti(t,n,e){var r=Ur(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var ni=[null];function ei(t,n){this._groups=t,this._parents=n}function ri(){return new ei([[document.documentElement]],ni)}ei.prototype=ri.prototype={constructor:ei,select:function(t){"function"!=typeof t&&(t=Sr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),s[l]=a);return new ei(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=Er(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new ei(r,i)},filter:function(t){"function"!=typeof t&&(t=Cr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new ei(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each(function(t){d[++l]=t}),d;var e,r=n?Or:kr,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),l=0;l<a;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),v=d.length,g=c[l]=new Array(v),m=u[l]=new Array(v);r(f,h,g,m,s[l]=new Array(p),d,n);for(var y,w,x=0,b=0;x<v;++x)if(y=g[x]){for(x>=b&&(b=x+1);!(w=m[b])&&++b<v;);y._next=w||null}}return(u=new ei(u,i))._enter=c,u._exit=s,u},enter:function(){return new ei(this._enter||this._groups.map(Ar),this._parents)},exit:function(){return new ei(this._exit||this._groups.map(Ar),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;u<r;++u)a[u]=n[u];return new ei(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Pr);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,s=i[o]=new Array(c),l=0;l<c;++l)(a=u[l])&&(s[l]=a);s.sort(n)}return new ei(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=xr(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Dr(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=jr(t+"");if(arguments.length<2){for(var r=Lr(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Rr:Hr)(this,t)}}:n?function(t){return function(){Rr(this,t)}}:function(t){return function(){Hr(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Ir:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Vr:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Yr)},lower:function(){return this.each(zr)},append:function(t){var n="function"==typeof t?t:br(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:br(t),r=null==n?qr:"function"==typeof n?n:Sr(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Xr)},clone:function(t){return this.select(t?$r:Br)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?Kr:Qr,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,s=0,l=u.length;s<l;++s)for(r=0,c=u[s];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return ti(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return ti(this,t,n)}})(t,n))}};var ii=ri,oi=function(t){return"string"==typeof t?new ei([[document.querySelector(t)]],[document.documentElement]):new ei([[t]],ni)},ai=0;function ui(){this._="@"+(++ai).toString(36)}ui.prototype=function(){return new ui}.prototype={constructor:ui,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};e(69),e(70);e(101);var ci={value:function(){}};function si(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new li(r)}function li(t){this._=t}function fi(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function hi(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=ci,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}li.prototype=si.prototype={constructor:li,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=hi(i[e],t.name,n);else if(null==n)for(e in i)i[e]=hi(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=fi(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new li(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var pi,di,vi=si,gi=0,mi=0,yi=0,wi=1e3,xi=0,bi=0,_i=0,Si="object"==typeof performance&&performance.now?performance:Date,Mi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Ei(){return bi||(Mi(Ci),bi=Si.now()+_i)}function Ci(){bi=0}function Ai(){this._call=this._time=this._next=null}function Ti(t,n,e){var r=new Ai;return r.restart(t,n,e),r}function Ni(){bi=(xi=Si.now())+_i,gi=mi=0;try{!function(){Ei(),++gi;for(var t,n=pi;n;)(t=bi-n._time)>=0&&n._call.call(null,t),n=n._next;--gi}()}finally{gi=0,function(){var t,n,e=pi,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:pi=n);di=t,Oi(r)}(),bi=0}}function ki(){var t=Si.now(),n=t-xi;n>wi&&(_i-=n,xi=t)}function Oi(t){gi||(mi&&(mi=clearTimeout(mi)),t-bi>24?(t<1/0&&(mi=setTimeout(Ni,t-Si.now()-_i)),yi&&(yi=clearInterval(yi))):(yi||(xi=Si.now(),yi=setInterval(ki,wi)),gi=1,Mi(Ni)))}Ai.prototype=Ti.prototype={constructor:Ai,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Ei():+e)+(null==n?0:+n),this._next||di===this||(di?di._next=this:pi=this,di=this),this._call=t,this._time=e,Oi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Oi())}};var Pi=function(t,n,e){var r=new Ai;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ui=vi("start","end","cancel","interrupt"),Di=[],ji=0,Li=1,Fi=2,Ri=3,Hi=4,Ii=5,Vi=6,Yi=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(e.state!==Li)return u();for(s in i)if((h=i[s]).name===e.name){if(h.state===Ri)return Pi(o);h.state===Hi?(h.state=Vi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=Vi,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Pi(function(){e.state===Ri&&(e.state=Hi,e.timer.restart(a,e.delay,e.time),a(c))}),e.state=Fi,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Fi){for(e.state=Ri,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Ii,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===Ii&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Vi,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ti(function(t){e.state=Li,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ui,tween:Di,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:ji})};function zi(t,n){var e=Xi(t,n);if(e.state>ji)throw new Error("too late; already scheduled");return e}function qi(t,n){var e=Xi(t,n);if(e.state>Ri)throw new Error("too late; already running");return e}function Xi(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Bi(t,n,e){var r=t._id;return t.each(function(){var t=qi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Xi(t,r).value[n]}}var $i=function(t,n){var e;return("number"==typeof n?Et:n instanceof O?St:(e=O(n))?(n=e,St):Pt)(t,n)};var Wi=ii.prototype.constructor;function Gi(t){return function(){this.style.removeProperty(t)}}var Zi=0;function Ji(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Qi(){return++Zi}var Ki=ii.prototype;Ji.prototype=function(t){return ii().transition(t)}.prototype={constructor:Ji,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Sr(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,s=r[a],l=s.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=s[h])&&(c=t.call(u,u.__data__,h,s))&&("__data__"in u&&(c.__data__=u.__data__),f[h]=c,Yi(f[h],n,e,h,f,Xi(u,e)));return new Ji(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Er(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,s=r[u],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),d=Xi(c,e),v=0,g=p.length;v<g;++v)(h=p[v])&&Yi(h,n,e,v,p,d);o.push(p),a.push(c)}return new Ji(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Cr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Ji(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=n[u],l=e[u],f=s.length,h=a[u]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;u<r;++u)a[u]=n[u];return new Ji(a,this._parents,this._name,this._id)},selection:function(){return new Wi(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Qi(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var l=Xi(a,n);Yi(a,t,e,s,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ji(r,this._parents,t,e)},call:Ki.call,nodes:Ki.nodes,node:Ki.node,size:Ki.size,empty:Ki.empty,each:Ki.each,on:function(t,n){var e=this._id;return arguments.length<2?Xi(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?zi:qi;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=xr(t),r="transform"===e?It:$i;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}})(e,r,Bi(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=xr(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Ht:$i;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Dr(this,t),a=(this.style.removeProperty(t),Dr(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,Gi(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=Dr(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=Dr(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,Bi(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=qi(this,t),s=c.on,l=null==c.value[a]?o||(o=Gi(n)):void 0;s===e&&i===l||(r=(e=s).copy()).on(u,i=l),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=Dr(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Bi(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Xi(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=qi(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=qi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=u;break}c===s&&i.push(u)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){zi(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){zi(this,t).delay=n}})(n,t)):Xi(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){qi(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){qi(this,t).duration=n}})(n,t)):Xi(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){qi(this,t).ease=n}}(n,t)):Xi(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each(function(){var e=qi(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var to=2*Math.PI,no=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=to);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*to)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=to);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*to)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=to);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*to)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function eo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return no.time=Ei(),no;return e}ii.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Fi&&e.state<Ii,e.state=Vi,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)})},ii.prototype.transition=function(t){var n,e;t instanceof Ji?(n=t._id,t=t._name):(n=Qi(),(e=no).time=Ei(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)(a=u[s])&&Yi(a,t,n,s,u,e||eo(a,n));return new Ji(r,this._parents,t,n)};var ro,io=oi(".tooltip"),oo={show:function(t){var n=Gr.pageY-110,e=Gr.pageX;e+10>document.body.clientWidth-100&&(e=document.body.clientWidth+5-150),io.transition().duration(200).style("opacity",.9).on("end",function(){io.classed("isActive",!0),io.select(".tooltip-close").on("click",this.hide)}),io.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){io.transition().duration(500).style("opacity",0)},formatContent:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach(function(t,r){var i=null;t.class&&(i=t.class);var o="",a="<br />";n&&(o='<li class="'.concat(i,'">'),a="</li>");var u=Object.keys(t)[0];e+="".concat(o,'<span class="tooltip-label">').concat(u,":</span> ").concat(t[u]).concat(a)}),n&&(e+="</ul>"),e}},ao=function(){var t={top:10,right:10,bottom:10,left:10},n={orbit:{x:{min:-1,max:1},y:{min:-.309,max:.309}},earth:{x:{min:-.151,max:.151},y:{min:-.151,max:.151}}},e={China:"#d66e42",Russia:"#196c95",US:"#f9bc65",Other:"#b5bdc1"},r=0,i=0,o=yn().domain([n.orbit.x.min,n.orbit.x.max]),a=yn().domain([n.orbit.y.min,n.orbit.y.max]);function u(u){var c=u.container,l=u.data,f=c.select("svg").attr("viewBox","0 0 "+(r+t.left+t.right)+" "+(i+t.top+t.bottom)),h=f.select("g").attr("transform","translate("+t.left+","+t.top+")"),p=h.select(".g-earth");if(p.select("*").empty()){var d=Math.abs(a(n.earth.y.max)-a(0));p.append("circle").attr("cx",o(0)).attr("cy",a(0)).attr("r",d).attr("fill","lightgray"),p.append("circle").attr("cx",o(n.earth.x.min)).attr("cy",a(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cx",o(n.earth.x.max)).attr("cy",a(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cy",a(n.earth.y.min)).attr("cx",o(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cy",a(n.earth.y.max)).attr("cx",o(0)).attr("r",1).attr("fill","red")}var v=h.select(".g-plot"),g=v.selectAll(".satellite").data(l,function(t){return t.sat_name});g.join(function(t){return t.append("circle").attr("class","satellite").attr("r",5).attr("fill",function(t){return e[t.country]}).attr("stroke",function(t){return function(t,n){var e=!1;"#"==t[0]&&(t=t.slice(1),e=!0);var r=parseInt(t,16),i=(r>>16)+n;i>255?i=255:i<0&&(i=0);var o=(r>>8&255)+n;o>255?o=255:o<0&&(o=0);var a=(255&r)+n;return a>255?a=255:a<0&&(a=0),(e?"#":"")+(a|o<<8|i<<16).toString(16)}(e[t.country],-20)}).attr("fill-opacity",.8).attr("cx",function(t){return o(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",s.mouseover).on("mouseleave",s.mouseleave)},function(t){return t.attr("cx",function(t){return o(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord})})}function c(t){var n=t.datum();!function(t){var n=t.container,e=t.data,r=n.selectAll("svg").data([e]).enter().append("svg").append("g");r.append("g").attr("class","g-earth"),r.append("g").attr("class","g-plot")}({container:t,data:n}),function(t){t.data;o.range([0,r]),a.range([i,0])}({data:n}),u({container:t,data:n})}var s={mouseover:function(t){s.showTooltip(t),oi(this).classed("is-active",!0)},mouseleave:function(){oo.hide(),oi(this).classed("is-active",!1)},showTooltip:function(t){var n=[{Operator:t.sat_operator},{Date:t.timestamp},{Longitude:t.long_string}],e='\n      <p class="tooltip-heading">\n        '.concat(t.sat_name,"</p>\n      ").concat(oo.formatContent(n,!0));oo.show(e)}};return c.width=function(){return arguments.length?(r=(arguments.length<=0?void 0:arguments[0])-t.left-t.right,c):r},c.height=function(){return arguments.length?(i=(arguments.length<=0?void 0:arguments[0])-t.top-t.bottom,c):i},c}();var uo={init:function(t){var n;(ro=oi(t.container)).datum(t.data),n=Math.min(ro.node().offsetWidth,window.innerHeight),ao.width(n).height(n/3),ro.call(ao)}},co=e(78),so={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),currentDateEl:document.querySelector(".timeline-current-date"),currentLaunchesEl:document.querySelector(".timeline-num-launches"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,updateCurrentDate:function(t){t=new Date(t),this.currentDateEl.innerHTML="".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=(t.currentDate,t.onChange);this.endDate=e,this.startDate=n,co.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",step:864e5,range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r)},setupBtnControls:function(){this.btnControls.addEventListener("click",function(){var t=so.getCurrentDate();t==so.endDate&&so.el.noUiSlider.set(so.startDate),1!=so.playing?(so.timer=setInterval(function(){t=so.getCurrentDate(),so.el.noUiSlider.set(t+864e5)},so.transitionDuration),this.classList.remove("play-btn"),this.classList.add("pause-btn"),so.playing=!0):so.stopTimeline()})},stopTimeline:function(){clearInterval(so.timer),so.playing=!1,so.btnControls.classList.remove("pause-btn"),so.btnControls.classList.add("play-btn")}},lo=so;e(103),e(104),e(107),e(108),e(109),e(110),e(113),e(114),e(115),e(116);var fo={},ho={},po=34,vo=10,go=13;function mo(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function yo(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function wo(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function xo(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+wo(-n,6):n>9999?"+"+wo(n,6):wo(n,4))+"-"+wo(t.getUTCMonth()+1,2)+"-"+wo(t.getUTCDate(),2)+(o?"T"+wo(e,2)+":"+wo(r,2)+":"+wo(i,2)+"."+wo(o,3)+"Z":i?"T"+wo(e,2)+":"+wo(r,2)+":"+wo(i,2)+"Z":r||e?"T"+wo(e,2)+":"+wo(r,2)+"Z":"")}var bo=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,s=!1;function l(){if(c)return ho;if(s)return s=!1,fo;var n,r,i=a;if(t.charCodeAt(i)===po){for(;a++<o&&t.charCodeAt(a)!==po||t.charCodeAt(++a)===po;);return(n=a)>=o?c=!0:(r=t.charCodeAt(a++))===vo?s=!0:r===go&&(s=!0,t.charCodeAt(a)===vo&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(n=a++))===vo)s=!0;else if(r===go)s=!0,t.charCodeAt(a)===vo&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===vo&&--o,t.charCodeAt(o-1)===go&&--o;(r=l())!==ho;){for(var f=[];r!==fo&&r!==ho;)f.push(r),r=l();n&&null==(f=n(f,u++))||i.push(f)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return a(n[t])}).join(t)})}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?xo(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=mo(t);return function(r,i){return n(e(r),i,t)}}(t,n):mo(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=yo(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=yo(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},_o=bo(","),So=_o.parse,Mo=(_o.parseRows,_o.format,_o.formatBody,_o.formatRows,bo("\t")),Eo=Mo.parse;Mo.parseRows,Mo.format,Mo.formatBody,Mo.formatRows;function Co(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Ao=function(t,n){return fetch(t,n).then(Co)};function To(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Ao(n,e).then(function(n){return t(n,r)})}}var No=To(So);To(Eo);function ko(t){return function(n,e){return Ao(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}ko("application/xml"),ko("text/html"),ko("image/svg+xml");function Oo(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Po(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Uo(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}var Do=["US","China","Russia"];function jo(){var t;return t=regeneratorRuntime.mark(function t(n,e){var r,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=No(n),i=No(e),o=Promise.all([r,i]).then(function(t){var n=Po(t,2),e=n[0],r=n[1];e.forEach(function(t){t.is_satellite=!0,t.is_target=!1}),r.forEach(function(t){t.is_satellite=!1,t.is_target=!0});var i=[].concat(Oo(e),Oo(r));i.forEach(function(t){t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("ï¿½","&#176;"),t.country.includes("U.S.")&&(t.country="US"),Do.includes(t.country)||(t.country="Other")});var o=Array.from(new Set(Oo(i.map(function(t){return t.timestamp})))),a=Array.from(new Set(Oo(i.map(function(t){return t.sat_name})))),u=new Map;return o.forEach(function(t,n){var e=[];a.forEach(function(n){var r=i.filter(function(e){return e.timestamp===t&&e.sat_name===n});r.length&&e.push(r[0])}),u.set(new Date(t).getTime(),e)}),new Map(Array.from(u).sort(function(t,n){return t[0]-n[0]}))}),t.abrupt("return",o);case 4:case"end":return t.stop()}},t)}),(jo=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Uo(o,r,i,a,u,"next",t)}function u(t){Uo(o,r,i,a,u,"throw",t)}a(void 0)})}).apply(this,arguments)}var Lo=function(t,n){return jo.apply(this,arguments)};e(120),e(121);function Fo(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}var Ro,Ho,Io,Vo,Yo="./data/20190318-china.csv",zo="./data/20190318-china-targets.csv",qo=25;function Xo(){var t;return t=regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Lo(Yo,zo);case 2:Ro=t.sent,n=Array.from(Ro.keys()),Io=n[0],Vo=n[n.length-1],Ho=Io,$o(),Bo(),Wo();case 10:case"end":return t.stop()}},t)}),(Xo=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Fo(o,r,i,a,u,"next",t)}function u(t){Fo(o,r,i,a,u,"throw",t)}a(void 0)})}).apply(this,arguments)}function Bo(){Ho=lo.getCurrentDate();var t=Ro.get(Ho);uo.init({data:t,container:".chart"})}function $o(){lo.transitionDuration=qo,lo.setupTimeline({startDate:Io,endDate:Vo,current:Ho,transitionDuration:qo,onChange:function(){Bo(),lo.updateCurrentDate(Ho),Ho==Vo&&lo.stopTimeline()}})}function Wo(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach(function(t){return t.classList.remove("hide-on-load")})}window.addEventListener("DOMContentLoaded",function(){!function(){Xo.apply(this,arguments)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,