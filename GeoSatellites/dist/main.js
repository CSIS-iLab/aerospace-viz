!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=122)}([function(t,n,e){var r=e(26)("wks"),i=e(18),o=e(1).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(1),i=e(11),o=e(9),a=e(8),u=e(10),s=function(t,n,e){var c,l,f,h,p=t&s.F,d=t&s.G,v=t&s.S,g=t&s.P,m=t&s.B,y=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,w=d?i:i[n]||(i[n]={}),x=w.prototype||(w.prototype={});for(c in d&&(e=n),e)f=((l=!p&&y&&void 0!==y[c])?y:e)[c],h=m&&l?u(f,r):g&&"function"==typeof f?u(Function.call,f):f,y&&a(y,c,f,t&s.U),w[c]!=f&&o(w,c,h),g&&x[c]!=f&&(x[c]=f)};r.core=i,s.F=1,s.G=2,s.S=4,s.P=8,s.B=16,s.W=32,s.U=64,s.R=128,t.exports=s},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(3);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(4),i=e(50),o=e(33),a=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(9),o=e(12),a=e(18)("src"),u=e(79),s=(""+u).split("toString");e(11).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var c="function"==typeof e;c&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(c&&(o(e,a)||i(e,a,t[n]?""+t[n]:s.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(6),i=e(19);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(52),i=e(15);t.exports=function(t){return r(i(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(15);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=!1},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports={}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(53),i=e(37);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(27),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(6).f,i=e(12),o=e(0)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){"use strict";var r=e(49),i=e(51),o=e(20),a=e(13);t.exports=e(34)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r=e(11),i=e(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){var r=e(14),i=e(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){"use strict";var r=e(28),i={};i[e(0)("toStringTag")]="z",i+""!="[object z]"&&e(8)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){for(var r=e(25),i=e(22),o=e(8),a=e(1),u=e(9),s=e(20),c=e(0),l=c("iterator"),f=c("toStringTag"),h=s.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,m=d[v],y=p[m],w=a[m],x=w&&w.prototype;if(x&&(x[l]||u(x,l,h),x[f]||u(x,f,m),s[m]=h,y))for(g in r)x[g]||o(x,g,r[g],!0)}},function(t,n,e){var r=e(3),i=e(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){"use strict";var r=e(17),i=e(2),o=e(8),a=e(9),u=e(20),s=e(80),c=e(24),l=e(83),f=e(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,g,m){s(e,n,d);var y,w,x,_=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},b=n+" Iterator",S="values"==v,M=!1,E=t.prototype,C=E[f]||E["@@iterator"]||v&&E[v],A=C||_(v),T=v?S?_("entries"):A:void 0,N="Array"==n&&E.entries||C;if(N&&(x=l(N.call(new t)))!==Object.prototype&&x.next&&(c(x,b,!0),r||"function"==typeof x[f]||a(x,f,p)),S&&C&&"values"!==C.name&&(M=!0,A=function(){return C.call(this)}),r&&!m||!h&&!M&&E[f]||a(E,f,A),u[n]=A,u[b]=p,v)if(y={values:S?A:_("values"),keys:g?A:_("keys"),entries:T},m)for(w in y)w in E||o(E,w,y[w]);else i(i.P+i.F*(h||M),n,y);return y}},function(t,n,e){var r=e(4),i=e(81),o=e(37),a=e(36)("IE_PROTO"),u=function(){},s=function(){var t,n=e(32)("iframe"),r=o.length;for(n.style.display="none",e(55).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),s=t.F;r--;)delete s.prototype[o[r]];return s()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=s(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(26)("keys"),i=e(18);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(10),i=e(59),o=e(60),a=e(4),u=e(23),s=e(61),c={},l={};(n=t.exports=function(t,n,e,f,h){var p,d,v,g,m=h?function(){return t}:s(t),y=r(e,f,n?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=u(t.length);p>w;w++)if((g=n?y(a(d=t[w])[0],d[1]):y(t[w]))===c||g===l)return g}else for(v=m.call(t);!(d=v.next()).done;)if((g=i(v,y,d.value,n))===c||g===l)return g}).BREAK=c,n.RETURN=l},function(t,n,e){var r=e(8);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){"use strict";var r=e(2),i=e(43)(0),o=e(30)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(10),i=e(52),o=e(16),a=e(23),u=e(91);t.exports=function(t,n){var e=1==t,s=2==t,c=3==t,l=4==t,f=6==t,h=5==t||f,p=n||u;return function(n,u,d){for(var v,g,m=o(n),y=i(m),w=r(u,d,3),x=a(y.length),_=0,b=e?p(n,x):s?p(n,0):void 0;x>_;_++)if((h||_ in y)&&(g=w(v=y[_],_,m),t))if(e)b[_]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return _;case 2:b.push(v)}else if(l)return!1;return f?-1:c||l?l:b}}},function(t,n,e){var r=e(14);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(4);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(18)("meta"),i=e(3),o=e(12),a=e(6).f,u=0,s=Object.isExtensible||function(){return!0},c=!e(5)(function(){return s(Object.preventExtensions({}))}),l=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!s(t))return"F";if(!n)return"E";l(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!s(t))return!0;if(!n)return!1;l(t)}return t[r].w},onFreeze:function(t){return c&&f.NEED&&s(t)&&!o(t,r)&&l(t),t}}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(0)("unscopables"),i=Array.prototype;null==i[r]&&e(9)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){t.exports=!e(7)&&!e(5)(function(){return 7!=Object.defineProperty(e(32)("div"),"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){var r=e(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(12),i=e(13),o=e(54)(!1),a=e(36)("IE_PROTO");t.exports=function(t,n){var e,u=i(t),s=0,c=[];for(e in u)e!=a&&r(u,e)&&c.push(e);for(;n.length>s;)r(u,e=n[s++])&&(~o(c,e)||c.push(e));return c}},function(t,n,e){var r=e(13),i=e(23),o=e(82);t.exports=function(t){return function(n,e,a){var u,s=r(n),c=i(s.length),l=o(a,c);if(t&&e!=e){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((t||l in s)&&s[l]===e)return t||l||0;return!t&&-1}}},function(t,n,e){var r=e(1).document;t.exports=r&&r.documentElement},function(t,n,e){"use strict";var r=e(57)(!0);e(34)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){var r=e(27),i=e(15);t.exports=function(t){return function(n,e){var o,a,u=String(i(n)),s=r(e),c=u.length;return s<0||s>=c?t?"":void 0:(o=u.charCodeAt(s))<55296||o>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):o:t?u.slice(s,s+2):a-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(10),i=e(2),o=e(16),a=e(59),u=e(60),s=e(23),c=e(84),l=e(61);i(i.S+i.F*!e(38)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,f,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,m=0,y=l(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(e=new p(n=s(h.length));n>m;m++)c(e,m,g?v(h[m],m):h[m]);else for(f=y.call(h),e=new p;!(i=f.next()).done;m++)c(e,m,g?a(f,v,[i.value,m],!0):i.value);return e.length=m,e}})},function(t,n,e){var r=e(4);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(20),i=e(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(28),i=e(0)("iterator"),o=e(20);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",u=i.toStringTag||"@@toStringTag";function s(t,n,e,r){var i=n&&n.prototype instanceof v?n:v,o=Object.create(i.prototype),a=new A(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return N()}for(e.method=i,e.arg=o;;){var a=e.delegate;if(a){var u=M(a,e);if(u){if(u===d)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var s=c(t,n,e);if("normal"===s.type){if(r=e.done?p:f,s.arg===d)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r=p,e.method="throw",e.arg=s.arg)}}}(t,e,a),o}function c(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=s;var l="suspendedStart",f="suspendedYield",h="executing",p="completed",d={};function v(){}function g(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(T([])));x&&x!==e&&r.call(x,o)&&(y=x);var _=m.prototype=v.prototype=Object.create(y);function b(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function S(t){var n;this._invoke=function(e,i){function o(){return new Promise(function(n,o){!function n(e,i,o,a){var u=c(t[e],t,i);if("throw"!==u.type){var s=u.arg,l=s.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,o,a)},function(t){n("throw",t,o,a)}):Promise.resolve(l).then(function(t){s.value=t,o(s)},function(t){return n("throw",t,o,a)})}a(u.arg)}(e,i,n,o)})}return n=n?n.then(o,o):o()}}function M(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,M(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=c(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function C(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function T(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,a=function e(){for(;++i<t.length;)if(r.call(t,i))return e.value=t[i],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:N}}function N(){return{value:n,done:!0}}return g.prototype=_.constructor=m,m.constructor=g,m[u]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},b(S.prototype),S.prototype[a]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,i){var o=new S(s(n,e,r,i));return t.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},b(_),_[u]="Generator",_[o]=function(){return this},_.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=T,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function i(r,i){return u.type="throw",u.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],u=a.completion;if("root"===a.tryLoc)return i("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return i(a.catchLoc,!0);if(this.prev<a.finallyLoc)return i(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return i(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return i(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=n,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),d},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),C(e),d}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;C(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:T(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),d}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){"use strict";var r,i,o,a,u=e(17),s=e(1),c=e(10),l=e(28),f=e(2),h=e(3),p=e(21),d=e(39),v=e(40),g=e(85),m=e(64).set,y=e(87)(),w=e(65),x=e(88),_=e(89),b=e(90),S=s.TypeError,M=s.process,E=M&&M.versions,C=E&&E.v8||"",A=s.Promise,T="process"==l(M),N=function(){},k=i=w.f,O=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(0)("species")]=function(t){t(N,N)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(N)instanceof n&&0!==C.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),P=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},U=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,a=function(n){var e,o,a,u=i?n.ok:n.fail,s=n.resolve,c=n.reject,l=n.domain;try{u?(i||(2==t._h&&L(t),t._h=1),!0===u?e=r:(l&&l.enter(),e=u(r),l&&(l.exit(),a=!0)),e===n.promise?c(S("Promise-chain cycle")):(o=P(e))?o.call(e,s,c):s(e)):c(r)}catch(t){l&&!a&&l.exit(),c(t)}};e.length>o;)a(e[o++]);t._c=[],t._n=!1,n&&!t._h&&D(t)})}},D=function(t){m.call(s,function(){var n,e,r,i=t._v,o=j(t);if(o&&(n=x(function(){T?M.emit("unhandledRejection",i,t):(e=s.onunhandledrejection)?e({promise:t,reason:i}):(r=s.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=T||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(s,function(){var n;T?M.emit("rejectionHandled",t):(n=s.onrejectionhandled)&&n({promise:t,reason:t._v})})},F=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),U(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=P(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,c(R,r,1),c(F,r,1))}catch(t){F.call(r,t)}}):(e._v=t,e._s=1,U(e,!1))}catch(t){F.call({_w:e,_d:!1},t)}}};O||(A=function(t){d(this,A,"Promise","_h"),p(t),r.call(this);try{t(c(R,this,1),c(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(41)(A.prototype,{then:function(t,n){var e=k(g(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=T?M.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&U(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=c(R,t,1),this.reject=c(F,t,1)},w.f=k=function(t){return t===A||t===a?new o(t):i(t)}),f(f.G+f.W+f.F*!O,{Promise:A}),e(24)(A,"Promise"),e(66)("Promise"),a=e(11).Promise,f(f.S+f.F*!O,"Promise",{reject:function(t){var n=k(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(u||!O),"Promise",{resolve:function(t){return b(u&&this===a?A:this,t)}}),f(f.S+f.F*!(O&&e(38)(function(t){A.all(t).catch(N)})),"Promise",{all:function(t){var n=this,e=k(n),r=e.resolve,i=e.reject,o=x(function(){var e=[],o=0,a=1;v(t,!1,function(t){var u=o++,s=!1;e.push(void 0),a++,n.resolve(t).then(function(t){s||(s=!0,e[u]=t,--a||r(e))},i)}),--a||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=k(n),r=e.reject,i=x(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){var r,i,o,a=e(10),u=e(86),s=e(55),c=e(32),l=e(1),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},w=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(14)(f)?r=function(t){f.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=w,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):r="onreadystatechange"in c("script")?function(t){s.appendChild(c("script")).onreadystatechange=function(){s.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(21);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(1),i=e(6),o=e(7),a=e(0)("species");t.exports=function(t){var n=r[t];o&&n&&!n[a]&&i.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(23),a=e(27),u=e(93),s=e(94),c=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(95)("replace",2,function(t,n,e,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=d(e,t,this,n);if(i.done)return i.value;var f=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=f.global;if(g){var m=f.unicode;f.lastIndex=0}for(var y=[];;){var w=s(f,h);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(f.lastIndex=u(h,o(f.lastIndex),m))}for(var x,_="",b=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),E=c(l(a(w.index),h.length),0),C=[],A=1;A<w.length;A++)C.push(void 0===(x=w[A])?x:String(x));var T=w.groups;if(p){var N=[M].concat(C,E,h);void 0!==T&&N.push(T);var k=String(n.apply(void 0,N))}else k=v(M,h,E,C,T,n);E>=b&&(_+=h.slice(b,E)+k,b=E+M.length)}return _+h.slice(b)}];function v(t,n,r,o,a,u){var s=r+t.length,c=o.length,l=p;return void 0!==a&&(a=i(a),l=h),e.call(u,l,function(e,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(s);case"<":u=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return e;if(l>c){var h=f(l/10);return 0===h?e:h<=c?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}u=o[l-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r,i,o=e(45),a=RegExp.prototype.exec,u=String.prototype.replace,s=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(c||l)&&(s=function(t){var n,e,r,i,s=this;return l&&(e=new RegExp("^"+s.source+"$(?!\\s)",o.call(s))),c&&(n=s.lastIndex),r=a.call(s,t),c&&r&&(s.lastIndex=s.global?r.index+r[0].length:n),l&&r&&r.length>1&&u.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=s},function(t,n,e){"use strict";e(100);var r=e(4),i=e(45),o=e(7),a=/./.toString,u=function(t){e(8)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(8)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){var r=e(1),i=e(11),o=e(17),a=e(72),u=e(6).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){n.f=e(0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(53),i=e(37).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(47),i=e(19),o=e(13),a=e(33),u=e(12),s=e(50),c=Object.getOwnPropertyDescriptor;n.f=e(7)?c:function(t,n){if(t=o(t),n=a(n,!0),s)try{return c(t,n)}catch(t){}if(u(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){"use strict";var r=e(6).f,i=e(35),o=e(41),a=e(10),u=e(39),s=e(40),c=e(34),l=e(51),f=e(66),h=e(7),p=e(46).fastKey,d=e(48),v=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,c){var l=t(function(t,r){u(t,l,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&s(r,e,t[c],t)});return o(l.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,n),t)}}),h&&r(l.prototype,"size",{get:function(){return d(this,n)[v]}}),l},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){c(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?l(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,l(1))},e?"entries":"values",!e,!0),f(n)}}},function(t,n,e){"use strict";var r=e(1),i=e(2),o=e(8),a=e(41),u=e(46),s=e(40),c=e(39),l=e(3),f=e(5),h=e(38),p=e(24),d=e(111);t.exports=function(t,n,e,v,g,m){var y=r[t],w=y,x=g?"set":"add",_=w&&w.prototype,b={},S=function(t){var n=_[t];o(_,t,"delete"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!l(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof w&&(m||_.forEach&&!f(function(){(new w).entries().next()}))){var M=new w,E=M[x](m?{}:-0,1)!=M,C=f(function(){M.has(1)}),A=h(function(t){new w(t)}),T=!m&&f(function(){for(var t=new w,n=5;n--;)t[x](n,n);return!t.has(-0)});A||((w=n(function(n,e){c(n,w,t);var r=d(new y,n,w);return null!=e&&s(e,g,r[x],r),r})).prototype=_,_.constructor=w),(C||T)&&(S("delete"),S("has"),g&&S("get")),(T||E)&&S(x),m&&_.clear&&delete _.clear}else w=v.getConstructor(n,t,g,x),a(w.prototype,e),u.NEED=!0;return p(w,t),b[t]=w,i(i.G+i.W+i.F*(w!=y),b),m||v.setStrong(w,t,g),w}},function(t,n,e){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(c(t,n),setTimeout(function(){l(t,n)},e))}function a(t){return Math.max(Math.min(t,100),0)}function u(t){return Array.isArray(t)?t:[t]}function s(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function c(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||""),r=n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,i=n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop;return{x:r,y:i}}function h(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function v(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),i=t[r-1],o=t[r],a=n[r-1],u=n[r];return a+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],e)/h(a,u)}function g(t,n,e,r){if(100===r)return r;var i=d(r,t),o=t[i-1],a=t[i];return e?r-o>(a-o)/2?a:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(r-t[i-1],n[i-1]):r}function m(n,e,r){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(e[0]),o?r.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(r.xSteps[0]=e[1]),r.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/h(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*i;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,n){return t[0][0]-n[0][0]}):i.sort(function(t,n){return t[0]-n[0]}),r=0;r<i.length;r++)m(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},w.prototype.toStepping=function(t){return t=v(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),i=t[r-1],o=t[r],a=n[r-1],u=n[r];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(e-a)*h(a,u))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(s);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function _(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function b(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function S(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new w(e,n.snap,n.singleStep)}function M(n,e){if(e=u(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function E(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function A(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function T(n,e){var r,i=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<n.handles;r++)i.push(e);i.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=e}n.connect=i}function N(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function k(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function O(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function P(n,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function U(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function D(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=e.indexOf("tap")>=0,i=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,a=e.indexOf("snap")>=0,u=e.indexOf("hover")>=0,s=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");k(n,n.start[1]-n.start[0])}if(s&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:r||a,drag:i,fixed:o,snap:a,hover:u,unconstrained:s}}function j(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(!0)}else{if(n.tooltips=u(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach(function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function L(t,n){t.ariaFormat=n,_(n)}function F(t,n){t.format=n,_(n)}function R(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function H(t,n){t.documentElement=n}function I(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function V(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var r in n.cssClasses={},e)e.hasOwnProperty(r)&&(n.cssClasses[r]=n.cssPrefix+e[r]);else n.cssClasses=e}function Y(n){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:b},start:{r:!0,t:M},connect:{r:!0,t:T},direction:{r:!0,t:U},snap:{r:!1,t:E},animate:{r:!1,t:C},animationDuration:{r:!1,t:A},range:{r:!0,t:S},orientation:{r:!1,t:N},margin:{r:!1,t:k},limit:{r:!1,t:O},padding:{r:!1,t:P},behaviour:{r:!0,t:D},ariaFormat:{r:!1,t:L},format:{r:!1,t:F},tooltips:{r:!1,t:j},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:H},cssPrefix:{r:!0,t:I},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach(function(a){if(!e(n[a])&&void 0===o[a]){if(i[a].r)throw new Error("noUiSlider ("+t+"): '"+a+"' is required.");return!0}i[a].t(r,e(n[a])?n[a]:o[a])}),r.pips=n.pips;var a=document.createElement("div"),u=void 0!==a.style.msTransform,s=void 0!==a.style.transform;return r.transformRule=s?"transform":u?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function z(e,i,s){var h,p,d,v,g,m,y,w,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},_=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),b=_&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),S=e,M=i.spectrum,E=[],C=[],A=[],T=0,N={},k=e.ownerDocument,O=i.documentElement||k.documentElement,P=k.body,U=-1,D=0,j=1,L=2,F="rtl"===k.dir||1===i.ort?0:100;function R(t,n){var e=k.createElement("div");return n&&c(e,n),t.appendChild(e),e}function H(t,n){var e=R(t,i.cssClasses.origin),r=R(e,i.cssClasses.handle);return R(r,i.cssClasses.touchArea),r.setAttribute("data-handle",n),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",function(t){return function(t,n){if(z()||q(n))return!1;var e=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),a=o===r[0]||o===e[0],u=o===r[1]||o===e[1];if(!a&&!u)return!0;t.preventDefault();var s=a?0:1,c=wt(n)[s];return null!==c&&(!1===c&&(c=M.getDefaultStep(C[n],a,10)),c=Math.max(c,1e-7),c*=a?-1:1,mt(n,E[n]+c,!0),!1)}(t,n)})),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?c(r,i.cssClasses.handleLower):n===i.handles-1&&c(r,i.cssClasses.handleUpper),e}function I(t,n){return!!n&&R(t,i.cssClasses.connect)}function V(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function z(){return S.hasAttribute("disabled")}function q(t){var n=p[t];return n.hasAttribute("disabled")}function X(){g&&(at("update.tooltips"),g.forEach(function(t){t&&n(t)}),g=null)}function B(){X(),g=p.map(V),ot("update.tooltips",function(t,n,e){if(g[n]){var r=t[n];!0!==i.tooltips[n]&&(r=i.tooltips[n].to(e[n])),g[n].innerHTML=r}})}function $(t,n,e){var r=k.createElement("div"),o=[];o[D]=i.cssClasses.valueNormal,o[j]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var a=[];a[D]=i.cssClasses.markerNormal,a[j]=i.cssClasses.markerLarge,a[L]=i.cssClasses.markerSub;var u=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],s=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function l(t,n){var e=n===i.cssClasses.value,r=e?u:s,c=e?o:a;return n+" "+r[i.ort]+" "+c[t]}return c(r,i.cssClasses.pips),c(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(o){!function(t,o,a){if((a=n?n(o,a):a)!==U){var u=R(r,!1);u.className=l(a,i.cssClasses.marker),u.style[i.style]=t+"%",a>D&&((u=R(r,!1)).className=l(a,i.cssClasses.value),u.setAttribute("data-value",o),u.style[i.style]=t+"%",u.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])}),r}function W(){v&&(n(v),v=null)}function G(n){W();var e=n.mode,r=n.density||1,i=n.filter||!1,o=n.values||!1,a=n.stepped||!1,u=function(n,e,r){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=e-1,o=100/i;for(e=[];i--;)e[i]=i*o;e.push(100),n="positions"}return"positions"===n?e.map(function(t){return M.fromStepping(r?M.getStep(t):t)}):"values"===n?r?e.map(function(t){return M.fromStepping(M.getStep(M.toStepping(t)))}):e:void 0}(e,o,a),s=function(t,n,e){var r,i={},o=M.xVal[0],a=M.xVal[M.xVal.length-1],u=!1,s=!1,c=0;return(r=e.slice().sort(function(t,n){return t-n}),e=r.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==o&&(e.unshift(o),u=!0),e[e.length-1]!==a&&(e.push(a),s=!0),e.forEach(function(r,o){var a,l,f,h,p,d,v,g,m,y,w=r,x=e[o+1],_="steps"===n;if(_&&(a=M.xNumSteps[o]),a||(a=x-w),!1!==w&&void 0!==x)for(a=Math.max(a,1e-7),l=w;l<=x;l=(l+a).toFixed(7)/1){for(g=(p=(h=M.toStepping(l))-c)/t,y=p/(m=Math.round(g)),f=1;f<=m;f+=1)i[(d=c+f*y).toFixed(5)]=[M.fromStepping(d),0];v=e.indexOf(l)>-1?j:_?L:D,!o&&u&&(v=0),l===x&&s||(i[h.toFixed(5)]=[l,v]),c=h}}),i}(r,e,u),c=n.format||{to:Math.round};return v=S.appendChild($(s,i,c))}function Z(){var t=h.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||h[n]:t.height||h[n]}function J(t,n,e,r){var o=function(o){return!!(o=function(t,n,e){var r,i,o=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),u=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(u=!0),o){var s=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,s);if(c.length>1)return!1;r=c[0].pageX,i=c[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,s);if(!l)return!1;r=l.pageX,i=l.pageY}}return n=n||f(k),(a||u)&&(r=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[r,i],t.cursor=a||u,t}(o,r.pageOffset,r.target||n))&&!(z()&&!r.doNotReject)&&(a=S,u=i.cssClasses.tap,!((a.classList?a.classList.contains(u):new RegExp("\\b"+u+"\\b").test(a.className))&&!r.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(b||o.preventDefault(),o.calcPoint=o.points[i.ort],void e(o,r)));var a,u},a=[];return t.split(" ").forEach(function(t){n.addEventListener(t,o,!!b&&{passive:!0}),a.push([t,o])}),a}function Q(t){var n,e,r,o,u,s,c=t-(n=h,e=i.ort,r=n.getBoundingClientRect(),o=n.ownerDocument,u=o.documentElement,s=f(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(s.x=0),e?r.top+s.y-u.clientTop:r.left+s.x-u.clientLeft),l=100*c/Z();return l=a(l),i.dir?100-l:l}function K(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&nt(t,n)}function tt(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return nt(t,n);var e=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint),r=100*e/n.baseSize;lt(e>0,r,n.locations,n.handleNumbers)}function nt(t,n){n.handle&&(l(n.handle,i.cssClasses.active),T-=1),n.listeners.forEach(function(t){O.removeEventListener(t[0],t[1])}),0===T&&(l(S,i.cssClasses.drag),ht(),t.cursor&&(P.style.cursor="",P.removeEventListener("selectstart",r))),n.handleNumbers.forEach(function(t){ut("change",t),ut("set",t),ut("end",t)})}function et(t,n){if(n.handleNumbers.some(q))return!1;var e;if(1===n.handleNumbers.length){var o=p[n.handleNumbers[0]];e=o.children[0],T+=1,c(e,i.cssClasses.active)}t.stopPropagation();var a=[],u=J(x.move,O,tt,{target:t.target,handle:e,listeners:a,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:C.slice()}),s=J(x.end,O,nt,{target:t.target,handle:e,listeners:a,doNotReject:!0,handleNumbers:n.handleNumbers}),l=J("mouseout",O,K,{target:t.target,handle:e,listeners:a,doNotReject:!0,handleNumbers:n.handleNumbers});a.push.apply(a,u.concat(s,l)),t.cursor&&(P.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&c(S,i.cssClasses.drag),P.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach(function(t){ut("start",t)})}function rt(t){t.stopPropagation();var n=Q(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach(function(r,i){if(!q(i)){var o=Math.abs(C[i]-t);(o<n||100===o&&100===n)&&(e=i,n=o)}}),e}(n);if(!1===e)return!1;i.events.snap||o(S,i.cssClasses.tap,i.animationDuration),pt(e,n,!0,!0),ht(),ut("slide",e,!0),ut("update",e,!0),ut("change",e,!0),ut("set",e,!0),i.events.snap&&et(t,{handleNumbers:[e]})}function it(t){var n=Q(t.calcPoint),e=M.getStep(n),r=M.fromStepping(e);Object.keys(N).forEach(function(t){"hover"===t.split(".")[0]&&N[t].forEach(function(t){t.call(m,r)})})}function ot(t,n){N[t]=N[t]||[],N[t].push(n),"update"===t.split(".")[0]&&p.forEach(function(t,n){ut("update",n)})}function at(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(N).forEach(function(t){var r=t.split(".")[0],i=t.substring(r.length);n&&n!==r||e&&e!==i||delete N[t]})}function ut(t,n,e){Object.keys(N).forEach(function(r){var o=r.split(".")[0];t===o&&N[r].forEach(function(t){t.call(m,E.map(i.format.to),n,E.slice(),e||!1,C.slice())})})}function st(t,n,e,r,o,u){return p.length>1&&!i.events.unconstrained&&(r&&n>0&&(e=Math.max(e,t[n-1]+i.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-i.margin))),p.length>1&&i.limit&&(r&&n>0&&(e=Math.min(e,t[n-1]+i.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-i.limit))),i.padding&&(0===n&&(e=Math.max(e,i.padding[0])),n===p.length-1&&(e=Math.min(e,100-i.padding[1]))),!((e=a(e=M.getStep(e)))===t[n]&&!u)&&e}function ct(t,n){var e=i.ort;return(e?n:t)+", "+(e?t:n)}function lt(t,n,e,r){var i=e.slice(),o=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach(function(t,e){var r=st(i,t,i[t]+n,o[e],a[e],!1);!1===r?n=0:(n=r-i[t],i[t]=r)}):o=a=[!0];var u=!1;r.forEach(function(t,r){u=pt(t,e[t]+n,o[r],a[r])||u}),u&&r.forEach(function(t){ut("update",t),ut("slide",t)})}function ft(t,n){return i.dir?100-t-n:t}function ht(){A.forEach(function(t){var n=C[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e})}function pt(t,n,e,r){return!1!==(n=st(C,t,n,e,r,!1))&&(function(t,n){C[t]=n,E[t]=M.fromStepping(n);var e="translate("+ct(ft(n,0)-F+"%","0")+")";p[t].style[i.transformRule]=e,dt(t),dt(t+1)}(t,n),!0)}function dt(t){if(d[t]){var n=0,e=100;0!==t&&(n=C[t-1]),t!==d.length-1&&(e=C[t]);var r=e-n,o="translate("+ct(ft(n,r)+"%","0")+")",a="scale("+ct(r/100,"1")+")";d[t].style[i.transformRule]=o+" "+a}}function vt(t,n){return null===t||!1===t||void 0===t?C[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?C[n]:t)}function gt(t,n){var e=u(t),r=void 0===C[0];n=void 0===n||!!n,i.animate&&!r&&o(S,i.cssClasses.tap,i.animationDuration),A.forEach(function(t){pt(t,vt(e[t],t),!0,!1)}),A.forEach(function(t){pt(t,C[t],!0,!0)}),ht(),A.forEach(function(t){ut("update",t),null!==e[t]&&n&&ut("set",t)})}function mt(n,e,r){if(!((n=Number(n))>=0&&n<A.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);pt(n,vt(e,n),!0,!0),ut("update",n),r&&ut("set",n)}function yt(){var t=E.map(i.format.to);return 1===t.length?t[0]:t}function wt(t){var n=C[t],e=M.getNearbySteps(n),r=E[t],i=e.thisStep.step,o=null;!1!==i&&r+i>e.stepAfter.startValue&&(i=e.stepAfter.startValue-r),o=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===n?i=null:0===n&&(o=null);var a=M.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(a))),null!==o&&!1!==o&&(o=Number(o.toFixed(a))),[o,i]}return c(w=S,i.cssClasses.target),0===i.dir?c(w,i.cssClasses.ltr):c(w,i.cssClasses.rtl),0===i.ort?c(w,i.cssClasses.horizontal):c(w,i.cssClasses.vertical),h=R(w,i.cssClasses.base),function(t,n){var e=R(n,i.cssClasses.connects);p=[],(d=[]).push(I(e,t[0]));for(var r=0;r<i.handles;r++)p.push(H(n,r)),A[r]=r,d.push(I(e,t[r+1]))}(i.connect,h),(y=i.events).fixed||p.forEach(function(t,n){J(x.start,t.children[0],et,{handleNumbers:[n]})}),y.tap&&J(x.start,h,rt,{}),y.hover&&J(x.move,h,it,{hover:!0}),y.drag&&d.forEach(function(t,n){if(!1!==t&&0!==n&&n!==d.length-1){var e=p[n-1],r=p[n],o=[t];c(t,i.cssClasses.draggable),y.fixed&&(o.push(e.children[0]),o.push(r.children[0])),o.forEach(function(t){J(x.start,t,et,{handles:[e,r],handleNumbers:[n-1,n]})})}}),gt(i.start),i.pips&&G(i.pips),i.tooltips&&B(),ot("update",function(t,n,e,r,o){A.forEach(function(t){var n=p[t],r=st(C,t,0,!0,!0,!0),a=st(C,t,100,!0,!0,!0),u=o[t],s=i.ariaFormat.to(e[t]);r=M.fromStepping(r).toFixed(1),a=M.fromStepping(a).toFixed(1),u=M.fromStepping(u).toFixed(1),n.children[0].setAttribute("aria-valuemin",r),n.children[0].setAttribute("aria-valuemax",a),n.children[0].setAttribute("aria-valuenow",u),n.children[0].setAttribute("aria-valuetext",s)})}),m={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&l(S,i.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return A.map(wt)},on:ot,off:at,get:yt,set:gt,setHandle:mt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,e){lt(t,n,C,e)},options:s,updateOptions:function(t,n){var e=yt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach(function(n){void 0!==t[n]&&(s[n]=t[n])});var o=Y(s);r.forEach(function(n){void 0!==t[n]&&(i[n]=o[n])}),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?G(i.pips):W(),i.tooltips?B():X(),C=[],gt(t.start||e,n)},target:S,removePips:W,removeTooltips:X,pips:G}}return{__spectrum:w,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=Y(e),i=z(n,r,e);return n.noUiSlider=i,i}}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){t.exports=e(26)("native-function-to-string",Function.toString)},function(t,n,e){"use strict";var r=e(35),i=e(19),o=e(24),a={};e(9)(a,e(0)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(6),i=e(4),o=e(22);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),u=a.length,s=0;u>s;)r.f(t,e=a[s++],n[e]);return t}},function(t,n,e){var r=e(27),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(12),i=e(16),o=e(36)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,e){"use strict";var r=e(6),i=e(19);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){var r=e(4),i=e(21),o=e(0)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[o])?n:i(e)}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(1),i=e(64).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,s="process"==e(14)(a);t.exports=function(){var t,n,e,c=function(){var r,i;for(s&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(s)e=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var l=u.resolve(void 0);e=function(){l.then(c)}}else e=function(){i.call(r,c)};else{var f=!0,h=document.createTextNode("");new o(c).observe(h,{characterData:!0}),e=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(4),i=e(3),o=e(65);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){var r=e(92);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(3),i=e(44),o=e(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(57)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){"use strict";var r=e(28),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(96);var r=e(8),i=e(9),o=e(5),a=e(15),u=e(0),s=e(68),c=u("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[c]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!l||"split"===t&&!f){var v=/./[h],g=e(a,h,""[t],function(t,n,e,r,i){return n.exec===s?p&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){"use strict";var r=e(68);e(2)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){"use strict";e(98)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){var r=e(2),i=e(15),o=e(5),a=e(99),u="["+a+"]",s=RegExp("^"+u+u+"*"),c=RegExp(u+u+"*$"),l=function(t,n,e){var i={},u=o(function(){return!!a[t]()||"âÂ"!="âÂ"[t]()}),s=i[t]=u?n(f):a[t];e&&(i[e]=s),r(r.P+r.F*u,"String",i)},f=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(s,"")),2&n&&(t=t.replace(c,"")),t};t.exports=l},function(t,n){t.exports="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(6).f(RegExp.prototype,"flags",{configurable:!0,get:e(45)})},function(t,n,e){var r=e(16),i=e(22);e(102)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){var r=e(2),i=e(11),o=e(5);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",a)}},function(t,n,e){e(71)("asyncIterator")},function(t,n,e){"use strict";var r=e(1),i=e(12),o=e(7),a=e(2),u=e(8),s=e(46).KEY,c=e(5),l=e(26),f=e(24),h=e(18),p=e(0),d=e(72),v=e(71),g=e(105),m=e(44),y=e(4),w=e(3),x=e(13),_=e(33),b=e(19),S=e(35),M=e(106),E=e(75),C=e(6),A=e(22),T=E.f,N=C.f,k=M.f,O=r.Symbol,P=r.JSON,U=P&&P.stringify,D=p("_hidden"),j=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),R=l("symbols"),H=l("op-symbols"),I=Object.prototype,V="function"==typeof O,Y=r.QObject,z=!Y||!Y.prototype||!Y.prototype.findChild,q=o&&c(function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=T(I,n);r&&delete I[n],N(t,n,e),r&&t!==I&&N(I,n,r)}:N,X=function(t){var n=R[t]=S(O.prototype);return n._k=t,n},B=V&&"symbol"==typeof O.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof O},$=function(t,n,e){return t===I&&$(H,n,e),y(t),n=_(n,!0),y(e),i(R,n)?(e.enumerable?(i(t,D)&&t[D][n]&&(t[D][n]=!1),e=S(e,{enumerable:b(0,!1)})):(i(t,D)||N(t,D,b(1,{})),t[D][n]=!0),q(t,n,e)):N(t,n,e)},W=function(t,n){y(t);for(var e,r=g(n=x(n)),i=0,o=r.length;o>i;)$(t,e=r[i++],n[e]);return t},G=function(t){var n=L.call(this,t=_(t,!0));return!(this===I&&i(R,t)&&!i(H,t))&&(!(n||!i(this,t)||!i(R,t)||i(this,D)&&this[D][t])||n)},Z=function(t,n){if(t=x(t),n=_(n,!0),t!==I||!i(R,n)||i(H,n)){var e=T(t,n);return!e||!i(R,n)||i(t,D)&&t[D][n]||(e.enumerable=!0),e}},J=function(t){for(var n,e=k(x(t)),r=[],o=0;e.length>o;)i(R,n=e[o++])||n==D||n==s||r.push(n);return r},Q=function(t){for(var n,e=t===I,r=k(e?H:x(t)),o=[],a=0;r.length>a;)!i(R,n=r[a++])||e&&!i(I,n)||o.push(R[n]);return o};V||(u((O=function(){if(this instanceof O)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===I&&n.call(H,e),i(this,D)&&i(this[D],t)&&(this[D][t]=!1),q(this,t,b(1,e))};return o&&z&&q(I,t,{configurable:!0,set:n}),X(t)}).prototype,"toString",function(){return this._k}),E.f=Z,C.f=$,e(74).f=M.f=J,e(47).f=G,e(73).f=Q,o&&!e(17)&&u(I,"propertyIsEnumerable",G,!0),d.f=function(t){return X(p(t))}),a(a.G+a.W+a.F*!V,{Symbol:O});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)p(K[tt++]);for(var nt=A(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return i(F,t+="")?F[t]:F[t]=O(t)},keyFor:function(t){if(!B(t))throw TypeError(t+" is not a symbol!");for(var n in F)if(F[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):W(S(t),n)},defineProperty:$,defineProperties:W,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),P&&a(a.S+a.F*(!V||c(function(){var t=O();return"[null]"!=U([t])||"{}"!=U({a:t})||"{}"!=U(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(w(n)||void 0!==t)&&!B(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!B(n))return n}),r[1]=n,U.apply(P,r)}}),O.prototype[j]||e(9)(O.prototype,j,O.prototype.valueOf),f(O,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,n,e){var r=e(22),i=e(73),o=e(47);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var a,u=e(t),s=o.f,c=0;u.length>c;)s.call(t,a=u[c++])&&n.push(a);return n}},function(t,n,e){var r=e(13),i=e(74).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,n,e){var r=e(2);r(r.S,"Array",{isArray:e(44)})},function(t,n,e){"use strict";var r=e(2),i=e(21),o=e(16),a=e(5),u=[].sort,s=[1,2,3];r(r.P+r.F*(a(function(){s.sort(void 0)})||!a(function(){s.sort(null)})||!e(30)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(2),i=e(43)(2);r(r.P+r.F*!e(30)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(76),i=e(48);t.exports=e(77)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){var r=e(3),i=e(112).set;t.exports=function(t,n,e){var o,a=n.constructor;return a!==e&&"function"==typeof a&&(o=a.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(3),i=e(4),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(10)(Function.call,e(75).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){"use strict";var r=e(2),i=e(43)(1);r(r.P+r.F*!e(30)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(76),i=e(48);t.exports=e(77)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r=e(2),i=e(54)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(49)("includes")},function(t,n,e){"use strict";var r=e(2),i=e(117);r(r.P+r.F*e(119)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(118),i=e(15);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(3),i=e(14),o=e(0)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(0)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){},function(t,n,e){},function(t,n,e){"use strict";e.r(n);e(31),e(25),e(56),e(58),e(62),e(63),e(29),e(42),e(67),e(97);var r=Math.PI,i=2*r,o=i-1e-6;function a(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function u(){return new a}a.prototype=u.prototype={constructor:a,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,i,o){t=+t,n=+n,e=+e,i=+i,o=+o;var a=this._x1,u=this._y1,s=e-t,c=i-n,l=a-t,f=u-n,h=l*l+f*f;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(f*s-c*l)>1e-6&&o){var p=e-a,d=i-u,v=s*s+c*c,g=p*p+d*d,m=Math.sqrt(v),y=Math.sqrt(h),w=o*Math.tan((r-Math.acos((v+h-g)/(2*m*y)))/2),x=w/y,_=w/m;Math.abs(x-1)>1e-6&&(this._+="L"+(t+x*l)+","+(n+x*f)),this._+="A"+o+","+o+",0,0,"+ +(f*p>l*d)+","+(this._x1=t+_*s)+","+(this._y1=n+_*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,a,u,s){t=+t,n=+n;var c=(e=+e)*Math.cos(a),l=e*Math.sin(a),f=t+c,h=n+l,p=1^s,d=s?a-u:u-a;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+f+","+h:(Math.abs(this._x1-f)>1e-6||Math.abs(this._y1-h)>1e-6)&&(this._+="L"+f+","+h),e&&(d<0&&(d=d%i+i),d>o?this._+="A"+e+","+e+",0,1,"+p+","+(t-c)+","+(n-l)+"A"+e+","+e+",0,1,"+p+","+(this._x1=f)+","+(this._y1=h):d>1e-6&&(this._+="A"+e+","+e+",0,"+ +(d>=r)+","+p+","+(this._x1=t+e*Math.cos(u))+","+(this._y1=n+e*Math.sin(u))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var s=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},c=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return s(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var l=c(s),f=l.right,h=(l.left,f);var p=Array.prototype,d=(p.slice,p.map,Math.sqrt(50)),v=Math.sqrt(10),g=Math.sqrt(2),m=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=y(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function y(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=d?10:o>=v?5:o>=g?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=d?10:o>=v?5:o>=g?2:1)}function w(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=d?i*=10:o>=v?i*=5:o>=g&&(i*=2),n<t?-i:i}function x(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Symbol("implicit");var _=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function b(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function S(){}var M="\\s*([+-]?\\d+)\\s*",E="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",C="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",A=/^#([0-9a-f]{3})$/,T=/^#([0-9a-f]{6})$/,N=new RegExp("^rgb\\("+[M,M,M]+"\\)$"),k=new RegExp("^rgb\\("+[C,C,C]+"\\)$"),O=new RegExp("^rgba\\("+[M,M,M,E]+"\\)$"),P=new RegExp("^rgba\\("+[C,C,C,E]+"\\)$"),U=new RegExp("^hsl\\("+[E,C,C]+"\\)$"),D=new RegExp("^hsla\\("+[E,C,C,E]+"\\)$"),j={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function L(t){var n;return t=(t+"").trim().toLowerCase(),(n=A.exec(t))?new V((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=T.exec(t))?F(parseInt(n[1],16)):(n=N.exec(t))?new V(n[1],n[2],n[3],1):(n=k.exec(t))?new V(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=O.exec(t))?R(n[1],n[2],n[3],n[4]):(n=P.exec(t))?R(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=U.exec(t))?z(n[1],n[2]/100,n[3]/100,1):(n=D.exec(t))?z(n[1],n[2]/100,n[3]/100,n[4]):j.hasOwnProperty(t)?F(j[t]):"transparent"===t?new V(NaN,NaN,NaN,0):null}function F(t){return new V(t>>16&255,t>>8&255,255&t,1)}function R(t,n,e,r){return r<=0&&(t=n=e=NaN),new V(t,n,e,r)}function H(t){return t instanceof S||(t=L(t)),t?new V((t=t.rgb()).r,t.g,t.b,t.opacity):new V}function I(t,n,e,r){return 1===arguments.length?H(t):new V(t,n,e,null==r?1:r)}function V(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Y(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function z(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new X(t,n,e,r)}function q(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof X)return new X(t.h,t.s,t.l,t.opacity);if(t instanceof S||(t=L(t)),!t)return new X;if(t instanceof X)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new X(a,u,s,t.opacity)}(t):new X(t,n,e,null==r?1:r)}function X(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function B(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}_(S,L,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),_(V,I,b(S,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new V(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new V(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Y(this.r)+Y(this.g)+Y(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),_(X,q,b(S,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new X(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new X(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new V(B(t>=240?t-240:t+120,i,r),B(t,i,r),B(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var $=Math.PI/180,W=180/Math.PI,G=.96422,Z=1,J=.82521,Q=4/29,K=6/29,tt=3*K*K,nt=K*K*K;function et(t){if(t instanceof it)return new it(t.l,t.a,t.b,t.opacity);if(t instanceof ft){if(isNaN(t.h))return new it(t.l,0,0,t.opacity);var n=t.h*$;return new it(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof V||(t=H(t));var e,r,i=st(t.r),o=st(t.g),a=st(t.b),u=ot((.2225045*i+.7168786*o+.0606169*a)/Z);return i===o&&o===a?e=r=u:(e=ot((.4360747*i+.3850649*o+.1430804*a)/G),r=ot((.0139322*i+.0971045*o+.7141733*a)/J)),new it(116*u-16,500*(e-u),200*(u-r),t.opacity)}function rt(t,n,e,r){return 1===arguments.length?et(t):new it(t,n,e,null==r?1:r)}function it(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function ot(t){return t>nt?Math.pow(t,1/3):t/tt+Q}function at(t){return t>K?t*t*t:tt*(t-Q)}function ut(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function st(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function ct(t){if(t instanceof ft)return new ft(t.h,t.c,t.l,t.opacity);if(t instanceof it||(t=et(t)),0===t.a&&0===t.b)return new ft(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*W;return new ft(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function lt(t,n,e,r){return 1===arguments.length?ct(t):new ft(t,n,e,null==r?1:r)}function ft(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}_(it,rt,b(S,{brighter:function(t){return new it(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new it(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new V(ut(3.1338561*(n=G*at(n))-1.6168667*(t=Z*at(t))-.4906146*(e=J*at(e))),ut(-.9787684*n+1.9161415*t+.033454*e),ut(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),_(ft,lt,b(S,{brighter:function(t){return new ft(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ft(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return et(this).rgb()}}));var ht=-.14861,pt=1.78277,dt=-.29227,vt=-.90649,gt=1.97294,mt=gt*vt,yt=gt*pt,wt=pt*dt-vt*ht;function xt(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof _t)return new _t(t.h,t.s,t.l,t.opacity);t instanceof V||(t=H(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(wt*r+mt*n-yt*e)/(wt+mt-yt),o=r-i,a=(gt*(e-i)-dt*o)/vt,u=Math.sqrt(a*a+o*o)/(gt*i*(1-i)),s=u?Math.atan2(a,o)*W-120:NaN;return new _t(s<0?s+360:s,u,i,t.opacity)}(t):new _t(t,n,e,null==r?1:r)}function _t(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function bt(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}_(_t,xt,b(S,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new _t(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new _t(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*$,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new V(255*(n+e*(ht*r+pt*i)),255*(n+e*(dt*r+vt*i)),255*(n+e*(gt*r)),this.opacity)}}));var St=function(t){return function(){return t}};function Mt(t,n){return function(e){return t+e*n}}function Et(t,n){var e=n-t;return e?Mt(t,e>180||e<-180?e-360*Math.round(e/360):e):St(isNaN(t)?n:t)}function Ct(t){return 1==(t=+t)?At:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):St(isNaN(n)?e:n)}}function At(t,n){var e=n-t;return e?Mt(t,e):St(isNaN(t)?n:t)}var Tt=function t(n){var e=Ct(n);function r(t,n){var r=e((t=I(t)).r,(n=I(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=At(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function Nt(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=I(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Nt(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return bt((e-r/n)*n,a,i,o,u)}}),Nt(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return bt((e-r/n)*n,i,o,a,u)}});var kt=function(t,n){return n-=t=+t,function(e){return t+n*e}},Ot=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Pt=new RegExp(Ot.source,"g");var Ut,Dt,jt,Lt,Ft=function(t,n){var e,r,i,o=Ot.lastIndex=Pt.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Ot.exec(t))&&(r=Pt.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:kt(e,r)})),o=Pt.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},Rt=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?St(n):("number"===r?kt:"string"===r?(e=L(n))?(n=e,Tt):Ft:n instanceof L?Tt:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Rt(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Rt(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:kt)(t,n)},Ht=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},It=180/Math.PI,Vt={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Yt=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*It,skewX:Math.atan(s)*It,scaleX:a,scaleY:u}};function zt(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],s=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:kt(t,i)},{i:s-2,x:kt(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,s),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:kt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,s),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:kt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,s),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:kt(t,e)},{i:u-2,x:kt(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,s),o=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var qt=zt(function(t){return"none"===t?Vt:(Ut||(Ut=document.createElement("DIV"),Dt=document.documentElement,jt=document.defaultView),Ut.style.transform=t,t=jt.getComputedStyle(Dt.appendChild(Ut),null).getPropertyValue("transform"),Dt.removeChild(Ut),t=t.slice(7,-1).split(","),Yt(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Xt=zt(function(t){return null==t?Vt:(Lt||(Lt=document.createElementNS("http://www.w3.org/2000/svg","g")),Lt.setAttribute("transform",t),(t=Lt.transform.baseVal.consolidate())?(t=t.matrix,Yt(t.a,t.b,t.c,t.d,t.e,t.f)):Vt)},", ",")",")");Math.SQRT2;function Bt(t){return function(n,e){var r=t((n=q(n)).h,(e=q(e)).h),i=At(n.s,e.s),o=At(n.l,e.l),a=At(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=a(t),n+""}}}Bt(Et),Bt(At);function $t(t){return function(n,e){var r=t((n=lt(n)).h,(e=lt(e)).h),i=At(n.c,e.c),o=At(n.l,e.l),a=At(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=a(t),n+""}}}$t(Et),$t(At);function Wt(t){return function n(e){function r(n,r){var i=t((n=xt(n)).h,(r=xt(r)).h),o=At(n.s,r.s),a=At(n.l,r.l),u=At(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}Wt(Et),Wt(At);var Gt=function(t){return function(){return t}},Zt=function(t){return+t},Jt=[0,1];function Qt(t){return t}function Kt(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:Gt(isNaN(n)?NaN:.5)}function tn(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function nn(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=Kt(i,r),o=e(a,o)):(r=Kt(r,i),o=e(o,a)),function(t){return o(r(t))}}function en(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=Kt(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=h(t,n,1,r)-1;return o[e](i[e](n))}}function rn(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function on(){var t,n,e,r,i,o,a=Jt,u=Jt,s=Rt,c=Qt;function l(){return r=Math.min(a.length,u.length)>2?en:nn,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,s)))(t(c(n)))}return f.invert=function(e){return c(n((o||(o=r(u,a.map(t),kt)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,Zt),c===Qt||(c=tn(a)),l()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=Ht,l()},f.clamp=function(t){return arguments.length?(c=t?tn(a):Qt,f):c!==Qt},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function an(t,n){return on()(t,n)}var un=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},sn=function(t){return(t=un(Math.abs(t)))?t[1]:NaN},cn=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ln(t){return new fn(t)}function fn(t){if(!(n=cn.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}ln.prototype=fn.prototype,fn.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var hn,pn,dn,vn,gn=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},mn=function(t,n){var e=un(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},yn={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return mn(100*t,n)},r:mn,s:function(t,n){var e=un(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(hn=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+un(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},wn=function(t){return t},xn=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];pn=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(t.substring(i-=u,i+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):wn,i=t.currency,o=t.decimal,a=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):wn,u=t.percent||"%";function s(t){var n=(t=ln(t)).fill,e=t.align,s=t.sign,c=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,d=t.trim,v=t.type;"n"===v?(h=!0,v="g"):yn[v]||(null==p&&(p=12),d=!0,v="g"),(l||"0"===n&&"="===e)&&(l=!0,n="0",e="=");var g="$"===c?i[0]:"#"===c&&/[boxX]/.test(v)?"0"+v.toLowerCase():"",m="$"===c?i[1]:/[%p]/.test(v)?u:"",y=yn[v],w=/[defgprs%]/.test(v);function x(t){var i,u,c,x=g,_=m;if("c"===v)_=y(t)+_,t="";else{var b=(t=+t)<0;if(t=y(Math.abs(t),p),d&&(t=gn(t)),b&&0==+t&&(b=!1),x=(b?"("===s?s:"-":"-"===s||"("===s?"":s)+x,_=("s"===v?xn[8+hn/3]:"")+_+(b&&"("===s?")":""),w)for(i=-1,u=t.length;++i<u;)if(48>(c=t.charCodeAt(i))||c>57){_=(46===c?o+t.slice(i+1):t.slice(i))+_,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var S=x.length+t.length+_.length,M=S<f?new Array(f-S+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?f-_.length:1/0),M=""),e){case"<":t=x+t+_+M;break;case"=":t=x+M+t+_;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+_+M.slice(S);break;default:t=M+x+t+_}return a(t)}return p=null==p?6:/[gprs]/.test(v)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:s,formatPrefix:function(t,n){var e=s(((t=ln(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(sn(n)/3))),i=Math.pow(10,-r),o=xn[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),dn=pn.format,vn=pn.formatPrefix;var _n=function(t,n,e,r){var i,o=w(t,n,e);switch((r=ln(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(sn(n)/3)))-sn(Math.abs(t)))}(o,a))||(r.precision=i),vn(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,sn(n)-sn(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-sn(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return dn(r)};function bn(t){var n=t.domain;return t.ticks=function(t){var e=n();return m(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return _n(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],s=i[a];return s<u&&(r=u,u=s,s=r,r=o,o=a,a=r),(r=y(u,s,e))>0?r=y(u=Math.floor(u/r)*r,s=Math.ceil(s/r)*r,e):r<0&&(r=y(u=Math.ceil(u*r)/r,s=Math.floor(s*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(s/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(s*r)/r,n(i)),t},t}function Sn(){var t=an(Qt,Qt);return t.copy=function(){return rn(t,Sn())},x.apply(t,arguments),bn(t)}var Mn=new Date,En=new Date;function Cn(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return Cn(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Mn.setTime(+n),En.setTime(+r),t(Mn),t(En),Math.floor(e(Mn,En))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var An=Cn(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});An.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Cn(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):An:null};An.range;var Tn=6e4,Nn=6048e5,kn=Cn(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),On=(kn.range,Cn(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*Tn)},function(t,n){return(n-t)/Tn},function(t){return t.getMinutes()})),Pn=(On.range,Cn(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*Tn)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),Un=(Pn.range,Cn(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Tn)/864e5},function(t){return t.getDate()-1})),Dn=Un;Un.range;function jn(t){return Cn(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Tn)/Nn})}var Ln=jn(0),Fn=jn(1),Rn=jn(2),Hn=jn(3),In=jn(4),Vn=jn(5),Yn=jn(6),zn=(Ln.range,Fn.range,Rn.range,Hn.range,In.range,Vn.range,Yn.range,Cn(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),qn=(zn.range,Cn(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));qn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Cn(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var Xn=qn,Bn=(qn.range,Cn(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Tn)},function(t,n){return(n-t)/Tn},function(t){return t.getUTCMinutes()})),$n=(Bn.range,Cn(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Wn=($n.range,Cn(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Gn=Wn;Wn.range;function Zn(t){return Cn(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Nn})}var Jn=Zn(0),Qn=Zn(1),Kn=Zn(2),te=Zn(3),ne=Zn(4),ee=Zn(5),re=Zn(6),ie=(Jn.range,Qn.range,Kn.range,te.range,ne.range,ee.range,re.range,Cn(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),oe=(ie.range,Cn(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));oe.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Cn(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var ae=oe;oe.range;function ue(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function se(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ce(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var le,fe,he,pe={"-":"",_:" ",0:"0"},de=/^\s*\d+/,ve=/^%/,ge=/[\\^$*+?|[\]().{}]/g;function me(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ye(t){return t.replace(ge,"\\$&")}function we(t){return new RegExp("^(?:"+t.map(ye).join("|")+")","i")}function xe(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function _e(t,n,e){var r=de.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function be(t,n,e){var r=de.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Se(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function Me(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Ee(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function Ce(t,n,e){var r=de.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ae(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Te(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Ne(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function ke(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Oe(t,n,e){var r=de.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Pe(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Ue(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function De(t,n,e){var r=de.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function je(t,n,e){var r=de.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Le(t,n,e){var r=de.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function Fe(t,n,e){var r=ve.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Re(t,n,e){var r=de.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function He(t,n,e){var r=de.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Ie(t,n){return me(t.getDate(),n,2)}function Ve(t,n){return me(t.getHours(),n,2)}function Ye(t,n){return me(t.getHours()%12||12,n,2)}function ze(t,n){return me(1+Dn.count(Xn(t),t),n,3)}function qe(t,n){return me(t.getMilliseconds(),n,3)}function Xe(t,n){return qe(t,n)+"000"}function Be(t,n){return me(t.getMonth()+1,n,2)}function $e(t,n){return me(t.getMinutes(),n,2)}function We(t,n){return me(t.getSeconds(),n,2)}function Ge(t){var n=t.getDay();return 0===n?7:n}function Ze(t,n){return me(Ln.count(Xn(t),t),n,2)}function Je(t,n){var e=t.getDay();return t=e>=4||0===e?In(t):In.ceil(t),me(In.count(Xn(t),t)+(4===Xn(t).getDay()),n,2)}function Qe(t){return t.getDay()}function Ke(t,n){return me(Fn.count(Xn(t),t),n,2)}function tr(t,n){return me(t.getFullYear()%100,n,2)}function nr(t,n){return me(t.getFullYear()%1e4,n,4)}function er(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+me(n/60|0,"0",2)+me(n%60,"0",2)}function rr(t,n){return me(t.getUTCDate(),n,2)}function ir(t,n){return me(t.getUTCHours(),n,2)}function or(t,n){return me(t.getUTCHours()%12||12,n,2)}function ar(t,n){return me(1+Gn.count(ae(t),t),n,3)}function ur(t,n){return me(t.getUTCMilliseconds(),n,3)}function sr(t,n){return ur(t,n)+"000"}function cr(t,n){return me(t.getUTCMonth()+1,n,2)}function lr(t,n){return me(t.getUTCMinutes(),n,2)}function fr(t,n){return me(t.getUTCSeconds(),n,2)}function hr(t){var n=t.getUTCDay();return 0===n?7:n}function pr(t,n){return me(Jn.count(ae(t),t),n,2)}function dr(t,n){var e=t.getUTCDay();return t=e>=4||0===e?ne(t):ne.ceil(t),me(ne.count(ae(t),t)+(4===ae(t).getUTCDay()),n,2)}function vr(t){return t.getUTCDay()}function gr(t,n){return me(Qn.count(ae(t),t),n,2)}function mr(t,n){return me(t.getUTCFullYear()%100,n,2)}function yr(t,n){return me(t.getUTCFullYear()%1e4,n,4)}function wr(){return"+0000"}function xr(){return"%"}function _r(t){return+t}function br(t){return Math.floor(+t/1e3)}!function(t){le=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,s=t.shortMonths,c=we(i),l=xe(i),f=we(o),h=xe(o),p=we(a),d=xe(a),v=we(u),g=xe(u),m=we(s),y=xe(s),w={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return s[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Ie,e:Ie,f:Xe,H:Ve,I:Ye,j:ze,L:qe,m:Be,M:$e,p:function(t){return i[+(t.getHours()>=12)]},Q:_r,s:br,S:We,u:Ge,U:Ze,V:Je,w:Qe,W:Ke,x:null,X:null,y:tr,Y:nr,Z:er,"%":xr},x={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return s[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:rr,e:rr,f:sr,H:ir,I:or,j:ar,L:ur,m:cr,M:lr,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:_r,s:br,S:fr,u:hr,U:pr,V:dr,w:vr,W:gr,x:null,X:null,y:mr,Y:yr,Z:wr,"%":xr},_={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=d[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:ke,e:ke,f:Le,H:Pe,I:Pe,j:Oe,L:je,m:Ne,M:Ue,p:function(t,n,e){var r=c.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},Q:Re,s:He,S:De,u:be,U:Se,V:Me,w:_e,W:Ee,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:Ae,Y:Ce,Z:Te,"%":Fe};function b(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=pe[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function S(t,n){return function(e){var r,i,o=ce(1900);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=se(ce(o.y))).getUTCDay(),r=i>4||0===i?Qn.ceil(r):Qn(r),r=Gn.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(ce(o.y))).getDay(),r=i>4||0===i?Fn.ceil(r):Fn(r),r=Dn.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?se(ce(o.y)).getUTCDay():n(ce(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,se(o)):n(o)}}function M(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=_[i in pe?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=b(e,w),w.X=b(r,w),w.c=b(n,w),x.x=b(e,x),x.X=b(r,x),x.c=b(n,x),{format:function(t){var n=b(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",ue);return n.toString=function(){return t},n},utcFormat:function(t){var n=b(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t,se);return n.toString=function(){return t},n}}}(t),le.format,le.parse,fe=le.utcFormat,he=le.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||fe("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||he("%Y-%m-%dT%H:%M:%S.%LZ");var Sr="http://www.w3.org/1999/xhtml",Mr={svg:"http://www.w3.org/2000/svg",xhtml:Sr,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Er=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),Mr.hasOwnProperty(n)?{space:Mr[n],local:t}:t};var Cr=function(t){var n=Er(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===Sr&&n.documentElement.namespaceURI===Sr?n.createElement(t):n.createElementNS(e,t)}})(n)};function Ar(){}var Tr=function(t){return null==t?Ar:function(){return this.querySelector(t)}};function Nr(){return[]}var kr=function(t){return null==t?Nr:function(){return this.querySelectorAll(t)}},Or=function(t){return function(){return this.matches(t)}},Pr=function(t){return new Array(t.length)};function Ur(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}Ur.prototype={constructor:Ur,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Dr="$";function jr(t,n,e,r,i,o){for(var a,u=0,s=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new Ur(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function Lr(t,n,e,r,i,o,a){var u,s,c,l={},f=n.length,h=o.length,p=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(p[u]=c=Dr+a.call(s,s.__data__,u,n),c in l?i[u]=s:l[c]=s);for(u=0;u<h;++u)(s=l[c=Dr+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],l[c]=null):e[u]=new Ur(t,o[u]);for(u=0;u<f;++u)(s=n[u])&&l[p[u]]===s&&(i[u]=s)}function Fr(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Rr=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Hr(t,n){return t.style.getPropertyValue(n)||Rr(t).getComputedStyle(t,null).getPropertyValue(n)}function Ir(t){return t.trim().split(/^|\s+/)}function Vr(t){return t.classList||new Yr(t)}function Yr(t){this._node=t,this._names=Ir(t.getAttribute("class")||"")}function zr(t,n){for(var e=Vr(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function qr(t,n){for(var e=Vr(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Yr.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Xr(){this.textContent=""}function Br(){this.innerHTML=""}function $r(){this.nextSibling&&this.parentNode.appendChild(this)}function Wr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Gr(){return null}function Zr(){var t=this.parentNode;t&&t.removeChild(this)}function Jr(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Qr(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Kr={},ti=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Kr={mouseenter:"mouseover",mouseleave:"mouseout"}));function ni(t,n,e){return t=ei(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function ei(t,n,e){return function(r){var i=ti;ti=r;try{t.call(this,this.__data__,n,e)}finally{ti=i}}}function ri(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function ii(t,n,e){var r=Kr.hasOwnProperty(t.type)?ni:ei;return function(i,o,a){var u,s=this.__on,c=r(n,o,a);if(s)for(var l=0,f=s.length;l<f;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function oi(t,n,e){var r=Rr(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var ai=[null];function ui(t,n){this._groups=t,this._parents=n}function si(){return new ui([[document.documentElement]],ai)}ui.prototype=si.prototype={constructor:ui,select:function(t){"function"!=typeof t&&(t=Tr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),c[l]=a);return new ui(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=kr(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new ui(r,i)},filter:function(t){"function"!=typeof t&&(t=Or(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new ui(r,this._parents)},data:function(t,n){if(!t)return d=new Array(this.size()),l=-1,this.each(function(t){d[++l]=t}),d;var e,r=n?Lr:jr,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),s=new Array(a),c=new Array(a),l=0;l<a;++l){var f=i[l],h=o[l],p=h.length,d=t.call(f,f&&f.__data__,l,i),v=d.length,g=s[l]=new Array(v),m=u[l]=new Array(v);r(f,h,g,m,c[l]=new Array(p),d,n);for(var y,w,x=0,_=0;x<v;++x)if(y=g[x]){for(x>=_&&(_=x+1);!(w=m[_])&&++_<v;);y._next=w||null}}return(u=new ui(u,i))._enter=s,u._exit=c,u},enter:function(){return new ui(this._enter||this._groups.map(Pr),this._parents)},exit:function(){return new ui(this._exit||this._groups.map(Pr),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new ui(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Fr);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,c=i[o]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new ui(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=Er(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Hr(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Ir(t+"");if(arguments.length<2){for(var r=Vr(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?zr:qr)(this,t)}}:n?function(t){return function(){zr(this,t)}}:function(t){return function(){qr(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Xr:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Br:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each($r)},lower:function(){return this.each(Wr)},append:function(t){var n="function"==typeof t?t:Cr(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:Cr(t),r=null==n?Gr:"function"==typeof n?n:Tr(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Zr)},clone:function(t){return this.select(t?Qr:Jr)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?ii:ri,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return oi(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return oi(this,t,n)}})(t,n))}};var ci=si,li=function(t){return"string"==typeof t?new ui([[document.querySelector(t)]],[document.documentElement]):new ui([[t]],ai)},fi=0;function hi(){this._="@"+(++fi).toString(36)}hi.prototype=function(){return new hi}.prototype={constructor:hi,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};e(69),e(70);e(101);var pi={value:function(){}};function di(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new vi(r)}function vi(t){this._=t}function gi(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function mi(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=pi,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}vi.prototype=di.prototype={constructor:vi,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),a=-1,u=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++a<u;)if(e=(t=o[a]).type)i[e]=mi(i[e],t.name,n);else if(null==n)for(e in i)i[e]=mi(i[e],t.name,null);return this}for(;++a<u;)if((e=(t=o[a]).type)&&(e=gi(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new vi(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var yi,wi,xi=di,_i=0,bi=0,Si=0,Mi=1e3,Ei=0,Ci=0,Ai=0,Ti="object"==typeof performance&&performance.now?performance:Date,Ni="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ki(){return Ci||(Ni(Oi),Ci=Ti.now()+Ai)}function Oi(){Ci=0}function Pi(){this._call=this._time=this._next=null}function Ui(t,n,e){var r=new Pi;return r.restart(t,n,e),r}function Di(){Ci=(Ei=Ti.now())+Ai,_i=bi=0;try{!function(){ki(),++_i;for(var t,n=yi;n;)(t=Ci-n._time)>=0&&n._call.call(null,t),n=n._next;--_i}()}finally{_i=0,function(){var t,n,e=yi,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:yi=n);wi=t,Li(r)}(),Ci=0}}function ji(){var t=Ti.now(),n=t-Ei;n>Mi&&(Ai-=n,Ei=t)}function Li(t){_i||(bi&&(bi=clearTimeout(bi)),t-Ci>24?(t<1/0&&(bi=setTimeout(Di,t-Ti.now()-Ai)),Si&&(Si=clearInterval(Si))):(Si||(Ei=Ti.now(),Si=setInterval(ji,Mi)),_i=1,Ni(Di)))}Pi.prototype=Ui.prototype={constructor:Pi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ki():+e)+(null==n?0:+n),this._next||wi===this||(wi?wi._next=this:yi=this,wi=this),this._call=t,this._time=e,Li()},stop:function(){this._call&&(this._call=null,this._time=1/0,Li())}};var Fi=function(t,n,e){var r=new Pi;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ri=xi("start","end","cancel","interrupt"),Hi=[],Ii=0,Vi=1,Yi=2,zi=3,qi=4,Xi=5,Bi=6,$i=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(s){var c,l,f,h;if(e.state!==Vi)return u();for(c in i)if((h=i[c]).name===e.name){if(h.state===zi)return Fi(o);h.state===qi?(h.state=Bi,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[c]):+c<n&&(h.state=Bi,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[c])}if(Fi(function(){e.state===zi&&(e.state=qi,e.timer.restart(a,e.delay,e.time),a(s))}),e.state=Yi,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Yi){for(e.state=zi,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(h=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=Xi,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);e.state===Xi&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=Bi,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Ui(function(t){e.state=Vi,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ri,tween:Hi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ii})};function Wi(t,n){var e=Zi(t,n);if(e.state>Ii)throw new Error("too late; already scheduled");return e}function Gi(t,n){var e=Zi(t,n);if(e.state>zi)throw new Error("too late; already running");return e}function Zi(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Ji(t,n,e){var r=t._id;return t.each(function(){var t=Gi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return Zi(t,r).value[n]}}var Qi=function(t,n){var e;return("number"==typeof n?kt:n instanceof L?Tt:(e=L(n))?(n=e,Tt):Ft)(t,n)};var Ki=ci.prototype.constructor;function to(t){return function(){this.style.removeProperty(t)}}var no=0;function eo(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function ro(){return++no}var io=ci.prototype;eo.prototype=function(t){return ci().transition(t)}.prototype={constructor:eo,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Tr(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],l=c.length,f=o[a]=new Array(l),h=0;h<l;++h)(u=c[h])&&(s=t.call(u,u.__data__,h,c))&&("__data__"in u&&(s.__data__=u.__data__),f[h]=s,$i(f[h],n,e,h,f,Zi(u,e)));return new eo(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=kr(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var h,p=t.call(s,s.__data__,f,c),d=Zi(s,e),v=0,g=p.length;v<g;++v)(h=p[v])&&$i(h,n,e,v,p,d);o.push(p),a.push(s)}return new eo(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Or(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new eo(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],f=c.length,h=a[u]=new Array(f),p=0;p<f;++p)(s=c[p]||l[p])&&(h[p]=s);for(;u<r;++u)a[u]=n[u];return new eo(a,this._parents,this._name,this._id)},selection:function(){return new Ki(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=ro(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=Zi(a,n);$i(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new eo(r,this._parents,t,e)},call:io.call,nodes:io.nodes,node:io.node,size:io.size,empty:io.empty,each:io.each,on:function(t,n){var e=this._id;return arguments.length<2?Zi(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Wi:Gi;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}(e,t,n))},attr:function(t,n){var e=Er(t),r="transform"===e?Xt:Qi;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,s));this.removeAttribute(t)}})(e,r,Ji(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=Er(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?qt:Qi;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Hr(this,t),a=(this.style.removeProperty(t),Hr(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,to(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=Hr(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=Hr(this,t)),a===s?null:a===r&&s===i?o:(i=s,o=n(r=a,u))}}(t,r,Ji(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var s=Gi(this,t),c=s.on,l=null==s.value[a]?o||(o=to(n)):void 0;c===e&&i===l||(r=(e=c).copy()).on(u,i=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=Hr(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Ji(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Zi(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=Gi(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Gi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Wi(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Wi(this,t).delay=n}})(n,t)):Zi(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Gi(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Gi(this,t).duration=n}})(n,t)):Zi(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Gi(this,t).ease=n}}(n,t)):Zi(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,a){var u={value:a},s={value:function(){0==--i&&o()}};e.each(function(){var e=Gi(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var oo=2*Math.PI,ao=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=oo);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*oo)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=oo);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*oo)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=oo);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*oo)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function uo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return ao.time=ki(),ao;return e}ci.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Yi&&e.state<Xi,e.state=Bi,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)})},ci.prototype.transition=function(t){var n,e;t instanceof eo?(n=t._id,t=t._name):(n=ro(),(e=ao).time=ki(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&$i(a,t,n,c,u,e||uo(a,n));return new eo(r,this._parents,t,n)};var so,co=li(".tooltip"),lo={show:function(t){var n=ti.pageY-110,e=ti.pageX;e+10>document.body.clientWidth-100&&(e=document.body.clientWidth+5-150),co.transition().duration(200).style("opacity",.9).on("end",function(){co.classed("isActive",!0),co.select(".tooltip-close").on("click",this.hide)}),co.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){co.transition().duration(500).style("opacity",0)},formatContent:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach(function(t,r){var i=null;t.class&&(i=t.class);var o="",a="<br />";n&&(o='<li class="'.concat(i,'">'),a="</li>");var u=Object.keys(t)[0];e+="".concat(o,'<span class="tooltip-label">').concat(u,":</span> ").concat(t[u]).concat(a)}),n&&(e+="</ul>"),e}},fo=function(){var t={top:10,right:10,bottom:10,left:10},n={orbit:{x:{min:-1,max:1},y:{min:-.309,max:.309}},earth:{x:{min:-.151,max:.151},y:{min:-.151,max:.151}}},e={China:"#d66e42",Russia:"#196c95",US:"#f9bc65",Other:"#b5bdc1"},r=0,i=0,o=Sn().domain([n.orbit.x.min,n.orbit.x.max]),a=Sn().domain([n.orbit.y.min,n.orbit.y.max]);function u(u){var s=u.container,l=u.data,f=s.select("svg").attr("viewBox","0 0 "+(r+t.left+t.right)+" "+(i+t.top+t.bottom)),h=f.select("g").attr("transform","translate("+t.left+","+t.top+")"),p=h.select(".g-earth");if(p.select("*").empty()){var d=Math.abs(a(n.earth.y.max)-a(0));p.append("circle").attr("cx",o(0)).attr("cy",a(0)).attr("r",d).attr("fill","lightgray"),p.append("circle").attr("cx",o(n.earth.x.min)).attr("cy",a(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cx",o(n.earth.x.max)).attr("cy",a(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cy",a(n.earth.y.min)).attr("cx",o(0)).attr("r",1).attr("fill","red"),p.append("circle").attr("cy",a(n.earth.y.max)).attr("cx",o(0)).attr("r",1).attr("fill","red")}var v,g,m,y,w,x=h.select(".g-orbit");if(x.select("*").empty()){var _=Math.abs(o(n.orbit.x.max)-o(0)),b=Math.abs(a(n.orbit.y.max)-a(0));p.append("path").attr("d",(v={cx:o(0),cy:a(0),rx:_,ry:b},g=v.cx,m=v.cy,y=v.rx,w=v.ry,g=parseFloat(g,10),m=parseFloat(m,10),y=parseFloat(y,10),w=parseFloat(w,10),"\n        M".concat(g-y,", ").concat(m,"\n        a").concat(y,", ").concat(w," 0 1, 0 ").concat(2*y,", 0\n        a").concat(y,", ").concat(w," 0 1, 0 ").concat(-2*y,", 0\n        "))).attr("fill","none").attr("stroke","#000")}var S=h.select(".g-plot"),M=S.selectAll(".satellite").data(l,function(t){return t.sat_name});M.join(function(t){return t.append("circle").attr("class","satellite").attr("r",5).attr("fill",function(t){return e[t.country]}).attr("stroke",function(t){return function(t,n){var e=!1;"#"==t[0]&&(t=t.slice(1),e=!0);var r=parseInt(t,16),i=(r>>16)+n;i>255?i=255:i<0&&(i=0);var o=(r>>8&255)+n;o>255?o=255:o<0&&(o=0);var a=(255&r)+n;return a>255?a=255:a<0&&(a=0),(e?"#":"")+(a|o<<8|i<<16).toString(16)}(e[t.country],-20)}).attr("fill-opacity",.8).attr("cx",function(t){return o(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",c.mouseover).on("mouseleave",c.mouseleave)},function(t){return t.attr("cx",function(t){return o(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord})})}function s(t){var n=t.datum();!function(t){var n=t.container,e=t.data,r=n.selectAll("svg").data([e]).enter().append("svg").append("g");r.append("g").attr("class","g-orbit"),r.append("g").attr("class","g-earth"),r.append("g").attr("class","g-plot")}({container:t,data:n}),function(t){t.data;o.range([0,r]),a.range([i,0])}({data:n}),u({container:t,data:n})}var c={mouseover:function(t){c.showTooltip(t),li(this).classed("is-active",!0)},mouseleave:function(){lo.hide(),li(this).classed("is-active",!1)},showTooltip:function(t){var n=[{Operator:t.sat_operator},{Date:t.timestamp},{Longitude:t.long_string}],e='\n      <p class="tooltip-heading">\n        '.concat(t.sat_name,"</p>\n      ").concat(lo.formatContent(n,!0));lo.show(e)}};return s.width=function(){return arguments.length?(r=(arguments.length<=0?void 0:arguments[0])-t.left-t.right,s):r},s.height=function(){return arguments.length?(i=(arguments.length<=0?void 0:arguments[0])-t.top-t.bottom,s):i},s}();var ho={init:function(t){var n;(so=li(t.container)).datum(t.data),n=Math.min(so.node().offsetWidth,window.innerHeight),fo.width(n).height(n/3),so.call(fo)}},po=e(78),vo={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),currentDateEl:document.querySelector(".timeline-current-date"),currentLaunchesEl:document.querySelector(".timeline-num-launches"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,updateCurrentDate:function(t){t=new Date(t),this.currentDateEl.innerHTML="".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=(t.currentDate,t.onChange);this.endDate=e,this.startDate=n,po.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",step:864e5,range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r)},setupBtnControls:function(){this.btnControls.addEventListener("click",function(){var t=vo.getCurrentDate();t==vo.endDate&&vo.el.noUiSlider.set(vo.startDate),1!=vo.playing?(vo.timer=setInterval(function(){t=vo.getCurrentDate(),vo.el.noUiSlider.set(t+864e5)},vo.transitionDuration),this.classList.remove("play-btn"),this.classList.add("pause-btn"),vo.playing=!0):vo.stopTimeline()})},stopTimeline:function(){clearInterval(vo.timer),vo.playing=!1,vo.btnControls.classList.remove("pause-btn"),vo.btnControls.classList.add("play-btn")}},go=vo;e(103),e(104),e(107),e(108),e(109),e(110),e(113),e(114),e(115),e(116);var mo={},yo={},wo=34,xo=10,_o=13;function bo(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function So(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function Mo(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Eo(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Mo(-n,6):n>9999?"+"+Mo(n,6):Mo(n,4))+"-"+Mo(t.getUTCMonth()+1,2)+"-"+Mo(t.getUTCDate(),2)+(o?"T"+Mo(e,2)+":"+Mo(r,2)+":"+Mo(i,2)+"."+Mo(o,3)+"Z":i?"T"+Mo(e,2)+":"+Mo(r,2)+":"+Mo(i,2)+"Z":r||e?"T"+Mo(e,2)+":"+Mo(r,2)+"Z":"")}var Co=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,s=o<=0,c=!1;function l(){if(s)return yo;if(c)return c=!1,mo;var n,r,i=a;if(t.charCodeAt(i)===wo){for(;a++<o&&t.charCodeAt(a)!==wo||t.charCodeAt(++a)===wo;);return(n=a)>=o?s=!0:(r=t.charCodeAt(a++))===xo?c=!0:r===_o&&(c=!0,t.charCodeAt(a)===xo&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if((r=t.charCodeAt(n=a++))===xo)c=!0;else if(r===_o)c=!0,t.charCodeAt(a)===xo&&++a;else if(r!==e)continue;return t.slice(i,n)}return s=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===xo&&--o,t.charCodeAt(o-1)===_o&&--o;(r=l())!==yo;){for(var f=[];r!==mo&&r!==yo;)f.push(r),r=l();n&&null==(f=n(f,u++))||i.push(f)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return a(n[t])}).join(t)})}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?Eo(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=bo(t);return function(r,i){return n(e(r),i,t)}}(t,n):bo(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=So(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=So(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Ao=Co(","),To=Ao.parse,No=(Ao.parseRows,Ao.format,Ao.formatBody,Ao.formatRows,Co("\t")),ko=No.parse;No.parseRows,No.format,No.formatBody,No.formatRows;function Oo(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Po=function(t,n){return fetch(t,n).then(Oo)};function Uo(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Po(n,e).then(function(n){return t(n,r)})}}var Do=Uo(To);Uo(ko);function jo(t){return function(n,e){return Po(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}jo("application/xml"),jo("text/html"),jo("image/svg+xml");function Lo(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Fo(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==u.return||u.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Ro(t,n,e,r,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,i)}var Ho=["US","China","Russia"];function Io(){var t;return t=regeneratorRuntime.mark(function t(n,e){var r,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=Do(n),i=Do(e),o=Promise.all([r,i]).then(function(t){var n=Fo(t,2),e=n[0],r=n[1];e.forEach(function(t){t.is_satellite=!0,t.is_target=!1}),r.forEach(function(t){t.is_satellite=!1,t.is_target=!0});var i=[].concat(Lo(e),Lo(r));i.forEach(function(t){t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("ï¿½","&#176;"),t.country.includes("U.S.")&&(t.country="US"),Ho.includes(t.country)||(t.country="Other")});var o=Array.from(new Set(Lo(i.map(function(t){return t.timestamp})))),a=Array.from(new Set(Lo(i.map(function(t){return t.sat_name})))),u=new Map;return o.forEach(function(t,n){var e=[];a.forEach(function(n){var r=i.filter(function(e){return e.timestamp===t&&e.sat_name===n});r.length&&e.push(r[0])}),u.set(new Date(t).getTime(),e)}),new Map(Array.from(u).sort(function(t,n){return t[0]-n[0]}))}),t.abrupt("return",o);case 4:case"end":return t.stop()}},t)}),(Io=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Ro(o,r,i,a,u,"next",t)}function u(t){Ro(o,r,i,a,u,"throw",t)}a(void 0)})}).apply(this,arguments)}var Vo=function(t,n){return Io.apply(this,arguments)};e(120),e(121);function Yo(t,n,e,r,i,o,a){try{var u=t[o](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,i)}var zo,qo,Xo,Bo,$o="./data/20190318-china.csv",Wo="./data/20190318-china-targets.csv",Go=25;function Zo(){var t;return t=regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Vo($o,Wo);case 2:zo=t.sent,n=Array.from(zo.keys()),Xo=n[0],Bo=n[n.length-1],qo=Xo,Qo(),Jo(),Ko();case 10:case"end":return t.stop()}},t)}),(Zo=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function a(t){Yo(o,r,i,a,u,"next",t)}function u(t){Yo(o,r,i,a,u,"throw",t)}a(void 0)})}).apply(this,arguments)}function Jo(){qo=go.getCurrentDate();var t=zo.get(qo);ho.init({data:t,container:".chart"})}function Qo(){go.transitionDuration=Go,go.setupTimeline({startDate:Xo,endDate:Bo,current:qo,transitionDuration:Go,onChange:function(){Jo(),go.updateCurrentDate(qo),qo==Bo&&go.stopTimeline()}})}function Ko(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach(function(t){return t.classList.remove("hide-on-load")})}window.addEventListener("DOMContentLoaded",function(){!function(){Zo.apply(this,arguments)}()})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGV0ZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLWluc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2Zvci1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWRlZmluZS1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktbWV0aG9kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmRhdGUudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2xsZWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NyZWF0ZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FkdmFuY2Utc3RyaW5nLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZ2V4cC1leGVjLWFic3RyYWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZpeC1yZS13a3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qtc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtcHJvdG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkubWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hcnJheS5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ZhaWxzLWlzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtcGF0aC9zcmMvcGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2FzY2VuZGluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9vcmRpbmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvbGFiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY3ViZWhlbGl4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcmdiLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYmFzaXNDbG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy92YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL29iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3pvb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oc2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9oY2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9xdWFudGl6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29udGludW91cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXREZWNpbWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2V4cG9uZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFNwZWNpZmllci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUcmltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFByZWZpeEF1dG8uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRSb3VuZGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFR5cGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2xvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXROdW1lcmFscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL3RpY2tGb3JtYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvblJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9pbnRlcnZhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWlsbGlzZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2R1cmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9zZWNvbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21pbnV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvaG91ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZGF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy93ZWVrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9tb250aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMveWVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTWludXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNIb3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNEYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y01vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNZZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS1mb3JtYXQvc3JjL2lzb1BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL25hbWVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NyZWF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0b3JBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbWF0Y2hlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbnRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3N0eWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbGFzc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yYWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jbG9uZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vam9pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9jYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2Rlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2l6ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW1wdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3Byb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hcHBlbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9sb2NhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZGlzcGF0Y2gvc3JjL2Rpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lb3V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NjaGVkdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3R3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3JlbW92ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2VsZWN0QWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90cmFuc2l0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0clR3ZWVuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZGVsYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZWFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lbmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3BvbHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL3Npbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvYmFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvZWxhc3RpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWVhc2Uvc3JjL2N1YmljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvYWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jaGFydC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvdGltZWxpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL2Nzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy90c3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMvZHN2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMveG1sLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInN0b3JlIiwidWlkIiwiVVNFX1NZTUJPTCIsImdsb2JhbCIsIndpbmRvdyIsIk1hdGgiLCJzZWxmIiwiRnVuY3Rpb24iLCJfX2ciLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInR5cGUiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsInRhcmdldCIsImV4cFByb3RvIiwidW5kZWZpbmVkIiwiVSIsIlciLCJSIiwiaXQiLCJpc09iamVjdCIsIlR5cGVFcnJvciIsImV4ZWMiLCJlIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJhIiwiaGFzIiwiU1JDIiwiJHRvU3RyaW5nIiwiVFBMIiwic3BsaXQiLCJpbnNwZWN0U291cmNlIiwidmFsIiwic2FmZSIsImlzRnVuY3Rpb24iLCJqb2luIiwiU3RyaW5nIiwidGhpcyIsImNyZWF0ZURlc2MiLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJsZW5ndGgiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ2ZXJzaW9uIiwiX19lIiwiSU9iamVjdCIsImRlZmluZWQiLCJ0b1N0cmluZyIsInNsaWNlIiwiaWQiLCJweCIsInJhbmRvbSIsImNvbmNhdCIsImJpdG1hcCIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsImtleXMiLCJ0b0ludGVnZXIiLCJtaW4iLCJkZWYiLCJUQUciLCJ0YWciLCJzdGF0IiwiYWRkVG9VbnNjb3BhYmxlcyIsInN0ZXAiLCJJdGVyYXRvcnMiLCJ0b0lPYmplY3QiLCJBcnJheSIsIml0ZXJhdGVkIiwia2luZCIsIl90IiwiX2kiLCJfayIsImluZGV4IiwiQXJndW1lbnRzIiwicHVzaCIsImNvcHlyaWdodCIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsImNsYXNzb2YiLCJ0ZXN0IiwiZmFpbHMiLCJtZXRob2QiLCJhcmciLCIkaXRlcmF0b3JzIiwiZ2V0S2V5cyIsIndrcyIsIklURVJBVE9SIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsIk5BTUUiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJwcm90byIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwidmFsdWVPZiIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsInJlc3VsdCIsInNoYXJlZCIsIlNBRkVfQ0xPU0lORyIsInJpdGVyIiwiZnJvbSIsInNraXBDbG9zaW5nIiwiYXJyIiwiaXRlciIsImRvbmUiLCJmb3JiaWRkZW5GaWVsZCIsImlzQXJyYXlJdGVyIiwidG9MZW5ndGgiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiaXRlcmF0b3IiLCJpdGVyRm4iLCIkZm9yRWFjaCIsIlNUUklDVCIsImZvckVhY2giLCJjYWxsYmFja2ZuIiwidG9PYmplY3QiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwicmVzIiwiaXNBcnJheSIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiTUVUQSIsInNldERlc2MiLCJpc0V4dGVuc2libGUiLCJGUkVFWkUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsInNldE1ldGEiLCJ3IiwibWV0YSIsIktFWSIsIk5FRUQiLCJmYXN0S2V5IiwiZ2V0V2VhayIsIm9uRnJlZXplIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG8iLCJhcnJheUluZGV4T2YiLCJuYW1lcyIsInRvQWJzb2x1dGVJbmRleCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJkb2N1bWVudEVsZW1lbnQiLCIkYXQiLCJwb2ludCIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TGlrZSIsIkMiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwicmV0IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJvYmoiLCJlcnIiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbnZva2UiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsImFuSW5zdGFuY2UiLCJmb3JPZiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInRhc2siLCJzZXQiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJ1c2VyQWdlbnQiLCJwcm9taXNlUmVzb2x2ZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJpc05vZGUiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiVVNFX05BVElWRSIsInByb21pc2UiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImluZGV4T2YiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJydW4iLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJ2Iiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl9kIiwiX3ciLCIkcmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsIngiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJodG1sIiwiY2VsIiwic2V0VGFzayIsInNldEltbWVkaWF0ZSIsImNsZWFyVGFzayIsImNsZWFySW1tZWRpYXRlIiwiTWVzc2FnZUNoYW5uZWwiLCJEaXNwYXRjaCIsImNvdW50ZXIiLCJxdWV1ZSIsImxpc3RlbmVyIiwiZXZlbnQiLCJkYXRhIiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImltcG9ydFNjcmlwdHMiLCJyZW1vdmVDaGlsZCIsInNldFRpbWVvdXQiLCJjbGVhciIsIlByb21pc2VDYXBhYmlsaXR5IiwiJCRyZXNvbHZlIiwiREVTQ1JJUFRPUlMiLCJTUEVDSUVTIiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIm1heCIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJtYXliZUNhbGxOYXRpdmUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlZ2V4cCIsInJ4IiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsImxhc3RJbmRleCIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInN0ciIsInRhaWxQb3MiLCJzeW1ib2xzIiwibWF0Y2giLCJjaCIsImNhcHR1cmUiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJSZWdFeHAiLCJuYXRpdmVSZXBsYWNlIiwicmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsInJlIiwiJGZsYWdzIiwiZGVmaW5lIiwiZmxhZ3MiLCJEYXRlUHJvdG8iLCJEYXRlIiwiZ2V0VGltZSIsIk5hTiIsIndrc0V4dCIsImdldE93blByb3BlcnR5U3ltYm9scyIsImhpZGRlbktleXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwicElFIiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInJlZGVmaW5lQWxsIiwiJGl0ZXJEZWZpbmUiLCJzZXRTcGVjaWVzIiwidmFsaWRhdGUiLCJTSVpFIiwiZ2V0RW50cnkiLCJfZiIsImsiLCJnZXRDb25zdHJ1Y3RvciIsIkFEREVSIiwiX2wiLCJkZWxldGUiLCJzZXRTdHJvbmciLCIkaXRlckRldGVjdCIsImluaGVyaXRJZlJlcXVpcmVkIiwiY29tbW9uIiwiSVNfV0VBSyIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfRkFDVE9SWV9fIiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfQVJSQVlfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fIiwiVkVSU0lPTiIsInJlbW92ZUVsZW1lbnQiLCJwYXJlbnRFbGVtZW50IiwiaXNTZXQiLCJwcmV2ZW50RGVmYXVsdCIsImlzTnVtZXJpYyIsImlzRmluaXRlIiwiYWRkQ2xhc3NGb3IiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiZHVyYXRpb24iLCJhZGRDbGFzcyIsInJlbW92ZUNsYXNzIiwibGltaXQiLCJhc0FycmF5IiwiY291bnREZWNpbWFscyIsIm51bVN0ciIsInBpZWNlcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImdldFBhZ2VPZmZzZXQiLCJkb2MiLCJzdXBwb3J0UGFnZU9mZnNldCIsInBhZ2VYT2Zmc2V0IiwiaXNDU1MxQ29tcGF0IiwiY29tcGF0TW9kZSIsInNjcm9sbExlZnQiLCJib2R5IiwieSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwic3ViUmFuZ2VSYXRpbyIsInBhIiwicGIiLCJmcm9tUGVyY2VudGFnZSIsInJhbmdlIiwiZ2V0SiIsInRvU3RlcHBpbmciLCJ4VmFsIiwieFBjdCIsInZhIiwidmIiLCJhYnMiLCJ0b1BlcmNlbnRhZ2UiLCJnZXRTdGVwIiwieFN0ZXBzIiwic25hcCIsInRvIiwicm91bmQiLCJjbG9zZXN0IiwiaGFuZGxlRW50cnlQb2ludCIsInBlcmNlbnRhZ2UiLCJwYXJzZUZsb2F0IiwieEhpZ2hlc3RDb21wbGV0ZVN0ZXAiLCJoYW5kbGVTdGVwUG9pbnQiLCJ0b3RhbFN0ZXBzIiwieE51bVN0ZXBzIiwiaGlnaGVzdFN0ZXAiLCJOdW1iZXIiLCJ0b0ZpeGVkIiwiU3BlY3RydW0iLCJzaW5nbGVTdGVwIiwib3JkZXJlZCIsInNvcnQiLCJnZXRNYXJnaW4iLCJmcm9tU3RlcHBpbmciLCJpc1BlcmNlbnRhZ2UiLCJnZXREZWZhdWx0U3RlcCIsImlzRG93biIsInNpemUiLCJnZXROZWFyYnlTdGVwcyIsInN0ZXBCZWZvcmUiLCJzdGFydFZhbHVlIiwidGhpc1N0ZXAiLCJzdGVwQWZ0ZXIiLCJjb3VudFN0ZXBEZWNpbWFscyIsInN0ZXBEZWNpbWFscyIsIm1hcCIsImNvbnZlcnQiLCJkZWZhdWx0Rm9ybWF0dGVyIiwidmFsaWRhdGVGb3JtYXQiLCJpc1ZhbGlkRm9ybWF0dGVyIiwidGVzdFN0ZXAiLCJwYXJzZWQiLCJ0ZXN0UmFuZ2UiLCJzcGVjdHJ1bSIsInRlc3RTdGFydCIsImhhbmRsZXMiLCJzdGFydCIsInRlc3RTbmFwIiwidGVzdEFuaW1hdGUiLCJhbmltYXRlIiwidGVzdEFuaW1hdGlvbkR1cmF0aW9uIiwiYW5pbWF0aW9uRHVyYXRpb24iLCJ0ZXN0Q29ubmVjdCIsImNvbm5lY3QiLCJ0ZXN0T3JpZW50YXRpb24iLCJvcnQiLCJ0ZXN0TWFyZ2luIiwibWFyZ2luIiwidGVzdExpbWl0IiwidGVzdFBhZGRpbmciLCJwYWRkaW5nIiwidGVzdERpcmVjdGlvbiIsImRpciIsInRlc3RCZWhhdmlvdXIiLCJ0YXAiLCJkcmFnIiwiZml4ZWQiLCJob3ZlciIsInVuY29uc3RyYWluZWQiLCJldmVudHMiLCJ0ZXN0VG9vbHRpcHMiLCJ0b29sdGlwcyIsImZvcm1hdHRlciIsInRlc3RBcmlhRm9ybWF0IiwiYXJpYUZvcm1hdCIsInRlc3RGb3JtYXQiLCJmb3JtYXQiLCJ0ZXN0S2V5Ym9hcmRTdXBwb3J0Iiwia2V5Ym9hcmRTdXBwb3J0IiwidGVzdERvY3VtZW50RWxlbWVudCIsInRlc3RDc3NQcmVmaXgiLCJjc3NQcmVmaXgiLCJ0ZXN0Q3NzQ2xhc3NlcyIsImNzc0NsYXNzZXMiLCJ0ZXN0T3B0aW9ucyIsIm9wdGlvbnMiLCJ0ZXN0cyIsImRpcmVjdGlvbiIsIm9yaWVudGF0aW9uIiwiYmVoYXZpb3VyIiwiZGVmYXVsdHMiLCJiYXNlIiwib3JpZ2luIiwiaGFuZGxlTG93ZXIiLCJoYW5kbGVVcHBlciIsInRvdWNoQXJlYSIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsImJhY2tncm91bmQiLCJjb25uZWN0cyIsImx0ciIsInJ0bCIsImRyYWdnYWJsZSIsImFjdGl2ZSIsInRvb2x0aXAiLCJwaXBzIiwicGlwc0hvcml6b250YWwiLCJwaXBzVmVydGljYWwiLCJtYXJrZXIiLCJtYXJrZXJIb3Jpem9udGFsIiwibWFya2VyVmVydGljYWwiLCJtYXJrZXJOb3JtYWwiLCJtYXJrZXJMYXJnZSIsIm1hcmtlclN1YiIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJ2YWx1ZU5vcm1hbCIsInZhbHVlTGFyZ2UiLCJ2YWx1ZVN1YiIsIm1zUHJlZml4IiwibXNUcmFuc2Zvcm0iLCJub1ByZWZpeCIsInRyYW5zZm9ybSIsInRyYW5zZm9ybVJ1bGUiLCJzY29wZSIsIm9yaWdpbmFsT3B0aW9ucyIsInNjb3BlX0Jhc2UiLCJzY29wZV9IYW5kbGVzIiwic2NvcGVfQ29ubmVjdHMiLCJzY29wZV9QaXBzIiwic2NvcGVfVG9vbHRpcHMiLCJzY29wZV9TZWxmIiwiYWRkVGFyZ2V0IiwiYWN0aW9ucyIsIm5hdmlnYXRvciIsInBvaW50ZXJFbmFibGVkIiwibW92ZSIsImVuZCIsIm1zUG9pbnRlckVuYWJsZWQiLCJzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSIsIkNTUyIsInN1cHBvcnRzIiwic3VwcG9ydHNQYXNzaXZlIiwib3B0cyIsImdldFN1cHBvcnRzUGFzc2l2ZSIsInNjb3BlX1RhcmdldCIsInNjb3BlX1NwZWN0cnVtIiwic2NvcGVfVmFsdWVzIiwic2NvcGVfTG9jYXRpb25zIiwic2NvcGVfSGFuZGxlTnVtYmVycyIsInNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCIsInNjb3BlX0V2ZW50cyIsInNjb3BlX0RvY3VtZW50Iiwib3duZXJEb2N1bWVudCIsInNjb3BlX0RvY3VtZW50RWxlbWVudCIsInNjb3BlX0JvZHkiLCJQSVBTX05PTkUiLCJQSVBTX05PX1ZBTFVFIiwiUElQU19MQVJHRV9WQUxVRSIsIlBJUFNfU01BTExfVkFMVUUiLCJzY29wZV9EaXJPZmZzZXQiLCJhZGROb2RlVG8iLCJkaXYiLCJhZGRPcmlnaW4iLCJoYW5kbGVOdW1iZXIiLCJzZXRBdHRyaWJ1dGUiLCJpc1NsaWRlckRpc2FibGVkIiwiaXNIYW5kbGVEaXNhYmxlZCIsImhvcml6b250YWxLZXlzIiwidmVydGljYWxLZXlzIiwiaXNVcCIsImdldE5leHRTdGVwc0ZvckhhbmRsZSIsInZhbHVlU2V0SGFuZGxlIiwiZXZlbnRLZXlkb3duIiwiYWRkQ29ubmVjdCIsImFkZFRvb2x0aXAiLCJmaXJzdENoaWxkIiwiaGFzQXR0cmlidXRlIiwiaGFuZGxlT3JpZ2luIiwicmVtb3ZlVG9vbHRpcHMiLCJyZW1vdmVFdmVudCIsImJpbmRFdmVudCIsInVuZW5jb2RlZCIsImZvcm1hdHRlZFZhbHVlIiwiaW5uZXJIVE1MIiwiYWRkTWFya2luZyIsInNwcmVhZCIsImZpbHRlckZ1bmMiLCJ2YWx1ZVNpemVDbGFzc2VzIiwibWFya2VyU2l6ZUNsYXNzZXMiLCJ2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyIsIm1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyIsImdldENsYXNzZXMiLCJvcmllbnRhdGlvbkNsYXNzZXMiLCJzaXplQ2xhc3NlcyIsIm9mZnNldCIsIm5vZGUiLCJhZGRTcHJlYWQiLCJyZW1vdmVQaXBzIiwiZ3JpZCIsImRlbnNpdHkiLCJmaWx0ZXIiLCJzdGVwcGVkIiwiZ3JvdXAiLCJpbnRlcnZhbCIsImdldEdyb3VwIiwiYXJyYXkiLCJpbmRleGVzIiwiZmlyc3RJblJhbmdlIiwibGFzdEluUmFuZ2UiLCJpZ25vcmVGaXJzdCIsImlnbm9yZUxhc3QiLCJwcmV2UGN0IiwidW5zaGlmdCIsImN1cnJlbnQiLCJxIiwibmV3UGN0IiwicGN0RGlmZmVyZW5jZSIsInBjdFBvcyIsInN0ZXBzIiwicmVhbFN0ZXBzIiwic3RlcFNpemUiLCJsb3ciLCJoaWdoIiwiaXNTdGVwcyIsImdlbmVyYXRlU3ByZWFkIiwiYmFzZVNpemUiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiYWx0Iiwid2lkdGgiLCJoZWlnaHQiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJpc1RvdWNoT25UYXJnZXQiLCJjaGVja1RvdWNoIiwiY29udGFpbnMiLCJ0YXJnZXRUb3VjaGVzIiwidG91Y2hlcyIsInBhZ2VYIiwicGFnZVkiLCJ0YXJnZXRUb3VjaCIsImZpbmQiLCJjaGFuZ2VkVG91Y2hlcyIsImNsaWVudFgiLCJjbGllbnRZIiwicG9pbnRzIiwiY3Vyc29yIiwiZml4RXZlbnQiLCJkb05vdFJlamVjdCIsImJ1dHRvbnMiLCJjYWxjUG9pbnQiLCJldmVudE5hbWUiLCJwYXNzaXZlIiwiY2FsY1BvaW50VG9QZXJjZW50YWdlIiwiZWxlbSIsImRvY0VsZW0iLCJsb2NhdGlvbiIsInRvcCIsImNsaWVudFRvcCIsImxlZnQiLCJjbGllbnRMZWZ0IiwicHJvcG9zYWwiLCJkb2N1bWVudExlYXZlIiwibm9kZU5hbWUiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnRFbmQiLCJldmVudE1vdmUiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5IiwibW92ZW1lbnQiLCJzdGFydENhbGNQb2ludCIsIm1vdmVIYW5kbGVzIiwibG9jYXRpb25zIiwiaGFuZGxlTnVtYmVycyIsImxpc3RlbmVycyIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZXRaaW5kZXgiLCJmaXJlRXZlbnQiLCJldmVudFN0YXJ0Iiwic29tZSIsImNoaWxkcmVuIiwic3RvcFByb3BhZ2F0aW9uIiwibW92ZUV2ZW50IiwiZW5kRXZlbnQiLCJvdXRFdmVudCIsImdldENvbXB1dGVkU3R5bGUiLCJldmVudFRhcCIsImdldENsb3Nlc3RIYW5kbGUiLCJzZXRIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJuYW1lc3BhY2VkRXZlbnQiLCJuYW1lc3BhY2UiLCJzdWJzdHJpbmciLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiZXZlbnRUeXBlIiwiY2hlY2tIYW5kbGVQb3NpdGlvbiIsInJlZmVyZW5jZSIsImxvb2tCYWNrd2FyZCIsImxvb2tGb3J3YXJkIiwiZ2V0VmFsdWUiLCJpblJ1bGVPcmRlciIsInVwd2FyZCIsInByb3Bvc2FscyIsInRyYW5zZm9ybURpcmVjdGlvbiIsInpJbmRleCIsInJ1bGUiLCJ1cGRhdGVDb25uZWN0IiwidXBkYXRlSGFuZGxlUG9zaXRpb24iLCJoIiwiY29ubmVjdFdpZHRoIiwidHJhbnNsYXRlUnVsZSIsInNjYWxlUnVsZSIsInJlc29sdmVUb1ZhbHVlIiwidmFsdWVTZXQiLCJpbnB1dCIsImZpcmVTZXRFdmVudCIsImlzSW5pdCIsInZhbHVlR2V0IiwibmVhcmJ5U3RlcHMiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJjb25uZWN0T3B0aW9ucyIsImNvbm5lY3RCYXNlIiwiYWRkRWxlbWVudHMiLCJoYW5kbGVCZWZvcmUiLCJoYW5kbGVBZnRlciIsImV2ZW50SG9sZGVycyIsImV2ZW50SG9sZGVyIiwicG9zaXRpb25zIiwidGV4dCIsImRlc3Ryb3kiLCJub1VpU2xpZGVyIiwib24iLCJvZmYiLCJfX21vdmVIYW5kbGVzIiwidXBkYXRlT3B0aW9ucyIsIm9wdGlvbnNUb1VwZGF0ZSIsInVwZGF0ZUFibGUiLCJuZXdPcHRpb25zIiwiX19zcGVjdHJ1bSIsImFwaSIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiT2JqZWN0UHJvdG8iLCIkZGVmaW5lUHJvcGVydHkiLCJEIiwidW4iLCJtYWNyb3Rhc2siLCJPYnNlcnZlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwiaGVhZCIsImxhc3QiLCJmbHVzaCIsInBhcmVudCIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm9ic2VydmUiLCJjaGFyYWN0ZXJEYXRhIiwicHJvbWlzZUNhcGFiaWxpdHkiLCJvcmlnaW5hbCIsImF0IiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwic3RyaW5nIiwiZm9yY2VkIiwiJHRyaW0iLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiJGZhaWxzIiwid2tzRGVmaW5lIiwiZW51bUtleXMiLCJfY3JlYXRlIiwiZ09QTkV4dCIsIiRHT1BEIiwiJERQIiwiZ09QTiIsIiRKU09OIiwiSlNPTiIsIl9zdHJpbmdpZnkiLCJzdHJpbmdpZnkiLCJISURERU4iLCJUT19QUklNSVRJVkUiLCJpc0VudW0iLCJTeW1ib2xSZWdpc3RyeSIsIkFsbFN5bWJvbHMiLCJPUFN5bWJvbHMiLCJRT2JqZWN0Iiwic2V0dGVyIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJnT1BTIiwiZ2V0U3ltYm9scyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCIkc29ydCIsImNvbXBhcmVmbiIsIiRmaWx0ZXIiLCJzdHJvbmciLCJjaGVjayIsImJ1Z2d5IiwiJG1hcCIsIiRpbmNsdWRlcyIsImluY2x1ZGVzIiwic2VhcmNoU3RyaW5nIiwiaXNSZWdFeHAiLCJNQVRDSCIsInBpIiwiUEkiLCJ0YXUiLCJ0YXVFcHNpbG9uIiwiUGF0aCIsIl94MCIsIl95MCIsIl94MSIsIl95MSIsIl8iLCJwYXRoIiwibW92ZVRvIiwiY2xvc2VQYXRoIiwibGluZVRvIiwicXVhZHJhdGljQ3VydmVUbyIsIngxIiwieTEiLCJiZXppZXJDdXJ2ZVRvIiwieDIiLCJ5MiIsImFyY1RvIiwieDAiLCJ5MCIsIngyMSIsInkyMSIsIngwMSIsInkwMSIsImwwMV8yIiwieDIwIiwieTIwIiwibDIxXzIiLCJsMjBfMiIsImwyMSIsInNxcnQiLCJsMDEiLCJ0YW4iLCJhY29zIiwidDAxIiwidDIxIiwiYXJjIiwiYTAiLCJhMSIsImNjdyIsImR4IiwiY29zIiwiZHkiLCJzaW4iLCJjdyIsImRhIiwiYXNjZW5kaW5nIiwiYmlzZWN0b3IiLCJjb21wYXJlIiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiYXNjZW5kaW5nQmlzZWN0IiwiYmlzZWN0UmlnaHQiLCJiaXNlY3QiLCJhcnJheV9hcnJheSIsImUxMCIsImU1IiwiZTIiLCJ0aWNrcyIsImNvdW50IiwidGlja0luY3JlbWVudCIsInBvd2VyIiwibG9nIiwiTE4xMCIsInBvdyIsInRpY2tTdGVwIiwic3RlcDAiLCJzdGVwMSIsImluaXRSYW5nZSIsImZhY3RvcnkiLCJleHRlbmQiLCJkZWZpbml0aW9uIiwiQ29sb3IiLCJyZUkiLCJyZU4iLCJyZVAiLCJyZUhleDMiLCJyZUhleDYiLCJyZVJnYkludGVnZXIiLCJyZVJnYlBlcmNlbnQiLCJyZVJnYmFJbnRlZ2VyIiwicmVSZ2JhUGVyY2VudCIsInJlSHNsUGVyY2VudCIsInJlSHNsYVBlcmNlbnQiLCJuYW1lZCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiY2FkZXRibHVlIiwiY2hhcnRyZXVzZSIsImNob2NvbGF0ZSIsImNvcmFsIiwiY29ybmZsb3dlcmJsdWUiLCJjb3Juc2lsayIsImNyaW1zb24iLCJjeWFuIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVuIiwiZ3JlZW55ZWxsb3ciLCJncmV5IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hZ2VudGEiLCJtYXJvb24iLCJtZWRpdW1hcXVhbWFyaW5lIiwibWVkaXVtYmx1ZSIsIm1lZGl1bW9yY2hpZCIsIm1lZGl1bXB1cnBsZSIsIm1lZGl1bXNlYWdyZWVuIiwibWVkaXVtc2xhdGVibHVlIiwibWVkaXVtc3ByaW5nZ3JlZW4iLCJtZWRpdW10dXJxdW9pc2UiLCJtZWRpdW12aW9sZXRyZWQiLCJtaWRuaWdodGJsdWUiLCJtaW50Y3JlYW0iLCJtaXN0eXJvc2UiLCJtb2NjYXNpbiIsIm5hdmFqb3doaXRlIiwibmF2eSIsIm9sZGxhY2UiLCJvbGl2ZSIsIm9saXZlZHJhYiIsIm9yYW5nZSIsIm9yYW5nZXJlZCIsIm9yY2hpZCIsInBhbGVnb2xkZW5yb2QiLCJwYWxlZ3JlZW4iLCJwYWxldHVycXVvaXNlIiwicGFsZXZpb2xldHJlZCIsInBhcGF5YXdoaXAiLCJwZWFjaHB1ZmYiLCJwZXJ1IiwicGluayIsInBsdW0iLCJwb3dkZXJibHVlIiwicHVycGxlIiwicmViZWNjYXB1cnBsZSIsInJlZCIsInJvc3licm93biIsInJveWFsYmx1ZSIsInNhZGRsZWJyb3duIiwic2FsbW9uIiwic2FuZHlicm93biIsInNlYWdyZWVuIiwic2Vhc2hlbGwiLCJzaWVubmEiLCJzaWx2ZXIiLCJza3libHVlIiwic2xhdGVibHVlIiwic2xhdGVncmF5Iiwic2xhdGVncmV5Iiwic25vdyIsInNwcmluZ2dyZWVuIiwic3RlZWxibHVlIiwidGVhbCIsInRoaXN0bGUiLCJ0b21hdG8iLCJ0dXJxdW9pc2UiLCJ2aW9sZXQiLCJ3aGVhdCIsIndoaXRlIiwid2hpdGVzbW9rZSIsInllbGxvdyIsInllbGxvd2dyZWVuIiwiY29sb3JfY29sb3IiLCJ0b0xvd2VyQ2FzZSIsIlJnYiIsInBhcnNlSW50IiwicmdibiIsInJnYmEiLCJoc2xhIiwiZyIsInJnYkNvbnZlcnQiLCJyZ2IiLCJvcGFjaXR5IiwiY29sb3JfcmdiIiwiaGV4IiwiSHNsIiwiaHNsIiwiaHNsQ29udmVydCIsImhzbDJyZ2IiLCJtMSIsIm0yIiwiZGlzcGxheWFibGUiLCJicmlnaHRlciIsImRhcmtlciIsImRlZzJyYWQiLCJyYWQyZGVnIiwiWG4iLCJZbiIsIlpuIiwibGFiX3QwIiwibGFiX3QxIiwibGFiX3QyIiwidDMiLCJsYWJDb252ZXJ0IiwiTGFiIiwiSGNsIiwieiIsInJnYjJscmdiIiwieHl6MmxhYiIsImxhYiIsImxhYjJ4eXoiLCJscmdiMnJnYiIsImhjbENvbnZlcnQiLCJhdGFuMiIsImhjbCIsIkEiLCJFRCIsIkVCIiwiQkNfREEiLCJjdWJlaGVsaXhfY3ViZWhlbGl4IiwiQ3ViZWhlbGl4IiwiYmwiLCJjdWJlaGVsaXhDb252ZXJ0IiwiYmFzaXMiLCJ0MSIsInYwIiwidjEiLCJ2MiIsInYzIiwidDIiLCJjb3NoIiwic2luaCIsInNyY19jb25zdGFudCIsImxpbmVhciIsImNvbG9yX2h1ZSIsImdhbW1hIiwibm9nYW1tYSIsImV4cG9uZW50aWFsIiwic3JjX3JnYiIsInJnYkdhbW1hIiwiY29sb3IiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJjb2xvcnMiLCJzcmNfbnVtYmVyIiwicmVBIiwicmVCIiwiY3NzTm9kZSIsImNzc1Jvb3QiLCJjc3NWaWV3Iiwic3ZnTm9kZSIsInNyY19zdHJpbmciLCJhbSIsImJtIiwiYnMiLCJiaSIsIm9uZSIsInN0cmluZ196ZXJvIiwic3JjX3ZhbHVlIiwic2V0VGltZSIsIm5iIiwibmEiLCJzcmNfcm91bmQiLCJkZWdyZWVzIiwiZGVjb21wb3NlX2lkZW50aXR5IiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJyb3RhdGUiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImRlY29tcG9zZSIsImF0YW4iLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwidHJhbnNsYXRlIiwic2NhbGUiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsImRlZmF1bHRWaWV3IiwiZ2V0UHJvcGVydHlWYWx1ZSIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwiU1FSVDIiLCJoc2xfaHNsIiwiaHVlIiwiaGNsX2hjbCIsInNyY19jdWJlaGVsaXhfY3ViZWhlbGl4IiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgiLCJkM19zY2FsZV9zcmNfY29uc3RhbnQiLCJkM19zY2FsZV9zcmNfbnVtYmVyIiwidW5pdCIsImNvbnRpbnVvdXNfaWRlbnRpdHkiLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJpbnRlcnBvbGF0ZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsImNvcHkiLCJjbGFtcCIsInVua25vd24iLCJ0cmFuc2Zvcm1lciIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlIiwib3V0cHV0IiwicmVzY2FsZSIsImludmVydCIsInJhbmdlUm91bmQiLCJ1IiwiY29udGludW91cyIsImZvcm1hdERlY2ltYWwiLCJ0b0V4cG9uZW50aWFsIiwiY29lZmZpY2llbnQiLCJzcmNfZXhwb25lbnQiLCJmb3JtYXRTcGVjaWZpZXIiLCJzcGVjaWZpZXIiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzaWduIiwic3ltYm9sIiwiemVybyIsImNvbW1hIiwicHJlY2lzaW9uIiwicHJlZml4RXhwb25lbnQiLCJkZWZhdWx0TG9jYWxlX2xvY2FsZSIsImRlZmF1bHRMb2NhbGVfZm9ybWF0IiwiZGVmYXVsdExvY2FsZV9mb3JtYXRQcmVmaXgiLCJmb3JtYXRUcmltIiwiaTEiLCJpMCIsImZvcm1hdFJvdW5kZWQiLCJleHBvbmVudCIsImZvcm1hdFR5cGVzIiwiJSIsInRvUHJlY2lzaW9uIiwiWCIsInRvVXBwZXJDYXNlIiwic3JjX2lkZW50aXR5IiwicHJlZml4ZXMiLCJsb2NhbGUiLCJncm91cGluZyIsInRob3VzYW5kcyIsImN1cnJlbmN5IiwiZGVjaW1hbCIsIm51bWVyYWxzIiwiZm9ybWF0TnVtZXJhbHMiLCJwZXJjZW50IiwibmV3Rm9ybWF0IiwicHJlZml4Iiwic3VmZml4IiwiZm9ybWF0VHlwZSIsIm1heWJlU3VmZml4IiwidmFsdWVQcmVmaXgiLCJ2YWx1ZVN1ZmZpeCIsInZhbHVlTmVnYXRpdmUiLCJJbmZpbml0eSIsImZvcm1hdFByZWZpeCIsInNyY19sb2NhbGUiLCJzcmNfdGlja0Zvcm1hdCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrRm9ybWF0IiwibmljZSIsImxpbmVhcl9saW5lYXIiLCJpbnRlcnZhbF90MCIsImludGVydmFsX3QxIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJkYXRlIiwicHJldmlvdXMiLCJldmVyeSIsIm1pbGxpc2Vjb25kX21pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJzZWNvbmRfc2Vjb25kIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbnV0ZV9taW51dGUiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsImhvdXJfaG91ciIsImdldEhvdXJzIiwiZGF5X2RheSIsInNldEhvdXJzIiwic2V0RGF0ZSIsImdldERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsInNyY19kYXkiLCJ3ZWVrZGF5IiwiZ2V0RGF5Iiwic3VuZGF5IiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiLCJtb250aF9tb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInllYXJfeWVhciIsInNldEZ1bGxZZWFyIiwic3JjX3llYXIiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic3JjX3V0Y0RheSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y1llYXIiLCJsb2NhbERhdGUiLCJIIiwiTSIsIkwiLCJ1dGNEYXRlIiwiVVRDIiwibmV3WWVhciIsInNyY19kZWZhdWx0TG9jYWxlX2xvY2FsZSIsInV0Y0Zvcm1hdCIsInV0Y1BhcnNlIiwicGFkcyIsIi0iLCIwIiwibnVtYmVyUmUiLCJwZXJjZW50UmUiLCJyZXF1b3RlUmUiLCJwYWQiLCJyZXF1b3RlIiwiZm9ybWF0UmUiLCJmb3JtYXRMb29rdXAiLCJwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkiLCJwYXJzZVdlZWtOdW1iZXJTdW5kYXkiLCJwYXJzZVdlZWtOdW1iZXJJU08iLCJWIiwicGFyc2VXZWVrTnVtYmVyTW9uZGF5IiwicGFyc2VGdWxsWWVhciIsInBhcnNlWWVhciIsInBhcnNlWm9uZSIsIloiLCJwYXJzZU1vbnRoTnVtYmVyIiwicGFyc2VEYXlPZk1vbnRoIiwicGFyc2VEYXlPZlllYXIiLCJwYXJzZUhvdXIyNCIsInBhcnNlTWludXRlcyIsInBhcnNlU2Vjb25kcyIsInBhcnNlTWlsbGlzZWNvbmRzIiwicGFyc2VNaWNyb3NlY29uZHMiLCJwYXJzZUxpdGVyYWxQZXJjZW50IiwicGFyc2VVbml4VGltZXN0YW1wIiwiUSIsInBhcnNlVW5peFRpbWVzdGFtcFNlY29uZHMiLCJmb3JtYXREYXlPZk1vbnRoIiwiZm9ybWF0SG91cjI0IiwiZm9ybWF0SG91cjEyIiwiZm9ybWF0RGF5T2ZZZWFyIiwiZm9ybWF0TWlsbGlzZWNvbmRzIiwiZm9ybWF0TWljcm9zZWNvbmRzIiwiZm9ybWF0TW9udGhOdW1iZXIiLCJmb3JtYXRNaW51dGVzIiwiZm9ybWF0U2Vjb25kcyIsImZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXkiLCJkYXkiLCJmb3JtYXRXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0V2Vla051bWJlcklTTyIsImZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVyTW9uZGF5IiwibG9jYWxlX2Zvcm1hdFllYXIiLCJmb3JtYXRGdWxsWWVhciIsImZvcm1hdFpvbmUiLCJmb3JtYXRVVENEYXlPZk1vbnRoIiwiZm9ybWF0VVRDSG91cjI0IiwiZm9ybWF0VVRDSG91cjEyIiwiZm9ybWF0VVRDRGF5T2ZZZWFyIiwiZm9ybWF0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZm9ybWF0VVRDTWljcm9zZWNvbmRzIiwiZm9ybWF0VVRDTW9udGhOdW1iZXIiLCJmb3JtYXRVVENNaW51dGVzIiwiZm9ybWF0VVRDU2Vjb25kcyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkiLCJkb3ciLCJmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5IiwiZm9ybWF0VVRDV2Vla051bWJlcklTTyIsImZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5IiwiZm9ybWF0VVRDWWVhciIsImZvcm1hdFVUQ0Z1bGxZZWFyIiwiZm9ybWF0VVRDWm9uZSIsImZvcm1hdExpdGVyYWxQZXJjZW50IiwiZm9ybWF0VW5peFRpbWVzdGFtcCIsImZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzIiwibG9jYWxlX2RhdGVUaW1lIiwiZGF0ZVRpbWUiLCJsb2NhbGVfZGF0ZSIsImxvY2FsZV90aW1lIiwidGltZSIsImxvY2FsZV9wZXJpb2RzIiwicGVyaW9kcyIsImxvY2FsZV93ZWVrZGF5cyIsImRheXMiLCJsb2NhbGVfc2hvcnRXZWVrZGF5cyIsInNob3J0RGF5cyIsImxvY2FsZV9tb250aHMiLCJtb250aHMiLCJsb2NhbGVfc2hvcnRNb250aHMiLCJzaG9ydE1vbnRocyIsInBlcmlvZFJlIiwicGVyaW9kTG9va3VwIiwid2Vla2RheVJlIiwid2Vla2RheUxvb2t1cCIsInNob3J0V2Vla2RheVJlIiwic2hvcnRXZWVrZGF5TG9va3VwIiwibW9udGhSZSIsIm1vbnRoTG9va3VwIiwic2hvcnRNb250aFJlIiwic2hvcnRNb250aExvb2t1cCIsImZvcm1hdHMiLCJJIiwiWSIsInV0Y0Zvcm1hdHMiLCJwYXJzZXMiLCJwYXJzZVNwZWNpZmllciIsIm5ld1BhcnNlIiwibmV3RGF0ZSIsIndlZWsiLCJmb3JtYXRMb2NhbGUiLCJkZWZhdWx0TG9jYWxlX2RlZmF1bHRMb2NhbGUiLCJ0b0lTT1N0cmluZyIsInhodG1sIiwibmFtZXNwYWNlcyIsInN2ZyIsInhsaW5rIiwieG1sIiwieG1sbnMiLCJsb2NhbCIsImNyZWF0b3IiLCJmdWxsbmFtZSIsInVyaSIsIm5hbWVzcGFjZVVSSSIsIm5vbmUiLCJzcmNfc2VsZWN0b3IiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJzZWxlY3RvckFsbF9lbXB0eSIsInNlbGVjdG9yQWxsIiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXIiLCJtYXRjaGVzIiwic3BhcnNlIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwiZGF0dW0iLCJfbmV4dCIsIl9wYXJlbnQiLCJfX2RhdGFfXyIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwia2V5UHJlZml4IiwiYmluZEluZGV4IiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJrZXlWYWx1ZXMiLCJzb3J0X2FzY2VuZGluZyIsInNyY193aW5kb3ciLCJzdHlsZVZhbHVlIiwiY2xhc3NBcnJheSIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsImxpc3QiLCJjbGFzc2VkUmVtb3ZlIiwic3BsaWNlIiwidGV4dFJlbW92ZSIsInRleHRDb250ZW50IiwiaHRtbFJlbW92ZSIsInJhaXNlIiwibmV4dFNpYmxpbmciLCJwYXJlbnROb2RlIiwibG93ZXIiLCJwcmV2aW91c1NpYmxpbmciLCJjb25zdGFudE51bGwiLCJyZW1vdmVfcmVtb3ZlIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lTm9kZSIsInNlbGVjdGlvbl9jbG9uZURlZXAiLCJmaWx0ZXJFdmVudHMiLCJvbl9ldmVudCIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwiZmlsdGVyQ29udGV4dExpc3RlbmVyIiwiY29udGV4dExpc3RlbmVyIiwicmVsYXRlZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiZXZlbnQxIiwiZXZlbnQwIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIl9fb24iLCJvbkFkZCIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJyb290IiwiU2VsZWN0aW9uIiwicGFyZW50cyIsIl9ncm91cHMiLCJfcGFyZW50cyIsInNlbGVjdGlvbl9zZWxlY3Rpb24iLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJlYWNoIiwiZW50ZXJHcm91cCIsInVwZGF0ZUdyb3VwIiwiX2VudGVyIiwiX2V4aXQiLCJvbmVudGVyIiwib251cGRhdGUiLCJvbmV4aXQiLCJhcHBlbmQiLCJtZXJnZSIsIm9yZGVyIiwic2VsZWN0aW9uIiwiZ3JvdXBzMCIsImdyb3VwczEiLCJtMCIsIm1lcmdlcyIsImdyb3VwMCIsImdyb3VwMSIsImNvbXBhcmVOb2RlIiwic29ydGdyb3VwcyIsInNvcnRncm91cCIsIm5vZGVzIiwiYXR0ciIsImdldEF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInByaW9yaXR5IiwicmVtb3ZlUHJvcGVydHkiLCJzZXRQcm9wZXJ0eSIsImNsYXNzZWQiLCJpbnNlcnQiLCJiZWZvcmUiLCJjbG9uZSIsImRlZXAiLCJ0eXBlbmFtZXMiLCJwYXJzZVR5cGVuYW1lcyIsImRpc3BhdGNoIiwic3JjX3NlbGVjdGlvbiIsInNyY19zZWxlY3QiLCJuZXh0SWQiLCJMb2NhbCIsIm5vb3AiLCJkaXNwYXRjaF9kaXNwYXRjaCIsInR5cGVzIiwidGFza0hlYWQiLCJ0YXNrVGFpbCIsInNyY19kaXNwYXRjaCIsInRpbWVyX2ZyYW1lIiwidGltZW91dCIsInRpbWVyX2ludGVydmFsIiwicG9rZURlbGF5IiwiY2xvY2tMYXN0IiwiY2xvY2tOb3ciLCJjbG9ja1NrZXciLCJjbG9jayIsInBlcmZvcm1hbmNlIiwic2V0RnJhbWUiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJyZXN0YXJ0Iiwid2FrZSIsInRpbWVyRmx1c2giLCJ0MCIsInNsZWVwIiwibmFwIiwicG9rZSIsImNsZWFyVGltZW91dCIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInNyY190aW1lb3V0IiwiZWxhcHNlZCIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiQ1JFQVRFRCIsIlNDSEVEVUxFRCIsIlNUQVJUSU5HIiwiU1RBUlRFRCIsIlJVTk5JTkciLCJFTkRJTkciLCJFTkRFRCIsInRyYW5zaXRpb25fc2NoZWR1bGUiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJ0d2VlbiIsInRpY2siLCJlYXNlIiwic2NoZWR1bGVfY3JlYXRlIiwic2NoZWR1bGVfaW5pdCIsInNjaGVkdWxlIiwic2NoZWR1bGVfZ2V0Iiwic2NoZWR1bGVfc2V0IiwidHdlZW5WYWx1ZSIsInRyYW5zaXRpb24iLCJfaWQiLCJ0cmFuc2l0aW9uX2ludGVycG9sYXRlIiwic2VsZWN0aW9uX1NlbGVjdGlvbiIsInN0eWxlX3N0eWxlUmVtb3ZlIiwidHJhbnNpdGlvbl9pZCIsIlRyYW5zaXRpb24iLCJfbmFtZSIsIm5ld0lkIiwic2VsZWN0aW9uX3Byb3RvdHlwZSIsImluaGVyaXQiLCJpZDAiLCJpZDEiLCJvbjAiLCJvbjEiLCJzaXQiLCJvbl9zdGFydCIsIm9uRnVuY3Rpb24iLCJhdHRyVHdlZW4iLCJzdHJpbmcwMCIsInN0cmluZzEwIiwiaW50ZXJwb2xhdGUwIiwic3RyaW5nMCIsInN0cmluZzEiLCJ2YWx1ZTEiLCJfdmFsdWUiLCJhdHRySW50ZXJwb2xhdGVOUyIsImF0dHJJbnRlcnBvbGF0ZSIsInN0eWxlVHdlZW4iLCJzdHlsZU51bGwiLCJzdHlsZV9zdHlsZUZ1bmN0aW9uIiwibGlzdGVuZXIwIiwic3R5bGVNYXliZVJlbW92ZSIsInN0eWxlX3N0eWxlQ29uc3RhbnQiLCJzdHlsZUludGVycG9sYXRlIiwidGV4dF90ZXh0RnVuY3Rpb24iLCJ0ZXh0X3RleHRDb25zdGFudCIsInR3ZWVuMCIsInR3ZWVuMSIsImVhc2VDb25zdGFudCIsImNhbmNlbCIsImludGVycnVwdCIsImN1c3RvbSIsInBvbHlJbiIsInBvbHlPdXQiLCJwb2x5SW5PdXQiLCJiYWNrSW4iLCJvdmVyc2hvb3QiLCJiYWNrT3V0IiwiYmFja0luT3V0IiwiZWxhc3RpY190YXUiLCJkZWZhdWx0VGltaW5nIiwiYXNpbiIsImVsYXN0aWNJbiIsImFtcGxpdHVkZSIsInBlcmlvZCIsImVsYXN0aWNPdXQiLCJlbGFzdGljSW5PdXQiLCJ0cmFuc2l0aW9uX2luaGVyaXQiLCJ0b29sdGlwRWwiLCJzaG93IiwiY29udGVudCIsInlQb3MiLCJ4UG9zIiwiY2xpZW50V2lkdGgiLCJmb3JtYXRDb250ZW50IiwiY29tcG9uZW50IiwiaXNMaXN0IiwiaXRlbSIsImNzc0NsYXNzIiwiY2xhc3MiLCJsYWJlbCIsImNoYXJ0IiwiYm90dG9tIiwiZGVmYXVsdENvb3JkcyIsIm9yYml0IiwiZWFydGgiLCJDaGluYSIsIlJ1c3NpYSIsIlVTIiwiT3RoZXIiLCJzY2FsZUxpbmVhciIsInVwZGF0ZURvbSIsIl9yZWYzIiwiY29udGFpbmVyIiwiZWFydGhSYWRpdXMiLCJfcmVmNCIsImN4IiwiY3kiLCJyeSIsIm9yYml0UmFkaXVzWCIsIm9yYml0UmFkaXVzWSIsInBsb3QiLCJzYXRlbGxpdGVzIiwic2F0X25hbWUiLCJjb3VudHJ5IiwiY29sIiwiYW10IiwidXNlUG91bmQiLCJudW0iLCJMaWdodGVuRGFya2VuQ29sb3IiLCJ4X2Nvb3JkIiwieV9jb29yZCIsImludGVyYWN0aW9ucyIsIm1vdXNlb3ZlciIsIl9yZWYiLCJnRW50ZXIiLCJfcmVmMiIsInVwZGF0ZVNjYWxlcyIsInNob3dUb29sdGlwIiwidG9vbHRpcEJvZHkiLCJPcGVyYXRvciIsInNhdF9vcGVyYXRvciIsInRpbWVzdGFtcCIsIkxvbmdpdHVkZSIsImxvbmdfc3RyaW5nIiwidG9vbHRpcENvbnRlbnQiLCJkcmF3Q2hhcnQiLCJqc19jaGFydCIsImluaXQiLCJzeiIsIm9mZnNldFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJ0aW1lbGluZSIsImJ0bkNvbnRyb2xzIiwiY3VycmVudERhdGVFbCIsImN1cnJlbnRMYXVuY2hlc0VsIiwicGxheWluZyIsInRyYW5zaXRpb25EdXJhdGlvbiIsImVuZERhdGUiLCJzdGFydERhdGUiLCJ1cGRhdGVDdXJyZW50RGF0ZSIsImdldEN1cnJlbnREYXRlIiwic2V0dXBUaW1lbGluZSIsIm9uQ2hhbmdlIiwiY3VycmVudERhdGUiLCJzZXR1cEJ0bkNvbnRyb2xzIiwic3RvcFRpbWVsaW5lIiwiRU9MIiwiRU9GIiwiUVVPVEUiLCJORVdMSU5FIiwib2JqZWN0Q29udmVydGVyIiwiY29sdW1ucyIsImluZmVyQ29sdW1ucyIsInJvd3MiLCJjb2x1bW5TZXQiLCJyb3ciLCJjb2x1bW4iLCJkc3ZfcGFkIiwiZm9ybWF0RGF0ZSIsInllYXIiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZHN2IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJwYXJzZVJvd3MiLCJOIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImNzdiIsImNzdlBhcnNlIiwidHN2IiwidHN2UGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJzcmNfdGV4dCIsImZldGNoIiwiZHN2UGFyc2UiLCJkc3ZfY3N2IiwicGFyc2VyIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwia25vd25Db3VudHJpZXMiLCJfY2FsbGVlIiwic2F0ZWxsaXRlVVJMIiwidGFyZ2V0c1VSTCIsInNhdGVsbGl0ZVByb21pc2UiLCJ0YXJnZXRzUHJvbWlzZSIsIl9jb250ZXh0IiwiZDNGZXRjaCIsIl9yZXMiLCJfc2xpY2VkVG9BcnJheSIsInNhdGVsbGl0ZURhdGEiLCJ0YXJnZXRzRGF0YSIsImlzX3NhdGVsbGl0ZSIsImlzX3RhcmdldCIsImNvbWJpbmVkRGF0YSIsIl90b0NvbnN1bWFibGVBcnJheSIsImluY2x1ZGUiLCJsb25naXR1ZGUiLCJ0aW1lc3RhbXBzIiwiU2V0IiwiZGF0YXNldCIsIk1hcCIsInNhdGVsbGl0ZSIsInBhcnNlRGF0YSIsInNhdGVsbGl0ZUZpbGUiLCJ0YXJnZXRzRmlsZSIsImRhdGVzIiwiaGlkZUxvYWRpbmciLCJDaGFydCIsImxvYWREYXRhIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFT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LFFBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxNQUFBLFNBQ0FDLGVBQUEsUUFDQUMsU0FBQSxTQUNBQyxRQUFBLFNBQ0FDLEtBQUEsTUFDQUMsU0FBQSxJQUNBQyxTQUFBLE1BQ0FDLGNBQUEsU0FDQUMsU0FBQSxTQUNBQyxVQUFBLE1BQ0FDLFNBQUEsU0FDQUMsVUFBQSxTQUNBQyxZQUFBLFFBQ0FDLGVBQUEsUUFDQUMsV0FBQSxTQUNBQyxXQUFBLFNBQ0FDLFFBQUEsUUFDQUMsV0FBQSxTQUNBQyxhQUFBLFFBQ0FDLGNBQUEsUUFDQUMsY0FBQSxRQUNBQyxjQUFBLFFBQ0FDLGNBQUEsTUFDQUMsV0FBQSxRQUNBQyxTQUFBLFNBQ0FDLFlBQUEsTUFDQUMsUUFBQSxRQUNBQyxRQUFBLFFBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxZQUFBLFNBQ0FDLFlBQUEsUUFDQUMsUUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsU0FDQUMsS0FBQSxTQUNBQyxVQUFBLFNBQ0FDLEtBQUEsUUFDQUMsTUFBQSxNQUNBQyxZQUFBLFNBQ0FDLEtBQUEsUUFDQUMsU0FBQSxTQUNBQyxRQUFBLFNBQ0FDLFVBQUEsU0FDQUMsT0FBQSxRQUNBQyxNQUFBLFNBQ0FDLE1BQUEsU0FDQUMsU0FBQSxTQUNBQyxjQUFBLFNBQ0FDLFVBQUEsUUFDQUMsYUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsU0FDQUMsVUFBQSxTQUNBQyxxQkFBQSxTQUNBQyxVQUFBLFNBQ0FDLFdBQUEsUUFDQUMsVUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFlBQUEsU0FDQUMsY0FBQSxRQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZUFBQSxRQUNBQyxlQUFBLFNBQ0FDLFlBQUEsU0FDQUMsS0FBQSxNQUNBQyxVQUFBLFFBQ0FDLE1BQUEsU0FDQUMsUUFBQSxTQUNBQyxPQUFBLFFBQ0FDLGlCQUFBLFFBQ0FDLFdBQUEsSUFDQUMsYUFBQSxTQUNBQyxhQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZ0JBQUEsUUFDQUMsa0JBQUEsTUFDQUMsZ0JBQUEsUUFD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LG1CQUFxQkEsR0FFOUJMLEdBQVNVLGNBQWMsQ0FDckJILFVBQVdBLEdBQ1hELFFBQVNBLEdBQ1Q5cUMsUUFBU29yQyxHQUNUUCxtQkFBb0JBLEdBQ3BCTSxTQUFVLFdBQ1JqQixLQUNBTSxHQUFTUSxrQkFBa0JJLElBQ3ZCQSxJQUFlTixJQUNqQk4sR0FBU2Msa0JBZWpCLFNBQVM0RSxLQUNQNTVELFNBQVNtaEQsY0FBYyxzQkFBc0JsL0MsTUFBTUMsUUFBVSxPQUM3RGxDLFNBQ0dzaEQsaUJBQWlCLGlCQUNqQnY5QyxRQUFRLFNBQUF1QyxHQUFFLE9BQUlBLEVBQUdxVSxVQUFVRSxPQUFPLGtCQUd2Q3prQixPQUFPc2QsaUJBQWlCLG1CQTlEeEIsZ0RBQ0VvbUQiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjIpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcbi8vIEVTMyB3cm9uZyBoZXJlXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcblxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICB0cnkge1xuICAgIHJldHVybiBpdFtrZXldO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCBULCBCO1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcbiAgICA6IHR5cGVvZiAoVCA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVEFHKSkgPT0gJ3N0cmluZycgPyBUXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBBUkcgPyBjb2YoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciB0ZXN0ID0ge307XG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xuICB9LCB0cnVlKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtY2FsbFxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcbiAgfSk7XG59O1xuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbnZhciBET01JdGVyYWJsZXMgPSB7XG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgQ1NTU3R5bGVEZWNsYXJhdGlvbjogZmFsc2UsXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NUmVjdExpc3Q6IGZhbHNlLFxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogZmFsc2UsXG4gIEZpbGVMaXN0OiBmYWxzZSxcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MQ29sbGVjdGlvbjogZmFsc2UsXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcbiAgTWVkaWFMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXG4gIE5vZGVMaXN0OiB0cnVlLFxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcbiAgUGx1Z2luOiBmYWxzZSxcbiAgUGx1Z2luQXJyYXk6IGZhbHNlLFxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXG4gIFNWR1BhdGhTZWdMaXN0OiBmYWxzZSxcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IGZhbHNlLFxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxuICBUZXh0VHJhY2tDdWVMaXN0OiBmYWxzZSxcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXG4gIFRvdWNoTGlzdDogZmFsc2Vcbn07XG5cbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XG4gIHZhciBOQU1FID0gY29sbGVjdGlvbnNbaV07XG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XG4gIHZhciBwcm90byA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIHZhciBrZXk7XG4gIGlmIChwcm90bykge1xuICAgIGlmICghcHJvdG9bSVRFUkFUT1JdKSBoaWRlKHByb3RvLCBJVEVSQVRPUiwgQXJyYXlWYWx1ZXMpO1xuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xuICAgIGlmIChleHBsaWNpdCkgZm9yIChrZXkgaW4gJGl0ZXJhdG9ycykgaWYgKCFwcm90b1trZXldKSByZWRlZmluZShwcm90bywga2V5LCAkaXRlcmF0b3JzW2tleV0sIHRydWUpO1xuICB9XG59XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBTKSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XG4gIHZhciBmbiwgdmFsO1xuICBpZiAoUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcbiAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY29udmVydCBvYmplY3QgdG8gcHJpbWl0aXZlIHZhbHVlXCIpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1kgPSAhKFtdLmtleXMgJiYgJ25leHQnIGluIFtdLmtleXMoKSk7IC8vIFNhZmFyaSBoYXMgYnVnZ3kgaXRlcmF0b3JzIHcvbyBgbmV4dGBcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG4gIHZhciBnZXRNZXRob2QgPSBmdW5jdGlvbiAoa2luZCkge1xuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSBLRVlTOiByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gIH07XG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XG4gIHZhciBWQUxVRVNfQlVHID0gZmFsc2U7XG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcbiAgdmFyICRkZWZhdWx0ID0gJG5hdGl2ZSB8fCBnZXRNZXRob2QoREVGQVVMVCk7XG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcbiAgdmFyIG1ldGhvZHMsIGtleSwgSXRlcmF0b3JQcm90b3R5cGU7XG4gIC8vIEZpeCBuYXRpdmVcbiAgaWYgKCRhbnlOYXRpdmUpIHtcbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKCRhbnlOYXRpdmUuY2FsbChuZXcgQmFzZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yUHJvdG90eXBlLCBUQUcsIHRydWUpO1xuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgfVxuICB9XG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRl9WQUxVRVMgJiYgJG5hdGl2ZSAmJiAkbmF0aXZlLm5hbWUgIT09IFZBTFVFUykge1xuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xuICB9XG4gIC8vIERlZmluZSBpdGVyYXRvclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcbiAgICBoaWRlKHByb3RvLCBJVEVSQVRPUiwgJGRlZmF1bHQpO1xuICB9XG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcbiAgSXRlcmF0b3JzW05BTUVdID0gJGRlZmF1bHQ7XG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcbiAgaWYgKERFRkFVTFQpIHtcbiAgICBtZXRob2RzID0ge1xuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogJGVudHJpZXNcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm90bykpIHJlZGVmaW5lKHByb3RvLCBrZXksIG1ldGhvZHNba2V5XSk7XG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcbiAgfVxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGRQcyA9IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcbnZhciBFbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcblxuLy8gQ3JlYXRlIG9iamVjdCB3aXRoIGZha2UgYG51bGxgIHByb3RvdHlwZTogdXNlIGlmcmFtZSBPYmplY3Qgd2l0aCBjbGVhcmVkIHByb3RvdHlwZVxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXG4gIHZhciBpZnJhbWUgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJykoJ2lmcmFtZScpO1xuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgdmFyIGx0ID0gJzwnO1xuICB2YXIgZ3QgPSAnPic7XG4gIHZhciBpZnJhbWVEb2N1bWVudDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIHJlcXVpcmUoJy4vX2h0bWwnKS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XG4gIC8vIGh0bWwucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xuICBpZnJhbWVEb2N1bWVudC53cml0ZShsdCArICdzY3JpcHQnICsgZ3QgKyAnZG9jdW1lbnQuRj1PYmplY3QnICsgbHQgKyAnL3NjcmlwdCcgKyBndCk7XG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xuICB3aGlsZSAoaS0tKSBkZWxldGUgY3JlYXRlRGljdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2ldXTtcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xuICB2YXIgcmVzdWx0O1xuICBpZiAoTyAhPT0gbnVsbCkge1xuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gbnVsbDtcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XG4gIH0gZWxzZSByZXN1bHQgPSBjcmVhdGVEaWN0KCk7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcbn07XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xufTtcbiIsIi8vIElFIDgtIGRvbid0IGVudW0gYnVnIGtleXNcbm1vZHVsZS5leHBvcnRzID0gKFxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xuKS5zcGxpdCgnLCcpO1xuIiwidmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xuICB2YXIgc2FmZSA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBbN107XG4gICAgdmFyIGl0ZXIgPSBhcnJbSVRFUkFUT1JdKCk7XG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xuICAgIGV4ZWMoYXJyKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBzYWZlO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSwgZm9yYmlkZGVuRmllbGQpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBCUkVBSyA9IHt9O1xudmFyIFJFVFVSTiA9IHt9O1xudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcbiAgdmFyIGYgPSBjdHgoZm4sIHRoYXQsIGVudHJpZXMgPyAyIDogMSk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XG4gIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdGVyYWJsZSArICcgaXMgbm90IGl0ZXJhYmxlIScpO1xuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICByZXN1bHQgPSBlbnRyaWVzID8gZihhbk9iamVjdChzdGVwID0gaXRlcmFibGVbaW5kZXhdKVswXSwgc3RlcFsxXSkgOiBmKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XG4gICAgcmVzdWx0ID0gY2FsbChpdGVyYXRvciwgZiwgc3RlcC52YWx1ZSwgZW50cmllcyk7XG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XG4gIH1cbn07XG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFTVFJJQ1QsICdBcnJheScsIHtcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZvckVhY2godGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCIvLyAwIC0+IEFycmF5I2ZvckVhY2hcbi8vIDEgLT4gQXJyYXkjbWFwXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxuLy8gMyAtPiBBcnJheSNzb21lXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XG4vLyA1IC0+IEFycmF5I2ZpbmRcbi8vIDYgLT4gQXJyYXkjZmluZEluZGV4XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRZUEUsICRjcmVhdGUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYO1xuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKHNlbGYubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWwsIHJlcztcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzID0gZih2YWwsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlcykgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xuICB9O1xufTtcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gaXNBcnJheShhcmcpIHtcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG4gICAgdmFyIGkgPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xuICAgIHZhciBhLCBiO1xuICAgIGlmIChpIDwgMCB8fCBpID49IGwpIHJldHVybiBUT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDtcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXG4gICAgICA/IFRPX1NUUklORyA/IHMuY2hhckF0KGkpIDogYVxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjIuMSBBcnJheS5mcm9tKGFycmF5TGlrZSwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xuICAgIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIShDID09IEFycmF5ICYmIGlzQXJyYXlJdGVyKGl0ZXJGbikpKSB7XG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICAgIGZvciAocmVzdWx0ID0gbmV3IEMobGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59KTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpXG4gICAgKTtcblxuICAgIHJldHVybiBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24ob3V0ZXJGbilcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC5kb25lID8gcmVzdWx0LnZhbHVlIDogaXRlci5uZXh0KCk7XG4gICAgICAgIH0pO1xuICB9O1xuXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVDb21wbGV0ZWQpIHtcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgdGhyb3cgYXJnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcbiAgICAgICAgLy8gaHR0cHM6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLWdlbmVyYXRvcnJlc3VtZVxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xuXG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUpIHtcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcbiAgICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCA9PT0gQ29udGludWVTZW50aW5lbCkgY29udGludWU7XG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAgIC8vIFNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xuICAgICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xuXG4gICAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxuICAgICAgICAgIC8vIEdlblN0YXRlRXhlY3V0aW5nIGFuZCBsb29wIGJhY2sgZm9yIGFub3RoZXIgaW52b2NhdGlvbi5cbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxuICAgICAgICAgICAgOiBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkO1xuXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxuICAgICAgICAgIH07XG5cbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUNvbXBsZXRlZDtcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcbiAgLy8gZGVsZWdhdGUgaXRlcmF0b3IsIG9yIGJ5IG1vZGlmeWluZyBjb250ZXh0Lm1ldGhvZCBhbmQgY29udGV4dC5hcmcsXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XG4gICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kIGFsd2F5cyB0ZXJtaW5hdGVzIHRoZSB5aWVsZCogbG9vcC5cbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAvLyBOb3RlOiBbXCJyZXR1cm5cIl0gbXVzdCBiZSB1c2VkIGZvciBFUzMgcGFyc2luZyBjb21wYXRpYmlsaXR5LlxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcblxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxuICAgICAgICAgICAgLy8gXCJyZXR1cm5cIiB0byBcInRocm93XCIsIGxldCB0aGF0IG92ZXJyaWRlIHRoZSBUeXBlRXJyb3IgYmVsb3cuXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcblxuICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xuXG4gICAgaWYgKCEgaW5mbykge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuXG4gICAgaWYgKGluZm8uZG9uZSkge1xuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcbiAgICAgIC8vIHZhcmlhYmxlIHNwZWNpZmllZCBieSBkZWxlZ2F0ZS5yZXN1bHROYW1lIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgLy8gUmVzdW1lIGV4ZWN1dGlvbiBhdCB0aGUgZGVzaXJlZCBsb2NhdGlvbiAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcblxuICAgICAgLy8gSWYgY29udGV4dC5tZXRob2Qgd2FzIFwidGhyb3dcIiBidXQgdGhlIGRlbGVnYXRlIGhhbmRsZWQgdGhlXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxuICAgICAgLy8gXCJjb25zdW1lZFwiIGJ5IHRoZSBkZWxlZ2F0ZSBpdGVyYXRvci4gSWYgY29udGV4dC5tZXRob2Qgd2FzXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kICE9PSBcInJldHVyblwiKSB7XG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJlLXlpZWxkIHRoZSByZXN1bHQgcmV0dXJuZWQgYnkgdGhlIGRlbGVnYXRlIG1ldGhvZC5cbiAgICAgIHJldHVybiBpbmZvO1xuICAgIH1cblxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cbiAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgfVxuXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEdwKTtcblxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xuXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXG4gIC8vIGl0ZXJhdG9yIHByb3RvdHlwZSBjaGFpbiBpbmNvcnJlY3RseSBpbXBsZW1lbnQgdGhpcywgY2F1c2luZyB0aGUgR2VuZXJhdG9yXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgR3BbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcbiAgfTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgfVxuICAgIGtleXMucmV2ZXJzZSgpO1xuXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxuICAgIHJldHVybiBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xuICAgICAgICBpZiAoa2V5IGluIG9iamVjdCkge1xuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xuICAgICAgLy8gYWxzbyBlbnN1cmVzIHRoYXQgdGhlIG1pbmlmaWVyIHdpbGwgbm90IGFub255bWl6ZSB0aGUgZnVuY3Rpb24uXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcbiAgICAgIGlmIChpdGVyYXRvck1ldGhvZCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XG4gICAgICAgIHZhciBpID0gLTEsIG5leHQgPSBmdW5jdGlvbiBuZXh0KCkge1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcbiAgICAgICAgICAgICAgbmV4dC52YWx1ZSA9IGl0ZXJhYmxlW2ldO1xuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dC52YWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xuXG4gICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIG5leHQubmV4dCA9IG5leHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcbiAgfVxuICBleHBvcnRzLnZhbHVlcyA9IHZhbHVlcztcblxuICBmdW5jdGlvbiBkb25lUmVzdWx0KCkge1xuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgfVxuXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcbiAgICAgIHRoaXMucHJldiA9IDA7XG4gICAgICB0aGlzLm5leHQgPSAwO1xuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXG4gICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcblxuICAgICAgaWYgKCFza2lwVGVtcFJlc2V0KSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XG4gICAgICAgICAgaWYgKG5hbWUuY2hhckF0KDApID09PSBcInRcIiAmJlxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XG4gICAgICAgICAgICB0aGlzW25hbWVdID0gdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XG5cbiAgICAgIHZhciByb290RW50cnkgPSB0aGlzLnRyeUVudHJpZXNbMF07XG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5ydmFsO1xuICAgIH0sXG5cbiAgICBkaXNwYXRjaEV4Y2VwdGlvbjogZnVuY3Rpb24oZXhjZXB0aW9uKSB7XG4gICAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xuICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7XG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xuICAgICAgICBjb250ZXh0Lm5leHQgPSBsb2M7XG5cbiAgICAgICAgaWYgKGNhdWdodCkge1xuICAgICAgICAgIC8vIElmIHRoZSBkaXNwYXRjaGVkIGV4Y2VwdGlvbiB3YXMgY2F1Z2h0IGJ5IGEgY2F0Y2ggYmxvY2ssXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhIGNhdWdodDtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcbiAgICAgICAgICAvLyBpdCwgc28gc2V0IHRoZSBjb21wbGV0aW9uIHZhbHVlIG9mIHRoZSBlbnRpcmUgZnVuY3Rpb24gdG9cbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xuICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCBcImNhdGNoTG9jXCIpO1xuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcblxuICAgICAgICAgIGlmIChoYXNDYXRjaCAmJiBoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ0cnkgc3RhdGVtZW50IHdpdGhvdXQgY2F0Y2ggb3IgZmluYWxseVwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgYWJydXB0OiBmdW5jdGlvbih0eXBlLCBhcmcpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgIHZhciBmaW5hbGx5RW50cnkgPSBlbnRyeTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXG4gICAgICAgICAgKHR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcbiAgICAgICAgICBhcmcgPD0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXG4gICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9O1xuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICB0aGlzLm5leHQgPSBmaW5hbGx5RW50cnkuZmluYWxseUxvYztcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XG4gICAgfSxcblxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByZWNvcmQuYXJnO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwiYnJlYWtcIiB8fFxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgIHRoaXMubmV4dCA9IFwiZW5kXCI7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9LFxuXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB0aGlzLmNvbXBsZXRlKGVudHJ5LmNvbXBsZXRpb24sIGVudHJ5LmFmdGVyTG9jKTtcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xuICAgICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxuICAgICAgLy8gYXJndW1lbnQgdGhhdCBjb3JyZXNwb25kcyB0byBhIGtub3duIGNhdGNoIGJsb2NrLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xuICAgIH0sXG5cbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcbiAgICAgICAgaXRlcmF0b3I6IHZhbHVlcyhpdGVyYWJsZSksXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgLy8gRGVsaWJlcmF0ZWx5IGZvcmdldCB0aGUgbGFzdCBzZW50IHZhbHVlIHNvIHRoYXQgd2UgZG9uJ3RcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfVxuICB9O1xuXG4gIC8vIFJlZ2FyZGxlc3Mgb2Ygd2hldGhlciB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGVcbiAgLy8gb3Igbm90LCByZXR1cm4gdGhlIHJ1bnRpbWUgb2JqZWN0IHNvIHRoYXQgd2UgY2FuIGRlY2xhcmUgdGhlIHZhcmlhYmxlXG4gIC8vIHJlZ2VuZXJhdG9yUnVudGltZSBpbiB0aGUgb3V0ZXIgc2NvcGUsIHdoaWNoIGFsbG93cyB0aGlzIG1vZHVsZSB0byBiZVxuICAvLyBpbmplY3RlZCBlYXNpbHkgYnkgYGJpbi9yZWdlbmVyYXRvciAtLWluY2x1ZGUtcnVudGltZSBzY3JpcHQuanNgLlxuICByZXR1cm4gZXhwb3J0cztcblxufShcbiAgLy8gSWYgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlLCB1c2UgbW9kdWxlLmV4cG9ydHNcbiAgLy8gYXMgdGhlIHJlZ2VuZXJhdG9yUnVudGltZSBuYW1lc3BhY2UuIE90aGVyd2lzZSBjcmVhdGUgYSBuZXcgZW1wdHlcbiAgLy8gb2JqZWN0LiBFaXRoZXIgd2F5LCB0aGUgcmVzdWx0aW5nIG9iamVjdCB3aWxsIGJlIHVzZWQgdG8gaW5pdGlhbGl6ZVxuICAvLyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIHZhcmlhYmxlIGF0IHRoZSB0b3Agb2YgdGhpcyBmaWxlLlxuICB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiID8gbW9kdWxlLmV4cG9ydHMgOiB7fVxuKSk7XG5cbnRyeSB7XG4gIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7XG59IGNhdGNoIChhY2NpZGVudGFsU3RyaWN0TW9kZSkge1xuICAvLyBUaGlzIG1vZHVsZSBzaG91bGQgbm90IGJlIHJ1bm5pbmcgaW4gc3RyaWN0IG1vZGUsIHNvIHRoZSBhYm92ZVxuICAvLyBhc3NpZ25tZW50IHNob3VsZCBhbHdheXMgd29yayB1bmxlc3Mgc29tZXRoaW5nIGlzIG1pc2NvbmZpZ3VyZWQuIEp1c3RcbiAgLy8gaW4gY2FzZSBydW50aW1lLmpzIGFjY2lkZW50YWxseSBydW5zIGluIHN0cmljdCBtb2RlLCB3ZSBjYW4gZXNjYXBlXG4gIC8vIHN0cmljdCBtb2RlIHVzaW5nIGEgZ2xvYmFsIEZ1bmN0aW9uIGNhbGwuIFRoaXMgY291bGQgY29uY2VpdmFibHkgZmFpbFxuICAvLyBpZiBhIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IGZvcmJpZHMgdXNpbmcgRnVuY3Rpb24sIGJ1dCBpbiB0aGF0IGNhc2VcbiAgLy8gdGhlIHByb3BlciBzb2x1dGlvbiBpcyB0byBmaXggdGhlIGFjY2lkZW50YWwgc3RyaWN0IG1vZGUgcHJvYmxlbS4gSWZcbiAgLy8geW91J3ZlIG1pc2NvbmZpZ3VyZWQgeW91ciBidW5kbGVyIHRvIGZvcmNlIHN0cmljdCBtb2RlIGFuZCBhcHBsaWVkIGFcbiAgLy8gQ1NQIHRvIGZvcmJpZCBGdW5jdGlvbiwgYW5kIHlvdSdyZSBub3Qgd2lsbGluZyB0byBmaXggZWl0aGVyIG9mIHRob3NlXG4gIC8vIHByb2JsZW1zLCBwbGVhc2UgZGV0YWlsIHlvdXIgdW5pcXVlIHByZWRpY2FtZW50IGluIGEgR2l0SHViIGlzc3VlLlxuICBGdW5jdGlvbihcInJcIiwgXCJyZWdlbmVyYXRvclJ1bnRpbWUgPSByXCIpKHJ1bnRpbWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG52YXIgdGFzayA9IHJlcXVpcmUoJy4vX3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi9fcGVyZm9ybScpO1xudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIFBST01JU0UgPSAnUHJvbWlzZSc7XG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcbnZhciBpc05vZGUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7XG5cbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XG4gIHRyeSB7XG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xuICAgIHZhciBGYWtlUHJvbWlzZSA9IChwcm9taXNlLmNvbnN0cnVjdG9yID0ge30pW3JlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyldID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcbiAgICB9O1xuICAgIC8vIHVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcbiAgICAgIC8vIHY4IDYuNiAoTm9kZSAxMCBhbmQgQ2hyb21lIDY2KSBoYXZlIGEgYnVnIHdpdGggcmVzb2x2aW5nIGN1c3RvbSB0aGVuYWJsZXNcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICAgICYmIHY4LmluZGV4T2YoJzYuNicpICE9PSAwXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbn0oKTtcblxuLy8gaGVscGVyc1xudmFyIGlzVGhlbmFibGUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIHRoZW47XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcbn07XG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XG4gIHByb21pc2UuX24gPSB0cnVlO1xuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgcnVuID0gZnVuY3Rpb24gKHJlYWN0aW9uKSB7XG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xuICAgICAgdmFyIHJlamVjdCA9IHJlYWN0aW9uLnJlamVjdDtcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmICghb2spIHtcbiAgICAgICAgICAgIGlmIChwcm9taXNlLl9oID09IDIpIG9uSGFuZGxlVW5oYW5kbGVkKHByb21pc2UpO1xuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoYW5kbGVyID09PSB0cnVlKSByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xuICAgICAgICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7IC8vIG1heSB0aHJvd1xuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xuICAgICAgICAgICAgICBleGl0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0ID09PSByZWFjdGlvbi5wcm9taXNlKSB7XG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xuICAgICAgICByZWplY3QoZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxuICAgIHByb21pc2UuX2MgPSBbXTtcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcbiAgfSk7XG59O1xudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xuICAgIHZhciByZXN1bHQsIGhhbmRsZXIsIGNvbnNvbGU7XG4gICAgaWYgKHVuaGFuZGxlZCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChpc05vZGUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XG4gICAgICAgICAgaGFuZGxlcih7IHByb21pc2U6IHByb21pc2UsIHJlYXNvbjogdmFsdWUgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgcHJvbWlzZS5faCA9IGlzTm9kZSB8fCBpc1VuaGFuZGxlZChwcm9taXNlKSA/IDIgOiAxO1xuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcbiAgfSk7XG59O1xudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgcmV0dXJuIHByb21pc2UuX2ggIT09IDEgJiYgKHByb21pc2UuX2EgfHwgcHJvbWlzZS5fYykubGVuZ3RoID09PSAwO1xufTtcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaGFuZGxlcjtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICBwcm9jZXNzLmVtaXQoJ3JlamVjdGlvbkhhbmRsZWQnLCBwcm9taXNlKTtcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xuICAgIH1cbiAgfSk7XG59O1xudmFyICRyZWplY3QgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcbiAgcHJvbWlzZS5fcyA9IDI7XG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xufTtcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIHZhciB0aGVuO1xuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xuICBwcm9taXNlLl9kID0gdHJ1ZTtcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXG4gIHRyeSB7XG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICBpZiAodGhlbiA9IGlzVGhlbmFibGUodmFsdWUpKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgJHJlamVjdC5jYWxsKHdyYXBwZXIsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICAgICAgcHJvbWlzZS5fcyA9IDE7XG4gICAgICBub3RpZnkocHJvbWlzZSwgZmFsc2UpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgICRyZWplY3QuY2FsbCh7IF93OiBwcm9taXNlLCBfZDogZmFsc2UgfSwgZSk7IC8vIHdyYXBcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmICghVVNFX05BVElWRSkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdHJ5IHtcbiAgICAgIGV4ZWN1dG9yKGN0eCgkcmVzb2x2ZSwgdGhpcywgMSksIGN0eCgkcmVqZWN0LCB0aGlzLCAxKSk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICBJbnRlcm5hbCA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcbiAgICB0aGlzLl9zID0gMDsgICAgICAgICAgICAgIC8vIDwtIHN0YXRlXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxuICAgIHRoaXMuX2ggPSAwOyAgICAgICAgICAgICAgLy8gPC0gcmVqZWN0aW9uIHN0YXRlLCAwIC0gZGVmYXVsdCwgMSAtIGhhbmRsZWQsIDIgLSB1bmhhbmRsZWRcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxuICB9O1xuICBJbnRlcm5hbC5wcm90b3R5cGUgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKSgkUHJvbWlzZS5wcm90b3R5cGUsIHtcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciByZWFjdGlvbiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkUHJvbWlzZSkpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBpc05vZGUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9zKSBub3RpZnkodGhpcywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyAyNS40LjUuMSBQcm9taXNlLnByb3RvdHlwZS5jYXRjaChvblJlamVjdGVkKVxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XG4gICAgdGhpcy5yZWplY3QgPSBjdHgoJHJlamVjdCwgcHJvbWlzZSwgMSk7XG4gIH07XG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gICAgcmV0dXJuIEMgPT09ICRQcm9taXNlIHx8IEMgPT09IFdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBQcm9taXNlOiAkUHJvbWlzZSB9KTtcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcbldyYXBwZXIgPSByZXF1aXJlKCcuL19jb3JlJylbUFJPTUlTRV07XG5cbi8vIHN0YXRpY3NcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgJCRyZWplY3Qocik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChMSUJSQVJZIHx8ICFVU0VfTkFUSVZFKSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKExJQlJBUlkgJiYgdGhpcyA9PT0gV3JhcHBlciA/ICRQcm9taXNlIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKFVTRV9OQVRJVkUgJiYgcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikge1xuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xufSkpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC4xIFByb21pc2UuYWxsKGl0ZXJhYmxlKVxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgaW5kZXggPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICB2YWx1ZXNbJGluZGV4XSA9IHZhbHVlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyAyNS40LjQuNCBQcm9taXNlLnJhY2UoaXRlcmFibGUpXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcbiAgfVxufSk7XG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xudmFyIHJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGlkID0gK3RoaXM7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgaWYgKHF1ZXVlLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICAgIGZuKCk7XG4gIH1cbn07XG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XG59O1xuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XG4gICAgfTtcbiAgICBkZWZlcihjb3VudGVyKTtcbiAgICByZXR1cm4gY291bnRlcjtcbiAgfTtcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcbiAgICBkZWxldGUgcXVldWVbaWRdO1xuICB9O1xuICAvLyBOb2RlLmpzIDAuOC1cbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhjdHgocnVuLCBpZCwgMSkpO1xuICAgIH07XG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcbiAgfSBlbHNlIGlmIChNZXNzYWdlQ2hhbm5lbCkge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcbiAgLy8gSUU4IGhhcyBwb3N0TWVzc2FnZSwgYnV0IGl0J3Mgc3luYyAmIHR5cGVvZiBpdHMgcG9zdE1lc3NhZ2UgaXMgJ29iamVjdCdcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsICcqJyk7XG4gICAgfTtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBodG1sLmFwcGVuZENoaWxkKGNlbCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xuICAgIH07XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldFRhc2ssXG4gIGNsZWFyOiBjbGVhclRhc2tcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcblxuZnVuY3Rpb24gUHJvbWlzZUNhcGFiaWxpdHkoQykge1xuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xuICAgIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTtcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xuICB9KTtcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xufVxuXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlQ2FwYWJpbGl0eShDKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xuICBpZiAobmFtZS5jaGFyQXQoMCkgIT0gJ18nICYmICEobmFtZSBpbiAkU3ltYm9sKSkgZGVmaW5lUHJvcGVydHkoJFN5bWJvbCwgbmFtZSwgeyB2YWx1ZTogd2tzRXh0LmYobmFtZSkgfSk7XG59O1xuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuICRrZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsInZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgZ09QRCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgTyA9IHRvSU9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XG4gICAgcmV0dXJuIGdPUEQoTywgUCk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyIGZhc3RLZXkgPSByZXF1aXJlKCcuL19tZXRhJykuZmFzdEtleTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xuXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XG4gIC8vIGZhc3QgY2FzZVxuICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7XG4gIHZhciBlbnRyeTtcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcbiAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxuICAgICAgdGhhdC5fZiA9IHVuZGVmaW5lZDsgICAgLy8gZmlyc3QgZW50cnlcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcbiAgICB9KTtcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xuICAgICAgLy8gMjMuMS4zLjEgTWFwLnByb3RvdHlwZS5jbGVhcigpXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcbiAgICAgICAgZm9yICh2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBkYXRhID0gdGhhdC5faSwgZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZGVsZXRlIGRhdGFbZW50cnkuaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoYXRbU0laRV0gPSAwO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcbiAgICAgIC8vIDIzLjIuMy40IFNldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xuICAgICAgICAgIHZhciBwcmV2ID0gZW50cnkucDtcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocHJldikgcHJldi5uID0gbmV4dDtcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XG4gICAgICAgICAgaWYgKHRoYXQuX2wgPT0gZW50cnkpIHRoYXQuX2wgPSBwcmV2O1xuICAgICAgICAgIHRoYXRbU0laRV0tLTtcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcbiAgICAgIH0sXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xuICAgICAgICB2YXIgZW50cnk7XG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcbiAgICAgIGhhczogZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdmFsaWRhdGUodGhpcywgTkFNRSlbU0laRV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcbiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgIHZhciBwcmV2LCBpbmRleDtcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XG4gICAgICAgIGs6IGtleSwgICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSBrZXlcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxuICAgICAgICBuOiB1bmRlZmluZWQsICAgICAgICAgICAgICAgICAgLy8gPC0gbmV4dCBlbnRyeVxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxuICAgICAgfTtcbiAgICAgIGlmICghdGhhdC5fZikgdGhhdC5fZiA9IGVudHJ5O1xuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xuICAgICAgdGhhdFtTSVpFXSsrO1xuICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcbiAgICB9IHJldHVybiB0aGF0O1xuICB9LFxuICBnZXRFbnRyeTogZ2V0RW50cnksXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xuICAgIC8vIGFkZCAua2V5cywgLnZhbHVlcywgLmVudHJpZXMsIFtAQGl0ZXJhdG9yXVxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgICAgIHRoaXMuX3QgPSB2YWxpZGF0ZShpdGVyYXRlZCwgTkFNRSk7IC8vIHRhcmdldFxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcbiAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XG4gICAgICB2YXIgZW50cnkgPSB0aGF0Ll9sO1xuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xuICAgICAgLy8gZ2V0IG5leHQgZW50cnlcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXG4gICAgICAgIHRoYXQuX3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIHN0ZXAgYnkga2luZFxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcbiAgICAgIHJldHVybiBzdGVwKDAsIFtlbnRyeS5rLCBlbnRyeS52XSk7XG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xuXG4gICAgLy8gYWRkIFtAQHNwZWNpZXNdLCAyMy4xLjIuMiwgMjMuMi4yLjJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgd3JhcHBlciwgbWV0aG9kcywgY29tbW9uLCBJU19NQVAsIElTX1dFQUspIHtcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XG4gIHZhciBDID0gQmFzZTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcbiAgdmFyIE8gPSB7fTtcbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXG4gICAgICBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XG4gICAgICB9IDogS0VZID09ICdhZGQnID8gZnVuY3Rpb24gYWRkKGEpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpOyByZXR1cm4gdGhpczsgfVxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cbiAgICApO1xuICB9O1xuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcbiAgfSkpKSB7XG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBtZXRob2RzKTtcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHZhciBpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiAgQ2hyb21pdW0gNDAtIHdlYWstY29sbGVjdGlvbnMgdGhyb3dzIG9uIHByaW1pdGl2ZXMsIGJ1dCBzaG91bGQgcmV0dXJuIGZhbHNlXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9ICRpdGVyRGV0ZWN0KGZ1bmN0aW9uIChpdGVyKSB7IG5ldyBDKGl0ZXIpOyB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIFY4IH4gQ2hyb21pdW0gNDItIGZhaWxzIG9ubHkgd2l0aCA1KyBlbGVtZW50c1xuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XG4gICAgICB2YXIgaW5kZXggPSA1O1xuICAgICAgd2hpbGUgKGluZGV4LS0pICRpbnN0YW5jZVtBRERFUl0oaW5kZXgsIGluZGV4KTtcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XG4gICAgfSk7XG4gICAgaWYgKCFBQ0NFUFRfSVRFUkFCTEVTKSB7XG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XG4gICAgICAgIHZhciB0aGF0ID0gaW5oZXJpdElmUmVxdWlyZWQobmV3IEJhc2UoKSwgdGFyZ2V0LCBDKTtcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgICAgICByZXR1cm4gdGhhdDtcbiAgICAgIH0pO1xuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcbiAgICB9XG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XG4gICAgICBmaXhNZXRob2QoJ2hhcycpO1xuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XG4gICAgfVxuICAgIGlmIChCVUdHWV9aRVJPIHx8IEhBU05UX0NIQUlOSU5HKSBmaXhNZXRob2QoQURERVIpO1xuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcbiAgfVxuXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xuXG4gIE9bTkFNRV0gPSBDO1xuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcblxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQztcbn07XG4iLCIvKiEgbm91aXNsaWRlciAtIDEzLjEuMyAtIDMvMTUvMjAxOSAqL1xuKGZ1bmN0aW9uKGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQpIHtcbiAgICAgICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgICAgICBkZWZpbmUoW10sIGZhY3RvcnkpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgLy8gTm9kZS9Db21tb25KU1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBCcm93c2VyIGdsb2JhbHNcbiAgICAgICAgd2luZG93Lm5vVWlTbGlkZXIgPSBmYWN0b3J5KCk7XG4gICAgfVxufSkoZnVuY3Rpb24oKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgVkVSU0lPTiA9IFwiMTMuMS4zXCI7XG5cbiAgICAvL3JlZ2lvbiBIZWxwZXIgTWV0aG9kc1xuXG4gICAgZnVuY3Rpb24gaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBlbnRyeS50byA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBlbnRyeS5mcm9tID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChlbCkge1xuICAgICAgICBlbC5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGVsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NldCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvLyBCaW5kYWJsZSB2ZXJzaW9uXG4gICAgZnVuY3Rpb24gcHJldmVudERlZmF1bHQoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgLy8gUmVtb3ZlcyBkdXBsaWNhdGVzIGZyb20gYW4gYXJyYXkuXG4gICAgZnVuY3Rpb24gdW5pcXVlKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzW2FdID8gKHRoaXNbYV0gPSB0cnVlKSA6IGZhbHNlO1xuICAgICAgICB9LCB7fSk7XG4gICAgfVxuXG4gICAgLy8gUm91bmQgYSB2YWx1ZSB0byB0aGUgY2xvc2VzdCAndG8nLlxuICAgIGZ1bmN0aW9uIGNsb3Nlc3QodmFsdWUsIHRvKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlIC8gdG8pICogdG87XG4gICAgfVxuXG4gICAgLy8gQ3VycmVudCBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudC5cbiAgICBmdW5jdGlvbiBvZmZzZXQoZWxlbSwgb3JpZW50YXRpb24pIHtcbiAgICAgICAgdmFyIHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgZG9jRWxlbSA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBwYWdlT2Zmc2V0ID0gZ2V0UGFnZU9mZnNldChkb2MpO1xuXG4gICAgICAgIC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBjb250YWlucyBsZWZ0IHNjcm9sbCBpbiBDaHJvbWUgb24gQW5kcm9pZC5cbiAgICAgICAgLy8gSSBoYXZlbid0IGZvdW5kIGEgZmVhdHVyZSBkZXRlY3Rpb24gdGhhdCBwcm92ZXMgdGhpcy4gV29yc3QgY2FzZVxuICAgICAgICAvLyBzY2VuYXJpbyBvbiBtaXMtbWF0Y2g6IHRoZSAndGFwJyBmZWF0dXJlIG9uIGhvcml6b250YWwgc2xpZGVycyBicmVha3MuXG4gICAgICAgIGlmICgvd2Via2l0LipDaHJvbWUuKk1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgICAgICAgIHBhZ2VPZmZzZXQueCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3JpZW50YXRpb25cbiAgICAgICAgICAgID8gcmVjdC50b3AgKyBwYWdlT2Zmc2V0LnkgLSBkb2NFbGVtLmNsaWVudFRvcFxuICAgICAgICAgICAgOiByZWN0LmxlZnQgKyBwYWdlT2Zmc2V0LnggLSBkb2NFbGVtLmNsaWVudExlZnQ7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2tzIHdoZXRoZXIgYSB2YWx1ZSBpcyBudW1lcmljYWwuXG4gICAgZnVuY3Rpb24gaXNOdW1lcmljKGEpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBhID09PSBcIm51bWJlclwiICYmICFpc05hTihhKSAmJiBpc0Zpbml0ZShhKTtcbiAgICB9XG5cbiAgICAvLyBTZXRzIGEgY2xhc3MgYW5kIHJlbW92ZXMgaXQgYWZ0ZXIgW2R1cmF0aW9uXSBtcy5cbiAgICBmdW5jdGlvbiBhZGRDbGFzc0ZvcihlbGVtZW50LCBjbGFzc05hbWUsIGR1cmF0aW9uKSB7XG4gICAgICAgIGlmIChkdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGFkZENsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LCBkdXJhdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBMaW1pdHMgYSB2YWx1ZSB0byAwIC0gMTAwXG4gICAgZnVuY3Rpb24gbGltaXQoYSkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoTWF0aC5taW4oYSwgMTAwKSwgMCk7XG4gICAgfVxuXG4gICAgLy8gV3JhcHMgYSB2YXJpYWJsZSBhcyBhbiBhcnJheSwgaWYgaXQgaXNuJ3Qgb25lIHlldC5cbiAgICAvLyBOb3RlIHRoYXQgYW4gaW5wdXQgYXJyYXkgaXMgcmV0dXJuZWQgYnkgcmVmZXJlbmNlIVxuICAgIGZ1bmN0aW9uIGFzQXJyYXkoYSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhKSA/IGEgOiBbYV07XG4gICAgfVxuXG4gICAgLy8gQ291bnRzIGRlY2ltYWxzXG4gICAgZnVuY3Rpb24gY291bnREZWNpbWFscyhudW1TdHIpIHtcbiAgICAgICAgbnVtU3RyID0gU3RyaW5nKG51bVN0cik7XG4gICAgICAgIHZhciBwaWVjZXMgPSBudW1TdHIuc3BsaXQoXCIuXCIpO1xuICAgICAgICByZXR1cm4gcGllY2VzLmxlbmd0aCA+IDEgPyBwaWVjZXNbMV0ubGVuZ3RoIDogMDtcbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jYWRkX2NsYXNzXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jcmVtb3ZlX2NsYXNzXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShcbiAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKFwiKF58XFxcXGIpXCIgKyBjbGFzc05hbWUuc3BsaXQoXCIgXCIpLmpvaW4oXCJ8XCIpICsgXCIoXFxcXGJ8JClcIiwgXCJnaVwiKSxcbiAgICAgICAgICAgICAgICBcIiBcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vcGxhaW5qcy5jb20vamF2YXNjcmlwdC9hdHRyaWJ1dGVzL2FkZGluZy1yZW1vdmluZy1hbmQtdGVzdGluZy1mb3ItY2xhc3Nlcy05L1xuICAgIGZ1bmN0aW9uIGhhc0NsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdFxuICAgICAgICAgICAgPyBlbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKVxuICAgICAgICAgICAgOiBuZXcgUmVnRXhwKFwiXFxcXGJcIiArIGNsYXNzTmFtZSArIFwiXFxcXGJcIikudGVzdChlbC5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9XaW5kb3cvc2Nyb2xsWSNOb3Rlc1xuICAgIGZ1bmN0aW9uIGdldFBhZ2VPZmZzZXQoZG9jKSB7XG4gICAgICAgIHZhciBzdXBwb3J0UGFnZU9mZnNldCA9IHdpbmRvdy5wYWdlWE9mZnNldCAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgaXNDU1MxQ29tcGF0ID0gKGRvYy5jb21wYXRNb2RlIHx8IFwiXCIpID09PSBcIkNTUzFDb21wYXRcIjtcbiAgICAgICAgdmFyIHggPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVhPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnRcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbExlZnQ7XG4gICAgICAgIHZhciB5ID0gc3VwcG9ydFBhZ2VPZmZzZXRcbiAgICAgICAgICAgID8gd2luZG93LnBhZ2VZT2Zmc2V0XG4gICAgICAgICAgICA6IGlzQ1NTMUNvbXBhdFxuICAgICAgICAgICAgICAgID8gZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3BcbiAgICAgICAgICAgICAgICA6IGRvYy5ib2R5LnNjcm9sbFRvcDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgIHk6IHlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyB3ZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gY29tcHV0ZSBjb25zdGFudHMgaW5zdGVhZFxuICAgIC8vIG9mIGFjY2Vzc2luZyB3aW5kb3cuKiBhcyBzb29uIGFzIHRoZSBtb2R1bGUgbmVlZHMgaXRcbiAgICAvLyBzbyB0aGF0IHdlIGRvIG5vdCBjb21wdXRlIGFueXRoaW5nIGlmIG5vdCBuZWVkZWRcbiAgICBmdW5jdGlvbiBnZXRBY3Rpb25zKCkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGV2ZW50cyB0byBiaW5kLiBJRTExIGltcGxlbWVudHMgcG9pbnRlckV2ZW50cyB3aXRob3V0XG4gICAgICAgIC8vIGEgcHJlZml4LCB3aGljaCBicmVha3MgY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBJRTEwIGltcGxlbWVudGF0aW9uLlxuICAgICAgICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci5wb2ludGVyRW5hYmxlZFxuICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICBzdGFydDogXCJwb2ludGVyZG93blwiLFxuICAgICAgICAgICAgICAgICAgbW92ZTogXCJwb2ludGVybW92ZVwiLFxuICAgICAgICAgICAgICAgICAgZW5kOiBcInBvaW50ZXJ1cFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogd2luZG93Lm5hdmlnYXRvci5tc1BvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwiTVNQb2ludGVyRG93blwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwiTVNQb2ludGVyTW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJNU1BvaW50ZXJVcFwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IFwibW91c2Vkb3duIHRvdWNoc3RhcnRcIixcbiAgICAgICAgICAgICAgICAgICAgICBtb3ZlOiBcIm1vdXNlbW92ZSB0b3VjaG1vdmVcIixcbiAgICAgICAgICAgICAgICAgICAgICBlbmQ6IFwibW91c2V1cCB0b3VjaGVuZFwiXG4gICAgICAgICAgICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XSUNHL0V2ZW50TGlzdGVuZXJPcHRpb25zL2Jsb2IvZ2gtcGFnZXMvZXhwbGFpbmVyLm1kXG4gICAgLy8gSXNzdWUgIzc4NVxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzUGFzc2l2ZSgpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlICovXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgb3B0cyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgXCJwYXNzaXZlXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIiwgbnVsbCwgb3B0cyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgKi9cblxuICAgICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCkge1xuICAgICAgICByZXR1cm4gd2luZG93LkNTUyAmJiBDU1Muc3VwcG9ydHMgJiYgQ1NTLnN1cHBvcnRzKFwidG91Y2gtYWN0aW9uXCIsIFwibm9uZVwiKTtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gUmFuZ2UgQ2FsY3VsYXRpb25cblxuICAgIC8vIERldGVybWluZSB0aGUgc2l6ZSBvZiBhIHN1Yi1yYW5nZSBpbiByZWxhdGlvbiB0byBhIGZ1bGwgcmFuZ2UuXG4gICAgZnVuY3Rpb24gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpIHtcbiAgICAgICAgcmV0dXJuIDEwMCAvIChwYiAtIHBhKTtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSG93IG1hbnkgcGVyY2VudCBpcyB0aGlzIHZhbHVlIG9mIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAxMDApIC8gKHJhbmdlWzFdIC0gcmFuZ2VbMF0pO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSk7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBIb3cgbXVjaCBpcyB0aGlzIHBlcmNlbnRhZ2Ugb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBpc1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAocmFuZ2VbMV0gLSByYW5nZVswXSkpIC8gMTAwICsgcmFuZ2VbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Sih2YWx1ZSwgYXJyKSB7XG4gICAgICAgIHZhciBqID0gMTtcblxuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gajtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSW5wdXQgYSB2YWx1ZSwgZmluZCB3aGVyZSwgb24gYSBzY2FsZSBvZiAwLTEwMCwgaXQgYXBwbGllcy5cbiAgICBmdW5jdGlvbiB0b1N0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSB4VmFsLnNsaWNlKC0xKVswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gcGEgKyB0b1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sIHZhbHVlKSAvIHN1YlJhbmdlUmF0aW8ocGEsIHBiKTtcbiAgICB9XG5cbiAgICAvLyAodmFsdWUpIElucHV0IGEgcGVyY2VudGFnZSwgZmluZCB3aGVyZSBpdCBpcyBvbiB0aGUgc3BlY2lmaWVkIHJhbmdlLlxuICAgIGZ1bmN0aW9uIGZyb21TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyByYW5nZSBncm91cCB0aGF0IGZpdHMgMTAwXG4gICAgICAgIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB4VmFsLnNsaWNlKC0xKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gaXNQZXJjZW50YWdlKFt2YSwgdmJdLCAodmFsdWUgLSBwYSkgKiBzdWJSYW5nZVJhdGlvKHBhLCBwYikpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBHZXQgdGhlIHN0ZXAgdGhhdCBhcHBsaWVzIGF0IGEgY2VydGFpbiB2YWx1ZS5cbiAgICBmdW5jdGlvbiBnZXRTdGVwKHhQY3QsIHhTdGVwcywgc25hcCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcblxuICAgICAgICAvLyBJZiAnc25hcCcgaXMgc2V0LCBzdGVwcyBhcmUgdXNlZCBhcyBmaXhlZCBwb2ludHMgb24gdGhlIHNsaWRlci5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9zaXRpb24sIGEgb3IgYi5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAtIGEgPiAoYiAtIGEpIC8gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHhQY3RbaiAtIDFdICsgY2xvc2VzdCh2YWx1ZSAtIHhQY3RbaiAtIDFdLCB4U3RlcHNbaiAtIDFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbnRyeVBvaW50KGluZGV4LCB2YWx1ZSwgdGhhdCkge1xuICAgICAgICB2YXIgcGVyY2VudGFnZTtcblxuICAgICAgICAvLyBXcmFwIG51bWVyaWNhbCBpbnB1dCBpbiBhbiBhcnJheS5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqZWN0IGFueSBpbnZhbGlkIGlucHV0LCBieSB0ZXN0aW5nIHdoZXRoZXIgdmFsdWUgaXMgYW4gYXJyYXkuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyBjb250YWlucyBpbnZhbGlkIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvdmVydCBtaW4vbWF4IHN5bnRheCB0byAwIGFuZCAxMDAuXG4gICAgICAgIGlmIChpbmRleCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKCFpc051bWVyaWMocGVyY2VudGFnZSkgfHwgIWlzTnVtZXJpYyh2YWx1ZVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgdGhhdC54UGN0LnB1c2gocGVyY2VudGFnZSk7XG4gICAgICAgIHRoYXQueFZhbC5wdXNoKHZhbHVlWzBdKTtcblxuICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgIC8vIGxvZ2dpbmcgY2xlYXIsIHNldCBzdGVwIGV4cGxpY2l0bHkuIE1ha2Ugc3VyZVxuICAgICAgICAvLyBub3QgdG8gb3ZlcnJpZGUgdGhlICdzdGVwJyBzZXR0aW5nIHdpdGggZmFsc2UuXG4gICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZVsxXSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnhTdGVwc1swXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC54U3RlcHMucHVzaChpc05hTih2YWx1ZVsxXSkgPyBmYWxzZSA6IHZhbHVlWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdGVwUG9pbnQoaSwgbiwgdGhhdCkge1xuICAgICAgICAvLyBJZ25vcmUgJ2ZhbHNlJyBzdGVwcGluZy5cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgaWYgKHRoYXQueFZhbFtpXSA9PT0gdGhhdC54VmFsW2kgKyAxXSkge1xuICAgICAgICAgICAgdGhhdC54U3RlcHNbaV0gPSB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gdGhhdC54VmFsW2ldO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYWN0b3IgdG8gcmFuZ2UgcmF0aW9cbiAgICAgICAgdGhhdC54U3RlcHNbaV0gPVxuICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoYXQueFZhbFtpXSwgdGhhdC54VmFsW2kgKyAxXV0sIG4pIC8gc3ViUmFuZ2VSYXRpbyh0aGF0LnhQY3RbaV0sIHRoYXQueFBjdFtpICsgMV0pO1xuXG4gICAgICAgIHZhciB0b3RhbFN0ZXBzID0gKHRoYXQueFZhbFtpICsgMV0gLSB0aGF0LnhWYWxbaV0pIC8gdGhhdC54TnVtU3RlcHNbaV07XG4gICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHRoYXQueFZhbFtpXSArIHRoYXQueE51bVN0ZXBzW2ldICogaGlnaGVzdFN0ZXA7XG5cbiAgICAgICAgdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIFNwZWN0cnVtXG5cbiAgICBmdW5jdGlvbiBTcGVjdHJ1bShlbnRyeSwgc25hcCwgc2luZ2xlU3RlcCkge1xuICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgdGhpcy54VmFsID0gW107XG4gICAgICAgIHRoaXMueFN0ZXBzID0gW3NpbmdsZVN0ZXAgfHwgZmFsc2VdO1xuICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IFtmYWxzZV07XG4gICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAgPSBbXTtcblxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xuXG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIG9yZGVyZWQgPSBbXTsgLy8gWzAsICdtaW4nXSwgWzEsICc1MCUnXSwgWzIsICdtYXgnXVxuXG4gICAgICAgIC8vIE1hcCB0aGUgb2JqZWN0IGtleXMgdG8gYW4gYXJyYXkuXG4gICAgICAgIGZvciAoaW5kZXggaW4gZW50cnkpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBvcmRlcmVkLnB1c2goW2VudHJ5W2luZGV4XSwgaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgYWxsIGVudHJpZXMgYnkgdmFsdWUgKG51bWVyaWMgc29ydCkuXG4gICAgICAgIGlmIChvcmRlcmVkLmxlbmd0aCAmJiB0eXBlb2Ygb3JkZXJlZFswXVswXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXVswXSAtIGJbMF1bMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgb3JkZXJlZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGhhbmRsZUVudHJ5UG9pbnQob3JkZXJlZFtpbmRleF1bMV0sIG9yZGVyZWRbaW5kZXhdWzBdLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBhY3R1YWwgc3RlcCB2YWx1ZXMuXG4gICAgICAgIC8vIHhTdGVwcyBpcyBzb3J0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgeFBjdCBhbmQgeFZhbC5cbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBudW1lcmljIHN0ZXBzIHRvIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBzdWJyYW5nZSB0aGV5IHJlcHJlc2VudC5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0TWFyZ2luID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHN0ZXAgPSB0aGlzLnhOdW1TdGVwc1swXTtcblxuICAgICAgICBpZiAoc3RlcCAmJiAodmFsdWUgLyBzdGVwKSAlIDEgIT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2xpbWl0JywgJ21hcmdpbicgYW5kICdwYWRkaW5nJyBtdXN0IGJlIGRpdmlzaWJsZSBieSBzdGVwLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnhQY3QubGVuZ3RoID09PSAyID8gZnJvbVBlcmNlbnRhZ2UodGhpcy54VmFsLCB2YWx1ZSkgOiBmYWxzZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLnRvU3RlcHBpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IHRvU3RlcHBpbmcodGhpcy54VmFsLCB0aGlzLnhQY3QsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5mcm9tU3RlcHBpbmcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVN0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRTdGVwID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSBnZXRTdGVwKHRoaXMueFBjdCwgdGhpcy54U3RlcHMsIHRoaXMuc25hcCwgdmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldERlZmF1bHRTdGVwID0gZnVuY3Rpb24odmFsdWUsIGlzRG93biwgc2l6ZSkge1xuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG5cbiAgICAgICAgLy8gV2hlbiBhdCB0aGUgdG9wIG9yIHN0ZXBwaW5nIGRvd24sIGxvb2sgYXQgdGhlIHByZXZpb3VzIHN1Yi1yYW5nZVxuICAgICAgICBpZiAodmFsdWUgPT09IDEwMCB8fCAoaXNEb3duICYmIHZhbHVlID09PSB0aGlzLnhQY3RbaiAtIDFdKSkge1xuICAgICAgICAgICAgaiA9IE1hdGgubWF4KGogLSAxLCAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodGhpcy54VmFsW2pdIC0gdGhpcy54VmFsW2ogLSAxXSkgLyBzaXplO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0TmVhcmJ5U3RlcHMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaiA9IGdldEoodmFsdWUsIHRoaXMueFBjdCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHN0ZXBCZWZvcmU6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDJdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAyXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMl1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aGlzU3RlcDoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMV0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDFdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ogLSAxXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHN0ZXBBZnRlcjoge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqXVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY291bnRTdGVwRGVjaW1hbHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHRoaXMueE51bVN0ZXBzLm1hcChjb3VudERlY2ltYWxzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHN0ZXBEZWNpbWFscyk7XG4gICAgfTtcblxuICAgIC8vIE91dHNpZGUgdGVzdGluZ1xuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5jb252ZXJ0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3RlcCh0aGlzLnRvU3RlcHBpbmcodmFsdWUpKTtcbiAgICB9O1xuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIE9wdGlvbnNcblxuICAgIC8qXHRFdmVyeSBpbnB1dCBvcHRpb24gaXMgdGVzdGVkIGFuZCBwYXJzZWQuIFRoaXMnbGwgcHJldmVudFxuICAgICAgICBlbmRsZXNzIHZhbGlkYXRpb24gaW4gaW50ZXJuYWwgbWV0aG9kcy4gVGhlc2UgdGVzdHMgYXJlXG4gICAgICAgIHN0cnVjdHVyZWQgd2l0aCBhbiBpdGVtIGZvciBldmVyeSBvcHRpb24gYXZhaWxhYmxlLiBBblxuICAgICAgICBvcHRpb24gY2FuIGJlIG1hcmtlZCBhcyByZXF1aXJlZCBieSBzZXR0aW5nIHRoZSAncicgZmxhZy5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gaXMgcHJvdmlkZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICAgICAgICAtIFRoZSBwcm92aWRlZCB2YWx1ZSBmb3IgdGhlIG9wdGlvbjtcbiAgICAgICAgICAgIC0gQSByZWZlcmVuY2UgdG8gdGhlIG9wdGlvbnMgb2JqZWN0O1xuICAgICAgICAgICAgLSBUaGUgbmFtZSBmb3IgdGhlIG9wdGlvbjtcblxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiByZXR1cm5zIGZhbHNlIHdoZW4gYW4gZXJyb3IgaXMgZGV0ZWN0ZWQsXG4gICAgICAgIG9yIHRydWUgd2hlbiBldmVyeXRoaW5nIGlzIE9LLiBJdCBjYW4gYWxzbyBtb2RpZnkgdGhlIG9wdGlvblxuICAgICAgICBvYmplY3QsIHRvIG1ha2Ugc3VyZSBhbGwgdmFsdWVzIGNhbiBiZSBjb3JyZWN0bHkgbG9vcGVkIGVsc2V3aGVyZS4gKi9cblxuICAgIHZhciBkZWZhdWx0Rm9ybWF0dGVyID0ge1xuICAgICAgICB0bzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlLnRvRml4ZWQoMik7XG4gICAgICAgIH0sXG4gICAgICAgIGZyb206IE51bWJlclxuICAgIH07XG5cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChlbnRyeSkge1xuICAgICAgICAvLyBBbnkgb2JqZWN0IHdpdGggYSB0byBhbmQgZnJvbSBtZXRob2QgaXMgc3VwcG9ydGVkLlxuICAgICAgICBpZiAoaXNWYWxpZEZvcm1hdHRlcihlbnRyeSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnZm9ybWF0JyByZXF1aXJlcyAndG8nIGFuZCAnZnJvbScgbWV0aG9kcy5cIik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFN0ZXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3N0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSBzdGVwIG9wdGlvbiBjYW4gc3RpbGwgYmUgdXNlZCB0byBzZXQgc3RlcHBpbmdcbiAgICAgICAgLy8gZm9yIGxpbmVhciBzbGlkZXJzLiBPdmVyd3JpdHRlbiBpZiBzZXQgaW4gJ3JhbmdlJy5cbiAgICAgICAgcGFyc2VkLnNpbmdsZVN0ZXAgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0UmFuZ2UocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBGaWx0ZXIgaW5jb3JyZWN0IGlucHV0LlxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgaXMgbm90IGFuIG9iamVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBtaXNzaW5nIHN0YXJ0IG9yIGVuZC5cbiAgICAgICAgaWYgKGVudHJ5Lm1pbiA9PT0gdW5kZWZpbmVkIHx8IGVudHJ5Lm1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IE1pc3NpbmcgJ21pbicgb3IgJ21heCcgaW4gJ3JhbmdlJy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDYXRjaCBlcXVhbCBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IGVudHJ5Lm1heCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnICdtaW4nIGFuZCAnbWF4JyBjYW5ub3QgYmUgZXF1YWwuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLnNwZWN0cnVtID0gbmV3IFNwZWN0cnVtKGVudHJ5LCBwYXJzZWQuc25hcCwgcGFyc2VkLnNpbmdsZVN0ZXApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGFydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGVudHJ5ID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgaW5wdXQuIFZhbHVlcyBhcmVuJ3QgdGVzdGVkLCBhcyB0aGUgcHVibGljIC52YWwgbWV0aG9kXG4gICAgICAgIC8vIHdpbGwgYWx3YXlzIHByb3ZpZGUgYSB2YWxpZCBsb2NhdGlvbi5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGFydCcgb3B0aW9uIGlzIGluY29ycmVjdC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdG9yZSB0aGUgbnVtYmVyIG9mIGhhbmRsZXMuXG4gICAgICAgIHBhcnNlZC5oYW5kbGVzID0gZW50cnkubGVuZ3RoO1xuXG4gICAgICAgIC8vIFdoZW4gdGhlIHNsaWRlciBpcyBpbml0aWFsaXplZCwgdGhlIC52YWwgbWV0aG9kIHdpbGxcbiAgICAgICAgLy8gYmUgY2FsbGVkIHdpdGggdGhlIHN0YXJ0IG9wdGlvbnMuXG4gICAgICAgIHBhcnNlZC5zdGFydCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTbmFwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5zbmFwID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3NuYXAnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0ZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuYW5pbWF0ZSA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdhbmltYXRlJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGlvbkR1cmF0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmFuaW1hdGlvbkR1cmF0aW9uID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0aW9uRHVyYXRpb24nIG9wdGlvbiBtdXN0IGJlIGEgbnVtYmVyLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDb25uZWN0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgdmFyIGNvbm5lY3QgPSBbZmFsc2VdO1xuICAgICAgICB2YXIgaTtcblxuICAgICAgICAvLyBNYXAgbGVnYWN5IG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSBcImxvd2VyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW3RydWUsIGZhbHNlXTtcbiAgICAgICAgfSBlbHNlIGlmIChlbnRyeSA9PT0gXCJ1cHBlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtmYWxzZSwgdHJ1ZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgYm9vbGVhbiBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSB8fCBlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBwYXJzZWQuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29ubmVjdC5wdXNoKGVudHJ5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29ubmVjdC5wdXNoKGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlamVjdCBpbnZhbGlkIGlucHV0XG4gICAgICAgIGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSB8fCAhZW50cnkubGVuZ3RoIHx8IGVudHJ5Lmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMgKyAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdjb25uZWN0JyBvcHRpb24gZG9lc24ndCBtYXRjaCBoYW5kbGUgY291bnQuXCIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29ubmVjdCA9IGVudHJ5O1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNvbm5lY3QgPSBjb25uZWN0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RPcmllbnRhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBvcmllbnRhdGlvbiB0byBhbiBhIG51bWVyaWNhbCB2YWx1ZSBmb3IgZWFzeVxuICAgICAgICAvLyBhcnJheSBzZWxlY3Rpb24uXG4gICAgICAgIHN3aXRjaCAoZW50cnkpIHtcbiAgICAgICAgICAgIGNhc2UgXCJob3Jpem9udGFsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidmVydGljYWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnb3JpZW50YXRpb24nIG9wdGlvbiBpcyBpbnZhbGlkLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RNYXJnaW4ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ21hcmdpbicgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJc3N1ZSAjNTgyXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLm1hcmdpbiA9IHBhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnkpO1xuXG4gICAgICAgIGlmICghcGFyc2VkLm1hcmdpbikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbWFyZ2luJyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdExpbWl0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdsaW1pdCcgb3B0aW9uIG11c3QgYmUgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQubGltaXQgPSBwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5KTtcblxuICAgICAgICBpZiAoIXBhcnNlZC5saW1pdCB8fCBwYXJzZWQuaGFuZGxlcyA8IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgVkVSU0lPTiArXG4gICAgICAgICAgICAgICAgICAgIFwiKTogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RQYWRkaW5nKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpICYmICFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVudHJ5KSAmJiAhKGVudHJ5Lmxlbmd0aCA9PT0gMiB8fCBpc051bWVyaWMoZW50cnlbMF0pIHx8IGlzTnVtZXJpYyhlbnRyeVsxXSkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFtlbnRyeSwgZW50cnldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ2dldE1hcmdpbicgcmV0dXJucyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZXMuXG4gICAgICAgIHBhcnNlZC5wYWRkaW5nID0gW3BhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnlbMF0pLCBwYXJzZWQuc3BlY3RydW0uZ2V0TWFyZ2luKGVudHJ5WzFdKV07XG5cbiAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdID09PSBmYWxzZSB8fCBwYXJzZWQucGFkZGluZ1sxXSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VkLnBhZGRpbmdbMF0gPCAwIHx8IHBhcnNlZC5wYWRkaW5nWzFdIDwgMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgYSBwb3NpdGl2ZSBudW1iZXIocykuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdICsgcGFyc2VkLnBhZGRpbmdbMV0gPj0gMTAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBub3QgZXhjZWVkIDEwMCUgb2YgdGhlIHJhbmdlLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3REaXJlY3Rpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBTZXQgZGlyZWN0aW9uIGFzIGEgbnVtZXJpY2FsIHZhbHVlIGZvciBlYXN5IHBhcnNpbmcuXG4gICAgICAgIC8vIEludmVydCBjb25uZWN0aW9uIGZvciBSVEwgc2xpZGVycywgc28gdGhhdCB0aGUgcHJvcGVyXG4gICAgICAgIC8vIGhhbmRsZXMgZ2V0IHRoZSBjb25uZWN0L2JhY2tncm91bmQgY2xhc3Nlcy5cbiAgICAgICAgc3dpdGNoIChlbnRyeSkge1xuICAgICAgICAgICAgY2FzZSBcImx0clwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5kaXIgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInJ0bFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5kaXIgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdkaXJlY3Rpb24nIG9wdGlvbiB3YXMgbm90IHJlY29nbml6ZWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEJlaGF2aW91cihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIE1ha2Ugc3VyZSB0aGUgaW5wdXQgaXMgYSBzdHJpbmcuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2JlaGF2aW91cicgbXVzdCBiZSBhIHN0cmluZyBjb250YWluaW5nIG9wdGlvbnMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIHN0cmluZyBjb250YWlucyBhbnkga2V5d29yZHMuXG4gICAgICAgIC8vIE5vbmUgYXJlIHJlcXVpcmVkLlxuICAgICAgICB2YXIgdGFwID0gZW50cnkuaW5kZXhPZihcInRhcFwiKSA+PSAwO1xuICAgICAgICB2YXIgZHJhZyA9IGVudHJ5LmluZGV4T2YoXCJkcmFnXCIpID49IDA7XG4gICAgICAgIHZhciBmaXhlZCA9IGVudHJ5LmluZGV4T2YoXCJmaXhlZFwiKSA+PSAwO1xuICAgICAgICB2YXIgc25hcCA9IGVudHJ5LmluZGV4T2YoXCJzbmFwXCIpID49IDA7XG4gICAgICAgIHZhciBob3ZlciA9IGVudHJ5LmluZGV4T2YoXCJob3ZlclwiKSA+PSAwO1xuICAgICAgICB2YXIgdW5jb25zdHJhaW5lZCA9IGVudHJ5LmluZGV4T2YoXCJ1bmNvbnN0cmFpbmVkXCIpID49IDA7XG5cbiAgICAgICAgaWYgKGZpeGVkKSB7XG4gICAgICAgICAgICBpZiAocGFyc2VkLmhhbmRsZXMgIT09IDIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdmaXhlZCcgYmVoYXZpb3VyIG11c3QgYmUgdXNlZCB3aXRoIDIgaGFuZGxlc1wiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXNlIG1hcmdpbiB0byBlbmZvcmNlIGZpeGVkIHN0YXRlXG4gICAgICAgICAgICB0ZXN0TWFyZ2luKHBhcnNlZCwgcGFyc2VkLnN0YXJ0WzFdIC0gcGFyc2VkLnN0YXJ0WzBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1bmNvbnN0cmFpbmVkICYmIChwYXJzZWQubWFyZ2luIHx8IHBhcnNlZC5saW1pdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3VuY29uc3RyYWluZWQnIGJlaGF2aW91ciBjYW5ub3QgYmUgdXNlZCB3aXRoIG1hcmdpbiBvciBsaW1pdFwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmV2ZW50cyA9IHtcbiAgICAgICAgICAgIHRhcDogdGFwIHx8IHNuYXAsXG4gICAgICAgICAgICBkcmFnOiBkcmFnLFxuICAgICAgICAgICAgZml4ZWQ6IGZpeGVkLFxuICAgICAgICAgICAgc25hcDogc25hcCxcbiAgICAgICAgICAgIGhvdmVyOiBob3ZlcixcbiAgICAgICAgICAgIHVuY29uc3RyYWluZWQ6IHVuY29uc3RyYWluZWRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0VG9vbHRpcHMocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcyA9IFtdO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnNlZC5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMucHVzaCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcyA9IGFzQXJyYXkoZW50cnkpO1xuXG4gICAgICAgICAgICBpZiAocGFyc2VkLnRvb2x0aXBzLmxlbmd0aCAhPT0gcGFyc2VkLmhhbmRsZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IG11c3QgcGFzcyBhIGZvcm1hdHRlciBmb3IgYWxsIGhhbmRsZXMuXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYXJzZWQudG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbihmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwiYm9vbGVhblwiICYmXG4gICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZm9ybWF0dGVyICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBmb3JtYXR0ZXIudG8gIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndG9vbHRpcHMnIG11c3QgYmUgcGFzc2VkIGEgZm9ybWF0dGVyIG9yICdmYWxzZScuXCIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFyaWFGb3JtYXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQuYXJpYUZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5mb3JtYXQgPSBlbnRyeTtcbiAgICAgICAgdmFsaWRhdGVGb3JtYXQoZW50cnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RLZXlib2FyZFN1cHBvcnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQua2V5Ym9hcmRTdXBwb3J0ID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2tleWJvYXJkU3VwcG9ydCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3REb2N1bWVudEVsZW1lbnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIGFkdmFuY2VkIG9wdGlvbi4gUGFzc2VkIHZhbHVlcyBhcmUgdXNlZCB3aXRob3V0IHZhbGlkYXRpb24uXG4gICAgICAgIHBhcnNlZC5kb2N1bWVudEVsZW1lbnQgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzUHJlZml4KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIiAmJiBlbnRyeSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Nzc1ByZWZpeCcgbXVzdCBiZSBhIHN0cmluZyBvciBgZmFsc2VgLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5jc3NQcmVmaXggPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q3NzQ2xhc3NlcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Nzc0NsYXNzZXMnIG11c3QgYmUgYW4gb2JqZWN0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgcGFyc2VkLmNzc1ByZWZpeCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSB7fTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlbnRyeS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzW2tleV0gPSBwYXJzZWQuY3NzUHJlZml4ICsgZW50cnlba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhcnNlZC5jc3NDbGFzc2VzID0gZW50cnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUZXN0IGFsbCBkZXZlbG9wZXIgc2V0dGluZ3MgYW5kIHBhcnNlIHRvIGFzc3VtcHRpb24tc2FmZSB2YWx1ZXMuXG4gICAgZnVuY3Rpb24gdGVzdE9wdGlvbnMob3B0aW9ucykge1xuICAgICAgICAvLyBUbyBwcm92ZSBhIGZpeCBmb3IgIzUzNywgZnJlZXplIG9wdGlvbnMgaGVyZS5cbiAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBpcyBtb2RpZmllZCwgYW4gZXJyb3Igd2lsbCBiZSB0aHJvd24uXG4gICAgICAgIC8vIE9iamVjdC5mcmVlemUob3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIHBhcnNlZCA9IHtcbiAgICAgICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgICAgIGxpbWl0OiAwLFxuICAgICAgICAgICAgcGFkZGluZzogMCxcbiAgICAgICAgICAgIGFuaW1hdGU6IHRydWUsXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogMzAwLFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogZGVmYXVsdEZvcm1hdHRlcixcbiAgICAgICAgICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdHRlclxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRlc3RzIGFyZSBleGVjdXRlZCBpbiB0aGUgb3JkZXIgdGhleSBhcmUgcHJlc2VudGVkIGhlcmUuXG4gICAgICAgIHZhciB0ZXN0cyA9IHtcbiAgICAgICAgICAgIHN0ZXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTdGVwIH0sXG4gICAgICAgICAgICBzdGFydDogeyByOiB0cnVlLCB0OiB0ZXN0U3RhcnQgfSxcbiAgICAgICAgICAgIGNvbm5lY3Q6IHsgcjogdHJ1ZSwgdDogdGVzdENvbm5lY3QgfSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogeyByOiB0cnVlLCB0OiB0ZXN0RGlyZWN0aW9uIH0sXG4gICAgICAgICAgICBzbmFwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0U25hcCB9LFxuICAgICAgICAgICAgYW5pbWF0ZTogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGUgfSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24gfSxcbiAgICAgICAgICAgIHJhbmdlOiB7IHI6IHRydWUsIHQ6IHRlc3RSYW5nZSB9LFxuICAgICAgICAgICAgb3JpZW50YXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RPcmllbnRhdGlvbiB9LFxuICAgICAgICAgICAgbWFyZ2luOiB7IHI6IGZhbHNlLCB0OiB0ZXN0TWFyZ2luIH0sXG4gICAgICAgICAgICBsaW1pdDogeyByOiBmYWxzZSwgdDogdGVzdExpbWl0IH0sXG4gICAgICAgICAgICBwYWRkaW5nOiB7IHI6IGZhbHNlLCB0OiB0ZXN0UGFkZGluZyB9LFxuICAgICAgICAgICAgYmVoYXZpb3VyOiB7IHI6IHRydWUsIHQ6IHRlc3RCZWhhdmlvdXIgfSxcbiAgICAgICAgICAgIGFyaWFGb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RBcmlhRm9ybWF0IH0sXG4gICAgICAgICAgICBmb3JtYXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RGb3JtYXQgfSxcbiAgICAgICAgICAgIHRvb2x0aXBzOiB7IHI6IGZhbHNlLCB0OiB0ZXN0VG9vbHRpcHMgfSxcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogeyByOiB0cnVlLCB0OiB0ZXN0S2V5Ym9hcmRTdXBwb3J0IH0sXG4gICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQ6IHsgcjogZmFsc2UsIHQ6IHRlc3REb2N1bWVudEVsZW1lbnQgfSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzUHJlZml4IH0sXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NDbGFzc2VzIH1cbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBjb25uZWN0OiBmYWxzZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbjogXCJsdHJcIixcbiAgICAgICAgICAgIGJlaGF2aW91cjogXCJ0YXBcIixcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgIGtleWJvYXJkU3VwcG9ydDogdHJ1ZSxcbiAgICAgICAgICAgIGNzc1ByZWZpeDogXCJub1VpLVwiLFxuICAgICAgICAgICAgY3NzQ2xhc3Nlczoge1xuICAgICAgICAgICAgICAgIHRhcmdldDogXCJ0YXJnZXRcIixcbiAgICAgICAgICAgICAgICBiYXNlOiBcImJhc2VcIixcbiAgICAgICAgICAgICAgICBvcmlnaW46IFwib3JpZ2luXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBcImhhbmRsZVwiLFxuICAgICAgICAgICAgICAgIGhhbmRsZUxvd2VyOiBcImhhbmRsZS1sb3dlclwiLFxuICAgICAgICAgICAgICAgIGhhbmRsZVVwcGVyOiBcImhhbmRsZS11cHBlclwiLFxuICAgICAgICAgICAgICAgIHRvdWNoQXJlYTogXCJ0b3VjaC1hcmVhXCIsXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbDogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgdmVydGljYWw6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiBcImJhY2tncm91bmRcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0OiBcImNvbm5lY3RcIixcbiAgICAgICAgICAgICAgICBjb25uZWN0czogXCJjb25uZWN0c1wiLFxuICAgICAgICAgICAgICAgIGx0cjogXCJsdHJcIixcbiAgICAgICAgICAgICAgICBydGw6IFwicnRsXCIsXG4gICAgICAgICAgICAgICAgZHJhZ2dhYmxlOiBcImRyYWdnYWJsZVwiLFxuICAgICAgICAgICAgICAgIGRyYWc6IFwic3RhdGUtZHJhZ1wiLFxuICAgICAgICAgICAgICAgIHRhcDogXCJzdGF0ZS10YXBcIixcbiAgICAgICAgICAgICAgICBhY3RpdmU6IFwiYWN0aXZlXCIsXG4gICAgICAgICAgICAgICAgdG9vbHRpcDogXCJ0b29sdGlwXCIsXG4gICAgICAgICAgICAgICAgcGlwczogXCJwaXBzXCIsXG4gICAgICAgICAgICAgICAgcGlwc0hvcml6b250YWw6IFwicGlwcy1ob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgcGlwc1ZlcnRpY2FsOiBcInBpcHMtdmVydGljYWxcIixcbiAgICAgICAgICAgICAgICBtYXJrZXI6IFwibWFya2VyXCIsXG4gICAgICAgICAgICAgICAgbWFya2VySG9yaXpvbnRhbDogXCJtYXJrZXItaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAgICAgIG1hcmtlclZlcnRpY2FsOiBcIm1hcmtlci12ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIG1hcmtlck5vcm1hbDogXCJtYXJrZXItbm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyTGFyZ2U6IFwibWFya2VyLWxhcmdlXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyU3ViOiBcIm1hcmtlci1zdWJcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlSG9yaXpvbnRhbDogXCJ2YWx1ZS1ob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVWZXJ0aWNhbDogXCJ2YWx1ZS12ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlTm9ybWFsOiBcInZhbHVlLW5vcm1hbFwiLFxuICAgICAgICAgICAgICAgIHZhbHVlTGFyZ2U6IFwidmFsdWUtbGFyZ2VcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVN1YjogXCJ2YWx1ZS1zdWJcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEFyaWFGb3JtYXQgZGVmYXVsdHMgdG8gcmVndWxhciBmb3JtYXQsIGlmIGFueS5cbiAgICAgICAgaWYgKG9wdGlvbnMuZm9ybWF0ICYmICFvcHRpb25zLmFyaWFGb3JtYXQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuYXJpYUZvcm1hdCA9IG9wdGlvbnMuZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUnVuIGFsbCBvcHRpb25zIHRocm91Z2ggYSB0ZXN0aW5nIG1lY2hhbmlzbSB0byBlbnN1cmUgY29ycmVjdFxuICAgICAgICAvLyBpbnB1dC4gSXQgc2hvdWxkIGJlIG5vdGVkIHRoYXQgb3B0aW9ucyBtaWdodCBnZXQgbW9kaWZpZWQgdG9cbiAgICAgICAgLy8gYmUgaGFuZGxlZCBwcm9wZXJseS4gRS5nLiB3cmFwcGluZyBpbnRlZ2VycyBpbiBhcnJheXMuXG4gICAgICAgIE9iamVjdC5rZXlzKHRlc3RzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBvcHRpb24gaXNuJ3Qgc2V0LCBidXQgaXQgaXMgcmVxdWlyZWQsIHRocm93IGFuIGVycm9yLlxuICAgICAgICAgICAgaWYgKCFpc1NldChvcHRpb25zW25hbWVdKSAmJiBkZWZhdWx0c1tuYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlc3RzW25hbWVdLnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnXCIgKyBuYW1lICsgXCInIGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGVzdHNbbmFtZV0udChwYXJzZWQsICFpc1NldChvcHRpb25zW25hbWVdKSA/IGRlZmF1bHRzW25hbWVdIDogb3B0aW9uc1tuYW1lXSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZvcndhcmQgcGlwcyBvcHRpb25zXG4gICAgICAgIHBhcnNlZC5waXBzID0gb3B0aW9ucy5waXBzO1xuXG4gICAgICAgIC8vIEFsbCByZWNlbnQgYnJvd3NlcnMgYWNjZXB0IHVucHJlZml4ZWQgdHJhbnNmb3JtLlxuICAgICAgICAvLyBXZSBuZWVkIC1tcy0gZm9yIElFOSBhbmQgLXdlYmtpdC0gZm9yIG9sZGVyIEFuZHJvaWQ7XG4gICAgICAgIC8vIEFzc3VtZSB1c2Ugb2YgLXdlYmtpdC0gaWYgdW5wcmVmaXhlZCBhbmQgLW1zLSBhcmUgbm90IHN1cHBvcnRlZC5cbiAgICAgICAgLy8gaHR0cHM6Ly9jYW5pdXNlLmNvbS8jZmVhdD10cmFuc2Zvcm1zMmRcbiAgICAgICAgdmFyIGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICB2YXIgbXNQcmVmaXggPSBkLnN0eWxlLm1zVHJhbnNmb3JtICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBub1ByZWZpeCA9IGQuc3R5bGUudHJhbnNmb3JtICE9PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgcGFyc2VkLnRyYW5zZm9ybVJ1bGUgPSBub1ByZWZpeCA/IFwidHJhbnNmb3JtXCIgOiBtc1ByZWZpeCA/IFwibXNUcmFuc2Zvcm1cIiA6IFwid2Via2l0VHJhbnNmb3JtXCI7XG5cbiAgICAgICAgLy8gUGlwcyBkb24ndCBtb3ZlLCBzbyB3ZSBjYW4gcGxhY2UgdGhlbSB1c2luZyBsZWZ0L3RvcC5cbiAgICAgICAgdmFyIHN0eWxlcyA9IFtbXCJsZWZ0XCIsIFwidG9wXCJdLCBbXCJyaWdodFwiLCBcImJvdHRvbVwiXV07XG5cbiAgICAgICAgcGFyc2VkLnN0eWxlID0gc3R5bGVzW3BhcnNlZC5kaXJdW3BhcnNlZC5vcnRdO1xuXG4gICAgICAgIHJldHVybiBwYXJzZWQ7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIGZ1bmN0aW9uIHNjb3BlKHRhcmdldCwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gZ2V0QWN0aW9ucygpO1xuICAgICAgICB2YXIgc3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgPSBnZXRTdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSgpO1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gc3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUgJiYgZ2V0U3VwcG9ydHNQYXNzaXZlKCk7XG5cbiAgICAgICAgLy8gQWxsIHZhcmlhYmxlcyBsb2NhbCB0byAnc2NvcGUnIGFyZSBwcmVmaXhlZCB3aXRoICdzY29wZV8nXG5cbiAgICAgICAgLy8gU2xpZGVyIERPTSBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICB2YXIgc2NvcGVfQmFzZTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgIHZhciBzY29wZV9Db25uZWN0cztcbiAgICAgICAgdmFyIHNjb3BlX1BpcHM7XG4gICAgICAgIHZhciBzY29wZV9Ub29sdGlwcztcblxuICAgICAgICAvLyBTbGlkZXIgc3RhdGUgdmFsdWVzXG4gICAgICAgIHZhciBzY29wZV9TcGVjdHJ1bSA9IG9wdGlvbnMuc3BlY3RydW07XG4gICAgICAgIHZhciBzY29wZV9WYWx1ZXMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlTnVtYmVycyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ID0gMDtcbiAgICAgICAgdmFyIHNjb3BlX0V2ZW50cyA9IHt9O1xuXG4gICAgICAgIC8vIEV4cG9zZWQgQVBJXG4gICAgICAgIHZhciBzY29wZV9TZWxmO1xuXG4gICAgICAgIC8vIERvY3VtZW50IE5vZGVzXG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudCA9IHRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgICB2YXIgc2NvcGVfRG9jdW1lbnRFbGVtZW50ID0gb3B0aW9ucy5kb2N1bWVudEVsZW1lbnQgfHwgc2NvcGVfRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgc2NvcGVfQm9keSA9IHNjb3BlX0RvY3VtZW50LmJvZHk7XG5cbiAgICAgICAgLy8gUGlwcyBjb25zdGFudHNcbiAgICAgICAgdmFyIFBJUFNfTk9ORSA9IC0xO1xuICAgICAgICB2YXIgUElQU19OT19WQUxVRSA9IDA7XG4gICAgICAgIHZhciBQSVBTX0xBUkdFX1ZBTFVFID0gMTtcbiAgICAgICAgdmFyIFBJUFNfU01BTExfVkFMVUUgPSAyO1xuXG4gICAgICAgIC8vIEZvciBob3Jpem9udGFsIHNsaWRlcnMgaW4gc3RhbmRhcmQgbHRyIGRvY3VtZW50cyxcbiAgICAgICAgLy8gbWFrZSAubm9VaS1vcmlnaW4gb3ZlcmZsb3cgdG8gdGhlIGxlZnQgc28gdGhlIGRvY3VtZW50IGRvZXNuJ3Qgc2Nyb2xsLlxuICAgICAgICB2YXIgc2NvcGVfRGlyT2Zmc2V0ID0gc2NvcGVfRG9jdW1lbnQuZGlyID09PSBcInJ0bFwiIHx8IG9wdGlvbnMub3J0ID09PSAxID8gMCA6IDEwMDtcblxuICAgICAgICAvLyBDcmVhdGVzIGEgbm9kZSwgYWRkcyBpdCB0byB0YXJnZXQsIHJldHVybnMgdGhlIG5ldyBub2RlLlxuICAgICAgICBmdW5jdGlvbiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBjbGFzc05hbWUpIHtcbiAgICAgICAgICAgIHZhciBkaXYgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoZGl2LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRUYXJnZXQuYXBwZW5kQ2hpbGQoZGl2KTtcblxuICAgICAgICAgICAgcmV0dXJuIGRpdjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGVuZCBhIG9yaWdpbiB0byB0aGUgYmFzZVxuICAgICAgICBmdW5jdGlvbiBhZGRPcmlnaW4oYmFzZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgb3JpZ2luID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5vcmlnaW4pO1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGFkZE5vZGVUbyhvcmlnaW4sIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGUpO1xuXG4gICAgICAgICAgICBhZGROb2RlVG8oaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMudG91Y2hBcmVhKTtcblxuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImRhdGEtaGFuZGxlXCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmtleWJvYXJkU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0hUTUwvR2xvYmFsX2F0dHJpYnV0ZXMvdGFiaW5kZXhcbiAgICAgICAgICAgICAgICAvLyAwID0gZm9jdXNhYmxlIGFuZCByZWFjaGFibGVcbiAgICAgICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiwgXCIwXCIpO1xuICAgICAgICAgICAgICAgIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRLZXlkb3duKGV2ZW50LCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInNsaWRlclwiKTtcbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLW9yaWVudGF0aW9uXCIsIG9wdGlvbnMub3J0ID8gXCJ2ZXJ0aWNhbFwiIDogXCJob3Jpem9udGFsXCIpO1xuXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlTG93ZXIpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVOdW1iZXIgPT09IG9wdGlvbnMuaGFuZGxlcyAtIDEpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVVcHBlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBvcmlnaW47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbnNlcnQgbm9kZXMgZm9yIGNvbm5lY3QgZWxlbWVudHNcbiAgICAgICAgZnVuY3Rpb24gYWRkQ29ubmVjdChiYXNlLCBhZGQpIHtcbiAgICAgICAgICAgIGlmICghYWRkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBoYW5kbGVzIHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgZnVuY3Rpb24gYWRkRWxlbWVudHMoY29ubmVjdE9wdGlvbnMsIGJhc2UpIHtcbiAgICAgICAgICAgIHZhciBjb25uZWN0QmFzZSA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdHMpO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzID0gW107XG4gICAgICAgICAgICBzY29wZV9Db25uZWN0cyA9IFtdO1xuXG4gICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zWzBdKSk7XG5cbiAgICAgICAgICAgIC8vIFs6Ojo6Tz09PT1PPT09PU89PT09XVxuICAgICAgICAgICAgLy8gY29ubmVjdE9wdGlvbnMgPSBbMCwgMSwgMSwgMV1cblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIC8vIEtlZXAgYSBsaXN0IG9mIGFsbCBhZGRlZCBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMucHVzaChhZGRPcmlnaW4oYmFzZSwgaSkpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnNbaV0gPSBpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbaSArIDFdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJbml0aWFsaXplIGEgc2luZ2xlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gYWRkU2xpZGVyKGFkZFRhcmdldCkge1xuICAgICAgICAgICAgLy8gQXBwbHkgY2xhc3NlcyBhbmQgZGF0YSB0byB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFyZ2V0KTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMubHRyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMucnRsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMub3J0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuaG9yaXpvbnRhbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZlcnRpY2FsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5iYXNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZFRvb2x0aXAoaGFuZGxlLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGhhbmRsZS5maXJzdENoaWxkLCBvcHRpb25zLmNzc0NsYXNzZXMudG9vbHRpcCk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpc1NsaWRlckRpc2FibGVkKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1RhcmdldC5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERpc2FibGUgdGhlIHNsaWRlciBkcmFnZ2luZyBpZiBhbnkgaGFuZGxlIGlzIGRpc2FibGVkXG4gICAgICAgIGZ1bmN0aW9uIGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlT3JpZ2luID0gc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU9yaWdpbi5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVRvb2x0aXBzKCkge1xuICAgICAgICAgICAgaWYgKHNjb3BlX1Rvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRXZlbnQoXCJ1cGRhdGUudG9vbHRpcHNcIik7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbih0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHRvb2x0aXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHRvb2x0aXBzIG9wdGlvbiBpcyBhIHNob3J0aGFuZCBmb3IgdXNpbmcgdGhlICd1cGRhdGUnIGV2ZW50LlxuICAgICAgICBmdW5jdGlvbiB0b29sdGlwcygpIHtcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzKCk7XG5cbiAgICAgICAgICAgIC8vIFRvb2x0aXBzIGFyZSBhZGRlZCB3aXRoIG9wdGlvbnMudG9vbHRpcHMgaW4gb3JpZ2luYWwgb3JkZXIuXG4gICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IHNjb3BlX0hhbmRsZXMubWFwKGFkZFRvb2x0aXApO1xuXG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGUudG9vbHRpcHNcIiwgZnVuY3Rpb24odmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCkge1xuICAgICAgICAgICAgICAgIGlmICghc2NvcGVfVG9vbHRpcHNbaGFuZGxlTnVtYmVyXSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gdmFsdWVzW2hhbmRsZU51bWJlcl07XG5cbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZFZhbHVlID0gb3B0aW9ucy50b29sdGlwc1toYW5kbGVOdW1iZXJdLnRvKHVuZW5jb2RlZFtoYW5kbGVOdW1iZXJdKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdLmlubmVySFRNTCA9IGZvcm1hdHRlZFZhbHVlO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhcmlhKCkge1xuICAgICAgICAgICAgYmluZEV2ZW50KFwidXBkYXRlXCIsIGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQsIHRhcCwgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIEFyaWEgVmFsdWVzIGZvciBhbGwgaGFuZGxlcywgYXMgYSBjaGFuZ2UgaW4gb25lIGNoYW5nZXMgbWluIGFuZCBtYXggdmFsdWVzIGZvciB0aGUgbmV4dC5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW4gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDAsIHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4ID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAxMDAsIHRydWUsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwb3NpdGlvbnNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdHRlZCB2YWx1ZSBmb3IgZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IG9wdGlvbnMuYXJpYUZvcm1hdC50byh1bmVuY29kZWRbaW5kZXhdKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBNYXAgdG8gc2xpZGVyIHJhbmdlIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWluKS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWF4KS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobm93KS50b0ZpeGVkKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWluXCIsIG1pbik7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsIG1heCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIG5vdyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3JvdXAobW9kZSwgdmFsdWVzLCBzdGVwcGVkKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIHJhbmdlLlxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicmFuZ2VcIiB8fCBtb2RlID09PSBcInN0ZXBzXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0ueFZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwiY291bnRcIikge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3ZhbHVlcycgKD49IDIpIHJlcXVpcmVkIGZvciBtb2RlICdjb3VudCcuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERpdmlkZSAwIC0gMTAwIGluICdjb3VudCcgcGFydHMuXG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gdmFsdWVzIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIgc3ByZWFkID0gMTAwIC8gaW50ZXJ2YWw7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8vIExpc3QgdGhlc2UgcGFydHMgYW5kIGhhdmUgdGhlbSBoYW5kbGVkIGFzICdwb3NpdGlvbnMnLlxuICAgICAgICAgICAgICAgIHdoaWxlIChpbnRlcnZhbC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbnRlcnZhbF0gPSBpbnRlcnZhbCAqIHNwcmVhZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCgxMDApO1xuXG4gICAgICAgICAgICAgICAgbW9kZSA9IFwicG9zaXRpb25zXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInBvc2l0aW9uc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFwIGFsbCBwZXJjZW50YWdlcyB0byBvbi1yYW5nZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzdGVwcGVkID8gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInZhbHVlc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIG11c3QgYmUgc3RlcHBlZCwgaXQgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgcGVyY2VudGFnZSBmaXJzdC5cbiAgICAgICAgICAgICAgICBpZiAoc3RlcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0byBwZXJjZW50YWdlLCBhcHBseSBzdGVwLCByZXR1cm4gdG8gdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAoc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh2YWx1ZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVNwcmVhZChkZW5zaXR5LCBtb2RlLCBncm91cCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gc2FmZUluY3JlbWVudCh2YWx1ZSwgaW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgZmxvYXRpbmcgcG9pbnQgdmFyaWFuY2UgYnkgZHJvcHBpbmcgdGhlIHNtYWxsZXN0IGRlY2ltYWwgcGxhY2VzLlxuICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUgKyBpbmNyZW1lbnQpLnRvRml4ZWQoNykgLyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGZpcnN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB2YXIgbGFzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsW3Njb3BlX1NwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB2YXIgaWdub3JlRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVMYXN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgcHJldlBjdCA9IDA7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGdyb3VwLCBzb3J0IGl0IGFuZCBmaWx0ZXIgYXdheSBhbGwgZHVwbGljYXRlcy5cbiAgICAgICAgICAgIGdyb3VwID0gdW5pcXVlKFxuICAgICAgICAgICAgICAgIGdyb3VwLnNsaWNlKCkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSByYW5nZSBzdGFydHMgd2l0aCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChncm91cFswXSAhPT0gZmlyc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAudW5zaGlmdChmaXJzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGlrZXdpc2UgZm9yIHRoZSBsYXN0IG9uZS5cbiAgICAgICAgICAgIGlmIChncm91cFtncm91cC5sZW5ndGggLSAxXSAhPT0gbGFzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC5wdXNoKGxhc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVMYXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ3JvdXAuZm9yRWFjaChmdW5jdGlvbihjdXJyZW50LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdGVwIGFuZCB0aGUgbG93ZXIgKyB1cHBlciBwb3NpdGlvbnMuXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIHE7XG4gICAgICAgICAgICAgICAgdmFyIGxvdyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhpZ2ggPSBncm91cFtpbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHBjdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIHBjdFBvcztcbiAgICAgICAgICAgICAgICB2YXIgdHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWxTdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3RlcHMgPSBtb2RlID09PSBcInN0ZXBzXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nICdzdGVwcycgbW9kZSwgdXNlIHRoZSBwcm92aWRlZCBzdGVwcy5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlJ2xsIHN0ZXAgb24gdG8gdGhlIG5leHQgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RlcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLnhOdW1TdGVwc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBhICdmdWxsJyBzdGVwLlxuICAgICAgICAgICAgICAgIGlmICghc3RlcCkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gaGlnaCAtIGxvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMb3cgY2FuIGJlIDAsIHNvIHRlc3QgZm9yIGZhbHNlLiBJZiBoaWdoIGlzIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAvLyB3ZSBhcmUgYXQgdGhlIGxhc3Qgc3VicmFuZ2UuIEluZGV4IDAgaXMgYWxyZWFkeSBoYW5kbGVkLlxuICAgICAgICAgICAgICAgIGlmIChsb3cgPT09IGZhbHNlIHx8IGhpZ2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHN0ZXAgaXNuJ3QgMCwgd2hpY2ggd291bGQgY2F1c2UgYW4gaW5maW5pdGUgbG9vcCAoIzY1NClcbiAgICAgICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcblxuICAgICAgICAgICAgICAgIC8vIEZpbmQgYWxsIHN0ZXBzIGluIHRoZSBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gaGlnaDsgaSA9IHNhZmVJbmNyZW1lbnQoaSwgc3RlcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBwZXJjZW50YWdlIHZhbHVlIGZvciB0aGUgY3VycmVudCBzdGVwLFxuICAgICAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIHNpemUgZm9yIHRoZSBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgbmV3UGN0ID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyhpKTtcbiAgICAgICAgICAgICAgICAgICAgcGN0RGlmZmVyZW5jZSA9IG5ld1BjdCAtIHByZXZQY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgc3RlcHMgPSBwY3REaWZmZXJlbmNlIC8gZGVuc2l0eTtcbiAgICAgICAgICAgICAgICAgICAgcmVhbFN0ZXBzID0gTWF0aC5yb3VuZChzdGVwcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVGhpcyByYXRpbyByZXByZXNlbnRzIHRoZSBhbW91bnQgb2YgcGVyY2VudGFnZS1zcGFjZSBhIHBvaW50IGluZGljYXRlcy5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yIGEgZGVuc2l0eSAxIHRoZSBwb2ludHMvcGVyY2VudGFnZSA9IDEuIEZvciBkZW5zaXR5IDIsIHRoYXQgcGVyY2VudGFnZSBuZWVkcyB0byBiZSByZS1kaXZpZGVkLlxuICAgICAgICAgICAgICAgICAgICAvLyBSb3VuZCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgdG8gYW4gZXZlbiBudW1iZXIsIHRoZW4gZGl2aWRlIGJ5IHR3b1xuICAgICAgICAgICAgICAgICAgICAvLyB0byBzcHJlYWQgdGhlIG9mZnNldCBvbiBib3RoIHNpZGVzIG9mIHRoZSByYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgc3RlcFNpemUgPSBwY3REaWZmZXJlbmNlIC8gcmVhbFN0ZXBzO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIERpdmlkZSBhbGwgcG9pbnRzIGV2ZW5seSwgYWRkaW5nIHRoZSBjb3JyZWN0IG51bWJlciB0byB0aGlzIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICAvLyBSdW4gdXAgdG8gPD0gc28gdGhhdCAxMDAlIGdldHMgYSBwb2ludCwgZXZlbnQgaWYgaWdub3JlTGFzdCBpcyBzZXQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocSA9IDE7IHEgPD0gcmVhbFN0ZXBzOyBxICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSByYXRpbyBiZXR3ZWVuIHRoZSByb3VuZGVkIHZhbHVlIGFuZCB0aGUgYWN0dWFsIHNpemUgbWlnaHQgYmUgfjElIG9mZi5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENvcnJlY3QgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IGJ5IHRoZSBudW1iZXIgb2YgcG9pbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwZXIgc3VicmFuZ2UuIGRlbnNpdHkgPSAxIHdpbGwgcmVzdWx0IGluIDEwMCBwb2ludHMgb24gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmdWxsIHJhbmdlLCAyIGZvciA1MCwgNCBmb3IgMjUsIGV0Yy5cbiAgICAgICAgICAgICAgICAgICAgICAgIHBjdFBvcyA9IHByZXZQY3QgKyBxICogc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleGVzW3BjdFBvcy50b0ZpeGVkKDUpXSA9IFtzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcocGN0UG9zKSwgMF07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIHBvaW50IHR5cGUuXG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSBncm91cC5pbmRleE9mKGkpID4gLTEgPyBQSVBTX0xBUkdFX1ZBTFVFIDogaXNTdGVwcyA/IFBJUFNfU01BTExfVkFMVUUgOiBQSVBTX05PX1ZBTFVFO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEVuZm9yY2UgdGhlICdpZ25vcmVGaXJzdCcgb3B0aW9uIGJ5IG92ZXJ3cml0aW5nIHRoZSB0eXBlIGZvciAwLlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluZGV4ICYmIGlnbm9yZUZpcnN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPT09IGhpZ2ggJiYgaWdub3JlTGFzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlICd0eXBlJyBvZiB0aGlzIHBvaW50LiAwID0gcGxhaW4sIDEgPSByZWFsIHZhbHVlLCAyID0gc3RlcCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbbmV3UGN0LnRvRml4ZWQoNSldID0gW2ksIHR5cGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZXJjZW50YWdlIGNvdW50LlxuICAgICAgICAgICAgICAgICAgICBwcmV2UGN0ID0gbmV3UGN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXJGdW5jLCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19OT19WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVOb3JtYWw7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTGFyZ2U7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfU01BTExfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlU3ViO1xuXG4gICAgICAgICAgICB2YXIgbWFya2VyU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTk9fVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlck5vcm1hbDtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckxhcmdlO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19TTUFMTF9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyU3ViO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlVmVydGljYWxdO1xuICAgICAgICAgICAgdmFyIG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMubWFya2VySG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtcblxuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHMpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5vcnQgPT09IDAgPyBvcHRpb25zLmNzc0NsYXNzZXMucGlwc0hvcml6b250YWwgOiBvcHRpb25zLmNzc0NsYXNzZXMucGlwc1ZlcnRpY2FsKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhc3Nlcyh0eXBlLCBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHNvdXJjZSA9PT0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBvcmllbnRhdGlvbkNsYXNzZXMgPSBhID8gdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgOiBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXM7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVDbGFzc2VzID0gYSA/IHZhbHVlU2l6ZUNsYXNzZXMgOiBtYXJrZXJTaXplQ2xhc3NlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgKyBcIiBcIiArIG9yaWVudGF0aW9uQ2xhc3Nlc1tvcHRpb25zLm9ydF0gKyBcIiBcIiArIHNpemVDbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRTcHJlYWQob2Zmc2V0LCB2YWx1ZSwgdHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBmaWx0ZXIgZnVuY3Rpb24sIGlmIGl0IGlzIHNldC5cbiAgICAgICAgICAgICAgICB0eXBlID0gZmlsdGVyRnVuYyA/IGZpbHRlckZ1bmModmFsdWUsIHR5cGUpIDogdHlwZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBQSVBTX05PTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBmb3IgZXZlcnkgcG9pbnRcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXIpO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcblxuICAgICAgICAgICAgICAgIC8vIFZhbHVlcyBhcmUgb25seSBhcHBlbmRlZCBmb3IgcG9pbnRzIG1hcmtlZCAnMScgb3IgJzInLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlID4gUElQU19OT19WQUxVRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBmb3JtYXR0ZXIudG8odmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwZW5kIGFsbCBwb2ludHMuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcHJlYWQpLmZvckVhY2goZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYWRkU3ByZWFkKG9mZnNldCwgc3ByZWFkW29mZnNldF1bMF0sIHNwcmVhZFtvZmZzZXRdWzFdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfUGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2NvcGVfUGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfUGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwaXBzKGdyaWQpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNjY5XG4gICAgICAgICAgICByZW1vdmVQaXBzKCk7XG5cbiAgICAgICAgICAgIHZhciBtb2RlID0gZ3JpZC5tb2RlO1xuICAgICAgICAgICAgdmFyIGRlbnNpdHkgPSBncmlkLmRlbnNpdHkgfHwgMTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBncmlkLmZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBncmlkLnZhbHVlcyB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzdGVwcGVkID0gZ3JpZC5zdGVwcGVkIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ2V0R3JvdXAobW9kZSwgdmFsdWVzLCBzdGVwcGVkKTtcbiAgICAgICAgICAgIHZhciBzcHJlYWQgPSBnZW5lcmF0ZVNwcmVhZChkZW5zaXR5LCBtb2RlLCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gZ3JpZC5mb3JtYXQgfHwge1xuICAgICAgICAgICAgICAgIHRvOiBNYXRoLnJvdW5kXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzY29wZV9QaXBzID0gc2NvcGVfVGFyZ2V0LmFwcGVuZENoaWxkKGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXIsIGZvcm1hdCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfUGlwcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3J0aGFuZCBmb3IgYmFzZSBkaW1lbnNpb25zLlxuICAgICAgICBmdW5jdGlvbiBiYXNlU2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2NvcGVfQmFzZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBhbHQgPSBcIm9mZnNldFwiICsgW1wiV2lkdGhcIiwgXCJIZWlnaHRcIl1bb3B0aW9ucy5vcnRdO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMub3J0ID09PSAwID8gcmVjdC53aWR0aCB8fCBzY29wZV9CYXNlW2FsdF0gOiByZWN0LmhlaWdodCB8fCBzY29wZV9CYXNlW2FsdF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVyIGZvciBhdHRhY2hpbmcgZXZlbnRzIHRyb3VnaCBhIHByb3h5LlxuICAgICAgICBmdW5jdGlvbiBhdHRhY2hFdmVudChldmVudHMsIGVsZW1lbnQsIGNhbGxiYWNrLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvICdmaWx0ZXInIGV2ZW50cyB0byB0aGUgc2xpZGVyLlxuICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhIG5vZGUsIG5vdCBhIG5vZGVMaXN0XG5cbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGZpeEV2ZW50KGUsIGRhdGEucGFnZU9mZnNldCwgZGF0YS50YXJnZXQgfHwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBmaXhFdmVudCByZXR1cm5zIGZhbHNlIGlmIHRoaXMgZXZlbnQgaGFzIGEgZGlmZmVyZW50IHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaGFuZGxpbmcgKG11bHRpLSkgdG91Y2ggZXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZG9Ob3RSZWplY3QgaXMgcGFzc2VkIGJ5IGFsbCBlbmQgZXZlbnRzIHRvIG1ha2Ugc3VyZSByZWxlYXNlZCB0b3VjaGVzXG4gICAgICAgICAgICAgICAgLy8gYXJlIG5vdCByZWplY3RlZCwgbGVhdmluZyB0aGUgc2xpZGVyIFwic3R1Y2tcIiB0byB0aGUgY3Vyc29yO1xuICAgICAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgYW4gYWN0aXZlICd0YXAnIHRyYW5zaXRpb24gaXMgdGFraW5nIHBsYWNlLlxuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXApICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gYWN0aW9ucy5zdGFydCAmJiBlLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaG92ZXIgJiYgZS5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAnc3VwcG9ydHNQYXNzaXZlJyBpcyBvbmx5IHRydWUgaWYgYSBicm93c2VyIGFsc28gc3VwcG9ydHMgdG91Y2gtYWN0aW9uOiBub25lIGluIENTUy5cbiAgICAgICAgICAgICAgICAvLyBpT1Mgc2FmYXJpIGRvZXMgbm90LCBzbyBpdCBkb2Vzbid0IGdldCB0byBiZW5lZml0IGZyb20gcGFzc2l2ZSBzY3JvbGxpbmcuIGlPUyBkb2VzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICAvLyB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbiwgYnV0IHRoYXQgYWxsb3dzIHBhbm5pbmcsIHdoaWNoIGJyZWFrc1xuICAgICAgICAgICAgICAgIC8vIHNsaWRlcnMgYWZ0ZXIgem9vbWluZy9vbiBub24tcmVzcG9uc2l2ZSBwYWdlcy5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzMxMTJcbiAgICAgICAgICAgICAgICBpZiAoIXN1cHBvcnRzUGFzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5jYWxjUG9pbnQgPSBlLnBvaW50c1tvcHRpb25zLm9ydF07XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBoYW5kbGVyIHdpdGggdGhlIGV2ZW50IFsgYW5kIGFkZGl0aW9uYWwgZGF0YSBdLlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGRhdGEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1ldGhvZHMgPSBbXTtcblxuICAgICAgICAgICAgLy8gQmluZCBhIGNsb3N1cmUgb24gdGhlIHRhcmdldCBmb3IgZXZlcnkgZXZlbnQgdHlwZS5cbiAgICAgICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBtZXRob2QsIHN1cHBvcnRzUGFzc2l2ZSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2UpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucHVzaChbZXZlbnROYW1lLCBtZXRob2RdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByb3ZpZGUgYSBjbGVhbiBldmVudCB3aXRoIHN0YW5kYXJkaXplZCBvZmZzZXQgdmFsdWVzLlxuICAgICAgICBmdW5jdGlvbiBmaXhFdmVudChlLCBwYWdlT2Zmc2V0LCBldmVudFRhcmdldCkge1xuICAgICAgICAgICAgLy8gRmlsdGVyIHRoZSBldmVudCB0byByZWdpc3RlciB0aGUgdHlwZSwgd2hpY2ggY2FuIGJlXG4gICAgICAgICAgICAvLyB0b3VjaCwgbW91c2Ugb3IgcG9pbnRlci4gT2Zmc2V0IGNoYW5nZXMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gbWFkZSBvbiBhbiBldmVudCBzcGVjaWZpYyBiYXNpcy5cbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudHlwZS5pbmRleE9mKFwidG91Y2hcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgbW91c2UgPSBlLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBlLnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPT09IDA7XG5cbiAgICAgICAgICAgIHZhciB4O1xuICAgICAgICAgICAgdmFyIHk7XG5cbiAgICAgICAgICAgIC8vIElFMTAgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgd2l0aCBhIHByZWZpeDtcbiAgICAgICAgICAgIGlmIChlLnR5cGUuaW5kZXhPZihcIk1TUG9pbnRlclwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBvaW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgb25seSB0aGluZyBvbmUgaGFuZGxlIHNob3VsZCBiZSBjb25jZXJuZWQgYWJvdXQgaXMgdGhlIHRvdWNoZXMgdGhhdCBvcmlnaW5hdGVkIG9uIHRvcCBvZiBpdC5cbiAgICAgICAgICAgIGlmICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgdHJ1ZSBpZiBhIHRvdWNoIG9yaWdpbmF0ZWQgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaE9uVGFyZ2V0ID0gZnVuY3Rpb24oY2hlY2tUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2hlY2tUb3VjaC50YXJnZXQgPT09IGV2ZW50VGFyZ2V0IHx8IGV2ZW50VGFyZ2V0LmNvbnRhaW5zKGNoZWNrVG91Y2gudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gSW4gdGhlIGNhc2Ugb2YgdG91Y2hzdGFydCBldmVudHMsIHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoZXJlIGlzIHN0aWxsIG5vIG1vcmUgdGhhbiBvbmVcbiAgICAgICAgICAgICAgICAvLyB0b3VjaCBvbiB0aGUgdGFyZ2V0IHNvIHdlIGxvb2sgYW1vbmdzdCBhbGwgdG91Y2hlcy5cbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09PSBcInRvdWNoc3RhcnRcIikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2hlcyA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbChlLnRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IHN1cHBvcnQgbW9yZSB0aGFuIG9uZSB0b3VjaCBwZXIgaGFuZGxlLlxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB4ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSW4gdGhlIG90aGVyIGNhc2VzLCBmaW5kIG9uIGNoYW5nZWRUb3VjaGVzIGlzIGVub3VnaC5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldFRvdWNoID0gQXJyYXkucHJvdG90eXBlLmZpbmQuY2FsbChlLmNoYW5nZWRUb3VjaGVzLCBpc1RvdWNoT25UYXJnZXQpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIENhbmNlbCBpZiB0aGUgdGFyZ2V0IHRvdWNoIGhhcyBub3QgbW92ZWQuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGFyZ2V0VG91Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaC5wYWdlWDtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRhcmdldFRvdWNoLnBhZ2VZO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQgfHwgZ2V0UGFnZU9mZnNldChzY29wZV9Eb2N1bWVudCk7XG5cbiAgICAgICAgICAgIGlmIChtb3VzZSB8fCBwb2ludGVyKSB7XG4gICAgICAgICAgICAgICAgeCA9IGUuY2xpZW50WCArIHBhZ2VPZmZzZXQueDtcbiAgICAgICAgICAgICAgICB5ID0gZS5jbGllbnRZICsgcGFnZU9mZnNldC55O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlLnBhZ2VPZmZzZXQgPSBwYWdlT2Zmc2V0O1xuICAgICAgICAgICAgZS5wb2ludHMgPSBbeCwgeV07XG4gICAgICAgICAgICBlLmN1cnNvciA9IG1vdXNlIHx8IHBvaW50ZXI7IC8vIEZpeCAjNDM1XG5cbiAgICAgICAgICAgIHJldHVybiBlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVHJhbnNsYXRlIGEgY29vcmRpbmF0ZSBpbiB0aGUgZG9jdW1lbnQgdG8gYSBwZXJjZW50YWdlIG9uIHRoZSBzbGlkZXJcbiAgICAgICAgZnVuY3Rpb24gY2FsY1BvaW50VG9QZXJjZW50YWdlKGNhbGNQb2ludCkge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY2FsY1BvaW50IC0gb2Zmc2V0KHNjb3BlX0Jhc2UsIG9wdGlvbnMub3J0KTtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChsb2NhdGlvbiAqIDEwMCkgLyBiYXNlU2l6ZSgpO1xuXG4gICAgICAgICAgICAvLyBDbGFtcCBwcm9wb3NhbCBiZXR3ZWVuIDAlIGFuZCAxMDAlXG4gICAgICAgICAgICAvLyBPdXQtb2YtYm91bmQgY29vcmRpbmF0ZXMgbWF5IG9jY3VyIHdoZW4gLm5vVWktYmFzZSBwc2V1ZG8tZWxlbWVudHNcbiAgICAgICAgICAgIC8vIGFyZSB1c2VkIChlLmcuIGNvbnRhaW5lZCBoYW5kbGVzIGZlYXR1cmUpXG4gICAgICAgICAgICBwcm9wb3NhbCA9IGxpbWl0KHByb3Bvc2FsKTtcblxuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gcHJvcG9zYWwgOiBwcm9wb3NhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmQgaGFuZGxlIGNsb3Nlc3QgdG8gYSBjZXJ0YWluIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBnZXRDbG9zZXN0SGFuZGxlKHByb3Bvc2FsKSB7XG4gICAgICAgICAgICB2YXIgY2xvc2VzdCA9IDEwMDtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBmYWxzZTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlZCBoYW5kbGVzIGFyZSBpZ25vcmVkXG4gICAgICAgICAgICAgICAgaWYgKGlzSGFuZGxlRGlzYWJsZWQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gTWF0aC5hYnMoc2NvcGVfTG9jYXRpb25zW2luZGV4XSAtIHByb3Bvc2FsKTtcblxuICAgICAgICAgICAgICAgIGlmIChwb3MgPCBjbG9zZXN0IHx8IChwb3MgPT09IDEwMCAmJiBjbG9zZXN0ID09PSAxMDApKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IGluZGV4O1xuICAgICAgICAgICAgICAgICAgICBjbG9zZXN0ID0gcG9zO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlTnVtYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZSAnZW5kJyB3aGVuIGEgbW91c2Ugb3IgcGVuIGxlYXZlcyB0aGUgZG9jdW1lbnQuXG4gICAgICAgIGZ1bmN0aW9uIGRvY3VtZW50TGVhdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChldmVudC50eXBlID09PSBcIm1vdXNlb3V0XCIgJiYgZXZlbnQudGFyZ2V0Lm5vZGVOYW1lID09PSBcIkhUTUxcIiAmJiBldmVudC5yZWxhdGVkVGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIG1vdmVtZW50IG9uIGRvY3VtZW50IGZvciBoYW5kbGUgYW5kIHJhbmdlIGRyYWcuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50TW92ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gRml4ICM0OThcbiAgICAgICAgICAgIC8vIENoZWNrIHZhbHVlIG9mIC5idXR0b25zIGluICdzdGFydCcgdG8gd29yayBhcm91bmQgYSBidWcgaW4gSUUxMCBtb2JpbGUgKGRhdGEuYnV0dG9uc1Byb3BlcnR5KS5cbiAgICAgICAgICAgIC8vIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvOTI3MDA1L21vYmlsZS1pZTEwLXdpbmRvd3MtcGhvbmUtYnV0dG9ucy1wcm9wZXJ0eS1vZi1wb2ludGVybW92ZS1ldmVudC1hbHdheXMtemVyb1xuICAgICAgICAgICAgLy8gSUU5IGhhcyAuYnV0dG9ucyBhbmQgLndoaWNoIHplcm8gb24gbW91c2Vtb3ZlLlxuICAgICAgICAgICAgLy8gRmlyZWZveCBicmVha3MgdGhlIHNwZWMgTUROIGRlZmluZXMuXG4gICAgICAgICAgICBpZiAobmF2aWdhdG9yLmFwcFZlcnNpb24uaW5kZXhPZihcIk1TSUUgOVwiKSA9PT0gLTEgJiYgZXZlbnQuYnV0dG9ucyA9PT0gMCAmJiBkYXRhLmJ1dHRvbnNQcm9wZXJ0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHdlIGFyZSBtb3ZpbmcgdXAgb3IgZG93blxuICAgICAgICAgICAgdmFyIG1vdmVtZW50ID0gKG9wdGlvbnMuZGlyID8gLTEgOiAxKSAqIChldmVudC5jYWxjUG9pbnQgLSBkYXRhLnN0YXJ0Q2FsY1BvaW50KTtcblxuICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgbW92ZW1lbnQgaW50byBhIHBlcmNlbnRhZ2Ugb2YgdGhlIHNsaWRlciB3aWR0aC9oZWlnaHRcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IChtb3ZlbWVudCAqIDEwMCkgLyBkYXRhLmJhc2VTaXplO1xuXG4gICAgICAgICAgICBtb3ZlSGFuZGxlcyhtb3ZlbWVudCA+IDAsIHByb3Bvc2FsLCBkYXRhLmxvY2F0aW9ucywgZGF0YS5oYW5kbGVOdW1iZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuYmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudCwgY2FsbCBjYWxsYmFja3MuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50RW5kKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGUgaGFuZGxlIGlzIG5vIGxvbmdlciBhY3RpdmUsIHNvIHJlbW92ZSB0aGUgY2xhc3MuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGUpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhkYXRhLmhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50IC09IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVuYmluZCB0aGUgbW92ZSBhbmQgZW5kIGV2ZW50cywgd2hpY2ggYXJlIGFkZGVkIG9uICdzdGFydCcuXG4gICAgICAgICAgICBkYXRhLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Eb2N1bWVudEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihjWzBdLCBjWzFdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGRyYWdnaW5nIGNsYXNzLlxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGN1cnNvciBzdHlsZXMgYW5kIHRleHQtc2VsZWN0aW9uIGV2ZW50cyBib3VuZCB0byB0aGUgYm9keS5cbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuc3R5bGUuY3Vyc29yID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIiwgcHJldmVudERlZmF1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwiZW5kXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQuXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50U3RhcnQoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIElnbm9yZSBldmVudCBpZiBhbnkgaGFuZGxlIGlzIGRpc2FibGVkXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLnNvbWUoaXNIYW5kbGVEaXNhYmxlZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBoYW5kbGU7XG5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbZGF0YS5oYW5kbGVOdW1iZXJzWzBdXTtcblxuICAgICAgICAgICAgICAgIGhhbmRsZSA9IGhhbmRsZU9yaWdpbi5jaGlsZHJlblswXTtcbiAgICAgICAgICAgICAgICBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgKz0gMTtcblxuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIGhhbmRsZSBhcyAnYWN0aXZlJyBzbyBpdCBjYW4gYmUgc3R5bGVkLlxuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmFjdGl2ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEEgZHJhZyBzaG91bGQgbmV2ZXIgcHJvcGFnYXRlIHVwIHRvIHRoZSAndGFwJyBldmVudC5cbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAvLyBSZWNvcmQgdGhlIGV2ZW50IGxpc3RlbmVycy5cbiAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcblxuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLlxuICAgICAgICAgICAgdmFyIG1vdmVFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudE1vdmUsIHtcbiAgICAgICAgICAgICAgICAvLyBUaGUgZXZlbnQgdGFyZ2V0IGhhcyBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcHJvcGFnYXRlIHRoZSBvcmlnaW5hbCBvbmUgc28gdGhhdCB3ZSBrZWVwXG4gICAgICAgICAgICAgICAgLy8gcmVseWluZyBvbiBpdCB0byBleHRyYWN0IHRhcmdldCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIHN0YXJ0Q2FsY1BvaW50OiBldmVudC5jYWxjUG9pbnQsXG4gICAgICAgICAgICAgICAgYmFzZVNpemU6IGJhc2VTaXplKCksXG4gICAgICAgICAgICAgICAgcGFnZU9mZnNldDogZXZlbnQucGFnZU9mZnNldCxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnMsXG4gICAgICAgICAgICAgICAgYnV0dG9uc1Byb3BlcnR5OiBldmVudC5idXR0b25zLFxuICAgICAgICAgICAgICAgIGxvY2F0aW9uczogc2NvcGVfTG9jYXRpb25zLnNsaWNlKClcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgZW5kRXZlbnQgPSBhdHRhY2hFdmVudChhY3Rpb25zLmVuZCwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBldmVudEVuZCwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBvdXRFdmVudCA9IGF0dGFjaEV2ZW50KFwibW91c2VvdXRcIiwgc2NvcGVfRG9jdW1lbnRFbGVtZW50LCBkb2N1bWVudExlYXZlLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gV2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgcHVzaGVkIHRoZSBsaXN0ZW5lcnMgaW4gdGhlIGxpc3RlbmVyIGxpc3QgcmF0aGVyIHRoYW4gY3JlYXRpbmdcbiAgICAgICAgICAgIC8vIGEgbmV3IG9uZSBhcyBpdCBoYXMgYWxyZWFkeSBiZWVuIHBhc3NlZCB0byB0aGUgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICBsaXN0ZW5lcnMucHVzaC5hcHBseShsaXN0ZW5lcnMsIG1vdmVFdmVudC5jb25jYXQoZW5kRXZlbnQsIG91dEV2ZW50KSk7XG5cbiAgICAgICAgICAgIC8vIFRleHQgc2VsZWN0aW9uIGlzbid0IGFuIGlzc3VlIG9uIHRvdWNoIGRldmljZXMsXG4gICAgICAgICAgICAvLyBzbyBhZGRpbmcgY3Vyc29yIHN0eWxlcyBjYW4gYmUgc2tpcHBlZC5cbiAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRoZSAnSScgY3Vyc29yIGFuZCBleHRlbmQgdGhlIHJhbmdlLWRyYWcgY3Vyc29yLlxuICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuc3R5bGUuY3Vyc29yID0gZ2V0Q29tcHV0ZWRTdHlsZShldmVudC50YXJnZXQpLmN1cnNvcjtcblxuICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlIHRhcmdldCB3aXRoIGEgZHJhZ2dpbmcgc3RhdGUuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBQcmV2ZW50IHRleHQgc2VsZWN0aW9uIHdoZW4gZHJhZ2dpbmcgdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgLy8gSW4gbm9VaVNsaWRlciA8PSA5LjIuMCwgdGhpcyB3YXMgaGFuZGxlZCBieSBjYWxsaW5nIHByZXZlbnREZWZhdWx0IG9uIG1vdXNlL3RvdWNoIHN0YXJ0L21vdmUsXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggaXMgc2Nyb2xsIGJsb2NraW5nLiBUaGUgc2VsZWN0c3RhcnQgZXZlbnQgaXMgc3VwcG9ydGVkIGJ5IEZpcmVGb3ggc3RhcnRpbmcgZnJvbSB2ZXJzaW9uIDUyLFxuICAgICAgICAgICAgICAgIC8vIG1lYW5pbmcgdGhlIG9ubHkgaG9sZG91dCBpcyBpT1MgU2FmYXJpLiBUaGlzIGRvZXNuJ3QgbWF0dGVyOiB0ZXh0IHNlbGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgdGhlcmUuXG4gICAgICAgICAgICAgICAgLy8gVGhlICdjdXJzb3InIGZsYWcgaXMgZmFsc2UuXG4gICAgICAgICAgICAgICAgLy8gU2VlOiBodHRwOi8vY2FuaXVzZS5jb20vI3NlYXJjaD1zZWxlY3RzdGFydFxuICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0LCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInN0YXJ0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmUgY2xvc2VzdCBoYW5kbGUgdG8gdGFwcGVkIGxvY2F0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudFRhcChldmVudCkge1xuICAgICAgICAgICAgLy8gVGhlIHRhcCBldmVudCBzaG91bGRuJ3QgcHJvcGFnYXRlIHVwXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG4gICAgICAgICAgICB2YXIgaGFuZGxlTnVtYmVyID0gZ2V0Q2xvc2VzdEhhbmRsZShwcm9wb3NhbCk7XG5cbiAgICAgICAgICAgIC8vIFRhY2tsZSB0aGUgY2FzZSB0aGF0IGFsbCBoYW5kbGVzIGFyZSAnZGlzYWJsZWQnLlxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZsYWcgdGhlIHNsaWRlciBhcyBpdCBpcyBub3cgaW4gYSB0cmFuc2l0aW9uYWwgc3RhdGUuXG4gICAgICAgICAgICAvLyBUcmFuc2l0aW9uIHRha2VzIGEgY29uZmlndXJhYmxlIGFtb3VudCBvZiBtcyAoZGVmYXVsdCAzMDApLiBSZS1lbmFibGUgdGhlIHNsaWRlciBhZnRlciB0aGF0LlxuICAgICAgICAgICAgaWYgKCFvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcHJvcG9zYWwsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZXZlbnRzLnNuYXApIHtcbiAgICAgICAgICAgICAgICBldmVudFN0YXJ0KGV2ZW50LCB7IGhhbmRsZU51bWJlcnM6IFtoYW5kbGVOdW1iZXJdIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmlyZXMgYSAnaG92ZXInIGV2ZW50IGZvciBhIGhvdmVyZWQgbW91c2UvcGVuIHBvc2l0aW9uLlxuICAgICAgICBmdW5jdGlvbiBldmVudEhvdmVyKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcblxuICAgICAgICAgICAgdmFyIHRvID0gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChwcm9wb3NhbCk7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoXCJob3ZlclwiID09PSB0YXJnZXRFdmVudC5zcGxpdChcIi5cIilbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfRXZlbnRzW3RhcmdldEV2ZW50XS5mb3JFYWNoKGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHNjb3BlX1NlbGYsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVzIGtleWRvd24gb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIC8vIERvbid0IG1vdmUgdGhlIGRvY3VtZW50IHdoZW4gcHJlc3NpbmcgYXJyb3cga2V5cyBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgZnVuY3Rpb24gZXZlbnRLZXlkb3duKGV2ZW50LCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgfHwgaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaG9yaXpvbnRhbEtleXMgPSBbXCJMZWZ0XCIsIFwiUmlnaHRcIl07XG4gICAgICAgICAgICB2YXIgdmVydGljYWxLZXlzID0gW1wiRG93blwiLCBcIlVwXCJdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgJiYgIW9wdGlvbnMub3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYW4gcmlnaHQtdG8tbGVmdCBzbGlkZXIsIHRoZSBsZWZ0IGFuZCByaWdodCBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vcnQgJiYgIW9wdGlvbnMuZGlyKSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYSB0b3AtdG8tYm90dG9tIHNsaWRlciwgdGhlIHVwIGFuZCBkb3duIGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgdmVydGljYWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RyaXAgXCJBcnJvd1wiIGZvciBJRSBjb21wYXRpYmlsaXR5LiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXkucmVwbGFjZShcIkFycm93XCIsIFwiXCIpO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGtleSA9PT0gdmVydGljYWxLZXlzWzBdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNVcCA9IGtleSA9PT0gdmVydGljYWxLZXlzWzFdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMV07XG5cbiAgICAgICAgICAgIGlmICghaXNEb3duICYmICFpc1VwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIHZhciBkaXJlY3Rpb24gPSBpc0Rvd24gPyAwIDogMTtcbiAgICAgICAgICAgIHZhciBzdGVwcyA9IGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1tkaXJlY3Rpb25dO1xuXG4gICAgICAgICAgICAvLyBBdCB0aGUgZWRnZSBvZiBhIHNsaWRlciwgZG8gbm90aGluZ1xuICAgICAgICAgICAgaWYgKHN0ZXAgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE5vIHN0ZXAgc2V0LCB1c2UgdGhlIGRlZmF1bHQgb2YgMTAlIG9mIHRoZSBzdWItcmFuZ2VcbiAgICAgICAgICAgIGlmIChzdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBzY29wZV9TcGVjdHJ1bS5nZXREZWZhdWx0U3RlcChzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgaXNEb3duLCAxMCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG5cbiAgICAgICAgICAgIC8vIERlY3JlbWVudCBmb3IgZG93biBzdGVwc1xuICAgICAgICAgICAgc3RlcCA9IChpc0Rvd24gPyAtMSA6IDEpICogc3RlcDtcblxuICAgICAgICAgICAgdmFsdWVTZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSArIHN0ZXAsIHRydWUpO1xuXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggZXZlbnRzIHRvIHNldmVyYWwgc2xpZGVyIHBhcnRzLlxuICAgICAgICBmdW5jdGlvbiBiaW5kU2xpZGVyRXZlbnRzKGJlaGF2aW91cikge1xuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBzdGFuZGFyZCBkcmFnIGV2ZW50IHRvIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKCFiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGVzZSBldmVudHMgYXJlIG9ubHkgYm91bmQgdG8gdGhlIHZpc3VhbCBoYW5kbGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZWxlbWVudCwgbm90IHRoZSAncmVhbCcgb3JpZ2luIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGhhbmRsZS5jaGlsZHJlblswXSwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4XVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSB0YXAgZXZlbnQgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci50YXApIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBzY29wZV9CYXNlLCBldmVudFRhcCwge30pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJlIGhvdmVyIGV2ZW50c1xuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5ob3Zlcikge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMubW92ZSwgc2NvcGVfQmFzZSwgZXZlbnRIb3Zlciwge1xuICAgICAgICAgICAgICAgICAgICBob3ZlcjogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBNYWtlIHRoZSByYW5nZSBkcmFnZ2FibGUuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmRyYWcpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5mb3JFYWNoKGZ1bmN0aW9uKGNvbm5lY3QsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25uZWN0ID09PSBmYWxzZSB8fCBpbmRleCA9PT0gMCB8fCBpbmRleCA9PT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUJlZm9yZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZUFmdGVyID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudEhvbGRlcnMgPSBbY29ubmVjdF07XG5cbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3MoY29ubmVjdCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWdnYWJsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgcmFuZ2UgaXMgZml4ZWQsIHRoZSBlbnRpcmUgcmFuZ2UgY2FuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJlIGRyYWdnZWQgYnkgdGhlIGhhbmRsZXMuIFRoZSBoYW5kbGUgaW4gdGhlIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgIC8vIG9yaWdpbiB3aWxsIHByb3BhZ2F0ZSB0aGUgc3RhcnQgZXZlbnQgdXB3YXJkLFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgaXQgbmVlZHMgdG8gYmUgYm91bmQgbWFudWFsbHkgb24gdGhlIG90aGVyLlxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVCZWZvcmUuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQWZ0ZXIuY2hpbGRyZW5bMF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLmZvckVhY2goZnVuY3Rpb24oZXZlbnRIb2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIGV2ZW50SG9sZGVyLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlczogW2hhbmRsZUJlZm9yZSwgaGFuZGxlQWZ0ZXJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IFtpbmRleCAtIDEsIGluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0YWNoIGFuIGV2ZW50IHRvIHRoaXMgc2xpZGVyLCBwb3NzaWJseSBpbmNsdWRpbmcgYSBuYW1lc3BhY2VcbiAgICAgICAgZnVuY3Rpb24gYmluZEV2ZW50KG5hbWVzcGFjZWRFdmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdID0gc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gfHwgW107XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIGV2ZW50IGJvdW5kIGlzICd1cGRhdGUsJyBmaXJlIGl0IGltbWVkaWF0ZWx5IGZvciBhbGwgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmIChuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdID09PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGEsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmRvIGF0dGFjaG1lbnQgb2YgZXZlbnRcbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlRXZlbnQobmFtZXNwYWNlZEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgZXZlbnQgPSBuYW1lc3BhY2VkRXZlbnQgJiYgbmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgIHZhciBuYW1lc3BhY2UgPSBldmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3Vic3RyaW5nKGV2ZW50Lmxlbmd0aCk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbihiaW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRFdmVudCA9IGJpbmQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgICAgIHZhciB0TmFtZXNwYWNlID0gYmluZC5zdWJzdHJpbmcodEV2ZW50Lmxlbmd0aCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoKCFldmVudCB8fCBldmVudCA9PT0gdEV2ZW50KSAmJiAoIW5hbWVzcGFjZSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9FdmVudHNbYmluZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBFeHRlcm5hbCBldmVudCBoYW5kbGluZ1xuICAgICAgICBmdW5jdGlvbiBmaXJlRXZlbnQoZXZlbnROYW1lLCBoYW5kbGVOdW1iZXIsIHRhcCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50VHlwZSA9IHRhcmdldEV2ZW50LnNwbGl0KFwiLlwiKVswXTtcblxuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWUgPT09IGV2ZW50VHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRoZSBzbGlkZXIgcHVibGljIEFQSSBhcyB0aGUgc2NvcGUgKCd0aGlzJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9TZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJldHVybiB2YWx1ZXMgYXMgYXJyYXksIHNvIGFyZ18xW2FyZ18yXSBpcyBhbHdheXMgdmFsaWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfVmFsdWVzLm1hcChvcHRpb25zLmZvcm1hdC50byksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIGluZGV4LCAwIG9yIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW4tZm9ybWF0dGVkIHNsaWRlciB2YWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMuc2xpY2UoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBFdmVudCBpcyBmaXJlZCBieSB0YXAsIHRydWUgb3IgZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXAgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gTGVmdCBvZmZzZXQgb2YgdGhlIGhhbmRsZSwgaW4gcmVsYXRpb24gdG8gdGhlIHNsaWRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNwbGl0IG91dCB0aGUgaGFuZGxlIHBvc2l0aW9uaW5nIGxvZ2ljIHNvIHRoZSBNb3ZlIGV2ZW50IGNhbiB1c2UgaXQsIHRvb1xuICAgICAgICBmdW5jdGlvbiBjaGVja0hhbmRsZVBvc2l0aW9uKHJlZmVyZW5jZSwgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgIC8vIEZvciBzbGlkZXJzIHdpdGggbXVsdGlwbGUgaGFuZGxlcywgbGltaXQgbW92ZW1lbnQgdG8gdGhlIG90aGVyIGhhbmRsZS5cbiAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBtYXJnaW4gb3B0aW9uIGJ5IGFkZGluZyBpdCB0byB0aGUgaGFuZGxlIHBvc2l0aW9ucy5cbiAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEgJiYgIW9wdGlvbnMuZXZlbnRzLnVuY29uc3RyYWluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1heCh0bywgcmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdICsgb3B0aW9ucy5tYXJnaW4pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChsb29rRm9yd2FyZCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgcmVmZXJlbmNlW2hhbmRsZU51bWJlciArIDFdIC0gb3B0aW9ucy5tYXJnaW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIGxpbWl0IG9wdGlvbiBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdCwgbGltaXRpbmcgaGFuZGxlcyB0byBhXG4gICAgICAgICAgICAvLyBtYXhpbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlci4gTGltaXQgbXVzdCBiZSA+IDAsIGFzIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gaGFuZGxlcyB3b3VsZCBiZSB1bm1vdmFibGUuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmIG9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgcmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdICsgb3B0aW9ucy5saW1pdCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0gLSBvcHRpb25zLmxpbWl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBwYWRkaW5nIG9wdGlvbiBrZWVwcyB0aGUgaGFuZGxlcyBhIGNlcnRhaW4gZGlzdGFuY2UgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIGVkZ2VzIG9mIHRoZSBzbGlkZXIuIFBhZGRpbmcgbXVzdCBiZSA+IDAuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wYWRkaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBvcHRpb25zLnBhZGRpbmdbMF0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCAxMDAgLSBvcHRpb25zLnBhZGRpbmdbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHRvKTtcblxuICAgICAgICAgICAgLy8gTGltaXQgcGVyY2VudGFnZSB0byB0aGUgMCAtIDEwMCByYW5nZVxuICAgICAgICAgICAgdG8gPSBsaW1pdCh0byk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBpZiBoYW5kbGUgY2FuJ3QgbW92ZVxuICAgICAgICAgICAgaWYgKHRvID09PSByZWZlcmVuY2VbaGFuZGxlTnVtYmVyXSAmJiAhZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXMgc2xpZGVyIG9yaWVudGF0aW9uIHRvIGNyZWF0ZSBDU1MgcnVsZXMuIGEgPSBiYXNlIHZhbHVlO1xuICAgICAgICBmdW5jdGlvbiBpblJ1bGVPcmRlcih2LCBhKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnMub3J0O1xuICAgICAgICAgICAgcmV0dXJuIChvID8gYSA6IHYpICsgXCIsIFwiICsgKG8gPyB2IDogYSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlcyBoYW5kbGUocykgYnkgYSBwZXJjZW50YWdlXG4gICAgICAgIC8vIChib29sLCAlIHRvIG1vdmUsIFslIHdoZXJlIGhhbmRsZSBzdGFydGVkLCAuLi5dLCBbaW5kZXggaW4gc2NvcGVfSGFuZGxlcywgLi4uXSlcbiAgICAgICAgZnVuY3Rpb24gbW92ZUhhbmRsZXModXB3YXJkLCBwcm9wb3NhbCwgbG9jYXRpb25zLCBoYW5kbGVOdW1iZXJzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWxzID0gbG9jYXRpb25zLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIHZhciBiID0gWyF1cHdhcmQsIHVwd2FyZF07XG4gICAgICAgICAgICB2YXIgZiA9IFt1cHdhcmQsICF1cHdhcmRdO1xuXG4gICAgICAgICAgICAvLyBDb3B5IGhhbmRsZU51bWJlcnMgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBkYXRhc2V0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzID0gaGFuZGxlTnVtYmVycy5zbGljZSgpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgd2hpY2ggaGFuZGxlIGlzICdsZWFkaW5nJy5cbiAgICAgICAgICAgIC8vIElmIHRoYXQgb25lIGNhbid0IG1vdmUgdGhlIHNlY29uZCBjYW4ndCBlaXRoZXIuXG4gICAgICAgICAgICBpZiAodXB3YXJkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMTogZ2V0IHRoZSBtYXhpbXVtIHBlcmNlbnRhZ2UgdGhhdCBhbnkgb2YgdGhlIGhhbmRsZXMgY2FuIG1vdmVcbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYltvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZbb10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgb25lIG9mIHRoZSBoYW5kbGVzIGNhbid0IG1vdmUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gdG8gLSBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdXNpbmcgb25lIGhhbmRsZSwgY2hlY2sgYmFja3dhcmQgQU5EIGZvcndhcmRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGIgPSBmID0gW3RydWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gU3RlcCAyOiBUcnkgdG8gc2V0IHRoZSBoYW5kbGVzIHdpdGggdGhlIGZvdW5kIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIGxvY2F0aW9uc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10pIHx8IHN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMzogSWYgYSBoYW5kbGUgbW92ZWQsIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGFrZXMgYSBiYXNlIHZhbHVlIGFuZCBhbiBvZmZzZXQuIFRoaXMgb2Zmc2V0IGlzIHVzZWQgZm9yIHRoZSBjb25uZWN0IGJhciBzaXplLlxuICAgICAgICAvLyBJbiB0aGUgaW5pdGlhbCBkZXNpZ24gZm9yIHRoaXMgZmVhdHVyZSwgdGhlIG9yaWdpbiBlbGVtZW50IHdhcyAxJSB3aWRlLlxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBhIHJvdW5kaW5nIGJ1ZyBpbiBDaHJvbWUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgIC8vIGluIHRoaXMgbWFubmVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03OTgyMjNcbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtRGlyZWN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpciA/IDEwMCAtIGEgLSBiIDogYTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc2NvcGVfTG9jYXRpb25zIGFuZCBzY29wZV9WYWx1ZXMsIHVwZGF0ZXMgdmlzdWFsIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBsb2NhdGlvbnMuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byB0aGUgc2xpZGVyIHN0ZXBwaW5nL3JhbmdlLlxuICAgICAgICAgICAgc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICB2YXIgcnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKHRvLCAwKSAtIHNjb3BlX0Rpck9mZnNldCArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gcnVsZTtcblxuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgdXBkYXRlQ29ubmVjdChoYW5kbGVOdW1iZXIgKyAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXMgYmVmb3JlIHRoZSBzbGlkZXIgbWlkZGxlIGFyZSBzdGFja2VkIGxhdGVyID0gaGlnaGVyLFxuICAgICAgICAvLyBIYW5kbGVzIGFmdGVyIHRoZSBtaWRkbGUgbGF0ZXIgaXMgbG93ZXJcbiAgICAgICAgLy8gW1s3XSBbOF0gLi4uLi4uLi4uLiB8IC4uLi4uLi4uLi4gWzVdIFs0XVxuICAgICAgICBmdW5jdGlvbiBzZXRaaW5kZXgoKSB7XG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRpciA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID4gNTAgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHpJbmRleCA9IDMgKyAoc2NvcGVfSGFuZGxlcy5sZW5ndGggKyBkaXIgKiBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXS5zdHlsZS56SW5kZXggPSB6SW5kZXg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3Qgc3VnZ2VzdGVkIHZhbHVlcyBhbmQgYXBwbHkgbWFyZ2luLCBzdGVwLlxuICAgICAgICBmdW5jdGlvbiBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCkge1xuICAgICAgICAgICAgdG8gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZmFsc2UpO1xuXG4gICAgICAgICAgICBpZiAodG8gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1cGRhdGVIYW5kbGVQb3NpdGlvbihoYW5kbGVOdW1iZXIsIHRvKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVzIHN0eWxlIGF0dHJpYnV0ZSBmb3IgY29ubmVjdCBub2Rlc1xuICAgICAgICBmdW5jdGlvbiB1cGRhdGVDb25uZWN0KGluZGV4KSB7XG4gICAgICAgICAgICAvLyBTa2lwIGNvbm5lY3RzIHNldCB0byBmYWxzZVxuICAgICAgICAgICAgaWYgKCFzY29wZV9Db25uZWN0c1tpbmRleF0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBsID0gMDtcbiAgICAgICAgICAgIHZhciBoID0gMTAwO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IDApIHtcbiAgICAgICAgICAgICAgICBsID0gc2NvcGVfTG9jYXRpb25zW2luZGV4IC0gMV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gc2NvcGVfQ29ubmVjdHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGggPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXhdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBXZSB1c2UgdHdvIHJ1bGVzOlxuICAgICAgICAgICAgLy8gJ3RyYW5zbGF0ZScgdG8gY2hhbmdlIHRoZSBsZWZ0L3RvcCBvZmZzZXQ7XG4gICAgICAgICAgICAvLyAnc2NhbGUnIHRvIGNoYW5nZSB0aGUgd2lkdGggb2YgdGhlIGVsZW1lbnQ7XG4gICAgICAgICAgICAvLyBBcyB0aGUgZWxlbWVudCBoYXMgYSB3aWR0aCBvZiAxMDAlLCBhIHRyYW5zbGF0aW9uIG9mIDEwMCUgaXMgZXF1YWwgdG8gMTAwJSBvZiB0aGUgcGFyZW50ICgubm9VaS1iYXNlKVxuICAgICAgICAgICAgdmFyIGNvbm5lY3RXaWR0aCA9IGggLSBsO1xuICAgICAgICAgICAgdmFyIHRyYW5zbGF0ZVJ1bGUgPSBcInRyYW5zbGF0ZShcIiArIGluUnVsZU9yZGVyKHRyYW5zZm9ybURpcmVjdGlvbihsLCBjb25uZWN0V2lkdGgpICsgXCIlXCIsIFwiMFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgdmFyIHNjYWxlUnVsZSA9IFwic2NhbGUoXCIgKyBpblJ1bGVPcmRlcihjb25uZWN0V2lkdGggLyAxMDAsIFwiMVwiKSArIFwiKVwiO1xuXG4gICAgICAgICAgICBzY29wZV9Db25uZWN0c1tpbmRleF0uc3R5bGVbb3B0aW9ucy50cmFuc2Zvcm1SdWxlXSA9IHRyYW5zbGF0ZVJ1bGUgKyBcIiBcIiArIHNjYWxlUnVsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFBhcnNlcyB2YWx1ZSBwYXNzZWQgdG8gLnNldCBtZXRob2QuIFJldHVybnMgY3VycmVudCB2YWx1ZSBpZiBub3QgcGFyc2UtYWJsZS5cbiAgICAgICAgZnVuY3Rpb24gcmVzb2x2ZVRvVmFsdWUodG8sIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgLy8gU2V0dGluZyB3aXRoIG51bGwgaW5kaWNhdGVzIGFuICdpZ25vcmUnLlxuICAgICAgICAgICAgLy8gSW5wdXR0aW5nICdmYWxzZScgaXMgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICh0byA9PT0gbnVsbCB8fCB0byA9PT0gZmFsc2UgfHwgdG8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBmb3JtYXR0ZWQgbnVtYmVyIHdhcyBwYXNzZWQsIGF0dGVtcHQgdG8gZGVjb2RlIGl0LlxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHRvID0gU3RyaW5nKHRvKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBvcHRpb25zLmZvcm1hdC5mcm9tKHRvKTtcbiAgICAgICAgICAgIHRvID0gc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIC8vIElmIHBhcnNpbmcgdGhlIG51bWJlciBmYWlsZWQsIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UgfHwgaXNOYU4odG8pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdG87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdGhlIHNsaWRlciB2YWx1ZS5cbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXQoaW5wdXQsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGFzQXJyYXkoaW5wdXQpO1xuICAgICAgICAgICAgdmFyIGlzSW5pdCA9IHNjb3BlX0xvY2F0aW9uc1swXSA9PT0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICAvLyBFdmVudCBmaXJlcyBieSBkZWZhdWx0XG4gICAgICAgICAgICBmaXJlU2V0RXZlbnQgPSBmaXJlU2V0RXZlbnQgPT09IHVuZGVmaW5lZCA/IHRydWUgOiAhIWZpcmVTZXRFdmVudDtcblxuICAgICAgICAgICAgLy8gQW5pbWF0aW9uIGlzIG9wdGlvbmFsLlxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbml0aWFsIHZhbHVlcyB3ZXJlIHNldCBiZWZvcmUgdXNpbmcgYW5pbWF0ZWQgcGxhY2VtZW50LlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYW5pbWF0ZSAmJiAhaXNJbml0KSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3NGb3Ioc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGFwLCBvcHRpb25zLmFuaW1hdGlvbkR1cmF0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyc3QgcGFzcywgd2l0aG91dCBsb29rQWhlYWQgYnV0IHdpdGggbG9va0JhY2t3YXJkLiBWYWx1ZXMgYXJlIHNldCBmcm9tIGxlZnQgdG8gcmlnaHQuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWVzW2hhbmRsZU51bWJlcl0sIGhhbmRsZU51bWJlciksIHRydWUsIGZhbHNlKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBTZWNvbmQgcGFzcy4gTm93IHRoYXQgYWxsIGJhc2UgdmFsdWVzIGFyZSBzZXQsIGFwcGx5IGNvbnN0cmFpbnRzXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgICAgICAvLyBGaXJlIHRoZSBldmVudCBvbmx5IGZvciBoYW5kbGVzIHRoYXQgcmVjZWl2ZWQgYSBuZXcgdmFsdWUsIGFzIHBlciAjNTc5XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlc1toYW5kbGVOdW1iZXJdICE9PSBudWxsICYmIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlc2V0IHNsaWRlciB0byBpbml0aWFsIHZhbHVlc1xuICAgICAgICBmdW5jdGlvbiB2YWx1ZVJlc2V0KGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB2YWx1ZSBmb3IgYSBzaW5nbGUgaGFuZGxlXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlU2V0SGFuZGxlKGhhbmRsZU51bWJlciwgdmFsdWUsIGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgLy8gRW5zdXJlIG51bWVyaWMgaW5wdXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlciA9IE51bWJlcihoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAoIShoYW5kbGVOdW1iZXIgPj0gMCAmJiBoYW5kbGVOdW1iZXIgPCBzY29wZV9IYW5kbGVOdW1iZXJzLmxlbmd0aCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IGludmFsaWQgaGFuZGxlIG51bWJlciwgZ290OiBcIiArIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIExvb2sgYm90aCBiYWNrd2FyZCBhbmQgZm9yd2FyZCwgc2luY2Ugd2UgZG9uJ3Qgd2FudCB0aGlzIGhhbmRsZSB0byBcInB1c2hcIiBvdGhlciBoYW5kbGVzICgjOTYwKTtcbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHJlc29sdmVUb1ZhbHVlKHZhbHVlLCBoYW5kbGVOdW1iZXIpLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmIChmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZUdldCgpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKTtcblxuICAgICAgICAgICAgLy8gSWYgb25seSBvbmUgaGFuZGxlIGlzIHVzZWQsIHJldHVybiBhIHNpbmdsZSB2YWx1ZS5cbiAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlc1swXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZXMgY2xhc3NlcyBmcm9tIHRoZSByb290IGFuZCBlbXB0aWVzIGl0LlxuICAgICAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIG9wdGlvbnMuY3NzQ2xhc3Nlcykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5jc3NDbGFzc2VzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzW2tleV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3aGlsZSAoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9UYXJnZXQucmVtb3ZlQ2hpbGQoc2NvcGVfVGFyZ2V0LmZpcnN0Q2hpbGQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWxldGUgc2NvcGVfVGFyZ2V0Lm5vVWlTbGlkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0U3RlcHNGb3JIYW5kbGUoaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHZhciBuZWFyYnlTdGVwcyA9IHNjb3BlX1NwZWN0cnVtLmdldE5lYXJieVN0ZXBzKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0ZXA7XG4gICAgICAgICAgICB2YXIgZGVjcmVtZW50ID0gbnVsbDtcblxuICAgICAgICAgICAgLy8gSWYgdGhlIG5leHQgdmFsdWUgaW4gdGhpcyBzdGVwIG1vdmVzIGludG8gdGhlIG5leHQgc3RlcCxcbiAgICAgICAgICAgIC8vIHRoZSBpbmNyZW1lbnQgaXMgdGhlIHN0YXJ0IG9mIHRoZSBuZXh0IHN0ZXAgLSB0aGUgY3VycmVudCB2YWx1ZVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgKyBpbmNyZW1lbnQgPiBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSAtIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIGlzIGJleW9uZCB0aGUgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0YXJ0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLnN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGEgaGFuZGxlIGlzIGF0IHRoZSBzdGFydCBvZiBhIHN0ZXAsIGl0IGFsd2F5cyBzdGVwcyBiYWNrIGludG8gdGhlIHByZXZpb3VzIHN0ZXAgZmlyc3RcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IHZhbHVlIC0gbmVhcmJ5U3RlcHMuc3RlcEJlZm9yZS5oaWdoZXN0U3RlcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm93LCBpZiBhdCB0aGUgc2xpZGVyIGVkZ2VzLCB0aGVyZSBpcyBubyBpbi9kZWNyZW1lbnRcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbiA9PT0gMTAwKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcyBwZXIgIzM5MSwgdGhlIGNvbXBhcmlzb24gZm9yIHRoZSBkZWNyZW1lbnQgc3RlcCBjYW4gaGF2ZSBzb21lIHJvdW5kaW5nIGlzc3Vlcy5cbiAgICAgICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSBzY29wZV9TcGVjdHJ1bS5jb3VudFN0ZXBEZWNpbWFscygpO1xuXG4gICAgICAgICAgICAvLyBSb3VuZCBwZXIgIzM5MVxuICAgICAgICAgICAgaWYgKGluY3JlbWVudCAhPT0gbnVsbCAmJiBpbmNyZW1lbnQgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgaW5jcmVtZW50ID0gTnVtYmVyKGluY3JlbWVudC50b0ZpeGVkKHN0ZXBEZWNpbWFscykpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVjcmVtZW50ICE9PSBudWxsICYmIGRlY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBOdW1iZXIoZGVjcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBbZGVjcmVtZW50LCBpbmNyZW1lbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgc2l6ZSBmb3IgdGhlIHNsaWRlci5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZU51bWJlcnMubWFwKGdldE5leHRTdGVwc0ZvckhhbmRsZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVcGRhdGVhYmxlOiBtYXJnaW4sIGxpbWl0LCBwYWRkaW5nLCBzdGVwLCByYW5nZSwgYW5pbWF0ZSwgc25hcFxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVPcHRpb25zKG9wdGlvbnNUb1VwZGF0ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBTcGVjdHJ1bSBpcyBjcmVhdGVkIHVzaW5nIHRoZSByYW5nZSwgc25hcCwgZGlyZWN0aW9uIGFuZCBzdGVwIG9wdGlvbnMuXG4gICAgICAgICAgICAvLyAnc25hcCcgYW5kICdzdGVwJyBjYW4gYmUgdXBkYXRlZC5cbiAgICAgICAgICAgIC8vIElmICdzbmFwJyBhbmQgJ3N0ZXAnIGFyZSBub3QgcGFzc2VkLCB0aGV5IHNob3VsZCByZW1haW4gdW5jaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHYgPSB2YWx1ZUdldCgpO1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlQWJsZSA9IFtcbiAgICAgICAgICAgICAgICBcIm1hcmdpblwiLFxuICAgICAgICAgICAgICAgIFwibGltaXRcIixcbiAgICAgICAgICAgICAgICBcInBhZGRpbmdcIixcbiAgICAgICAgICAgICAgICBcInJhbmdlXCIsXG4gICAgICAgICAgICAgICAgXCJhbmltYXRlXCIsXG4gICAgICAgICAgICAgICAgXCJzbmFwXCIsXG4gICAgICAgICAgICAgICAgXCJzdGVwXCIsXG4gICAgICAgICAgICAgICAgXCJmb3JtYXRcIixcbiAgICAgICAgICAgICAgICBcInBpcHNcIixcbiAgICAgICAgICAgICAgICBcInRvb2x0aXBzXCJcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIC8vIE9ubHkgY2hhbmdlIG9wdGlvbnMgdGhhdCB3ZSdyZSBhY3R1YWxseSBwYXNzZWQgdG8gdXBkYXRlLlxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgdW5kZWZpbmVkLiBudWxsIHJlbW92ZXMgdGhlIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zVG9VcGRhdGVbbmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBvcmlnaW5hbE9wdGlvbnNbbmFtZV0gPSBvcHRpb25zVG9VcGRhdGVbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBuZXdPcHRpb25zID0gdGVzdE9wdGlvbnMob3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICAgICAgLy8gTG9hZCBuZXcgb3B0aW9ucyBpbnRvIHRoZSBzbGlkZXIgc3RhdGVcbiAgICAgICAgICAgIHVwZGF0ZUFibGUuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNbbmFtZV0gPSBuZXdPcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzY29wZV9TcGVjdHJ1bSA9IG5ld09wdGlvbnMuc3BlY3RydW07XG5cbiAgICAgICAgICAgIC8vIExpbWl0LCBtYXJnaW4gYW5kIHBhZGRpbmcgZGVwZW5kIG9uIHRoZSBzcGVjdHJ1bSBidXQgYXJlIHN0b3JlZCBvdXRzaWRlIG9mIGl0LiAoIzY3NylcbiAgICAgICAgICAgIG9wdGlvbnMubWFyZ2luID0gbmV3T3B0aW9ucy5tYXJnaW47XG4gICAgICAgICAgICBvcHRpb25zLmxpbWl0ID0gbmV3T3B0aW9ucy5saW1pdDtcbiAgICAgICAgICAgIG9wdGlvbnMucGFkZGluZyA9IG5ld09wdGlvbnMucGFkZGluZztcblxuICAgICAgICAgICAgLy8gVXBkYXRlIHBpcHMsIHJlbW92ZXMgZXhpc3RpbmcuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVQaXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0b29sdGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSW52YWxpZGF0ZSB0aGUgY3VycmVudCBwb3NpdGlvbmluZyBzbyB2YWx1ZVNldCBmb3JjZXMgYW4gdXBkYXRlLlxuICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zVG9VcGRhdGUuc3RhcnQgfHwgdiwgZmlyZVNldEV2ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemF0aW9uIHN0ZXBzXG4gICAgICAgIGZ1bmN0aW9uIHNldHVwU2xpZGVyKCkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBiYXNlIGVsZW1lbnQsIGluaXRpYWxpemUgSFRNTCBhbmQgc2V0IGNsYXNzZXMuXG4gICAgICAgICAgICAvLyBBZGQgaGFuZGxlcyBhbmQgY29ubmVjdCBlbGVtZW50cy5cbiAgICAgICAgICAgIHNjb3BlX0Jhc2UgPSBhZGRTbGlkZXIoc2NvcGVfVGFyZ2V0KTtcblxuICAgICAgICAgICAgYWRkRWxlbWVudHMob3B0aW9ucy5jb25uZWN0LCBzY29wZV9CYXNlKTtcblxuICAgICAgICAgICAgLy8gQXR0YWNoIHVzZXIgZXZlbnRzLlxuICAgICAgICAgICAgYmluZFNsaWRlckV2ZW50cyhvcHRpb25zLmV2ZW50cyk7XG5cbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcHVibGljIHZhbHVlIG1ldGhvZCB0byBzZXQgdGhlIHN0YXJ0IHZhbHVlcy5cbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5waXBzKSB7XG4gICAgICAgICAgICAgICAgcGlwcyhvcHRpb25zLnBpcHMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50b29sdGlwcykge1xuICAgICAgICAgICAgICAgIHRvb2x0aXBzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFyaWEoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNldHVwU2xpZGVyKCk7XG5cbiAgICAgICAgLy8gbm9pbnNwZWN0aW9uIEpTVW51c2VkR2xvYmFsU3ltYm9sc1xuICAgICAgICBzY29wZV9TZWxmID0ge1xuICAgICAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgICAgIHN0ZXBzOiBnZXROZXh0U3RlcHMsXG4gICAgICAgICAgICBvbjogYmluZEV2ZW50LFxuICAgICAgICAgICAgb2ZmOiByZW1vdmVFdmVudCxcbiAgICAgICAgICAgIGdldDogdmFsdWVHZXQsXG4gICAgICAgICAgICBzZXQ6IHZhbHVlU2V0LFxuICAgICAgICAgICAgc2V0SGFuZGxlOiB2YWx1ZVNldEhhbmRsZSxcbiAgICAgICAgICAgIHJlc2V0OiB2YWx1ZVJlc2V0LFxuICAgICAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICAgICAgX19tb3ZlSGFuZGxlczogZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAgICAgICAgICAgIG1vdmVIYW5kbGVzKGEsIGIsIHNjb3BlX0xvY2F0aW9ucywgYyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczogb3JpZ2luYWxPcHRpb25zLCAvLyBJc3N1ZSAjNjAwLCAjNjc4XG4gICAgICAgICAgICB1cGRhdGVPcHRpb25zOiB1cGRhdGVPcHRpb25zLFxuICAgICAgICAgICAgdGFyZ2V0OiBzY29wZV9UYXJnZXQsIC8vIElzc3VlICM1OTdcbiAgICAgICAgICAgIHJlbW92ZVBpcHM6IHJlbW92ZVBpcHMsXG4gICAgICAgICAgICByZW1vdmVUb29sdGlwczogcmVtb3ZlVG9vbHRpcHMsXG4gICAgICAgICAgICBwaXBzOiBwaXBzIC8vIElzc3VlICM1OTRcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gc2NvcGVfU2VsZjtcbiAgICB9XG5cbiAgICAvLyBSdW4gdGhlIHN0YW5kYXJkIGluaXRpYWxpemVyXG4gICAgZnVuY3Rpb24gaW5pdGlhbGl6ZSh0YXJnZXQsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICBpZiAoIXRhcmdldCB8fCAhdGFyZ2V0Lm5vZGVOYW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IGNyZWF0ZSByZXF1aXJlcyBhIHNpbmdsZSBlbGVtZW50LCBnb3Q6IFwiICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRocm93IGFuIGVycm9yIGlmIHRoZSBzbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXG4gICAgICAgIGlmICh0YXJnZXQubm9VaVNsaWRlcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBTbGlkZXIgd2FzIGFscmVhZHkgaW5pdGlhbGl6ZWQuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCB0aGUgb3B0aW9ucyBhbmQgY3JlYXRlIHRoZSBzbGlkZXIgZW52aXJvbm1lbnQ7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGVzdE9wdGlvbnMob3JpZ2luYWxPcHRpb25zLCB0YXJnZXQpO1xuICAgICAgICB2YXIgYXBpID0gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgICAgIHRhcmdldC5ub1VpU2xpZGVyID0gYXBpO1xuXG4gICAgICAgIHJldHVybiBhcGk7XG4gICAgfVxuXG4gICAgLy8gVXNlIGFuIG9iamVjdCBpbnN0ZWFkIG9mIGEgZnVuY3Rpb24gZm9yIGZ1dHVyZSBleHBhbmRhYmlsaXR5O1xuICAgIHJldHVybiB7XG4gICAgICAgIC8vIEV4cG9zZWQgZm9yIHVuaXQgdGVzdGluZywgZG9uJ3QgdXNlIHRoaXMgaW4geW91ciBhcHBsaWNhdGlvbi5cbiAgICAgICAgX19zcGVjdHJ1bTogU3BlY3RydW0sXG4gICAgICAgIHZlcnNpb246IFZFUlNJT04sXG4gICAgICAgIGNyZWF0ZTogaW5pdGlhbGl6ZVxuICAgIH07XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcbiAgaWYgKGluZGV4IGluIG9iamVjdCkgJGRlZmluZVByb3BlcnR5LmYob2JqZWN0LCBpbmRleCwgY3JlYXRlRGVzYygwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcbn07XG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIEQpIHtcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcbiAgdmFyIFM7XG4gIHJldHVybiBDID09PSB1bmRlZmluZWQgfHwgKFMgPSBhbk9iamVjdChDKVtTUEVDSUVTXSkgPT0gdW5kZWZpbmVkID8gRCA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XG4gIHZhciB1biA9IHRoYXQgPT09IHVuZGVmaW5lZDtcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0KTtcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xuICAgIGNhc2UgMjogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xuICB9IHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmdzKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBPYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG52YXIgaXNOb2RlID0gcmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIGhlYWQsIGxhc3QsIG5vdGlmeTtcblxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBhcmVudCwgZm47XG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG4gICAgfSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xuICB9O1xuXG4gIC8vIE5vZGUuanNcbiAgaWYgKGlzTm9kZSkge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xuICAgIH07XG4gIC8vIGJyb3dzZXJzIHdpdGggTXV0YXRpb25PYnNlcnZlciwgZXhjZXB0IGlPUyBTYWZhcmkgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMzM5XG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcbiAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICAgIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICAgIGlmICghaGVhZCkge1xuICAgICAgaGVhZCA9IHRhc2s7XG4gICAgICBub3RpZnkoKTtcbiAgICB9IGxhc3QgPSB0YXNrO1xuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XG4gIH1cbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcblxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCIvLyA5LjQuMi4zIEFycmF5U3BlY2llc0NyZWF0ZShvcmlnaW5hbEFycmF5LCBsZW5ndGgpXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbCwgbGVuZ3RoKSB7XG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XG4gIHZhciBDO1xuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGlmIChpc09iamVjdChDKSkge1xuICAgICAgQyA9IENbU1BFQ0lFU107XG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gcmV0dXJuIEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYXQgPSByZXF1aXJlKCcuL19zdHJpbmctYXQnKSh0cnVlKTtcblxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYWR2YW5jZXN0cmluZ2luZGV4XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xuXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUiwgUykge1xuICB2YXIgZXhlYyA9IFIuZXhlYztcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIHJlc3VsdCA9IGV4ZWMuY2FsbChSLCBTKTtcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmIChjbGFzc29mKFIpICE9PSAnUmVnRXhwJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcbiAgfVxuICByZXR1cm4gYnVpbHRpbkV4ZWMuY2FsbChSLCBTKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5yZXF1aXJlKCcuL2VzNi5yZWdleHAuZXhlYycpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xuXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xuXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXG4gIC8vICNtYXRjaCB3b3JrcyBmaW5lIGJlY2F1c2UgaXQganVzdCByZXR1cm4gdGhlIGV4ZWMgcmVzdWx0cywgZXZlbiBpZiBpdCBoYXNcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXG4gIHZhciByZSA9IC8uLztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3Jztcbn0pO1xuXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDUxIGhhcyBhIGJ1Z2d5IFwic3BsaXRcIiBpbXBsZW1lbnRhdGlvbiB3aGVuIFJlZ0V4cCNleGVjICE9PSBuYXRpdmVFeGVjXG4gIHZhciByZSA9IC8oPzopLztcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBvcmlnaW5hbEV4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTtcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XG4gIHZhciBTWU1CT0wgPSB3a3MoS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MID8gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XG4gICAgdmFyIHJlID0gL2EvO1xuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XG4gICAgICAvLyBSZWdFeHBbQEBzcGxpdF0gZG9lc24ndCBjYWxsIHRoZSByZWdleCdzIGV4ZWMgbWV0aG9kLCBidXQgZmlyc3QgY3JlYXRlc1xuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcbiAgICAgIHJlLmNvbnN0cnVjdG9yW1NQRUNJRVNdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcmU7IH07XG4gICAgfVxuICAgIHJlW1NZTUJPTF0oJycpO1xuICAgIHJldHVybiAhZXhlY0NhbGxlZDtcbiAgfSkgOiB1bmRlZmluZWQ7XG5cbiAgaWYgKFxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XG4gICAgKEtFWSA9PT0gJ3JlcGxhY2UnICYmICFSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUykgfHxcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXG4gICkge1xuICAgIHZhciBuYXRpdmVSZWdFeHBNZXRob2QgPSAvLi9bU1lNQk9MXTtcbiAgICB2YXIgZm5zID0gZXhlYyhcbiAgICAgIGRlZmluZWQsXG4gICAgICBTWU1CT0wsXG4gICAgICAnJ1tLRVldLFxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgIGlmIChyZWdleHAuZXhlYyA9PT0gcmVnZXhwRXhlYykge1xuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXG4gICAgICAgICAgICAvLyBwb2x5ZmlsbGVkIGZ1bmN0aW9uKSwgbGVhc2luZyB0byBpbmZpbml0ZSByZWN1cnNpb24uXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UgfTtcbiAgICAgIH1cbiAgICApO1xuICAgIHZhciBzdHJmbiA9IGZuc1swXTtcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcblxuICAgIHJlZGVmaW5lKFN0cmluZy5wcm90b3R5cGUsIEtFWSwgc3RyZm4pO1xuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxuICAgICAgLy8gMjEuMi41LjExIFJlZ0V4cC5wcm90b3R5cGVbQEBzcGxpdF0oc3RyaW5nLCBsaW1pdClcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcbiAgICAgIC8vIDIxLjIuNS45IFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdKHN0cmluZylcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xuICB0YXJnZXQ6ICdSZWdFeHAnLFxuICBwcm90bzogdHJ1ZSxcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xufSwge1xuICBleGVjOiByZWdleHBFeGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxucmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKSgndHJpbScsIGZ1bmN0aW9uICgkdHJpbSkge1xuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XG4gIH07XG59KTtcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XG52YXIgbm9uID0gJ1xcdTIwMGJcXHUwMDg1JztcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XG5cbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XG4gIHZhciBleHAgPSB7fTtcbiAgdmFyIEZPUkNFID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XG4gIH0pO1xuICB2YXIgZm4gPSBleHBbS0VZXSA9IEZPUkNFID8gZXhlYyh0cmltKSA6IHNwYWNlc1tLRVldO1xuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XG59O1xuXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxuLy8gMiAtPiBTdHJpbmcjdHJpbVJpZ2h0XG4vLyAzIC0+IFN0cmluZyN0cmltXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XG4gIHN0cmluZyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcbiAgcmV0dXJuIHN0cmluZztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0ZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xuICAnXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwQVxcdTIwMkZcXHUyMDVGXFx1MzAwMFxcdTIwMjhcXHUyMDI5XFx1RkVGRic7XG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXG59KTtcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xuXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2tleXMnLCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH07XG59KTtcbiIsIi8vIG1vc3QgT2JqZWN0IG1ldGhvZHMgYnkgRVM2IHNob3VsZCBhY2NlcHQgcHJpbWl0aXZlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XG4gIHZhciBleHAgPSB7fTtcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XG59O1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIE1BUCA9ICdNYXAnO1xuXG4vLyAyMy4xIE1hcCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XG4gIH0sXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkgPT09IDAgPyAwIDoga2V5LCB2YWx1ZSk7XG4gIH1cbn0sIHN0cm9uZywgdHJ1ZSk7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHRhcmdldCwgQykge1xuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcbiAgdmFyIFA7XG4gIGlmIChTICE9PSBDICYmIHR5cGVvZiBTID09ICdmdW5jdGlvbicgJiYgKFAgPSBTLnByb3RvdHlwZSkgIT09IEMucHJvdG90eXBlICYmIGlzT2JqZWN0KFApICYmIHNldFByb3RvdHlwZU9mKSB7XG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XG4gIH0gcmV0dXJuIHRoYXQ7XG59O1xuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBjaGVjayA9IGZ1bmN0aW9uIChPLCBwcm90bykge1xuICBhbk9iamVjdChPKTtcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGZ1bmN0aW9uICh0ZXN0LCBidWdneSwgc2V0KSB7XG4gICAgICB0cnkge1xuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XG4gICAgICAgIHNldCh0ZXN0LCBbXSk7XG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgICAgICBjaGVjayhPLCBwcm90byk7XG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICAgICAgZWxzZSBzZXQoTywgcHJvdG8pO1xuICAgICAgICByZXR1cm4gTztcbiAgICAgIH07XG4gICAgfSh7fSwgZmFsc2UpIDogdW5kZWZpbmVkKSxcbiAgY2hlY2s6IGNoZWNrXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XG52YXIgU0VUID0gJ1NldCc7XG5cbi8vIDIzLjIgU2V0IE9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcbn0sIHtcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgU0VUKSwgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnaW5jbHVkZXMnKTtcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXG4ndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xudmFyIElOQ0xVREVTID0gJ2luY2x1ZGVzJztcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIHNlYXJjaFN0cmluZywgTkFNRSkge1xuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XG59O1xuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIGlzUmVnRXhwO1xuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgdmFyIHJlID0gLy4vO1xuICB0cnkge1xuICAgICcvLi8nW0tFWV0ocmUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xuICAgICAgcmV0dXJuICEnLy4vJ1tLRVldKHJlKTtcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gdHJ1ZTtcbn07XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBlcHNpbG9uID0gMWUtNixcbiAgICB0YXVFcHNpbG9uID0gdGF1IC0gZXBzaWxvbjtcblxuZnVuY3Rpb24gUGF0aCgpIHtcbiAgdGhpcy5feDAgPSB0aGlzLl95MCA9IC8vIHN0YXJ0IG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl94MSA9IHRoaXMuX3kxID0gbnVsbDsgLy8gZW5kIG9mIGN1cnJlbnQgc3VicGF0aFxuICB0aGlzLl8gPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBwYXRoKCkge1xuICByZXR1cm4gbmV3IFBhdGg7XG59XG5cblBhdGgucHJvdG90eXBlID0gcGF0aC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBQYXRoLFxuICBtb3ZlVG86IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGNsb3NlUGF0aDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX3gxICE9PSBudWxsKSB7XG4gICAgICB0aGlzLl94MSA9IHRoaXMuX3gwLCB0aGlzLl95MSA9IHRoaXMuX3kwO1xuICAgICAgdGhpcy5fICs9IFwiWlwiO1xuICAgIH1cbiAgfSxcbiAgbGluZVRvOiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiTFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIHF1YWRyYXRpY0N1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeCwgeSkge1xuICAgIHRoaXMuXyArPSBcIlFcIiArICgreDEpICsgXCIsXCIgKyAoK3kxKSArIFwiLFwiICsgKHRoaXMuX3gxID0gK3gpICsgXCIsXCIgKyAodGhpcy5feTEgPSAreSk7XG4gIH0sXG4gIGJlemllckN1cnZlVG86IGZ1bmN0aW9uKHgxLCB5MSwgeDIsIHkyLCB4LCB5KSB7XG4gICAgdGhpcy5fICs9IFwiQ1wiICsgKCt4MSkgKyBcIixcIiArICgreTEpICsgXCIsXCIgKyAoK3gyKSArIFwiLFwiICsgKCt5MikgKyBcIixcIiArICh0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kxID0gK3kpO1xuICB9LFxuICBhcmNUbzogZnVuY3Rpb24oeDEsIHkxLCB4MiwgeTIsIHIpIHtcbiAgICB4MSA9ICt4MSwgeTEgPSAreTEsIHgyID0gK3gyLCB5MiA9ICt5MiwgciA9ICtyO1xuICAgIHZhciB4MCA9IHRoaXMuX3gxLFxuICAgICAgICB5MCA9IHRoaXMuX3kxLFxuICAgICAgICB4MjEgPSB4MiAtIHgxLFxuICAgICAgICB5MjEgPSB5MiAtIHkxLFxuICAgICAgICB4MDEgPSB4MCAtIHgxLFxuICAgICAgICB5MDEgPSB5MCAtIHkxLFxuICAgICAgICBsMDFfMiA9IHgwMSAqIHgwMSArIHkwMSAqIHkwMTtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MSx5MSkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPciwgaXMgKHgxLHkxKSBjb2luY2lkZW50IHdpdGggKHgwLHkwKT8gRG8gbm90aGluZy5cbiAgICBlbHNlIGlmICghKGwwMV8yID4gZXBzaWxvbikpO1xuXG4gICAgLy8gT3IsIGFyZSAoeDAseTApLCAoeDEseTEpIGFuZCAoeDIseTIpIGNvbGxpbmVhcj9cbiAgICAvLyBFcXVpdmFsZW50bHksIGlzICh4MSx5MSkgY29pbmNpZGVudCB3aXRoICh4Mix5Mik/XG4gICAgLy8gT3IsIGlzIHRoZSByYWRpdXMgemVybz8gTGluZSB0byAoeDEseTEpLlxuICAgIGVsc2UgaWYgKCEoTWF0aC5hYnMoeTAxICogeDIxIC0geTIxICogeDAxKSA+IGVwc2lsb24pIHx8ICFyKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyAodGhpcy5feDEgPSB4MSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkxKTtcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIGRyYXcgYW4gYXJjIVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHgyMCA9IHgyIC0geDAsXG4gICAgICAgICAgeTIwID0geTIgLSB5MCxcbiAgICAgICAgICBsMjFfMiA9IHgyMSAqIHgyMSArIHkyMSAqIHkyMSxcbiAgICAgICAgICBsMjBfMiA9IHgyMCAqIHgyMCArIHkyMCAqIHkyMCxcbiAgICAgICAgICBsMjEgPSBNYXRoLnNxcnQobDIxXzIpLFxuICAgICAgICAgIGwwMSA9IE1hdGguc3FydChsMDFfMiksXG4gICAgICAgICAgbCA9IHIgKiBNYXRoLnRhbigocGkgLSBNYXRoLmFjb3MoKGwyMV8yICsgbDAxXzIgLSBsMjBfMikgLyAoMiAqIGwyMSAqIGwwMSkpKSAvIDIpLFxuICAgICAgICAgIHQwMSA9IGwgLyBsMDEsXG4gICAgICAgICAgdDIxID0gbCAvIGwyMTtcblxuICAgICAgLy8gSWYgdGhlIHN0YXJ0IHRhbmdlbnQgaXMgbm90IGNvaW5jaWRlbnQgd2l0aCAoeDAseTApLCBsaW5lIHRvLlxuICAgICAgaWYgKE1hdGguYWJzKHQwMSAtIDEpID4gZXBzaWxvbikge1xuICAgICAgICB0aGlzLl8gKz0gXCJMXCIgKyAoeDEgKyB0MDEgKiB4MDEpICsgXCIsXCIgKyAoeTEgKyB0MDEgKiB5MDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwwLFwiICsgKCsoeTAxICogeDIwID4geDAxICogeTIwKSkgKyBcIixcIiArICh0aGlzLl94MSA9IHgxICsgdDIxICogeDIxKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTEgKyB0MjEgKiB5MjEpO1xuICAgIH1cbiAgfSxcbiAgYXJjOiBmdW5jdGlvbih4LCB5LCByLCBhMCwgYTEsIGNjdykge1xuICAgIHggPSAreCwgeSA9ICt5LCByID0gK3I7XG4gICAgdmFyIGR4ID0gciAqIE1hdGguY29zKGEwKSxcbiAgICAgICAgZHkgPSByICogTWF0aC5zaW4oYTApLFxuICAgICAgICB4MCA9IHggKyBkeCxcbiAgICAgICAgeTAgPSB5ICsgZHksXG4gICAgICAgIGN3ID0gMSBeIGNjdyxcbiAgICAgICAgZGEgPSBjY3cgPyBhMCAtIGExIDogYTEgLSBhMDtcblxuICAgIC8vIElzIHRoZSByYWRpdXMgbmVnYXRpdmU/IEVycm9yLlxuICAgIGlmIChyIDwgMCkgdGhyb3cgbmV3IEVycm9yKFwibmVnYXRpdmUgcmFkaXVzOiBcIiArIHIpO1xuXG4gICAgLy8gSXMgdGhpcyBwYXRoIGVtcHR5PyBNb3ZlIHRvICh4MCx5MCkuXG4gICAgaWYgKHRoaXMuX3gxID09PSBudWxsKSB7XG4gICAgICB0aGlzLl8gKz0gXCJNXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gT3IsIGlzICh4MCx5MCkgbm90IGNvaW5jaWRlbnQgd2l0aCB0aGUgcHJldmlvdXMgcG9pbnQ/IExpbmUgdG8gKHgwLHkwKS5cbiAgICBlbHNlIGlmIChNYXRoLmFicyh0aGlzLl94MSAtIHgwKSA+IGVwc2lsb24gfHwgTWF0aC5hYnModGhpcy5feTEgLSB5MCkgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJMXCIgKyB4MCArIFwiLFwiICsgeTA7XG4gICAgfVxuXG4gICAgLy8gSXMgdGhpcyBhcmMgZW1wdHk/IFdl4oCZcmUgZG9uZS5cbiAgICBpZiAoIXIpIHJldHVybjtcblxuICAgIC8vIERvZXMgdGhlIGFuZ2xlIGdvIHRoZSB3cm9uZyB3YXk/IEZsaXAgdGhlIGRpcmVjdGlvbi5cbiAgICBpZiAoZGEgPCAwKSBkYSA9IGRhICUgdGF1ICsgdGF1O1xuXG4gICAgLy8gSXMgdGhpcyBhIGNvbXBsZXRlIGNpcmNsZT8gRHJhdyB0d28gYXJjcyB0byBjb21wbGV0ZSB0aGUgY2lyY2xlLlxuICAgIGlmIChkYSA+IHRhdUVwc2lsb24pIHtcbiAgICAgIHRoaXMuXyArPSBcIkFcIiArIHIgKyBcIixcIiArIHIgKyBcIiwwLDEsXCIgKyBjdyArIFwiLFwiICsgKHggLSBkeCkgKyBcIixcIiArICh5IC0gZHkpICsgXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCwxLFwiICsgY3cgKyBcIixcIiArICh0aGlzLl94MSA9IHgwKSArIFwiLFwiICsgKHRoaXMuX3kxID0geTApO1xuICAgIH1cblxuICAgIC8vIElzIHRoaXMgYXJjIG5vbi1lbXB0eT8gRHJhdyBhbiBhcmMhXG4gICAgZWxzZSBpZiAoZGEgPiBlcHNpbG9uKSB7XG4gICAgICB0aGlzLl8gKz0gXCJBXCIgKyByICsgXCIsXCIgKyByICsgXCIsMCxcIiArICgrKGRhID49IHBpKSkgKyBcIixcIiArIGN3ICsgXCIsXCIgKyAodGhpcy5feDEgPSB4ICsgciAqIE1hdGguY29zKGExKSkgKyBcIixcIiArICh0aGlzLl95MSA9IHkgKyByICogTWF0aC5zaW4oYTEpKTtcbiAgICB9XG4gIH0sXG4gIHJlY3Q6IGZ1bmN0aW9uKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLl8gKz0gXCJNXCIgKyAodGhpcy5feDAgPSB0aGlzLl94MSA9ICt4KSArIFwiLFwiICsgKHRoaXMuX3kwID0gdGhpcy5feTEgPSAreSkgKyBcImhcIiArICgrdykgKyBcInZcIiArICgraCkgKyBcImhcIiArICgtdykgKyBcIlpcIjtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHBhdGg7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKGNvbXBhcmUubGVuZ3RoID09PSAxKSBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihjb21wYXJlKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpIDwgMCkgbG8gPSBtaWQgKyAxO1xuICAgICAgICBlbHNlIGhpID0gbWlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH0sXG4gICAgcmlnaHQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgICAgZWxzZSBsbyA9IG1pZCArIDE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmdDb21wYXJhdG9yKGYpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGQsIHgpIHtcbiAgICByZXR1cm4gYXNjZW5kaW5nKGYoZCksIHgpO1xuICB9O1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBpbml0UmFuZ2UoZG9tYWluLCByYW5nZSkge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5yYW5nZShkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLnJhbmdlKHJhbmdlKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0SW50ZXJwb2xhdG9yKGRvbWFpbiwgaW50ZXJwb2xhdG9yKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLmludGVycG9sYXRvcihkb21haW4pOyBicmVhaztcbiAgICBkZWZhdWx0OiB0aGlzLmludGVycG9sYXRvcihpbnRlcnBvbGF0b3IpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5cbmV4cG9ydCBjb25zdCBpbXBsaWNpdCA9IFN5bWJvbChcImltcGxpY2l0XCIpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRpbmFsKCkge1xuICB2YXIgaW5kZXggPSBuZXcgTWFwKCksXG4gICAgICBkb21haW4gPSBbXSxcbiAgICAgIHJhbmdlID0gW10sXG4gICAgICB1bmtub3duID0gaW1wbGljaXQ7XG5cbiAgZnVuY3Rpb24gc2NhbGUoZCkge1xuICAgIHZhciBrZXkgPSBkICsgXCJcIiwgaSA9IGluZGV4LmdldChrZXkpO1xuICAgIGlmICghaSkge1xuICAgICAgaWYgKHVua25vd24gIT09IGltcGxpY2l0KSByZXR1cm4gdW5rbm93bjtcbiAgICAgIGluZGV4LnNldChrZXksIGkgPSBkb21haW4ucHVzaChkKSk7XG4gICAgfVxuICAgIHJldHVybiByYW5nZVsoaSAtIDEpICUgcmFuZ2UubGVuZ3RoXTtcbiAgfVxuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBkb21haW4uc2xpY2UoKTtcbiAgICBkb21haW4gPSBbXSwgaW5kZXggPSBuZXcgTWFwKCk7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiBfKSB7XG4gICAgICBjb25zdCBrZXkgPSB2YWx1ZSArIFwiXCI7XG4gICAgICBpZiAoaW5kZXguaGFzKGtleSkpIGNvbnRpbnVlO1xuICAgICAgaW5kZXguc2V0KGtleSwgZG9tYWluLnB1c2godmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgc2NhbGUpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS51bmtub3duID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHVua25vd24gPSBfLCBzY2FsZSkgOiB1bmtub3duO1xuICB9O1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gb3JkaW5hbChkb21haW4sIHJhbmdlKS51bmtub3duKHVua25vd24pO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gc2NhbGU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb25zdHJ1Y3RvciwgZmFjdG9yeSwgcHJvdG90eXBlKSB7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGZhY3RvcnkucHJvdG90eXBlID0gcHJvdG90eXBlO1xuICBwcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3Rvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZChwYXJlbnQsIGRlZmluaXRpb24pIHtcbiAgdmFyIHByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG4gIGZvciAodmFyIGtleSBpbiBkZWZpbml0aW9uKSBwcm90b3R5cGVba2V5XSA9IGRlZmluaXRpb25ba2V5XTtcbiAgcmV0dXJuIHByb3RvdHlwZTtcbn1cbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuXG5leHBvcnQgZnVuY3Rpb24gQ29sb3IoKSB7fVxuXG5leHBvcnQgdmFyIGRhcmtlciA9IDAuNztcbmV4cG9ydCB2YXIgYnJpZ2h0ZXIgPSAxIC8gZGFya2VyO1xuXG52YXIgcmVJID0gXCJcXFxccyooWystXT9cXFxcZCspXFxcXHMqXCIsXG4gICAgcmVOID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPylcXFxccypcIixcbiAgICByZVAgPSBcIlxcXFxzKihbKy1dP1xcXFxkKlxcXFwuP1xcXFxkKyg/OltlRV1bKy1dP1xcXFxkKyk/KSVcXFxccypcIixcbiAgICByZUhleDMgPSAvXiMoWzAtOWEtZl17M30pJC8sXG4gICAgcmVIZXg2ID0gL14jKFswLTlhLWZdezZ9KSQvLFxuICAgIHJlUmdiSW50ZWdlciA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZUksIHJlSSwgcmVJXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlUmdiYUludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYmFcXFxcKFwiICsgW3JlSSwgcmVJLCByZUksIHJlTl0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZVAsIHJlUCwgcmVQLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xQZXJjZW50ID0gbmV3IFJlZ0V4cChcIl5oc2xcXFxcKFwiICsgW3JlTiwgcmVQLCByZVBdICsgXCJcXFxcKSRcIiksXG4gICAgcmVIc2xhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsYVxcXFwoXCIgKyBbcmVOLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpO1xuXG52YXIgbmFtZWQgPSB7XG4gIGFsaWNlYmx1ZTogMHhmMGY4ZmYsXG4gIGFudGlxdWV3aGl0ZTogMHhmYWViZDcsXG4gIGFxdWE6IDB4MDBmZmZmLFxuICBhcXVhbWFyaW5lOiAweDdmZmZkNCxcbiAgYXp1cmU6IDB4ZjBmZmZmLFxuICBiZWlnZTogMHhmNWY1ZGMsXG4gIGJpc3F1ZTogMHhmZmU0YzQsXG4gIGJsYWNrOiAweDAwMDAwMCxcbiAgYmxhbmNoZWRhbG1vbmQ6IDB4ZmZlYmNkLFxuICBibHVlOiAweDAwMDBmZixcbiAgYmx1ZXZpb2xldDogMHg4YTJiZTIsXG4gIGJyb3duOiAweGE1MmEyYSxcbiAgYnVybHl3b29kOiAweGRlYjg4NyxcbiAgY2FkZXRibHVlOiAweDVmOWVhMCxcbiAgY2hhcnRyZXVzZTogMHg3ZmZmMDAsXG4gIGNob2NvbGF0ZTogMHhkMjY5MWUsXG4gIGNvcmFsOiAweGZmN2Y1MCxcbiAgY29ybmZsb3dlcmJsdWU6IDB4NjQ5NWVkLFxuICBjb3Juc2lsazogMHhmZmY4ZGMsXG4gIGNyaW1zb246IDB4ZGMxNDNjLFxuICBjeWFuOiAweDAwZmZmZixcbiAgZGFya2JsdWU6IDB4MDAwMDhiLFxuICBkYXJrY3lhbjogMHgwMDhiOGIsXG4gIGRhcmtnb2xkZW5yb2Q6IDB4Yjg4NjBiLFxuICBkYXJrZ3JheTogMHhhOWE5YTksXG4gIGRhcmtncmVlbjogMHgwMDY0MDAsXG4gIGRhcmtncmV5OiAweGE5YTlhOSxcbiAgZGFya2toYWtpOiAweGJkYjc2YixcbiAgZGFya21hZ2VudGE6IDB4OGIwMDhiLFxuICBkYXJrb2xpdmVncmVlbjogMHg1NTZiMmYsXG4gIGRhcmtvcmFuZ2U6IDB4ZmY4YzAwLFxuICBkYXJrb3JjaGlkOiAweDk5MzJjYyxcbiAgZGFya3JlZDogMHg4YjAwMDAsXG4gIGRhcmtzYWxtb246IDB4ZTk5NjdhLFxuICBkYXJrc2VhZ3JlZW46IDB4OGZiYzhmLFxuICBkYXJrc2xhdGVibHVlOiAweDQ4M2Q4YixcbiAgZGFya3NsYXRlZ3JheTogMHgyZjRmNGYsXG4gIGRhcmtzbGF0ZWdyZXk6IDB4MmY0ZjRmLFxuICBkYXJrdHVycXVvaXNlOiAweDAwY2VkMSxcbiAgZGFya3Zpb2xldDogMHg5NDAwZDMsXG4gIGRlZXBwaW5rOiAweGZmMTQ5MyxcbiAgZGVlcHNreWJsdWU6IDB4MDBiZmZmLFxuICBkaW1ncmF5OiAweDY5Njk2OSxcbiAgZGltZ3JleTogMHg2OTY5NjksXG4gIGRvZGdlcmJsdWU6IDB4MWU5MGZmLFxuICBmaXJlYnJpY2s6IDB4YjIyMjIyLFxuICBmbG9yYWx3aGl0ZTogMHhmZmZhZjAsXG4gIGZvcmVzdGdyZWVuOiAweDIyOGIyMixcbiAgZnVjaHNpYTogMHhmZjAwZmYsXG4gIGdhaW5zYm9ybzogMHhkY2RjZGMsXG4gIGdob3N0d2hpdGU6IDB4ZjhmOGZmLFxuICBnb2xkOiAweGZmZDcwMCxcbiAgZ29sZGVucm9kOiAweGRhYTUyMCxcbiAgZ3JheTogMHg4MDgwODAsXG4gIGdyZWVuOiAweDAwODAwMCxcbiAgZ3JlZW55ZWxsb3c6IDB4YWRmZjJmLFxuICBncmV5OiAweDgwODA4MCxcbiAgaG9uZXlkZXc6IDB4ZjBmZmYwLFxuICBob3RwaW5rOiAweGZmNjliNCxcbiAgaW5kaWFucmVkOiAweGNkNWM1YyxcbiAgaW5kaWdvOiAweDRiMDA4MixcbiAgaXZvcnk6IDB4ZmZmZmYwLFxuICBraGFraTogMHhmMGU2OGMsXG4gIGxhdmVuZGVyOiAweGU2ZTZmYSxcbiAgbGF2ZW5kZXJibHVzaDogMHhmZmYwZjUsXG4gIGxhd25ncmVlbjogMHg3Y2ZjMDAsXG4gIGxlbW9uY2hpZmZvbjogMHhmZmZhY2QsXG4gIGxpZ2h0Ymx1ZTogMHhhZGQ4ZTYsXG4gIGxpZ2h0Y29yYWw6IDB4ZjA4MDgwLFxuICBsaWdodGN5YW46IDB4ZTBmZmZmLFxuICBsaWdodGdvbGRlbnJvZHllbGxvdzogMHhmYWZhZDIsXG4gIGxpZ2h0Z3JheTogMHhkM2QzZDMsXG4gIGxpZ2h0Z3JlZW46IDB4OTBlZTkwLFxuICBsaWdodGdyZXk6IDB4ZDNkM2QzLFxuICBsaWdodHBpbms6IDB4ZmZiNmMxLFxuICBsaWdodHNhbG1vbjogMHhmZmEwN2EsXG4gIGxpZ2h0c2VhZ3JlZW46IDB4MjBiMmFhLFxuICBsaWdodHNreWJsdWU6IDB4ODdjZWZhLFxuICBsaWdodHNsYXRlZ3JheTogMHg3Nzg4OTksXG4gIGxpZ2h0c2xhdGVncmV5OiAweDc3ODg5OSxcbiAgbGlnaHRzdGVlbGJsdWU6IDB4YjBjNGRlLFxuICBsaWdodHllbGxvdzogMHhmZmZmZTAsXG4gIGxpbWU6IDB4MDBmZjAwLFxuICBsaW1lZ3JlZW46IDB4MzJjZDMyLFxuICBsaW5lbjogMHhmYWYwZTYsXG4gIG1hZ2VudGE6IDB4ZmYwMGZmLFxuICBtYXJvb246IDB4ODAwMDAwLFxuICBtZWRpdW1hcXVhbWFyaW5lOiAweDY2Y2RhYSxcbiAgbWVkaXVtYmx1ZTogMHgwMDAwY2QsXG4gIG1lZGl1bW9yY2hpZDogMHhiYTU1ZDMsXG4gIG1lZGl1bXB1cnBsZTogMHg5MzcwZGIsXG4gIG1lZGl1bXNlYWdyZWVuOiAweDNjYjM3MSxcbiAgbWVkaXVtc2xhdGVibHVlOiAweDdiNjhlZSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDB4MDBmYTlhLFxuICBtZWRpdW10dXJxdW9pc2U6IDB4NDhkMWNjLFxuICBtZWRpdW12aW9sZXRyZWQ6IDB4YzcxNTg1LFxuICBtaWRuaWdodGJsdWU6IDB4MTkxOTcwLFxuICBtaW50Y3JlYW06IDB4ZjVmZmZhLFxuICBtaXN0eXJvc2U6IDB4ZmZlNGUxLFxuICBtb2NjYXNpbjogMHhmZmU0YjUsXG4gIG5hdmFqb3doaXRlOiAweGZmZGVhZCxcbiAgbmF2eTogMHgwMDAwODAsXG4gIG9sZGxhY2U6IDB4ZmRmNWU2LFxuICBvbGl2ZTogMHg4MDgwMDAsXG4gIG9saXZlZHJhYjogMHg2YjhlMjMsXG4gIG9yYW5nZTogMHhmZmE1MDAsXG4gIG9yYW5nZXJlZDogMHhmZjQ1MDAsXG4gIG9yY2hpZDogMHhkYTcwZDYsXG4gIHBhbGVnb2xkZW5yb2Q6IDB4ZWVlOGFhLFxuICBwYWxlZ3JlZW46IDB4OThmYjk4LFxuICBwYWxldHVycXVvaXNlOiAweGFmZWVlZSxcbiAgcGFsZXZpb2xldHJlZDogMHhkYjcwOTMsXG4gIHBhcGF5YXdoaXA6IDB4ZmZlZmQ1LFxuICBwZWFjaHB1ZmY6IDB4ZmZkYWI5LFxuICBwZXJ1OiAweGNkODUzZixcbiAgcGluazogMHhmZmMwY2IsXG4gIHBsdW06IDB4ZGRhMGRkLFxuICBwb3dkZXJibHVlOiAweGIwZTBlNixcbiAgcHVycGxlOiAweDgwMDA4MCxcbiAgcmViZWNjYXB1cnBsZTogMHg2NjMzOTksXG4gIHJlZDogMHhmZjAwMDAsXG4gIHJvc3licm93bjogMHhiYzhmOGYsXG4gIHJveWFsYmx1ZTogMHg0MTY5ZTEsXG4gIHNhZGRsZWJyb3duOiAweDhiNDUxMyxcbiAgc2FsbW9uOiAweGZhODA3MixcbiAgc2FuZHlicm93bjogMHhmNGE0NjAsXG4gIHNlYWdyZWVuOiAweDJlOGI1NyxcbiAgc2Vhc2hlbGw6IDB4ZmZmNWVlLFxuICBzaWVubmE6IDB4YTA1MjJkLFxuICBzaWx2ZXI6IDB4YzBjMGMwLFxuICBza3libHVlOiAweDg3Y2VlYixcbiAgc2xhdGVibHVlOiAweDZhNWFjZCxcbiAgc2xhdGVncmF5OiAweDcwODA5MCxcbiAgc2xhdGVncmV5OiAweDcwODA5MCxcbiAgc25vdzogMHhmZmZhZmEsXG4gIHNwcmluZ2dyZWVuOiAweDAwZmY3ZixcbiAgc3RlZWxibHVlOiAweDQ2ODJiNCxcbiAgdGFuOiAweGQyYjQ4YyxcbiAgdGVhbDogMHgwMDgwODAsXG4gIHRoaXN0bGU6IDB4ZDhiZmQ4LFxuICB0b21hdG86IDB4ZmY2MzQ3LFxuICB0dXJxdW9pc2U6IDB4NDBlMGQwLFxuICB2aW9sZXQ6IDB4ZWU4MmVlLFxuICB3aGVhdDogMHhmNWRlYjMsXG4gIHdoaXRlOiAweGZmZmZmZixcbiAgd2hpdGVzbW9rZTogMHhmNWY1ZjUsXG4gIHllbGxvdzogMHhmZmZmMDAsXG4gIHllbGxvd2dyZWVuOiAweDlhY2QzMlxufTtcblxuZGVmaW5lKENvbG9yLCBjb2xvciwge1xuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKS5oZXgoKTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpICsgXCJcIjtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yKGZvcm1hdCkge1xuICB2YXIgbTtcbiAgZm9ybWF0ID0gKGZvcm1hdCArIFwiXCIpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICByZXR1cm4gKG0gPSByZUhleDMuZXhlYyhmb3JtYXQpKSA/IChtID0gcGFyc2VJbnQobVsxXSwgMTYpLCBuZXcgUmdiKChtID4+IDggJiAweGYpIHwgKG0gPj4gNCAmIDB4MGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKG0gJiAweGYpIDw8IDQpIHwgKG0gJiAweGYpLCAxKSkgLy8gI2YwMFxuICAgICAgOiAobSA9IHJlSGV4Ni5leGVjKGZvcm1hdCkpID8gcmdibihwYXJzZUludChtWzFdLCAxNikpIC8vICNmZjAwMDBcbiAgICAgIDogKG0gPSByZVJnYkludGVnZXIuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSwgbVsyXSwgbVszXSwgMSkgLy8gcmdiKDI1NSwgMCwgMClcbiAgICAgIDogKG0gPSByZVJnYlBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IG5ldyBSZ2IobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgMSkgLy8gcmdiKDEwMCUsIDAlLCAwJSlcbiAgICAgIDogKG0gPSByZVJnYmFJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0sIG1bMl0sIG1bM10sIG1bNF0pIC8vIHJnYmEoMjU1LCAwLCAwLCAxKVxuICAgICAgOiAobSA9IHJlUmdiYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSAqIDI1NSAvIDEwMCwgbVsyXSAqIDI1NSAvIDEwMCwgbVszXSAqIDI1NSAvIDEwMCwgbVs0XSkgLy8gcmdiKDEwMCUsIDAlLCAwJSwgMSlcbiAgICAgIDogKG0gPSByZUhzbFBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgMSkgLy8gaHNsKDEyMCwgNTAlLCA1MCUpXG4gICAgICA6IChtID0gcmVIc2xhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCBtWzRdKSAvLyBoc2xhKDEyMCwgNTAlLCA1MCUsIDEpXG4gICAgICA6IG5hbWVkLmhhc093blByb3BlcnR5KGZvcm1hdCkgPyByZ2JuKG5hbWVkW2Zvcm1hdF0pXG4gICAgICA6IGZvcm1hdCA9PT0gXCJ0cmFuc3BhcmVudFwiID8gbmV3IFJnYihOYU4sIE5hTiwgTmFOLCAwKVxuICAgICAgOiBudWxsO1xufVxuXG5mdW5jdGlvbiByZ2JuKG4pIHtcbiAgcmV0dXJuIG5ldyBSZ2IobiA+PiAxNiAmIDB4ZmYsIG4gPj4gOCAmIDB4ZmYsIG4gJiAweGZmLCAxKTtcbn1cblxuZnVuY3Rpb24gcmdiYShyLCBnLCBiLCBhKSB7XG4gIGlmIChhIDw9IDApIHIgPSBnID0gYiA9IE5hTjtcbiAgcmV0dXJuIG5ldyBSZ2IociwgZywgYiwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2JDb252ZXJ0KG8pIHtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgUmdiO1xuICBvID0gby5yZ2IoKTtcbiAgcmV0dXJuIG5ldyBSZ2Ioby5yLCBvLmcsIG8uYiwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gcmdiQ29udmVydChyKSA6IG5ldyBSZ2IociwgZywgYiwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gUmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgdGhpcy5yID0gK3I7XG4gIHRoaXMuZyA9ICtnO1xuICB0aGlzLmIgPSArYjtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShSZ2IsIHJnYiwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgUmdiKHRoaXMuciAqIGssIHRoaXMuZyAqIGssIHRoaXMuYiAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5yICYmIHRoaXMuciA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMuZyAmJiB0aGlzLmcgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmIgJiYgdGhpcy5iIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfSxcbiAgaGV4OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgYSA9IHRoaXMub3BhY2l0eTsgYSA9IGlzTmFOKGEpID8gMSA6IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIGEpKTtcbiAgICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5yKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5nKSB8fCAwKSkgKyBcIiwgXCJcbiAgICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICAgKyAoYSA9PT0gMSA/IFwiKVwiIDogXCIsIFwiICsgYSArIFwiKVwiKTtcbiAgfVxufSkpO1xuXG5mdW5jdGlvbiBoZXgodmFsdWUpIHtcbiAgdmFsdWUgPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodmFsdWUpIHx8IDApKTtcbiAgcmV0dXJuICh2YWx1ZSA8IDE2ID8gXCIwXCIgOiBcIlwiKSArIHZhbHVlLnRvU3RyaW5nKDE2KTtcbn1cblxuZnVuY3Rpb24gaHNsYShoLCBzLCBsLCBhKSB7XG4gIGlmIChhIDw9IDApIGggPSBzID0gbCA9IE5hTjtcbiAgZWxzZSBpZiAobCA8PSAwIHx8IGwgPj0gMSkgaCA9IHMgPSBOYU47XG4gIGVsc2UgaWYgKHMgPD0gMCkgaCA9IE5hTjtcbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBuZXcgSHNsKG8uaCwgby5zLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IEhzbDtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIc2wpIHJldHVybiBvO1xuICBvID0gby5yZ2IoKTtcbiAgdmFyIHIgPSBvLnIgLyAyNTUsXG4gICAgICBnID0gby5nIC8gMjU1LFxuICAgICAgYiA9IG8uYiAvIDI1NSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBoID0gTmFOLFxuICAgICAgcyA9IG1heCAtIG1pbixcbiAgICAgIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gIGlmIChzKSB7XG4gICAgaWYgKHIgPT09IG1heCkgaCA9IChnIC0gYikgLyBzICsgKGcgPCBiKSAqIDY7XG4gICAgZWxzZSBpZiAoZyA9PT0gbWF4KSBoID0gKGIgLSByKSAvIHMgKyAyO1xuICAgIGVsc2UgaCA9IChyIC0gZykgLyBzICsgNDtcbiAgICBzIC89IGwgPCAwLjUgPyBtYXggKyBtaW4gOiAyIC0gbWF4IC0gbWluO1xuICAgIGggKj0gNjA7XG4gIH0gZWxzZSB7XG4gICAgcyA9IGwgPiAwICYmIGwgPCAxID8gMCA6IGg7XG4gIH1cbiAgcmV0dXJuIG5ldyBIc2woaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaHNsQ29udmVydChoKSA6IG5ldyBIc2woaCwgcywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5mdW5jdGlvbiBIc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhzbCwgaHNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gdGhpcy5oICUgMzYwICsgKHRoaXMuaCA8IDApICogMzYwLFxuICAgICAgICBzID0gaXNOYU4oaCkgfHwgaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMsXG4gICAgICAgIGwgPSB0aGlzLmwsXG4gICAgICAgIG0yID0gbCArIChsIDwgMC41ID8gbCA6IDEgLSBsKSAqIHMsXG4gICAgICAgIG0xID0gMiAqIGwgLSBtMjtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGhzbDJyZ2IoaCA+PSAyNDAgPyBoIC0gMjQwIDogaCArIDEyMCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCwgbTEsIG0yKSxcbiAgICAgIGhzbDJyZ2IoaCA8IDEyMCA/IGggKyAyNDAgOiBoIC0gMTIwLCBtMSwgbTIpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoMCA8PSB0aGlzLnMgJiYgdGhpcy5zIDw9IDEgfHwgaXNOYU4odGhpcy5zKSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5sICYmIHRoaXMubCA8PSAxKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9XG59KSk7XG5cbi8qIEZyb20gRnZEIDEzLjM3LCBDU1MgQ29sb3IgTW9kdWxlIExldmVsIDMgKi9cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgbTEsIG0yKSB7XG4gIHJldHVybiAoaCA8IDYwID8gbTEgKyAobTIgLSBtMSkgKiBoIC8gNjBcbiAgICAgIDogaCA8IDE4MCA/IG0yXG4gICAgICA6IGggPCAyNDAgPyBtMSArIChtMiAtIG0xKSAqICgyNDAgLSBoKSAvIDYwXG4gICAgICA6IG0xKSAqIDI1NTtcbn1cbiIsImV4cG9ydCB2YXIgZGVnMnJhZCA9IE1hdGguUEkgLyAxODA7XG5leHBvcnQgdmFyIHJhZDJkZWcgPSAxODAgLyBNYXRoLlBJO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxuLy8gaHR0cHM6Ly9iZXRhLm9ic2VydmFibGVocS5jb20vQG1ib3N0b2NrL2xhYi1hbmQtcmdiXG52YXIgSyA9IDE4LFxuICAgIFhuID0gMC45NjQyMixcbiAgICBZbiA9IDEsXG4gICAgWm4gPSAwLjgyNTIxLFxuICAgIHQwID0gNCAvIDI5LFxuICAgIHQxID0gNiAvIDI5LFxuICAgIHQyID0gMyAqIHQxICogdDEsXG4gICAgdDMgPSB0MSAqIHQxICogdDE7XG5cbmZ1bmN0aW9uIGxhYkNvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIExhYikgcmV0dXJuIG5ldyBMYWIoby5sLCBvLmEsIG8uYiwgby5vcGFjaXR5KTtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHtcbiAgICBpZiAoaXNOYU4oby5oKSkgcmV0dXJuIG5ldyBMYWIoby5sLCAwLCAwLCBvLm9wYWNpdHkpO1xuICAgIHZhciBoID0gby5oICogZGVnMnJhZDtcbiAgICByZXR1cm4gbmV3IExhYihvLmwsIE1hdGguY29zKGgpICogby5jLCBNYXRoLnNpbihoKSAqIG8uYywgby5vcGFjaXR5KTtcbiAgfVxuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gcmdiMmxyZ2Ioby5yKSxcbiAgICAgIGcgPSByZ2IybHJnYihvLmcpLFxuICAgICAgYiA9IHJnYjJscmdiKG8uYiksXG4gICAgICB5ID0geHl6MmxhYigoMC4yMjI1MDQ1ICogciArIDAuNzE2ODc4NiAqIGcgKyAwLjA2MDYxNjkgKiBiKSAvIFluKSwgeCwgejtcbiAgaWYgKHIgPT09IGcgJiYgZyA9PT0gYikgeCA9IHogPSB5OyBlbHNlIHtcbiAgICB4ID0geHl6MmxhYigoMC40MzYwNzQ3ICogciArIDAuMzg1MDY0OSAqIGcgKyAwLjE0MzA4MDQgKiBiKSAvIFhuKTtcbiAgICB6ID0geHl6MmxhYigoMC4wMTM5MzIyICogciArIDAuMDk3MTA0NSAqIGcgKyAwLjcxNDE3MzMgKiBiKSAvIFpuKTtcbiAgfVxuICByZXR1cm4gbmV3IExhYigxMTYgKiB5IC0gMTYsIDUwMCAqICh4IC0geSksIDIwMCAqICh5IC0geiksIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncmF5KGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIG5ldyBMYWIobCwgMCwgMCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGxhYkNvbnZlcnQobCkgOiBuZXcgTGFiKGwsIGEsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIExhYihsLCBhLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLmEgPSArYTtcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoTGFiLCBsYWIsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBMYWIodGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMuYSwgdGhpcy5iLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciB5ID0gKHRoaXMubCArIDE2KSAvIDExNixcbiAgICAgICAgeCA9IGlzTmFOKHRoaXMuYSkgPyB5IDogeSArIHRoaXMuYSAvIDUwMCxcbiAgICAgICAgeiA9IGlzTmFOKHRoaXMuYikgPyB5IDogeSAtIHRoaXMuYiAvIDIwMDtcbiAgICB4ID0gWG4gKiBsYWIyeHl6KHgpO1xuICAgIHkgPSBZbiAqIGxhYjJ4eXooeSk7XG4gICAgeiA9IFpuICogbGFiMnh5eih6KTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIGxyZ2IycmdiKCAzLjEzMzg1NjEgKiB4IC0gMS42MTY4NjY3ICogeSAtIDAuNDkwNjE0NiAqIHopLFxuICAgICAgbHJnYjJyZ2IoLTAuOTc4NzY4NCAqIHggKyAxLjkxNjE0MTUgKiB5ICsgMC4wMzM0NTQwICogeiksXG4gICAgICBscmdiMnJnYiggMC4wNzE5NDUzICogeCAtIDAuMjI4OTkxNCAqIHkgKyAxLjQwNTI0MjcgKiB6KSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24geHl6MmxhYih0KSB7XG4gIHJldHVybiB0ID4gdDMgPyBNYXRoLnBvdyh0LCAxIC8gMykgOiB0IC8gdDIgKyB0MDtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eih0KSB7XG4gIHJldHVybiB0ID4gdDEgPyB0ICogdCAqIHQgOiB0MiAqICh0IC0gdDApO1xufVxuXG5mdW5jdGlvbiBscmdiMnJnYih4KSB7XG4gIHJldHVybiAyNTUgKiAoeCA8PSAwLjAwMzEzMDggPyAxMi45MiAqIHggOiAxLjA1NSAqIE1hdGgucG93KHgsIDEgLyAyLjQpIC0gMC4wNTUpO1xufVxuXG5mdW5jdGlvbiByZ2IybHJnYih4KSB7XG4gIHJldHVybiAoeCAvPSAyNTUpIDw9IDAuMDQwNDUgPyB4IC8gMTIuOTIgOiBNYXRoLnBvdygoeCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xufVxuXG5mdW5jdGlvbiBoY2xDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBIY2wpIHJldHVybiBuZXcgSGNsKG8uaCwgby5jLCBvLmwsIG8ub3BhY2l0eSk7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBMYWIpKSBvID0gbGFiQ29udmVydChvKTtcbiAgaWYgKG8uYSA9PT0gMCAmJiBvLmIgPT09IDApIHJldHVybiBuZXcgSGNsKE5hTiwgMCwgby5sLCBvLm9wYWNpdHkpO1xuICB2YXIgaCA9IE1hdGguYXRhbjIoby5iLCBvLmEpICogcmFkMmRlZztcbiAgcmV0dXJuIG5ldyBIY2woaCA8IDAgPyBoICsgMzYwIDogaCwgTWF0aC5zcXJ0KG8uYSAqIG8uYSArIG8uYiAqIG8uYiksIG8ubCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxjaChsLCBjLCBoLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChsKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoY2xDb252ZXJ0KGgpIDogbmV3IEhjbChoLCBjLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBIY2woaCwgYywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5jID0gK2M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEhjbCwgaGNsLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sICsgSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgSGNsKHRoaXMuaCwgdGhpcy5jLCB0aGlzLmwgLSBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gbGFiQ29udmVydCh0aGlzKS5yZ2IoKTtcbiAgfVxufSkpO1xuIiwiaW1wb3J0IGRlZmluZSwge2V4dGVuZH0gZnJvbSBcIi4vZGVmaW5lXCI7XG5pbXBvcnQge0NvbG9yLCByZ2JDb252ZXJ0LCBSZ2IsIGRhcmtlciwgYnJpZ2h0ZXJ9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge2RlZzJyYWQsIHJhZDJkZWd9IGZyb20gXCIuL21hdGhcIjtcblxudmFyIEEgPSAtMC4xNDg2MSxcbiAgICBCID0gKzEuNzgyNzcsXG4gICAgQyA9IC0wLjI5MjI3LFxuICAgIEQgPSAtMC45MDY0OSxcbiAgICBFID0gKzEuOTcyOTQsXG4gICAgRUQgPSBFICogRCxcbiAgICBFQiA9IEUgKiBCLFxuICAgIEJDX0RBID0gQiAqIEMgLSBEICogQTtcblxuZnVuY3Rpb24gY3ViZWhlbGl4Q29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgQ3ViZWhlbGl4KSByZXR1cm4gbmV3IEN1YmVoZWxpeChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgUmdiKSkgbyA9IHJnYkNvbnZlcnQobyk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBsID0gKEJDX0RBICogYiArIEVEICogciAtIEVCICogZykgLyAoQkNfREEgKyBFRCAtIEVCKSxcbiAgICAgIGJsID0gYiAtIGwsXG4gICAgICBrID0gKEUgKiAoZyAtIGwpIC0gQyAqIGJsKSAvIEQsXG4gICAgICBzID0gTWF0aC5zcXJ0KGsgKiBrICsgYmwgKiBibCkgLyAoRSAqIGwgKiAoMSAtIGwpKSwgLy8gTmFOIGlmIGw9MCBvciBsPTFcbiAgICAgIGggPSBzID8gTWF0aC5hdGFuMihrLCBibCkgKiByYWQyZGVnIC0gMTIwIDogTmFOO1xuICByZXR1cm4gbmV3IEN1YmVoZWxpeChoIDwgMCA/IGggKyAzNjAgOiBoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGN1YmVoZWxpeENvbnZlcnQoaCkgOiBuZXcgQ3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoQ3ViZWhlbGl4LCBjdWJlaGVsaXgsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEN1YmVoZWxpeCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSBpc05hTih0aGlzLmgpID8gMCA6ICh0aGlzLmggKyAxMjApICogZGVnMnJhZCxcbiAgICAgICAgbCA9ICt0aGlzLmwsXG4gICAgICAgIGEgPSBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyAqIGwgKiAoMSAtIGwpLFxuICAgICAgICBjb3NoID0gTWF0aC5jb3MoaCksXG4gICAgICAgIHNpbmggPSBNYXRoLnNpbihoKTtcbiAgICByZXR1cm4gbmV3IFJnYihcbiAgICAgIDI1NSAqIChsICsgYSAqIChBICogY29zaCArIEIgKiBzaW5oKSksXG4gICAgICAyNTUgKiAobCArIGEgKiAoQyAqIGNvc2ggKyBEICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEUgKiBjb3NoKSksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG4iLCJleHBvcnQgZnVuY3Rpb24gYmFzaXModDEsIHYwLCB2MSwgdjIsIHYzKSB7XG4gIHZhciB0MiA9IHQxICogdDEsIHQzID0gdDIgKiB0MTtcbiAgcmV0dXJuICgoMSAtIDMgKiB0MSArIDMgKiB0MiAtIHQzKSAqIHYwXG4gICAgICArICg0IC0gNiAqIHQyICsgMyAqIHQzKSAqIHYxXG4gICAgICArICgxICsgMyAqIHQxICsgMyAqIHQyIC0gMyAqIHQzKSAqIHYyXG4gICAgICArIHQzICogdjMpIC8gNjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aCAtIDE7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0IDw9IDAgPyAodCA9IDApIDogdCA+PSAxID8gKHQgPSAxLCBuIC0gMSkgOiBNYXRoLmZsb29yKHQgKiBuKSxcbiAgICAgICAgdjEgPSB2YWx1ZXNbaV0sXG4gICAgICAgIHYyID0gdmFsdWVzW2kgKyAxXSxcbiAgICAgICAgdjAgPSBpID4gMCA/IHZhbHVlc1tpIC0gMV0gOiAyICogdjEgLSB2MixcbiAgICAgICAgdjMgPSBpIDwgbiAtIDEgPyB2YWx1ZXNbaSArIDJdIDogMiAqIHYyIC0gdjE7XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZnVuY3Rpb24gbGluZWFyKGEsIGQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIHQgKiBkO1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBvbmVudGlhbChhLCBiLCB5KSB7XG4gIHJldHVybiBhID0gTWF0aC5wb3coYSwgeSksIGIgPSBNYXRoLnBvdyhiLCB5KSAtIGEsIHkgPSAxIC8geSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyhhICsgdCAqIGIsIHkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHVlKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCA+IDE4MCB8fCBkIDwgLTE4MCA/IGQgLSAzNjAgKiBNYXRoLnJvdW5kKGQgLyAzNjApIDogZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdhbW1hKHkpIHtcbiAgcmV0dXJuICh5ID0gK3kpID09PSAxID8gbm9nYW1tYSA6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gYiAtIGEgPyBleHBvbmVudGlhbChhLCBiLCB5KSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub2dhbW1hKGEsIGIpIHtcbiAgdmFyIGQgPSBiIC0gYTtcbiAgcmV0dXJuIGQgPyBsaW5lYXIoYSwgZCkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbn1cbiIsImltcG9ydCB7cmdiIGFzIGNvbG9yUmdifSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBiYXNpcyBmcm9tIFwiLi9iYXNpc1wiO1xuaW1wb3J0IGJhc2lzQ2xvc2VkIGZyb20gXCIuL2Jhc2lzQ2xvc2VkXCI7XG5pbXBvcnQgbm9nYW1tYSwge2dhbW1hfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5leHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gcmdiR2FtbWEoeSkge1xuICB2YXIgY29sb3IgPSBnYW1tYSh5KTtcblxuICBmdW5jdGlvbiByZ2Ioc3RhcnQsIGVuZCkge1xuICAgIHZhciByID0gY29sb3IoKHN0YXJ0ID0gY29sb3JSZ2Ioc3RhcnQpKS5yLCAoZW5kID0gY29sb3JSZ2IoZW5kKSkuciksXG4gICAgICAgIGcgPSBjb2xvcihzdGFydC5nLCBlbmQuZyksXG4gICAgICAgIGIgPSBjb2xvcihzdGFydC5iLCBlbmQuYiksXG4gICAgICAgIG9wYWNpdHkgPSBub2dhbW1hKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuciA9IHIodCk7XG4gICAgICBzdGFydC5nID0gZyh0KTtcbiAgICAgIHN0YXJ0LmIgPSBiKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cblxuICByZ2IuZ2FtbWEgPSByZ2JHYW1tYTtcblxuICByZXR1cm4gcmdiO1xufSkoMSk7XG5cbmZ1bmN0aW9uIHJnYlNwbGluZShzcGxpbmUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGNvbG9ycykge1xuICAgIHZhciBuID0gY29sb3JzLmxlbmd0aCxcbiAgICAgICAgciA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgZyA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgYiA9IG5ldyBBcnJheShuKSxcbiAgICAgICAgaSwgY29sb3I7XG4gICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgY29sb3IgPSBjb2xvclJnYihjb2xvcnNbaV0pO1xuICAgICAgcltpXSA9IGNvbG9yLnIgfHwgMDtcbiAgICAgIGdbaV0gPSBjb2xvci5nIHx8IDA7XG4gICAgICBiW2ldID0gY29sb3IuYiB8fCAwO1xuICAgIH1cbiAgICByID0gc3BsaW5lKHIpO1xuICAgIGcgPSBzcGxpbmUoZyk7XG4gICAgYiA9IHNwbGluZShiKTtcbiAgICBjb2xvci5vcGFjaXR5ID0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgY29sb3IuciA9IHIodCk7XG4gICAgICBjb2xvci5nID0gZyh0KTtcbiAgICAgIGNvbG9yLmIgPSBiKHQpO1xuICAgICAgcmV0dXJuIGNvbG9yICsgXCJcIjtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIHJnYkJhc2lzID0gcmdiU3BsaW5lKGJhc2lzKTtcbmV4cG9ydCB2YXIgcmdiQmFzaXNDbG9zZWQgPSByZ2JTcGxpbmUoYmFzaXNDbG9zZWQpO1xuIiwiaW1wb3J0IHtiYXNpc30gZnJvbSBcIi4vYmFzaXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWVzKSB7XG4gIHZhciBuID0gdmFsdWVzLmxlbmd0aDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgaSA9IE1hdGguZmxvb3IoKCh0ICU9IDEpIDwgMCA/ICsrdCA6IHQpICogbiksXG4gICAgICAgIHYwID0gdmFsdWVzWyhpICsgbiAtIDEpICUgbl0sXG4gICAgICAgIHYxID0gdmFsdWVzW2kgJSBuXSxcbiAgICAgICAgdjIgPSB2YWx1ZXNbKGkgKyAxKSAlIG5dLFxuICAgICAgICB2MyA9IHZhbHVlc1soaSArIDIpICUgbl07XG4gICAgcmV0dXJuIGJhc2lzKCh0IC0gaSAvIG4pICogbiwgdjAsIHYxLCB2MiwgdjMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYSArIGIgKiB0O1xuICB9O1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHJlQSA9IC9bLStdPyg/OlxcZCtcXC4/XFxkKnxcXC4/XFxkKykoPzpbZUVdWy0rXT9cXGQrKT8vZyxcbiAgICByZUIgPSBuZXcgUmVnRXhwKHJlQS5zb3VyY2UsIFwiZ1wiKTtcblxuZnVuY3Rpb24gemVybyhiKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gYjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25lKGIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gYih0KSArIFwiXCI7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGJpID0gcmVBLmxhc3RJbmRleCA9IHJlQi5sYXN0SW5kZXggPSAwLCAvLyBzY2FuIGluZGV4IGZvciBuZXh0IG51bWJlciBpbiBiXG4gICAgICBhbSwgLy8gY3VycmVudCBtYXRjaCBpbiBhXG4gICAgICBibSwgLy8gY3VycmVudCBtYXRjaCBpbiBiXG4gICAgICBicywgLy8gc3RyaW5nIHByZWNlZGluZyBjdXJyZW50IG51bWJlciBpbiBiLCBpZiBhbnlcbiAgICAgIGkgPSAtMSwgLy8gaW5kZXggaW4gc1xuICAgICAgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcblxuICAvLyBDb2VyY2UgaW5wdXRzIHRvIHN0cmluZ3MuXG4gIGEgPSBhICsgXCJcIiwgYiA9IGIgKyBcIlwiO1xuXG4gIC8vIEludGVycG9sYXRlIHBhaXJzIG9mIG51bWJlcnMgaW4gYSAmIGIuXG4gIHdoaWxlICgoYW0gPSByZUEuZXhlYyhhKSlcbiAgICAgICYmIChibSA9IHJlQi5leGVjKGIpKSkge1xuICAgIGlmICgoYnMgPSBibS5pbmRleCkgPiBiaSkgeyAvLyBhIHN0cmluZyBwcmVjZWRlcyB0aGUgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYnMgPSBiLnNsaWNlKGJpLCBicyk7XG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYnM7XG4gICAgfVxuICAgIGlmICgoYW0gPSBhbVswXSkgPT09IChibSA9IGJtWzBdKSkgeyAvLyBudW1iZXJzIGluIGEgJiBiIG1hdGNoXG4gICAgICBpZiAoc1tpXSkgc1tpXSArPSBibTsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICAgIGVsc2Ugc1srK2ldID0gYm07XG4gICAgfSBlbHNlIHsgLy8gaW50ZXJwb2xhdGUgbm9uLW1hdGNoaW5nIG51bWJlcnNcbiAgICAgIHNbKytpXSA9IG51bGw7XG4gICAgICBxLnB1c2goe2k6IGksIHg6IG51bWJlcihhbSwgYm0pfSk7XG4gICAgfVxuICAgIGJpID0gcmVCLmxhc3RJbmRleDtcbiAgfVxuXG4gIC8vIEFkZCByZW1haW5zIG9mIGIuXG4gIGlmIChiaSA8IGIubGVuZ3RoKSB7XG4gICAgYnMgPSBiLnNsaWNlKGJpKTtcbiAgICBpZiAoc1tpXSkgc1tpXSArPSBiczsgLy8gY29hbGVzY2Ugd2l0aCBwcmV2aW91cyBzdHJpbmdcbiAgICBlbHNlIHNbKytpXSA9IGJzO1xuICB9XG5cbiAgLy8gU3BlY2lhbCBvcHRpbWl6YXRpb24gZm9yIG9ubHkgYSBzaW5nbGUgbWF0Y2guXG4gIC8vIE90aGVyd2lzZSwgaW50ZXJwb2xhdGUgZWFjaCBvZiB0aGUgbnVtYmVycyBhbmQgcmVqb2luIHRoZSBzdHJpbmcuXG4gIHJldHVybiBzLmxlbmd0aCA8IDIgPyAocVswXVxuICAgICAgPyBvbmUocVswXS54KVxuICAgICAgOiB6ZXJvKGIpKVxuICAgICAgOiAoYiA9IHEubGVuZ3RoLCBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDAsIG87IGkgPCBiOyArK2kpIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgICAgICB9KTtcbn1cbiIsImltcG9ydCBkZWNvbXBvc2UsIHtpZGVudGl0eX0gZnJvbSBcIi4vZGVjb21wb3NlXCI7XG5cbnZhciBjc3NOb2RlLFxuICAgIGNzc1Jvb3QsXG4gICAgY3NzVmlldyxcbiAgICBzdmdOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBcIm5vbmVcIikgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIWNzc05vZGUpIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiRElWXCIpLCBjc3NSb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBjc3NWaWV3ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXc7XG4gIGNzc05vZGUuc3R5bGUudHJhbnNmb3JtID0gdmFsdWU7XG4gIHZhbHVlID0gY3NzVmlldy5nZXRDb21wdXRlZFN0eWxlKGNzc1Jvb3QuYXBwZW5kQ2hpbGQoY3NzTm9kZSksIG51bGwpLmdldFByb3BlcnR5VmFsdWUoXCJ0cmFuc2Zvcm1cIik7XG4gIGNzc1Jvb3QucmVtb3ZlQ2hpbGQoY3NzTm9kZSk7XG4gIHZhbHVlID0gdmFsdWUuc2xpY2UoNywgLTEpLnNwbGl0KFwiLFwiKTtcbiAgcmV0dXJuIGRlY29tcG9zZSgrdmFsdWVbMF0sICt2YWx1ZVsxXSwgK3ZhbHVlWzJdLCArdmFsdWVbM10sICt2YWx1ZVs0XSwgK3ZhbHVlWzVdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU3ZnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gaWRlbnRpdHk7XG4gIGlmICghc3ZnTm9kZSkgc3ZnTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIFwiZ1wiKTtcbiAgc3ZnTm9kZS5zZXRBdHRyaWJ1dGUoXCJ0cmFuc2Zvcm1cIiwgdmFsdWUpO1xuICBpZiAoISh2YWx1ZSA9IHN2Z05vZGUudHJhbnNmb3JtLmJhc2VWYWwuY29uc29saWRhdGUoKSkpIHJldHVybiBpZGVudGl0eTtcbiAgdmFsdWUgPSB2YWx1ZS5tYXRyaXg7XG4gIHJldHVybiBkZWNvbXBvc2UodmFsdWUuYSwgdmFsdWUuYiwgdmFsdWUuYywgdmFsdWUuZCwgdmFsdWUuZSwgdmFsdWUuZik7XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCByZ2IgZnJvbSBcIi4vcmdiXCI7XG5pbXBvcnQgYXJyYXkgZnJvbSBcIi4vYXJyYXlcIjtcbmltcG9ydCBkYXRlIGZyb20gXCIuL2RhdGVcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5pbXBvcnQgb2JqZWN0IGZyb20gXCIuL29iamVjdFwiO1xuaW1wb3J0IHN0cmluZyBmcm9tIFwiLi9zdHJpbmdcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB0ID0gdHlwZW9mIGIsIGM7XG4gIHJldHVybiBiID09IG51bGwgfHwgdCA9PT0gXCJib29sZWFuXCIgPyBjb25zdGFudChiKVxuICAgICAgOiAodCA9PT0gXCJudW1iZXJcIiA/IG51bWJlclxuICAgICAgOiB0ID09PSBcInN0cmluZ1wiID8gKChjID0gY29sb3IoYikpID8gKGIgPSBjLCByZ2IpIDogc3RyaW5nKVxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyByZ2JcbiAgICAgIDogYiBpbnN0YW5jZW9mIERhdGUgPyBkYXRlXG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBhcnJheVxuICAgICAgOiB0eXBlb2YgYi52YWx1ZU9mICE9PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGIudG9TdHJpbmcgIT09IFwiZnVuY3Rpb25cIiB8fCBpc05hTihiKSA/IG9iamVjdFxuICAgICAgOiBudW1iZXIpKGEsIGIpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgZCA9IG5ldyBEYXRlO1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gZC5zZXRUaW1lKGEgKyBiICogdCksIGQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgbmIgPSBiID8gYi5sZW5ndGggOiAwLFxuICAgICAgbmEgPSBhID8gTWF0aC5taW4obmIsIGEubGVuZ3RoKSA6IDAsXG4gICAgICB4ID0gbmV3IEFycmF5KG5hKSxcbiAgICAgIGMgPSBuZXcgQXJyYXkobmIpLFxuICAgICAgaTtcblxuICBmb3IgKGkgPSAwOyBpIDwgbmE7ICsraSkgeFtpXSA9IHZhbHVlKGFbaV0sIGJbaV0pO1xuICBmb3IgKDsgaSA8IG5iOyArK2kpIGNbaV0gPSBiW2ldO1xuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIGNbaV0gPSB4W2ldKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGkgPSB7fSxcbiAgICAgIGMgPSB7fSxcbiAgICAgIGs7XG5cbiAgaWYgKGEgPT09IG51bGwgfHwgdHlwZW9mIGEgIT09IFwib2JqZWN0XCIpIGEgPSB7fTtcbiAgaWYgKGIgPT09IG51bGwgfHwgdHlwZW9mIGIgIT09IFwib2JqZWN0XCIpIGIgPSB7fTtcblxuICBmb3IgKGsgaW4gYikge1xuICAgIGlmIChrIGluIGEpIHtcbiAgICAgIGlba10gPSB2YWx1ZShhW2tdLCBiW2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY1trXSA9IGJba107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICBmb3IgKGsgaW4gaSkgY1trXSA9IGlba10odCk7XG4gICAgcmV0dXJuIGM7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHJldHVybiBhID0gK2EsIGIgLT0gYSwgZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKGEgKyBiICogdCk7XG4gIH07XG59XG4iLCJ2YXIgZGVncmVlcyA9IDE4MCAvIE1hdGguUEk7XG5cbmV4cG9ydCB2YXIgaWRlbnRpdHkgPSB7XG4gIHRyYW5zbGF0ZVg6IDAsXG4gIHRyYW5zbGF0ZVk6IDAsXG4gIHJvdGF0ZTogMCxcbiAgc2tld1g6IDAsXG4gIHNjYWxlWDogMSxcbiAgc2NhbGVZOiAxXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBzY2FsZVgsIHNjYWxlWSwgc2tld1g7XG4gIGlmIChzY2FsZVggPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYikpIGEgLz0gc2NhbGVYLCBiIC89IHNjYWxlWDtcbiAgaWYgKHNrZXdYID0gYSAqIGMgKyBiICogZCkgYyAtPSBhICogc2tld1gsIGQgLT0gYiAqIHNrZXdYO1xuICBpZiAoc2NhbGVZID0gTWF0aC5zcXJ0KGMgKiBjICsgZCAqIGQpKSBjIC89IHNjYWxlWSwgZCAvPSBzY2FsZVksIHNrZXdYIC89IHNjYWxlWTtcbiAgaWYgKGEgKiBkIDwgYiAqIGMpIGEgPSAtYSwgYiA9IC1iLCBza2V3WCA9IC1za2V3WCwgc2NhbGVYID0gLXNjYWxlWDtcbiAgcmV0dXJuIHtcbiAgICB0cmFuc2xhdGVYOiBlLFxuICAgIHRyYW5zbGF0ZVk6IGYsXG4gICAgcm90YXRlOiBNYXRoLmF0YW4yKGIsIGEpICogZGVncmVlcyxcbiAgICBza2V3WDogTWF0aC5hdGFuKHNrZXdYKSAqIGRlZ3JlZXMsXG4gICAgc2NhbGVYOiBzY2FsZVgsXG4gICAgc2NhbGVZOiBzY2FsZVlcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4uL251bWJlclwiO1xuaW1wb3J0IHtwYXJzZUNzcywgcGFyc2VTdmd9IGZyb20gXCIuL3BhcnNlXCI7XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlLCBweENvbW1hLCBweFBhcmVuLCBkZWdQYXJlbikge1xuXG4gIGZ1bmN0aW9uIHBvcChzKSB7XG4gICAgcmV0dXJuIHMubGVuZ3RoID8gcy5wb3AoKSArIFwiIFwiIDogXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYW5zbGF0ZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChcInRyYW5zbGF0ZShcIiwgbnVsbCwgcHhDb21tYSwgbnVsbCwgcHhQYXJlbik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiIHx8IHliKSB7XG4gICAgICBzLnB1c2goXCJ0cmFuc2xhdGUoXCIgKyB4YiArIHB4Q29tbWEgKyB5YiArIHB4UGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJvdGF0ZShhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIGlmIChhIC0gYiA+IDE4MCkgYiArPSAzNjA7IGVsc2UgaWYgKGIgLSBhID4gMTgwKSBhICs9IDM2MDsgLy8gc2hvcnRlc3QgcGF0aFxuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBza2V3WChhLCBiLCBzLCBxKSB7XG4gICAgaWYgKGEgIT09IGIpIHtcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIsIG51bGwsIGRlZ1BhcmVuKSAtIDIsIHg6IG51bWJlcihhLCBiKX0pO1xuICAgIH0gZWxzZSBpZiAoYikge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2tld1goXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIsIG51bGwsIFwiLFwiLCBudWxsLCBcIilcIik7XG4gICAgICBxLnB1c2goe2k6IGkgLSA0LCB4OiBudW1iZXIoeGEsIHhiKX0sIHtpOiBpIC0gMiwgeDogbnVtYmVyKHlhLCB5Yil9KTtcbiAgICB9IGVsc2UgaWYgKHhiICE9PSAxIHx8IHliICE9PSAxKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiArIHhiICsgXCIsXCIgKyB5YiArIFwiKVwiKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oYSwgYikge1xuICAgIHZhciBzID0gW10sIC8vIHN0cmluZyBjb25zdGFudHMgYW5kIHBsYWNlaG9sZGVyc1xuICAgICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG4gICAgYSA9IHBhcnNlKGEpLCBiID0gcGFyc2UoYik7XG4gICAgdHJhbnNsYXRlKGEudHJhbnNsYXRlWCwgYS50cmFuc2xhdGVZLCBiLnRyYW5zbGF0ZVgsIGIudHJhbnNsYXRlWSwgcywgcSk7XG4gICAgcm90YXRlKGEucm90YXRlLCBiLnJvdGF0ZSwgcywgcSk7XG4gICAgc2tld1goYS5za2V3WCwgYi5za2V3WCwgcywgcSk7XG4gICAgc2NhbGUoYS5zY2FsZVgsIGEuc2NhbGVZLCBiLnNjYWxlWCwgYi5zY2FsZVksIHMsIHEpO1xuICAgIGEgPSBiID0gbnVsbDsgLy8gZ2NcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgdmFyIGkgPSAtMSwgbiA9IHEubGVuZ3RoLCBvO1xuICAgICAgd2hpbGUgKCsraSA8IG4pIHNbKG8gPSBxW2ldKS5pXSA9IG8ueCh0KTtcbiAgICAgIHJldHVybiBzLmpvaW4oXCJcIik7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlQ3NzLCBcInB4LCBcIiwgXCJweClcIiwgXCJkZWcpXCIpO1xuZXhwb3J0IHZhciBpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyA9IGludGVycG9sYXRlVHJhbnNmb3JtKHBhcnNlU3ZnLCBcIiwgXCIsIFwiKVwiLCBcIilcIik7XG4iLCJ2YXIgcmhvID0gTWF0aC5TUVJUMixcbiAgICByaG8yID0gMixcbiAgICByaG80ID0gNCxcbiAgICBlcHNpbG9uMiA9IDFlLTEyO1xuXG5mdW5jdGlvbiBjb3NoKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSArIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHNpbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoeCkpIC0gMSAvIHgpIC8gMjtcbn1cblxuZnVuY3Rpb24gdGFuaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCgyICogeCkpIC0gMSkgLyAoeCArIDEpO1xufVxuXG4vLyBwMCA9IFt1eDAsIHV5MCwgdzBdXG4vLyBwMSA9IFt1eDEsIHV5MSwgdzFdXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwMCwgcDEpIHtcbiAgdmFyIHV4MCA9IHAwWzBdLCB1eTAgPSBwMFsxXSwgdzAgPSBwMFsyXSxcbiAgICAgIHV4MSA9IHAxWzBdLCB1eTEgPSBwMVsxXSwgdzEgPSBwMVsyXSxcbiAgICAgIGR4ID0gdXgxIC0gdXgwLFxuICAgICAgZHkgPSB1eTEgLSB1eTAsXG4gICAgICBkMiA9IGR4ICogZHggKyBkeSAqIGR5LFxuICAgICAgaSxcbiAgICAgIFM7XG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciB1MCDiiYUgdTEuXG4gIGlmIChkMiA8IGVwc2lsb24yKSB7XG4gICAgUyA9IE1hdGgubG9nKHcxIC8gdzApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICB1eDAgKyB0ICogZHgsXG4gICAgICAgIHV5MCArIHQgKiBkeSxcbiAgICAgICAgdzAgKiBNYXRoLmV4cChyaG8gKiB0ICogUylcbiAgICAgIF07XG4gICAgfVxuICB9XG5cbiAgLy8gR2VuZXJhbCBjYXNlLlxuICBlbHNlIHtcbiAgICB2YXIgZDEgPSBNYXRoLnNxcnQoZDIpLFxuICAgICAgICBiMCA9ICh3MSAqIHcxIC0gdzAgKiB3MCArIHJobzQgKiBkMikgLyAoMiAqIHcwICogcmhvMiAqIGQxKSxcbiAgICAgICAgYjEgPSAodzEgKiB3MSAtIHcwICogdzAgLSByaG80ICogZDIpIC8gKDIgKiB3MSAqIHJobzIgKiBkMSksXG4gICAgICAgIHIwID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIwICogYjAgKyAxKSAtIGIwKSxcbiAgICAgICAgcjEgPSBNYXRoLmxvZyhNYXRoLnNxcnQoYjEgKiBiMSArIDEpIC0gYjEpO1xuICAgIFMgPSAocjEgLSByMCkgLyByaG87XG4gICAgaSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBzID0gdCAqIFMsXG4gICAgICAgICAgY29zaHIwID0gY29zaChyMCksXG4gICAgICAgICAgdSA9IHcwIC8gKHJobzIgKiBkMSkgKiAoY29zaHIwICogdGFuaChyaG8gKiBzICsgcjApIC0gc2luaChyMCkpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdSAqIGR4LFxuICAgICAgICB1eTAgKyB1ICogZHksXG4gICAgICAgIHcwICogY29zaHIwIC8gY29zaChyaG8gKiBzICsgcjApXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIGkuZHVyYXRpb24gPSBTICogMTAwMDtcblxuICByZXR1cm4gaTtcbn1cbiIsImltcG9ydCB7aHNsIGFzIGNvbG9ySHNsfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gaHNsKGh1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHZhciBoID0gaHVlKChzdGFydCA9IGNvbG9ySHNsKHN0YXJ0KSkuaCwgKGVuZCA9IGNvbG9ySHNsKGVuZCkpLmgpLFxuICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICBvcGFjaXR5ID0gY29sb3Ioc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgIHN0YXJ0LnMgPSBzKHQpO1xuICAgICAgc3RhcnQubCA9IGwodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoc2woaHVlKTtcbmV4cG9ydCB2YXIgaHNsTG9uZyA9IGhzbChjb2xvcik7XG4iLCJpbXBvcnQge2hjbCBhcyBjb2xvckhjbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhjbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhjbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhjbChlbmQpKS5oKSxcbiAgICAgICAgYyA9IGNvbG9yKHN0YXJ0LmMsIGVuZC5jKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5jID0gYyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaGNsKGh1ZSk7XG5leHBvcnQgdmFyIGhjbExvbmcgPSBoY2woY29sb3IpO1xuIiwiaW1wb3J0IHtjdWJlaGVsaXggYXMgY29sb3JDdWJlaGVsaXh9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBjdWJlaGVsaXgoaHVlKSB7XG4gIHJldHVybiAoZnVuY3Rpb24gY3ViZWhlbGl4R2FtbWEoeSkge1xuICAgIHkgPSAreTtcblxuICAgIGZ1bmN0aW9uIGN1YmVoZWxpeChzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckN1YmVoZWxpeChzdGFydCkpLmgsIChlbmQgPSBjb2xvckN1YmVoZWxpeChlbmQpKS5oKSxcbiAgICAgICAgICBzID0gY29sb3Ioc3RhcnQucywgZW5kLnMpLFxuICAgICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgICAgc3RhcnQubCA9IGwoTWF0aC5wb3codCwgeSkpO1xuICAgICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY3ViZWhlbGl4LmdhbW1hID0gY3ViZWhlbGl4R2FtbWE7XG5cbiAgICByZXR1cm4gY3ViZWhlbGl4O1xuICB9KSgxKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3ViZWhlbGl4KGh1ZSk7XG5leHBvcnQgdmFyIGN1YmVoZWxpeExvbmcgPSBjdWJlaGVsaXgoY29sb3IpO1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW50ZXJwb2xhdG9yLCBuKSB7XG4gIHZhciBzYW1wbGVzID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSkgc2FtcGxlc1tpXSA9IGludGVycG9sYXRvcihpIC8gKG4gLSAxKSk7XG4gIHJldHVybiBzYW1wbGVzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiAreDtcbn1cbiIsImltcG9ydCB7YmlzZWN0fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGUgYXMgaW50ZXJwb2xhdGVWYWx1ZSwgaW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUm91bmR9IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuXG52YXIgdW5pdCA9IFswLCAxXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgcmV0dXJuIHg7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZShhLCBiKSB7XG4gIHJldHVybiAoYiAtPSAoYSA9ICthKSlcbiAgICAgID8gZnVuY3Rpb24oeCkgeyByZXR1cm4gKHggLSBhKSAvIGI7IH1cbiAgICAgIDogY29uc3RhbnQoaXNOYU4oYikgPyBOYU4gOiAwLjUpO1xufVxuXG5mdW5jdGlvbiBjbGFtcGVyKGRvbWFpbikge1xuICB2YXIgYSA9IGRvbWFpblswXSwgYiA9IGRvbWFpbltkb21haW4ubGVuZ3RoIC0gMV0sIHQ7XG4gIGlmIChhID4gYikgdCA9IGEsIGEgPSBiLCBiID0gdDtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgubWF4KGEsIE1hdGgubWluKGIsIHgpKTsgfTtcbn1cblxuLy8gbm9ybWFsaXplKGEsIGIpKHgpIHRha2VzIGEgZG9tYWluIHZhbHVlIHggaW4gW2EsYl0gYW5kIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcGFyYW1ldGVyIHQgaW4gWzAsMV0uXG4vLyBpbnRlcnBvbGF0ZShhLCBiKSh0KSB0YWtlcyBhIHBhcmFtZXRlciB0IGluIFswLDFdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJhbmdlIHZhbHVlIHggaW4gW2EsYl0uXG5mdW5jdGlvbiBiaW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgZDAgPSBkb21haW5bMF0sIGQxID0gZG9tYWluWzFdLCByMCA9IHJhbmdlWzBdLCByMSA9IHJhbmdlWzFdO1xuICBpZiAoZDEgPCBkMCkgZDAgPSBub3JtYWxpemUoZDEsIGQwKSwgcjAgPSBpbnRlcnBvbGF0ZShyMSwgcjApO1xuICBlbHNlIGQwID0gbm9ybWFsaXplKGQwLCBkMSksIHIwID0gaW50ZXJwb2xhdGUocjAsIHIxKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHIwKGQwKHgpKTsgfTtcbn1cblxuZnVuY3Rpb24gcG9seW1hcChkb21haW4sIHJhbmdlLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgaiA9IE1hdGgubWluKGRvbWFpbi5sZW5ndGgsIHJhbmdlLmxlbmd0aCkgLSAxLFxuICAgICAgZCA9IG5ldyBBcnJheShqKSxcbiAgICAgIHIgPSBuZXcgQXJyYXkoaiksXG4gICAgICBpID0gLTE7XG5cbiAgLy8gUmV2ZXJzZSBkZXNjZW5kaW5nIGRvbWFpbnMuXG4gIGlmIChkb21haW5bal0gPCBkb21haW5bMF0pIHtcbiAgICBkb21haW4gPSBkb21haW4uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgcmFuZ2UgPSByYW5nZS5zbGljZSgpLnJldmVyc2UoKTtcbiAgfVxuXG4gIHdoaWxlICgrK2kgPCBqKSB7XG4gICAgZFtpXSA9IG5vcm1hbGl6ZShkb21haW5baV0sIGRvbWFpbltpICsgMV0pO1xuICAgIHJbaV0gPSBpbnRlcnBvbGF0ZShyYW5nZVtpXSwgcmFuZ2VbaSArIDFdKTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih4KSB7XG4gICAgdmFyIGkgPSBiaXNlY3QoZG9tYWluLCB4LCAxLCBqKSAtIDE7XG4gICAgcmV0dXJuIHJbaV0oZFtpXSh4KSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXRcbiAgICAgIC5kb21haW4oc291cmNlLmRvbWFpbigpKVxuICAgICAgLnJhbmdlKHNvdXJjZS5yYW5nZSgpKVxuICAgICAgLmludGVycG9sYXRlKHNvdXJjZS5pbnRlcnBvbGF0ZSgpKVxuICAgICAgLmNsYW1wKHNvdXJjZS5jbGFtcCgpKVxuICAgICAgLnVua25vd24oc291cmNlLnVua25vd24oKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1lcigpIHtcbiAgdmFyIGRvbWFpbiA9IHVuaXQsXG4gICAgICByYW5nZSA9IHVuaXQsXG4gICAgICBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlVmFsdWUsXG4gICAgICB0cmFuc2Zvcm0sXG4gICAgICB1bnRyYW5zZm9ybSxcbiAgICAgIHVua25vd24sXG4gICAgICBjbGFtcCA9IGlkZW50aXR5LFxuICAgICAgcGllY2V3aXNlLFxuICAgICAgb3V0cHV0LFxuICAgICAgaW5wdXQ7XG5cbiAgZnVuY3Rpb24gcmVzY2FsZSgpIHtcbiAgICBwaWVjZXdpc2UgPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpID4gMiA/IHBvbHltYXAgOiBiaW1hcDtcbiAgICBvdXRwdXQgPSBpbnB1dCA9IG51bGw7XG4gICAgcmV0dXJuIHNjYWxlO1xuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeCkge1xuICAgIHJldHVybiBpc05hTih4ID0gK3gpID8gdW5rbm93biA6IChvdXRwdXQgfHwgKG91dHB1dCA9IHBpZWNld2lzZShkb21haW4ubWFwKHRyYW5zZm9ybSksIHJhbmdlLCBpbnRlcnBvbGF0ZSkpKSh0cmFuc2Zvcm0oY2xhbXAoeCkpKTtcbiAgfVxuXG4gIHNjYWxlLmludmVydCA9IGZ1bmN0aW9uKHkpIHtcbiAgICByZXR1cm4gY2xhbXAodW50cmFuc2Zvcm0oKGlucHV0IHx8IChpbnB1dCA9IHBpZWNld2lzZShyYW5nZSwgZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCBpbnRlcnBvbGF0ZU51bWJlcikpKSh5KSkpO1xuICB9O1xuXG4gIHNjYWxlLmRvbWFpbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkb21haW4gPSBBcnJheS5mcm9tKF8sIG51bWJlciksIGNsYW1wID09PSBpZGVudGl0eSB8fCAoY2xhbXAgPSBjbGFtcGVyKGRvbWFpbikpLCByZXNjYWxlKCkpIDogZG9tYWluLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2UgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocmFuZ2UgPSBBcnJheS5mcm9tKF8pLCByZXNjYWxlKCkpIDogcmFuZ2Uuc2xpY2UoKTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZVJvdW5kID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiByYW5nZSA9IEFycmF5LmZyb20oXyksIGludGVycG9sYXRlID0gaW50ZXJwb2xhdGVSb3VuZCwgcmVzY2FsZSgpO1xuICB9O1xuXG4gIHNjYWxlLmNsYW1wID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGNsYW1wID0gXyA/IGNsYW1wZXIoZG9tYWluKSA6IGlkZW50aXR5LCBzY2FsZSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKCkodHJhbnNmb3JtLCB1bnRyYW5zZm9ybSk7XG59XG4iLCIvLyBDb21wdXRlcyB0aGUgZGVjaW1hbCBjb2VmZmljaWVudCBhbmQgZXhwb25lbnQgb2YgdGhlIHNwZWNpZmllZCBudW1iZXIgeCB3aXRoXG4vLyBzaWduaWZpY2FudCBkaWdpdHMgcCwgd2hlcmUgeCBpcyBwb3NpdGl2ZSBhbmQgcCBpcyBpbiBbMSwgMjFdIG9yIHVuZGVmaW5lZC5cbi8vIEZvciBleGFtcGxlLCBmb3JtYXREZWNpbWFsKDEuMjMpIHJldHVybnMgW1wiMTIzXCIsIDBdLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geCA9IGZvcm1hdERlY2ltYWwoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsIi8vIFtbZmlsbF1hbGlnbl1bc2lnbl1bc3ltYm9sXVswXVt3aWR0aF1bLF1bLnByZWNpc2lvbl1bfl1bdHlwZV1cbnZhciByZSA9IC9eKD86KC4pPyhbPD49Xl0pKT8oWytcXC0oIF0pPyhbJCNdKT8oMCk/KFxcZCspPygsKT8oXFwuXFxkKyk/KH4pPyhbYS16JV0pPyQvaTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpO1xufVxuXG5mb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlID0gRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZTsgLy8gaW5zdGFuY2VvZlxuXG5mdW5jdGlvbiBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICB0aGlzLmZpbGwgPSBtYXRjaFsxXSB8fCBcIiBcIjtcbiAgdGhpcy5hbGlnbiA9IG1hdGNoWzJdIHx8IFwiPlwiO1xuICB0aGlzLnNpZ24gPSBtYXRjaFszXSB8fCBcIi1cIjtcbiAgdGhpcy5zeW1ib2wgPSBtYXRjaFs0XSB8fCBcIlwiO1xuICB0aGlzLnplcm8gPSAhIW1hdGNoWzVdO1xuICB0aGlzLndpZHRoID0gbWF0Y2hbNl0gJiYgK21hdGNoWzZdO1xuICB0aGlzLmNvbW1hID0gISFtYXRjaFs3XTtcbiAgdGhpcy5wcmVjaXNpb24gPSBtYXRjaFs4XSAmJiArbWF0Y2hbOF0uc2xpY2UoMSk7XG4gIHRoaXMudHJpbSA9ICEhbWF0Y2hbOV07XG4gIHRoaXMudHlwZSA9IG1hdGNoWzEwXSB8fCBcIlwiO1xufVxuXG5Gb3JtYXRTcGVjaWZpZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmZpbGxcbiAgICAgICsgdGhpcy5hbGlnblxuICAgICAgKyB0aGlzLnNpZ25cbiAgICAgICsgdGhpcy5zeW1ib2xcbiAgICAgICsgKHRoaXMuemVybyA/IFwiMFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMud2lkdGggPT0gbnVsbCA/IFwiXCIgOiBNYXRoLm1heCgxLCB0aGlzLndpZHRoIHwgMCkpXG4gICAgICArICh0aGlzLmNvbW1hID8gXCIsXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy5wcmVjaXNpb24gPT0gbnVsbCA/IFwiXCIgOiBcIi5cIiArIE1hdGgubWF4KDAsIHRoaXMucHJlY2lzaW9uIHwgMCkpXG4gICAgICArICh0aGlzLnRyaW0gPyBcIn5cIiA6IFwiXCIpXG4gICAgICArIHRoaXMudHlwZTtcbn07XG4iLCIvLyBUcmltcyBpbnNpZ25pZmljYW50IHplcm9zLCBlLmcuLCByZXBsYWNlcyAxLjIwMDBrIHdpdGggMS4yay5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHMpIHtcbiAgb3V0OiBmb3IgKHZhciBuID0gcy5sZW5ndGgsIGkgPSAxLCBpMCA9IC0xLCBpMTsgaSA8IG47ICsraSkge1xuICAgIHN3aXRjaCAoc1tpXSkge1xuICAgICAgY2FzZSBcIi5cIjogaTAgPSBpMSA9IGk7IGJyZWFrO1xuICAgICAgY2FzZSBcIjBcIjogaWYgKGkwID09PSAwKSBpMCA9IGk7IGkxID0gaTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiBpZiAoaTAgPiAwKSB7IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaTAgPSAwOyB9IGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaTAgPiAwID8gcy5zbGljZSgwLCBpMCkgKyBzLnNsaWNlKGkxICsgMSkgOiBzO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgdmFyIHByZWZpeEV4cG9uZW50O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV0sXG4gICAgICBpID0gZXhwb25lbnQgLSAocHJlZml4RXhwb25lbnQgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCAvIDMpKSkgKiAzKSArIDEsXG4gICAgICBuID0gY29lZmZpY2llbnQubGVuZ3RoO1xuICByZXR1cm4gaSA9PT0gbiA/IGNvZWZmaWNpZW50XG4gICAgICA6IGkgPiBuID8gY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoaSAtIG4gKyAxKS5qb2luKFwiMFwiKVxuICAgICAgOiBpID4gMCA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGkpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShpKVxuICAgICAgOiBcIjAuXCIgKyBuZXcgQXJyYXkoMSAtIGkpLmpvaW4oXCIwXCIpICsgZm9ybWF0RGVjaW1hbCh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiaW1wb3J0IGZvcm1hdExvY2FsZSBmcm9tIFwiLi9sb2NhbGVcIjtcblxudmFyIGxvY2FsZTtcbmV4cG9ydCB2YXIgZm9ybWF0O1xuZXhwb3J0IHZhciBmb3JtYXRQcmVmaXg7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkZWNpbWFsOiBcIi5cIixcbiAgdGhvdXNhbmRzOiBcIixcIixcbiAgZ3JvdXBpbmc6IFszXSxcbiAgY3VycmVuY3k6IFtcIiRcIiwgXCJcIl1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWZhdWx0TG9jYWxlKGRlZmluaXRpb24pIHtcbiAgbG9jYWxlID0gZm9ybWF0TG9jYWxlKGRlZmluaXRpb24pO1xuICBmb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICBmb3JtYXRQcmVmaXggPSBsb2NhbGUuZm9ybWF0UHJlZml4O1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IGZvcm1hdERlY2ltYWwgZnJvbSBcIi4vZm9ybWF0RGVjaW1hbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4LCBwKSB7XG4gIHZhciBkID0gZm9ybWF0RGVjaW1hbCh4LCBwKTtcbiAgaWYgKCFkKSByZXR1cm4geCArIFwiXCI7XG4gIHZhciBjb2VmZmljaWVudCA9IGRbMF0sXG4gICAgICBleHBvbmVudCA9IGRbMV07XG4gIHJldHVybiBleHBvbmVudCA8IDAgPyBcIjAuXCIgKyBuZXcgQXJyYXkoLWV4cG9uZW50KS5qb2luKFwiMFwiKSArIGNvZWZmaWNpZW50XG4gICAgICA6IGNvZWZmaWNpZW50Lmxlbmd0aCA+IGV4cG9uZW50ICsgMSA/IGNvZWZmaWNpZW50LnNsaWNlKDAsIGV4cG9uZW50ICsgMSkgKyBcIi5cIiArIGNvZWZmaWNpZW50LnNsaWNlKGV4cG9uZW50ICsgMSlcbiAgICAgIDogY29lZmZpY2llbnQgKyBuZXcgQXJyYXkoZXhwb25lbnQgLSBjb2VmZmljaWVudC5sZW5ndGggKyAyKS5qb2luKFwiMFwiKTtcbn1cbiIsImltcG9ydCBmb3JtYXRQcmVmaXhBdXRvIGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBmb3JtYXRSb3VuZGVkIGZyb20gXCIuL2Zvcm1hdFJvdW5kZWRcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBcIiVcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gKHggKiAxMDApLnRvRml4ZWQocCk7IH0sXG4gIFwiYlwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpOyB9LFxuICBcImNcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4geCArIFwiXCI7IH0sXG4gIFwiZFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDEwKTsgfSxcbiAgXCJlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9FeHBvbmVudGlhbChwKTsgfSxcbiAgXCJmXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9GaXhlZChwKTsgfSxcbiAgXCJnXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIHgudG9QcmVjaXNpb24ocCk7IH0sXG4gIFwib1wiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDgpOyB9LFxuICBcInBcIjogZnVuY3Rpb24oeCwgcCkgeyByZXR1cm4gZm9ybWF0Um91bmRlZCh4ICogMTAwLCBwKTsgfSxcbiAgXCJyXCI6IGZvcm1hdFJvdW5kZWQsXG4gIFwic1wiOiBmb3JtYXRQcmVmaXhBdXRvLFxuICBcIlhcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTsgfSxcbiAgXCJ4XCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4geDtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuaW1wb3J0IGZvcm1hdEdyb3VwIGZyb20gXCIuL2Zvcm1hdEdyb3VwXCI7XG5pbXBvcnQgZm9ybWF0TnVtZXJhbHMgZnJvbSBcIi4vZm9ybWF0TnVtZXJhbHNcIjtcbmltcG9ydCBmb3JtYXRTcGVjaWZpZXIgZnJvbSBcIi4vZm9ybWF0U3BlY2lmaWVyXCI7XG5pbXBvcnQgZm9ybWF0VHJpbSBmcm9tIFwiLi9mb3JtYXRUcmltXCI7XG5pbXBvcnQgZm9ybWF0VHlwZXMgZnJvbSBcIi4vZm9ybWF0VHlwZXNcIjtcbmltcG9ydCB7cHJlZml4RXhwb25lbnR9IGZyb20gXCIuL2Zvcm1hdFByZWZpeEF1dG9cIjtcbmltcG9ydCBpZGVudGl0eSBmcm9tIFwiLi9pZGVudGl0eVwiO1xuXG52YXIgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nICYmIGxvY2FsZS50aG91c2FuZHMgPyBmb3JtYXRHcm91cChsb2NhbGUuZ3JvdXBpbmcsIGxvY2FsZS50aG91c2FuZHMpIDogaWRlbnRpdHksXG4gICAgICBjdXJyZW5jeSA9IGxvY2FsZS5jdXJyZW5jeSxcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCxcbiAgICAgIG51bWVyYWxzID0gbG9jYWxlLm51bWVyYWxzID8gZm9ybWF0TnVtZXJhbHMobG9jYWxlLm51bWVyYWxzKSA6IGlkZW50aXR5LFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50IHx8IFwiJVwiO1xuXG4gIGZ1bmN0aW9uIG5ld0Zvcm1hdChzcGVjaWZpZXIpIHtcbiAgICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcblxuICAgIHZhciBmaWxsID0gc3BlY2lmaWVyLmZpbGwsXG4gICAgICAgIGFsaWduID0gc3BlY2lmaWVyLmFsaWduLFxuICAgICAgICBzaWduID0gc3BlY2lmaWVyLnNpZ24sXG4gICAgICAgIHN5bWJvbCA9IHNwZWNpZmllci5zeW1ib2wsXG4gICAgICAgIHplcm8gPSBzcGVjaWZpZXIuemVybyxcbiAgICAgICAgd2lkdGggPSBzcGVjaWZpZXIud2lkdGgsXG4gICAgICAgIGNvbW1hID0gc3BlY2lmaWVyLmNvbW1hLFxuICAgICAgICBwcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uLFxuICAgICAgICB0cmltID0gc3BlY2lmaWVyLnRyaW0sXG4gICAgICAgIHR5cGUgPSBzcGVjaWZpZXIudHlwZTtcblxuICAgIC8vIFRoZSBcIm5cIiB0eXBlIGlzIGFuIGFsaWFzIGZvciBcIixnXCIuXG4gICAgaWYgKHR5cGUgPT09IFwiblwiKSBjb21tYSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIFRoZSBcIlwiIHR5cGUsIGFuZCBhbnkgaW52YWxpZCB0eXBlLCBpcyBhbiBhbGlhcyBmb3IgXCIuMTJ+Z1wiLlxuICAgIGVsc2UgaWYgKCFmb3JtYXRUeXBlc1t0eXBlXSkgcHJlY2lzaW9uID09IG51bGwgJiYgKHByZWNpc2lvbiA9IDEyKSwgdHJpbSA9IHRydWUsIHR5cGUgPSBcImdcIjtcblxuICAgIC8vIElmIHplcm8gZmlsbCBpcyBzcGVjaWZpZWQsIHBhZGRpbmcgZ29lcyBhZnRlciBzaWduIGFuZCBiZWZvcmUgZGlnaXRzLlxuICAgIGlmICh6ZXJvIHx8IChmaWxsID09PSBcIjBcIiAmJiBhbGlnbiA9PT0gXCI9XCIpKSB6ZXJvID0gdHJ1ZSwgZmlsbCA9IFwiMFwiLCBhbGlnbiA9IFwiPVwiO1xuXG4gICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgLy8gRm9yIFNJLXByZWZpeCwgdGhlIHN1ZmZpeCBpcyBsYXppbHkgY29tcHV0ZWQuXG4gICAgdmFyIHByZWZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVswXSA6IHN5bWJvbCA9PT0gXCIjXCIgJiYgL1tib3hYXS8udGVzdCh0eXBlKSA/IFwiMFwiICsgdHlwZS50b0xvd2VyQ2FzZSgpIDogXCJcIixcbiAgICAgICAgc3VmZml4ID0gc3ltYm9sID09PSBcIiRcIiA/IGN1cnJlbmN5WzFdIDogL1slcF0vLnRlc3QodHlwZSkgPyBwZXJjZW50IDogXCJcIjtcblxuICAgIC8vIFdoYXQgZm9ybWF0IGZ1bmN0aW9uIHNob3VsZCB3ZSB1c2U/XG4gICAgLy8gSXMgdGhpcyBhbiBpbnRlZ2VyIHR5cGU/XG4gICAgLy8gQ2FuIHRoaXMgdHlwZSBnZW5lcmF0ZSBleHBvbmVudGlhbCBub3RhdGlvbj9cbiAgICB2YXIgZm9ybWF0VHlwZSA9IGZvcm1hdFR5cGVzW3R5cGVdLFxuICAgICAgICBtYXliZVN1ZmZpeCA9IC9bZGVmZ3BycyVdLy50ZXN0KHR5cGUpO1xuXG4gICAgLy8gU2V0IHRoZSBkZWZhdWx0IHByZWNpc2lvbiBpZiBub3Qgc3BlY2lmaWVkLFxuICAgIC8vIG9yIGNsYW1wIHRoZSBzcGVjaWZpZWQgcHJlY2lzaW9uIHRvIHRoZSBzdXBwb3J0ZWQgcmFuZ2UuXG4gICAgLy8gRm9yIHNpZ25pZmljYW50IHByZWNpc2lvbiwgaXQgbXVzdCBiZSBpbiBbMSwgMjFdLlxuICAgIC8vIEZvciBmaXhlZCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzAsIDIwXS5cbiAgICBwcmVjaXNpb24gPSBwcmVjaXNpb24gPT0gbnVsbCA/IDZcbiAgICAgICAgOiAvW2dwcnNdLy50ZXN0KHR5cGUpID8gTWF0aC5tYXgoMSwgTWF0aC5taW4oMjEsIHByZWNpc2lvbikpXG4gICAgICAgIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMjAsIHByZWNpc2lvbikpO1xuXG4gICAgZnVuY3Rpb24gZm9ybWF0KHZhbHVlKSB7XG4gICAgICB2YXIgdmFsdWVQcmVmaXggPSBwcmVmaXgsXG4gICAgICAgICAgdmFsdWVTdWZmaXggPSBzdWZmaXgsXG4gICAgICAgICAgaSwgbiwgYztcblxuICAgICAgaWYgKHR5cGUgPT09IFwiY1wiKSB7XG4gICAgICAgIHZhbHVlU3VmZml4ID0gZm9ybWF0VHlwZSh2YWx1ZSkgKyB2YWx1ZVN1ZmZpeDtcbiAgICAgICAgdmFsdWUgPSBcIlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPSArdmFsdWU7XG5cbiAgICAgICAgLy8gUGVyZm9ybSB0aGUgaW5pdGlhbCBmb3JtYXR0aW5nLlxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMDtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gZHVyaW5nIGZvcm1hdHRpbmcsIHRyZWF0IGFzIHBvc2l0aXZlLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDApIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBcIi1cIikgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihncm91cGluZywgdGhvdXNhbmRzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgd2lkdGgpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmxlbmd0aCxcbiAgICAgICAgdCA9IFtdLFxuICAgICAgICBqID0gMCxcbiAgICAgICAgZyA9IGdyb3VwaW5nWzBdLFxuICAgICAgICBsZW5ndGggPSAwO1xuXG4gICAgd2hpbGUgKGkgPiAwICYmIGcgPiAwKSB7XG4gICAgICBpZiAobGVuZ3RoICsgZyArIDEgPiB3aWR0aCkgZyA9IE1hdGgubWF4KDEsIHdpZHRoIC0gbGVuZ3RoKTtcbiAgICAgIHQucHVzaCh2YWx1ZS5zdWJzdHJpbmcoaSAtPSBnLCBpICsgZykpO1xuICAgICAgaWYgKChsZW5ndGggKz0gZyArIDEpID4gd2lkdGgpIGJyZWFrO1xuICAgICAgZyA9IGdyb3VwaW5nW2ogPSAoaiArIDEpICUgZ3JvdXBpbmcubGVuZ3RoXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdC5yZXZlcnNlKCkuam9pbih0aG91c2FuZHMpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obnVtZXJhbHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoL1swLTldL2csIGZ1bmN0aW9uKGkpIHtcbiAgICAgIHJldHVybiBudW1lcmFsc1sraV07XG4gICAgfSk7XG4gIH07XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQge3RpY2tTdGVwfSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCB7Zm9ybWF0LCBmb3JtYXRQcmVmaXgsIGZvcm1hdFNwZWNpZmllciwgcHJlY2lzaW9uRml4ZWQsIHByZWNpc2lvblByZWZpeCwgcHJlY2lzaW9uUm91bmR9IGZyb20gXCJkMy1mb3JtYXRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgdmFyIHN0ZXAgPSB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpLFxuICAgICAgcHJlY2lzaW9uO1xuICBzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyID09IG51bGwgPyBcIixmXCIgOiBzcGVjaWZpZXIpO1xuICBzd2l0Y2ggKHNwZWNpZmllci50eXBlKSB7XG4gICAgY2FzZSBcInNcIjoge1xuICAgICAgdmFyIHZhbHVlID0gTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSk7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25QcmVmaXgoc3RlcCwgdmFsdWUpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbjtcbiAgICAgIHJldHVybiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIGNhc2UgXCJcIjpcbiAgICBjYXNlIFwiZVwiOlxuICAgIGNhc2UgXCJnXCI6XG4gICAgY2FzZSBcInBcIjpcbiAgICBjYXNlIFwiclwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25Sb3VuZChzdGVwLCBNYXRoLm1heChNYXRoLmFicyhzdGFydCksIE1hdGguYWJzKHN0b3ApKSkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcImVcIik7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgY2FzZSBcImZcIjpcbiAgICBjYXNlIFwiJVwiOiB7XG4gICAgICBpZiAoc3BlY2lmaWVyLnByZWNpc2lvbiA9PSBudWxsICYmICFpc05hTihwcmVjaXNpb24gPSBwcmVjaXNpb25GaXhlZChzdGVwKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb24gLSAoc3BlY2lmaWVyLnR5cGUgPT09IFwiJVwiKSAqIDI7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZvcm1hdChzcGVjaWZpZXIpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIHZhbHVlKSB7XG4gIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyAtIGV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCwgbWF4KSB7XG4gIHN0ZXAgPSBNYXRoLmFicyhzdGVwKSwgbWF4ID0gTWF0aC5hYnMobWF4KSAtIHN0ZXA7XG4gIHJldHVybiBNYXRoLm1heCgwLCBleHBvbmVudChtYXgpIC0gZXhwb25lbnQoc3RlcCkpICsgMTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5LCBpZGVudGl0eX0gZnJvbSBcIi4vY29udGludW91c1wiO1xuaW1wb3J0IHtpbml0UmFuZ2V9IGZyb20gXCIuL2luaXRcIjtcbmltcG9ydCB0aWNrRm9ybWF0IGZyb20gXCIuL3RpY2tGb3JtYXRcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGxpbmVhcmlzaChzY2FsZSkge1xuICB2YXIgZG9tYWluID0gc2NhbGUuZG9tYWluO1xuXG4gIHNjYWxlLnRpY2tzID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrcyhkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50KTtcbiAgfTtcblxuICBzY2FsZS50aWNrRm9ybWF0ID0gZnVuY3Rpb24oY291bnQsIHNwZWNpZmllcikge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tGb3JtYXQoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCwgc3BlY2lmaWVyKTtcbiAgfTtcblxuICBzY2FsZS5uaWNlID0gZnVuY3Rpb24oY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gbnVsbCkgY291bnQgPSAxMDtcblxuICAgIHZhciBkID0gZG9tYWluKCksXG4gICAgICAgIGkwID0gMCxcbiAgICAgICAgaTEgPSBkLmxlbmd0aCAtIDEsXG4gICAgICAgIHN0YXJ0ID0gZFtpMF0sXG4gICAgICAgIHN0b3AgPSBkW2kxXSxcbiAgICAgICAgc3RlcDtcblxuICAgIGlmIChzdG9wIDwgc3RhcnQpIHtcbiAgICAgIHN0ZXAgPSBzdGFydCwgc3RhcnQgPSBzdG9wLCBzdG9wID0gc3RlcDtcbiAgICAgIHN0ZXAgPSBpMCwgaTAgPSBpMSwgaTEgPSBzdGVwO1xuICAgIH1cblxuICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KTtcbiAgICB9XG5cbiAgICBpZiAoc3RlcCA+IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5mbG9vcihzdGFydCAvIHN0ZXApICogc3RlcDtcbiAgICAgIGRbaTFdID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfSBlbHNlIGlmIChzdGVwIDwgMCkge1xuICAgICAgZFtpMF0gPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIGRvbWFpbihkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NhbGU7XG4gIH07XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaW5lYXIoKSB7XG4gIHZhciBzY2FsZSA9IGNvbnRpbnVvdXMoaWRlbnRpdHksIGlkZW50aXR5KTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGNvcHkoc2NhbGUsIGxpbmVhcigpKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIGxpbmVhcmlzaChzY2FsZSk7XG59XG4iLCJ2YXIgdDAgPSBuZXcgRGF0ZSxcbiAgICB0MSA9IG5ldyBEYXRlO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXdJbnRlcnZhbChmbG9vcmksIG9mZnNldGksIGNvdW50LCBmaWVsZCkge1xuXG4gIGZ1bmN0aW9uIGludGVydmFsKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSkpLCBkYXRlO1xuICB9XG5cbiAgaW50ZXJ2YWwuZmxvb3IgPSBpbnRlcnZhbDtcblxuICBpbnRlcnZhbC5jZWlsID0gZnVuY3Rpb24oZGF0ZSkge1xuICAgIHJldHVybiBmbG9vcmkoZGF0ZSA9IG5ldyBEYXRlKGRhdGUgLSAxKSksIG9mZnNldGkoZGF0ZSwgMSksIGZsb29yaShkYXRlKSwgZGF0ZTtcbiAgfTtcblxuICBpbnRlcnZhbC5yb3VuZCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICB2YXIgZDAgPSBpbnRlcnZhbChkYXRlKSxcbiAgICAgICAgZDEgPSBpbnRlcnZhbC5jZWlsKGRhdGUpO1xuICAgIHJldHVybiBkYXRlIC0gZDAgPCBkMSAtIGRhdGUgPyBkMCA6IGQxO1xuICB9O1xuXG4gIGludGVydmFsLm9mZnNldCA9IGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICByZXR1cm4gb2Zmc2V0aShkYXRlID0gbmV3IERhdGUoK2RhdGUpLCBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIHZhciByYW5nZSA9IFtdLCBwcmV2aW91cztcbiAgICBzdGFydCA9IGludGVydmFsLmNlaWwoc3RhcnQpO1xuICAgIHN0ZXAgPSBzdGVwID09IG51bGwgPyAxIDogTWF0aC5mbG9vcihzdGVwKTtcbiAgICBpZiAoIShzdGFydCA8IHN0b3ApIHx8ICEoc3RlcCA+IDApKSByZXR1cm4gcmFuZ2U7IC8vIGFsc28gaGFuZGxlcyBJbnZhbGlkIERhdGVcbiAgICBkbyByYW5nZS5wdXNoKHByZXZpb3VzID0gbmV3IERhdGUoK3N0YXJ0KSksIG9mZnNldGkoc3RhcnQsIHN0ZXApLCBmbG9vcmkoc3RhcnQpO1xuICAgIHdoaWxlIChwcmV2aW91cyA8IHN0YXJ0ICYmIHN0YXJ0IDwgc3RvcCk7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9O1xuXG4gIGludGVydmFsLmZpbHRlciA9IGZ1bmN0aW9uKHRlc3QpIHtcbiAgICByZXR1cm4gbmV3SW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkgd2hpbGUgKGZsb29yaShkYXRlKSwgIXRlc3QoZGF0ZSkpIGRhdGUuc2V0VGltZShkYXRlIC0gMSk7XG4gICAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgICAgaWYgKGRhdGUgPj0gZGF0ZSkge1xuICAgICAgICBpZiAoc3RlcCA8IDApIHdoaWxlICgrK3N0ZXAgPD0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsIC0xKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfSBlbHNlIHdoaWxlICgtLXN0ZXAgPj0gMCkge1xuICAgICAgICAgIHdoaWxlIChvZmZzZXRpKGRhdGUsICsxKSwgIXRlc3QoZGF0ZSkpIHt9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZW1wdHlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGlmIChjb3VudCkge1xuICAgIGludGVydmFsLmNvdW50ID0gZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgICAgdDAuc2V0VGltZSgrc3RhcnQpLCB0MS5zZXRUaW1lKCtlbmQpO1xuICAgICAgZmxvb3JpKHQwKSwgZmxvb3JpKHQxKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKGNvdW50KHQwLCB0MSkpO1xuICAgIH07XG5cbiAgICBpbnRlcnZhbC5ldmVyeSA9IGZ1bmN0aW9uKHN0ZXApIHtcbiAgICAgIHN0ZXAgPSBNYXRoLmZsb29yKHN0ZXApO1xuICAgICAgcmV0dXJuICFpc0Zpbml0ZShzdGVwKSB8fCAhKHN0ZXAgPiAwKSA/IG51bGxcbiAgICAgICAgICA6ICEoc3RlcCA+IDEpID8gaW50ZXJ2YWxcbiAgICAgICAgICA6IGludGVydmFsLmZpbHRlcihmaWVsZFxuICAgICAgICAgICAgICA/IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGZpZWxkKGQpICUgc3RlcCA9PT0gMDsgfVxuICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGludGVydmFsLmNvdW50KDAsIGQpICUgc3RlcCA9PT0gMDsgfSk7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBpbnRlcnZhbDtcbn1cbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgbWlsbGlzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgLy8gbm9vcFxufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZCAtIHN0YXJ0O1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbm1pbGxpc2Vjb25kLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICBrID0gTWF0aC5mbG9vcihrKTtcbiAgaWYgKCFpc0Zpbml0ZShrKSB8fCAhKGsgPiAwKSkgcmV0dXJuIG51bGw7XG4gIGlmICghKGsgPiAxKSkgcmV0dXJuIG1pbGxpc2Vjb25kO1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VGltZShNYXRoLmZsb29yKGRhdGUgLyBrKSAqIGspO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGspO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBrO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1pbGxpc2Vjb25kO1xuZXhwb3J0IHZhciBtaWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZC5yYW5nZTtcbiIsImV4cG9ydCB2YXIgZHVyYXRpb25TZWNvbmQgPSAxZTM7XG5leHBvcnQgdmFyIGR1cmF0aW9uTWludXRlID0gNmU0O1xuZXhwb3J0IHZhciBkdXJhdGlvbkhvdXIgPSAzNmU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbkRheSA9IDg2NGU1O1xuZXhwb3J0IHZhciBkdXJhdGlvbldlZWsgPSA2MDQ4ZTU7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBzZWNvbmQgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25TZWNvbmQ7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ1NlY29uZHMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzZWNvbmQ7XG5leHBvcnQgdmFyIHNlY29uZHMgPSBzZWNvbmQucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgbWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbk1pbnV0ZTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TWludXRlcygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1pbnV0ZTtcbmV4cG9ydCB2YXIgbWludXRlcyA9IG1pbnV0ZS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkhvdXIsIGR1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIGhvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VGltZShkYXRlIC0gZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSAtIGRhdGUuZ2V0U2Vjb25kcygpICogZHVyYXRpb25TZWNvbmQgLSBkYXRlLmdldE1pbnV0ZXMoKSAqIGR1cmF0aW9uTWludXRlKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGhvdXI7XG5leHBvcnQgdmFyIGhvdXJzID0gaG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheSwgZHVyYXRpb25NaW51dGV9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBkYXkgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0IC0gKGVuZC5nZXRUaW1lem9uZU9mZnNldCgpIC0gc3RhcnQuZ2V0VGltZXpvbmVPZmZzZXQoKSkgKiBkdXJhdGlvbk1pbnV0ZSkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkYXk7XG5leHBvcnQgdmFyIGRheXMgPSBkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25NaW51dGUsIGR1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gd2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gKGRhdGUuZ2V0RGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25XZWVrO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBzdW5kYXkgPSB3ZWVrZGF5KDApO1xuZXhwb3J0IHZhciBtb25kYXkgPSB3ZWVrZGF5KDEpO1xuZXhwb3J0IHZhciB0dWVzZGF5ID0gd2Vla2RheSgyKTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5ID0gd2Vla2RheSgzKTtcbmV4cG9ydCB2YXIgdGh1cnNkYXkgPSB3ZWVrZGF5KDQpO1xuZXhwb3J0IHZhciBmcmlkYXkgPSB3ZWVrZGF5KDUpO1xuZXhwb3J0IHZhciBzYXR1cmRheSA9IHdlZWtkYXkoNik7XG5cbmV4cG9ydCB2YXIgc3VuZGF5cyA9IHN1bmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgbW9uZGF5cyA9IG1vbmRheS5yYW5nZTtcbmV4cG9ydCB2YXIgdHVlc2RheXMgPSB0dWVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB3ZWRuZXNkYXlzID0gd2VkbmVzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB0aHVyc2RheXMgPSB0aHVyc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgZnJpZGF5cyA9IGZyaWRheS5yYW5nZTtcbmV4cG9ydCB2YXIgc2F0dXJkYXlzID0gc2F0dXJkYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1vbnRoID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldERhdGUoMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0TW9udGgoZGF0ZS5nZXRNb250aCgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0TW9udGgoKSAtIHN0YXJ0LmdldE1vbnRoKCkgKyAoZW5kLmdldEZ1bGxZZWFyKCkgLSBzdGFydC5nZXRGdWxsWWVhcigpKSAqIDEyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRNb250aCgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1vbnRoO1xuZXhwb3J0IHZhciBtb250aHMgPSBtb250aC5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgeWVhciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG55ZWFyLmV2ZXJ5ID0gZnVuY3Rpb24oaykge1xuICByZXR1cm4gIWlzRmluaXRlKGsgPSBNYXRoLmZsb29yKGspKSB8fCAhKGsgPiAwKSA/IG51bGwgOiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihNYXRoLmZsb29yKGRhdGUuZ2V0RnVsbFllYXIoKSAvIGspICogayk7XG4gICAgZGF0ZS5zZXRNb250aCgwLCAxKTtcbiAgICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkYXRlLmdldEZ1bGxZZWFyKCkgKyBzdGVwICogayk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgeWVhcjtcbmV4cG9ydCB2YXIgeWVhcnMgPSB5ZWFyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjTWludXRlID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ1NlY29uZHMoMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNaW51dGU7XG5leHBvcnQgdmFyIHV0Y01pbnV0ZXMgPSB1dGNNaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjSG91ciA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENNaW51dGVzKDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25Ib3VyKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkhvdXI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0hvdXJzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjSG91cjtcbmV4cG9ydCB2YXIgdXRjSG91cnMgPSB1dGNIb3VyLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uRGF5fSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgdXRjRGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbkRheTtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpIC0gMTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNEYXk7XG5leHBvcnQgdmFyIHV0Y0RheXMgPSB1dGNEYXkucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25XZWVrfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG5mdW5jdGlvbiB1dGNXZWVrZGF5KGkpIHtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSAoZGF0ZS5nZXRVVENEYXkoKSArIDcgLSBpKSAlIDcpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgKyBzdGVwICogNyk7XG4gIH0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgdXRjU3VuZGF5ID0gdXRjV2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgdXRjTW9uZGF5ID0gdXRjV2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdXRjVHVlc2RheSA9IHV0Y1dlZWtkYXkoMik7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheSA9IHV0Y1dlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5ID0gdXRjV2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgdXRjRnJpZGF5ID0gdXRjV2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgdXRjU2F0dXJkYXkgPSB1dGNXZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHV0Y1N1bmRheXMgPSB1dGNTdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y01vbmRheXMgPSB1dGNNb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXlzID0gdXRjVHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjV2VkbmVzZGF5cyA9IHV0Y1dlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdXRjVGh1cnNkYXlzID0gdXRjVGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheXMgPSB1dGNGcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5cyA9IHV0Y1NhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNNb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENEYXRlKDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ01vbnRoKGRhdGUuZ2V0VVRDTW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ01vbnRoKCkgLSBzdGFydC5nZXRVVENNb250aCgpICsgKGVuZC5nZXRVVENGdWxsWWVhcigpIC0gc3RhcnQuZ2V0VVRDRnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0VVRDTW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB1dGNNb250aDtcbmV4cG9ydCB2YXIgdXRjTW9udGhzID0gdXRjTW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHV0Y1llYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxudXRjWWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldFVUQ0Z1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y1llYXI7XG5leHBvcnQgdmFyIHV0Y1llYXJzID0gdXRjWWVhci5yYW5nZTtcbiIsImltcG9ydCB7XG4gIHRpbWVEYXksXG4gIHRpbWVTdW5kYXksXG4gIHRpbWVNb25kYXksXG4gIHRpbWVUaHVyc2RheSxcbiAgdGltZVllYXIsXG4gIHV0Y0RheSxcbiAgdXRjU3VuZGF5LFxuICB1dGNNb25kYXksXG4gIHV0Y1RodXJzZGF5LFxuICB1dGNZZWFyXG59IGZyb20gXCJkMy10aW1lXCI7XG5cbmZ1bmN0aW9uIGxvY2FsRGF0ZShkKSB7XG4gIGlmICgwIDw9IGQueSAmJiBkLnkgPCAxMDApIHtcbiAgICB2YXIgZGF0ZSA9IG5ldyBEYXRlKC0xLCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKTtcbiAgICBkYXRlLnNldEZ1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG59XG5cbmZ1bmN0aW9uIHV0Y0RhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQygtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xuICAgIGRhdGUuc2V0VVRDRnVsbFllYXIoZC55KTtcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoZC55LCBkLm0sIGQuZCwgZC5ILCBkLk0sIGQuUywgZC5MKSk7XG59XG5cbmZ1bmN0aW9uIG5ld1llYXIoeSkge1xuICByZXR1cm4ge3k6IHksIG06IDAsIGQ6IDEsIEg6IDAsIE06IDAsIFM6IDAsIEw6IDB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRMb2NhbGUobG9jYWxlKSB7XG4gIHZhciBsb2NhbGVfZGF0ZVRpbWUgPSBsb2NhbGUuZGF0ZVRpbWUsXG4gICAgICBsb2NhbGVfZGF0ZSA9IGxvY2FsZS5kYXRlLFxuICAgICAgbG9jYWxlX3RpbWUgPSBsb2NhbGUudGltZSxcbiAgICAgIGxvY2FsZV9wZXJpb2RzID0gbG9jYWxlLnBlcmlvZHMsXG4gICAgICBsb2NhbGVfd2Vla2RheXMgPSBsb2NhbGUuZGF5cyxcbiAgICAgIGxvY2FsZV9zaG9ydFdlZWtkYXlzID0gbG9jYWxlLnNob3J0RGF5cyxcbiAgICAgIGxvY2FsZV9tb250aHMgPSBsb2NhbGUubW9udGhzLFxuICAgICAgbG9jYWxlX3Nob3J0TW9udGhzID0gbG9jYWxlLnNob3J0TW9udGhzO1xuXG4gIHZhciBwZXJpb2RSZSA9IGZvcm1hdFJlKGxvY2FsZV9wZXJpb2RzKSxcbiAgICAgIHBlcmlvZExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfcGVyaW9kcyksXG4gICAgICB3ZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgd2Vla2RheUxvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfd2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5UmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRXZWVrZGF5cyksXG4gICAgICBzaG9ydFdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgbW9udGhSZSA9IGZvcm1hdFJlKGxvY2FsZV9tb250aHMpLFxuICAgICAgbW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX21vbnRocyksXG4gICAgICBzaG9ydE1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfc2hvcnRNb250aHMpLFxuICAgICAgc2hvcnRNb250aExvb2t1cCA9IGZvcm1hdExvb2t1cChsb2NhbGVfc2hvcnRNb250aHMpO1xuXG4gIHZhciBmb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFdlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFNob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdE1vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXREYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdEhvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0SG91cjEyLFxuICAgIFwialwiOiBmb3JtYXREYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdE1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0TW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdE1pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFBlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFNlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFdlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFdlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFllYXIsXG4gICAgXCJZXCI6IGZvcm1hdEZ1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciB1dGNGb3JtYXRzID0ge1xuICAgIFwiYVwiOiBmb3JtYXRVVENTaG9ydFdlZWtkYXksXG4gICAgXCJBXCI6IGZvcm1hdFVUQ1dlZWtkYXksXG4gICAgXCJiXCI6IGZvcm1hdFVUQ1Nob3J0TW9udGgsXG4gICAgXCJCXCI6IGZvcm1hdFVUQ01vbnRoLFxuICAgIFwiY1wiOiBudWxsLFxuICAgIFwiZFwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBmb3JtYXRVVENEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBmb3JtYXRVVENNaWNyb3NlY29uZHMsXG4gICAgXCJIXCI6IGZvcm1hdFVUQ0hvdXIyNCxcbiAgICBcIklcIjogZm9ybWF0VVRDSG91cjEyLFxuICAgIFwialwiOiBmb3JtYXRVVENEYXlPZlllYXIsXG4gICAgXCJMXCI6IGZvcm1hdFVUQ01pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogZm9ybWF0VVRDTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IGZvcm1hdFVUQ01pbnV0ZXMsXG4gICAgXCJwXCI6IGZvcm1hdFVUQ1BlcmlvZCxcbiAgICBcIlFcIjogZm9ybWF0VW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMsXG4gICAgXCJTXCI6IGZvcm1hdFVUQ1NlY29uZHMsXG4gICAgXCJ1XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXksXG4gICAgXCJWXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXksXG4gICAgXCJ4XCI6IG51bGwsXG4gICAgXCJYXCI6IG51bGwsXG4gICAgXCJ5XCI6IGZvcm1hdFVUQ1llYXIsXG4gICAgXCJZXCI6IGZvcm1hdFVUQ0Z1bGxZZWFyLFxuICAgIFwiWlwiOiBmb3JtYXRVVENab25lLFxuICAgIFwiJVwiOiBmb3JtYXRMaXRlcmFsUGVyY2VudFxuICB9O1xuXG4gIHZhciBwYXJzZXMgPSB7XG4gICAgXCJhXCI6IHBhcnNlU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBwYXJzZVdlZWtkYXksXG4gICAgXCJiXCI6IHBhcnNlU2hvcnRNb250aCxcbiAgICBcIkJcIjogcGFyc2VNb250aCxcbiAgICBcImNcIjogcGFyc2VMb2NhbGVEYXRlVGltZSxcbiAgICBcImRcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZVwiOiBwYXJzZURheU9mTW9udGgsXG4gICAgXCJmXCI6IHBhcnNlTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBwYXJzZUhvdXIyNCxcbiAgICBcIklcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJqXCI6IHBhcnNlRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBwYXJzZU1pbGxpc2Vjb25kcyxcbiAgICBcIm1cIjogcGFyc2VNb250aE51bWJlcixcbiAgICBcIk1cIjogcGFyc2VNaW51dGVzLFxuICAgIFwicFwiOiBwYXJzZVBlcmlvZCxcbiAgICBcIlFcIjogcGFyc2VVbml4VGltZXN0YW1wLFxuICAgIFwic1wiOiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBwYXJzZVNlY29uZHMsXG4gICAgXCJ1XCI6IHBhcnNlV2Vla2RheU51bWJlck1vbmRheSxcbiAgICBcIlVcIjogcGFyc2VXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBwYXJzZVdlZWtOdW1iZXJJU08sXG4gICAgXCJ3XCI6IHBhcnNlV2Vla2RheU51bWJlclN1bmRheSxcbiAgICBcIldcIjogcGFyc2VXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBwYXJzZUxvY2FsZURhdGUsXG4gICAgXCJYXCI6IHBhcnNlTG9jYWxlVGltZSxcbiAgICBcInlcIjogcGFyc2VZZWFyLFxuICAgIFwiWVwiOiBwYXJzZUZ1bGxZZWFyLFxuICAgIFwiWlwiOiBwYXJzZVpvbmUsXG4gICAgXCIlXCI6IHBhcnNlTGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICAvLyBUaGVzZSByZWN1cnNpdmUgZGlyZWN0aXZlIGRlZmluaXRpb25zIG11c3QgYmUgZGVmZXJyZWQuXG4gIGZvcm1hdHMueCA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuWCA9IG5ld0Zvcm1hdChsb2NhbGVfdGltZSwgZm9ybWF0cyk7XG4gIGZvcm1hdHMuYyA9IG5ld0Zvcm1hdChsb2NhbGVfZGF0ZVRpbWUsIGZvcm1hdHMpO1xuICB1dGNGb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIHV0Y0Zvcm1hdHMpO1xuICB1dGNGb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCB1dGNGb3JtYXRzKTtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyLCBmb3JtYXRzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIHZhciBzdHJpbmcgPSBbXSxcbiAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgICAgYyxcbiAgICAgICAgICBwYWQsXG4gICAgICAgICAgZm9ybWF0O1xuXG4gICAgICBpZiAoIShkYXRlIGluc3RhbmNlb2YgRGF0ZSkpIGRhdGUgPSBuZXcgRGF0ZSgrZGF0ZSk7XG5cbiAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgIGlmIChzcGVjaWZpZXIuY2hhckNvZGVBdChpKSA9PT0gMzcpIHtcbiAgICAgICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgICAgIGlmICgocGFkID0gcGFkc1tjID0gc3BlY2lmaWVyLmNoYXJBdCgrK2kpXSkgIT0gbnVsbCkgYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKTtcbiAgICAgICAgICBlbHNlIHBhZCA9IGMgPT09IFwiZVwiID8gXCIgXCIgOiBcIjBcIjtcbiAgICAgICAgICBpZiAoZm9ybWF0ID0gZm9ybWF0c1tjXSkgYyA9IGZvcm1hdChkYXRlLCBwYWQpO1xuICAgICAgICAgIHN0cmluZy5wdXNoKGMpO1xuICAgICAgICAgIGogPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHJpbmcucHVzaChzcGVjaWZpZXIuc2xpY2UoaiwgaSkpO1xuICAgICAgcmV0dXJuIHN0cmluZy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXdQYXJzZShzcGVjaWZpZXIsIG5ld0RhdGUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICB2YXIgZCA9IG5ld1llYXIoMTkwMCksXG4gICAgICAgICAgaSA9IHBhcnNlU3BlY2lmaWVyKGQsIHNwZWNpZmllciwgc3RyaW5nICs9IFwiXCIsIDApLFxuICAgICAgICAgIHdlZWssIGRheTtcbiAgICAgIGlmIChpICE9IHN0cmluZy5sZW5ndGgpIHJldHVybiBudWxsO1xuXG4gICAgICAvLyBJZiBhIFVOSVggdGltZXN0YW1wIGlzIHNwZWNpZmllZCwgcmV0dXJuIGl0LlxuICAgICAgaWYgKFwiUVwiIGluIGQpIHJldHVybiBuZXcgRGF0ZShkLlEpO1xuXG4gICAgICAvLyBUaGUgYW0tcG0gZmxhZyBpcyAwIGZvciBBTSwgYW5kIDEgZm9yIFBNLlxuICAgICAgaWYgKFwicFwiIGluIGQpIGQuSCA9IGQuSCAlIDEyICsgZC5wICogMTI7XG5cbiAgICAgIC8vIENvbnZlcnQgZGF5LW9mLXdlZWsgYW5kIHdlZWstb2YteWVhciB0byBkYXktb2YteWVhci5cbiAgICAgIGlmIChcIlZcIiBpbiBkKSB7XG4gICAgICAgIGlmIChkLlYgPCAxIHx8IGQuViA+IDUzKSByZXR1cm4gbnVsbDtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IDE7XG4gICAgICAgIGlmIChcIlpcIiBpbiBkKSB7XG4gICAgICAgICAgd2VlayA9IHV0Y0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXRVVENEYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB1dGNNb25kYXkuY2VpbCh3ZWVrKSA6IHV0Y01vbmRheSh3ZWVrKTtcbiAgICAgICAgICB3ZWVrID0gdXRjRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRVVENNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0VVRDRGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3ZWVrID0gbmV3RGF0ZShuZXdZZWFyKGQueSkpLCBkYXkgPSB3ZWVrLmdldERheSgpO1xuICAgICAgICAgIHdlZWsgPSBkYXkgPiA0IHx8IGRheSA9PT0gMCA/IHRpbWVNb25kYXkuY2VpbCh3ZWVrKSA6IHRpbWVNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHRpbWVEYXkub2Zmc2V0KHdlZWssIChkLlYgLSAxKSAqIDcpO1xuICAgICAgICAgIGQueSA9IHdlZWsuZ2V0RnVsbFllYXIoKTtcbiAgICAgICAgICBkLm0gPSB3ZWVrLmdldE1vbnRoKCk7XG4gICAgICAgICAgZC5kID0gd2Vlay5nZXREYXRlKCkgKyAoZC53ICsgNikgJSA3O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKFwiV1wiIGluIGQgfHwgXCJVXCIgaW4gZCkge1xuICAgICAgICBpZiAoIShcIndcIiBpbiBkKSkgZC53ID0gXCJ1XCIgaW4gZCA/IGQudSAlIDcgOiBcIldcIiBpbiBkID8gMSA6IDA7XG4gICAgICAgIGRheSA9IFwiWlwiIGluIGQgPyB1dGNEYXRlKG5ld1llYXIoZC55KSkuZ2V0VVRDRGF5KCkgOiBuZXdEYXRlKG5ld1llYXIoZC55KSkuZ2V0RGF5KCk7XG4gICAgICAgIGQubSA9IDA7XG4gICAgICAgIGQuZCA9IFwiV1wiIGluIGQgPyAoZC53ICsgNikgJSA3ICsgZC5XICogNyAtIChkYXkgKyA1KSAlIDcgOiBkLncgKyBkLlUgKiA3IC0gKGRheSArIDYpICUgNztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgYSB0aW1lIHpvbmUgaXMgc3BlY2lmaWVkLCBhbGwgZmllbGRzIGFyZSBpbnRlcnByZXRlZCBhcyBVVEMgYW5kIHRoZW5cbiAgICAgIC8vIG9mZnNldCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCB0aW1lIHpvbmUuXG4gICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICBkLkggKz0gZC5aIC8gMTAwIHwgMDtcbiAgICAgICAgZC5NICs9IGQuWiAlIDEwMDtcbiAgICAgICAgcmV0dXJuIHV0Y0RhdGUoZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgYWxsIGZpZWxkcyBhcmUgaW4gbG9jYWwgdGltZS5cbiAgICAgIHJldHVybiBuZXdEYXRlKGQpO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZywgaikge1xuICAgIHZhciBpID0gMCxcbiAgICAgICAgbiA9IHNwZWNpZmllci5sZW5ndGgsXG4gICAgICAgIG0gPSBzdHJpbmcubGVuZ3RoLFxuICAgICAgICBjLFxuICAgICAgICBwYXJzZTtcblxuICAgIHdoaWxlIChpIDwgbikge1xuICAgICAgaWYgKGogPj0gbSkgcmV0dXJuIC0xO1xuICAgICAgYyA9IHNwZWNpZmllci5jaGFyQ29kZUF0KGkrKyk7XG4gICAgICBpZiAoYyA9PT0gMzcpIHtcbiAgICAgICAgYyA9IHNwZWNpZmllci5jaGFyQXQoaSsrKTtcbiAgICAgICAgcGFyc2UgPSBwYXJzZXNbYyBpbiBwYWRzID8gc3BlY2lmaWVyLmNoYXJBdChpKyspIDogY107XG4gICAgICAgIGlmICghcGFyc2UgfHwgKChqID0gcGFyc2UoZCwgc3RyaW5nLCBqKSkgPCAwKSkgcmV0dXJuIC0xO1xuICAgICAgfSBlbHNlIGlmIChjICE9IHN0cmluZy5jaGFyQ29kZUF0KGorKykpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBqO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VQZXJpb2QoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBwZXJpb2RSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5wID0gcGVyaW9kTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRXZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHNob3J0V2Vla2RheUxvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVdlZWtkYXkoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSB3ZWVrZGF5UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQudyA9IHdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTaG9ydE1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gc2hvcnRNb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBzaG9ydE1vbnRoTG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gICAgdmFyIG4gPSBtb250aFJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLm0gPSBtb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZVRpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUxvY2FsZURhdGUoZCwgc3RyaW5nLCBpKSB7XG4gICAgcmV0dXJuIHBhcnNlU3BlY2lmaWVyKGQsIGxvY2FsZV9kYXRlLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVUaW1lKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfdGltZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0RGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFNob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldE1vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldEhvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0V2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9zaG9ydFdlZWtkYXlzW2QuZ2V0VVRDRGF5KCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheShkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV93ZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1Nob3J0TW9udGgoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRNb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX21vbnRoc1tkLmdldFVUQ01vbnRoKCldO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VVRDUGVyaW9kKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3BlcmlvZHNbKyhkLmdldFVUQ0hvdXJzKCkgPj0gMTIpXTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCBmb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIgKz0gXCJcIiwgbG9jYWxEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH0sXG4gICAgdXRjRm9ybWF0OiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBmID0gbmV3Rm9ybWF0KHNwZWNpZmllciArPSBcIlwiLCB1dGNGb3JtYXRzKTtcbiAgICAgIGYudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBmO1xuICAgIH0sXG4gICAgdXRjUGFyc2U6IGZ1bmN0aW9uKHNwZWNpZmllcikge1xuICAgICAgdmFyIHAgPSBuZXdQYXJzZShzcGVjaWZpZXIsIHV0Y0RhdGUpO1xuICAgICAgcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gc3BlY2lmaWVyOyB9O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuICB9O1xufVxuXG52YXIgcGFkcyA9IHtcIi1cIjogXCJcIiwgXCJfXCI6IFwiIFwiLCBcIjBcIjogXCIwXCJ9LFxuICAgIG51bWJlclJlID0gL15cXHMqXFxkKy8sIC8vIG5vdGU6IGlnbm9yZXMgbmV4dCBkaXJlY3RpdmVcbiAgICBwZXJjZW50UmUgPSAvXiUvLFxuICAgIHJlcXVvdGVSZSA9IC9bXFxcXF4kKis/fFtcXF0oKS57fV0vZztcblxuZnVuY3Rpb24gcGFkKHZhbHVlLCBmaWxsLCB3aWR0aCkge1xuICB2YXIgc2lnbiA9IHZhbHVlIDwgMCA/IFwiLVwiIDogXCJcIixcbiAgICAgIHN0cmluZyA9IChzaWduID8gLXZhbHVlIDogdmFsdWUpICsgXCJcIixcbiAgICAgIGxlbmd0aCA9IHN0cmluZy5sZW5ndGg7XG4gIHJldHVybiBzaWduICsgKGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbihmaWxsKSArIHN0cmluZyA6IHN0cmluZyk7XG59XG5cbmZ1bmN0aW9uIHJlcXVvdGUocykge1xuICByZXR1cm4gcy5yZXBsYWNlKHJlcXVvdGVSZSwgXCJcXFxcJCZcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFJlKG5hbWVzKSB7XG4gIHJldHVybiBuZXcgUmVnRXhwKFwiXig/OlwiICsgbmFtZXMubWFwKHJlcXVvdGUpLmpvaW4oXCJ8XCIpICsgXCIpXCIsIFwiaVwiKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TG9va3VwKG5hbWVzKSB7XG4gIHZhciBtYXAgPSB7fSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbWFwW25hbWVzW2ldLnRvTG93ZXJDYXNlKCldID0gaTtcbiAgcmV0dXJuIG1hcDtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrZGF5TnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAxKSk7XG4gIHJldHVybiBuID8gKGQudyA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLnUgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJTdW5kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5VID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVySVNPKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuViA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlck1vbmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlcgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUZ1bGxZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA0KSk7XG4gIHJldHVybiBuID8gKGQueSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSArICgrblswXSA+IDY4ID8gMTkwMCA6IDIwMDApLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlWm9uZShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSAvXihaKXwoWystXVxcZFxcZCkoPzo6PyhcXGRcXGQpKT8vLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyA2KSk7XG4gIHJldHVybiBuID8gKGQuWiA9IG5bMV0gPyAwIDogLShuWzJdICsgKG5bM10gfHwgXCIwMFwiKSksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNb250aE51bWJlcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLm0gPSBuWzBdIC0gMSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZURheU9mTW9udGgoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZlllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gMCwgZC5kID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIb3VyMjQoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5IID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaW51dGVzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuTSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlMgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pbGxpc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMykpO1xuICByZXR1cm4gbiA/IChkLkwgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZU1pY3Jvc2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLkwgPSBNYXRoLmZsb29yKG5bMF0gLyAxMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpdGVyYWxQZXJjZW50KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IHBlcmNlbnRSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IGkgKyBuWzBdLmxlbmd0aCA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXAoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICByZXR1cm4gbiA/IChkLlEgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVVuaXhUaW1lc3RhbXBTZWNvbmRzKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gKCtuWzBdKSAqIDEwMDAsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXREYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEhvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB0aW1lRGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbGxpc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNaWxsaXNlY29uZHMoKSwgcCwgMyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pY3Jvc2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkgKyBcIjAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNb250aE51bWJlcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRNb250aCgpICsgMSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1pbnV0ZXMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWludXRlcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2Vjb25kcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRTZWNvbmRzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5KGQpIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIHJldHVybiBkYXkgPT09IDAgPyA3IDogZGF5O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lU3VuZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXREYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdGltZVRodXJzZGF5KGQpIDogdGltZVRodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodGltZVRodXJzZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSArICh0aW1lWWVhcihkKS5nZXREYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0RGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFdlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHRpbWVNb25kYXkuY291bnQodGltZVllYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRGdWxsWWVhcigpICUgMTAwLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RnVsbFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMDAwLCBwLCA0KTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0Wm9uZShkKSB7XG4gIHZhciB6ID0gZC5nZXRUaW1lem9uZU9mZnNldCgpO1xuICByZXR1cm4gKHogPiAwID8gXCItXCIgOiAoeiAqPSAtMSwgXCIrXCIpKVxuICAgICAgKyBwYWQoeiAvIDYwIHwgMCwgXCIwXCIsIDIpXG4gICAgICArIHBhZCh6ICUgNjAsIFwiMFwiLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZNb250aChkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENEYXRlKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMjQoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0hvdXIxMihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENEYXlPZlllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKDEgKyB1dGNEYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDTW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDU2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkb3cgPSBkLmdldFVUQ0RheSgpO1xuICByZXR1cm4gZG93ID09PSAwID8gNyA6IGRvdztcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodXRjU3VuZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla051bWJlcklTTyhkLCBwKSB7XG4gIHZhciBkYXkgPSBkLmdldFVUQ0RheSgpO1xuICBkID0gKGRheSA+PSA0IHx8IGRheSA9PT0gMCkgPyB1dGNUaHVyc2RheShkKSA6IHV0Y1RodXJzZGF5LmNlaWwoZCk7XG4gIHJldHVybiBwYWQodXRjVGh1cnNkYXkuY291bnQodXRjWWVhcihkKSwgZCkgKyAodXRjWWVhcihkKS5nZXRVVENEYXkoKSA9PT0gNCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5KGQpIHtcbiAgcmV0dXJuIGQuZ2V0VVRDRGF5KCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y01vbmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1llYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0Z1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1pvbmUoKSB7XG4gIHJldHVybiBcIiswMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExpdGVyYWxQZXJjZW50KCkge1xuICByZXR1cm4gXCIlXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXAoZCkge1xuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzKGQpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoK2QgLyAxMDAwKTtcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIHRpbWVGb3JtYXQ7XG5leHBvcnQgdmFyIHRpbWVQYXJzZTtcbmV4cG9ydCB2YXIgdXRjRm9ybWF0O1xuZXhwb3J0IHZhciB1dGNQYXJzZTtcblxuZGVmYXVsdExvY2FsZSh7XG4gIGRhdGVUaW1lOiBcIiV4LCAlWFwiLFxuICBkYXRlOiBcIiUtbS8lLWQvJVlcIixcbiAgdGltZTogXCIlLUk6JU06JVMgJXBcIixcbiAgcGVyaW9kczogW1wiQU1cIiwgXCJQTVwiXSxcbiAgZGF5czogW1wiU3VuZGF5XCIsIFwiTW9uZGF5XCIsIFwiVHVlc2RheVwiLCBcIldlZG5lc2RheVwiLCBcIlRodXJzZGF5XCIsIFwiRnJpZGF5XCIsIFwiU2F0dXJkYXlcIl0sXG4gIHNob3J0RGF5czogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICBtb250aHM6IFtcIkphbnVhcnlcIiwgXCJGZWJydWFyeVwiLCBcIk1hcmNoXCIsIFwiQXByaWxcIiwgXCJNYXlcIiwgXCJKdW5lXCIsIFwiSnVseVwiLCBcIkF1Z3VzdFwiLCBcIlNlcHRlbWJlclwiLCBcIk9jdG9iZXJcIiwgXCJOb3ZlbWJlclwiLCBcIkRlY2VtYmVyXCJdLFxuICBzaG9ydE1vbnRoczogW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgdGltZUZvcm1hdCA9IGxvY2FsZS5mb3JtYXQ7XG4gIHRpbWVQYXJzZSA9IGxvY2FsZS5wYXJzZTtcbiAgdXRjRm9ybWF0ID0gbG9jYWxlLnV0Y0Zvcm1hdDtcbiAgdXRjUGFyc2UgPSBsb2NhbGUudXRjUGFyc2U7XG4gIHJldHVybiBsb2NhbGU7XG59XG4iLCJpbXBvcnQge3V0Y0Zvcm1hdH0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5leHBvcnQgdmFyIGlzb1NwZWNpZmllciA9IFwiJVktJW0tJWRUJUg6JU06JVMuJUxaXCI7XG5cbmZ1bmN0aW9uIGZvcm1hdElzb05hdGl2ZShkYXRlKSB7XG4gIHJldHVybiBkYXRlLnRvSVNPU3RyaW5nKCk7XG59XG5cbnZhciBmb3JtYXRJc28gPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZ1xuICAgID8gZm9ybWF0SXNvTmF0aXZlXG4gICAgOiB1dGNGb3JtYXQoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZm9ybWF0SXNvO1xuIiwiaW1wb3J0IHtpc29TcGVjaWZpZXJ9IGZyb20gXCIuL2lzb0Zvcm1hdFwiO1xuaW1wb3J0IHt1dGNQYXJzZX0gZnJvbSBcIi4vZGVmYXVsdExvY2FsZVwiO1xuXG5mdW5jdGlvbiBwYXJzZUlzb05hdGl2ZShzdHJpbmcpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShzdHJpbmcpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBudWxsIDogZGF0ZTtcbn1cblxudmFyIHBhcnNlSXNvID0gK25ldyBEYXRlKFwiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaXCIpXG4gICAgPyBwYXJzZUlzb05hdGl2ZVxuICAgIDogdXRjUGFyc2UoaXNvU3BlY2lmaWVyKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VJc287XG4iLCJleHBvcnQgdmFyIHhodG1sID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3ZnOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsXG4gIHhodG1sOiB4aHRtbCxcbiAgeGxpbms6IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICB4bWw6IFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsXG4gIHhtbG5zOiBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCJcbn07XG4iLCJpbXBvcnQgbmFtZXNwYWNlcyBmcm9tIFwiLi9uYW1lc3BhY2VzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHByZWZpeCA9IG5hbWUgKz0gXCJcIiwgaSA9IHByZWZpeC5pbmRleE9mKFwiOlwiKTtcbiAgaWYgKGkgPj0gMCAmJiAocHJlZml4ID0gbmFtZS5zbGljZSgwLCBpKSkgIT09IFwieG1sbnNcIikgbmFtZSA9IG5hbWUuc2xpY2UoaSArIDEpO1xuICByZXR1cm4gbmFtZXNwYWNlcy5oYXNPd25Qcm9wZXJ0eShwcmVmaXgpID8ge3NwYWNlOiBuYW1lc3BhY2VzW3ByZWZpeF0sIGxvY2FsOiBuYW1lfSA6IG5hbWU7XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuL25hbWVzcGFjZVwiO1xuaW1wb3J0IHt4aHRtbH0gZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5mdW5jdGlvbiBjcmVhdG9ySW5oZXJpdChuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZG9jdW1lbnQgPSB0aGlzLm93bmVyRG9jdW1lbnQsXG4gICAgICAgIHVyaSA9IHRoaXMubmFtZXNwYWNlVVJJO1xuICAgIHJldHVybiB1cmkgPT09IHhodG1sICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5uYW1lc3BhY2VVUkkgPT09IHhodG1sXG4gICAgICAgID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKVxuICAgICAgICA6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyh1cmksIG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdG9yRml4ZWQoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuICByZXR1cm4gKGZ1bGxuYW1lLmxvY2FsXG4gICAgICA/IGNyZWF0b3JGaXhlZFxuICAgICAgOiBjcmVhdG9ySW5oZXJpdCkoZnVsbG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gbm9uZSgpIHt9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gbm9uZSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odXBkYXRlKSB7XG4gIHJldHVybiBuZXcgQXJyYXkodXBkYXRlLmxlbmd0aCk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9lbnRlciB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRW50ZXJOb2RlKHBhcmVudCwgZGF0dW0pIHtcbiAgdGhpcy5vd25lckRvY3VtZW50ID0gcGFyZW50Lm93bmVyRG9jdW1lbnQ7XG4gIHRoaXMubmFtZXNwYWNlVVJJID0gcGFyZW50Lm5hbWVzcGFjZVVSSTtcbiAgdGhpcy5fbmV4dCA9IG51bGw7XG4gIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgdGhpcy5fX2RhdGFfXyA9IGRhdHVtO1xufVxuXG5FbnRlck5vZGUucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRW50ZXJOb2RlLFxuICBhcHBlbmRDaGlsZDogZnVuY3Rpb24oY2hpbGQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIHRoaXMuX25leHQpOyB9LFxuICBpbnNlcnRCZWZvcmU6IGZ1bmN0aW9uKGNoaWxkLCBuZXh0KSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCBuZXh0KTsgfSxcbiAgcXVlcnlTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTsgfSxcbiAgcXVlcnlTZWxlY3RvckFsbDogZnVuY3Rpb24oc2VsZWN0b3IpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge0VudGVyTm9kZX0gZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi4vY29uc3RhbnRcIjtcblxudmFyIGtleVByZWZpeCA9IFwiJFwiOyAvLyBQcm90ZWN0IGFnYWluc3Qga2V5cyBsaWtlIOKAnF9fcHJvdG9fX+KAnS5cblxuZnVuY3Rpb24gYmluZEluZGV4KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbm9kZSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBmaXQgaW50byB1cGRhdGUuXG4gIC8vIFB1dCBhbnkgbnVsbCBub2RlcyBpbnRvIGVudGVyLlxuICAvLyBQdXQgYW55IHJlbWFpbmluZyBkYXRhIGludG8gZW50ZXIuXG4gIGZvciAoOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZG9u4oCZdCBmaXQgaW50byBleGl0LlxuICBmb3IgKDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYmluZEtleShwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhLCBrZXkpIHtcbiAgdmFyIGksXG4gICAgICBub2RlLFxuICAgICAgbm9kZUJ5S2V5VmFsdWUgPSB7fSxcbiAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAga2V5VmFsdWVzID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKSxcbiAgICAgIGtleVZhbHVlO1xuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBub2RlLlxuICAvLyBJZiBtdWx0aXBsZSBub2RlcyBoYXZlIHRoZSBzYW1lIGtleSwgdGhlIGR1cGxpY2F0ZXMgYXJlIGFkZGVkIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAga2V5VmFsdWVzW2ldID0ga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgICBpZiAoa2V5VmFsdWUgaW4gbm9kZUJ5S2V5VmFsdWUpIHtcbiAgICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIENvbXB1dGUgdGhlIGtleSBmb3IgZWFjaCBkYXR1bS5cbiAgLy8gSWYgdGhlcmUgYSBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGtleSwgam9pbiBhbmQgYWRkIGl0IHRvIHVwZGF0ZS5cbiAgLy8gSWYgdGhlcmUgaXMgbm90IChvciB0aGUga2V5IGlzIGEgZHVwbGljYXRlKSwgYWRkIGl0IHRvIGVudGVyLlxuICBmb3IgKGkgPSAwOyBpIDwgZGF0YUxlbmd0aDsgKytpKSB7XG4gICAga2V5VmFsdWUgPSBrZXlQcmVmaXggKyBrZXkuY2FsbChwYXJlbnQsIGRhdGFbaV0sIGksIGRhdGEpO1xuICAgIGlmIChub2RlID0gbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZV0gPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlW2tleVZhbHVlc1tpXV0gPT09IG5vZGUpKSB7XG4gICAgICBleGl0W2ldID0gbm9kZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGF0YSA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGogPSAtMTtcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oZCkgeyBkYXRhWysral0gPSBkOyB9KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHZhciBiaW5kID0ga2V5ID8gYmluZEtleSA6IGJpbmRJbmRleCxcbiAgICAgIHBhcmVudHMgPSB0aGlzLl9wYXJlbnRzLFxuICAgICAgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzO1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdmFsdWUgPSBjb25zdGFudCh2YWx1ZSk7XG5cbiAgZm9yICh2YXIgbSA9IGdyb3Vwcy5sZW5ndGgsIHVwZGF0ZSA9IG5ldyBBcnJheShtKSwgZW50ZXIgPSBuZXcgQXJyYXkobSksIGV4aXQgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgdmFyIHBhcmVudCA9IHBhcmVudHNbal0sXG4gICAgICAgIGdyb3VwID0gZ3JvdXBzW2pdLFxuICAgICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgICAgZGF0YSA9IHZhbHVlLmNhbGwocGFyZW50LCBwYXJlbnQgJiYgcGFyZW50Ll9fZGF0YV9fLCBqLCBwYXJlbnRzKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gY2xhc3NBcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50cmltKCkuc3BsaXQoL158XFxzKy8pO1xufVxuXG5mdW5jdGlvbiBjbGFzc0xpc3Qobm9kZSkge1xuICByZXR1cm4gbm9kZS5jbGFzc0xpc3QgfHwgbmV3IENsYXNzTGlzdChub2RlKTtcbn1cblxuZnVuY3Rpb24gQ2xhc3NMaXN0KG5vZGUpIHtcbiAgdGhpcy5fbm9kZSA9IG5vZGU7XG4gIHRoaXMuX25hbWVzID0gY2xhc3NBcnJheShub2RlLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpIHx8IFwiXCIpO1xufVxuXG5DbGFzc0xpc3QucHJvdG90eXBlID0ge1xuICBhZGQ6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPCAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgaSA9IHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSk7XG4gICAgaWYgKGkgPj0gMCkge1xuICAgICAgdGhpcy5fbmFtZXMuc3BsaWNlKGksIDEpO1xuICAgICAgdGhpcy5fbm9kZS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCB0aGlzLl9uYW1lcy5qb2luKFwiIFwiKSk7XG4gICAgfVxuICB9LFxuICBjb250YWluczogZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpID49IDA7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNsYXNzZWRBZGQobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QuYWRkKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFJlbW92ZShub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5yZW1vdmUobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkVHJ1ZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZEFkZCh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGYWxzZShuYW1lcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgY2xhc3NlZFJlbW92ZSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRGdW5jdGlvbihuYW1lcywgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICh2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpID8gY2xhc3NlZEFkZCA6IGNsYXNzZWRSZW1vdmUpKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIG5hbWVzID0gY2xhc3NBcnJheShuYW1lICsgXCJcIik7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIGxpc3QgPSBjbGFzc0xpc3QodGhpcy5ub2RlKCkpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIGlmICghbGlzdC5jb250YWlucyhuYW1lc1tpXSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGNsYXNzZWRGdW5jdGlvbiA6IHZhbHVlXG4gICAgICA/IGNsYXNzZWRUcnVlXG4gICAgICA6IGNsYXNzZWRGYWxzZSkobmFtZXMsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiB0ZXh0UmVtb3ZlKCkge1xuICB0aGlzLnRleHRDb250ZW50ID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gdGV4dENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHRleHRGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHRleHRSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHRleHRGdW5jdGlvblxuICAgICAgICAgIDogdGV4dENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLnRleHRDb250ZW50O1xufVxuIiwiZnVuY3Rpb24gaHRtbFJlbW92ZSgpIHtcbiAgdGhpcy5pbm5lckhUTUwgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiBodG1sQ29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdmFsdWU7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGh0bWxGdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMuaW5uZXJIVE1MID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyBodG1sUmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBodG1sRnVuY3Rpb25cbiAgICAgICAgICA6IGh0bWxDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS5pbm5lckhUTUw7XG59XG4iLCJmdW5jdGlvbiByYWlzZSgpIHtcbiAgaWYgKHRoaXMubmV4dFNpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmFpc2UpO1xufVxuIiwiZnVuY3Rpb24gbG93ZXIoKSB7XG4gIGlmICh0aGlzLnByZXZpb3VzU2libGluZykgdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLCB0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKGxvd2VyKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZURlZXAoKSB7XG4gIHJldHVybiB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMuY2xvbmVOb2RlKHRydWUpLCB0aGlzLm5leHRTaWJsaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZGVlcCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZGVlcCA/IHNlbGVjdGlvbl9jbG9uZURlZXAgOiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KTtcbn1cbiIsInZhciBmaWx0ZXJFdmVudHMgPSB7fTtcblxuZXhwb3J0IHZhciBldmVudCA9IG51bGw7XG5cbmlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIGlmICghKFwib25tb3VzZWVudGVyXCIgaW4gZWxlbWVudCkpIHtcbiAgICBmaWx0ZXJFdmVudHMgPSB7bW91c2VlbnRlcjogXCJtb3VzZW92ZXJcIiwgbW91c2VsZWF2ZTogXCJtb3VzZW91dFwifTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJDb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCkge1xuICBsaXN0ZW5lciA9IGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgdmFyIHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0O1xuICAgIGlmICghcmVsYXRlZCB8fCAocmVsYXRlZCAhPT0gdGhpcyAmJiAhKHJlbGF0ZWQuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGhpcykgJiA4KSkpIHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50MSkge1xuICAgIHZhciBldmVudDAgPSBldmVudDsgLy8gRXZlbnRzIGNhbiBiZSByZWVudHJhbnQgKGUuZy4sIGZvY3VzKS5cbiAgICBldmVudCA9IGV2ZW50MTtcbiAgICB0cnkge1xuICAgICAgbGlzdGVuZXIuY2FsbCh0aGlzLCB0aGlzLl9fZGF0YV9fLCBpbmRleCwgZ3JvdXApO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBldmVudCA9IGV2ZW50MDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHdyYXAgPSBmaWx0ZXJFdmVudHMuaGFzT3duUHJvcGVydHkodHlwZW5hbWUudHlwZSkgPyBmaWx0ZXJDb250ZXh0TGlzdGVuZXIgOiBjb250ZXh0TGlzdGVuZXI7XG4gIHJldHVybiBmdW5jdGlvbihkLCBpLCBncm91cCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSB3cmFwKHZhbHVlLCBpLCBncm91cCk7XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgICAgaWYgKChvID0gb25bal0pLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUgJiYgby5uYW1lID09PSB0eXBlbmFtZS5uYW1lKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIsIG8uY2FwdHVyZSk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihvLnR5cGUsIG8ubGlzdGVuZXIgPSBsaXN0ZW5lciwgby5jYXB0dXJlID0gY2FwdHVyZSk7XG4gICAgICAgIG8udmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIodHlwZW5hbWUudHlwZSwgbGlzdGVuZXIsIGNhcHR1cmUpO1xuICAgIG8gPSB7dHlwZTogdHlwZW5hbWUudHlwZSwgbmFtZTogdHlwZW5hbWUubmFtZSwgdmFsdWU6IHZhbHVlLCBsaXN0ZW5lcjogbGlzdGVuZXIsIGNhcHR1cmU6IGNhcHR1cmV9O1xuICAgIGlmICghb24pIHRoaXMuX19vbiA9IFtvXTtcbiAgICBlbHNlIG9uLnB1c2gobyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHR5cGVuYW1lLCB2YWx1ZSwgY2FwdHVyZSkge1xuICB2YXIgdHlwZW5hbWVzID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiKSwgaSwgbiA9IHR5cGVuYW1lcy5sZW5ndGgsIHQ7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG9uID0gdGhpcy5ub2RlKCkuX19vbjtcbiAgICBpZiAob24pIGZvciAodmFyIGogPSAwLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBmb3IgKGkgPSAwLCBvID0gb25bal07IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKCh0ID0gdHlwZW5hbWVzW2ldKS50eXBlID09PSBvLnR5cGUgJiYgdC5uYW1lID09PSBvLm5hbWUpIHtcbiAgICAgICAgICByZXR1cm4gby52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICBvbiA9IHZhbHVlID8gb25BZGQgOiBvblJlbW92ZTtcbiAgaWYgKGNhcHR1cmUgPT0gbnVsbCkgY2FwdHVyZSA9IGZhbHNlO1xuICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB0aGlzLmVhY2gob24odHlwZW5hbWVzW2ldLCB2YWx1ZSwgY2FwdHVyZSkpO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbUV2ZW50KGV2ZW50MSwgbGlzdGVuZXIsIHRoYXQsIGFyZ3MpIHtcbiAgdmFyIGV2ZW50MCA9IGV2ZW50O1xuICBldmVudDEuc291cmNlRXZlbnQgPSBldmVudDtcbiAgZXZlbnQgPSBldmVudDE7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9IGZpbmFsbHkge1xuICAgIGV2ZW50ID0gZXZlbnQwO1xuICB9XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvd1wiO1xuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50KG5vZGUsIHR5cGUsIHBhcmFtcykge1xuICB2YXIgd2luZG93ID0gZGVmYXVsdFZpZXcobm9kZSksXG4gICAgICBldmVudCA9IHdpbmRvdy5DdXN0b21FdmVudDtcblxuICBpZiAodHlwZW9mIGV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBldmVudCA9IG5ldyBldmVudCh0eXBlLCBwYXJhbXMpO1xuICB9IGVsc2Uge1xuICAgIGV2ZW50ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIik7XG4gICAgaWYgKHBhcmFtcykgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIHBhcmFtcy5idWJibGVzLCBwYXJhbXMuY2FuY2VsYWJsZSksIGV2ZW50LmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gICAgZWxzZSBldmVudC5pbml0RXZlbnQodHlwZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuXG4gIG5vZGUuZGlzcGF0Y2hFdmVudChldmVudCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoQ29uc3RhbnQodHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudCh0aGlzLCB0eXBlLCBwYXJhbXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEZ1bmN0aW9uKHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHBhcmFtcyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IGRpc3BhdGNoRnVuY3Rpb25cbiAgICAgIDogZGlzcGF0Y2hDb25zdGFudCkodHlwZSwgcGFyYW1zKSk7XG59XG4iLCJpbXBvcnQgc2VsZWN0aW9uX3NlbGVjdCBmcm9tIFwiLi9zZWxlY3RcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9maWx0ZXIgZnJvbSBcIi4vZmlsdGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdGEgZnJvbSBcIi4vZGF0YVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbnRlciBmcm9tIFwiLi9lbnRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9leGl0IGZyb20gXCIuL2V4aXRcIjtcbmltcG9ydCBzZWxlY3Rpb25fam9pbiBmcm9tIFwiLi9qb2luXCI7XG5pbXBvcnQgc2VsZWN0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29yZGVyIGZyb20gXCIuL29yZGVyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NvcnQgZnJvbSBcIi4vc29ydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jYWxsIGZyb20gXCIuL2NhbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZXMgZnJvbSBcIi4vbm9kZXNcIjtcbmltcG9ydCBzZWxlY3Rpb25fbm9kZSBmcm9tIFwiLi9ub2RlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NpemUgZnJvbSBcIi4vc2l6ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lbXB0eSBmcm9tIFwiLi9lbXB0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9lYWNoIGZyb20gXCIuL2VhY2hcIjtcbmltcG9ydCBzZWxlY3Rpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3N0eWxlIGZyb20gXCIuL3N0eWxlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3Byb3BlcnR5IGZyb20gXCIuL3Byb3BlcnR5XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2NsYXNzZWQgZnJvbSBcIi4vY2xhc3NlZFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCBzZWxlY3Rpb25faHRtbCBmcm9tIFwiLi9odG1sXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3JhaXNlIGZyb20gXCIuL3JhaXNlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2xvd2VyIGZyb20gXCIuL2xvd2VyXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2FwcGVuZCBmcm9tIFwiLi9hcHBlbmRcIjtcbmltcG9ydCBzZWxlY3Rpb25faW5zZXJ0IGZyb20gXCIuL2luc2VydFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Nsb25lIGZyb20gXCIuL2Nsb25lXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2RhdHVtIGZyb20gXCIuL2RhdHVtXCI7XG5pbXBvcnQgc2VsZWN0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2Rpc3BhdGNoIGZyb20gXCIuL2Rpc3BhdGNoXCI7XG5cbmV4cG9ydCB2YXIgcm9vdCA9IFtudWxsXTtcblxuZXhwb3J0IGZ1bmN0aW9uIFNlbGVjdGlvbihncm91cHMsIHBhcmVudHMpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbihbW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF1dLCByb290KTtcbn1cblxuU2VsZWN0aW9uLnByb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBTZWxlY3Rpb24sXG4gIHNlbGVjdDogc2VsZWN0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiBzZWxlY3Rpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHNlbGVjdGlvbl9maWx0ZXIsXG4gIGRhdGE6IHNlbGVjdGlvbl9kYXRhLFxuICBlbnRlcjogc2VsZWN0aW9uX2VudGVyLFxuICBleGl0OiBzZWxlY3Rpb25fZXhpdCxcbiAgam9pbjogc2VsZWN0aW9uX2pvaW4sXG4gIG1lcmdlOiBzZWxlY3Rpb25fbWVyZ2UsXG4gIG9yZGVyOiBzZWxlY3Rpb25fb3JkZXIsXG4gIHNvcnQ6IHNlbGVjdGlvbl9zb3J0LFxuICBjYWxsOiBzZWxlY3Rpb25fY2FsbCxcbiAgbm9kZXM6IHNlbGVjdGlvbl9ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX25vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9zaXplLFxuICBlbXB0eTogc2VsZWN0aW9uX2VtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fZWFjaCxcbiAgYXR0cjogc2VsZWN0aW9uX2F0dHIsXG4gIHN0eWxlOiBzZWxlY3Rpb25fc3R5bGUsXG4gIHByb3BlcnR5OiBzZWxlY3Rpb25fcHJvcGVydHksXG4gIGNsYXNzZWQ6IHNlbGVjdGlvbl9jbGFzc2VkLFxuICB0ZXh0OiBzZWxlY3Rpb25fdGV4dCxcbiAgaHRtbDogc2VsZWN0aW9uX2h0bWwsXG4gIHJhaXNlOiBzZWxlY3Rpb25fcmFpc2UsXG4gIGxvd2VyOiBzZWxlY3Rpb25fbG93ZXIsXG4gIGFwcGVuZDogc2VsZWN0aW9uX2FwcGVuZCxcbiAgaW5zZXJ0OiBzZWxlY3Rpb25faW5zZXJ0LFxuICByZW1vdmU6IHNlbGVjdGlvbl9yZW1vdmUsXG4gIGNsb25lOiBzZWxlY3Rpb25fY2xvbmUsXG4gIGRhdHVtOiBzZWxlY3Rpb25fZGF0dW0sXG4gIG9uOiBzZWxlY3Rpb25fb24sXG4gIGRpc3BhdGNoOiBzZWxlY3Rpb25fZGlzcGF0Y2hcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHNlbGVjdGlvbjtcbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3Ioc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBzdWJub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChzdWJub2RlID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSkge1xuICAgICAgICBpZiAoXCJfX2RhdGFfX1wiIGluIG5vZGUpIHN1Ym5vZGUuX19kYXRhX18gPSBub2RlLl9fZGF0YV9fO1xuICAgICAgICBzdWJncm91cFtpXSA9IHN1Ym5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNlbGVjdG9yQWxsIGZyb20gXCIuLi9zZWxlY3RvckFsbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgIT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gc2VsZWN0b3JBbGwoc2VsZWN0KTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBbXSwgcGFyZW50cyA9IFtdLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzdWJncm91cHMucHVzaChzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpO1xuICAgICAgICBwYXJlbnRzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCBwYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IG1hdGNoZXIgZnJvbSBcIi4uL21hdGNoZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQgc3BhcnNlIGZyb20gXCIuL3NwYXJzZVwiO1xuaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9leGl0IHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihvbmVudGVyLCBvbnVwZGF0ZSwgb25leGl0KSB7XG4gIHZhciBlbnRlciA9IHRoaXMuZW50ZXIoKSwgdXBkYXRlID0gdGhpcywgZXhpdCA9IHRoaXMuZXhpdCgpO1xuICBlbnRlciA9IHR5cGVvZiBvbmVudGVyID09PSBcImZ1bmN0aW9uXCIgPyBvbmVudGVyKGVudGVyKSA6IGVudGVyLmFwcGVuZChvbmVudGVyICsgXCJcIik7XG4gIGlmIChvbnVwZGF0ZSAhPSBudWxsKSB1cGRhdGUgPSBvbnVwZGF0ZSh1cGRhdGUpO1xuICBpZiAob25leGl0ID09IG51bGwpIGV4aXQucmVtb3ZlKCk7IGVsc2Ugb25leGl0KGV4aXQpO1xuICByZXR1cm4gZW50ZXIgJiYgdXBkYXRlID8gZW50ZXIubWVyZ2UodXBkYXRlKS5vcmRlcigpIDogdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdGlvbikge1xuXG4gIGZvciAodmFyIGdyb3VwczAgPSB0aGlzLl9ncm91cHMsIGdyb3VwczEgPSBzZWxlY3Rpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IC0xLCBtID0gZ3JvdXBzLmxlbmd0aDsgKytqIDwgbTspIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IGdyb3VwLmxlbmd0aCAtIDEsIG5leHQgPSBncm91cFtpXSwgbm9kZTsgLS1pID49IDA7KSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGlmIChuZXh0ICYmIG5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24obmV4dCkgXiA0KSBuZXh0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5vZGUsIG5leHQpO1xuICAgICAgICBuZXh0ID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF07XG4gIGFyZ3VtZW50c1swXSA9IHRoaXM7XG4gIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBub2RlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUoKSksIGkgPSAtMTtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyBub2Rlc1srK2ldID0gdGhpczsgfSk7XG4gIHJldHVybiBub2Rlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICB2YXIgbm9kZSA9IGdyb3VwW2ldO1xuICAgICAgaWYgKG5vZGUpIHJldHVybiBub2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBzaXplID0gMDtcbiAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkgeyArK3NpemU7IH0pO1xuICByZXR1cm4gc2l6ZTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gIXRoaXMubm9kZSgpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2spIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZTsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkgY2FsbGJhY2suY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJmdW5jdGlvbiBwcm9wZXJ0eVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWxldGUgdGhpc1tuYW1lXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpc1tuYW1lXSA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBwcm9wZXJ0eUZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgZGVsZXRlIHRoaXNbbmFtZV07XG4gICAgZWxzZSB0aGlzW25hbWVdID0gdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAxXG4gICAgICA/IHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gcHJvcGVydHlSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gcHJvcGVydHlGdW5jdGlvblxuICAgICAgICAgIDogcHJvcGVydHlDb25zdGFudCkobmFtZSwgdmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKVtuYW1lXTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmFwcGVuZENoaWxkKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLnByb3BlcnR5KFwiX19kYXRhX19cIiwgdmFsdWUpXG4gICAgICA6IHRoaXMubm9kZSgpLl9fZGF0YV9fO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwidmFyIG5leHRJZCA9IDA7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvY2FsKCkge1xuICByZXR1cm4gbmV3IExvY2FsO1xufVxuXG5mdW5jdGlvbiBMb2NhbCgpIHtcbiAgdGhpcy5fID0gXCJAXCIgKyAoKytuZXh0SWQpLnRvU3RyaW5nKDM2KTtcbn1cblxuTG9jYWwucHJvdG90eXBlID0gbG9jYWwucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogTG9jYWwsXG4gIGdldDogZnVuY3Rpb24obm9kZSkge1xuICAgIHZhciBpZCA9IHRoaXMuXztcbiAgICB3aGlsZSAoIShpZCBpbiBub2RlKSkgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHJldHVybjtcbiAgICByZXR1cm4gbm9kZVtpZF07XG4gIH0sXG4gIHNldDogZnVuY3Rpb24obm9kZSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbm9kZVt0aGlzLl9dID0gdmFsdWU7XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obm9kZSkge1xuICAgIHJldHVybiB0aGlzLl8gaW4gbm9kZSAmJiBkZWxldGUgbm9kZVt0aGlzLl9dO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuXztcbiAgfVxufTtcbiIsInZhciBub29wID0ge3ZhbHVlOiBmdW5jdGlvbigpIHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pKSB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIHR5cGU6IFwiICsgdCk7XG4gICAgX1t0XSA9IFtdO1xuICB9XG4gIHJldHVybiBuZXcgRGlzcGF0Y2goXyk7XG59XG5cbmZ1bmN0aW9uIERpc3BhdGNoKF8pIHtcbiAgdGhpcy5fID0gXztcbn1cblxuZnVuY3Rpb24gcGFyc2VUeXBlbmFtZXModHlwZW5hbWVzLCB0eXBlcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgaWYgKHQgJiYgIXR5cGVzLmhhc093blByb3BlcnR5KHQpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdCk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbkRpc3BhdGNoLnByb3RvdHlwZSA9IGRpc3BhdGNoLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IERpc3BhdGNoLFxuICBvbjogZnVuY3Rpb24odHlwZW5hbWUsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF8gPSB0aGlzLl8sXG4gICAgICAgIFQgPSBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZSArIFwiXCIsIF8pLFxuICAgICAgICB0LFxuICAgICAgICBpID0gLTEsXG4gICAgICAgIG4gPSBULmxlbmd0aDtcblxuICAgIC8vIElmIG5vIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJldHVybiB0aGUgY2FsbGJhY2sgb2YgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgICB3aGlsZSAoKytpIDwgbikgaWYgKCh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgJiYgKHQgPSBnZXQoX1t0XSwgdHlwZW5hbWUubmFtZSkpKSByZXR1cm4gdDtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiBhIHR5cGUgd2FzIHNwZWNpZmllZCwgc2V0IHRoZSBjYWxsYmFjayBmb3IgdGhlIGdpdmVuIHR5cGUgYW5kIG5hbWUuXG4gICAgLy8gT3RoZXJ3aXNlLCBpZiBhIG51bGwgY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmVtb3ZlIGNhbGxiYWNrcyBvZiB0aGUgZ2l2ZW4gbmFtZS5cbiAgICBpZiAoY2FsbGJhY2sgIT0gbnVsbCAmJiB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsYmFjazogXCIgKyBjYWxsYmFjayk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIGlmICh0ID0gKHR5cGVuYW1lID0gVFtpXSkudHlwZSkgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBjYWxsYmFjayk7XG4gICAgICBlbHNlIGlmIChjYWxsYmFjayA9PSBudWxsKSBmb3IgKHQgaW4gXykgX1t0XSA9IHNldChfW3RdLCB0eXBlbmFtZS5uYW1lLCBudWxsKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgY29weTogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGNvcHkgPSB7fSwgXyA9IHRoaXMuXztcbiAgICBmb3IgKHZhciB0IGluIF8pIGNvcHlbdF0gPSBfW3RdLnNsaWNlKCk7XG4gICAgcmV0dXJuIG5ldyBEaXNwYXRjaChjb3B5KTtcbiAgfSxcbiAgY2FsbDogZnVuY3Rpb24odHlwZSwgdGhhdCkge1xuICAgIGlmICgobiA9IGFyZ3VtZW50cy5sZW5ndGggLSAyKSA+IDApIGZvciAodmFyIGFyZ3MgPSBuZXcgQXJyYXkobiksIGkgPSAwLCBuLCB0OyBpIDwgbjsgKytpKSBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSxcbiAgYXBwbHk6IGZ1bmN0aW9uKHR5cGUsIHRoYXQsIGFyZ3MpIHtcbiAgICBpZiAoIXRoaXMuXy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHR5cGUpO1xuICAgIGZvciAodmFyIHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldCh0eXBlLCBuYW1lKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGgsIGM7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAoKGMgPSB0eXBlW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICByZXR1cm4gYy52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0KHR5cGUsIG5hbWUsIGNhbGxiYWNrKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gdHlwZS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBpZiAodHlwZVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICB0eXBlW2ldID0gbm9vcCwgdHlwZSA9IHR5cGUuc2xpY2UoMCwgaSkuY29uY2F0KHR5cGUuc2xpY2UoaSArIDEpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2sgIT0gbnVsbCkgdHlwZS5wdXNoKHtuYW1lOiBuYW1lLCB2YWx1ZTogY2FsbGJhY2t9KTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRpc3BhdGNoO1xuIiwidmFyIGZyYW1lID0gMCwgLy8gaXMgYW4gYW5pbWF0aW9uIGZyYW1lIHBlbmRpbmc/XG4gICAgdGltZW91dCA9IDAsIC8vIGlzIGEgdGltZW91dCBwZW5kaW5nP1xuICAgIGludGVydmFsID0gMCwgLy8gYXJlIGFueSB0aW1lcnMgYWN0aXZlP1xuICAgIHBva2VEZWxheSA9IDEwMDAsIC8vIGhvdyBmcmVxdWVudGx5IHdlIGNoZWNrIGZvciBjbG9jayBza2V3XG4gICAgdGFza0hlYWQsXG4gICAgdGFza1RhaWwsXG4gICAgY2xvY2tMYXN0ID0gMCxcbiAgICBjbG9ja05vdyA9IDAsXG4gICAgY2xvY2tTa2V3ID0gMCxcbiAgICBjbG9jayA9IHR5cGVvZiBwZXJmb3JtYW5jZSA9PT0gXCJvYmplY3RcIiAmJiBwZXJmb3JtYW5jZS5ub3cgPyBwZXJmb3JtYW5jZSA6IERhdGUsXG4gICAgc2V0RnJhbWUgPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KSA6IGZ1bmN0aW9uKGYpIHsgc2V0VGltZW91dChmLCAxNyk7IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBjbG9ja05vdyB8fCAoc2V0RnJhbWUoY2xlYXJOb3cpLCBjbG9ja05vdyA9IGNsb2NrLm5vdygpICsgY2xvY2tTa2V3KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJOb3coKSB7XG4gIGNsb2NrTm93ID0gMDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFRpbWVyKCkge1xuICB0aGlzLl9jYWxsID1cbiAgdGhpcy5fdGltZSA9XG4gIHRoaXMuX25leHQgPSBudWxsO1xufVxuXG5UaW1lci5wcm90b3R5cGUgPSB0aW1lci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUaW1lcixcbiAgcmVzdGFydDogZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgdGltZSA9ICh0aW1lID09IG51bGwgPyBub3coKSA6ICt0aW1lKSArIChkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheSk7XG4gICAgaWYgKCF0aGlzLl9uZXh0ICYmIHRhc2tUYWlsICE9PSB0aGlzKSB7XG4gICAgICBpZiAodGFza1RhaWwpIHRhc2tUYWlsLl9uZXh0ID0gdGhpcztcbiAgICAgIGVsc2UgdGFza0hlYWQgPSB0aGlzO1xuICAgICAgdGFza1RhaWwgPSB0aGlzO1xuICAgIH1cbiAgICB0aGlzLl9jYWxsID0gY2FsbGJhY2s7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gICAgc2xlZXAoKTtcbiAgfSxcbiAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2NhbGwpIHtcbiAgICAgIHRoaXMuX2NhbGwgPSBudWxsO1xuICAgICAgdGhpcy5fdGltZSA9IEluZmluaXR5O1xuICAgICAgc2xlZXAoKTtcbiAgICB9XG4gIH1cbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lcihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIHQucmVzdGFydChjYWxsYmFjaywgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyRmx1c2goKSB7XG4gIG5vdygpOyAvLyBHZXQgdGhlIGN1cnJlbnQgdGltZSwgaWYgbm90IGFscmVhZHkgc2V0LlxuICArK2ZyYW1lOyAvLyBQcmV0ZW5kIHdl4oCZdmUgc2V0IGFuIGFsYXJtLCBpZiB3ZSBoYXZlbuKAmXQgYWxyZWFkeS5cbiAgdmFyIHQgPSB0YXNrSGVhZCwgZTtcbiAgd2hpbGUgKHQpIHtcbiAgICBpZiAoKGUgPSBjbG9ja05vdyAtIHQuX3RpbWUpID49IDApIHQuX2NhbGwuY2FsbChudWxsLCBlKTtcbiAgICB0ID0gdC5fbmV4dDtcbiAgfVxuICAtLWZyYW1lO1xufVxuXG5mdW5jdGlvbiB3YWtlKCkge1xuICBjbG9ja05vdyA9IChjbG9ja0xhc3QgPSBjbG9jay5ub3coKSkgKyBjbG9ja1NrZXc7XG4gIGZyYW1lID0gdGltZW91dCA9IDA7XG4gIHRyeSB7XG4gICAgdGltZXJGbHVzaCgpO1xuICB9IGZpbmFsbHkge1xuICAgIGZyYW1lID0gMDtcbiAgICBuYXAoKTtcbiAgICBjbG9ja05vdyA9IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9rZSgpIHtcbiAgdmFyIG5vdyA9IGNsb2NrLm5vdygpLCBkZWxheSA9IG5vdyAtIGNsb2NrTGFzdDtcbiAgaWYgKGRlbGF5ID4gcG9rZURlbGF5KSBjbG9ja1NrZXcgLT0gZGVsYXksIGNsb2NrTGFzdCA9IG5vdztcbn1cblxuZnVuY3Rpb24gbmFwKCkge1xuICB2YXIgdDAsIHQxID0gdGFza0hlYWQsIHQyLCB0aW1lID0gSW5maW5pdHk7XG4gIHdoaWxlICh0MSkge1xuICAgIGlmICh0MS5fY2FsbCkge1xuICAgICAgaWYgKHRpbWUgPiB0MS5fdGltZSkgdGltZSA9IHQxLl90aW1lO1xuICAgICAgdDAgPSB0MSwgdDEgPSB0MS5fbmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgdDIgPSB0MS5fbmV4dCwgdDEuX25leHQgPSBudWxsO1xuICAgICAgdDEgPSB0MCA/IHQwLl9uZXh0ID0gdDIgOiB0YXNrSGVhZCA9IHQyO1xuICAgIH1cbiAgfVxuICB0YXNrVGFpbCA9IHQwO1xuICBzbGVlcCh0aW1lKTtcbn1cblxuZnVuY3Rpb24gc2xlZXAodGltZSkge1xuICBpZiAoZnJhbWUpIHJldHVybjsgLy8gU29vbmVzdCBhbGFybSBhbHJlYWR5IHNldCwgb3Igd2lsbCBiZS5cbiAgaWYgKHRpbWVvdXQpIHRpbWVvdXQgPSBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gIHZhciBkZWxheSA9IHRpbWUgLSBjbG9ja05vdzsgLy8gU3RyaWN0bHkgbGVzcyB0aGFuIGlmIHdlIHJlY29tcHV0ZWQgY2xvY2tOb3cuXG4gIGlmIChkZWxheSA+IDI0KSB7XG4gICAgaWYgKHRpbWUgPCBJbmZpbml0eSkgdGltZW91dCA9IHNldFRpbWVvdXQod2FrZSwgdGltZSAtIGNsb2NrLm5vdygpIC0gY2xvY2tTa2V3KTtcbiAgICBpZiAoaW50ZXJ2YWwpIGludGVydmFsID0gY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnRlcnZhbCkgY2xvY2tMYXN0ID0gY2xvY2subm93KCksIGludGVydmFsID0gc2V0SW50ZXJ2YWwocG9rZSwgcG9rZURlbGF5KTtcbiAgICBmcmFtZSA9IDEsIHNldEZyYW1lKHdha2UpO1xuICB9XG59XG4iLCJpbXBvcnQge1RpbWVyfSBmcm9tIFwiLi90aW1lclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgdmFyIHQgPSBuZXcgVGltZXI7XG4gIGRlbGF5ID0gZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXk7XG4gIHQucmVzdGFydChmdW5jdGlvbihlbGFwc2VkKSB7XG4gICAgdC5zdG9wKCk7XG4gICAgY2FsbGJhY2soZWxhcHNlZCArIGRlbGF5KTtcbiAgfSwgZGVsYXksIHRpbWUpO1xuICByZXR1cm4gdDtcbn1cbiIsImltcG9ydCB7ZGlzcGF0Y2h9IGZyb20gXCJkMy1kaXNwYXRjaFwiO1xuaW1wb3J0IHt0aW1lciwgdGltZW91dH0gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBlbXB0eU9uID0gZGlzcGF0Y2goXCJzdGFydFwiLCBcImVuZFwiLCBcImNhbmNlbFwiLCBcImludGVycnVwdFwiKTtcbnZhciBlbXB0eVR3ZWVuID0gW107XG5cbmV4cG9ydCB2YXIgQ1JFQVRFRCA9IDA7XG5leHBvcnQgdmFyIFNDSEVEVUxFRCA9IDE7XG5leHBvcnQgdmFyIFNUQVJUSU5HID0gMjtcbmV4cG9ydCB2YXIgU1RBUlRFRCA9IDM7XG5leHBvcnQgdmFyIFJVTk5JTkcgPSA0O1xuZXhwb3J0IHZhciBFTkRJTkcgPSA1O1xuZXhwb3J0IHZhciBFTkRFRCA9IDY7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUsIGlkLCBpbmRleCwgZ3JvdXAsIHRpbWluZykge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGVzKSBub2RlLl9fdHJhbnNpdGlvbiA9IHt9O1xuICBlbHNlIGlmIChpZCBpbiBzY2hlZHVsZXMpIHJldHVybjtcbiAgY3JlYXRlKG5vZGUsIGlkLCB7XG4gICAgbmFtZTogbmFtZSxcbiAgICBpbmRleDogaW5kZXgsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBncm91cDogZ3JvdXAsIC8vIEZvciBjb250ZXh0IGR1cmluZyBjYWxsYmFjay5cbiAgICBvbjogZW1wdHlPbixcbiAgICB0d2VlbjogZW1wdHlUd2VlbixcbiAgICB0aW1lOiB0aW1pbmcudGltZSxcbiAgICBkZWxheTogdGltaW5nLmRlbGF5LFxuICAgIGR1cmF0aW9uOiB0aW1pbmcuZHVyYXRpb24sXG4gICAgZWFzZTogdGltaW5nLmVhc2UsXG4gICAgdGltZXI6IG51bGwsXG4gICAgc3RhdGU6IENSRUFURURcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IENSRUFURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHNjaGVkdWxlZFwiKTtcbiAgcmV0dXJuIHNjaGVkdWxlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0KG5vZGUsIGlkKSB7XG4gIHZhciBzY2hlZHVsZSA9IGdldChub2RlLCBpZCk7XG4gIGlmIChzY2hlZHVsZS5zdGF0ZSA+IFNUQVJURUQpIHRocm93IG5ldyBFcnJvcihcInRvbyBsYXRlOyBhbHJlYWR5IHJ1bm5pbmdcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgaWYgKCFzY2hlZHVsZSB8fCAhKHNjaGVkdWxlID0gc2NoZWR1bGVbaWRdKSkgdGhyb3cgbmV3IEVycm9yKFwidHJhbnNpdGlvbiBub3QgZm91bmRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlKG5vZGUsIGlkLCBzZWxmKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHR3ZWVuO1xuXG4gIC8vIEluaXRpYWxpemUgdGhlIHNlbGYgdGltZXIgd2hlbiB0aGUgdHJhbnNpdGlvbiBpcyBjcmVhdGVkLlxuICAvLyBOb3RlIHRoZSBhY3R1YWwgZGVsYXkgaXMgbm90IGtub3duIHVudGlsIHRoZSBmaXJzdCBjYWxsYmFjayFcbiAgc2NoZWR1bGVzW2lkXSA9IHNlbGY7XG4gIHNlbGYudGltZXIgPSB0aW1lcihzY2hlZHVsZSwgMCwgc2VsZi50aW1lKTtcblxuICBmdW5jdGlvbiBzY2hlZHVsZShlbGFwc2VkKSB7XG4gICAgc2VsZi5zdGF0ZSA9IFNDSEVEVUxFRDtcbiAgICBzZWxmLnRpbWVyLnJlc3RhcnQoc3RhcnQsIHNlbGYuZGVsYXksIHNlbGYudGltZSk7XG5cbiAgICAvLyBJZiB0aGUgZWxhcHNlZCBkZWxheSBpcyBsZXNzIHRoYW4gb3VyIGZpcnN0IHNsZWVwLCBzdGFydCBpbW1lZGlhdGVseS5cbiAgICBpZiAoc2VsZi5kZWxheSA8PSBlbGFwc2VkKSBzdGFydChlbGFwc2VkIC0gc2VsZi5kZWxheSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydChlbGFwc2VkKSB7XG4gICAgdmFyIGksIGosIG4sIG87XG5cbiAgICAvLyBJZiB0aGUgc3RhdGUgaXMgbm90IFNDSEVEVUxFRCwgdGhlbiB3ZSBwcmV2aW91c2x5IGVycm9yZWQgb24gc3RhcnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgIT09IFNDSEVEVUxFRCkgcmV0dXJuIHN0b3AoKTtcblxuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIG8gPSBzY2hlZHVsZXNbaV07XG4gICAgICBpZiAoby5uYW1lICE9PSBzZWxmLm5hbWUpIGNvbnRpbnVlO1xuXG4gICAgICAvLyBXaGlsZSB0aGlzIGVsZW1lbnQgYWxyZWFkeSBoYXMgYSBzdGFydGluZyB0cmFuc2l0aW9uIGR1cmluZyB0aGlzIGZyYW1lLFxuICAgICAgLy8gZGVmZXIgc3RhcnRpbmcgYW4gaW50ZXJydXB0aW5nIHRyYW5zaXRpb24gdW50aWwgdGhhdCB0cmFuc2l0aW9uIGhhcyBhXG4gICAgICAvLyBjaGFuY2UgdG8gdGljayAoYW5kIHBvc3NpYmx5IGVuZCk7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzU0IVxuICAgICAgaWYgKG8uc3RhdGUgPT09IFNUQVJURUQpIHJldHVybiB0aW1lb3V0KHN0YXJ0KTtcblxuICAgICAgLy8gSW50ZXJydXB0IHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgaWYgYW55LlxuICAgICAgaWYgKG8uc3RhdGUgPT09IFJVTk5JTkcpIHtcbiAgICAgICAgby5zdGF0ZSA9IEVOREVEO1xuICAgICAgICBvLnRpbWVyLnN0b3AoKTtcbiAgICAgICAgby5vbi5jYWxsKFwiaW50ZXJydXB0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIG8uaW5kZXgsIG8uZ3JvdXApO1xuICAgICAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICAgICAgfVxuXG4gICAgICAvLyBDYW5jZWwgYW55IHByZS1lbXB0ZWQgdHJhbnNpdGlvbnMuXG4gICAgICBlbHNlIGlmICgraSA8IGlkKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBEZWZlciB0aGUgZmlyc3QgdGljayB0byBlbmQgb2YgdGhlIGN1cnJlbnQgZnJhbWU7IHNlZSBkMy9kMyMxNTc2LlxuICAgIC8vIE5vdGUgdGhlIHRyYW5zaXRpb24gbWF5IGJlIGNhbmNlbGVkIGFmdGVyIHN0YXJ0IGFuZCBiZWZvcmUgdGhlIGZpcnN0IHRpY2shXG4gICAgLy8gTm90ZSB0aGlzIG11c3QgYmUgc2NoZWR1bGVkIGJlZm9yZSB0aGUgc3RhcnQgZXZlbnQ7IHNlZSBkMy9kMy10cmFuc2l0aW9uIzE2IVxuICAgIC8vIEFzc3VtaW5nIHRoaXMgaXMgc3VjY2Vzc2Z1bCwgc3Vic2VxdWVudCBjYWxsYmFja3MgZ28gc3RyYWlnaHQgdG8gdGljay5cbiAgICB0aW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNlbGYuc3RhdGUgPT09IFNUQVJURUQpIHtcbiAgICAgICAgc2VsZi5zdGF0ZSA9IFJVTk5JTkc7XG4gICAgICAgIHNlbGYudGltZXIucmVzdGFydCh0aWNrLCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuICAgICAgICB0aWNrKGVsYXBzZWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIHN0YXJ0IGV2ZW50LlxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIHRoZSB0d2VlbiBhcmUgaW5pdGlhbGl6ZWQuXG4gICAgc2VsZi5zdGF0ZSA9IFNUQVJUSU5HO1xuICAgIHNlbGYub24uY2FsbChcInN0YXJ0XCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTVEFSVElORykgcmV0dXJuOyAvLyBpbnRlcnJ1cHRlZFxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVEVEO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgdHdlZW4sIGRlbGV0aW5nIG51bGwgdHdlZW4uXG4gICAgdHdlZW4gPSBuZXcgQXJyYXkobiA9IHNlbGYudHdlZW4ubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBqID0gLTE7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChvID0gc2VsZi50d2VlbltpXS52YWx1ZS5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApKSB7XG4gICAgICAgIHR3ZWVuWysral0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICB0d2Vlbi5sZW5ndGggPSBqICsgMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRpY2soZWxhcHNlZCkge1xuICAgIHZhciB0ID0gZWxhcHNlZCA8IHNlbGYuZHVyYXRpb24gPyBzZWxmLmVhc2UuY2FsbChudWxsLCBlbGFwc2VkIC8gc2VsZi5kdXJhdGlvbikgOiAoc2VsZi50aW1lci5yZXN0YXJ0KHN0b3ApLCBzZWxmLnN0YXRlID0gRU5ESU5HLCAxKSxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gdHdlZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICAgIHR3ZWVuW2ldLmNhbGwobm9kZSwgdCk7XG4gICAgfVxuXG4gICAgLy8gRGlzcGF0Y2ggdGhlIGVuZCBldmVudC5cbiAgICBpZiAoc2VsZi5zdGF0ZSA9PT0gRU5ESU5HKSB7XG4gICAgICBzZWxmLm9uLmNhbGwoXCJlbmRcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2VsZi5pbmRleCwgc2VsZi5ncm91cCk7XG4gICAgICBzdG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBzZWxmLnN0YXRlID0gRU5ERUQ7XG4gICAgc2VsZi50aW1lci5zdG9wKCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpZF07XG4gICAgZm9yICh2YXIgaSBpbiBzY2hlZHVsZXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xuICAgIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbiAgfVxufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gdHdlZW5SZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgdHdlZW4gPSBzY2hlZHVsZS50d2VlbjtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgdHdlZW4gd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgdHdlZW4gYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKHR3ZWVuICE9PSB0d2VlbjApIHtcbiAgICAgIHR3ZWVuMSA9IHR3ZWVuMCA9IHR3ZWVuO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2VlbjEubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICh0d2VlbjFbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHR3ZWVuMSA9IHR3ZWVuMS5zbGljZSgpO1xuICAgICAgICAgIHR3ZWVuMS5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzY2hlZHVsZS50d2VlbiA9IHR3ZWVuMTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdHdlZW5GdW5jdGlvbihpZCwgbmFtZSwgdmFsdWUpIHtcbiAgdmFyIHR3ZWVuMCwgdHdlZW4xO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSAodHdlZW4wID0gdHdlZW4pLnNsaWNlKCk7XG4gICAgICBmb3IgKHZhciB0ID0ge25hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZX0sIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjFbaV0gPSB0O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaSA9PT0gbikgdHdlZW4xLnB1c2godCk7XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIG5hbWUgKz0gXCJcIjtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgdHdlZW4gPSBnZXQodGhpcy5ub2RlKCksIGlkKS50d2VlbjtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IHR3ZWVuLmxlbmd0aCwgdDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKCh0ID0gdHdlZW5baV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbCA/IHR3ZWVuUmVtb3ZlIDogdHdlZW5GdW5jdGlvbikoaWQsIG5hbWUsIHZhbHVlKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0d2VlblZhbHVlKHRyYW5zaXRpb24sIG5hbWUsIHZhbHVlKSB7XG4gIHZhciBpZCA9IHRyYW5zaXRpb24uX2lkO1xuXG4gIHRyYW5zaXRpb24uZWFjaChmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpO1xuICAgIChzY2hlZHVsZS52YWx1ZSB8fCAoc2NoZWR1bGUudmFsdWUgPSB7fSkpW25hbWVdID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfSk7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gZ2V0KG5vZGUsIGlkKS52YWx1ZVtuYW1lXTtcbiAgfTtcbn1cbiIsImltcG9ydCB7Y29sb3J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IHtpbnRlcnBvbGF0ZU51bWJlciwgaW50ZXJwb2xhdGVSZ2IsIGludGVycG9sYXRlU3RyaW5nfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgYztcbiAgcmV0dXJuICh0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/IGludGVycG9sYXRlTnVtYmVyXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IGludGVycG9sYXRlUmdiXG4gICAgICA6IChjID0gY29sb3IoYikpID8gKGIgPSBjLCBpbnRlcnBvbGF0ZVJnYilcbiAgICAgIDogaW50ZXJwb2xhdGVTdHJpbmcpKGEsIGIpO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlRnVuY3Rpb24oaWQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gICAgZm9yICh2YXIgaSBpbiB0aGlzLl9fdHJhbnNpdGlvbikgaWYgKCtpICE9PSBpZCkgcmV0dXJuO1xuICAgIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLm9uKFwiZW5kLnJlbW92ZVwiLCByZW1vdmVGdW5jdGlvbih0aGlzLl9pZCkpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxudmFyIFNlbGVjdGlvbiA9IHNlbGVjdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFNlbGVjdGlvbih0aGlzLl9ncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyBhcyBpbnRlcnBvbGF0ZVRyYW5zZm9ybX0gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5pbXBvcnQge3N0eWxlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBzdHlsZU51bGwobmFtZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICBzdHJpbmcxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgc3RyaW5nMTAgPSBzdHJpbmcxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpLFxuICAgICAgICB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSxcbiAgICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCI7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSBzdHJpbmcxID0gdmFsdWUxID0gKHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSksIHN0eWxlKHRoaXMsIG5hbWUpKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlTWF5YmVSZW1vdmUoaWQsIG5hbWUpIHtcbiAgdmFyIG9uMCwgb24xLCBsaXN0ZW5lcjAsIGtleSA9IFwic3R5bGUuXCIgKyBuYW1lLCBldmVudCA9IFwiZW5kLlwiICsga2V5LCByZW1vdmU7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uLFxuICAgICAgICBsaXN0ZW5lciA9IHNjaGVkdWxlLnZhbHVlW2tleV0gPT0gbnVsbCA/IHJlbW92ZSB8fCAocmVtb3ZlID0gc3R5bGVSZW1vdmUobmFtZSkpIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wIHx8IGxpc3RlbmVyMCAhPT0gbGlzdGVuZXIpIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24oZXZlbnQsIGxpc3RlbmVyMCA9IGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGkgPSAobmFtZSArPSBcIlwiKSA9PT0gXCJ0cmFuc2Zvcm1cIiA/IGludGVycG9sYXRlVHJhbnNmb3JtIDogaW50ZXJwb2xhdGU7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVOdWxsKG5hbWUsIGkpKVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgc3R5bGVSZW1vdmUobmFtZSkpXG4gICAgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlRnVuY3Rpb24obmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcInN0eWxlLlwiICsgbmFtZSwgdmFsdWUpKSlcbiAgICAgIC5lYWNoKHN0eWxlTWF5YmVSZW1vdmUodGhpcy5faWQsIG5hbWUpKVxuICAgIDogdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVDb25zdGFudChuYW1lLCBpLCB2YWx1ZSksIHByaW9yaXR5KVxuICAgICAgLm9uKFwiZW5kLnN0eWxlLlwiICsgbmFtZSwgbnVsbCk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0ciBmcm9tIFwiLi9hdHRyXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyVHdlZW4gZnJvbSBcIi4vYXR0clR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kZWxheSBmcm9tIFwiLi9kZWxheVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZHVyYXRpb24gZnJvbSBcIi4vZHVyYXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2Vhc2UgZnJvbSBcIi4vZWFzZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHRcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmRcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVuZDogdHJhbnNpdGlvbl9lbmRcbn07XG4iLCJpbXBvcnQge3NlbGVjdG9yfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgICBzY2hlZHVsZShzdWJncm91cFtpXSwgbmFtZSwgaWQsIGksIHN1Ymdyb3VwLCBnZXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge3NlbGVjdG9yQWxsfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUsIHtnZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdCkge1xuICB2YXIgbmFtZSA9IHRoaXMuX25hbWUsXG4gICAgICBpZCA9IHRoaXMuX2lkO1xuXG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgZm9yICh2YXIgY2hpbGRyZW4gPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCksIGNoaWxkLCBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkKSwgayA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGsgPCBsOyArK2spIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPSBjaGlsZHJlbltrXSkge1xuICAgICAgICAgICAgc2NoZWR1bGUoY2hpbGQsIG5hbWUsIGlkLCBrLCBjaGlsZHJlbiwgaW5oZXJpdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKGNoaWxkcmVuKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHBhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImltcG9ydCB7bWF0Y2hlcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0cmFuc2l0aW9uKSB7XG4gIGlmICh0cmFuc2l0aW9uLl9pZCAhPT0gdGhpcy5faWQpIHRocm93IG5ldyBFcnJvcjtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gdHJhbnNpdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24obWVyZ2VzLCB0aGlzLl9wYXJlbnRzLCB0aGlzLl9uYW1lLCB0aGlzLl9pZCk7XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQwID0gdGhpcy5faWQsXG4gICAgICBpZDEgPSBuZXdJZCgpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHZhciBpbmhlcml0ID0gZ2V0KG5vZGUsIGlkMCk7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkMSwgaSwgZ3JvdXAsIHtcbiAgICAgICAgICB0aW1lOiBpbmhlcml0LnRpbWUgKyBpbmhlcml0LmRlbGF5ICsgaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBkZWxheTogMCxcbiAgICAgICAgICBkdXJhdGlvbjogaW5oZXJpdC5kdXJhdGlvbixcbiAgICAgICAgICBlYXNlOiBpbmhlcml0LmVhc2VcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQxKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHN0YXJ0KG5hbWUpIHtcbiAgcmV0dXJuIChuYW1lICsgXCJcIikudHJpbSgpLnNwbGl0KC9efFxccysvKS5ldmVyeShmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiAhdCB8fCB0ID09PSBcInN0YXJ0XCI7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvbkZ1bmN0aW9uKGlkLCBuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgb24wLCBvbjEsIHNpdCA9IHN0YXJ0KG5hbWUpID8gaW5pdCA6IHNldDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNpdCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjApIChvbjEgPSAob24wID0gb24pLmNvcHkoKSkub24obmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGxpc3RlbmVyKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMlxuICAgICAgPyBnZXQodGhpcy5ub2RlKCksIGlkKS5vbi5vbihuYW1lKVxuICAgICAgOiB0aGlzLmVhY2gob25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW5cIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZVwiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkodCkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGVOUyhmdWxsbmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5mdW5jdGlvbiBhdHRyVHdlZW4obmFtZSwgdmFsdWUpIHtcbiAgdmFyIHQwLCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdDAgPSAoaTAgPSBpKSAmJiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSk7XG4gICAgcmV0dXJuIHQwO1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBrZXkgPSBcImF0dHIuXCIgKyBuYW1lO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCAoZnVsbG5hbWUubG9jYWwgPyBhdHRyVHdlZW5OUyA6IGF0dHJUd2VlbikoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJmdW5jdGlvbiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCBpKHQpLCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciB0LCBpMDtcbiAgZnVuY3Rpb24gdHdlZW4oKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmIChpICE9PSBpMCkgdCA9IChpMCA9IGkpICYmIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpO1xuICAgIHJldHVybiB0O1xuICB9XG4gIHR3ZWVuLl92YWx1ZSA9IHZhbHVlO1xuICByZXR1cm4gdHdlZW47XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIga2V5ID0gXCJzdHlsZS5cIiArIChuYW1lICs9IFwiXCIpO1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHJldHVybiAoa2V5ID0gdGhpcy50d2VlbihrZXkpKSAmJiBrZXkuX3ZhbHVlO1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCBudWxsKTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgc3R5bGVUd2VlbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBvbjAsIG9uMSwgdGhhdCA9IHRoaXMsIGlkID0gdGhhdC5faWQsIHNpemUgPSB0aGF0LnNpemUoKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBjYW5jZWwgPSB7dmFsdWU6IHJlamVjdH0sXG4gICAgICAgIGVuZCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7IGlmICgtLXNpemUgPT09IDApIHJlc29sdmUoKTsgfX07XG5cbiAgICB0aGF0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICAgIG9uID0gc2NoZWR1bGUub247XG5cbiAgICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgICBpZiAob24gIT09IG9uMCkge1xuICAgICAgICBvbjEgPSAob24wID0gb24pLmNvcHkoKTtcbiAgICAgICAgb24xLl8uY2FuY2VsLnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uaW50ZXJydXB0LnB1c2goY2FuY2VsKTtcbiAgICAgICAgb24xLl8uZW5kLnB1c2goZW5kKTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGUub24gPSBvbjE7XG4gICAgfSk7XG4gIH0pO1xufVxuIiwidmFyIGV4cG9uZW50ID0gMztcblxuZXhwb3J0IHZhciBwb2x5SW4gPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KHQsIGUpO1xuICB9XG5cbiAgcG9seUluLmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5SW47XG59KShleHBvbmVudCk7XG5cbmV4cG9ydCB2YXIgcG9seU91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seU91dCh0KSB7XG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygxIC0gdCwgZSk7XG4gIH1cblxuICBwb2x5T3V0LmV4cG9uZW50ID0gY3VzdG9tO1xuXG4gIHJldHVybiBwb2x5T3V0O1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlJbk91dCA9IChmdW5jdGlvbiBjdXN0b20oZSkge1xuICBlID0gK2U7XG5cbiAgZnVuY3Rpb24gcG9seUluT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyBNYXRoLnBvdyh0LCBlKSA6IDIgLSBNYXRoLnBvdygyIC0gdCwgZSkpIC8gMjtcbiAgfVxuXG4gIHBvbHlJbk91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluT3V0O1xufSkoZXhwb25lbnQpO1xuIiwidmFyIHBpID0gTWF0aC5QSSxcbiAgICBoYWxmUGkgPSBwaSAvIDI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbih0KSB7XG4gIHJldHVybiAxIC0gTWF0aC5jb3ModCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5PdXQodCkge1xuICByZXR1cm4gTWF0aC5zaW4odCAqIGhhbGZQaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaW5Jbk91dCh0KSB7XG4gIHJldHVybiAoMSAtIE1hdGguY29zKHBpICogdCkpIC8gMjtcbn1cbiIsInZhciBvdmVyc2hvb3QgPSAxLjcwMTU4O1xuXG5leHBvcnQgdmFyIGJhY2tJbiA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcbiAgfVxuXG4gIGJhY2tJbi5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbjtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja091dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG4gIH1cblxuICBiYWNrT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja091dDtcbn0pKG92ZXJzaG9vdCk7XG5cbmV4cG9ydCB2YXIgYmFja0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShzKSB7XG4gIHMgPSArcztcblxuICBmdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIHJldHVybiAoKHQgKj0gMikgPCAxID8gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKSA6ICh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMikgLyAyO1xuICB9XG5cbiAgYmFja0luT3V0Lm92ZXJzaG9vdCA9IGN1c3RvbTtcblxuICByZXR1cm4gYmFja0luT3V0O1xufSkob3ZlcnNob290KTtcbiIsInZhciB0YXUgPSAyICogTWF0aC5QSSxcbiAgICBhbXBsaXR1ZGUgPSAxLFxuICAgIHBlcmlvZCA9IDAuMztcblxuZXhwb3J0IHZhciBlbGFzdGljSW4gPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gYSAqIE1hdGgucG93KDIsIDEwICogLS10KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNJbi5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbi5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbjtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAxIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqICh0ID0gK3QpKSAqIE1hdGguc2luKCh0ICsgcykgLyBwKTtcbiAgfVxuXG4gIGVsYXN0aWNPdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljT3V0LnBlcmlvZCA9IGZ1bmN0aW9uKHApIHsgcmV0dXJuIGN1c3RvbShhLCBwKTsgfTtcblxuICByZXR1cm4gZWxhc3RpY091dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcblxuZXhwb3J0IHZhciBlbGFzdGljSW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGEsIHApIHtcbiAgdmFyIHMgPSBNYXRoLmFzaW4oMSAvIChhID0gTWF0aC5tYXgoMSwgYSkpKSAqIChwIC89IHRhdSk7XG5cbiAgZnVuY3Rpb24gZWxhc3RpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ID0gdCAqIDIgLSAxKSA8IDBcbiAgICAgICAgPyBhICogTWF0aC5wb3coMiwgMTAgKiB0KSAqIE1hdGguc2luKChzIC0gdCkgLyBwKVxuICAgICAgICA6IDIgLSBhICogTWF0aC5wb3coMiwgLTEwICogdCkgKiBNYXRoLnNpbigocyArIHQpIC8gcCkpIC8gMjtcbiAgfVxuXG4gIGVsYXN0aWNJbk91dC5hbXBsaXR1ZGUgPSBmdW5jdGlvbihhKSB7IHJldHVybiBjdXN0b20oYSwgcCAqIHRhdSk7IH07XG4gIGVsYXN0aWNJbk91dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNJbk91dDtcbn0pKGFtcGxpdHVkZSwgcGVyaW9kKTtcbiIsImltcG9ydCB7VHJhbnNpdGlvbiwgbmV3SWR9IGZyb20gXCIuLi90cmFuc2l0aW9uL2luZGV4XCI7XG5pbXBvcnQgc2NoZWR1bGUgZnJvbSBcIi4uL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcbmltcG9ydCB7ZWFzZUN1YmljSW5PdXR9IGZyb20gXCJkMy1lYXNlXCI7XG5pbXBvcnQge25vd30gZnJvbSBcImQzLXRpbWVyXCI7XG5cbnZhciBkZWZhdWx0VGltaW5nID0ge1xuICB0aW1lOiBudWxsLCAvLyBTZXQgb24gdXNlLlxuICBkZWxheTogMCxcbiAgZHVyYXRpb246IDI1MCxcbiAgZWFzZTogZWFzZUN1YmljSW5PdXRcbn07XG5cbmZ1bmN0aW9uIGluaGVyaXQobm9kZSwgaWQpIHtcbiAgdmFyIHRpbWluZztcbiAgd2hpbGUgKCEodGltaW5nID0gbm9kZS5fX3RyYW5zaXRpb24pIHx8ICEodGltaW5nID0gdGltaW5nW2lkXSkpIHtcbiAgICBpZiAoIShub2RlID0gbm9kZS5wYXJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRUaW1pbmcudGltZSA9IG5vdygpLCBkZWZhdWx0VGltaW5nO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGltaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBpZCxcbiAgICAgIHRpbWluZztcblxuICBpZiAobmFtZSBpbnN0YW5jZW9mIFRyYW5zaXRpb24pIHtcbiAgICBpZCA9IG5hbWUuX2lkLCBuYW1lID0gbmFtZS5fbmFtZTtcbiAgfSBlbHNlIHtcbiAgICBpZCA9IG5ld0lkKCksICh0aW1pbmcgPSBkZWZhdWx0VGltaW5nKS50aW1lID0gbm93KCksIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZCwgaSwgZ3JvdXAsIHRpbWluZyB8fCBpbmhlcml0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKGdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW4odCkge1xuICByZXR1cm4gdCAqIHQgKiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICByZXR1cm4gLS10ICogdCAqIHQgKyAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3ViaWNJbk91dCh0KSB7XG4gIHJldHVybiAoKHQgKj0gMikgPD0gMSA/IHQgKiB0ICogdCA6ICh0IC09IDIpICogdCAqIHQgKyAyKSAvIDI7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9pbnRlcnJ1cHQgZnJvbSBcIi4vaW50ZXJydXB0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvblwiO1xuXG5zZWxlY3Rpb24ucHJvdG90eXBlLmludGVycnVwdCA9IHNlbGVjdGlvbl9pbnRlcnJ1cHQ7XG5zZWxlY3Rpb24ucHJvdG90eXBlLnRyYW5zaXRpb24gPSBzZWxlY3Rpb25fdHJhbnNpdGlvbjtcbiIsImltcG9ydCBpbnRlcnJ1cHQgZnJvbSBcIi4uL2ludGVycnVwdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgaW50ZXJydXB0KHRoaXMsIG5hbWUpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7U1RBUlRJTkcsIEVORElORywgRU5ERUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obm9kZSwgbmFtZSkge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICBzY2hlZHVsZSxcbiAgICAgIGFjdGl2ZSxcbiAgICAgIGVtcHR5ID0gdHJ1ZSxcbiAgICAgIGk7XG5cbiAgaWYgKCFzY2hlZHVsZXMpIHJldHVybjtcblxuICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuXG4gIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5uYW1lICE9PSBuYW1lKSB7IGVtcHR5ID0gZmFsc2U7IGNvbnRpbnVlOyB9XG4gICAgYWN0aXZlID0gc2NoZWR1bGUuc3RhdGUgPiBTVEFSVElORyAmJiBzY2hlZHVsZS5zdGF0ZSA8IEVORElORztcbiAgICBzY2hlZHVsZS5zdGF0ZSA9IEVOREVEO1xuICAgIHNjaGVkdWxlLnRpbWVyLnN0b3AoKTtcbiAgICBzY2hlZHVsZS5vbi5jYWxsKGFjdGl2ZSA/IFwiaW50ZXJydXB0XCIgOiBcImNhbmNlbFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzY2hlZHVsZS5pbmRleCwgc2NoZWR1bGUuZ3JvdXApO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gIH1cblxuICBpZiAoZW1wdHkpIGRlbGV0ZSBub2RlLl9fdHJhbnNpdGlvbjtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vdHJhbnNpdGlvbi9pbmRleFwiO1xuaW1wb3J0IHtTQ0hFRFVMRUR9IGZyb20gXCIuL3RyYW5zaXRpb24vc2NoZWR1bGVcIjtcblxudmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBpO1xuXG4gIGlmIChzY2hlZHVsZXMpIHtcbiAgICBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICAgIGZvciAoaSBpbiBzY2hlZHVsZXMpIHtcbiAgICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLnN0YXRlID4gU0NIRURVTEVEICYmIHNjaGVkdWxlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKFtbbm9kZV1dLCByb290LCBuYW1lLCAraSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4iLCJpbXBvcnQgeyBwYXRoIGFzIGQzUGF0aCB9IGZyb20gJ2QzLXBhdGgnXG5pbXBvcnQgeyBzY2FsZUxpbmVhciB9IGZyb20gJ2QzLXNjYWxlJ1xuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tICdkMy1zZWxlY3Rpb24nXG5pbXBvcnQgeyBMaWdodGVuRGFya2VuQ29sb3IgfSBmcm9tICcuL2hlbHBlcnMnXG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnXG5cbmNvbnN0IGNoYXJ0ID0gZHJhd0NoYXJ0KClcblxubGV0IGVsXG5cbmZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgY29uc3Qgc3ogPSBNYXRoLm1pbihlbC5ub2RlKCkub2Zmc2V0V2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodClcbiAgY2hhcnQud2lkdGgoc3opLmhlaWdodChzeiAvIDMpXG4gIGVsLmNhbGwoY2hhcnQpXG59XG5cbmZ1bmN0aW9uIGRyYXdDaGFydCgpIHtcbiAgY29uc3QgbWFyZ2luID0geyB0b3A6IDEwLCByaWdodDogMTAsIGJvdHRvbTogMTAsIGxlZnQ6IDEwIH1cbiAgY29uc3QgZGVmYXVsdENvb3JkcyA9IHtcbiAgICBvcmJpdDoge1xuICAgICAgeDoge1xuICAgICAgICBtaW46IC0xLFxuICAgICAgICBtYXg6IDFcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIG1pbjogLTAuMzA5LFxuICAgICAgICBtYXg6IDAuMzA5XG4gICAgICB9XG4gICAgfSxcbiAgICBlYXJ0aDoge1xuICAgICAgeDoge1xuICAgICAgICBtaW46IC0wLjE1MSxcbiAgICAgICAgbWF4OiAwLjE1MVxuICAgICAgfSxcbiAgICAgIHk6IHtcbiAgICAgICAgbWluOiAtMC4xNTEsXG4gICAgICAgIG1heDogMC4xNTFcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgY29sb3JzID0ge1xuICAgIENoaW5hOiAnI2Q2NmU0MicsXG4gICAgUnVzc2lhOiAnIzE5NmM5NScsXG4gICAgVVM6ICcjZjliYzY1JyxcbiAgICBPdGhlcjogJyNiNWJkYzEnXG4gIH1cblxuICBsZXQgd2lkdGggPSAwXG4gIGxldCBoZWlnaHQgPSAwXG5cbiAgbGV0IHNjYWxlWCA9IHNjYWxlTGluZWFyKCkuZG9tYWluKFtcbiAgICBkZWZhdWx0Q29vcmRzLm9yYml0LngubWluLFxuICAgIGRlZmF1bHRDb29yZHMub3JiaXQueC5tYXhcbiAgXSlcbiAgbGV0IHNjYWxlWSA9IHNjYWxlTGluZWFyKCkuZG9tYWluKFtcbiAgICBkZWZhdWx0Q29vcmRzLm9yYml0LnkubWluLFxuICAgIGRlZmF1bHRDb29yZHMub3JiaXQueS5tYXhcbiAgXSlcblxuICBmdW5jdGlvbiBlbnRlcih7IGNvbnRhaW5lciwgZGF0YSB9KSB7XG4gICAgY29uc3Qgc3ZnID0gY29udGFpbmVyLnNlbGVjdEFsbCgnc3ZnJykuZGF0YShbZGF0YV0pXG4gICAgY29uc3Qgc3ZnRW50ZXIgPSBzdmcuZW50ZXIoKS5hcHBlbmQoJ3N2ZycpXG4gICAgY29uc3QgZ0VudGVyID0gc3ZnRW50ZXIuYXBwZW5kKCdnJylcbiAgICBnRW50ZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnZy1vcmJpdCcpXG4gICAgZ0VudGVyLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2ctZWFydGgnKVxuICAgIGdFbnRlci5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdnLXBsb3QnKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2NhbGVzKHsgZGF0YSB9KSB7XG4gICAgc2NhbGVYLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgc2NhbGVZLnJhbmdlKFtoZWlnaHQsIDBdKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRG9tKHsgY29udGFpbmVyLCBkYXRhIH0pIHtcbiAgICBsZXQgc3ZnID0gY29udGFpbmVyXG4gICAgICAuc2VsZWN0KCdzdmcnKVxuICAgICAgLmF0dHIoXG4gICAgICAgICd2aWV3Qm94JyxcbiAgICAgICAgJzAgMCAnICtcbiAgICAgICAgICAod2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCkgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgKGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgKVxuXG4gICAgbGV0IGcgPSBzdmdcbiAgICAgIC5zZWxlY3QoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hcmdpbi5sZWZ0ICsgJywnICsgbWFyZ2luLnRvcCArICcpJylcblxuICAgIC8vIEVhcnRoXG4gICAgbGV0IGVhcnRoID0gZy5zZWxlY3QoJy5nLWVhcnRoJylcblxuICAgIGlmIChlYXJ0aC5zZWxlY3QoJyonKS5lbXB0eSgpKSB7XG4gICAgICBjb25zdCBlYXJ0aFJhZGl1cyA9IE1hdGguYWJzKFxuICAgICAgICBzY2FsZVkoZGVmYXVsdENvb3Jkcy5lYXJ0aC55Lm1heCkgLSBzY2FsZVkoMClcbiAgICAgIClcbiAgICAgIGVhcnRoXG4gICAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAgIC5hdHRyKCdjeCcsIHNjYWxlWCgwKSlcbiAgICAgICAgLmF0dHIoJ2N5Jywgc2NhbGVZKDApKVxuICAgICAgICAuYXR0cigncicsIGVhcnRoUmFkaXVzKVxuICAgICAgICAuYXR0cignZmlsbCcsICdsaWdodGdyYXknKVxuXG4gICAgICBlYXJ0aFxuICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3gnLCBzY2FsZVgoZGVmYXVsdENvb3Jkcy5lYXJ0aC54Lm1pbikpXG4gICAgICAgIC5hdHRyKCdjeScsIHNjYWxlWSgwKSlcbiAgICAgICAgLmF0dHIoJ3InLCAxKVxuICAgICAgICAuYXR0cignZmlsbCcsICdyZWQnKVxuXG4gICAgICBlYXJ0aFxuICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3gnLCBzY2FsZVgoZGVmYXVsdENvb3Jkcy5lYXJ0aC54Lm1heCkpXG4gICAgICAgIC5hdHRyKCdjeScsIHNjYWxlWSgwKSlcbiAgICAgICAgLmF0dHIoJ3InLCAxKVxuICAgICAgICAuYXR0cignZmlsbCcsICdyZWQnKVxuXG4gICAgICBlYXJ0aFxuICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3knLCBzY2FsZVkoZGVmYXVsdENvb3Jkcy5lYXJ0aC55Lm1pbikpXG4gICAgICAgIC5hdHRyKCdjeCcsIHNjYWxlWCgwKSlcbiAgICAgICAgLmF0dHIoJ3InLCAxKVxuICAgICAgICAuYXR0cignZmlsbCcsICdyZWQnKVxuXG4gICAgICBlYXJ0aFxuICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAuYXR0cignY3knLCBzY2FsZVkoZGVmYXVsdENvb3Jkcy5lYXJ0aC55Lm1heCkpXG4gICAgICAgIC5hdHRyKCdjeCcsIHNjYWxlWCgwKSlcbiAgICAgICAgLmF0dHIoJ3InLCAxKVxuICAgICAgICAuYXR0cignZmlsbCcsICdyZWQnKVxuICAgIH1cblxuICAgIC8vIE9yYml0XG4gICAgbGV0IG9yYml0ID0gZy5zZWxlY3QoJy5nLW9yYml0JylcbiAgICBpZiAob3JiaXQuc2VsZWN0KCcqJykuZW1wdHkoKSkge1xuICAgICAgY29uc3Qgb3JiaXRSYWRpdXNYID0gTWF0aC5hYnMoXG4gICAgICAgIHNjYWxlWChkZWZhdWx0Q29vcmRzLm9yYml0LngubWF4KSAtIHNjYWxlWCgwKVxuICAgICAgKVxuXG4gICAgICBjb25zdCBvcmJpdFJhZGl1c1kgPSBNYXRoLmFicyhcbiAgICAgICAgc2NhbGVZKGRlZmF1bHRDb29yZHMub3JiaXQueS5tYXgpIC0gc2NhbGVZKDApXG4gICAgICApXG5cbiAgICAgIC8vIGVhcnRoXG4gICAgICAvLyAgIC5hcHBlbmQoJ2VsbGlwc2UnKVxuICAgICAgLy8gICAuYXR0cignY2xhc3MnLCAnb3JiaXQnKVxuICAgICAgLy8gICAuYXR0cignY3gnLCBzY2FsZVgoMCkpXG4gICAgICAvLyAgIC5hdHRyKCdjeScsIHNjYWxlWSgwKSlcbiAgICAgIC8vICAgLmF0dHIoJ3J4Jywgb3JiaXRSYWRpdXNYKVxuICAgICAgLy8gICAuYXR0cigncnknLCBvcmJpdFJhZGl1c1kpXG4gICAgICAvLyAgIC5hdHRyKCdzdHJva2UnLCAnIzAwMCcpXG4gICAgICAvLyAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuXG4gICAgICBlYXJ0aFxuICAgICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgICAgLmF0dHIoXG4gICAgICAgICAgJ2QnLFxuICAgICAgICAgIGRyYXdFbGxpcHNlKHtcbiAgICAgICAgICAgIGN4OiBzY2FsZVgoMCksXG4gICAgICAgICAgICBjeTogc2NhbGVZKDApLFxuICAgICAgICAgICAgcng6IG9yYml0UmFkaXVzWCxcbiAgICAgICAgICAgIHJ5OiBvcmJpdFJhZGl1c1lcbiAgICAgICAgICB9KVxuICAgICAgICApXG4gICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJyMwMDAnKVxuICAgIH1cblxuICAgIGxldCBwbG90ID0gZy5zZWxlY3QoJy5nLXBsb3QnKVxuXG4gICAgbGV0IHNhdGVsbGl0ZXMgPSBwbG90LnNlbGVjdEFsbCgnLnNhdGVsbGl0ZScpLmRhdGEoZGF0YSwgZCA9PiBkLnNhdF9uYW1lKVxuXG4gICAgc2F0ZWxsaXRlcy5qb2luKFxuICAgICAgZW50ZXIgPT5cbiAgICAgICAgZW50ZXJcbiAgICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdzYXRlbGxpdGUnKVxuICAgICAgICAgIC5hdHRyKCdyJywgNSlcbiAgICAgICAgICAuYXR0cignZmlsbCcsIGQgPT4gY29sb3JzW2QuY291bnRyeV0pXG4gICAgICAgICAgLmF0dHIoJ3N0cm9rZScsIGQgPT4gTGlnaHRlbkRhcmtlbkNvbG9yKGNvbG9yc1tkLmNvdW50cnldLCAtMjApKVxuICAgICAgICAgIC5hdHRyKCdmaWxsLW9wYWNpdHknLCAwLjgpXG4gICAgICAgICAgLmF0dHIoJ2N4JywgZCA9PiBzY2FsZVgoZC54X2Nvb3JkKSlcbiAgICAgICAgICAuYXR0cignY3knLCBkID0+IHNjYWxlWShkLnlfY29vcmQpKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXgnLCBkID0+IGQueF9jb29yZClcbiAgICAgICAgICAuYXR0cignZGF0YS15JywgZCA9PiBkLnlfY29vcmQpXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBpbnRlcmFjdGlvbnMubW91c2VvdmVyKVxuICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIGludGVyYWN0aW9ucy5tb3VzZWxlYXZlKSxcbiAgICAgIHVwZGF0ZSA9PlxuICAgICAgICB1cGRhdGVcbiAgICAgICAgICAuYXR0cignY3gnLCBkID0+IHNjYWxlWChkLnhfY29vcmQpKVxuICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4gc2NhbGVZKGQueV9jb29yZCkpXG4gICAgICAgICAgLmF0dHIoJ2RhdGEteCcsIGQgPT4gZC54X2Nvb3JkKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXknLCBkID0+IGQueV9jb29yZClcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBjaGFydChjb250YWluZXIpIHtcbiAgICBjb25zdCBkYXRhID0gY29udGFpbmVyLmRhdHVtKClcblxuICAgIGVudGVyKHsgY29udGFpbmVyLCBkYXRhIH0pXG4gICAgdXBkYXRlU2NhbGVzKHsgZGF0YSB9KVxuICAgIHVwZGF0ZURvbSh7IGNvbnRhaW5lciwgZGF0YSB9KVxuICB9XG5cbiAgY29uc3QgaW50ZXJhY3Rpb25zID0ge1xuICAgIG1vdXNlb3ZlcihkKSB7XG4gICAgICBpbnRlcmFjdGlvbnMuc2hvd1Rvb2x0aXAoZClcbiAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpcy1hY3RpdmUnLCB0cnVlKVxuICAgIH0sXG4gICAgbW91c2VsZWF2ZSgpIHtcbiAgICAgIHRvb2x0aXAuaGlkZSgpXG4gICAgICBzZWxlY3QodGhpcykuY2xhc3NlZCgnaXMtYWN0aXZlJywgZmFsc2UpXG4gICAgfSxcbiAgICBzaG93VG9vbHRpcChkKSB7XG4gICAgICBsZXQgdG9vbHRpcEJvZHkgPSBbXG4gICAgICAgIHsgT3BlcmF0b3I6IGQuc2F0X29wZXJhdG9yIH0sXG4gICAgICAgIHsgRGF0ZTogZC50aW1lc3RhbXAgfSxcbiAgICAgICAgeyBMb25naXR1ZGU6IGQubG9uZ19zdHJpbmcgfVxuICAgICAgXVxuXG4gICAgICBsZXQgdG9vbHRpcENvbnRlbnQgPSBgXG4gICAgICA8cCBjbGFzcz1cInRvb2x0aXAtaGVhZGluZ1wiPlxuICAgICAgICAke2Quc2F0X25hbWV9PC9wPlxuICAgICAgJHt0b29sdGlwLmZvcm1hdENvbnRlbnQodG9vbHRpcEJvZHksIHRydWUpfWBcbiAgICAgIHRvb2x0aXAuc2hvdyh0b29sdGlwQ29udGVudClcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkcmF3RWxsaXBzZSh7IGN4LCBjeSwgcngsIHJ5IH0pIHtcbiAgICBjeCA9IHBhcnNlRmxvYXQoY3gsIDEwKVxuICAgIGN5ID0gcGFyc2VGbG9hdChjeSwgMTApXG4gICAgcnggPSBwYXJzZUZsb2F0KHJ4LCAxMClcbiAgICByeSA9IHBhcnNlRmxvYXQocnksIDEwKVxuXG4gICAgY29uc3Qgb3V0cHV0MiA9IGBcbiAgICAgICAgTSR7Y3ggLSByeH0sICR7Y3l9XG4gICAgICAgIGEke3J4fSwgJHtyeX0gMCAxLCAwICR7cnggKiAyfSwgMFxuICAgICAgICBhJHtyeH0sICR7cnl9IDAgMSwgMCAke3J4ICogLTJ9LCAwXG4gICAgICAgIGBcbiAgICByZXR1cm4gb3V0cHV0MlxuICB9XG5cbiAgY2hhcnQud2lkdGggPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgaWYgKCFhcmdzLmxlbmd0aCkgcmV0dXJuIHdpZHRoXG4gICAgd2lkdGggPSBhcmdzWzBdIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHRcbiAgICByZXR1cm4gY2hhcnRcbiAgfVxuXG4gIGNoYXJ0LmhlaWdodCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSByZXR1cm4gaGVpZ2h0XG4gICAgaGVpZ2h0ID0gYXJnc1swXSAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tXG5cbiAgICByZXR1cm4gY2hhcnRcbiAgfVxuXG4gIHJldHVybiBjaGFydFxufVxuXG5mdW5jdGlvbiBpbml0KGFyZ3MpIHtcbiAgZWwgPSBzZWxlY3QoYXJncy5jb250YWluZXIpXG4gIGVsLmRhdHVtKGFyZ3MuZGF0YSlcbiAgcmVzaXplKGFyZ3MpXG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgaW5pdCB9XG4iLCJpbXBvcnQgeyBzZWxlY3QsIGV2ZW50IH0gZnJvbSAnZDMtc2VsZWN0aW9uJ1xuaW1wb3J0IHsgdHJhbnNpdGlvbiwgZHVyYXRpb24sIG9uIH0gZnJvbSAnZDMtdHJhbnNpdGlvbidcbmNvbnN0IHRvb2x0aXBFbCA9IHNlbGVjdCgnLnRvb2x0aXAnKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNob3c6IGZ1bmN0aW9uKGNvbnRlbnQpIHtcbiAgICBsZXQgeVBvcyA9IGV2ZW50LnBhZ2VZIC0gMTEwXG4gICAgbGV0IHhQb3MgPSBldmVudC5wYWdlWFxuICAgIGlmICh4UG9zICsgMTAgPiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoIC0gMTAwKSB7XG4gICAgICB4UG9zID0gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCArIDUgLSAxNTBcbiAgICB9XG5cbiAgICB0b29sdGlwRWxcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyMDApXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwLjkpXG4gICAgICAub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICB0b29sdGlwRWwuY2xhc3NlZCgnaXNBY3RpdmUnLCB0cnVlKVxuICAgICAgICB0b29sdGlwRWwuc2VsZWN0KCcudG9vbHRpcC1jbG9zZScpLm9uKCdjbGljaycsIHRoaXMuaGlkZSlcbiAgICAgIH0pXG4gICAgdG9vbHRpcEVsXG4gICAgICAuaHRtbChjb250ZW50KVxuICAgICAgLnN0eWxlKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKVxuICAgICAgLnN0eWxlKCdsZWZ0JywgeFBvcyArICdweCcpXG4gICAgICAuc3R5bGUoJ3RvcCcsIHlQb3MgKyAncHgnKVxuICB9LFxuICBoaWRlOiBmdW5jdGlvbigpIHtcbiAgICB0b29sdGlwRWxcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbig1MDApXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAwKVxuICB9LFxuICBmb3JtYXRDb250ZW50OiBmdW5jdGlvbihjb21wb25lbnQsIGlzTGlzdCA9IGZhbHNlKSB7XG4gICAgbGV0IGNvbnRlbnQgPSAnJ1xuICAgIGlmIChpc0xpc3QpIHtcbiAgICAgIGNvbnRlbnQgPSAnPHVsIGNsYXNzPVwidG9vbHRpcC1saXN0XCI+J1xuICAgIH1cbiAgICBjb21wb25lbnQuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgbGV0IGNzc0NsYXNzID0gbnVsbFxuICAgICAgaWYgKGl0ZW0uY2xhc3MpIHtcbiAgICAgICAgY3NzQ2xhc3MgPSBpdGVtLmNsYXNzXG4gICAgICB9XG4gICAgICBsZXQgcHJlZml4ID0gJydcbiAgICAgIGxldCBzdWZmaXggPSAnPGJyIC8+J1xuICAgICAgaWYgKGlzTGlzdCkge1xuICAgICAgICBwcmVmaXggPSBgPGxpIGNsYXNzPVwiJHtjc3NDbGFzc31cIj5gXG4gICAgICAgIHN1ZmZpeCA9ICc8L2xpPidcbiAgICAgIH1cblxuICAgICAgbGV0IGxhYmVsID0gT2JqZWN0LmtleXMoaXRlbSlbMF1cbiAgICAgIGNvbnRlbnQgKz0gYCR7cHJlZml4fTxzcGFuIGNsYXNzPVwidG9vbHRpcC1sYWJlbFwiPiR7bGFiZWx9Ojwvc3Bhbj4gJHtcbiAgICAgICAgaXRlbVtsYWJlbF1cbiAgICAgIH0ke3N1ZmZpeH1gXG4gICAgfSlcbiAgICBpZiAoaXNMaXN0KSB7XG4gICAgICBjb250ZW50ICs9ICc8L3VsPidcbiAgICB9XG4gICAgcmV0dXJuIGNvbnRlbnRcbiAgfVxufVxuXG4vLyBleHBvcnQgZGVmYXVsdCB7IHRvb2x0aXAgfVxuIiwiLyoqIExpZ2h0ZW4gb3IgZGFya2VuIGNvbG9yIHZhbHVlXG4gKiBUYWtlbiBmcm9tIENTUy1Ucmlja3M6IGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vc25pcHBldHMvamF2YXNjcmlwdC9saWdodGVuLWRhcmtlbi1jb2xvci9cbiAqL1xuXG5mdW5jdGlvbiBMaWdodGVuRGFya2VuQ29sb3IoY29sLCBhbXQpIHtcbiAgbGV0IHVzZVBvdW5kID0gZmFsc2VcblxuICBpZiAoY29sWzBdID09ICcjJykge1xuICAgIGNvbCA9IGNvbC5zbGljZSgxKVxuICAgIHVzZVBvdW5kID0gdHJ1ZVxuICB9XG5cbiAgbGV0IG51bSA9IHBhcnNlSW50KGNvbCwgMTYpXG5cbiAgbGV0IHIgPSAobnVtID4+IDE2KSArIGFtdFxuXG4gIGlmIChyID4gMjU1KSByID0gMjU1XG4gIGVsc2UgaWYgKHIgPCAwKSByID0gMFxuXG4gIGxldCBiID0gKChudW0gPj4gOCkgJiAweDAwZmYpICsgYW10XG5cbiAgaWYgKGIgPiAyNTUpIGIgPSAyNTVcbiAgZWxzZSBpZiAoYiA8IDApIGIgPSAwXG5cbiAgbGV0IGcgPSAobnVtICYgMHgwMDAwZmYpICsgYW10XG5cbiAgaWYgKGcgPiAyNTUpIGcgPSAyNTVcbiAgZWxzZSBpZiAoZyA8IDApIGcgPSAwXG5cbiAgcmV0dXJuICh1c2VQb3VuZCA/ICcjJyA6ICcnKSArIChnIHwgKGIgPDwgOCkgfCAociA8PCAxNikpLnRvU3RyaW5nKDE2KVxufVxuXG5leHBvcnQgeyBMaWdodGVuRGFya2VuQ29sb3IgfVxuIiwiaW1wb3J0ICogYXMgbm9VaVNsaWRlciBmcm9tICdub3Vpc2xpZGVyJ1xuXG5jb25zdCB0aW1lbGluZSA9IHtcbiAgZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS1iYXInKSxcbiAgYnRuQ29udHJvbHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS1idG4nKSxcbiAgY3VycmVudERhdGVFbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLWN1cnJlbnQtZGF0ZScpLFxuICBjdXJyZW50TGF1bmNoZXNFbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLW51bS1sYXVuY2hlcycpLFxuICBwbGF5aW5nOiBmYWxzZSxcbiAgdGltZXI6IG51bGwsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogMCxcbiAgZW5kRGF0ZTogMCxcbiAgc3RhcnREYXRlOiAwLFxuICB1cGRhdGVDdXJyZW50RGF0ZShkYXRlKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKGRhdGUpXG4gICAgdGhpcy5jdXJyZW50RGF0ZUVsLmlubmVySFRNTCA9IGAke2RhdGUuZ2V0TW9udGgoKSArXG4gICAgICAxfS8ke2RhdGUuZ2V0RGF0ZSgpfS8ke2RhdGUuZ2V0RnVsbFllYXIoKX1gXG4gIH0sXG4gIGdldEN1cnJlbnREYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVsLm5vVWlTbGlkZXIuZ2V0KClcbiAgfSxcbiAgc2V0dXBUaW1lbGluZSh7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgY3VycmVudERhdGUsIG9uQ2hhbmdlIH0pIHtcbiAgICB0aGlzLmVuZERhdGUgPSBlbmREYXRlXG4gICAgdGhpcy5zdGFydERhdGUgPSBzdGFydERhdGVcblxuICAgIG5vVWlTbGlkZXIuY3JlYXRlKHRoaXMuZWwsIHtcbiAgICAgIHN0YXJ0OiBbc3RhcnREYXRlXSxcbiAgICAgIGNvbm5lY3Q6IHRydWUsXG4gICAgICBiZWhhdmlvdXI6ICd0YXAtZHJhZycsXG4gICAgICBzdGVwOiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgbWluOiBzdGFydERhdGUsXG4gICAgICAgIG1heDogZW5kRGF0ZVxuICAgICAgfSxcbiAgICAgIGZvcm1hdDoge1xuICAgICAgICBmcm9tOiB2ID0+IHBhcnNlSW50KHYpLFxuICAgICAgICB0bzogdiA9PiBwYXJzZUludCh2KVxuICAgICAgfVxuICAgICAgLy8gcGlwczoge1xuICAgICAgLy8gICBtb2RlOiAncmFuZ2UnLFxuICAgICAgLy8gICBkZW5zaXR5OiAxMFxuICAgICAgLy8gfVxuICAgIH0pXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIuc2V0KHN0YXJ0RGF0ZSlcblxuICAgIHRoaXMuc2V0dXBCdG5Db250cm9scygpXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIG9uQ2hhbmdlKVxuICB9LFxuICBzZXR1cEJ0bkNvbnRyb2xzKCkge1xuICAgIHRoaXMuYnRuQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjdXJyZW50RGF0ZSA9IHRpbWVsaW5lLmdldEN1cnJlbnREYXRlKClcbiAgICAgIGlmIChjdXJyZW50RGF0ZSA9PSB0aW1lbGluZS5lbmREYXRlKSB7XG4gICAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KHRpbWVsaW5lLnN0YXJ0RGF0ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWVsaW5lLnBsYXlpbmcgPT0gdHJ1ZSkge1xuICAgICAgICB0aW1lbGluZS5zdG9wVGltZWxpbmUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgICAgY3VycmVudERhdGUgPSB0aW1lbGluZS5nZXRDdXJyZW50RGF0ZSgpXG4gICAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KGN1cnJlbnREYXRlICsgMjQgKiA2MCAqIDYwICogMTAwMClcbiAgICAgIH0sIHRpbWVsaW5lLnRyYW5zaXRpb25EdXJhdGlvbilcblxuICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKCdwbGF5LWJ0bicpXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ3BhdXNlLWJ0bicpXG5cbiAgICAgIHRpbWVsaW5lLnBsYXlpbmcgPSB0cnVlXG4gICAgfSlcbiAgfSxcbiAgc3RvcFRpbWVsaW5lKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGltZWxpbmUudGltZXIpXG4gICAgdGltZWxpbmUucGxheWluZyA9IGZhbHNlXG4gICAgdGltZWxpbmUuYnRuQ29udHJvbHMuY2xhc3NMaXN0LnJlbW92ZSgncGF1c2UtYnRuJylcbiAgICB0aW1lbGluZS5idG5Db250cm9scy5jbGFzc0xpc3QuYWRkKCdwbGF5LWJ0bicpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdGltZWxpbmVcbiIsImZ1bmN0aW9uIHJlc3BvbnNlQXJyYXlCdWZmZXIocmVzcG9uc2UpIHtcbiAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLnN0YXR1cyArIFwiIFwiICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCk7XG4gIHJldHVybiByZXNwb25zZS5hcnJheUJ1ZmZlcigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VBcnJheUJ1ZmZlcik7XG59XG4iLCJ2YXIgRU9MID0ge30sXG4gICAgRU9GID0ge30sXG4gICAgUVVPVEUgPSAzNCxcbiAgICBORVdMSU5FID0gMTAsXG4gICAgUkVUVVJOID0gMTM7XG5cbmZ1bmN0aW9uIG9iamVjdENvbnZlcnRlcihjb2x1bW5zKSB7XG4gIHJldHVybiBuZXcgRnVuY3Rpb24oXCJkXCIsIFwicmV0dXJuIHtcIiArIGNvbHVtbnMubWFwKGZ1bmN0aW9uKG5hbWUsIGkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobmFtZSkgKyBcIjogZFtcIiArIGkgKyBcIl1cIjtcbiAgfSkuam9pbihcIixcIikgKyBcIn1cIik7XG59XG5cbmZ1bmN0aW9uIGN1c3RvbUNvbnZlcnRlcihjb2x1bW5zLCBmKSB7XG4gIHZhciBvYmplY3QgPSBvYmplY3RDb252ZXJ0ZXIoY29sdW1ucyk7XG4gIHJldHVybiBmdW5jdGlvbihyb3csIGkpIHtcbiAgICByZXR1cm4gZihvYmplY3Qocm93KSwgaSwgY29sdW1ucyk7XG4gIH07XG59XG5cbi8vIENvbXB1dGUgdW5pcXVlIGNvbHVtbnMgaW4gb3JkZXIgb2YgZGlzY292ZXJ5LlxuZnVuY3Rpb24gaW5mZXJDb2x1bW5zKHJvd3MpIHtcbiAgdmFyIGNvbHVtblNldCA9IE9iamVjdC5jcmVhdGUobnVsbCksXG4gICAgICBjb2x1bW5zID0gW107XG5cbiAgcm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIGZvciAodmFyIGNvbHVtbiBpbiByb3cpIHtcbiAgICAgIGlmICghKGNvbHVtbiBpbiBjb2x1bW5TZXQpKSB7XG4gICAgICAgIGNvbHVtbnMucHVzaChjb2x1bW5TZXRbY29sdW1uXSA9IGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29sdW1ucztcbn1cblxuZnVuY3Rpb24gcGFkKHZhbHVlLCB3aWR0aCkge1xuICB2YXIgcyA9IHZhbHVlICsgXCJcIiwgbGVuZ3RoID0gcy5sZW5ndGg7XG4gIHJldHVybiBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oMCkgKyBzIDogcztcbn1cblxuZnVuY3Rpb24gZm9ybWF0WWVhcih5ZWFyKSB7XG4gIHJldHVybiB5ZWFyIDwgMCA/IFwiLVwiICsgcGFkKC15ZWFyLCA2KVxuICAgIDogeWVhciA+IDk5OTkgPyBcIitcIiArIHBhZCh5ZWFyLCA2KVxuICAgIDogcGFkKHllYXIsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXREYXRlKGRhdGUpIHtcbiAgdmFyIGhvdXJzID0gZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgbWludXRlcyA9IGRhdGUuZ2V0VVRDTWludXRlcygpLFxuICAgICAgc2Vjb25kcyA9IGRhdGUuZ2V0VVRDU2Vjb25kcygpLFxuICAgICAgbWlsbGlzZWNvbmRzID0gZGF0ZS5nZXRVVENNaWxsaXNlY29uZHMoKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gXCJJbnZhbGlkIERhdGVcIlxuICAgICAgOiBmb3JtYXRZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSwgNCkgKyBcIi1cIiArIHBhZChkYXRlLmdldFVUQ01vbnRoKCkgKyAxLCAyKSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDRGF0ZSgpLCAyKVxuICAgICAgKyAobWlsbGlzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiLlwiICsgcGFkKG1pbGxpc2Vjb25kcywgMykgKyBcIlpcIlxuICAgICAgOiBzZWNvbmRzID8gXCJUXCIgKyBwYWQoaG91cnMsIDIpICsgXCI6XCIgKyBwYWQobWludXRlcywgMikgKyBcIjpcIiArIHBhZChzZWNvbmRzLCAyKSArIFwiWlwiXG4gICAgICA6IG1pbnV0ZXMgfHwgaG91cnMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiWlwiXG4gICAgICA6IFwiXCIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihkZWxpbWl0ZXIpIHtcbiAgdmFyIHJlRm9ybWF0ID0gbmV3IFJlZ0V4cChcIltcXFwiXCIgKyBkZWxpbWl0ZXIgKyBcIlxcblxccl1cIiksXG4gICAgICBERUxJTUlURVIgPSBkZWxpbWl0ZXIuY2hhckNvZGVBdCgwKTtcblxuICBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBmKSB7XG4gICAgdmFyIGNvbnZlcnQsIGNvbHVtbnMsIHJvd3MgPSBwYXJzZVJvd3ModGV4dCwgZnVuY3Rpb24ocm93LCBpKSB7XG4gICAgICBpZiAoY29udmVydCkgcmV0dXJuIGNvbnZlcnQocm93LCBpIC0gMSk7XG4gICAgICBjb2x1bW5zID0gcm93LCBjb252ZXJ0ID0gZiA/IGN1c3RvbUNvbnZlcnRlcihyb3csIGYpIDogb2JqZWN0Q29udmVydGVyKHJvdyk7XG4gICAgfSk7XG4gICAgcm93cy5jb2x1bW5zID0gY29sdW1ucyB8fCBbXTtcbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUm93cyh0ZXh0LCBmKSB7XG4gICAgdmFyIHJvd3MgPSBbXSwgLy8gb3V0cHV0IHJvd3NcbiAgICAgICAgTiA9IHRleHQubGVuZ3RoLFxuICAgICAgICBJID0gMCwgLy8gY3VycmVudCBjaGFyYWN0ZXIgaW5kZXhcbiAgICAgICAgbiA9IDAsIC8vIGN1cnJlbnQgbGluZSBudW1iZXJcbiAgICAgICAgdCwgLy8gY3VycmVudCB0b2tlblxuICAgICAgICBlb2YgPSBOIDw9IDAsIC8vIGN1cnJlbnQgdG9rZW4gZm9sbG93ZWQgYnkgRU9GP1xuICAgICAgICBlb2wgPSBmYWxzZTsgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0w/XG5cbiAgICAvLyBTdHJpcCB0aGUgdHJhaWxpbmcgbmV3bGluZS5cbiAgICBpZiAodGV4dC5jaGFyQ29kZUF0KE4gLSAxKSA9PT0gTkVXTElORSkgLS1OO1xuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBSRVRVUk4pIC0tTjtcblxuICAgIGZ1bmN0aW9uIHRva2VuKCkge1xuICAgICAgaWYgKGVvZikgcmV0dXJuIEVPRjtcbiAgICAgIGlmIChlb2wpIHJldHVybiBlb2wgPSBmYWxzZSwgRU9MO1xuXG4gICAgICAvLyBVbmVzY2FwZSBxdW90ZXMuXG4gICAgICB2YXIgaSwgaiA9IEksIGM7XG4gICAgICBpZiAodGV4dC5jaGFyQ29kZUF0KGopID09PSBRVU9URSkge1xuICAgICAgICB3aGlsZSAoSSsrIDwgTiAmJiB0ZXh0LmNoYXJDb2RlQXQoSSkgIT09IFFVT1RFIHx8IHRleHQuY2hhckNvZGVBdCgrK0kpID09PSBRVU9URSk7XG4gICAgICAgIGlmICgoaSA9IEkpID49IE4pIGVvZiA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKChjID0gdGV4dC5jaGFyQ29kZUF0KEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGogKyAxLCBpIC0gMSkucmVwbGFjZSgvXCJcIi9nLCBcIlxcXCJcIik7XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmQgbmV4dCBkZWxpbWl0ZXIgb3IgbmV3bGluZS5cbiAgICAgIHdoaWxlIChJIDwgTikge1xuICAgICAgICBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoaSA9IEkrKykpID09PSBORVdMSU5FKSBlb2wgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjID09PSBSRVRVUk4pIHsgZW9sID0gdHJ1ZTsgaWYgKHRleHQuY2hhckNvZGVBdChJKSA9PT0gTkVXTElORSkgKytJOyB9XG4gICAgICAgIGVsc2UgaWYgKGMgIT09IERFTElNSVRFUikgY29udGludWU7XG4gICAgICAgIHJldHVybiB0ZXh0LnNsaWNlKGosIGkpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm4gbGFzdCB0b2tlbiBiZWZvcmUgRU9GLlxuICAgICAgcmV0dXJuIGVvZiA9IHRydWUsIHRleHQuc2xpY2UoaiwgTik7XG4gICAgfVxuXG4gICAgd2hpbGUgKCh0ID0gdG9rZW4oKSkgIT09IEVPRikge1xuICAgICAgdmFyIHJvdyA9IFtdO1xuICAgICAgd2hpbGUgKHQgIT09IEVPTCAmJiB0ICE9PSBFT0YpIHJvdy5wdXNoKHQpLCB0ID0gdG9rZW4oKTtcbiAgICAgIGlmIChmICYmIChyb3cgPSBmKHJvdywgbisrKSkgPT0gbnVsbCkgY29udGludWU7XG4gICAgICByb3dzLnB1c2gocm93KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcm93cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykge1xuICAgIHJldHVybiByb3dzLm1hcChmdW5jdGlvbihyb3cpIHtcbiAgICAgIHJldHVybiBjb2x1bW5zLm1hcChmdW5jdGlvbihjb2x1bW4pIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdFZhbHVlKHJvd1tjb2x1bW5dKTtcbiAgICAgIH0pLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdChyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gW2NvbHVtbnMubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcildLmNvbmNhdChwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgaWYgKGNvbHVtbnMgPT0gbnVsbCkgY29sdW1ucyA9IGluZmVyQ29sdW1ucyhyb3dzKTtcbiAgICByZXR1cm4gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93cyhyb3dzKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZvcm1hdFJvdykuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFJvdyhyb3cpIHtcbiAgICByZXR1cm4gcm93Lm1hcChmb3JtYXRWYWx1ZSkuam9pbihkZWxpbWl0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCJcbiAgICAgICAgOiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgPyBmb3JtYXREYXRlKHZhbHVlKVxuICAgICAgICA6IHJlRm9ybWF0LnRlc3QodmFsdWUgKz0gXCJcIikgPyBcIlxcXCJcIiArIHZhbHVlLnJlcGxhY2UoL1wiL2csIFwiXFxcIlxcXCJcIikgKyBcIlxcXCJcIlxuICAgICAgICA6IHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJzZTogcGFyc2UsXG4gICAgcGFyc2VSb3dzOiBwYXJzZVJvd3MsXG4gICAgZm9ybWF0OiBmb3JtYXQsXG4gICAgZm9ybWF0Qm9keTogZm9ybWF0Qm9keSxcbiAgICBmb3JtYXRSb3dzOiBmb3JtYXRSb3dzXG4gIH07XG59XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Qm9keSA9IGNzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2RzdlwiO1xuXG52YXIgdHN2ID0gZHN2KFwiXFx0XCIpO1xuXG5leHBvcnQgdmFyIHRzdlBhcnNlID0gdHN2LnBhcnNlO1xuZXhwb3J0IHZhciB0c3ZQYXJzZVJvd3MgPSB0c3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciB0c3ZGb3JtYXQgPSB0c3YuZm9ybWF0O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRCb2R5ID0gdHN2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvd3MgPSB0c3YuZm9ybWF0Um93cztcbiIsImZ1bmN0aW9uIHJlc3BvbnNlVGV4dChyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlVGV4dCk7XG59XG4iLCJpbXBvcnQge2NzdlBhcnNlLCBkc3ZGb3JtYXQsIHRzdlBhcnNlfSBmcm9tIFwiZDMtZHN2XCI7XG5pbXBvcnQgdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5cbmZ1bmN0aW9uIGRzdlBhcnNlKHBhcnNlKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaW5pdCwgcm93KSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgcmV0dXJuIHBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkc3YoZGVsaW1pdGVyLCBpbnB1dCwgaW5pdCwgcm93KSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAzICYmIHR5cGVvZiBpbml0ID09PSBcImZ1bmN0aW9uXCIpIHJvdyA9IGluaXQsIGluaXQgPSB1bmRlZmluZWQ7XG4gIHZhciBmb3JtYXQgPSBkc3ZGb3JtYXQoZGVsaW1pdGVyKTtcbiAgcmV0dXJuIHRleHQoaW5wdXQsIGluaXQpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICByZXR1cm4gZm9ybWF0LnBhcnNlKHJlc3BvbnNlLCByb3cpO1xuICB9KTtcbn1cblxuZXhwb3J0IHZhciBjc3YgPSBkc3ZQYXJzZShjc3ZQYXJzZSk7XG5leHBvcnQgdmFyIHRzdiA9IGRzdlBhcnNlKHRzdlBhcnNlKTtcbiIsImltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gcGFyc2VyKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0KSAge1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHJldHVybiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHRleHQsIHR5cGUpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZXIoXCJhcHBsaWNhdGlvbi94bWxcIik7XG5cbmV4cG9ydCB2YXIgaHRtbCA9IHBhcnNlcihcInRleHQvaHRtbFwiKTtcblxuZXhwb3J0IHZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuIiwiaW1wb3J0ICogYXMgZDNGZXRjaCBmcm9tICdkMy1mZXRjaCdcblxuY29uc3Qga25vd25Db3VudHJpZXMgPSBbJ1VTJywgJ0NoaW5hJywgJ1J1c3NpYSddXG5cbmFzeW5jIGZ1bmN0aW9uIHBhcnNlRGF0YShzYXRlbGxpdGVVUkwsIHRhcmdldHNVUkwpIHtcbiAgY29uc3Qgc2F0ZWxsaXRlUHJvbWlzZSA9IGQzRmV0Y2guY3N2KHNhdGVsbGl0ZVVSTClcbiAgY29uc3QgdGFyZ2V0c1Byb21pc2UgPSBkM0ZldGNoLmNzdih0YXJnZXRzVVJMKVxuXG4gIGxldCBkYXRhID0gUHJvbWlzZS5hbGwoW3NhdGVsbGl0ZVByb21pc2UsIHRhcmdldHNQcm9taXNlXSkudGhlbihyZXMgPT4ge1xuICAgIGNvbnN0IFtzYXRlbGxpdGVEYXRhLCB0YXJnZXRzRGF0YV0gPSByZXNcblxuICAgIHNhdGVsbGl0ZURhdGEuZm9yRWFjaChkID0+IHtcbiAgICAgIGQuaXNfc2F0ZWxsaXRlID0gdHJ1ZVxuICAgICAgZC5pc190YXJnZXQgPSBmYWxzZVxuICAgIH0pXG5cbiAgICB0YXJnZXRzRGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgZC5pc19zYXRlbGxpdGUgPSBmYWxzZVxuICAgICAgZC5pc190YXJnZXQgPSB0cnVlXG4gICAgfSlcblxuICAgIGNvbnN0IGNvbWJpbmVkRGF0YSA9IFsuLi5zYXRlbGxpdGVEYXRhLCAuLi50YXJnZXRzRGF0YV1cblxuICAgIGNvbWJpbmVkRGF0YS5mb3JFYWNoKGQgPT4ge1xuICAgICAgZC5kYXRlID0gbmV3IERhdGUoZC50aW1lc3RhbXApLmdldFRpbWUoKVxuICAgICAgZC5pbmNsdWRlID0gZC5pbmNsdWRlID09ICdUUlVFJyA/IHRydWUgOiBmYWxzZVxuICAgICAgZC5sb25naXR1ZGUgPSArZC5sb25naXR1ZGVcbiAgICAgIGQueF9jb29yZCA9ICtkLnhfY29vcmRcbiAgICAgIGQueV9jb29yZCA9ICtkLnlfY29vcmRcbiAgICAgIGQuY291bnRyeSA9IGQuc2F0X29wZXJhdG9yXG4gICAgICBkLmxvbmdfc3RyaW5nID0gZC5sb25nX3N0cmluZy5yZXBsYWNlKCfvv70nLCAnJiMxNzY7JylcblxuICAgICAgaWYgKGQuY291bnRyeS5pbmNsdWRlcygnVS5TLicpKSB7XG4gICAgICAgIGQuY291bnRyeSA9ICdVUydcbiAgICAgIH1cblxuICAgICAgaWYgKCFrbm93bkNvdW50cmllcy5pbmNsdWRlcyhkLmNvdW50cnkpKSB7XG4gICAgICAgIGQuY291bnRyeSA9ICdPdGhlcidcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgY29uc3QgdGltZXN0YW1wcyA9IEFycmF5LmZyb20oXG4gICAgICBuZXcgU2V0KFsuLi5jb21iaW5lZERhdGEubWFwKGQgPT4gZC50aW1lc3RhbXApXSlcbiAgICApXG5cbiAgICBjb25zdCBzYXRlbGxpdGVzID0gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQoWy4uLmNvbWJpbmVkRGF0YS5tYXAoZCA9PiBkLnNhdF9uYW1lKV0pXG4gICAgKVxuXG4gICAgbGV0IGRhdGFzZXQgPSBuZXcgTWFwKClcblxuICAgIHRpbWVzdGFtcHMuZm9yRWFjaCgodGltZXN0YW1wLCBpKSA9PiB7XG4gICAgICBsZXQgZW50cmllcyA9IFtdXG4gICAgICBzYXRlbGxpdGVzLmZvckVhY2goc2F0ZWxsaXRlID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gY29tYmluZWREYXRhLmZpbHRlcihcbiAgICAgICAgICBkID0+IGQudGltZXN0YW1wID09PSB0aW1lc3RhbXAgJiYgZC5zYXRfbmFtZSA9PT0gc2F0ZWxsaXRlXG4gICAgICAgIClcblxuICAgICAgICBpZiAocmVzdWx0Lmxlbmd0aCkge1xuICAgICAgICAgIGVudHJpZXMucHVzaChyZXN1bHRbMF0pXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICBkYXRhc2V0LnNldChuZXcgRGF0ZSh0aW1lc3RhbXApLmdldFRpbWUoKSwgZW50cmllcylcbiAgICB9KVxuXG4gICAgY29uc3Qgc29ydGVkRGF0YSA9IG5ldyBNYXAoQXJyYXkuZnJvbShkYXRhc2V0KS5zb3J0KChhLCBiKSA9PiBhWzBdIC0gYlswXSkpXG5cbiAgICByZXR1cm4gc29ydGVkRGF0YVxuICB9KVxuXG4gIC8vIGxldCBkYXRhID0gYXdhaXQgZDNGZXRjaFxuICAvLyAgIC5jc3YodXJsLCBkID0+IHtcbiAgLy8gICAgIGQuZGF0ZSA9IG5ldyBEYXRlKGQudGltZXN0YW1wKS5nZXRUaW1lKClcbiAgLy8gICAgIGQuaW5jbHVkZSA9IGQuaW5jbHVkZSA9PSAnVFJVRScgPyB0cnVlIDogZmFsc2VcbiAgLy8gICAgIGQubG9uZ2l0dWRlID0gK2QubG9uZ2l0dWRlXG4gIC8vICAgICBkLnhfY29vcmQgPSArZC54X2Nvb3JkXG4gIC8vICAgICBkLnlfY29vcmQgPSArZC55X2Nvb3JkXG4gIC8vICAgICByZXR1cm4gZFxuICAvLyAgIH0pXG4gIC8vICAgLnRoZW4oZGF0YSA9PiB7XG4gIC8vICAgICBkYXRhID0gZGF0YS5maWx0ZXIoZCA9PiBkLmluY2x1ZGUpXG5cbiAgLy8gICAgIGNvbnN0IHRpbWVzdGFtcHMgPSBBcnJheS5mcm9tKFxuICAvLyAgICAgICBuZXcgU2V0KFsuLi5kYXRhLm1hcChkID0+IGQudGltZXN0YW1wKV0pXG4gIC8vICAgICApLnNvcnQoKGEsIGIpID0+IGEgLSBiKVxuXG4gIC8vICAgICBjb25zdCBzYXRlbGxpdGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KFsuLi5kYXRhLm1hcChkID0+IGQuc2F0X25hbWUpXSkpXG5cbiAgLy8gICAgIGxldCBkYXRhc2V0ID0gbmV3IE1hcCgpXG4gIC8vICAgICAvLyBsZXQgZGF0YXNldCA9IFtdXG5cbiAgLy8gICAgIHRpbWVzdGFtcHMuZm9yRWFjaCh0aW1lc3RhbXAgPT4ge1xuICAvLyAgICAgICBsZXQgZW50cmllcyA9IFtdXG4gIC8vICAgICAgIHNhdGVsbGl0ZXMuZm9yRWFjaChzYXRlbGxpdGUgPT4ge1xuICAvLyAgICAgICAgIGVudHJpZXMucHVzaChcbiAgLy8gICAgICAgICAgIGRhdGEuZmlsdGVyKFxuICAvLyAgICAgICAgICAgICBkID0+IGQudGltZXN0YW1wID09PSB0aW1lc3RhbXAgJiYgZC5zYXRfbmFtZSA9PT0gc2F0ZWxsaXRlXG4gIC8vICAgICAgICAgICApWzBdXG4gIC8vICAgICAgICAgKVxuICAvLyAgICAgICAgIC8vIGRhdGFzZXQucHVzaChcbiAgLy8gICAgICAgICAvLyAgIGRhdGEuZmlsdGVyKFxuICAvLyAgICAgICAgIC8vICAgICBkID0+XG4gIC8vICAgICAgICAgLy8gICAgICAgZC50aW1lc3RhbXAgPT09IHRpbWVzdGFtcCAmJiBkLnNhdF9uYW1lID09PSBzYXRlbGxpdGVcbiAgLy8gICAgICAgICAvLyAgIClbMF1cbiAgLy8gICAgICAgICAvLyApXG4gIC8vICAgICAgIH0pXG4gIC8vICAgICAgIGRhdGFzZXQuc2V0KG5ldyBEYXRlKHRpbWVzdGFtcCkuZ2V0VGltZSgpLCBlbnRyaWVzKVxuICAvLyAgICAgfSlcbiAgLy8gICAgIHJldHVybiBkYXRhc2V0XG4gIC8vICAgfSlcblxuICByZXR1cm4gZGF0YVxufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZURhdGFcbiIsImltcG9ydCBicmVha3BvaW50cyBmcm9tICcuL2pzL2JyZWFrcG9pbnRzJ1xuaW1wb3J0IENoYXJ0IGZyb20gJy4vanMvY2hhcnQnXG5pbXBvcnQgdGltZWxpbmUgZnJvbSAnLi9qcy90aW1lbGluZSdcbmltcG9ydCBwYXJzZURhdGEgZnJvbSAnLi9qcy9kYXRhJ1xuaW1wb3J0ICdub3Vpc2xpZGVyL2Rpc3RyaWJ1dGUvbm91aXNsaWRlci5taW4uY3NzJ1xuaW1wb3J0ICcuL3Njc3MvbWFpbi5zY3NzJ1xuXG5jb25zdCBzYXRlbGxpdGVGaWxlID0gJy4vZGF0YS8yMDE5MDMxOC1jaGluYS5jc3YnXG5jb25zdCB0YXJnZXRzRmlsZSA9ICcuL2RhdGEvMjAxOTAzMTgtY2hpbmEtdGFyZ2V0cy5jc3YnXG5cbmNvbnN0IHRyYW5zaXRpb25EdXJhdGlvbiA9IDI1XG5cbmxldCBkYXRhXG5sZXQgY3VycmVudERhdGVcbmxldCBzdGFydERhdGVcbmxldCBlbmREYXRlXG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gIGxvYWREYXRhKClcbn1cblxuYXN5bmMgZnVuY3Rpb24gbG9hZERhdGEoKSB7XG4gIGRhdGEgPSBhd2FpdCBwYXJzZURhdGEoc2F0ZWxsaXRlRmlsZSwgdGFyZ2V0c0ZpbGUpXG5cbiAgbGV0IGRhdGVzID0gQXJyYXkuZnJvbShkYXRhLmtleXMoKSlcbiAgc3RhcnREYXRlID0gZGF0ZXNbMF1cbiAgZW5kRGF0ZSA9IGRhdGVzW2RhdGVzLmxlbmd0aCAtIDFdXG4gIGN1cnJlbnREYXRlID0gc3RhcnREYXRlXG5cbiAgc2V0dXBUaW1lbGluZSgpXG4gIGRyYXdDaGFydCgpXG4gIGhpZGVMb2FkaW5nKClcbn1cblxuZnVuY3Rpb24gZHJhd0NoYXJ0KCkge1xuICBjdXJyZW50RGF0ZSA9IHRpbWVsaW5lLmdldEN1cnJlbnREYXRlKClcblxuICBsZXQgZGF0YXNldCA9IGRhdGEuZ2V0KGN1cnJlbnREYXRlKVxuXG4gIENoYXJ0LmluaXQoe1xuICAgIGRhdGE6IGRhdGFzZXQsXG4gICAgY29udGFpbmVyOiAnLmNoYXJ0J1xuICB9KVxufVxuXG5mdW5jdGlvbiBzZXR1cFRpbWVsaW5lKCkge1xuICB0aW1lbGluZS50cmFuc2l0aW9uRHVyYXRpb24gPSB0cmFuc2l0aW9uRHVyYXRpb25cblxuICB0aW1lbGluZS5zZXR1cFRpbWVsaW5lKHtcbiAgICBzdGFydERhdGU6IHN0YXJ0RGF0ZSxcbiAgICBlbmREYXRlOiBlbmREYXRlLFxuICAgIGN1cnJlbnQ6IGN1cnJlbnREYXRlLFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbjogdHJhbnNpdGlvbkR1cmF0aW9uLFxuICAgIG9uQ2hhbmdlOiBmdW5jdGlvbigpIHtcbiAgICAgIGRyYXdDaGFydCgpXG4gICAgICB0aW1lbGluZS51cGRhdGVDdXJyZW50RGF0ZShjdXJyZW50RGF0ZSlcbiAgICAgIGlmIChjdXJyZW50RGF0ZSA9PSBlbmREYXRlKSB7XG4gICAgICAgIHRpbWVsaW5lLnN0b3BUaW1lbGluZSgpXG4gICAgICB9XG4gICAgfVxuICB9KVxufVxuXG4vLyBmdW5jdGlvbiByZXNpemVDaGFydCgpIHtcbi8vICAgbGV0IG5ld0JyZWFrcG9pbnQgPSBicmVha3BvaW50cy5jYWxjdWxhdGUoKVxuXG4vLyAgIGlmIChicmVha3BvaW50ICE9IG5ld0JyZWFrcG9pbnQpIHtcbi8vICAgICBicmVha3BvaW50ID0gbmV3QnJlYWtwb2ludFxuLy8gICAgIGRyYXdDaGFydCgpXG4vLyAgIH1cbi8vIH1cblxuZnVuY3Rpb24gaGlkZUxvYWRpbmcoKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkaW5nLWNvbnRhaW5lcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbCgnLmhpZGUtb24tbG9hZCcpXG4gICAgLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZS1vbi1sb2FkJykpXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdClcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDaGFydClcbiJdLCJzb3VyY2VSb290IjoiIn0=