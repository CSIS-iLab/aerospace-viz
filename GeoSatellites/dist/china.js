!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=121)}([function(t,n,e){var r=e(26)("wks"),i=e(18),o=e(1).Symbol,u="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=r},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){var r=e(1),i=e(11),o=e(9),u=e(8),a=e(10),c=function(t,n,e){var s,l,f,h,p=t&c.F,v=t&c.G,d=t&c.S,g=t&c.P,m=t&c.B,y=v?r:d?r[n]||(r[n]={}):(r[n]||{}).prototype,w=v?i:i[n]||(i[n]={}),x=w.prototype||(w.prototype={});for(s in v&&(e=n),e)f=((l=!p&&y&&void 0!==y[s])?y:e)[s],h=m&&l?a(f,r):g&&"function"==typeof f?a(Function.call,f):f,y&&u(y,s,f,t&c.U),w[s]!=f&&o(w,s,h),g&&x[s]!=f&&(x[s]=f)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(3);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,e){var r=e(4),i=e(52),o=e(34),u=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){t.exports=!e(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),i=e(9),o=e(12),u=e(18)("src"),a=e(83),c=(""+a).split("toString");e(11).inspectSource=function(t){return a.call(t)},(t.exports=function(t,n,e,a){var s="function"==typeof e;s&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(s&&(o(e,u)||i(e,u,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:a?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(t,n,e){var r=e(6),i=e(19);t.exports=e(7)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(21);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(54),i=e(15);t.exports=function(t){return r(i(t))}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(15);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=!1},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports={}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(55),i=e(38);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){var r=e(27),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(6).f,i=e(12),o=e(0)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n,e){"use strict";var r=e(51),i=e(53),o=e(20),u=e(13);t.exports=e(35)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r=e(11),i=e(1),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){"use strict";var r=e(5);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(14),i=e(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(u=r(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,e){"use strict";var r=e(29),i={};i[e(0)("toStringTag")]="z",i+""!="[object z]"&&e(8)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){"use strict";var r=e(2),i=e(39)(0),o=e(28)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){for(var r=e(25),i=e(22),o=e(8),u=e(1),a=e(9),c=e(20),s=e(0),l=s("iterator"),f=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),d=0;d<v.length;d++){var g,m=v[d],y=p[m],w=u[m],x=w&&w.prototype;if(x&&(x[l]||a(x,l,h),x[f]||a(x,f,m),c[m]=h,y))for(g in r)x[g]||o(x,g,r[g],!0)}},function(t,n,e){var r=e(3),i=e(1).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,e){"use strict";var r=e(17),i=e(2),o=e(8),u=e(9),a=e(20),c=e(84),s=e(24),l=e(87),f=e(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,v,d,g,m){c(e,n,v);var y,w,x,b=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},_=n+" Iterator",S="values"==d,M=!1,E=t.prototype,C=E[f]||E["@@iterator"]||d&&E[d],A=C||b(d),N=d?S?b("entries"):A:void 0,T="Array"==n&&E.entries||C;if(T&&(x=l(T.call(new t)))!==Object.prototype&&x.next&&(s(x,_,!0),r||"function"==typeof x[f]||u(x,f,p)),S&&C&&"values"!==C.name&&(M=!0,A=function(){return C.call(this)}),r&&!m||!h&&!M&&E[f]||u(E,f,A),a[n]=A,a[_]=p,d)if(y={values:S?A:b("values"),keys:g?A:b("keys"),entries:N},m)for(w in y)w in E||o(E,w,y[w]);else i(i.P+i.F*(h||M),n,y);return y}},function(t,n,e){var r=e(4),i=e(85),o=e(38),u=e(37)("IE_PROTO"),a=function(){},c=function(){var t,n=e(33)("iframe"),r=o.length;for(n.style.display="none",e(57).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(a.prototype=r(t),e=new a,a.prototype=null,e[u]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(26)("keys"),i=e(18);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(10),i=e(54),o=e(16),u=e(23),a=e(89);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,l=4==t,f=6==t,h=5==t||f,p=n||a;return function(n,a,v){for(var d,g,m=o(n),y=i(m),w=r(a,v,3),x=u(y.length),b=0,_=e?p(n,x):c?p(n,0):void 0;x>b;b++)if((h||b in y)&&(g=w(d=y[b],b,m),t))if(e)_[b]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return b;case 2:_.push(d)}else if(l)return!1;return f?-1:s||l?l:_}}},function(t,n,e){var r=e(14);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(10),i=e(62),o=e(63),u=e(4),a=e(23),c=e(64),s={},l={};(n=t.exports=function(t,n,e,f,h){var p,v,d,g,m=h?function(){return t}:c(t),y=r(e,f,n?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=a(t.length);p>w;w++)if((g=n?y(u(v=t[w])[0],v[1]):y(t[w]))===s||g===l)return g}else for(d=m.call(t);!(v=d.next()).done;)if((g=i(d,y,v.value,n))===s||g===l)return g}).BREAK=s,n.RETURN=l},function(t,n,e){var r=e(8);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){var r=e(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],u=o[r]();u.next=function(){return{done:e=!0}},o[r]=function(){return u},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(68)(!0);e(35)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(10),i=e(2),o=e(16),u=e(62),a=e(63),c=e(23),s=e(97),l=e(64);i(i.S+i.F*!e(44)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,i,f,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,m=0,y=l(h);if(g&&(d=r(d,v>2?arguments[2]:void 0,2)),null==y||p==Array&&a(y))for(e=new p(n=c(h.length));n>m;m++)s(e,m,g?d(h[m],m):h[m]);else for(f=y.call(h),e=new p;!(i=f.next()).done;m++)s(e,m,g?u(f,d,[i.value,m],!0):i.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(4);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(18)("meta"),i=e(3),o=e(12),u=e(6).f,a=0,c=Object.isExtensible||function(){return!0},s=!e(5)(function(){return c(Object.preventExtensions({}))}),l=function(t){u(t,r,{value:{i:"O"+ ++a,w:{}}})},f=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";l(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;l(t)}return t[r].w},onFreeze:function(t){return s&&f.NEED&&c(t)&&!o(t,r)&&l(t),t}}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){var r=e(3);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(0)("unscopables"),i=Array.prototype;null==i[r]&&e(9)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n,e){t.exports=!e(7)&&!e(5)(function(){return 7!=Object.defineProperty(e(33)("div"),"a",{get:function(){return 7}}).a})},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){var r=e(14);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(12),i=e(13),o=e(56)(!1),u=e(37)("IE_PROTO");t.exports=function(t,n){var e,a=i(t),c=0,s=[];for(e in a)e!=u&&r(a,e)&&s.push(e);for(;n.length>c;)r(a,e=n[c++])&&(~o(s,e)||s.push(e));return s}},function(t,n,e){var r=e(13),i=e(23),o=e(86);t.exports=function(t){return function(n,e,u){var a,c=r(n),s=i(c.length),l=o(u,s);if(t&&e!=e){for(;s>l;)if((a=c[l++])!=a)return!0}else for(;s>l;l++)if((t||l in c)&&c[l]===e)return t||l||0;return!t&&-1}}},function(t,n,e){var r=e(1).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(16),i=e(22);e(88)("keys",function(){return function(t){return i(r(t))}})},function(t,n,e){"use strict";var r=e(2),i=e(39)(1);r(r.P+r.F*!e(28)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function c(t,n,e,r){var i=n&&n.prototype instanceof d?n:d,o=Object.create(i.prototype),u=new A(r||[]);return o._invoke=function(t,n,e){var r=l;return function(i,o){if(r===h)throw new Error("Generator is already running");if(r===p){if("throw"===i)throw o;return T()}for(e.method=i,e.arg=o;;){var u=e.delegate;if(u){var a=M(u,e);if(a){if(a===v)continue;return a}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=p,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var c=s(t,n,e);if("normal"===c.type){if(r=e.done?p:f,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=p,e.method="throw",e.arg=c.arg)}}}(t,e,u),o}function s(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var l="suspendedStart",f="suspendedYield",h="executing",p="completed",v={};function d(){}function g(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(N([])));x&&x!==e&&r.call(x,o)&&(y=x);var b=m.prototype=d.prototype=Object.create(y);function _(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function S(t){var n;this._invoke=function(e,i){function o(){return new Promise(function(n,o){!function n(e,i,o,u){var a=s(t[e],t,i);if("throw"!==a.type){var c=a.arg,l=c.value;return l&&"object"==typeof l&&r.call(l,"__await")?Promise.resolve(l.__await).then(function(t){n("next",t,o,u)},function(t){n("throw",t,o,u)}):Promise.resolve(l).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,u)})}u(a.arg)}(e,i,n,o)})}return n=n?n.then(o,o):o()}}function M(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,M(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=s(r,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,v;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function C(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function A(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function N(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,u=function e(){for(;++i<t.length;)if(r.call(t,i))return e.value=t[i],e.done=!1,e;return e.value=n,e.done=!0,e};return u.next=u}}return{next:T}}function T(){return{value:n,done:!0}}return g.prototype=b.constructor=m,m.constructor=g,m[a]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,e,r,i){var o=new S(c(n,e,r,i));return t.isGeneratorFunction(e)?o:o.next().then(function(t){return t.done?t.value:o.next()})},_(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=N,A.prototype={constructor:A,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function i(r,i){return a.type="throw",a.arg=t,e.next=r,i&&(e.method="next",e.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return i("end");if(u.tryLoc<=this.prev){var c=r.call(u,"catchLoc"),s=r.call(u,"finallyLoc");if(c&&s){if(this.prev<u.catchLoc)return i(u.catchLoc,!0);if(this.prev<u.finallyLoc)return i(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return i(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return i(u.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var i=this.tryEntries[e];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),C(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;C(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:N(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){"use strict";var r,i,o,u,a=e(17),c=e(1),s=e(10),l=e(29),f=e(2),h=e(3),p=e(21),v=e(41),d=e(42),g=e(91),m=e(65).set,y=e(93)(),w=e(66),x=e(94),b=e(95),_=e(96),S=c.TypeError,M=c.process,E=M&&M.versions,C=E&&E.v8||"",A=c.Promise,N="process"==l(M),T=function(){},k=i=w.f,P=!!function(){try{var t=A.resolve(1),n=(t.constructor={})[e(0)("species")]=function(t){t(T,T)};return(N||"function"==typeof PromiseRejectionEvent)&&t.then(T)instanceof n&&0!==C.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),O=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},D=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,i=1==t._s,o=0,u=function(n){var e,o,u,a=i?n.ok:n.fail,c=n.resolve,s=n.reject,l=n.domain;try{a?(i||(2==t._h&&L(t),t._h=1),!0===a?e=r:(l&&l.enter(),e=a(r),l&&(l.exit(),u=!0)),e===n.promise?s(S("Promise-chain cycle")):(o=O(e))?o.call(e,c,s):c(e)):s(r)}catch(t){l&&!u&&l.exit(),s(t)}};e.length>o;)u(e[o++]);t._c=[],t._n=!1,n&&!t._h&&U(t)})}},U=function(t){m.call(c,function(){var n,e,r,i=t._v,o=j(t);if(o&&(n=x(function(){N?M.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)}),t._h=N||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(c,function(){var n;N?M.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},F=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),D(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=O(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(R,r,1),s(F,r,1))}catch(t){F.call(r,t)}}):(e._v=t,e._s=1,D(e,!1))}catch(t){F.call({_w:e,_d:!1},t)}}};P||(A=function(t){v(this,A,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(43)(A.prototype,{then:function(t,n){var e=k(g(this,A));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=N?M.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&D(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(F,t,1)},w.f=k=function(t){return t===A||t===u?new o(t):i(t)}),f(f.G+f.W+f.F*!P,{Promise:A}),e(24)(A,"Promise"),e(67)("Promise"),u=e(11).Promise,f(f.S+f.F*!P,"Promise",{reject:function(t){var n=k(this);return(0,n.reject)(t),n.promise}}),f(f.S+f.F*(a||!P),"Promise",{resolve:function(t){return _(a&&this===u?A:this,t)}}),f(f.S+f.F*!(P&&e(44)(function(t){A.all(t).catch(T)})),"Promise",{all:function(t){var n=this,e=k(n),r=e.resolve,i=e.reject,o=x(function(){var e=[],o=0,u=1;d(t,!1,function(t){var a=o++,c=!1;e.push(void 0),u++,n.resolve(t).then(function(t){c||(c=!0,e[a]=t,--u||r(e))},i)}),--u||r(e)});return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=k(n),r=e.reject,i=x(function(){d(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return i.e&&r(i.v),e.promise}})},function(t,n,e){var r=e(4);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(20),i=e(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(29),i=e(0)("iterator"),o=e(20);t.exports=e(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r,i,o,u=e(10),a=e(92),c=e(57),s=e(33),l=e(1),f=l.process,h=l.setImmediate,p=l.clearImmediate,v=l.MessageChannel,d=l.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},w=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){a("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(14)(f)?r=function(t){f.nextTick(u(y,t,1))}:d&&d.now?r=function(t){d.now(u(y,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=w,r=u(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(t){l.postMessage(t+"","*")},l.addEventListener("message",w,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){"use strict";var r=e(21);function i(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(1),i=e(6),o=e(7),u=e(0)("species");t.exports=function(t){var n=r[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(27),i=e(15);t.exports=function(t){return function(n,e){var o,u,a=String(i(n)),c=r(e),s=a.length;return c<0||c>=s?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):o:t?a.slice(c,c+2):u-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(4),i=e(16),o=e(23),u=e(27),a=e(98),c=e(99),s=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(100)("replace",2,function(t,n,e,v){return[function(r,i){var o=t(this),u=null==r?void 0:r[n];return void 0!==u?u.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=v(e,t,this,n);if(i.done)return i.value;var f=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=f.global;if(g){var m=f.unicode;f.lastIndex=0}for(var y=[];;){var w=c(f,h);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(f.lastIndex=a(h,o(f.lastIndex),m))}for(var x,b="",_=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),E=s(l(u(w.index),h.length),0),C=[],A=1;A<w.length;A++)C.push(void 0===(x=w[A])?x:String(x));var N=w.groups;if(p){var T=[M].concat(C,E,h);void 0!==N&&T.push(N);var k=String(n.apply(void 0,T))}else k=d(M,h,E,C,N,n);E>=_&&(b+=h.slice(_,E)+k,_=E+M.length)}return b+h.slice(_)}];function d(t,n,r,o,u,a){var c=r+t.length,s=o.length,l=p;return void 0!==u&&(u=i(u),l=h),e.call(a,l,function(e,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":a=u[i.slice(1,-1)];break;default:var l=+i;if(0===l)return e;if(l>s){var h=f(l/10);return 0===h?e:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}a=o[l-1]}return void 0===a?"":a})}})},function(t,n,e){"use strict";var r,i,o=e(47),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,s=(r=/a/,i=/b*/g,u.call(r,"a"),u.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(s||l)&&(c=function(t){var n,e,r,i,c=this;return l&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),r=u.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),l&&r&&r.length>1&&a.call(r[0],e,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";e(105);var r=e(4),i=e(47),o=e(7),u=/./.toString,a=function(t){e(8)(RegExp.prototype,"toString",t,!0)};e(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(8)(r,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,e){"use strict";var r=e(2),i=e(39)(2);r(r.P+r.F*!e(28)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(1),i=e(11),o=e(17),u=e(75),a=e(6).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||a(n,t,{value:u.f(t)})}},function(t,n,e){n.f=e(0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(55),i=e(38).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){var r=e(49),i=e(19),o=e(13),u=e(34),a=e(12),c=e(52),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=o(t),n=u(n,!0),c)try{return s(t,n)}catch(t){}if(a(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){"use strict";var r=e(6).f,i=e(36),o=e(43),u=e(10),a=e(41),c=e(42),s=e(35),l=e(53),f=e(67),h=e(7),p=e(48).fastKey,v=e(50),d=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var l=t(function(t,r){a(t,l,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,null!=r&&c(r,e,t[s],t)});return o(l.prototype,{clear:function(){for(var t=v(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var e=v(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[d]--}return!!r},forEach:function(t){v(this,n);for(var e,r=u(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(v(this,n),t)}}),h&&r(l.prototype,"size",{get:function(){return v(this,n)[d]}}),l},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=v(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?l(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,l(1))},e?"entries":"values",!e,!0),f(n)}}},function(t,n,e){"use strict";var r=e(1),i=e(2),o=e(8),u=e(43),a=e(48),c=e(42),s=e(41),l=e(3),f=e(5),h=e(44),p=e(24),v=e(113);t.exports=function(t,n,e,d,g,m){var y=r[t],w=y,x=g?"set":"add",b=w&&w.prototype,_={},S=function(t){var n=b[t];o(b,t,"delete"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!l(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof w&&(m||b.forEach&&!f(function(){(new w).entries().next()}))){var M=new w,E=M[x](m?{}:-0,1)!=M,C=f(function(){M.has(1)}),A=h(function(t){new w(t)}),N=!m&&f(function(){for(var t=new w,n=5;n--;)t[x](n,n);return!t.has(-0)});A||((w=n(function(n,e){s(n,w,t);var r=v(new y,n,w);return null!=e&&c(e,g,r[x],r),r})).prototype=b,b.constructor=w),(C||N)&&(S("delete"),S("has"),g&&S("get")),(N||E)&&S(x),m&&b.clear&&delete b.clear}else w=d.getConstructor(n,t,g,x),u(w.prototype,e),a.NEED=!0;return p(w,t),_[t]=w,i(i.G+i.W+i.F*(w!=y),_),m||d.setStrong(w,t,g),w}},function(t,n,e){var r,i,o;i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="13.1.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,e){e>0&&(s(t,n),setTimeout(function(){l(t,n)},e))}function u(t){return Math.max(Math.min(t,100),0)}function a(t){return Array.isArray(t)?t:[t]}function c(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function s(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||""),r=n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,i=n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop;return{x:r,y:i}}function h(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function v(t,n){for(var e=1;t>=n[e];)e+=1;return e}function d(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=v(e,t),i=t[r-1],o=t[r],u=n[r-1],a=n[r];return u+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],e)/h(u,a)}function g(t,n,e,r){if(100===r)return r;var i=v(r,t),o=t[i-1],u=t[i];return e?r-o>(u-o)/2?u:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(r-t[i-1],n[i-1]):r}function m(n,e,r){var o;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(e[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");r.xPct.push(o),r.xVal.push(e[0]),o?r.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(r.xSteps[0]=e[1]),r.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=p([e.xVal[t],e.xVal[t+1]],n)/h(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=e.xVal[t]+e.xNumSteps[t]*i;e.xHighestCompleteStep[t]=o}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,n){return t[0][0]-n[0][0]}):i.sort(function(t,n){return t[0]-n[0]}),r=0;r<i.length;r++)m(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getMargin=function(n){var e=this.xNumSteps[0];if(e&&n/e%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},w.prototype.toStepping=function(t){return t=d(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=v(e,n),i=t[r-1],o=t[r],u=n[r-1],a=n[r];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(e-u)*h(u,a))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=v(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=v(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function b(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function _(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=e}function S(n,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new w(e,n.snap,n.singleStep)}function M(n,e){if(e=a(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=e.length,n.start=e}function E(n,e){if(n.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,e){if(n.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function A(n,e){if(n.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function N(n,e){var r,i=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(r=1;r<n.handles;r++)i.push(e);i.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=e}n.connect=i}function T(n,e){switch(e){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function k(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==e&&(n.margin=n.spectrum.getMargin(e),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function P(n,e){if(!i(e))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(e),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function O(n,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),n.padding=[n.spectrum.getMargin(e[0]),n.spectrum.getMargin(e[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function D(n,e){switch(e){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function U(n,e){if("string"!=typeof e)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var r=e.indexOf("tap")>=0,i=e.indexOf("drag")>=0,o=e.indexOf("fixed")>=0,u=e.indexOf("snap")>=0,a=e.indexOf("hover")>=0,c=e.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");k(n,n.start[1]-n.start[0])}if(c&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:r||u,drag:i,fixed:o,snap:u,hover:a,unconstrained:c}}function j(n,e){if(!1!==e)if(!0===e){n.tooltips=[];for(var r=0;r<n.handles;r++)n.tooltips.push(!0)}else{if(n.tooltips=a(e),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach(function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function L(t,n){t.ariaFormat=n,b(n)}function F(t,n){t.format=n,b(n)}function R(n,e){if(n.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function H(t,n){t.documentElement=n}function I(n,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=e}function V(n,e){if("object"!=typeof e)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var r in n.cssClasses={},e)e.hasOwnProperty(r)&&(n.cssClasses[r]=n.cssPrefix+e[r]);else n.cssClasses=e}function Y(n){var r={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:_},start:{r:!0,t:M},connect:{r:!0,t:N},direction:{r:!0,t:D},snap:{r:!1,t:E},animate:{r:!1,t:C},animationDuration:{r:!1,t:A},range:{r:!0,t:S},orientation:{r:!1,t:T},margin:{r:!1,t:k},limit:{r:!1,t:P},padding:{r:!1,t:O},behaviour:{r:!0,t:U},ariaFormat:{r:!1,t:L},format:{r:!1,t:F},tooltips:{r:!1,t:j},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:H},cssPrefix:{r:!0,t:I},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach(function(u){if(!e(n[u])&&void 0===o[u]){if(i[u].r)throw new Error("noUiSlider ("+t+"): '"+u+"' is required.");return!0}i[u].t(r,e(n[u])?n[u]:o[u])}),r.pips=n.pips;var u=document.createElement("div"),a=void 0!==u.style.msTransform,c=void 0!==u.style.transform;return r.transformRule=c?"transform":a?"msTransform":"webkitTransform",r.style=[["left","top"],["right","bottom"]][r.dir][r.ort],r}function z(e,i,c){var h,p,v,d,g,m,y,w,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},b=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),_=b&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),S=e,M=i.spectrum,E=[],C=[],A=[],N=0,T={},k=e.ownerDocument,P=i.documentElement||k.documentElement,O=k.body,D=-1,U=0,j=1,L=2,F="rtl"===k.dir||1===i.ort?0:100;function R(t,n){var e=k.createElement("div");return n&&s(e,n),t.appendChild(e),e}function H(t,n){var e=R(t,i.cssClasses.origin),r=R(e,i.cssClasses.handle);return R(r,i.cssClasses.touchArea),r.setAttribute("data-handle",n),i.keyboardSupport&&(r.setAttribute("tabindex","0"),r.addEventListener("keydown",function(t){return function(t,n){if(z()||q(n))return!1;var e=["Left","Right"],r=["Down","Up"];i.dir&&!i.ort?e.reverse():i.ort&&!i.dir&&r.reverse();var o=t.key.replace("Arrow",""),u=o===r[0]||o===e[0],a=o===r[1]||o===e[1];if(!u&&!a)return!0;t.preventDefault();var c=u?0:1,s=wt(n)[c];return null!==s&&(!1===s&&(s=M.getDefaultStep(C[n],u,10)),s=Math.max(s,1e-7),s*=u?-1:1,mt(n,E[n]+s,!0),!1)}(t,n)})),r.setAttribute("role","slider"),r.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?s(r,i.cssClasses.handleLower):n===i.handles-1&&s(r,i.cssClasses.handleUpper),e}function I(t,n){return!!n&&R(t,i.cssClasses.connect)}function V(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function z(){return S.hasAttribute("disabled")}function q(t){var n=p[t];return n.hasAttribute("disabled")}function B(){g&&(ut("update.tooltips"),g.forEach(function(t){t&&n(t)}),g=null)}function X(){B(),g=p.map(V),ot("update.tooltips",function(t,n,e){if(g[n]){var r=t[n];!0!==i.tooltips[n]&&(r=i.tooltips[n].to(e[n])),g[n].innerHTML=r}})}function $(t,n,e){var r=k.createElement("div"),o=[];o[U]=i.cssClasses.valueNormal,o[j]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var u=[];u[U]=i.cssClasses.markerNormal,u[j]=i.cssClasses.markerLarge,u[L]=i.cssClasses.markerSub;var a=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function l(t,n){var e=n===i.cssClasses.value,r=e?a:c,s=e?o:u;return n+" "+r[i.ort]+" "+s[t]}return s(r,i.cssClasses.pips),s(r,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(o){!function(t,o,u){if((u=n?n(o,u):u)!==D){var a=R(r,!1);a.className=l(u,i.cssClasses.marker),a.style[i.style]=t+"%",u>U&&((a=R(r,!1)).className=l(u,i.cssClasses.value),a.setAttribute("data-value",o),a.style[i.style]=t+"%",a.innerHTML=e.to(o))}}(o,t[o][0],t[o][1])}),r}function G(){d&&(n(d),d=null)}function W(n){G();var e=n.mode,r=n.density||1,i=n.filter||!1,o=n.values||!1,u=n.stepped||!1,a=function(n,e,r){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(e<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=e-1,o=100/i;for(e=[];i--;)e[i]=i*o;e.push(100),n="positions"}return"positions"===n?e.map(function(t){return M.fromStepping(r?M.getStep(t):t)}):"values"===n?r?e.map(function(t){return M.fromStepping(M.getStep(M.toStepping(t)))}):e:void 0}(e,o,u),c=function(t,n,e){var r,i={},o=M.xVal[0],u=M.xVal[M.xVal.length-1],a=!1,c=!1,s=0;return(r=e.slice().sort(function(t,n){return t-n}),e=r.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==o&&(e.unshift(o),a=!0),e[e.length-1]!==u&&(e.push(u),c=!0),e.forEach(function(r,o){var u,l,f,h,p,v,d,g,m,y,w=r,x=e[o+1],b="steps"===n;if(b&&(u=M.xNumSteps[o]),u||(u=x-w),!1!==w&&void 0!==x)for(u=Math.max(u,1e-7),l=w;l<=x;l=(l+u).toFixed(7)/1){for(g=(p=(h=M.toStepping(l))-s)/t,y=p/(m=Math.round(g)),f=1;f<=m;f+=1)i[(v=s+f*y).toFixed(5)]=[M.fromStepping(v),0];d=e.indexOf(l)>-1?j:b?L:U,!o&&a&&(d=0),l===x&&c||(i[h.toFixed(5)]=[l,d]),s=h}}),i}(r,e,a),s=n.format||{to:Math.round};return d=S.appendChild($(c,i,s))}function Z(){var t=h.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||h[n]:t.height||h[n]}function J(t,n,e,r){var o=function(o){return!!(o=function(t,n,e){var r,i,o=0===t.type.indexOf("touch"),u=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),o){var c=function(t){return t.target===e||e.contains(t.target)};if("touchstart"===t.type){var s=Array.prototype.filter.call(t.touches,c);if(s.length>1)return!1;r=s[0].pageX,i=s[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,c);if(!l)return!1;r=l.pageX,i=l.pageY}}return n=n||f(k),(u||a)&&(r=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[r,i],t.cursor=u||a,t}(o,r.pageOffset,r.target||n))&&!(z()&&!r.doNotReject)&&(u=S,a=i.cssClasses.tap,!((u.classList?u.classList.contains(a):new RegExp("\\b"+a+"\\b").test(u.className))&&!r.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!r.hover||!o.buttons)&&(_||o.preventDefault(),o.calcPoint=o.points[i.ort],void e(o,r)));var u,a},u=[];return t.split(" ").forEach(function(t){n.addEventListener(t,o,!!_&&{passive:!0}),u.push([t,o])}),u}function Q(t){var n,e,r,o,a,c,s=t-(n=h,e=i.ort,r=n.getBoundingClientRect(),o=n.ownerDocument,a=o.documentElement,c=f(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),e?r.top+c.y-a.clientTop:r.left+c.x-a.clientLeft),l=100*s/Z();return l=u(l),i.dir?100-l:l}function K(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&nt(t,n)}function tt(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return nt(t,n);var e=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint),r=100*e/n.baseSize;lt(e>0,r,n.locations,n.handleNumbers)}function nt(t,n){n.handle&&(l(n.handle,i.cssClasses.active),N-=1),n.listeners.forEach(function(t){P.removeEventListener(t[0],t[1])}),0===N&&(l(S,i.cssClasses.drag),ht(),t.cursor&&(O.style.cursor="",O.removeEventListener("selectstart",r))),n.handleNumbers.forEach(function(t){at("change",t),at("set",t),at("end",t)})}function et(t,n){if(n.handleNumbers.some(q))return!1;var e;if(1===n.handleNumbers.length){var o=p[n.handleNumbers[0]];e=o.children[0],N+=1,s(e,i.cssClasses.active)}t.stopPropagation();var u=[],a=J(x.move,P,tt,{target:t.target,handle:e,listeners:u,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:C.slice()}),c=J(x.end,P,nt,{target:t.target,handle:e,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers}),l=J("mouseout",P,K,{target:t.target,handle:e,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers});u.push.apply(u,a.concat(c,l)),t.cursor&&(O.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&s(S,i.cssClasses.drag),O.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach(function(t){at("start",t)})}function rt(t){t.stopPropagation();var n=Q(t.calcPoint),e=function(t){var n=100,e=!1;return p.forEach(function(r,i){if(!q(i)){var o=Math.abs(C[i]-t);(o<n||100===o&&100===n)&&(e=i,n=o)}}),e}(n);if(!1===e)return!1;i.events.snap||o(S,i.cssClasses.tap,i.animationDuration),pt(e,n,!0,!0),ht(),at("slide",e,!0),at("update",e,!0),at("change",e,!0),at("set",e,!0),i.events.snap&&et(t,{handleNumbers:[e]})}function it(t){var n=Q(t.calcPoint),e=M.getStep(n),r=M.fromStepping(e);Object.keys(T).forEach(function(t){"hover"===t.split(".")[0]&&T[t].forEach(function(t){t.call(m,r)})})}function ot(t,n){T[t]=T[t]||[],T[t].push(n),"update"===t.split(".")[0]&&p.forEach(function(t,n){at("update",n)})}function ut(t){var n=t&&t.split(".")[0],e=n&&t.substring(n.length);Object.keys(T).forEach(function(t){var r=t.split(".")[0],i=t.substring(r.length);n&&n!==r||e&&e!==i||delete T[t]})}function at(t,n,e){Object.keys(T).forEach(function(r){var o=r.split(".")[0];t===o&&T[r].forEach(function(t){t.call(m,E.map(i.format.to),n,E.slice(),e||!1,C.slice())})})}function ct(t,n,e,r,o,a){return p.length>1&&!i.events.unconstrained&&(r&&n>0&&(e=Math.max(e,t[n-1]+i.margin)),o&&n<p.length-1&&(e=Math.min(e,t[n+1]-i.margin))),p.length>1&&i.limit&&(r&&n>0&&(e=Math.min(e,t[n-1]+i.limit)),o&&n<p.length-1&&(e=Math.max(e,t[n+1]-i.limit))),i.padding&&(0===n&&(e=Math.max(e,i.padding[0])),n===p.length-1&&(e=Math.min(e,100-i.padding[1]))),!((e=u(e=M.getStep(e)))===t[n]&&!a)&&e}function st(t,n){var e=i.ort;return(e?n:t)+", "+(e?t:n)}function lt(t,n,e,r){var i=e.slice(),o=[!t,t],u=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach(function(t,e){var r=ct(i,t,i[t]+n,o[e],u[e],!1);!1===r?n=0:(n=r-i[t],i[t]=r)}):o=u=[!0];var a=!1;r.forEach(function(t,r){a=pt(t,e[t]+n,o[r],u[r])||a}),a&&r.forEach(function(t){at("update",t),at("slide",t)})}function ft(t,n){return i.dir?100-t-n:t}function ht(){A.forEach(function(t){var n=C[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e})}function pt(t,n,e,r){return!1!==(n=ct(C,t,n,e,r,!1))&&(function(t,n){C[t]=n,E[t]=M.fromStepping(n);var e="translate("+st(ft(n,0)-F+"%","0")+")";p[t].style[i.transformRule]=e,vt(t),vt(t+1)}(t,n),!0)}function vt(t){if(v[t]){var n=0,e=100;0!==t&&(n=C[t-1]),t!==v.length-1&&(e=C[t]);var r=e-n,o="translate("+st(ft(n,r)+"%","0")+")",u="scale("+st(r/100,"1")+")";v[t].style[i.transformRule]=o+" "+u}}function dt(t,n){return null===t||!1===t||void 0===t?C[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?C[n]:t)}function gt(t,n){var e=a(t),r=void 0===C[0];n=void 0===n||!!n,i.animate&&!r&&o(S,i.cssClasses.tap,i.animationDuration),A.forEach(function(t){pt(t,dt(e[t],t),!0,!1)}),A.forEach(function(t){pt(t,C[t],!0,!0)}),ht(),A.forEach(function(t){at("update",t),null!==e[t]&&n&&at("set",t)})}function mt(n,e,r){if(!((n=Number(n))>=0&&n<A.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);pt(n,dt(e,n),!0,!0),at("update",n),r&&at("set",n)}function yt(){var t=E.map(i.format.to);return 1===t.length?t[0]:t}function wt(t){var n=C[t],e=M.getNearbySteps(n),r=E[t],i=e.thisStep.step,o=null;!1!==i&&r+i>e.stepAfter.startValue&&(i=e.stepAfter.startValue-r),o=r>e.thisStep.startValue?e.thisStep.step:!1!==e.stepBefore.step&&r-e.stepBefore.highestStep,100===n?i=null:0===n&&(o=null);var u=M.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(u))),null!==o&&!1!==o&&(o=Number(o.toFixed(u))),[o,i]}return s(w=S,i.cssClasses.target),0===i.dir?s(w,i.cssClasses.ltr):s(w,i.cssClasses.rtl),0===i.ort?s(w,i.cssClasses.horizontal):s(w,i.cssClasses.vertical),h=R(w,i.cssClasses.base),function(t,n){var e=R(n,i.cssClasses.connects);p=[],(v=[]).push(I(e,t[0]));for(var r=0;r<i.handles;r++)p.push(H(n,r)),A[r]=r,v.push(I(e,t[r+1]))}(i.connect,h),(y=i.events).fixed||p.forEach(function(t,n){J(x.start,t.children[0],et,{handleNumbers:[n]})}),y.tap&&J(x.start,h,rt,{}),y.hover&&J(x.move,h,it,{hover:!0}),y.drag&&v.forEach(function(t,n){if(!1!==t&&0!==n&&n!==v.length-1){var e=p[n-1],r=p[n],o=[t];s(t,i.cssClasses.draggable),y.fixed&&(o.push(e.children[0]),o.push(r.children[0])),o.forEach(function(t){J(x.start,t,et,{handles:[e,r],handleNumbers:[n-1,n]})})}}),gt(i.start),i.pips&&W(i.pips),i.tooltips&&X(),ot("update",function(t,n,e,r,o){A.forEach(function(t){var n=p[t],r=ct(C,t,0,!0,!0,!0),u=ct(C,t,100,!0,!0,!0),a=o[t],c=i.ariaFormat.to(e[t]);r=M.fromStepping(r).toFixed(1),u=M.fromStepping(u).toFixed(1),a=M.fromStepping(a).toFixed(1),n.children[0].setAttribute("aria-valuemin",r),n.children[0].setAttribute("aria-valuemax",u),n.children[0].setAttribute("aria-valuenow",a),n.children[0].setAttribute("aria-valuetext",c)})}),m={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&l(S,i.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return A.map(wt)},on:ot,off:ut,get:yt,set:gt,setHandle:mt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,e){lt(t,n,C,e)},options:c,updateOptions:function(t,n){var e=yt(),r=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];r.forEach(function(n){void 0!==t[n]&&(c[n]=t[n])});var o=Y(c);r.forEach(function(n){void 0!==t[n]&&(i[n]=o[n])}),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?W(i.pips):G(),i.tooltips?X():B(),C=[],gt(t.start||e,n)},target:S,removePips:G,removeTooltips:B,pips:W}}return{__spectrum:w,version:t,create:function(n,e){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var r=Y(e),i=z(n,r,e);return n.noUiSlider=i,i}}})?r.apply(n,i):r)||(t.exports=o)},function(t,n,e){"use strict";e(32),e(25),e(58),e(59),e(60),e(61),e(30),e(45),e(46),e(31),e(69),e(102);var r={calculate:function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()},isMobile:function(){var t=this.calculate();return"xsmall"==t||"small"==t}},i=function(){return new o};function o(){this.reset()}o.prototype={constructor:o,reset:function(){this.s=this.t=0},add:function(t){a(u,t,this.t),a(this,u.s,this.s),this.s?this.t+=u.t:this.s=u.t},valueOf:function(){return this.s}};var u=new o;function a(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var c=1e-6,s=Math.PI,l=s/2,f=s/4,h=2*s,p=180/s,v=s/180,d=Math.abs,g=Math.atan,m=Math.atan2,y=Math.cos,w=(Math.ceil,Math.exp),x=(Math.floor,Math.log),b=(Math.pow,Math.sin),_=(Math.sign,Math.sqrt),S=Math.tan;function M(t){return t>1?0:t<-1?s:Math.acos(t)}function E(t){return t>1?l:t<-1?-l:Math.asin(t)}function C(){}function A(t,n){t&&T.hasOwnProperty(t.type)&&T[t.type](t,n)}var N={Feature:function(t,n){A(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)A(e[r].geometry,n)}},T={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){k(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)k(e[r],n,0)},Polygon:function(t,n){P(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)P(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)A(e[r],n)}};function k(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function P(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)k(t[e],n,1);n.polygonEnd()}var O=function(t,n){t&&N.hasOwnProperty(t.type)?N[t.type](t,n):A(t,n)};i(),i();function D(t){return[m(t[1],t[0]),E(t[2])]}function U(t){var n=t[0],e=t[1],r=y(e);return[r*y(n),r*b(n),b(e)]}function j(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function L(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function F(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function R(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function H(t){var n=_(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}i();var I=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function V(t,n){return[d(t)>s?t+Math.round(-t/h)*h:t,n]}function Y(t,n,e){return(t%=h)?n||e?I(q(t),B(n,e)):q(t):n||e?B(n,e):V}function z(t){return function(n,e){return[(n+=t)>s?n-h:n<-s?n+h:n,e]}}function q(t){var n=z(t);return n.invert=z(-t),n}function B(t,n){var e=y(t),r=b(t),i=y(n),o=b(n);function u(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),l=s*e+a*r;return[m(c*i-l*o,a*e-s*r),E(l*i+c*o)]}return u.invert=function(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),l=s*i-c*o;return[m(c*i+s*o,a*e+l*r),E(l*e-a*r)]},u}V.invert=V;function X(t,n,e,r,i,o){if(e){var u=y(n),a=b(n),c=r*e;null==i?(i=n+r*h,o=n-c/2):(i=$(u,i),o=$(u,o),(r>0?i<o:i>o)&&(i+=r*h));for(var s,l=i;r>0?l>o:l<o;l-=c)s=D([u,-a*y(l),-a*b(l)]),t.point(s[0],s[1])}}function $(t,n){(n=U(n))[0]-=t,H(n);var e=M(-n[1]);return((-n[2]<0?-e:e)+h-c)%h}var G=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:C,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},W=function(t,n){return d(t[0]-n[0])<c&&d(t[1]-n[1])<c};function Z(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var J=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(W(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Z(r,t,null,!0)),c.push(e.o=new Z(r,null,e,!1)),a.push(e=new Z(u,t,null,!1)),c.push(e.o=new Z(u,null,e,!0))}}),a.length){for(c.sort(n),Q(a),Q(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var s,l,f=a[0];;){for(var h=f,p=!0;h.v;)if((h=h.n)===f)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((l=s[o])[0],l[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((l=s[o])[0],l[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function Q(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var K=i(),tt=function(t,n){var e=n[0],r=n[1],i=b(r),o=[b(e),-y(e),0],u=0,a=0;K.reset(),1===i?r=l+c:-1===i&&(r=-l-c);for(var p=0,v=t.length;p<v;++p)if(g=(d=t[p]).length)for(var d,g,w=d[g-1],x=w[0],_=w[1]/2+f,S=b(_),M=y(_),C=0;C<g;++C,x=N,S=k,M=P,w=A){var A=d[C],N=A[0],T=A[1]/2+f,k=b(T),P=y(T),O=N-x,D=O>=0?1:-1,j=D*O,F=j>s,R=S*k;if(K.add(m(R*D*b(j),M*P+R*y(j))),u+=F?O+D*h:O,F^x>=e^N>=e){var I=L(U(w),U(A));H(I);var V=L(o,I);H(V);var Y=(F^O>=0?-1:1)*E(V[2]);(r>Y||r===Y&&(I[0]||I[1]))&&(a+=F^O>=0?1:-1)}}return(u<-c||u<c&&K<-c)^1&a},nt=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN};var et,rt;1===(et=nt).length&&(rt=et,et=function(t,n){return nt(rt(t),n)});var it=Array.prototype;it.slice,it.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var ot=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e};var ut=function(t,n,e,r){return function(i){var o,u,a,c=n(i),s=G(),l=n(s),f=!1,h={point:p,lineStart:d,lineEnd:g,polygonStart:function(){h.point=m,h.lineStart=y,h.lineEnd=w,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=d,h.lineEnd=g,u=ot(u);var t=tt(o,r);u.length?(f||(i.polygonStart(),f=!0),J(u,ct,t,e,i)):t&&(f||(i.polygonStart(),f=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),f&&(i.polygonEnd(),f=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,e){t(n,e)&&i.point(n,e)}function v(t,n){c.point(t,n)}function d(){h.point=v,c.lineStart()}function g(){h.point=p,c.lineEnd()}function m(t,n){a.push([t,n]),l.point(t,n)}function y(){l.lineStart(),a=[]}function w(){m(a[0][0],a[0][1]),l.lineEnd();var t,n,e,r,c=l.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(e=h[0]).length-1)>0){for(f||(i.polygonStart(),f=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(at))}return h}};function at(t){return t.length>1}function ct(t,n){return((t=t.x)[0]<0?t[1]-l-c:l-t[1])-((n=n.x)[0]<0?n[1]-l-c:l-n[1])}var st=ut(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?s:-s,f=d(o-e);d(f-s)<c?(t.point(e,r=(r+u)/2>0?l:-l),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&f>=s&&(d(e-i)<c&&(e-=i*c),d(o-a)<c&&(o-=a*c),r=function(t,n,e,r){var i,o,u=b(t-e);return d(u)>c?g((b(n)*(o=y(r))*b(e)-b(r)*(i=y(n))*b(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*l,r.point(-s,i),r.point(0,i),r.point(s,i),r.point(s,0),r.point(s,-i),r.point(0,-i),r.point(-s,-i),r.point(-s,0),r.point(-s,i);else if(d(t[0]-n[0])>c){var o=t[0]<n[0]?s:-s;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-s,-l]);var lt=function(t){var n=y(t),e=6*v,r=n>0,i=d(n)>c;function o(t,e){return y(t)*y(e)>n}function u(t,e,r){var i=[1,0,0],o=L(U(t),U(e)),u=j(o,o),a=o[0],l=u-a*a;if(!l)return!r&&t;var f=n*u/l,h=-n*a/l,p=L(i,o),v=R(i,f);F(v,R(o,h));var g=p,m=j(v,g),y=j(g,g),w=m*m-y*(j(v,v)-1);if(!(w<0)){var x=_(w),b=R(g,(-m-x)/y);if(F(b,v),b=D(b),!r)return b;var S,M=t[0],E=e[0],C=t[1],A=e[1];E<M&&(S=M,M=E,E=S);var N=E-M,T=d(N-s)<c;if(!T&&A<C&&(S=C,C=A,A=S),T||N<c?T?C+A>0^b[1]<(d(b[0]-M)<c?C:A):C<=b[1]&&b[1]<=A:N>s^(M<=b[0]&&b[0]<=E)){var k=R(g,(-m+x)/y);return F(k,v),[b,D(k)]}}}function a(n,e){var i=r?t:s-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return ut(o,function(t){var n,e,l,f,h;return{lineStart:function(){f=l=!1,h=1},point:function(p,v){var d,g=[p,v],m=o(p,v),y=r?m?0:a(p,v):m?a(p+(p<0?s:-s),v):0;if(!n&&(f=l=m)&&t.lineStart(),m!==l&&(!(d=u(n,g))||W(n,d)||W(g,d))&&(g[0]+=c,g[1]+=c,m=o(g[0],g[1])),m!==l)h=0,m?(t.lineStart(),d=u(g,n),t.point(d[0],d[1])):(d=u(n,g),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^m){var w;y&e||!(w=u(g,n,!0))||(h=0,r?(t.lineStart(),t.point(w[0][0],w[0][1]),t.point(w[1][0],w[1][1]),t.lineEnd()):(t.point(w[1][0],w[1][1]),t.lineEnd(),t.lineStart(),t.point(w[0][0],w[0][1])))}!m||n&&W(n,g)||t.point(g[0],g[1]),n=g,l=m,e=y},lineEnd:function(){l&&t.lineEnd(),n=null},clean:function(){return h|(f&&l)<<1}}},function(n,r,i,o){X(o,t,e,i,n,r)},r?[0,-t]:[-s,t-s])},ft=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],s=0,l=1,f=n[0]-a,h=n[1]-c;if(u=e-a,f||!(u>0)){if(u/=f,f<0){if(u<s)return;u<l&&(l=u)}else if(f>0){if(u>l)return;u>s&&(s=u)}if(u=i-a,f||!(u<0)){if(u/=f,f<0){if(u>l)return;u>s&&(s=u)}else if(f>0){if(u<s)return;u<l&&(l=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<l&&(l=u)}else if(h>0){if(u>l)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>l)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<l&&(l=u)}return s>0&&(t[0]=a+s*f,t[1]=c+s*h),l<1&&(n[0]=a+l*f,n[1]=c+l*h),!0}}}}},ht=1e9,pt=-ht;function vt(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,c){var l=0,f=0;if(null==i||(l=u(i,a))!==(f=u(o,a))||s(i,o)<0^a>0)do{c.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else c.point(o[0],o[1])}function u(r,i){return d(r[0]-t)<c?i>0?0:3:d(r[0]-e)<c?i>0?2:1:d(r[1]-n)<c?i>0?1:0:i>0?3:2}function a(t,n){return s(t.x,n.x)}function s(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,l,f,h,p,v,d,g,m,y,w=u,x=G(),b={point:_,lineStart:function(){b.point=S,s&&s.push(l=[]);m=!0,g=!1,v=d=NaN},lineEnd:function(){c&&(S(f,h),p&&g&&x.rejoin(),c.push(x.result()));b.point=_,g&&w.lineEnd()},polygonStart:function(){w=x,c=[],s=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=s.length;e<i;++e)for(var o,u,a=s[e],c=1,l=a.length,f=a[0],h=f[0],p=f[1];c<l;++c)o=h,u=p,f=a[c],h=f[0],p=f[1],u<=r?p>r&&(h-o)*(r-u)>(p-u)*(t-o)&&++n:p<=r&&(h-o)*(r-u)<(p-u)*(t-o)&&--n;return n}(),e=y&&n,i=(c=ot(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&J(c,a,n,o,u),u.polygonEnd());w=u,c=s=l=null}};function _(t,n){i(t,n)&&w.point(t,n)}function S(o,u){var a=i(o,u);if(s&&l.push([o,u]),m)f=o,h=u,p=a,m=!1,a&&(w.lineStart(),w.point(o,u));else if(a&&g)w.point(o,u);else{var c=[v=Math.max(pt,Math.min(ht,v)),d=Math.max(pt,Math.min(ht,d))],x=[o=Math.max(pt,Math.min(ht,o)),u=Math.max(pt,Math.min(ht,u))];ft(c,x,t,n,e,r)?(g||(w.lineStart(),w.point(c[0],c[1])),w.point(x[0],x[1]),a||w.lineEnd(),y=!1):a&&(w.lineStart(),w.point(o,u),y=!1)}v=o,d=u,g=a}return b}}i();var dt,gt,mt,yt,wt=function(t){return t},xt=i(),bt=i(),_t={point:C,lineStart:C,lineEnd:C,polygonStart:function(){_t.lineStart=St,_t.lineEnd=Ct},polygonEnd:function(){_t.lineStart=_t.lineEnd=_t.point=C,xt.add(d(bt)),bt.reset()},result:function(){var t=xt/2;return xt.reset(),t}};function St(){_t.point=Mt}function Mt(t,n){_t.point=Et,dt=mt=t,gt=yt=n}function Et(t,n){bt.add(yt*t-mt*n),mt=t,yt=n}function Ct(){Et(dt,gt)}var At=_t,Nt=1/0,Tt=Nt,kt=-Nt,Pt=kt;var Ot,Dt,Ut,jt,Lt={point:function(t,n){t<Nt&&(Nt=t);t>kt&&(kt=t);n<Tt&&(Tt=n);n>Pt&&(Pt=n)},lineStart:C,lineEnd:C,polygonStart:C,polygonEnd:C,result:function(){var t=[[Nt,Tt],[kt,Pt]];return kt=Pt=-(Tt=Nt=1/0),t}},Ft=0,Rt=0,Ht=0,It=0,Vt=0,Yt=0,zt=0,qt=0,Bt=0,Xt={point:$t,lineStart:Gt,lineEnd:Jt,polygonStart:function(){Xt.lineStart=Qt,Xt.lineEnd=Kt},polygonEnd:function(){Xt.point=$t,Xt.lineStart=Gt,Xt.lineEnd=Jt},result:function(){var t=Bt?[zt/Bt,qt/Bt]:Yt?[It/Yt,Vt/Yt]:Ht?[Ft/Ht,Rt/Ht]:[NaN,NaN];return Ft=Rt=Ht=It=Vt=Yt=zt=qt=Bt=0,t}};function $t(t,n){Ft+=t,Rt+=n,++Ht}function Gt(){Xt.point=Wt}function Wt(t,n){Xt.point=Zt,$t(Ut=t,jt=n)}function Zt(t,n){var e=t-Ut,r=n-jt,i=_(e*e+r*r);It+=i*(Ut+t)/2,Vt+=i*(jt+n)/2,Yt+=i,$t(Ut=t,jt=n)}function Jt(){Xt.point=$t}function Qt(){Xt.point=tn}function Kt(){nn(Ot,Dt)}function tn(t,n){Xt.point=nn,$t(Ot=Ut=t,Dt=jt=n)}function nn(t,n){var e=t-Ut,r=n-jt,i=_(e*e+r*r);It+=i*(Ut+t)/2,Vt+=i*(jt+n)/2,Yt+=i,zt+=(i=jt*t-Ut*n)*(Ut+t),qt+=i*(jt+n),Bt+=3*i,$t(Ut=t,jt=n)}var en=Xt;function rn(t){this._context=t}rn.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,h)}},result:C};var on,un,an,cn,sn,ln=i(),fn={point:C,lineStart:function(){fn.point=hn},lineEnd:function(){on&&pn(un,an),fn.point=C},polygonStart:function(){on=!0},polygonEnd:function(){on=null},result:function(){var t=+ln;return ln.reset(),t}};function hn(t,n){fn.point=pn,un=cn=t,an=sn=n}function pn(t,n){cn-=t,sn-=n,ln.add(_(cn*cn+sn*sn)),cn=t,sn=n}var vn=fn;function dn(){this._string=[]}function gn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}dn.prototype={_radius:4.5,_circle:gn(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=gn(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var mn=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),O(t,e(r))),r.result()}return o.area=function(t){return O(t,e(At)),At.result()},o.measure=function(t){return O(t,e(vn)),vn.result()},o.bounds=function(t){return O(t,e(Lt)),Lt.result()},o.centroid=function(t){return O(t,e(en)),en.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,wt):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new dn):new rn(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)};function yn(t){return function(n){var e=new wn;for(var r in t)e[r]=t[r];return e.stream=n,e}}function wn(){}function xn(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),O(e,t.stream(Lt)),n(Lt.result()),null!=r&&t.clipExtent(r),t}function bn(t,n,e){return xn(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function _n(t,n,e){return bn(t,[[0,0],n],e)}function Sn(t,n,e){return xn(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function Mn(t,n,e){return xn(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}wn.prototype={constructor:wn,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var En=16,Cn=y(30*v),An=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,s,l,f,h,p,v,g,y,w){var x=l-r,b=f-i,S=x*x+b*b;if(S>4*n&&y--){var M=u+p,C=a+v,A=s+g,N=_(M*M+C*C+A*A),T=E(A/=N),k=d(d(A)-1)<c||d(o-h)<c?(o+h)/2:m(C,M),P=t(k,T),O=P[0],D=P[1],U=O-r,j=D-i,L=b*U-x*j;(L*L/S>n||d((x*U+b*j)/S-.5)>.3||u*p+a*v+s*g<Cn)&&(e(r,i,o,u,a,s,O,D,k,M/=N,C/=N,A,y,w),w.point(O,D),e(O,D,k,M,C,A,l,f,h,p,v,g,y,w))}}return function(n){var r,i,o,u,a,c,s,l,f,h,p,v,d={point:g,lineStart:m,lineEnd:w,polygonStart:function(){n.polygonStart(),d.lineStart=x},polygonEnd:function(){n.polygonEnd(),d.lineStart=m}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){l=NaN,d.point=y,n.lineStart()}function y(r,i){var o=U([r,i]),u=t(r,i);e(l,f,s,h,p,v,l=u[0],f=u[1],s=r,h=o[0],p=o[1],v=o[2],En,n),n.point(l,f)}function w(){d.point=g,n.lineEnd()}function x(){m(),d.point=b,d.lineEnd=_}function b(t,n){y(r=t,n),i=l,o=f,u=h,a=p,c=v,d.point=y}function _(){e(l,f,s,h,p,v,i,o,r,u,a,c,En,n),d.lineEnd=w,w()}return d}}(t,n):function(t){return yn({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var Nn=yn({point:function(t,n){this.stream.point(t*v,n*v)}});function Tn(t,n,e,r){var i=y(r),o=b(r),u=i*t,a=o*t,c=i/t,s=o/t,l=(o*e-i*n)/t,f=(o*n+i*e)/t;function h(t,r){return[u*t-a*r+n,e-a*t-u*r]}return h.invert=function(t,n){return[c*t-s*n+l,f-s*t-c*n]},h}function kn(t){return Pn(function(){return t})()}function Pn(t){var n,e,r,i,o,u,a,c,s,l,f=150,h=480,d=250,g=0,m=0,y=0,w=0,x=0,b=0,S=null,M=st,E=null,C=wt,A=.5;function N(t){return c(t[0]*v,t[1]*v)}function T(t){return(t=c.invert(t[0],t[1]))&&[t[0]*p,t[1]*p]}function k(){var t=Tn(f,0,0,b).apply(null,n(g,m)),r=(b?Tn:function(t,n,e){function r(r,i){return[n+t*r,e-t*i]}return r.invert=function(r,i){return[(r-n)/t,(e-i)/t]},r})(f,h-t[0],d-t[1],b);return e=Y(y,w,x),a=I(n,r),c=I(e,a),u=An(a,A),P()}function P(){return s=l=null,N}return N.stream=function(t){return s&&l===t?s:s=Nn(function(t){return yn({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(M(u(C(l=t)))))},N.preclip=function(t){return arguments.length?(M=t,S=void 0,P()):M},N.postclip=function(t){return arguments.length?(C=t,E=r=i=o=null,P()):C},N.clipAngle=function(t){return arguments.length?(M=+t?lt(S=t*v):(S=null,st),P()):S*p},N.clipExtent=function(t){return arguments.length?(C=null==t?(E=r=i=o=null,wt):vt(E=+t[0][0],r=+t[0][1],i=+t[1][0],o=+t[1][1]),P()):null==E?null:[[E,r],[i,o]]},N.scale=function(t){return arguments.length?(f=+t,k()):f},N.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],k()):[h,d]},N.center=function(t){return arguments.length?(g=t[0]%360*v,m=t[1]%360*v,k()):[g*p,m*p]},N.rotate=function(t){return arguments.length?(y=t[0]%360*v,w=t[1]%360*v,x=t.length>2?t[2]%360*v:0,k()):[y*p,w*p,x*p]},N.angle=function(t){return arguments.length?(b=t%360*v,k()):b*p},N.precision=function(t){return arguments.length?(u=An(a,A=t*t),P()):_(A)},N.fitExtent=function(t,n){return bn(N,t,n)},N.fitSize=function(t,n){return _n(N,t,n)},N.fitWidth=function(t,n){return Sn(N,t,n)},N.fitHeight=function(t,n){return Mn(N,t,n)},function(){return n=t.apply(this,arguments),N.invert=n.invert&&T,k()}}function On(t){return function(n,e){var r=y(n),i=y(e),o=t(r*i);return[o*i*b(n),o*b(e)]}}function Dn(t){return function(n,e){var r=_(n*n+e*e),i=t(r),o=b(i),u=y(i);return[m(n*o,r*u),E(r&&e*o/r)]}}var Un=On(function(t){return _(2/(1+t))});Un.invert=Dn(function(t){return 2*E(t/2)});var jn=On(function(t){return(t=M(t))&&t/b(t)});jn.invert=Dn(function(t){return t});function Ln(t,n){return[t,x(S((l+n)/2))]}Ln.invert=function(t,n){return[t,2*g(w(n))-l]};function Fn(t,n){return[t,n]}Fn.invert=Fn;var Rn=1.340264,Hn=-.081106,In=893e-6,Vn=.003796,Yn=_(3)/2;function zn(t,n){var e=E(Yn*b(n)),r=e*e,i=r*r*r;return[t*y(e)/(Yn*(Rn+3*Hn*r+i*(7*In+9*Vn*r))),e*(Rn+Hn*r+i*(In+Vn*r))]}zn.invert=function(t,n){for(var e,r=n,i=r*r,o=i*i*i,u=0;u<12&&(o=(i=(r-=e=(r*(Rn+Hn*i+o*(In+Vn*i))-n)/(Rn+3*Hn*i+o*(7*In+9*Vn*i)))*r)*i*i,!(d(e)<1e-12));++u);return[Yn*t*(Rn+3*Hn*i+o*(7*In+9*Vn*i))/y(r),E(b(r)/Yn)]};function qn(t,n){var e=y(n),r=y(t)*e;return[e*b(t)/r,b(n)/r]}qn.invert=Dn(g);function Bn(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}Bn.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(d(e)>c&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};function Xn(t,n){return[y(n)*b(t),b(n)]}Xn.invert=Dn(E);var $n=function(){return kn(Xn).scale(249.5).clipAngle(90+c)};function Gn(t,n){var e=y(n),r=1+y(t)*e;return[e*b(t)/r,b(n)/r]}Gn.invert=Dn(function(t){return 2*g(t)});function Wn(t,n){return[x(S((l+n)/2)),-t]}Wn.invert=function(t,n){return[-n,2*g(w(t))-l]};var Zn=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},Jn=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return Zn(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var Qn=Jn(Zn),Kn=Qn.right,te=(Qn.left,Kn);var ne=Array.prototype,ee=(ne.slice,ne.map,Math.sqrt(50)),re=Math.sqrt(10),ie=Math.sqrt(2),oe=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=ue(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function ue(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=ee?10:o>=re?5:o>=ie?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=ee?10:o>=re?5:o>=ie?2:1)}function ae(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=ee?i*=10:o>=re?i*=5:o>=ie&&(i*=2),n<t?-i:i}function ce(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Symbol("implicit");var se=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function le(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function fe(){}var he="\\s*([+-]?\\d+)\\s*",pe="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ve="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",de=/^#([0-9a-f]{3})$/,ge=/^#([0-9a-f]{6})$/,me=new RegExp("^rgb\\("+[he,he,he]+"\\)$"),ye=new RegExp("^rgb\\("+[ve,ve,ve]+"\\)$"),we=new RegExp("^rgba\\("+[he,he,he,pe]+"\\)$"),xe=new RegExp("^rgba\\("+[ve,ve,ve,pe]+"\\)$"),be=new RegExp("^hsl\\("+[pe,ve,ve]+"\\)$"),_e=new RegExp("^hsla\\("+[pe,ve,ve,pe]+"\\)$"),Se={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Me(t){var n;return t=(t+"").trim().toLowerCase(),(n=de.exec(t))?new Te((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=ge.exec(t))?Ee(parseInt(n[1],16)):(n=me.exec(t))?new Te(n[1],n[2],n[3],1):(n=ye.exec(t))?new Te(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=we.exec(t))?Ce(n[1],n[2],n[3],n[4]):(n=xe.exec(t))?Ce(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=be.exec(t))?Pe(n[1],n[2]/100,n[3]/100,1):(n=_e.exec(t))?Pe(n[1],n[2]/100,n[3]/100,n[4]):Se.hasOwnProperty(t)?Ee(Se[t]):"transparent"===t?new Te(NaN,NaN,NaN,0):null}function Ee(t){return new Te(t>>16&255,t>>8&255,255&t,1)}function Ce(t,n,e,r){return r<=0&&(t=n=e=NaN),new Te(t,n,e,r)}function Ae(t){return t instanceof fe||(t=Me(t)),t?new Te((t=t.rgb()).r,t.g,t.b,t.opacity):new Te}function Ne(t,n,e,r){return 1===arguments.length?Ae(t):new Te(t,n,e,null==r?1:r)}function Te(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function ke(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Pe(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new De(t,n,e,r)}function Oe(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof De)return new De(t.h,t.s,t.l,t.opacity);if(t instanceof fe||(t=Me(t)),!t)return new De;if(t instanceof De)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(e-r)/a+6*(e<r):e===o?(r-n)/a+2:(n-e)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new De(u,a,c,t.opacity)}(t):new De(t,n,e,null==r?1:r)}function De(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Ue(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}se(fe,Me,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),se(Te,Ne,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Te(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Te(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+ke(this.r)+ke(this.g)+ke(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),se(De,Oe,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new De(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new De(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Te(Ue(t>=240?t-240:t+120,i,r),Ue(t,i,r),Ue(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var je=Math.PI/180,Le=180/Math.PI,Fe=.96422,Re=1,He=.82521,Ie=4/29,Ve=6/29,Ye=3*Ve*Ve,ze=Ve*Ve*Ve;function qe(t){if(t instanceof Xe)return new Xe(t.l,t.a,t.b,t.opacity);if(t instanceof Ke){if(isNaN(t.h))return new Xe(t.l,0,0,t.opacity);var n=t.h*je;return new Xe(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Te||(t=Ae(t));var e,r,i=Ze(t.r),o=Ze(t.g),u=Ze(t.b),a=$e((.2225045*i+.7168786*o+.0606169*u)/Re);return i===o&&o===u?e=r=a:(e=$e((.4360747*i+.3850649*o+.1430804*u)/Fe),r=$e((.0139322*i+.0971045*o+.7141733*u)/He)),new Xe(116*a-16,500*(e-a),200*(a-r),t.opacity)}function Be(t,n,e,r){return 1===arguments.length?qe(t):new Xe(t,n,e,null==r?1:r)}function Xe(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function $e(t){return t>ze?Math.pow(t,1/3):t/Ye+Ie}function Ge(t){return t>Ve?t*t*t:Ye*(t-Ie)}function We(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ze(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Je(t){if(t instanceof Ke)return new Ke(t.h,t.c,t.l,t.opacity);if(t instanceof Xe||(t=qe(t)),0===t.a&&0===t.b)return new Ke(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Le;return new Ke(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Qe(t,n,e,r){return 1===arguments.length?Je(t):new Ke(t,n,e,null==r?1:r)}function Ke(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}se(Xe,Be,le(fe,{brighter:function(t){return new Xe(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Xe(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return new Te(We(3.1338561*(n=Fe*Ge(n))-1.6168667*(t=Re*Ge(t))-.4906146*(e=He*Ge(e))),We(-.9787684*n+1.9161415*t+.033454*e),We(.0719453*n-.2289914*t+1.4052427*e),this.opacity)}})),se(Ke,Qe,le(fe,{brighter:function(t){return new Ke(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ke(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return qe(this).rgb()}}));var tr=-.29227,nr=-.90649,er=1.97294,rr=er*nr,ir=1.78277*er,or=1.78277*tr- -.14861*nr;function ur(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof ar)return new ar(t.h,t.s,t.l,t.opacity);t instanceof Te||(t=Ae(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(or*r+rr*n-ir*e)/(or+rr-ir),o=r-i,u=(er*(e-i)-tr*o)/nr,a=Math.sqrt(u*u+o*o)/(er*i*(1-i)),c=a?Math.atan2(u,o)*Le-120:NaN;return new ar(c<0?c+360:c,a,i,t.opacity)}(t):new ar(t,n,e,null==r?1:r)}function ar(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function cr(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}se(ar,ur,le(fe,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new ar(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new ar(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*je,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Te(255*(n+e*(-.14861*r+1.78277*i)),255*(n+e*(tr*r+nr*i)),255*(n+e*(er*r)),this.opacity)}}));var sr=function(t){return function(){return t}};function lr(t,n){return function(e){return t+e*n}}function fr(t,n){var e=n-t;return e?lr(t,e>180||e<-180?e-360*Math.round(e/360):e):sr(isNaN(t)?n:t)}function hr(t){return 1==(t=+t)?pr:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):sr(isNaN(n)?e:n)}}function pr(t,n){var e=n-t;return e?lr(t,e):sr(isNaN(t)?n:t)}var vr=function t(n){var e=hr(n);function r(t,n){var r=e((t=Ne(t)).r,(n=Ne(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),u=pr(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return r.gamma=t,r}(1);function dr(t){return function(n){var e,r,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(e=0;e<i;++e)r=Ne(n[e]),o[e]=r.r||0,u[e]=r.g||0,a[e]=r.b||0;return o=t(o),u=t(u),a=t(a),r.opacity=1,function(t){return r.r=o(t),r.g=u(t),r.b=a(t),r+""}}}dr(function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],u=r>0?t[r-1]:2*i-o,a=r<n-1?t[r+2]:2*o-i;return cr((e-r/n)*n,u,i,o,a)}}),dr(function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],u=t[(r+1)%n],a=t[(r+2)%n];return cr((e-r/n)*n,i,o,u,a)}});var gr=function(t,n){return n-=t=+t,function(e){return t+n*e}},mr=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,yr=new RegExp(mr.source,"g");var wr,xr,br,_r,Sr=function(t,n){var e,r,i,o=mr.lastIndex=yr.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=mr.exec(t))&&(r=yr.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:gr(e,r)})),o=yr.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},Mr=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?sr(n):("number"===r?gr:"string"===r?(e=Me(n))?(n=e,vr):Sr:n instanceof Me?vr:n instanceof Date?function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}}:Array.isArray(n)?function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=Mr(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Mr(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}}:gr)(t,n)},Er=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},Cr=180/Math.PI,Ar={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Nr=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*Cr,skewX:Math.atan(c)*Cr,scaleX:u,scaleY:a}};function Tr(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:gr(t,i)},{i:c-2,x:gr(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:gr(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:gr(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:gr(t,e)},{i:a-2,x:gr(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var kr=Tr(function(t){return"none"===t?Ar:(wr||(wr=document.createElement("DIV"),xr=document.documentElement,br=document.defaultView),wr.style.transform=t,t=br.getComputedStyle(xr.appendChild(wr),null).getPropertyValue("transform"),xr.removeChild(wr),t=t.slice(7,-1).split(","),Nr(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),Pr=Tr(function(t){return null==t?Ar:(_r||(_r=document.createElementNS("http://www.w3.org/2000/svg","g")),_r.setAttribute("transform",t),(t=_r.transform.baseVal.consolidate())?(t=t.matrix,Nr(t.a,t.b,t.c,t.d,t.e,t.f)):Ar)},", ",")",")");Math.SQRT2;function Or(t){return function(n,e){var r=t((n=Oe(n)).h,(e=Oe(e)).h),i=pr(n.s,e.s),o=pr(n.l,e.l),u=pr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Or(fr),Or(pr);function Dr(t){return function(n,e){var r=t((n=Qe(n)).h,(e=Qe(e)).h),i=pr(n.c,e.c),o=pr(n.l,e.l),u=pr(n.opacity,e.opacity);return function(t){return n.h=r(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Dr(fr),Dr(pr);function Ur(t){return function n(e){function r(n,r){var i=t((n=ur(n)).h,(r=ur(r)).h),o=pr(n.s,r.s),u=pr(n.l,r.l),a=pr(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,e)),n.opacity=a(t),n+""}}return e=+e,r.gamma=n,r}(1)}Ur(fr),Ur(pr);var jr=function(t){return function(){return t}},Lr=function(t){return+t},Fr=[0,1];function Rr(t){return t}function Hr(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:jr(isNaN(n)?NaN:.5)}function Ir(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function Vr(t,n,e){var r=t[0],i=t[1],o=n[0],u=n[1];return i<r?(r=Hr(i,r),o=e(u,o)):(r=Hr(r,i),o=e(o,u)),function(t){return o(r(t))}}function Yr(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),u=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<r;)i[u]=Hr(t[u],t[u+1]),o[u]=e(n[u],n[u+1]);return function(n){var e=te(t,n,1,r)-1;return o[e](i[e](n))}}function zr(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function qr(){var t,n,e,r,i,o,u=Fr,a=Fr,c=Mr,s=Rr;function l(){return r=Math.min(u.length,a.length)>2?Yr:Vr,i=o=null,f}function f(n){return isNaN(n=+n)?e:(i||(i=r(u.map(t),a,c)))(t(s(n)))}return f.invert=function(e){return s(n((o||(o=r(a,u.map(t),gr)))(e)))},f.domain=function(t){return arguments.length?(u=Array.from(t,Lr),s===Rr||(s=Ir(u)),l()):u.slice()},f.range=function(t){return arguments.length?(a=Array.from(t),l()):a.slice()},f.rangeRound=function(t){return a=Array.from(t),c=Er,l()},f.clamp=function(t){return arguments.length?(s=t?Ir(u):Rr,f):s!==Rr},f.interpolate=function(t){return arguments.length?(c=t,l()):c},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}function Br(t,n){return qr()(t,n)}var Xr=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},$r=function(t){return(t=Xr(Math.abs(t)))?t[1]:NaN},Gr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Wr(t){return new Zr(t)}function Zr(t){if(!(n=Gr.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Wr.prototype=Zr.prototype,Zr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var Jr,Qr,Kr,ti,ni=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(i>0){if(!+t[r])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},ei=function(t,n){var e=Xr(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},ri={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ei(100*t,n)},r:ei,s:function(t,n){var e=Xr(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(Jr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Xr(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},ii=function(t){return t},oi=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];Qr=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):ii,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):ii,a=t.percent||"%";function c(t){var n=(t=Wr(t)).fill,e=t.align,c=t.sign,s=t.symbol,l=t.zero,f=t.width,h=t.comma,p=t.precision,v=t.trim,d=t.type;"n"===d?(h=!0,d="g"):ri[d]||(null==p&&(p=12),v=!0,d="g"),(l||"0"===n&&"="===e)&&(l=!0,n="0",e="=");var g="$"===s?i[0]:"#"===s&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",m="$"===s?i[1]:/[%p]/.test(d)?a:"",y=ri[d],w=/[defgprs%]/.test(d);function x(t){var i,a,s,x=g,b=m;if("c"===d)b=y(t)+b,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),v&&(t=ni(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,b=("s"===d?oi[8+Jr/3]:"")+b+(_&&"("===c?")":""),w)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!l&&(t=r(t,1/0));var S=x.length+t.length+b.length,M=S<f?new Array(f-S+1).join(n):"";switch(h&&l&&(t=r(M+t,M.length?f-b.length:1/0),M=""),e){case"<":t=x+t+b+M;break;case"=":t=x+M+t+b;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+b+M.slice(S);break;default:t=M+x+t+b}return u(t)}return p=null==p?6:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var e=c(((t=Wr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor($r(n)/3))),i=Math.pow(10,-r),o=oi[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),Kr=Qr.format,ti=Qr.formatPrefix;var ui=function(t,n,e,r){var i,o=ae(t,n,e);switch((r=Wr(null==r?",f":r)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor($r(n)/3)))-$r(Math.abs(t)))}(o,u))||(r.precision=i),ti(r,u);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,$r(n)-$r(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-$r(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Kr(r)};function ai(t){var n=t.domain;return t.ticks=function(t){var e=n();return oe(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ui(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=ue(a,c,e))>0?r=ue(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=ue(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function ci(){var t=Br(Rr,Rr);return t.copy=function(){return zr(t,ci())},ce.apply(t,arguments),ai(t)}var si=new Date,li=new Date;function fi(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return fi(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return si.setTime(+n),li.setTime(+r),t(si),t(li),Math.floor(e(si,li))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var hi=fi(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});hi.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?fi(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):hi:null};hi.range;var pi=6e4,vi=6048e5,di=fi(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),gi=(di.range,fi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*pi)},function(t,n){return(n-t)/pi},function(t){return t.getMinutes()})),mi=(gi.range,fi(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*pi)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),yi=(mi.range,fi(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*pi)/864e5},function(t){return t.getDate()-1})),wi=yi;yi.range;function xi(t){return fi(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*pi)/vi})}var bi=xi(0),_i=xi(1),Si=xi(2),Mi=xi(3),Ei=xi(4),Ci=xi(5),Ai=xi(6),Ni=(bi.range,_i.range,Si.range,Mi.range,Ei.range,Ci.range,Ai.range,fi(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Ti=(Ni.range,fi(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Ti.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var ki=Ti,Pi=(Ti.range,fi(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*pi)},function(t,n){return(n-t)/pi},function(t){return t.getUTCMinutes()})),Oi=(Pi.range,fi(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Di=(Oi.range,fi(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Ui=Di;Di.range;function ji(t){return fi(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/vi})}var Li=ji(0),Fi=ji(1),Ri=ji(2),Hi=ji(3),Ii=ji(4),Vi=ji(5),Yi=ji(6),zi=(Li.range,Fi.range,Ri.range,Hi.range,Ii.range,Vi.range,Yi.range,fi(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),qi=(zi.range,fi(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));qi.every=function(t){return isFinite(t=Math.floor(t))&&t>0?fi(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Bi=qi;qi.range;function Xi(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function $i(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Gi(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Wi,Zi,Ji,Qi={"-":"",_:" ",0:"0"},Ki=/^\s*\d+/,to=/^%/,no=/[\\^$*+?|[\]().{}]/g;function eo(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ro(t){return t.replace(no,"\\$&")}function io(t){return new RegExp("^(?:"+t.map(ro).join("|")+")","i")}function oo(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function uo(t,n,e){var r=Ki.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function ao(t,n,e){var r=Ki.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function co(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function so(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function lo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function fo(t,n,e){var r=Ki.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function ho(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function po(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function vo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function go(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function mo(t,n,e){var r=Ki.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function yo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function wo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function xo(t,n,e){var r=Ki.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function bo(t,n,e){var r=Ki.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function _o(t,n,e){var r=Ki.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function So(t,n,e){var r=to.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Mo(t,n,e){var r=Ki.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Eo(t,n,e){var r=Ki.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Co(t,n){return eo(t.getDate(),n,2)}function Ao(t,n){return eo(t.getHours(),n,2)}function No(t,n){return eo(t.getHours()%12||12,n,2)}function To(t,n){return eo(1+wi.count(ki(t),t),n,3)}function ko(t,n){return eo(t.getMilliseconds(),n,3)}function Po(t,n){return ko(t,n)+"000"}function Oo(t,n){return eo(t.getMonth()+1,n,2)}function Do(t,n){return eo(t.getMinutes(),n,2)}function Uo(t,n){return eo(t.getSeconds(),n,2)}function jo(t){var n=t.getDay();return 0===n?7:n}function Lo(t,n){return eo(bi.count(ki(t),t),n,2)}function Fo(t,n){var e=t.getDay();return t=e>=4||0===e?Ei(t):Ei.ceil(t),eo(Ei.count(ki(t),t)+(4===ki(t).getDay()),n,2)}function Ro(t){return t.getDay()}function Ho(t,n){return eo(_i.count(ki(t),t),n,2)}function Io(t,n){return eo(t.getFullYear()%100,n,2)}function Vo(t,n){return eo(t.getFullYear()%1e4,n,4)}function Yo(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+eo(n/60|0,"0",2)+eo(n%60,"0",2)}function zo(t,n){return eo(t.getUTCDate(),n,2)}function qo(t,n){return eo(t.getUTCHours(),n,2)}function Bo(t,n){return eo(t.getUTCHours()%12||12,n,2)}function Xo(t,n){return eo(1+Ui.count(Bi(t),t),n,3)}function $o(t,n){return eo(t.getUTCMilliseconds(),n,3)}function Go(t,n){return $o(t,n)+"000"}function Wo(t,n){return eo(t.getUTCMonth()+1,n,2)}function Zo(t,n){return eo(t.getUTCMinutes(),n,2)}function Jo(t,n){return eo(t.getUTCSeconds(),n,2)}function Qo(t){var n=t.getUTCDay();return 0===n?7:n}function Ko(t,n){return eo(Li.count(Bi(t),t),n,2)}function tu(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Ii(t):Ii.ceil(t),eo(Ii.count(Bi(t),t)+(4===Bi(t).getUTCDay()),n,2)}function nu(t){return t.getUTCDay()}function eu(t,n){return eo(Fi.count(Bi(t),t),n,2)}function ru(t,n){return eo(t.getUTCFullYear()%100,n,2)}function iu(t,n){return eo(t.getUTCFullYear()%1e4,n,4)}function ou(){return"+0000"}function uu(){return"%"}function au(t){return+t}function cu(t){return Math.floor(+t/1e3)}!function(t){Wi=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=io(i),l=oo(i),f=io(o),h=oo(o),p=io(u),v=oo(u),d=io(a),g=oo(a),m=io(c),y=oo(c),w={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Co,e:Co,f:Po,H:Ao,I:No,j:To,L:ko,m:Oo,M:Do,p:function(t){return i[+(t.getHours()>=12)]},Q:au,s:cu,S:Uo,u:jo,U:Lo,V:Fo,w:Ro,W:Ho,x:null,X:null,y:Io,Y:Vo,Z:Yo,"%":uu},x={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:zo,e:zo,f:Go,H:qo,I:Bo,j:Xo,L:$o,m:Wo,M:Zo,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:au,s:cu,S:Jo,u:Qo,U:Ko,V:tu,w:nu,W:eu,x:null,X:null,y:ru,Y:iu,Z:ou,"%":uu},b={a:function(t,n,e){var r=p.exec(n.slice(e));return r?(t.w=v[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=m.exec(n.slice(e));return r?(t.m=y[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return M(t,n,e,r)},d:go,e:go,f:_o,H:yo,I:yo,j:mo,L:bo,m:vo,M:wo,p:function(t,n,e){var r=s.exec(n.slice(e));return r?(t.p=l[r[0].toLowerCase()],e+r[0].length):-1},Q:Mo,s:Eo,S:xo,u:ao,U:co,V:so,w:uo,W:lo,x:function(t,n,r){return M(t,e,n,r)},X:function(t,n,e){return M(t,r,n,e)},y:ho,Y:fo,Z:po,"%":So};function _(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,s=t.length;for(e instanceof Date||(e=new Date(+e));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=Qi[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(e){var r,i,o=Gi(1900);if(M(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=$i(Gi(o.y))).getUTCDay(),r=i>4||0===i?Fi.ceil(r):Fi(r),r=Ui.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(Gi(o.y))).getDay(),r=i>4||0===i?_i.ceil(r):_i(r),r=wi.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?$i(Gi(o.y)).getUTCDay():n(Gi(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,$i(o)):n(o)}}function M(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=b[i in Qi?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return w.x=_(e,w),w.X=_(r,w),w.c=_(n,w),x.x=_(e,x),x.X=_(r,x),x.c=_(n,x),{format:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",Xi);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t,$i);return n.toString=function(){return t},n}}}(t),Wi.format,Wi.parse,Zi=Wi.utcFormat,Ji=Wi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Zi("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||Ji("%Y-%m-%dT%H:%M:%S.%LZ");var su="http://www.w3.org/1999/xhtml",lu={svg:"http://www.w3.org/2000/svg",xhtml:su,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},fu=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),lu.hasOwnProperty(n)?{space:lu[n],local:t}:t};var hu=function(t){var n=fu(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===su&&n.documentElement.namespaceURI===su?n.createElement(t):n.createElementNS(e,t)}})(n)};function pu(){}var vu=function(t){return null==t?pu:function(){return this.querySelector(t)}};function du(){return[]}var gu=function(t){return null==t?du:function(){return this.querySelectorAll(t)}},mu=function(t){return function(){return this.matches(t)}},yu=function(t){return new Array(t.length)};function wu(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}wu.prototype={constructor:wu,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var xu="$";function bu(t,n,e,r,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new wu(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function _u(t,n,e,r,i,o,u){var a,c,s,l={},f=n.length,h=o.length,p=new Array(f);for(a=0;a<f;++a)(c=n[a])&&(p[a]=s=xu+u.call(c,c.__data__,a,n),s in l?i[a]=c:l[s]=c);for(a=0;a<h;++a)(c=l[s=xu+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],l[s]=null):e[a]=new wu(t,o[a]);for(a=0;a<f;++a)(c=n[a])&&l[p[a]]===c&&(i[a]=c)}function Su(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Mu=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Eu(t,n){return t.style.getPropertyValue(n)||Mu(t).getComputedStyle(t,null).getPropertyValue(n)}function Cu(t){return t.trim().split(/^|\s+/)}function Au(t){return t.classList||new Nu(t)}function Nu(t){this._node=t,this._names=Cu(t.getAttribute("class")||"")}function Tu(t,n){for(var e=Au(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function ku(t,n){for(var e=Au(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}Nu.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Pu(){this.textContent=""}function Ou(){this.innerHTML=""}function Du(){this.nextSibling&&this.parentNode.appendChild(this)}function Uu(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ju(){return null}function Lu(){var t=this.parentNode;t&&t.removeChild(this)}function Fu(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Ru(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Hu={},Iu=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Hu={mouseenter:"mouseover",mouseleave:"mouseout"}));function Vu(t,n,e){return t=Yu(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Yu(t,n,e){return function(r){var i=Iu;Iu=r;try{t.call(this,this.__data__,n,e)}finally{Iu=i}}}function zu(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function qu(t,n,e){var r=Hu.hasOwnProperty(t.type)?Vu:Yu;return function(i,o,u){var a,c=this.__on,s=r(n,o,u);if(c)for(var l=0,f=c.length;l<f;++l)if((a=c[l]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=e),void(a.value=n);this.addEventListener(t.type,s,e),a={type:t.type,name:t.name,value:n,listener:s,capture:e},c?c.push(a):this.__on=[a]}}function Bu(t,n,e){var r=Mu(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Xu=[null];function $u(t,n){this._groups=t,this._parents=n}function Gu(){return new $u([[document.documentElement]],Xu)}$u.prototype=Gu.prototype={constructor:$u,select:function(t){"function"!=typeof t&&(t=vu(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],c=a.length,s=r[i]=new Array(c),l=0;l<c;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new $u(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=gu(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(r.push(t.call(u,u.__data__,s,a)),i.push(u));return new $u(r,i)},filter:function(t){"function"!=typeof t&&(t=mu(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new $u(r,this._parents)},data:function(t,n){if(!t)return v=new Array(this.size()),l=-1,this.each(function(t){v[++l]=t}),v;var e,r=n?_u:bu,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),l=0;l<u;++l){var f=i[l],h=o[l],p=h.length,v=t.call(f,f&&f.__data__,l,i),d=v.length,g=c[l]=new Array(d),m=a[l]=new Array(d);r(f,h,g,m,s[l]=new Array(p),v,n);for(var y,w,x=0,b=0;x<d;++x)if(y=g[x]){for(x>=b&&(b=x+1);!(w=m[b])&&++b<d;);y._next=w||null}}return(a=new $u(a,i))._enter=c,a._exit=s,a},enter:function(){return new $u(this._enter||this._groups.map(yu),this._parents)},exit:function(){return new $u(this._exit||this._groups.map(yu),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new $u(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&4^r.compareDocumentPosition(u)&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Su);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,s=i[o]=new Array(c),l=0;l<c;++l)(u=a[l])&&(s[l]=u);s.sort(n)}return new $u(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=fu(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?e.local?function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}:function(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}:e.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}:function(t,n,e){return function(){this.style.setProperty(t,n,e)}})(t,n,null==e?"":e)):Eu(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var e=Cu(t+"");if(arguments.length<2){for(var r=Au(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Tu:ku)(this,t)}}:n?function(t){return function(){Tu(this,t)}}:function(t){return function(){ku(this,t)}})(e,n))},text:function(t){return arguments.length?this.each(null==t?Pu:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Ou:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Du)},lower:function(){return this.each(Uu)},append:function(t){var n="function"==typeof t?t:hu(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:hu(t),r=null==n?ju:"function"==typeof n?n:vu(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Lu)},clone:function(t){return this.select(t?Ru:Fu)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?qu:zu,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,s=0,l=a.length;s<l;++s)for(r=0,c=a[s];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Bu(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Bu(this,t,n)}})(t,n))}};var Wu=Gu,Zu=function(t){return"string"==typeof t?new $u([[document.querySelector(t)]],[document.documentElement]):new $u([[t]],Xu)},Ju=0;function Qu(){this._="@"+(++Ju).toString(36)}Qu.prototype=function(){return new Qu}.prototype={constructor:Qu,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};e(71),e(72);var Ku={value:function(){}};function ta(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new na(r)}function na(t){this._=t}function ea(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function ra(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Ku,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}na.prototype=ta.prototype={constructor:na,on:function(t,n){var e,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");if(e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(e=(t=o[u]).type)i[e]=ra(i[e],t.name,n);else if(null==n)for(e in i)i[e]=ra(i[e],t.name,null);return this}for(;++u<a;)if((e=(t=o[u]).type)&&(e=ea(i[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new na(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ia,oa,ua=ta,aa=0,ca=0,sa=0,la=1e3,fa=0,ha=0,pa=0,va="object"==typeof performance&&performance.now?performance:Date,da="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ga(){return ha||(da(ma),ha=va.now()+pa)}function ma(){ha=0}function ya(){this._call=this._time=this._next=null}function wa(t,n,e){var r=new ya;return r.restart(t,n,e),r}function xa(){ha=(fa=va.now())+pa,aa=ca=0;try{!function(){ga(),++aa;for(var t,n=ia;n;)(t=ha-n._time)>=0&&n._call.call(null,t),n=n._next;--aa}()}finally{aa=0,function(){var t,n,e=ia,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ia=n);oa=t,_a(r)}(),ha=0}}function ba(){var t=va.now(),n=t-fa;n>la&&(pa-=n,fa=t)}function _a(t){aa||(ca&&(ca=clearTimeout(ca)),t-ha>24?(t<1/0&&(ca=setTimeout(xa,t-va.now()-pa)),sa&&(sa=clearInterval(sa))):(sa||(fa=va.now(),sa=setInterval(ba,la)),aa=1,da(xa)))}ya.prototype=wa.prototype={constructor:ya,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?ga():+e)+(null==n?0:+n),this._next||oa===this||(oa?oa._next=this:ia=this,oa=this),this._call=t,this._time=e,_a()},stop:function(){this._call&&(this._call=null,this._time=1/0,_a())}};var Sa=function(t,n,e){var r=new ya;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},Ma=ua("start","end","cancel","interrupt"),Ea=[],Ca=0,Aa=1,Na=2,Ta=3,ka=4,Pa=5,Oa=6,Da=function(t,n,e,r,i,o){var u=t.__transition;if(u){if(e in u)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var s,l,f,h;if(e.state!==Aa)return a();for(s in i)if((h=i[s]).name===e.name){if(h.state===Ta)return Sa(o);h.state===ka?(h.state=Oa,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=Oa,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Sa(function(){e.state===Ta&&(e.state=ka,e.timer.restart(u,e.delay,e.time),u(c))}),e.state=Na,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Na){for(e.state=Ta,r=new Array(f=e.tween.length),s=0,l=-1;s<f;++s)(h=e.tween[s].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=h);r.length=l+1}}function u(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Pa,1),o=-1,u=r.length;++o<u;)r[o].call(t,i);e.state===Pa&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){for(var r in e.state=Oa,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=wa(function(t){e.state=Aa,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:Ma,tween:Ea,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ca})};function Ua(t,n){var e=La(t,n);if(e.state>Ca)throw new Error("too late; already scheduled");return e}function ja(t,n){var e=La(t,n);if(e.state>Ta)throw new Error("too late; already running");return e}function La(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}function Fa(t,n,e){var r=t._id;return t.each(function(){var t=ja(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return La(t,r).value[n]}}var Ra=function(t,n){var e;return("number"==typeof n?gr:n instanceof Me?vr:(e=Me(n))?(n=e,vr):Sr)(t,n)};var Ha=Wu.prototype.constructor;function Ia(t){return function(){this.style.removeProperty(t)}}var Va=0;function Ya(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function za(){return++Va}var qa=Wu.prototype;Ya.prototype=function(t){return Wu().transition(t)}.prototype={constructor:Ya,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=vu(t));for(var r=this._groups,i=r.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=r[u],l=s.length,f=o[u]=new Array(l),h=0;h<l;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),f[h]=c,Da(f[h],n,e,h,f,La(a,e)));return new Ya(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=gu(t));for(var r=this._groups,i=r.length,o=[],u=[],a=0;a<i;++a)for(var c,s=r[a],l=s.length,f=0;f<l;++f)if(c=s[f]){for(var h,p=t.call(c,c.__data__,f,s),v=La(c,e),d=0,g=p.length;d<g;++d)(h=p[d])&&Da(h,n,e,d,p,v);o.push(p),u.push(c)}return new Ya(o,u,n,e)},filter:function(t){"function"!=typeof t&&(t=mu(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Ya(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,s=n[a],l=e[a],f=s.length,h=u[a]=new Array(f),p=0;p<f;++p)(c=s[p]||l[p])&&(h[p]=c);for(;a<r;++a)u[a]=n[a];return new Ya(u,this._parents,this._name,this._id)},selection:function(){return new Ha(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=za(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var l=La(u,n);Da(u,t,e,s,a,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Ya(r,this._parents,t,e)},call:qa.call,nodes:qa.nodes,node:qa.node,size:qa.size,empty:qa.empty,each:qa.each,on:function(t,n){var e=this._id;return arguments.length<2?La(this.node(),e).on.on(t):this.each(function(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Ua:ja;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}(e,t,n))},attr:function(t,n){var e=fu(t),r="transform"===e?Pr:Ra;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a,c=e(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===r&&a===i?o:(i=a,o=n(r=u,c));this.removeAttribute(t)}})(e,r,Fa(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===r?i:i=n(r=u,e)}}:function(t,n,e){var r,i,o=e+"";return function(){var u=this.getAttribute(t);return u===o?null:u===r?i:i=n(r=u,e)}})(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=fu(t);return this.tween(e,(r.local?function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttributeNS(t.space,t.local,n(e))}}(t,i)),e}return i._value=n,i}:function(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&function(t,n){return function(e){this.setAttribute(t,n(e))}}(t,i)),e}return i._value=n,i})(r,n))},style:function(t,n,e){var r="transform"==(t+="")?kr:Ra;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Eu(this,t),u=(this.style.removeProperty(t),Eu(this,t));return o===u?null:o===e&&u===r?i:i=n(e=o,r=u)}}(t,r)).on("end.style."+t,Ia(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var u=Eu(this,t),a=e(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Eu(this,t)),u===c?null:u===r&&c===i?o:(i=c,o=n(r=u,a))}}(t,r,Fa(this,"style."+t,n))).each(function(t,n){var e,r,i,o,u="style."+n,a="end."+u;return function(){var c=ja(this,t),s=c.on,l=null==c.value[u]?o||(o=Ia(n)):void 0;s===e&&i===l||(r=(e=s).copy()).on(a,i=l),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var u=Eu(this,t);return u===o?null:u===r?i:i=n(r=u,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,function(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,n,e){return function(r){this.style.setProperty(t,n(r),e)}}(t,o,e)),r}return o._value=n,o}(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Fa(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=La(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?function(t,n){var e,r;return function(){var i=ja(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}:function(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=ja(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}})(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Ua(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Ua(this,t).delay=n}})(n,t)):La(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){ja(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){ja(this,t).duration=n}})(n,t)):La(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){ja(this,t).ease=n}}(n,t)):La(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise(function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};e.each(function(){var e=ja(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),e.on=n})})}};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),Math.PI;(function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e})(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Ba=2*Math.PI,Xa=(function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=Ba);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*Ba)},i.period=function(e){return t(n,e)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function $a(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return Xa.time=ga(),Xa;return e}Wu.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>Na&&e.state<Pa,e.state=Oa,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}}(this,t)})},Wu.prototype.transition=function(t){var n,e;t instanceof Ya?(n=t._id,t=t._name):(n=za(),(e=Xa).time=ga(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,s=0;s<c;++s)(u=a[s])&&Da(u,t,n,s,a,e||$a(u,n));return new Ya(r,this._parents,t,n)};var Ga=Zu(".tooltip"),Wa={show:function(t){var n=Iu.pageY-110,e=Iu.pageX;e+10>document.body.clientWidth-100&&(e=document.body.clientWidth+5-150),Ga.transition().duration(200).style("opacity",.9).on("end",function(){Ga.classed("isActive",!0),Ga.select(".tooltip-close").on("click",this.hide)}),Ga.html(t).style("visibility","visible").style("left",e+"px").style("top",n+"px")},hide:function(){Ga.transition().duration(500).style("opacity",0)},formatContent:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach(function(t,r){var i=null;t.class&&(i=t.class);var o="",u="<br />";n&&(o='<li class="'.concat(i,'">'),u="</li>");var a=Object.keys(t)[0];e+="".concat(o,'<span class="tooltip-label">').concat(a,":</span> ").concat(t[a]).concat(u)}),n&&(e+="</ul>"),e}},Za=function(t){return t},Ja=function(t){if(null==t)return Za;var n,e,r=t.scale[0],i=t.scale[1],o=t.translate[0],u=t.translate[1];return function(t,a){a||(n=e=0);var c=2,s=t.length,l=new Array(s);for(l[0]=(n+=t[0])*r+o,l[1]=(e+=t[1])*i+u;c<s;)l[c]=t[c],++c;return l}},Qa=function(t,n){for(var e,r=t.length,i=r-n;i<--r;)e=t[i],t[i++]=t[r],t[r]=e},Ka=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return tc(t,n)})}:tc(t,n)};function tc(t,n){var e=n.id,r=n.bbox,i=null==n.properties?{}:n.properties,o=nc(t,n);return null==e&&null==r?{type:"Feature",properties:i,geometry:o}:null==r?{type:"Feature",id:e,properties:i,geometry:o}:{type:"Feature",id:e,bbox:r,properties:i,geometry:o}}function nc(t,n){var e=Ja(t.transform),r=t.arcs;function i(t,n){n.length&&n.pop();for(var i=r[t<0?~t:t],o=0,u=i.length;o<u;++o)n.push(e(i[o],o));t<0&&Qa(n,u)}function o(t){return e(t)}function u(t){for(var n=[],e=0,r=t.length;e<r;++e)i(t[e],n);return n.length<2&&n.push(n[0]),n}function a(t){for(var n=u(t);n.length<4;)n.push(n[0]);return n}function c(t){return t.map(a)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=o(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(o);break;case"LineString":e=u(n.arcs);break;case"MultiLineString":e=n.arcs.map(u);break;case"Polygon":e=c(n.arcs);break;case"MultiPolygon":e=n.arcs.map(c);break;default:return null}return{type:r,coordinates:e}}(n)}var ec=new ArrayBuffer(16);new Float64Array(ec),new Uint32Array(ec);Math.PI,Math.abs,Math.atan2,Math.cos,Math.sin;var rc,ic,oc,uc,ac=function(){var t={top:10,right:10,bottom:10,left:10},n={orbit:{x:{min:-1,max:1},y:{min:-.309,max:.309}},earth:{x:{min:-.151,max:.151},y:{min:-.151,max:.151}}},e=$n(),r=mn(),i=0,o=0,u=ci().domain([n.orbit.x.min,n.orbit.x.max]),a=ci().domain([n.orbit.y.min,n.orbit.y.max]);function c(c){var l=c.datum();!function(t){var n=t.container,e=t.data,r=n.selectAll("svg").data([e]).enter().append("svg").append("g");r.append("g").attr("class","g-orbit").append("path").attr("fill","none").attr("stroke","#000");var i=r.append("g").attr("class","g-earth");i.append("circle").attr("class","water").attr("fill","#b7c7d1"),i.append("path").attr("class","land").style("fill","#f2f1ee").style("stroke","#ccc").style("stroke-width","0.3px"),r.append("g").attr("class","g-geoSatellites"),r.append("g").attr("class","g-plot")}({container:c,data:l}),function(t){t.data;u.range([0,i]),a.range([o,0])}({data:l}),function(c){var l=c.container,f=c.data,h=c.geoSatellitesData,p=l.select("svg").attr("viewBox","0 0 "+(i+t.left+t.right)+" "+(o+t.top+t.bottom)).select("g").attr("transform","translate("+t.left+","+t.top+")"),v=p.select(".g-earth"),d=Math.abs(a(n.earth.y.max)-a(0));e.translate([u(0),a(0)]).scale(d).rotate(oc),r.projection(e),v.select(".water").attr("cx",u(0)).attr("cy",a(0)).attr("r",e.scale()),v.select(".land").datum(Ka(ic,ic.objects.countries)).attr("d",r),console.log(h),p.select(".g-geoSatellites").selectAll(".satellite").data(h,function(t){return t.sat_name}).join(function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",function(t){return t.is_perp}).classed("satellite--geo",function(t){return t.is_geo}).attr("r",3).attr("cx",function(t){return u(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",s.mouseover).on("mouseleave",s.mouseleave)}),p.select(".g-plot").selectAll(".satellite").data(f,function(t){return t.sat_name}).join(function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",function(t){return t.is_perp}).classed("satellite--target",function(t){return t.is_target}).attr("r",5).attr("cx",function(t){return u(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",s.mouseover).on("mouseleave",s.mouseleave)},function(t){return t.attr("cx",function(t){return u(t.x_coord)}).attr("cy",function(t){return a(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord})})}({container:c,data:l,geoSatellitesData:uc})}var s={mouseover:function(t){s.showTooltip(t),Zu(this).classed("is-active",!0)},mouseleave:function(){Wa.hide(),Zu(this).classed("is-active",!1)},showTooltip:function(t){var n=[{Operator:t.sat_operator},{Date:t.timestamp},{Longitude:t.long_string}];t.is_geo&&delete n[1];var e='\n      <p class="tooltip-heading">\n        '.concat(t.sat_name,"</p>\n      ").concat(Wa.formatContent(n,!0));Wa.show(e)}};return c.width=function(){return arguments.length?(i=(arguments.length<=0?void 0:arguments[0])-t.left-t.right,c):i},c.height=function(){return arguments.length?(o=(arguments.length<=0?void 0:arguments[0])-t.top-t.bottom,c):o},c}();var cc={init:function(t){var n;(rc=Zu(t.container)).datum(t.data),t.transitionDuration,n=Math.min(rc.node().offsetWidth,window.innerHeight),ac.width(n).height(n/3),rc.call(ac)},setWorld:function(t,n){ic=t,oc=n},setGeoSatellites:function(t){uc=t}},sc={btns:document.querySelectorAll(".speed-btn"),init:function(t){var n=t.currentSpeed,e=t.onClick;document.querySelector(".speed-btn--"+n).classList.add("is-active"),Array.from(this.btns).forEach(function(t){t.addEventListener("click",e)})},getCurrentSpeed:function(){return document.querySelector(".speed-btn.is-active").dataset.speed}},lc=(e(73),{el:document.getElementById("description"),setDesc:function(t){this.el.textContent=t},convertKeys:function(t){var n={};for(var e in t)n[new Date(e).getTime()]=t[e];return n},getClosestDescription:function(t,n){return Math.max.apply(null,t.filter(function(t){return t<=n}))}}),fc=e(81),hc={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),controlBtn:document.querySelector(".control-btn"),currentDateEl:document.querySelector(".timeline-current-date"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,updateCurrentDate:function(t){t=new Date(t),t=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),this.currentDateEl.innerHTML="".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=t.onUpdate,i=t.onSlide;this.endDate=e,this.startDate=n,fc.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",step:864e5,range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r),this.el.noUiSlider.on("slide",i)},setupBtnControls:function(){this.btnControls.addEventListener("click",function(){hc.getCurrentDate()==hc.endDate&&hc.el.noUiSlider.set(hc.startDate),1!=hc.playing?hc.startTimeline():hc.stopTimeline()})},startTimeline:function(){console.log(hc.transitionDuration),hc.timer=setInterval(function(){console.log(hc.transitionDuration);var t=hc.getCurrentDate();hc.el.noUiSlider.set(t+864e5)},hc.transitionDuration),hc.controlBtn.classList.remove("play-btn"),hc.controlBtn.classList.add("pause-btn"),hc.playing=!0},stopTimeline:function(){clearInterval(hc.timer),hc.playing=!1,hc.btnControls.classList.remove("pause-btn"),hc.btnControls.classList.add("play-btn")}},pc=hc;e(106),e(107),e(110),e(111),e(112),e(115),e(116),e(117);var vc={},dc={},gc=34,mc=10,yc=13;function wc(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function xc(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function bc(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function _c(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+bc(-n,6):n>9999?"+"+bc(n,6):bc(n,4))+"-"+bc(t.getUTCMonth()+1,2)+"-"+bc(t.getUTCDate(),2)+(o?"T"+bc(e,2)+":"+bc(r,2)+":"+bc(i,2)+"."+bc(o,3)+"Z":i?"T"+bc(e,2)+":"+bc(r,2)+":"+bc(i,2)+"Z":r||e?"T"+bc(e,2)+":"+bc(r,2)+"Z":"")}var Sc=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function l(){if(c)return dc;if(s)return s=!1,vc;var n,r,i=u;if(t.charCodeAt(i)===gc){for(;u++<o&&t.charCodeAt(u)!==gc||t.charCodeAt(++u)===gc;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===mc?s=!0:r===yc&&(s=!0,t.charCodeAt(u)===mc&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===mc)s=!0;else if(r===yc)s=!0,t.charCodeAt(u)===mc&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===mc&&--o,t.charCodeAt(o-1)===yc&&--o;(r=l())!==dc;){for(var f=[];r!==vc&&r!==dc;)f.push(r),r=l();n&&null==(f=n(f,a++))||i.push(f)}return i}function i(n,e){return n.map(function(n){return e.map(function(t){return u(n[t])}).join(t)})}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?_c(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=wc(t);return function(r,i){return n(e(r),i,t)}}(t,n):wc(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=xc(n)),[e.map(u).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=xc(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Mc=Sc(","),Ec=Mc.parse,Cc=(Mc.parseRows,Mc.format,Mc.formatBody,Mc.formatRows,Sc("\t")),Ac=Cc.parse;Cc.parseRows,Cc.format,Cc.formatBody,Cc.formatRows;function Nc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var Tc=function(t,n){return fetch(t,n).then(Nc)};function kc(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Tc(n,e).then(function(n){return t(n,r)})}}var Pc=kc(Ec);kc(Ac);function Oc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var Dc=function(t,n){return fetch(t,n).then(Oc)};function Uc(t){return function(n,e){return Tc(n,e).then(function(n){return(new DOMParser).parseFromString(n,t)})}}Uc("application/xml"),Uc("text/html"),Uc("image/svg+xml");function jc(t){return function(t){if(Array.isArray(t)){for(var n=0,e=new Array(t.length);n<t.length;n++)e[n]=t[n];return e}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Lc(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var e=[],r=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(e.push(u.value),!n||e.length!==n);r=!0);}catch(t){i=!0,o=t}finally{try{r||null==a.return||a.return()}finally{if(i)throw o}}return e}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Fc(t,n,e,r,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,i)}function Rc(t){return function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function u(t){Fc(o,r,i,u,a,"next",t)}function a(t){Fc(o,r,i,u,a,"throw",t)}u(void 0)})}}var Hc=["US","China","Russia"];function Ic(t,n){return Vc.apply(this,arguments)}function Vc(){return(Vc=Rc(regeneratorRuntime.mark(function t(n,e){var r,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return r=Pc(n),i=Pc(e),o=Promise.all([r,i]).then(function(t){var n=Lc(t,2),e=n[0],r=n[1],i=Yc(e);i.forEach(function(t){zc(t,!0)});var o=Yc(r);o.forEach(function(t){zc(t,!1)}),console.log(i),console.log(o);var u=Array.from(new Set(jc(i.map(function(t){return t.timestamp}))));console.log(u);var a=Array.from(new Set(jc(i.map(function(t){return t.sat_name})))),c={perp:new Map,geoSatellites:o};return u.forEach(function(t,n){var e=[];a.forEach(function(n){var r=i.filter(function(e){return e.timestamp===t&&e.sat_name===n});r.length&&e.push(r[0])}),c.perp.set(new Date(t).getTime(),e)}),c.perp=new Map(Array.from(c.perp).sort(function(t,n){return t[0]-n[0]})),c}),console.log(o),t.abrupt("return",o);case 5:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Yc(t){return t.filter(function(t){return"TRUE"===t.include})}function zc(t,n){return t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("ï¿½","&#176;"),t.country.includes("U.S.")&&(t.country="US"),Hc.includes(t.country)||(t.country="Other"),t.is_perp=n,t.is_geo=!n,t}function qc(){return Bc.apply(this,arguments)}function Bc(){return(Bc=Rc(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n=Dc("./data/world-110m.json").then(function(t){return t}),t.abrupt("return",n);case 2:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Xc(t,n,e,r,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void e(t)}a.done?n(c):Promise.resolve(c).then(r,i)}var $c,Gc,Wc,Zc,Jc,Qc,Kc,ts={half:2e3,"1x":1e3,"2x":250},ns=r.calculate(),es="1x",rs=ts[es];function is(){var t;return t=regeneratorRuntime.mark(function t(n,e,r,i,o){var u;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return Gc=lc.convertKeys(r),Wc=Object.keys(Gc).map(function(t){return+t}),t.next=4,Ic(n,e);case 4:return $c=t.sent,cc.setGeoSatellites($c.geoSatellites),t.next=8,qc();case 8:Zc=t.sent,cc.setWorld(Zc,o),console.log($c),u=Array.from($c.perp.keys()),Qc=u[0],Kc=u[u.length-1],Jc=Qc,as(i),sc.init({currentSpeed:es,onClick:function(t){pc.stopTimeline(),Array.from(sc.btns).forEach(function(t){return t.classList.remove("is-active")}),this.classList.add("is-active"),es=sc.getCurrentSpeed(),rs=ts[es],pc.transitionDuration=rs,pc.startTimeline()}}),us(),cs();case 19:case"end":return t.stop()}},t)}),(is=function(){var n=this,e=arguments;return new Promise(function(r,i){var o=t.apply(n,e);function u(t){Xc(o,r,i,u,a,"next",t)}function a(t){Xc(o,r,i,u,a,"throw",t)}u(void 0)})}).apply(this,arguments)}function os(){Jc=pc.getCurrentDate();var t=$c.perp.get(Jc);cc.init({data:t,transitionDuration:rs,container:".chart"})}function us(){pc.transitionDuration=rs,pc.setupTimeline({startDate:Qc,endDate:Kc,transitionDuration:rs,onUpdate:function(){os(),pc.updateCurrentDate(Jc),Jc==Kc&&pc.stopTimeline(),Gc[Jc]&&lc.setDesc(Gc[Jc])},onSlide:function(){var t=lc.getClosestDescription(Wc,pc.getCurrentDate());lc.setDesc(Gc[t])}})}function as(t){Array.from(document.querySelectorAll(".country-name")).forEach(function(n){n.textContent=t})}function cs(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach(function(t){return t.classList.remove("hide-on-load")})}window.addEventListener("resize",function(){var t=r.calculate();ns!=t&&(ns=t,os())});n.a=function(t,n,e,r,i){return is.apply(this,arguments)}},function(t,n,e){t.exports=e(26)("native-function-to-string",Function.toString)},function(t,n,e){"use strict";var r=e(36),i=e(19),o=e(24),u={};e(9)(u,e(0)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(u,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(6),i=e(4),o=e(22);t.exports=e(7)?Object.defineProperties:function(t,n){i(t);for(var e,u=o(n),a=u.length,c=0;a>c;)r.f(t,e=u[c++],n[e]);return t}},function(t,n,e){var r=e(27),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(12),i=e(16),o=e(37)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,e){var r=e(2),i=e(11),o=e(5);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],u={};u[t]=n(e),r(r.S+r.F*o(function(){e(1)}),"Object",u)}},function(t,n,e){var r=e(90);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(3),i=e(40),o=e(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){var r=e(4),i=e(21),o=e(0)("species");t.exports=function(t,n){var e,u=r(t).constructor;return void 0===u||null==(e=r(u)[o])?n:i(e)}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(1),i=e(65).set,o=r.MutationObserver||r.WebKitMutationObserver,u=r.process,a=r.Promise,c="process"==e(14)(u);t.exports=function(){var t,n,e,s=function(){var r,i;for(c&&(r=u.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){u.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(a&&a.resolve){var l=a.resolve(void 0);e=function(){l.then(s)}}else e=function(){i.call(r,s)};else{var f=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),e=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(4),i=e(3),o=e(66);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(6),i=e(19);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){"use strict";var r=e(68)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){"use strict";var r=e(29),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(101);var r=e(8),i=e(9),o=e(5),u=e(15),a=e(0),c=e(70),s=a("species"),l=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),f=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=a(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),v=p?!o(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!v||"replace"===t&&!l||"split"===t&&!f){var d=/./[h],g=e(u,h,""[t],function(t,n,e,r,i){return n.exec===c?p&&!i?{done:!0,value:d.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),i(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){"use strict";var r=e(70);e(2)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){"use strict";e(103)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){var r=e(2),i=e(15),o=e(5),u=e(104),a="["+u+"]",c=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),l=function(t,n,e){var i={},a=o(function(){return!!u[t]()||"âÂ"!="âÂ"[t]()}),c=i[t]=a?n(f):u[t];e&&(i[e]=c),r(r.P+r.F*a,"String",i)},f=l.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=l},function(t,n){t.exports="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(6).f(RegExp.prototype,"flags",{configurable:!0,get:e(47)})},function(t,n,e){e(74)("asyncIterator")},function(t,n,e){"use strict";var r=e(1),i=e(12),o=e(7),u=e(2),a=e(8),c=e(48).KEY,s=e(5),l=e(26),f=e(24),h=e(18),p=e(0),v=e(75),d=e(74),g=e(108),m=e(40),y=e(4),w=e(3),x=e(13),b=e(34),_=e(19),S=e(36),M=e(109),E=e(78),C=e(6),A=e(22),N=E.f,T=C.f,k=M.f,P=r.Symbol,O=r.JSON,D=O&&O.stringify,U=p("_hidden"),j=p("toPrimitive"),L={}.propertyIsEnumerable,F=l("symbol-registry"),R=l("symbols"),H=l("op-symbols"),I=Object.prototype,V="function"==typeof P,Y=r.QObject,z=!Y||!Y.prototype||!Y.prototype.findChild,q=o&&s(function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=N(I,n);r&&delete I[n],T(t,n,e),r&&t!==I&&T(I,n,r)}:T,B=function(t){var n=R[t]=S(P.prototype);return n._k=t,n},X=V&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},$=function(t,n,e){return t===I&&$(H,n,e),y(t),n=b(n,!0),y(e),i(R,n)?(e.enumerable?(i(t,U)&&t[U][n]&&(t[U][n]=!1),e=S(e,{enumerable:_(0,!1)})):(i(t,U)||T(t,U,_(1,{})),t[U][n]=!0),q(t,n,e)):T(t,n,e)},G=function(t,n){y(t);for(var e,r=g(n=x(n)),i=0,o=r.length;o>i;)$(t,e=r[i++],n[e]);return t},W=function(t){var n=L.call(this,t=b(t,!0));return!(this===I&&i(R,t)&&!i(H,t))&&(!(n||!i(this,t)||!i(R,t)||i(this,U)&&this[U][t])||n)},Z=function(t,n){if(t=x(t),n=b(n,!0),t!==I||!i(R,n)||i(H,n)){var e=N(t,n);return!e||!i(R,n)||i(t,U)&&t[U][n]||(e.enumerable=!0),e}},J=function(t){for(var n,e=k(x(t)),r=[],o=0;e.length>o;)i(R,n=e[o++])||n==U||n==c||r.push(n);return r},Q=function(t){for(var n,e=t===I,r=k(e?H:x(t)),o=[],u=0;r.length>u;)!i(R,n=r[u++])||e&&!i(I,n)||o.push(R[n]);return o};V||(a((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===I&&n.call(H,e),i(this,U)&&i(this[U],t)&&(this[U][t]=!1),q(this,t,_(1,e))};return o&&z&&q(I,t,{configurable:!0,set:n}),B(t)}).prototype,"toString",function(){return this._k}),E.f=Z,C.f=$,e(77).f=M.f=J,e(49).f=W,e(76).f=Q,o&&!e(17)&&a(I,"propertyIsEnumerable",W,!0),v.f=function(t){return B(p(t))}),u(u.G+u.W+u.F*!V,{Symbol:P});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)p(K[tt++]);for(var nt=A(p.store),et=0;nt.length>et;)d(nt[et++]);u(u.S+u.F*!V,"Symbol",{for:function(t){return i(F,t+="")?F[t]:F[t]=P(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var n in F)if(F[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),u(u.S+u.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):G(S(t),n)},defineProperty:$,defineProperties:G,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),O&&u(u.S+u.F*(!V||s(function(){var t=P();return"[null]"!=D([t])||"{}"!=D({a:t})||"{}"!=D(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(w(n)||void 0!==t)&&!X(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!X(n))return n}),r[1]=n,D.apply(O,r)}}),P.prototype[j]||e(9)(P.prototype,j,P.prototype.valueOf),f(P,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(t,n,e){var r=e(22),i=e(76),o=e(49);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var u,a=e(t),c=o.f,s=0;a.length>s;)c.call(t,u=a[s++])&&n.push(u);return n}},function(t,n,e){var r=e(13),i=e(77).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(r(t))}},function(t,n,e){var r=e(2);r(r.S,"Array",{isArray:e(40)})},function(t,n,e){"use strict";var r=e(2),i=e(21),o=e(16),u=e(5),a=[].sort,c=[1,2,3];r(r.P+r.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!e(28)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(79),i=e(50);t.exports=e(80)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(i(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){var r=e(3),i=e(114).set;t.exports=function(t,n,e){var o,u=n.constructor;return u!==e&&"function"==typeof u&&(o=u.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(3),i=e(4),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(10)(Function.call,e(78).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){"use strict";var r=e(79),i=e(50);t.exports=e(80)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r=e(2),i=e(56)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(51)("includes")},function(t,n,e){"use strict";var r=e(2),i=e(118);r(r.P+r.F*e(120)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(119),i=e(15);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(i(t))}},function(t,n,e){var r=e(3),i=e(14),o=e(0)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,e){var r=e(0)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){"use strict";e.r(n);var r=e(82),i="China",o="./data/20190325-china.csv",u="./data/20190325-all-geo-satellites.csv",a={"2016-11-10":"November event stuff","2016-12-10":"December event stuff","2017-05-10":"May event stuff"},c=[-144,-6];window.addEventListener("DOMContentLoaded",function(){Object(r.a)(o,u,a,i,c)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faGlkZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jdHguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVmaW5lZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbGlicmFyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaWN0LW1ldGhvZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RvbS1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LW1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZm9yLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyLWRldGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tZXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1waWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdmFsaWRhdGUtY29sbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faHRtbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1hcnJheS1pdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fd2tzLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24tc3Ryb25nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL25vdWlzbGlkZXIvZGlzdHJpYnV0ZS9ub3Vpc2xpZGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9icmVha3BvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9hZGRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9tYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvc3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2FyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2FydGVzaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3JvdGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wb2ludEVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVqb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvbHlnb25Db250YWlucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL2Jpc2VjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9jcm9zcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aHJlc2hvbGQvc3R1cmdlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3ppcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvYW50aW1lcmlkaWFuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvY2lyY2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9hcmVhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvYm91bmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvY2VudHJvaWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvbWVhc3VyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2ZpdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL3Jlc2FtcGxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWxFcXVhbEFyZWEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9hemltdXRoYWxFcXVpZGlzdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL21lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZXF1aXJlY3Rhbmd1bGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vY29uaWNFcXVpZGlzdGFudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2VxdWFsRWFydGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9nbm9tb25pYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL25hdHVyYWxFYXJ0aDEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9vcnRob2dyYXBoaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9zdGVyZW9ncmFwaGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vdHJhbnN2ZXJzZU1lcmNhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtYXJyYXkvc3JjL3RpY2tzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL29yZGluYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jb2xvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL21hdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9sYWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWNvbG9yL3NyYy9jdWJlaGVsaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9yZ2IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3RyYW5zZm9ybS9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3ZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvcm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vZGVjb21wb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvem9vbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hzbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2hjbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2N1YmVoZWxpeC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3F1YW50aXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvY29uc3RhbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9jb250aW51b3VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZXhwb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0UHJlZml4QXV0by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHlwZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvaWRlbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdEdyb3VwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL3ByZWNpc2lvbkZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvdGlja0Zvcm1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25QcmVmaXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9saW5lYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL2ludGVydmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9taWxsaXNlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3NlY29uZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvbWludXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9ob3VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy9kYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3dlZWsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL21vbnRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy95ZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lL3NyYy91dGNNaW51dGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0hvdXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y0RheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjV2Vlay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZS9zcmMvdXRjTW9udGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUvc3JjL3V0Y1llYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWUtZm9ybWF0L3NyYy9kZWZhdWx0TG9jYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvRm9ybWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10aW1lLWZvcm1hdC9zcmMvaXNvUGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvY3JlYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9tYXRjaGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9hdHRyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3dpbmRvdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NsYXNzZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3JhaXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9sb3dlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5zZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2Nsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9vbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9leGl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9tZXJnZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL25vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9ub2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9lbXB0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2FwcGVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGF0dW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL2xvY2FsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kaXNwYXRjaC9zcmMvZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRpbWVyL3NyYy90aW1lci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc2NoZWR1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vaW50ZXJwb2xhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vcmVtb3ZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3RBbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZmlsdGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RyYW5zaXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9hdHRyVHdlZW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vc3R5bGVUd2Vlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kZWxheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9kdXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvcG9seS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvc2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9iYWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9lbGFzdGljLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZWFzZS9zcmMvY3ViaWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3NlbGVjdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvaW50ZXJydXB0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9hY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3Rvb2x0aXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvcG9qc29uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b3BvanNvbi9ub2RlX21vZHVsZXMvdG9wb2pzb24tY2xpZW50L3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvcG9qc29uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvcG9qc29uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2ZlYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvcG9qc29uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2Jpc2VjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG9wb2pzb24vbm9kZV9tb2R1bGVzL3RvcG9qc29uLXNlcnZlci9zcmMvaGFzaC9wb2ludC1oYXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90b3BvanNvbi9ub2RlX21vZHVsZXMvdG9wb2pzb24tc2ltcGxpZnkvc3JjL3NwaGVyaWNhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY2hhcnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL3NwZWVkLWNvbnRyb2xzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90ZXh0LWRlc2NyaXB0aW9uLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy90aW1lbGluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZHN2L3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1kc3Yvc3JjL3Rzdi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL3RleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kMy1mZXRjaC9zcmMveG1sLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9kYXRhLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1hYnNvbHV0ZS1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1zYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGVyZm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcudHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctd3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLmZsYWdzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BuLWV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5zb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3NldC1wcm90by5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mYWlscy1pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NoaW5hLmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwiZ2xvYmFsIiwid2luZG93IiwiTWF0aCIsInNlbGYiLCJGdW5jdGlvbiIsIl9fZyIsImNvcmUiLCJoaWRlIiwicmVkZWZpbmUiLCJjdHgiLCIkZXhwb3J0IiwidHlwZSIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwidGFyZ2V0IiwiZXhwUHJvdG8iLCJ1bmRlZmluZWQiLCJVIiwiVyIsIlIiLCJpdCIsImlzT2JqZWN0IiwiVHlwZUVycm9yIiwiZXhlYyIsImUiLCJhbk9iamVjdCIsIklFOF9ET01fREVGSU5FIiwidG9QcmltaXRpdmUiLCJkUCIsImYiLCJPIiwiQXR0cmlidXRlcyIsImEiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiY3JlYXRlRGVzYyIsImFGdW5jdGlvbiIsImZuIiwidGhhdCIsImxlbmd0aCIsImIiLCJhcHBseSIsImFyZ3VtZW50cyIsInZlcnNpb24iLCJfX2UiLCJJT2JqZWN0IiwiZGVmaW5lZCIsInRvU3RyaW5nIiwic2xpY2UiLCJpZCIsInB4IiwicmFuZG9tIiwiY29uY2F0IiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCIka2V5cyIsImVudW1CdWdLZXlzIiwia2V5cyIsInRvSW50ZWdlciIsIm1pbiIsImRlZiIsIlRBRyIsInRhZyIsInN0YXQiLCJhZGRUb1Vuc2NvcGFibGVzIiwic3RlcCIsIkl0ZXJhdG9ycyIsInRvSU9iamVjdCIsIkFycmF5IiwiaXRlcmF0ZWQiLCJraW5kIiwiX3QiLCJfaSIsIl9rIiwiaW5kZXgiLCJBcmd1bWVudHMiLCJwdXNoIiwiY29weXJpZ2h0IiwiY2VpbCIsImZsb29yIiwiaXNOYU4iLCJmYWlscyIsIm1ldGhvZCIsImFyZyIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJjbGFzc29mIiwidGVzdCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiZm9yRWFjaCIsImNhbGxiYWNrZm4iLCIkaXRlcmF0b3JzIiwiZ2V0S2V5cyIsIndrcyIsIklURVJBVE9SIiwiVE9fU1RSSU5HX1RBRyIsIkFycmF5VmFsdWVzIiwiRE9NSXRlcmFibGVzIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJjb2xsZWN0aW9ucyIsIk5BTUUiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJwcm90byIsImRvY3VtZW50IiwiaXMiLCJjcmVhdGVFbGVtZW50IiwidmFsdWVPZiIsIkxJQlJBUlkiLCIkaXRlckNyZWF0ZSIsInNldFRvU3RyaW5nVGFnIiwiZ2V0UHJvdG90eXBlT2YiLCJCVUdHWSIsInJldHVyblRoaXMiLCJCYXNlIiwiQ29uc3RydWN0b3IiLCJuZXh0IiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIm1ldGhvZHMiLCJJdGVyYXRvclByb3RvdHlwZSIsImdldE1ldGhvZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZW50cmllcyIsInZhbHVlcyIsImRQcyIsIklFX1BST1RPIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwid3JpdGUiLCJsdCIsImNsb3NlIiwiUHJvcGVydGllcyIsInJlc3VsdCIsInNoYXJlZCIsInRvT2JqZWN0IiwidG9MZW5ndGgiLCJhc2MiLCJUWVBFIiwiJGNyZWF0ZSIsIklTX01BUCIsIklTX0ZJTFRFUiIsIklTX1NPTUUiLCJJU19FVkVSWSIsIklTX0ZJTkRfSU5ERVgiLCJOT19IT0xFUyIsIiR0aGlzIiwicmVzIiwiaXNBcnJheSIsImZvcmJpZGRlbkZpZWxkIiwiaXNBcnJheUl0ZXIiLCJnZXRJdGVyRm4iLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiaXRlcmF0b3IiLCJpdGVyRm4iLCJkb25lIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJmcm9tIiwic2tpcENsb3NpbmciLCJhcnIiLCJpdGVyIiwiJGF0IiwicG9pbnQiLCJjcmVhdGVQcm9wZXJ0eSIsImFycmF5TGlrZSIsIkMiLCJhTGVuIiwibWFwZm4iLCJtYXBwaW5nIiwiaWdub3JlQ2FzZSIsIm11bHRpbGluZSIsInVuaWNvZGUiLCJzdGlja3kiLCJNRVRBIiwic2V0RGVzYyIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiS0VZIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90byIsImFycmF5SW5kZXhPZiIsIm5hbWVzIiwidG9BYnNvbHV0ZUluZGV4IiwiSVNfSU5DTFVERVMiLCJlbCIsImZyb21JbmRleCIsImRvY3VtZW50RWxlbWVudCIsIiRtYXAiLCJtYXAiLCJydW50aW1lIiwiT3AiLCJoYXNPd24iLCIkU3ltYm9sIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwcm90b0dlbmVyYXRvciIsIkdlbmVyYXRvciIsImdlbmVyYXRvciIsImNvbnRleHQiLCJDb250ZXh0IiwiX2ludm9rZSIsInN0YXRlIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiRXJyb3IiLCJHZW5TdGF0ZUNvbXBsZXRlZCIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZSIsImRlbGVnYXRlUmVzdWx0IiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsIkNvbnRpbnVlU2VudGluZWwiLCJzZW50IiwiX3NlbnQiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImFicnVwdCIsInJlY29yZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIm1ha2VJbnZva2VNZXRob2QiLCJvYmoiLCJlcnIiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiZ2V0UHJvdG8iLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbnZva2UiLCJfX2F3YWl0IiwidGhlbiIsInVud3JhcHBlZCIsImVycm9yIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhdG9yTWV0aG9kIiwiY29uc3RydWN0b3IiLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsInJldmVyc2UiLCJwb3AiLCJza2lwVGVtcFJlc2V0IiwicHJldiIsImNoYXJBdCIsInN0b3AiLCJyb290UmVjb3JkIiwicnZhbCIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImZpbmFsbHlFbnRyeSIsImNvbXBsZXRlIiwiZmluaXNoIiwiY2F0Y2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJJbnRlcm5hbCIsIm5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eSIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiV3JhcHBlciIsImFuSW5zdGFuY2UiLCJmb3JPZiIsInNwZWNpZXNDb25zdHJ1Y3RvciIsInRhc2siLCJzZXQiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJ1c2VyQWdlbnQiLCJwcm9taXNlUmVzb2x2ZSIsInByb2Nlc3MiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJpc05vZGUiLCJlbXB0eSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwiVVNFX05BVElWRSIsInByb21pc2UiLCJGYWtlUHJvbWlzZSIsIlByb21pc2VSZWplY3Rpb25FdmVudCIsImluZGV4T2YiLCJpc1RoZW5hYmxlIiwibm90aWZ5IiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJydW4iLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiZG9tYWluIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwiY29uc29sZSIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJ2Iiwib25yZWplY3Rpb25oYW5kbGVkIiwiJHJlamVjdCIsIl9kIiwiX3ciLCIkcmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImNhcGFiaWxpdHkiLCIkJHJlamVjdCIsIngiLCJhbGwiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsInJldCIsImdldEl0ZXJhdG9yTWV0aG9kIiwiZGVmZXIiLCJjaGFubmVsIiwicG9ydCIsImh0bWwiLCJjZWwiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwibGlzdGVuZXIiLCJldmVudCIsImRhdGEiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsInJlbW92ZUNoaWxkIiwic2V0VGltZW91dCIsImNsZWFyIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJUT19TVFJJTkciLCJwb3MiLCJjaGFyQ29kZUF0IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIm1heCIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJtYXliZUNhbGxOYXRpdmUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlZ2V4cCIsInJ4IiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsImxhc3RJbmRleCIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwiaiIsIm5hbWVkQ2FwdHVyZXMiLCJncm91cHMiLCJyZXBsYWNlckFyZ3MiLCJyZXBsYWNlbWVudCIsImdldFN1YnN0aXR1dGlvbiIsInN0ciIsInRhaWxQb3MiLCJzeW1ib2xzIiwibWF0Y2giLCJjaCIsImNhcHR1cmUiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJSZWdFeHAiLCJuYXRpdmVSZXBsYWNlIiwicmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsInJlIiwiJGZsYWdzIiwiZGVmaW5lIiwiZmxhZ3MiLCJEYXRlUHJvdG8iLCJEYXRlIiwiZ2V0VGltZSIsIk5hTiIsIiRmaWx0ZXIiLCJmaWx0ZXIiLCJ3a3NFeHQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInBJRSIsImdPUEQiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJyZWRlZmluZUFsbCIsIiRpdGVyRGVmaW5lIiwic2V0U3BlY2llcyIsInZhbGlkYXRlIiwiU0laRSIsImdldEVudHJ5IiwiX2YiLCJrIiwiZ2V0Q29uc3RydWN0b3IiLCJBRERFUiIsIl9sIiwiZGVsZXRlIiwic2V0U3Ryb25nIiwiJGl0ZXJEZXRlY3QiLCJpbmhlcml0SWZSZXF1aXJlZCIsImNvbW1vbiIsIklTX1dFQUsiLCJmaXhNZXRob2QiLCJpbnN0YW5jZSIsIkhBU05UX0NIQUlOSU5HIiwiVEhST1dTX09OX1BSSU1JVElWRVMiLCJBQ0NFUFRfSVRFUkFCTEVTIiwiQlVHR1lfWkVSTyIsIiRpbnN0YW5jZSIsIl9fV0VCUEFDS19BTURfREVGSU5FX0ZBQ1RPUllfXyIsIl9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18iLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsIlZFUlNJT04iLCJyZW1vdmVFbGVtZW50IiwicGFyZW50RWxlbWVudCIsImlzU2V0IiwicHJldmVudERlZmF1bHQiLCJpc051bWVyaWMiLCJpc0Zpbml0ZSIsImFkZENsYXNzRm9yIiwiZWxlbWVudCIsImNsYXNzTmFtZSIsImR1cmF0aW9uIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImxpbWl0IiwiYXNBcnJheSIsImNvdW50RGVjaW1hbHMiLCJudW1TdHIiLCJwaWVjZXMiLCJjbGFzc0xpc3QiLCJhZGQiLCJyZW1vdmUiLCJnZXRQYWdlT2Zmc2V0IiwiZG9jIiwic3VwcG9ydFBhZ2VPZmZzZXQiLCJwYWdlWE9mZnNldCIsImlzQ1NTMUNvbXBhdCIsImNvbXBhdE1vZGUiLCJzY3JvbGxMZWZ0IiwiYm9keSIsInkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsInN1YlJhbmdlUmF0aW8iLCJwYSIsInBiIiwiZnJvbVBlcmNlbnRhZ2UiLCJyYW5nZSIsImdldEoiLCJ0b1N0ZXBwaW5nIiwieFZhbCIsInhQY3QiLCJ2YSIsInZiIiwiYWJzIiwidG9QZXJjZW50YWdlIiwiZ2V0U3RlcCIsInhTdGVwcyIsInNuYXAiLCJ0byIsInJvdW5kIiwiY2xvc2VzdCIsImhhbmRsZUVudHJ5UG9pbnQiLCJwZXJjZW50YWdlIiwicGFyc2VGbG9hdCIsInhIaWdoZXN0Q29tcGxldGVTdGVwIiwiaGFuZGxlU3RlcFBvaW50IiwidG90YWxTdGVwcyIsInhOdW1TdGVwcyIsImhpZ2hlc3RTdGVwIiwiTnVtYmVyIiwidG9GaXhlZCIsIlNwZWN0cnVtIiwic2luZ2xlU3RlcCIsIm9yZGVyZWQiLCJzb3J0IiwiZ2V0TWFyZ2luIiwiZnJvbVN0ZXBwaW5nIiwiaXNQZXJjZW50YWdlIiwiZ2V0RGVmYXVsdFN0ZXAiLCJpc0Rvd24iLCJzaXplIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJjb252ZXJ0IiwiZGVmYXVsdEZvcm1hdHRlciIsInZhbGlkYXRlRm9ybWF0IiwiaXNWYWxpZEZvcm1hdHRlciIsInRlc3RTdGVwIiwicGFyc2VkIiwidGVzdFJhbmdlIiwic3BlY3RydW0iLCJ0ZXN0U3RhcnQiLCJoYW5kbGVzIiwic3RhcnQiLCJ0ZXN0U25hcCIsInRlc3RBbmltYXRlIiwiYW5pbWF0ZSIsInRlc3RBbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkR1cmF0aW9uIiwidGVzdENvbm5lY3QiLCJjb25uZWN0IiwidGVzdE9yaWVudGF0aW9uIiwib3J0IiwidGVzdE1hcmdpbiIsIm1hcmdpbiIsInRlc3RMaW1pdCIsInRlc3RQYWRkaW5nIiwicGFkZGluZyIsInRlc3REaXJlY3Rpb24iLCJkaXIiLCJ0ZXN0QmVoYXZpb3VyIiwidGFwIiwiZHJhZyIsImZpeGVkIiwiaG92ZXIiLCJ1bmNvbnN0cmFpbmVkIiwiZXZlbnRzIiwidGVzdFRvb2x0aXBzIiwidG9vbHRpcHMiLCJmb3JtYXR0ZXIiLCJ0ZXN0QXJpYUZvcm1hdCIsImFyaWFGb3JtYXQiLCJ0ZXN0Rm9ybWF0IiwiZm9ybWF0IiwidGVzdEtleWJvYXJkU3VwcG9ydCIsImtleWJvYXJkU3VwcG9ydCIsInRlc3REb2N1bWVudEVsZW1lbnQiLCJ0ZXN0Q3NzUHJlZml4IiwiY3NzUHJlZml4IiwidGVzdENzc0NsYXNzZXMiLCJjc3NDbGFzc2VzIiwidGVzdE9wdGlvbnMiLCJvcHRpb25zIiwidGVzdHMiLCJkaXJlY3Rpb24iLCJvcmllbnRhdGlvbiIsImJlaGF2aW91ciIsImRlZmF1bHRzIiwiYmFzZSIsIm9yaWdpbiIsImhhbmRsZUxvd2VyIiwiaGFuZGxlVXBwZXIiLCJ0b3VjaEFyZWEiLCJob3Jpem9udGFsIiwidmVydGljYWwiLCJiYWNrZ3JvdW5kIiwiY29ubmVjdHMiLCJsdHIiLCJydGwiLCJkcmFnZ2FibGUiLCJhY3RpdmUiLCJ0b29sdGlwIiwicGlwcyIsInBpcHNIb3Jpem9udGFsIiwicGlwc1ZlcnRpY2FsIiwibWFya2VyIiwibWFya2VySG9yaXpvbnRhbCIsIm1hcmtlclZlcnRpY2FsIiwibWFya2VyTm9ybWFsIiwibWFya2VyTGFyZ2UiLCJtYXJrZXJTdWIiLCJ2YWx1ZUhvcml6b250YWwiLCJ2YWx1ZVZlcnRpY2FsIiwidmFsdWVOb3JtYWwiLCJ2YWx1ZUxhcmdlIiwidmFsdWVTdWIiLCJtc1ByZWZpeCIsIm1zVHJhbnNmb3JtIiwibm9QcmVmaXgiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1SdWxlIiwic2NvcGUiLCJvcmlnaW5hbE9wdGlvbnMiLCJzY29wZV9CYXNlIiwic2NvcGVfSGFuZGxlcyIsInNjb3BlX0Nvbm5lY3RzIiwic2NvcGVfUGlwcyIsInNjb3BlX1Rvb2x0aXBzIiwic2NvcGVfU2VsZiIsImFkZFRhcmdldCIsImFjdGlvbnMiLCJuYXZpZ2F0b3IiLCJwb2ludGVyRW5hYmxlZCIsIm1vdmUiLCJlbmQiLCJtc1BvaW50ZXJFbmFibGVkIiwic3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUiLCJDU1MiLCJzdXBwb3J0cyIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJnZXRTdXBwb3J0c1Bhc3NpdmUiLCJzY29wZV9UYXJnZXQiLCJzY29wZV9TcGVjdHJ1bSIsInNjb3BlX1ZhbHVlcyIsInNjb3BlX0xvY2F0aW9ucyIsInNjb3BlX0hhbmRsZU51bWJlcnMiLCJzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQiLCJzY29wZV9FdmVudHMiLCJzY29wZV9Eb2N1bWVudCIsIm93bmVyRG9jdW1lbnQiLCJzY29wZV9Eb2N1bWVudEVsZW1lbnQiLCJzY29wZV9Cb2R5IiwiUElQU19OT05FIiwiUElQU19OT19WQUxVRSIsIlBJUFNfTEFSR0VfVkFMVUUiLCJQSVBTX1NNQUxMX1ZBTFVFIiwic2NvcGVfRGlyT2Zmc2V0IiwiYWRkTm9kZVRvIiwiZGl2IiwiYWRkT3JpZ2luIiwiaGFuZGxlTnVtYmVyIiwic2V0QXR0cmlidXRlIiwiaXNTbGlkZXJEaXNhYmxlZCIsImlzSGFuZGxlRGlzYWJsZWQiLCJob3Jpem9udGFsS2V5cyIsInZlcnRpY2FsS2V5cyIsImlzVXAiLCJnZXROZXh0U3RlcHNGb3JIYW5kbGUiLCJ2YWx1ZVNldEhhbmRsZSIsImV2ZW50S2V5ZG93biIsImFkZENvbm5lY3QiLCJhZGRUb29sdGlwIiwiZmlyc3RDaGlsZCIsImhhc0F0dHJpYnV0ZSIsImhhbmRsZU9yaWdpbiIsInJlbW92ZVRvb2x0aXBzIiwicmVtb3ZlRXZlbnQiLCJiaW5kRXZlbnQiLCJ1bmVuY29kZWQiLCJmb3JtYXR0ZWRWYWx1ZSIsImlubmVySFRNTCIsImFkZE1hcmtpbmciLCJzcHJlYWQiLCJmaWx0ZXJGdW5jIiwidmFsdWVTaXplQ2xhc3NlcyIsIm1hcmtlclNpemVDbGFzc2VzIiwidmFsdWVPcmllbnRhdGlvbkNsYXNzZXMiLCJtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXMiLCJnZXRDbGFzc2VzIiwib3JpZW50YXRpb25DbGFzc2VzIiwic2l6ZUNsYXNzZXMiLCJvZmZzZXQiLCJub2RlIiwiYWRkU3ByZWFkIiwicmVtb3ZlUGlwcyIsImdyaWQiLCJkZW5zaXR5Iiwic3RlcHBlZCIsImdyb3VwIiwiaW50ZXJ2YWwiLCJnZXRHcm91cCIsImFycmF5IiwiaW5kZXhlcyIsImZpcnN0SW5SYW5nZSIsImxhc3RJblJhbmdlIiwiaWdub3JlRmlyc3QiLCJpZ25vcmVMYXN0IiwicHJldlBjdCIsInVuc2hpZnQiLCJjdXJyZW50IiwicSIsIm5ld1BjdCIsInBjdERpZmZlcmVuY2UiLCJwY3RQb3MiLCJzdGVwcyIsInJlYWxTdGVwcyIsInN0ZXBTaXplIiwibG93IiwiaGlnaCIsImlzU3RlcHMiLCJnZW5lcmF0ZVNwcmVhZCIsImJhc2VTaXplIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFsdCIsIndpZHRoIiwiaGVpZ2h0IiwiYXR0YWNoRXZlbnQiLCJjYWxsYmFjayIsInBhZ2VPZmZzZXQiLCJldmVudFRhcmdldCIsInRvdWNoIiwibW91c2UiLCJwb2ludGVyIiwiaXNUb3VjaE9uVGFyZ2V0IiwiY2hlY2tUb3VjaCIsImNvbnRhaW5zIiwidGFyZ2V0VG91Y2hlcyIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidGFyZ2V0VG91Y2giLCJmaW5kIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsInBvaW50cyIsImN1cnNvciIsImZpeEV2ZW50IiwiZG9Ob3RSZWplY3QiLCJidXR0b25zIiwiY2FsY1BvaW50IiwiZXZlbnROYW1lIiwicGFzc2l2ZSIsImNhbGNQb2ludFRvUGVyY2VudGFnZSIsImVsZW0iLCJkb2NFbGVtIiwibG9jYXRpb24iLCJ0b3AiLCJjbGllbnRUb3AiLCJsZWZ0IiwiY2xpZW50TGVmdCIsInByb3Bvc2FsIiwiZG9jdW1lbnRMZWF2ZSIsIm5vZGVOYW1lIiwicmVsYXRlZFRhcmdldCIsImV2ZW50RW5kIiwiZXZlbnRNb3ZlIiwiYXBwVmVyc2lvbiIsImJ1dHRvbnNQcm9wZXJ0eSIsIm1vdmVtZW50Iiwic3RhcnRDYWxjUG9pbnQiLCJtb3ZlSGFuZGxlcyIsImxvY2F0aW9ucyIsImhhbmRsZU51bWJlcnMiLCJsaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2V0WmluZGV4IiwiZmlyZUV2ZW50IiwiZXZlbnRTdGFydCIsInNvbWUiLCJjaGlsZHJlbiIsInN0b3BQcm9wYWdhdGlvbiIsIm1vdmVFdmVudCIsImVuZEV2ZW50Iiwib3V0RXZlbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwiZXZlbnRUYXAiLCJnZXRDbG9zZXN0SGFuZGxlIiwic2V0SGFuZGxlIiwiZXZlbnRIb3ZlciIsInRhcmdldEV2ZW50IiwibmFtZXNwYWNlZEV2ZW50IiwibmFtZXNwYWNlIiwic3Vic3RyaW5nIiwidEV2ZW50IiwidE5hbWVzcGFjZSIsImV2ZW50VHlwZSIsImNoZWNrSGFuZGxlUG9zaXRpb24iLCJyZWZlcmVuY2UiLCJsb29rQmFja3dhcmQiLCJsb29rRm9yd2FyZCIsImdldFZhbHVlIiwiaW5SdWxlT3JkZXIiLCJ1cHdhcmQiLCJwcm9wb3NhbHMiLCJ0cmFuc2Zvcm1EaXJlY3Rpb24iLCJ6SW5kZXgiLCJydWxlIiwidXBkYXRlQ29ubmVjdCIsInVwZGF0ZUhhbmRsZVBvc2l0aW9uIiwiaCIsImNvbm5lY3RXaWR0aCIsInRyYW5zbGF0ZVJ1bGUiLCJzY2FsZVJ1bGUiLCJyZXNvbHZlVG9WYWx1ZSIsInZhbHVlU2V0IiwiaW5wdXQiLCJmaXJlU2V0RXZlbnQiLCJpc0luaXQiLCJ2YWx1ZUdldCIsIm5lYXJieVN0ZXBzIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiY29ubmVjdE9wdGlvbnMiLCJjb25uZWN0QmFzZSIsImFkZEVsZW1lbnRzIiwiaGFuZGxlQmVmb3JlIiwiaGFuZGxlQWZ0ZXIiLCJldmVudEhvbGRlcnMiLCJldmVudEhvbGRlciIsInBvc2l0aW9ucyIsInRleHQiLCJkZXN0cm95Iiwibm9VaVNsaWRlciIsIm9uIiwib2ZmIiwiX19tb3ZlSGFuZGxlcyIsInVwZGF0ZU9wdGlvbnMiLCJvcHRpb25zVG9VcGRhdGUiLCJ1cGRhdGVBYmxlIiwibmV3T3B0aW9ucyIsIl9fc3BlY3RydW0iLCJhcGkiLCJicmVha3BvaW50cyIsImNhbGN1bGF0ZSIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltIiwiaXNNb2JpbGUiLCJicmVha3BvaW50IiwiYWRkZXIiLCJBZGRlciIsInRlbXAiLCJidiIsImF2IiwiZXBzaWxvbiIsInBpIiwiUEkiLCJoYWxmUGkiLCJxdWFydGVyUGkiLCJ0YXUiLCJkZWdyZWVzIiwicmFkaWFucyIsImF0YW4iLCJhdGFuMiIsImNvcyIsImxvZyIsInNpbiIsInBvdyIsInNxcnQiLCJzaWduIiwidGFuIiwiYWNvcyIsImFzaW4iLCJub29wIiwic3RyZWFtR2VvbWV0cnkiLCJnZW9tZXRyeSIsInN0cmVhbSIsInN0cmVhbUdlb21ldHJ5VHlwZSIsInN0cmVhbU9iamVjdFR5cGUiLCJGZWF0dXJlIiwiRmVhdHVyZUNvbGxlY3Rpb24iLCJmZWF0dXJlcyIsIlNwaGVyZSIsInNwaGVyZSIsIlBvaW50IiwiY29vcmRpbmF0ZXMiLCJNdWx0aVBvaW50IiwiTGluZVN0cmluZyIsInN0cmVhbUxpbmUiLCJNdWx0aUxpbmVTdHJpbmciLCJQb2x5Z29uIiwic3RyZWFtUG9seWdvbiIsIk11bHRpUG9seWdvbiIsIkdlb21ldHJ5Q29sbGVjdGlvbiIsImdlb21ldHJpZXMiLCJjbG9zZWQiLCJjb29yZGluYXRlIiwibGluZVN0YXJ0IiwibGluZUVuZCIsInBvbHlnb25TdGFydCIsInBvbHlnb25FbmQiLCJzcmNfc3RyZWFtIiwiY2FydGVzaWFuX3NwaGVyaWNhbCIsImNhcnRlc2lhbiIsImNhcnRlc2lhbl9jYXJ0ZXNpYW4iLCJzcGhlcmljYWwiLCJsYW1iZGEiLCJwaGkiLCJjb3NQaGkiLCJjYXJ0ZXNpYW5Eb3QiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNhcnRlc2lhbkFkZEluUGxhY2UiLCJjYXJ0ZXNpYW5TY2FsZSIsInZlY3RvciIsImNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UiLCJjb21wb3NlIiwiaW52ZXJ0Iiwicm90YXRpb25JZGVudGl0eSIsInJvdGF0ZVJhZGlhbnMiLCJkZWx0YUxhbWJkYSIsImRlbHRhUGhpIiwiZGVsdGFHYW1tYSIsInJvdGF0aW9uTGFtYmRhIiwicm90YXRpb25QaGlHYW1tYSIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsInJvdGF0aW9uIiwiY29zRGVsdGFQaGkiLCJzaW5EZWx0YVBoaSIsImNvc0RlbHRhR2FtbWEiLCJzaW5EZWx0YUdhbW1hIiwieiIsImNpcmNsZVN0cmVhbSIsInJhZGl1cyIsImRlbHRhIiwidDAiLCJ0MSIsImNvc1JhZGl1cyIsInNpblJhZGl1cyIsImNpcmNsZVJhZGl1cyIsImJ1ZmZlciIsImxpbmUiLCJsaW5lcyIsInJlam9pbiIsInNoaWZ0IiwicG9pbnRFcXVhbCIsIkludGVyc2VjdGlvbiIsIm90aGVyIiwic2VnbWVudHMiLCJjb21wYXJlSW50ZXJzZWN0aW9uIiwic3RhcnRJbnNpZGUiLCJpbnRlcnBvbGF0ZSIsInN1YmplY3QiLCJjbGlwIiwic2VnbWVudCIsInAwIiwicDEiLCJyZWpvaW5fbGluayIsImlzU3ViamVjdCIsInBvbHlnb25Db250YWluc19zdW0iLCJwb2x5Z29uQ29udGFpbnMiLCJwb2x5Z29uIiwic2luUGhpIiwibm9ybWFsIiwiYW5nbGUiLCJ3aW5kaW5nIiwicmluZyIsInBvaW50MCIsImxhbWJkYTAiLCJwaGkwIiwic2luUGhpMCIsImNvc1BoaTAiLCJsYW1iZGExIiwic2luUGhpMSIsImNvc1BoaTEiLCJwb2ludDEiLCJwaGkxIiwiYWJzRGVsdGEiLCJhbnRpbWVyaWRpYW4iLCJhcmMiLCJpbnRlcnNlY3Rpb24iLCJwaGlBcmMiLCJhc2NlbmRpbmciLCJjb21wYXJlIiwiYXJyYXlfYXJyYXkiLCJzcmNfbWVyZ2UiLCJhcnJheXMiLCJtZXJnZWQiLCJzcmNfY2xpcCIsInBvaW50VmlzaWJsZSIsImNsaXBMaW5lIiwic2luayIsInJpbmdCdWZmZXIiLCJyaW5nU2luayIsInBvbHlnb25TdGFydGVkIiwicG9pbnRSaW5nIiwicmluZ1N0YXJ0IiwicmluZ0VuZCIsImNsaXBfY29tcGFyZUludGVyc2VjdGlvbiIsInBvaW50TGluZSIsImNsZWFuIiwicmluZ1NlZ21lbnRzIiwidmFsaWRTZWdtZW50IiwiY2xpcF9hbnRpbWVyaWRpYW4iLCJzaWduMCIsInNpZ24xIiwic2luTGFtYmRhMExhbWJkYTEiLCJjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0IiwiY2xpcF9jaXJjbGUiLCJjciIsInNtYWxsUmFkaXVzIiwibm90SGVtaXNwaGVyZSIsInZpc2libGUiLCJpbnRlcnNlY3QiLCJ0d28iLCJuMSIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsImMxIiwiYzIiLCJuMXhuMiIsIkEiLCJ1IiwidXUiLCJ0MiIsInBvbGFyIiwicTEiLCJjb2RlIiwiYzAiLCJ2MCIsInYwMCIsInBvaW50MiIsImNsaXBfbGluZSIsIngwIiwieTAiLCJ4MSIsInkxIiwiYXgiLCJheSIsImR4IiwiZHkiLCJjbGlwTWF4IiwiY2xpcE1pbiIsImNsaXBSZWN0YW5nbGUiLCJhMSIsImNvcm5lciIsImNvbXBhcmVQb2ludCIsImNhIiwiY2IiLCJ4X18iLCJ5X18iLCJ2X18iLCJ4XyIsInlfIiwidl8iLCJmaXJzdCIsImFjdGl2ZVN0cmVhbSIsImJ1ZmZlclN0cmVhbSIsImNsaXBTdHJlYW0iLCJsaW5lUG9pbnQiLCJhMCIsImIwIiwiYjEiLCJwb2x5Z29uSW5zaWRlIiwiY2xlYW5JbnNpZGUiLCJhcmVhX3gwMCIsImFyZWFfeTAwIiwiYXJlYV94MCIsImFyZWFfeTAiLCJzcmNfaWRlbnRpdHkiLCJhcmVhX2FyZWFTdW0iLCJhcmVhX2FyZWFSaW5nU3VtIiwiYXJlYV9hcmVhU3RyZWFtIiwiYXJlYV9hcmVhUmluZ1N0YXJ0IiwiYXJlYV9hcmVhUmluZ0VuZCIsImFyZWEiLCJhcmVhX2FyZWFQb2ludEZpcnN0IiwiYXJlYV9hcmVhUG9pbnQiLCJwYXRoX2FyZWEiLCJib3VuZHNfeDAiLCJJbmZpbml0eSIsImJvdW5kc195MCIsImJvdW5kc194MSIsImJvdW5kc195MSIsImNlbnRyb2lkX3gwMCIsImNlbnRyb2lkX3kwMCIsInBhdGhfY2VudHJvaWRfeDAiLCJwYXRoX2NlbnRyb2lkX3kwIiwicGF0aF9ib3VuZHMiLCJib3VuZHMiLCJwYXRoX2NlbnRyb2lkX1gwIiwicGF0aF9jZW50cm9pZF9ZMCIsImNlbnRyb2lkX1owIiwicGF0aF9jZW50cm9pZF9YMSIsInBhdGhfY2VudHJvaWRfWTEiLCJjZW50cm9pZF9aMSIsImNlbnRyb2lkX1gyIiwiY2VudHJvaWRfWTIiLCJjZW50cm9pZF9aMiIsImNlbnRyb2lkX2NlbnRyb2lkU3RyZWFtIiwiY2VudHJvaWRfY2VudHJvaWRQb2ludCIsImNlbnRyb2lkX2NlbnRyb2lkTGluZVN0YXJ0IiwiY2VudHJvaWRfY2VudHJvaWRMaW5lRW5kIiwiY2VudHJvaWRfY2VudHJvaWRSaW5nU3RhcnQiLCJjZW50cm9pZF9jZW50cm9pZFJpbmdFbmQiLCJjZW50cm9pZCIsImNlbnRyb2lkUG9pbnRGaXJzdExpbmUiLCJjZW50cm9pZFBvaW50TGluZSIsImNlbnRyb2lkUG9pbnRGaXJzdFJpbmciLCJjZW50cm9pZFBvaW50UmluZyIsInBhdGhfY2VudHJvaWQiLCJQYXRoQ29udGV4dCIsIl9jb250ZXh0IiwiX3JhZGl1cyIsInBvaW50UmFkaXVzIiwiXyIsIl9saW5lIiwiX3BvaW50IiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwibGVuZ3RoUmluZyIsIm1lYXN1cmVfeDAwIiwibWVhc3VyZV95MDAiLCJtZWFzdXJlX3gwIiwibWVhc3VyZV95MCIsIm1lYXN1cmVfbGVuZ3RoU3VtIiwibWVhc3VyZV9sZW5ndGhTdHJlYW0iLCJtZWFzdXJlX2xlbmd0aFBvaW50Rmlyc3QiLCJtZWFzdXJlX2xlbmd0aFBvaW50IiwibWVhc3VyZSIsIlBhdGhTdHJpbmciLCJfc3RyaW5nIiwic3RyaW5nX2NpcmNsZSIsIl9jaXJjbGUiLCJzcmNfcGF0aCIsInByb2plY3Rpb24iLCJwcm9qZWN0aW9uU3RyZWFtIiwiY29udGV4dFN0cmVhbSIsInBhdGgiLCJ0cmFuc2Zvcm1lciIsIlRyYW5zZm9ybVN0cmVhbSIsImZpdCIsImZpdEJvdW5kcyIsImNsaXBFeHRlbnQiLCJzY2FsZSIsInRyYW5zbGF0ZSIsImZpdEV4dGVudCIsImV4dGVudCIsImZpdFNpemUiLCJmaXRXaWR0aCIsImZpdEhlaWdodCIsIm1heERlcHRoIiwiY29zTWluRGlzdGFuY2UiLCJyZXNhbXBsZSIsInByb2plY3QiLCJkZWx0YTIiLCJyZXNhbXBsZUxpbmVUbyIsImRlcHRoIiwiZDIiLCJwaGkyIiwibGFtYmRhMiIsIngyIiwieTIiLCJkeDIiLCJkeTIiLCJkeiIsImxhbWJkYTAwIiwieDAwIiwieTAwIiwiYTAwIiwiYjAwIiwiYzAwIiwicmVzYW1wbGVTdHJlYW0iLCJyaW5nUG9pbnQiLCJyZXNhbXBsZV9yZXNhbXBsZSIsInJlc2FtcGxlTm9uZSIsInRyYW5zZm9ybVJhZGlhbnMiLCJzY2FsZVRyYW5zbGF0ZVJvdGF0ZSIsImFscGhhIiwiY29zQWxwaGEiLCJzaW5BbHBoYSIsImFpIiwiYmkiLCJjaSIsImZpIiwicHJvamVjdGlvbl9wcm9qZWN0aW9uIiwicHJvamVjdGlvbk11dGF0b3IiLCJwcm9qZWN0QXQiLCJyb3RhdGUiLCJwcm9qZWN0UmVzYW1wbGUiLCJwcm9qZWN0VHJhbnNmb3JtIiwicHJvamVjdFJvdGF0ZVRyYW5zZm9ybSIsImNhY2hlIiwiY2FjaGVTdHJlYW0iLCJ0aGV0YSIsInByZWNsaXAiLCJwb3N0Y2xpcCIsInJlY2VudGVyIiwiY2VudGVyIiwidHJhbnNmb3JtUm90YXRlIiwiY2xpcEFuZ2xlIiwicHJlY2lzaW9uIiwiYXppbXV0aGFsUmF3IiwiY3giLCJjeSIsImF6aW11dGhhbEludmVydCIsInNjIiwiY2MiLCJhemltdXRoYWxFcXVhbEFyZWFSYXciLCJjeGN5IiwiYXppbXV0aGFsRXF1aWRpc3RhbnRSYXciLCJtZXJjYXRvclJhdyIsImVxdWlyZWN0YW5ndWxhclJhdyIsIkExIiwiQTIiLCJBMyIsIkE0IiwiTSIsImVxdWFsRWFydGhSYXciLCJsMiIsImw2IiwiZ25vbW9uaWNSYXciLCJuYXR1cmFsRWFydGgxUmF3IiwicGhpNCIsIm9ydGhvZ3JhcGhpY1JhdyIsIm9ydGhvZ3JhcGhpYyIsInN0ZXJlb2dyYXBoaWNSYXciLCJ0cmFuc3ZlcnNlTWVyY2F0b3JSYXciLCJzcmNfYXNjZW5kaW5nIiwic3JjX2Jpc2VjdG9yIiwibG8iLCJoaSIsIm1pZCIsInJpZ2h0IiwiYmlzZWN0X2FzY2VuZGluZ0Jpc2VjdCIsImJpc2VjdF9iaXNlY3RSaWdodCIsInNyY19iaXNlY3QiLCJzcmNfYXJyYXlfYXJyYXkiLCJ0aWNrc19lMTAiLCJ0aWNrc19lNSIsInRpY2tzX2UyIiwic3JjX3RpY2tzIiwiY291bnQiLCJ0aWNrcyIsInRpY2tzX3RpY2tJbmNyZW1lbnQiLCJwb3dlciIsIkxOMTAiLCJ0aWNrc190aWNrU3RlcCIsInN0ZXAwIiwic3RlcDEiLCJpbml0UmFuZ2UiLCJmYWN0b3J5IiwiZXh0ZW5kIiwicGFyZW50IiwiZGVmaW5pdGlvbiIsIkNvbG9yIiwicmVJIiwicmVOIiwicmVQIiwicmVIZXgzIiwicmVIZXg2IiwicmVSZ2JJbnRlZ2VyIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2NvbG9yIiwidG9Mb3dlckNhc2UiLCJSZ2IiLCJwYXJzZUludCIsInJnYm4iLCJyZ2JhIiwiaHNsYSIsImciLCJyZ2JDb252ZXJ0IiwicmdiIiwib3BhY2l0eSIsImNvbG9yX3JnYiIsImhleCIsIkhzbCIsImhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTEiLCJtMiIsImRpc3BsYXlhYmxlIiwiYnJpZ2h0ZXIiLCJkYXJrZXIiLCJkZWcycmFkIiwicmFkMmRlZyIsIlhuIiwiWW4iLCJabiIsImxhYl90MCIsImxhYl90MSIsImxhYl90MiIsInQzIiwibGFiQ29udmVydCIsIkxhYiIsIkhjbCIsInJnYjJscmdiIiwieHl6MmxhYiIsImxhYiIsImxhYjJ4eXoiLCJscmdiMnJnYiIsImhjbENvbnZlcnQiLCJoY2wiLCJEIiwiRSIsIkVEIiwiRUIiLCJCQ19EQSIsImN1YmVoZWxpeF9jdWJlaGVsaXgiLCJDdWJlaGVsaXgiLCJibCIsImN1YmVoZWxpeENvbnZlcnQiLCJiYXNpcyIsInYxIiwidjIiLCJ2MyIsImNvc2giLCJzaW5oIiwiZDNfaW50ZXJwb2xhdGVfc3JjX2NvbnN0YW50IiwibGluZWFyIiwiY29sb3JfaHVlIiwiZ2FtbWEiLCJub2dhbW1hIiwiZXhwb25lbnRpYWwiLCJzcmNfcmdiIiwicmdiR2FtbWEiLCJjb2xvciIsInJnYlNwbGluZSIsInNwbGluZSIsImNvbG9ycyIsImQzX2ludGVycG9sYXRlX3NyY19udW1iZXIiLCJyZUEiLCJyZUIiLCJjc3NOb2RlIiwiY3NzUm9vdCIsImNzc1ZpZXciLCJzdmdOb2RlIiwic3JjX3N0cmluZyIsImFtIiwiYm0iLCJicyIsIm9uZSIsInN0cmluZ196ZXJvIiwic3JjX3ZhbHVlIiwic2V0VGltZSIsIm5iIiwibmEiLCJzcmNfcm91bmQiLCJkZWNvbXBvc2VfZGVncmVlcyIsImRlY29tcG9zZV9pZGVudGl0eSIsInRyYW5zbGF0ZVgiLCJ0cmFuc2xhdGVZIiwic2tld1giLCJzY2FsZVgiLCJzY2FsZVkiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybSIsInBhcnNlIiwicHhDb21tYSIsInB4UGFyZW4iLCJkZWdQYXJlbiIsInhhIiwieWEiLCJ4YiIsInliIiwiaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MiLCJkZWZhdWx0VmlldyIsImludGVycG9sYXRlVHJhbnNmb3JtU3ZnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmFzZVZhbCIsImNvbnNvbGlkYXRlIiwibWF0cml4IiwiU1FSVDIiLCJoc2xfaHNsIiwiaHVlIiwiaGNsX2hjbCIsInNyY19jdWJlaGVsaXhfY3ViZWhlbGl4IiwiY3ViZWhlbGl4R2FtbWEiLCJjdWJlaGVsaXgiLCJkM19zY2FsZV9zcmNfY29uc3RhbnQiLCJkM19zY2FsZV9zcmNfbnVtYmVyIiwidW5pdCIsImNvbnRpbnVvdXNfaWRlbnRpdHkiLCJub3JtYWxpemUiLCJjbGFtcGVyIiwiYmltYXAiLCJkMCIsImQxIiwicjAiLCJyMSIsInBvbHltYXAiLCJjb3B5IiwiY2xhbXAiLCJ1bmtub3duIiwiY29udGludW91c190cmFuc2Zvcm1lciIsInVudHJhbnNmb3JtIiwicGllY2V3aXNlIiwib3V0cHV0IiwicmVzY2FsZSIsInJhbmdlUm91bmQiLCJjb250aW51b3VzIiwiZm9ybWF0RGVjaW1hbCIsInRvRXhwb25lbnRpYWwiLCJjb2VmZmljaWVudCIsInNyY19leHBvbmVudCIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIkZvcm1hdFNwZWNpZmllciIsImZpbGwiLCJhbGlnbiIsInN5bWJvbCIsInplcm8iLCJjb21tYSIsInByZWZpeEV4cG9uZW50IiwiZGVmYXVsdExvY2FsZV9sb2NhbGUiLCJkZWZhdWx0TG9jYWxlX2Zvcm1hdCIsImRlZmF1bHRMb2NhbGVfZm9ybWF0UHJlZml4IiwiZm9ybWF0VHJpbSIsImkxIiwiaTAiLCJmb3JtYXRSb3VuZGVkIiwiZXhwb25lbnQiLCJmb3JtYXRUeXBlcyIsIiUiLCJ0b1ByZWNpc2lvbiIsIlgiLCJ0b1VwcGVyQ2FzZSIsImQzX2Zvcm1hdF9zcmNfaWRlbnRpdHkiLCJwcmVmaXhlcyIsImxvY2FsZSIsImdyb3VwaW5nIiwidGhvdXNhbmRzIiwiY3VycmVuY3kiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsInBlcmNlbnQiLCJuZXdGb3JtYXQiLCJwcmVmaXgiLCJzdWZmaXgiLCJmb3JtYXRUeXBlIiwibWF5YmVTdWZmaXgiLCJ2YWx1ZVByZWZpeCIsInZhbHVlU3VmZml4IiwidmFsdWVOZWdhdGl2ZSIsImZvcm1hdFByZWZpeCIsInNyY19sb2NhbGUiLCJzcmNfdGlja0Zvcm1hdCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJsaW5lYXJpc2giLCJ0aWNrRm9ybWF0IiwibmljZSIsImxpbmVhcl9saW5lYXIiLCJpbnRlcnZhbF90MCIsImludGVydmFsX3QxIiwibmV3SW50ZXJ2YWwiLCJmbG9vcmkiLCJvZmZzZXRpIiwiZmllbGQiLCJkYXRlIiwicHJldmlvdXMiLCJldmVyeSIsIm1pbGxpc2Vjb25kX21pbGxpc2Vjb25kIiwiZHVyYXRpb25NaW51dGUiLCJkdXJhdGlvbldlZWsiLCJzZWNvbmRfc2Vjb25kIiwiZ2V0TWlsbGlzZWNvbmRzIiwiZ2V0VVRDU2Vjb25kcyIsIm1pbnV0ZV9taW51dGUiLCJnZXRTZWNvbmRzIiwiZ2V0TWludXRlcyIsImhvdXJfaG91ciIsImdldEhvdXJzIiwiZGF5X2RheSIsInNldEhvdXJzIiwic2V0RGF0ZSIsImdldERhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsInNyY19kYXkiLCJ3ZWVrZGF5IiwiZ2V0RGF5Iiwic3VuZGF5IiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiLCJtb250aF9tb250aCIsInNldE1vbnRoIiwiZ2V0TW9udGgiLCJnZXRGdWxsWWVhciIsInllYXJfeWVhciIsInNldEZ1bGxZZWFyIiwic3JjX3llYXIiLCJ1dGNNaW51dGUiLCJzZXRVVENTZWNvbmRzIiwiZ2V0VVRDTWludXRlcyIsInV0Y0hvdXIiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDSG91cnMiLCJ1dGNEYXkiLCJzZXRVVENIb3VycyIsInNldFVUQ0RhdGUiLCJnZXRVVENEYXRlIiwic3JjX3V0Y0RheSIsInV0Y1dlZWtkYXkiLCJnZXRVVENEYXkiLCJ1dGNTdW5kYXkiLCJ1dGNNb25kYXkiLCJ1dGNUdWVzZGF5IiwidXRjV2VkbmVzZGF5IiwidXRjVGh1cnNkYXkiLCJ1dGNGcmlkYXkiLCJ1dGNTYXR1cmRheSIsInV0Y01vbnRoIiwic2V0VVRDTW9udGgiLCJnZXRVVENNb250aCIsImdldFVUQ0Z1bGxZZWFyIiwidXRjWWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3JjX3V0Y1llYXIiLCJsb2NhbERhdGUiLCJIIiwiTCIsInV0Y0RhdGUiLCJVVEMiLCJuZXdZZWFyIiwic3JjX2RlZmF1bHRMb2NhbGVfbG9jYWxlIiwidXRjRm9ybWF0IiwidXRjUGFyc2UiLCJwYWRzIiwiLSIsIjAiLCJudW1iZXJSZSIsInBlcmNlbnRSZSIsInJlcXVvdGVSZSIsInBhZCIsInN0cmluZyIsInJlcXVvdGUiLCJmb3JtYXRSZSIsImZvcm1hdExvb2t1cCIsInBhcnNlV2Vla2RheU51bWJlclN1bmRheSIsInBhcnNlV2Vla2RheU51bWJlck1vbmRheSIsInBhcnNlV2Vla051bWJlclN1bmRheSIsInBhcnNlV2Vla051bWJlcklTTyIsIlYiLCJwYXJzZVdlZWtOdW1iZXJNb25kYXkiLCJwYXJzZUZ1bGxZZWFyIiwicGFyc2VZZWFyIiwicGFyc2Vab25lIiwiWiIsInBhcnNlTW9udGhOdW1iZXIiLCJwYXJzZURheU9mTW9udGgiLCJwYXJzZURheU9mWWVhciIsInBhcnNlSG91cjI0IiwicGFyc2VNaW51dGVzIiwicGFyc2VTZWNvbmRzIiwicGFyc2VNaWxsaXNlY29uZHMiLCJwYXJzZU1pY3Jvc2Vjb25kcyIsInBhcnNlTGl0ZXJhbFBlcmNlbnQiLCJwYXJzZVVuaXhUaW1lc3RhbXAiLCJRIiwicGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyIsImZvcm1hdERheU9mTW9udGgiLCJmb3JtYXRIb3VyMjQiLCJmb3JtYXRIb3VyMTIiLCJmb3JtYXREYXlPZlllYXIiLCJmb3JtYXRNaWxsaXNlY29uZHMiLCJmb3JtYXRNaWNyb3NlY29uZHMiLCJmb3JtYXRNb250aE51bWJlciIsImZvcm1hdE1pbnV0ZXMiLCJmb3JtYXRTZWNvbmRzIiwiZm9ybWF0V2Vla2RheU51bWJlck1vbmRheSIsImRheSIsImZvcm1hdFdlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRXZWVrTnVtYmVySVNPIiwiZm9ybWF0V2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFdlZWtOdW1iZXJNb25kYXkiLCJsb2NhbGVfZm9ybWF0WWVhciIsImZvcm1hdEZ1bGxZZWFyIiwiZm9ybWF0Wm9uZSIsImZvcm1hdFVUQ0RheU9mTW9udGgiLCJmb3JtYXRVVENIb3VyMjQiLCJmb3JtYXRVVENIb3VyMTIiLCJmb3JtYXRVVENEYXlPZlllYXIiLCJmb3JtYXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJmb3JtYXRVVENNaWNyb3NlY29uZHMiLCJmb3JtYXRVVENNb250aE51bWJlciIsImZvcm1hdFVUQ01pbnV0ZXMiLCJmb3JtYXRVVENTZWNvbmRzIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlck1vbmRheSIsImRvdyIsImZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkiLCJmb3JtYXRVVENXZWVrTnVtYmVySVNPIiwiZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheSIsImZvcm1hdFVUQ1dlZWtOdW1iZXJNb25kYXkiLCJmb3JtYXRVVENZZWFyIiwiZm9ybWF0VVRDRnVsbFllYXIiLCJmb3JtYXRVVENab25lIiwiZm9ybWF0TGl0ZXJhbFBlcmNlbnQiLCJmb3JtYXRVbml4VGltZXN0YW1wIiwiZm9ybWF0VW5peFRpbWVzdGFtcFNlY29uZHMiLCJsb2NhbGVfZGF0ZVRpbWUiLCJkYXRlVGltZSIsImxvY2FsZV9kYXRlIiwibG9jYWxlX3RpbWUiLCJ0aW1lIiwibG9jYWxlX3BlcmlvZHMiLCJwZXJpb2RzIiwibG9jYWxlX3dlZWtkYXlzIiwiZGF5cyIsImxvY2FsZV9zaG9ydFdlZWtkYXlzIiwic2hvcnREYXlzIiwibG9jYWxlX21vbnRocyIsIm1vbnRocyIsImxvY2FsZV9zaG9ydE1vbnRocyIsInNob3J0TW9udGhzIiwicGVyaW9kUmUiLCJwZXJpb2RMb29rdXAiLCJ3ZWVrZGF5UmUiLCJ3ZWVrZGF5TG9va3VwIiwic2hvcnRXZWVrZGF5UmUiLCJzaG9ydFdlZWtkYXlMb29rdXAiLCJtb250aFJlIiwibW9udGhMb29rdXAiLCJzaG9ydE1vbnRoUmUiLCJzaG9ydE1vbnRoTG9va3VwIiwiZm9ybWF0cyIsIkkiLCJZIiwidXRjRm9ybWF0cyIsInBhcnNlcyIsInBhcnNlU3BlY2lmaWVyIiwibmV3UGFyc2UiLCJuZXdEYXRlIiwid2VlayIsImZvcm1hdExvY2FsZSIsImRlZmF1bHRMb2NhbGVfZGVmYXVsdExvY2FsZSIsInRvSVNPU3RyaW5nIiwieGh0bWwiLCJuYW1lc3BhY2VzIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsInNwYWNlIiwibG9jYWwiLCJjcmVhdG9yIiwiZnVsbG5hbWUiLCJ1cmkiLCJuYW1lc3BhY2VVUkkiLCJub25lIiwic3JjX3NlbGVjdG9yIiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwic2VsZWN0b3JBbGxfZW1wdHkiLCJzZWxlY3RvckFsbCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJtYXRjaGVyIiwibWF0Y2hlcyIsInNwYXJzZSIsInVwZGF0ZSIsIkVudGVyTm9kZSIsImRhdHVtIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJjaGlsZCIsImluc2VydEJlZm9yZSIsImtleVByZWZpeCIsImJpbmRJbmRleCIsImdyb3VwTGVuZ3RoIiwiZGF0YUxlbmd0aCIsImJpbmRLZXkiLCJrZXlWYWx1ZSIsIm5vZGVCeUtleVZhbHVlIiwia2V5VmFsdWVzIiwic29ydF9hc2NlbmRpbmciLCJzcmNfd2luZG93Iiwic3R5bGVWYWx1ZSIsImNsYXNzQXJyYXkiLCJDbGFzc0xpc3QiLCJfbm9kZSIsIl9uYW1lcyIsImdldEF0dHJpYnV0ZSIsImNsYXNzZWRBZGQiLCJsaXN0IiwiY2xhc3NlZFJlbW92ZSIsInNwbGljZSIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsImh0bWxSZW1vdmUiLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiY29uc3RhbnROdWxsIiwicmVtb3ZlX3JlbW92ZSIsInNlbGVjdGlvbl9jbG9uZVNoYWxsb3ciLCJjbG9uZU5vZGUiLCJzZWxlY3Rpb25fY2xvbmVEZWVwIiwiZmlsdGVyRXZlbnRzIiwib25fZXZlbnQiLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsImZpbHRlckNvbnRleHRMaXN0ZW5lciIsImNvbnRleHRMaXN0ZW5lciIsInJlbGF0ZWQiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImV2ZW50MSIsImV2ZW50MCIsIm9uUmVtb3ZlIiwidHlwZW5hbWUiLCJfX29uIiwib25BZGQiLCJkaXNwYXRjaEV2ZW50IiwicGFyYW1zIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRFdmVudCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiZGV0YWlsIiwicm9vdCIsIlNlbGVjdGlvbiIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb25fc2VsZWN0aW9uIiwic2VsZWN0Iiwic3ViZ3JvdXBzIiwic3Vibm9kZSIsInN1Ymdyb3VwIiwic2VsZWN0QWxsIiwiZWFjaCIsImVudGVyR3JvdXAiLCJ1cGRhdGVHcm91cCIsIl9lbnRlciIsIl9leGl0Iiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwiYXBwZW5kIiwibWVyZ2UiLCJvcmRlciIsInNlbGVjdGlvbiIsImdyb3VwczAiLCJncm91cHMxIiwibTAiLCJtZXJnZXMiLCJncm91cDAiLCJncm91cDEiLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJub2RlcyIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJwcmlvcml0eSIsInJlbW92ZVByb3BlcnR5Iiwic2V0UHJvcGVydHkiLCJjbGFzc2VkIiwiaW5zZXJ0IiwiYmVmb3JlIiwiY2xvbmUiLCJkZWVwIiwidHlwZW5hbWVzIiwicGFyc2VUeXBlbmFtZXMiLCJkaXNwYXRjaCIsInNyY19zZWxlY3Rpb24iLCJzcmNfc2VsZWN0IiwibmV4dElkIiwiTG9jYWwiLCJkaXNwYXRjaF9ub29wIiwiZGlzcGF0Y2hfZGlzcGF0Y2giLCJ0eXBlcyIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJzcmNfZGlzcGF0Y2giLCJ0aW1lcl9mcmFtZSIsInRpbWVvdXQiLCJ0aW1lcl9pbnRlcnZhbCIsInBva2VEZWxheSIsImNsb2NrTGFzdCIsImNsb2NrTm93IiwiY2xvY2tTa2V3IiwiY2xvY2siLCJwZXJmb3JtYW5jZSIsInNldEZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXJOb3ciLCJUaW1lciIsIl9jYWxsIiwiX3RpbWUiLCJ0aW1lciIsImRlbGF5IiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwic3JjX3RpbWVvdXQiLCJlbGFwc2VkIiwiZW1wdHlPbiIsImVtcHR5VHdlZW4iLCJDUkVBVEVEIiwiU0NIRURVTEVEIiwiU1RBUlRJTkciLCJTVEFSVEVEIiwiUlVOTklORyIsIkVORElORyIsIkVOREVEIiwidHJhbnNpdGlvbl9zY2hlZHVsZSIsInRpbWluZyIsInNjaGVkdWxlcyIsIl9fdHJhbnNpdGlvbiIsInR3ZWVuIiwidGljayIsImVhc2UiLCJzY2hlZHVsZV9jcmVhdGUiLCJzY2hlZHVsZV9pbml0Iiwic2NoZWR1bGUiLCJzY2hlZHVsZV9nZXQiLCJzY2hlZHVsZV9zZXQiLCJ0d2VlblZhbHVlIiwidHJhbnNpdGlvbiIsIl9pZCIsInRyYW5zaXRpb25faW50ZXJwb2xhdGUiLCJzZWxlY3Rpb25fU2VsZWN0aW9uIiwic3R5bGVfc3R5bGVSZW1vdmUiLCJ0cmFuc2l0aW9uX2lkIiwiVHJhbnNpdGlvbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsIm9uMCIsIm9uMSIsInNpdCIsIm9uX3N0YXJ0Iiwib25GdW5jdGlvbiIsImF0dHJUd2VlbiIsInN0cmluZzAwIiwic3RyaW5nMTAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcwIiwic3RyaW5nMSIsInZhbHVlMSIsIl92YWx1ZSIsImF0dHJJbnRlcnBvbGF0ZU5TIiwiYXR0ckludGVycG9sYXRlIiwic3R5bGVUd2VlbiIsInN0eWxlTnVsbCIsInN0eWxlX3N0eWxlRnVuY3Rpb24iLCJsaXN0ZW5lcjAiLCJzdHlsZU1heWJlUmVtb3ZlIiwic3R5bGVfc3R5bGVDb25zdGFudCIsInN0eWxlSW50ZXJwb2xhdGUiLCJ0ZXh0X3RleHRGdW5jdGlvbiIsInRleHRfdGV4dENvbnN0YW50IiwidHdlZW4wIiwidHdlZW4xIiwiZWFzZUNvbnN0YW50IiwiY2FuY2VsIiwiaW50ZXJydXB0IiwiY3VzdG9tIiwicG9seUluIiwicG9seU91dCIsInBvbHlJbk91dCIsImJhY2tJbiIsIm92ZXJzaG9vdCIsImJhY2tPdXQiLCJiYWNrSW5PdXQiLCJlbGFzdGljX3RhdSIsImRlZmF1bHRUaW1pbmciLCJlbGFzdGljSW4iLCJhbXBsaXR1ZGUiLCJwZXJpb2QiLCJlbGFzdGljT3V0IiwiZWxhc3RpY0luT3V0IiwidHJhbnNpdGlvbl9pbmhlcml0IiwidG9vbHRpcEVsIiwic2hvdyIsImNvbnRlbnQiLCJ5UG9zIiwieFBvcyIsImNsaWVudFdpZHRoIiwiZm9ybWF0Q29udGVudCIsImNvbXBvbmVudCIsImlzTGlzdCIsIml0ZW0iLCJjc3NDbGFzcyIsImNsYXNzIiwibGFiZWwiLCJ0b3BvanNvbl9jbGllbnRfc3JjX2lkZW50aXR5IiwidG9wb2pzb25fY2xpZW50X3NyY190cmFuc2Zvcm0iLCJreCIsImt5Iiwic3JjX3JldmVyc2UiLCJzcmNfZmVhdHVyZSIsInRvcG9sb2d5IiwiZmVhdHVyZV9mZWF0dXJlIiwiYmJveCIsInByb3BlcnRpZXMiLCJmZWF0dXJlX29iamVjdCIsInRyYW5zZm9ybVBvaW50IiwiYXJjcyIsInBvaW50X2hhc2hfYnVmZmVyIiwiQXJyYXlCdWZmZXIiLCJGbG9hdDY0QXJyYXkiLCJVaW50MzJBcnJheSIsIndvcmxkIiwid29ybGRQcm9qZWN0aW9uIiwiZ2VvU2F0ZWxsaXRlc0RhdGEiLCJjaGFydCIsImJvdHRvbSIsImRlZmF1bHRDb29yZHMiLCJvcmJpdCIsImVhcnRoIiwiZ2VvT3J0aG9ncmFwaGljIiwiZ2xvYmVQYXRoIiwiZ2VvUGF0aCIsInNjYWxlTGluZWFyIiwiY29udGFpbmVyIiwiX3JlZiIsImdFbnRlciIsIl9yZWYyIiwidXBkYXRlU2NhbGVzIiwiX3JlZjMiLCJlYXJ0aFJhZGl1cyIsInRvcG9qc29uIiwib2JqZWN0cyIsImNvdW50cmllcyIsInNhdF9uYW1lIiwiaXNfcGVycCIsImlzX2dlbyIsInhfY29vcmQiLCJ5X2Nvb3JkIiwiaW50ZXJhY3Rpb25zIiwibW91c2VvdmVyIiwiaXNfdGFyZ2V0IiwidXBkYXRlRG9tIiwic2hvd1Rvb2x0aXAiLCJ0b29sdGlwQm9keSIsIk9wZXJhdG9yIiwic2F0X29wZXJhdG9yIiwidGltZXN0YW1wIiwiTG9uZ2l0dWRlIiwibG9uZ19zdHJpbmciLCJ0b29sdGlwQ29udGVudCIsImRyYXdDaGFydCIsImpzX2NoYXJ0IiwiaW5pdCIsInN6IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwib2Zmc2V0V2lkdGgiLCJpbm5lckhlaWdodCIsInNldFdvcmxkIiwic2V0R2VvU2F0ZWxsaXRlcyIsIlNwZWVkQ29udHJvbHMiLCJidG5zIiwiY3VycmVudFNwZWVkIiwib25DbGljayIsImdldEN1cnJlbnRTcGVlZCIsImRhdGFzZXQiLCJzcGVlZCIsIlRleHREZXNjcmlwdGlvbiIsImdldEVsZW1lbnRCeUlkIiwiY29udmVydEtleXMiLCJtb2RpZmllZCIsImdldENsb3Nlc3REZXNjcmlwdGlvbiIsImRhdGVzIiwiY3VycmVudERhdGUiLCJ0aW1lbGluZSIsImJ0bkNvbnRyb2xzIiwiY29udHJvbEJ0biIsImN1cnJlbnREYXRlRWwiLCJwbGF5aW5nIiwiZW5kRGF0ZSIsInN0YXJ0RGF0ZSIsInVwZGF0ZUN1cnJlbnREYXRlIiwiZ2V0Q3VycmVudERhdGUiLCJzZXR1cFRpbWVsaW5lIiwib25VcGRhdGUiLCJvblNsaWRlIiwic2V0dXBCdG5Db250cm9scyIsInN0YXJ0VGltZWxpbmUiLCJzdG9wVGltZWxpbmUiLCJFT0wiLCJFT0YiLCJRVU9URSIsIk5FV0xJTkUiLCJvYmplY3RDb252ZXJ0ZXIiLCJjb2x1bW5zIiwiSlNPTiIsInN0cmluZ2lmeSIsImluZmVyQ29sdW1ucyIsInJvd3MiLCJjb2x1bW5TZXQiLCJyb3ciLCJjb2x1bW4iLCJkc3ZfcGFkIiwiZm9ybWF0RGF0ZSIsInllYXIiLCJob3VycyIsIm1pbnV0ZXMiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZHN2IiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJwYXJzZVJvd3MiLCJOIiwiZW9mIiwiZW9sIiwidG9rZW4iLCJwcmVmb3JtYXRCb2R5IiwiZm9ybWF0VmFsdWUiLCJmb3JtYXRSb3ciLCJjdXN0b21Db252ZXJ0ZXIiLCJmb3JtYXRCb2R5IiwiZm9ybWF0Um93cyIsImNzdiIsImNzdlBhcnNlIiwidHN2IiwidHN2UGFyc2UiLCJyZXNwb25zZVRleHQiLCJyZXNwb25zZSIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJzcmNfdGV4dCIsImZldGNoIiwiZHN2UGFyc2UiLCJkc3ZfY3N2IiwicmVzcG9uc2VKc29uIiwianNvbiIsInBhcnNlciIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImtub3duQ291bnRyaWVzIiwiZ2V0RGF0YSIsIl9jYWxsZWUiLCJzYXRlbGxpdGVVUkwiLCJnZW9TYXRlbGxpdGVzVVJMIiwic2F0ZWxsaXRlUHJvbWlzZSIsImdlb1NhdGVsbGl0ZXNQcm9taXNlIiwiZDNGZXRjaCIsIl9yZXMiLCJfc2xpY2VkVG9BcnJheSIsInNhdGVsbGl0ZURhdGEiLCJmaWx0ZXJlZFNhdGVsbGl0ZXMiLCJmaWx0ZXJTYXRlbGxpdGVzIiwiZm9ybWF0U2F0ZWxsaXRlRGF0YSIsImZpbHRlcmVkR2VvU2F0ZWxsaXRlcyIsInRpbWVzdGFtcHMiLCJTZXQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzYXRlbGxpdGVzIiwicGVycCIsIk1hcCIsImdlb1NhdGVsbGl0ZXMiLCJzYXRlbGxpdGUiLCJpbmNsdWRlIiwiaXNQZXJwIiwibG9uZ2l0dWRlIiwiY291bnRyeSIsImluY2x1ZGVzIiwiZ2V0V29ybGREYXRhIiwiX2NhbGxlZTIiLCJfY29udGV4dDIiLCJkZXNjcmlwdGlvbiIsImRlc2NyaXB0aW9uRGF0ZXMiLCJzcGVlZHMiLCJoYWxmIiwiYmFzZVNwZWVkIiwiMXgiLCIyeCIsInNhdGVsbGl0ZUZpbGUiLCJ0YXJnZXRzRmlsZSIsImNvdW50cnlOYW1lIiwiQ2hhcnQiLCJ1cGRhdGVDb3VudHJ5TmFtZXMiLCJoaWRlTG9hZGluZyIsImNsb3Nlc3REZXNjcmlwdGlvbiIsIm5ld0JyZWFrcG9pbnQiLCJsb2FkRGF0YSIsImRlc2NyaXB0b3IiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiT2JqZWN0UHJvdG8iLCJvcmlnaW5hbCIsInVuIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImhlYWQiLCJsYXN0IiwiZmx1c2giLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInByb21pc2VDYXBhYmlsaXR5IiwiJGRlZmluZVByb3BlcnR5IiwiYXQiLCJidWlsdGluRXhlYyIsInJlZ2V4cEV4ZWMiLCJSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJmb3JjZWQiLCIkdHJpbSIsInNwYWNlcyIsImx0cmltIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEdPUEQiLCIkRFAiLCJnT1BOIiwiJEpTT04iLCJfc3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiaXNFbnVtIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiUU9iamVjdCIsInNldHRlciIsImZpbmRDaGlsZCIsInNldFN5bWJvbERlc2MiLCJwcm90b0Rlc2MiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiJHNldCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJnT1BTIiwiZ2V0U3ltYm9scyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCIkc29ydCIsImNvbXBhcmVmbiIsInN0cm9uZyIsImNoZWNrIiwiYnVnZ3kiLCIkaW5jbHVkZXMiLCJzZWFyY2hTdHJpbmciLCJpc1JlZ0V4cCIsIk1BVENIIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIl9pbmRleF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fIiwiZ2VvU2F0ZWxsaXRlc0ZpbGUiLCIyMDE2LTExLTEwIiwiMjAxNi0xMi0xMCIsIjIwMTctMDUtMTAiXSwibWFwcGluZ3MiOiJhQUNBLElBQUFBLEVBQUEsR0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxHQUFBLENBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsUUFBQSxJQVVBLE9BTkFJLEVBQUFMLEdBQUFNLEtBQUFKLEVBQUFELFFBQUFDLElBQUFELFFBQUFGLEdBR0FHLEVBQUFFLEdBQUEsRUFHQUYsRUFBQUQsUUFLQUYsRUFBQVEsRUFBQUYsRUFHQU4sRUFBQVMsRUFB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LFFBQ0FDLE1BQUEsTUFDQUMsWUFBQSxTQUNBQyxLQUFBLFFBQ0FDLFNBQUEsU0FDQUMsUUFBQSxTQUNBQyxVQUFBLFNBQ0FDLE9BQUEsUUFDQUMsTUFBQSxTQUNBQyxNQUFBLFNBQ0FDLFNBQUEsU0FDQUMsY0FBQSxTQUNBQyxVQUFBLFFBQ0FDLGFBQUEsU0FDQUMsVUFBQSxTQUNBQyxXQUFBLFNBQ0FDLFVBQUEsU0FDQUMscUJBQUEsU0FDQUMsVUFBQSxTQUNBQyxXQUFBLFFBQ0FDLFVBQUEsU0FDQUMsVUFBQSxTQUNBQyxZQUFBLFNBQ0FDLGNBQUEsUUFDQUMsYUFBQSxRQUNBQyxlQUFBLFFBQ0FDLGVBQUEsUUFDQUMsZUFBQSxTQUNBQyxZQUFBLFNBQ0FDLEtBQUEsTUFDQUMsVUFBQSxRQUNBQyxNQUFBLFNBQ0FDLFFBQUEsU0FDQUMsT0FBQSxRQUNBQyxpQkFBQSxRQUNBQyxXQUFBLElBQ0FDLGFBQUEsU0FDQUMsYUFBQSxRQUNBQyxlQUFBLFFBQ0FDLGdCQUFBLFFBQ0FDLGtCQUFBLE1BQ0FDLGdCQUFBLFFBQ0FDLGdCQUFBLFNBQ0FDLGFBQUEsUUFDQUMsVUFBQSxTQUNBQyxVQUFBLFNBQ0FDLFNBQUEsU0FDQUMsWUFBQSxTQUNBQyxLQUFBLElBQ0FDLFFBQUEsU0FDQUMsTUFBQSxRQUNBQyxVQUFBLFFBQ0FDLE9BQUEsU0FDQUMsVUFBQSxTQUNBQyxPQUFBLFNBQ0FDLGNBQUEsU0FDQUMsVUFBQSxTQUNBQyxjQUFBLFNBQ0FDLGNBQUEsU0FDQUMsV0FBQSxTQUNBQyxVQUFBLFNBQ0FDLEtBQUEsU0FDQUMsS0FBQSxTQUNBQyxLQUFBLFNBQ0FDLFdBQUEsU0FDQUMsT0FBQSxRQUNBQyxjQUFBLFFBQ0FDLElBQUEsU0FDQUMsVUFBQSxTQUNBQyxVQUFBLFFBQ0FDLFlBQUEsUUFDQUMsT0FBQSxTQUNBQyxXQUFBLFNBQ0FDLFNBQUEsUUFDQUMsU0FBQSxTQUNBQyxPQUFBLFNBQ0FDLE9BQUEsU0FDQUMsUUFBQSxRQUNBQyxVQUFBLFFBQ0FDLFVBQUEsUUFDQUMsVUFBQSxRQUNBQyxLQUFBLFNB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QixtQkFWeEIsV0FDRTgyRCxZQUNFUixFQUNBMEcsRUFDQWpILEVBQ0FMLEVBQ0ExSiIsImZpbGUiOiJjaGluYS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMjEpO1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLlN5bWJvbDtcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xuXG52YXIgJGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XG59O1xuXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbnZhciBnbG9iYWwgPSBtb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93Lk1hdGggPT0gTWF0aFxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgOiBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbnZhciAkZXhwb3J0ID0gZnVuY3Rpb24gKHR5cGUsIG5hbWUsIHNvdXJjZSkge1xuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XG4gIHZhciBJU19TVEFUSUMgPSB0eXBlICYgJGV4cG9ydC5TO1xuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XG4gIHZhciB0YXJnZXQgPSBJU19HTE9CQUwgPyBnbG9iYWwgOiBJU19TVEFUSUMgPyBnbG9iYWxbbmFtZV0gfHwgKGdsb2JhbFtuYW1lXSA9IHt9KSA6IChnbG9iYWxbbmFtZV0gfHwge30pW1BST1RPVFlQRV07XG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xuICB2YXIga2V5LCBvd24sIG91dCwgZXhwO1xuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICAvLyBjb250YWlucyBpbiBuYXRpdmVcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXG4gICAgb3V0ID0gKG93biA/IHRhcmdldCA6IHNvdXJjZSlba2V5XTtcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xuICAgIC8vIGV4dGVuZCBnbG9iYWxcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcbiAgICAvLyBleHBvcnRcbiAgICBpZiAoZXhwb3J0c1trZXldICE9IG91dCkgaGlkZShleHBvcnRzLCBrZXksIGV4cCk7XG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xuICB9XG59O1xuZ2xvYmFsLmNvcmUgPSBjb3JlO1xuLy8gdHlwZSBiaXRtYXBcbiRleHBvcnQuRiA9IDE7ICAgLy8gZm9yY2VkXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcbiRleHBvcnQuUCA9IDg7ICAgLy8gcHJvdG9cbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXG4kZXhwb3J0LlUgPSA2NDsgIC8vIHNhZmVcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZFAoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XG52YXIgJHRvU3RyaW5nID0gcmVxdWlyZSgnLi9fZnVuY3Rpb24tdG8tc3RyaW5nJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XG5cbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XG59O1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsID09ICdmdW5jdGlvbic7XG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgU1JDKSB8fCBoaWRlKHZhbCwgU1JDLCBPW2tleV0gPyAnJyArIE9ba2V5XSA6IFRQTC5qb2luKFN0cmluZyhrZXkpKSk7XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBPW2tleV0gPSB2YWw7XG4gIH0gZWxzZSBpZiAoIXNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICAgIGhpZGUoTywga2V5LCB2YWwpO1xuICB9IGVsc2UgaWYgKE9ba2V5XSkge1xuICAgIE9ba2V5XSA9IHZhbDtcbiAgfSBlbHNlIHtcbiAgICBoaWRlKE8sIGtleSwgdmFsKTtcbiAgfVxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcbn0pO1xuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkge1xuICBhRnVuY3Rpb24oZm4pO1xuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XG4gIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIGNvcmUgPSBtb2R1bGUuZXhwb3J0cyA9IHsgdmVyc2lvbjogJzIuNi41JyB9O1xuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gSU9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCA9PSB1bmRlZmluZWQpIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNhbGwgbWV0aG9kIG9uICBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbiIsInZhciBpZCA9IDA7XG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAodHlwZW9mIGl0ICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgZnVuY3Rpb24hJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwiLy8gNy4xLjE1IFRvTGVuZ3RoXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xudmFyIG1pbiA9IE1hdGgubWluO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBUQUcgPSByZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IHN0YXQgPyBpdCA6IGl0LnByb3RvdHlwZSwgVEFHKSkgZGVmKGl0LCBUQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogdGFnIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcblxuLy8gMjIuMS4zLjQgQXJyYXkucHJvdG90eXBlLmVudHJpZXMoKVxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcbi8vIDIyLjEuMy4zMCBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xuICB2YXIgaW5kZXggPSB0aGlzLl9pKys7XG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHN0ZXAoMSk7XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBPW2luZGV4XSk7XG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcbn0sICd2YWx1ZXMnKTtcblxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCdlbnRyaWVzJyk7XG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246IGNvcmUudmVyc2lvbixcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXG59KTtcbiIsIi8vIDcuMS40IFRvSW50ZWdlclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobWV0aG9kLCBhcmcpIHtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXG4gICAgYXJnID8gbWV0aG9kLmNhbGwobnVsbCwgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9LCAxKSA6IG1ldGhvZC5jYWxsKG51bGwpO1xuICB9KTtcbn07XG4iLCIvLyBnZXR0aW5nIHRhZyBmcm9tIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xuLy8gRVMzIHdyb25nIGhlcmVcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBTY3JpcHQgQWNjZXNzIERlbmllZCBlcnJvclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGl0W2tleV07XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgdmFyIE8sIFQsIEI7XG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gJ1VuZGVmaW5lZCcgOiBpdCA9PT0gbnVsbCA/ICdOdWxsJ1xuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcbiAgICAvLyBidWlsdGluVGFnIGNhc2VcbiAgICA6IEFSRyA/IGNvZihPKVxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcbiAgICA6IChCID0gY29mKE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogQjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG4vLyAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyIHRlc3QgPSB7fTtcbnRlc3RbcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyldID0gJ3onO1xuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG4gIH0sIHRydWUpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcbnZhciBTVFJJQ1QgPSByZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZm9yRWFjaCwgdHJ1ZSk7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTAgLyAxNS40LjQuMTggQXJyYXkucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xuICB9XG59KTtcbiIsInZhciAkaXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcbnZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gSXRlcmF0b3JzLkFycmF5O1xuXG52YXIgRE9NSXRlcmFibGVzID0ge1xuICBDU1NSdWxlTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxuICBDbGllbnRSZWN0TGlzdDogZmFsc2UsXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXG4gIERPTVRva2VuTGlzdDogdHJ1ZSxcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxuICBGaWxlTGlzdDogZmFsc2UsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiBmYWxzZSxcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxuICBIVE1MU2VsZWN0RWxlbWVudDogZmFsc2UsXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxuICBOYW1lZE5vZGVNYXA6IGZhbHNlLFxuICBOb2RlTGlzdDogdHJ1ZSxcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXG4gIFBsdWdpbjogZmFsc2UsXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXG4gIFNWR051bWJlckxpc3Q6IGZhbHNlLFxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXG4gIFNWR1N0cmluZ0xpc3Q6IGZhbHNlLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXG4gIFN0eWxlU2hlZXRMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxuICBUb3VjaExpc3Q6IGZhbHNlXG59O1xuXG5mb3IgKHZhciBjb2xsZWN0aW9ucyA9IGdldEtleXMoRE9NSXRlcmFibGVzKSwgaSA9IDA7IGkgPCBjb2xsZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW05BTUVdO1xuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICB2YXIga2V5O1xuICBpZiAocHJvdG8pIHtcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBBcnJheVZhbHVlcztcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcbiAgfVxufVxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxudmFyIGlzID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCIvLyA3LjEuMSBUb1ByaW1pdGl2ZShpbnB1dCBbLCBQcmVmZXJyZWRUeXBlXSlcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XG52YXIgJGl0ZXJDcmVhdGUgPSByZXF1aXJlKCcuL19pdGVyLWNyZWF0ZScpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XG52YXIgS0VZUyA9ICdrZXlzJztcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgJGl0ZXJDcmVhdGUoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpO1xuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcbiAgICB9IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xuICB9O1xuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgREVGX1ZBTFVFUyA9IERFRkFVTFQgPT0gVkFMVUVTO1xuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcbiAgdmFyICRuYXRpdmUgPSBwcm90b1tJVEVSQVRPUl0gfHwgcHJvdG9bRkZfSVRFUkFUT1JdIHx8IERFRkFVTFQgJiYgcHJvdG9bREVGQVVMVF07XG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xuICB2YXIgJGFueU5hdGl2ZSA9IE5BTUUgPT0gJ0FycmF5JyA/IHByb3RvLmVudHJpZXMgfHwgJG5hdGl2ZSA6ICRuYXRpdmU7XG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xuICAvLyBGaXggbmF0aXZlXG4gIGlmICgkYW55TmF0aXZlKSB7XG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICAvLyBTZXQgQEB0b1N0cmluZ1RhZyB0byBuYXRpdmUgaXRlcmF0b3JzXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xuICAgICAgaWYgKCFMSUJSQVJZICYmIHR5cGVvZiBJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykgaGlkZShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpO1xuICAgIH1cbiAgfVxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcbiAgICAkZGVmYXVsdCA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuICRuYXRpdmUuY2FsbCh0aGlzKTsgfTtcbiAgfVxuICAvLyBEZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghTElCUkFSWSB8fCBGT1JDRUQpICYmIChCVUdHWSB8fCBWQUxVRVNfQlVHIHx8ICFwcm90b1tJVEVSQVRPUl0pKSB7XG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcbiAgfVxuICAvLyBQbHVnIGZvciBsaWJyYXJ5XG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyAkZGVmYXVsdCA6IGdldE1ldGhvZChLRVlTKSxcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKGtleSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XG4gIH1cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHZhciBsdCA9ICc8JztcbiAgdmFyIGd0ID0gJz4nO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxuICAvLyBjcmVhdGVEaWN0ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuT2JqZWN0O1xuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xuICBjcmVhdGVEaWN0ID0gaWZyYW1lRG9jdW1lbnQuRjtcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKE8gIT09IG51bGwpIHtcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5KCk7XG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxuICAgIHJlc3VsdFtJRV9QUk9UT10gPSBPO1xuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XG59O1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IChcbiAgJ2NvbnN0cnVjdG9yLGhhc093blByb3BlcnR5LGlzUHJvdG90eXBlT2YscHJvcGVydHlJc0VudW1lcmFibGUsdG9Mb2NhbGVTdHJpbmcsdG9TdHJpbmcsdmFsdWVPZidcbikuc3BsaXQoJywnKTtcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxuLy8gMSAtPiBBcnJheSNtYXBcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXG4vLyAzIC0+IEFycmF5I3NvbWVcbi8vIDQgLT4gQXJyYXkjZXZlcnlcbi8vIDUgLT4gQXJyYXkjZmluZFxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xuICB2YXIgSVNfTUFQID0gVFlQRSA9PSAxO1xuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcbiAgdmFyIElTX0VWRVJZID0gVFlQRSA9PSA0O1xuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XG4gIHZhciBjcmVhdGUgPSAkY3JlYXRlIHx8IGFzYztcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xuICAgIHZhciBzZWxmID0gSU9iamVjdChPKTtcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbCwgcmVzO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsID0gc2VsZltpbmRleF07XG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiB0cnVlOyAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxuICAgICAgICAgIGNhc2UgMjogcmVzdWx0LnB1c2godmFsKTsgICAgICAgIC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XG4gIH07XG59O1xuIiwiLy8gNy4yLjIgSXNBcnJheShhcmd1bWVudClcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY29mKGFyZykgPT0gJ0FycmF5Jztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihuYW1lICsgJzogaW5jb3JyZWN0IGludm9jYXRpb24hJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgQlJFQUsgPSB7fTtcbnZhciBSRVRVUk4gPSB7fTtcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xuICB2YXIgaXRlckZuID0gSVRFUkFUT1IgPyBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyYWJsZTsgfSA6IGdldEl0ZXJGbihpdGVyYWJsZSk7XG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGVuZ3RoLCBzdGVwLCBpdGVyYXRvciwgcmVzdWx0O1xuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXG4gIGlmIChpc0FycmF5SXRlcihpdGVyRm4pKSBmb3IgKGxlbmd0aCA9IHRvTGVuZ3RoKGl0ZXJhYmxlLmxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9IGVsc2UgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOykge1xuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xuICB9XG59O1xuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuZXhwb3J0cy5SRVRVUk4gPSBSRVRVUk47XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBzYWZlKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIHJpdGVyID0gWzddW0lURVJBVE9SXSgpO1xuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXG4gIEFycmF5LmZyb20ocml0ZXIsIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgc2tpcENsb3NpbmcpIHtcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBzYWZlID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IFs3XTtcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcbiAgICBpdGVyLm5leHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB7IGRvbmU6IHNhZmUgPSB0cnVlIH07IH07XG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XG4gICAgZXhlYyhhcnIpO1xuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIHNhZmU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICB0aGlzLl90ID0gU3RyaW5nKGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBPID0gdGhpcy5fdDtcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcbiAgdmFyIHBvaW50O1xuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xuICB0aGlzLl9pICs9IHBvaW50Lmxlbmd0aDtcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcbiAgICBpZiAobWFwcGluZykgbWFwZm4gPSBjdHgobWFwZm4sIGFMZW4gPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcbiAgICAgIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChPKSwgcmVzdWx0ID0gbmV3IEMoKTsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0Lmxlbmd0aCA9IGluZGV4O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XG4gIHZhciByZXN1bHQgPSAnJztcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xuICBpZiAodGhhdC5tdWx0aWxpbmUpIHJlc3VsdCArPSAnbSc7XG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcbnZhciBpZCA9IDA7XG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcbiAgICBpOiAnTycgKyArK2lkLCAvLyBvYmplY3QgSURcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xuICB9IH0pO1xufTtcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcbiAgICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpIHJldHVybiAnRic7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcbiAgICAvLyBhZGQgbWlzc2luZyBtZXRhZGF0YVxuICAgIHNldE1ldGEoaXQpO1xuICAvLyByZXR1cm4gb2JqZWN0IElEXG4gIH0gcmV0dXJuIGl0W01FVEFdLmk7XG59O1xudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xuICBpZiAoIWhhcyhpdCwgTUVUQSkpIHtcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXG4gICAgc2V0TWV0YShpdCk7XG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XG59O1xuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaRSAmJiBtZXRhLk5FRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBKSkgc2V0TWV0YShpdCk7XG4gIHJldHVybiBpdDtcbn07XG52YXIgbWV0YSA9IG1vZHVsZS5leHBvcnRzID0ge1xuICBLRVk6IE1FVEEsXG4gIE5FRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrOiBnZXRXZWFrLFxuICBvbkZyZWV6ZTogb25GcmVlemVcbn07XG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRZUEUpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XG4gIHJldHVybiBpdDtcbn07XG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b1tVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRvbmUsIHZhbHVlKSB7XG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XG59O1xuIiwiLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3NcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCkgPyBPYmplY3QgOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pIGlmIChrZXkgIT0gSUVfUFJPVE8pIGhhcyhPLCBrZXkpICYmIHJlc3VsdC5wdXNoKGtleSk7XG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcbiAgICB+YXJyYXlJbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiLy8gZmFsc2UgLT4gQXJyYXkjaW5kZXhPZlxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pIHtcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG4iLCJ2YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIGtleXMoaXQpIHtcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcbiAgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxuICBtYXA6IGZ1bmN0aW9uIG1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XG4gIH1cbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcbiAgICB2YXIgZ2VuZXJhdG9yID0gT2JqZWN0LmNyZWF0ZShwcm90b0dlbmVyYXRvci5wcm90b3R5cGUpO1xuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xuXG4gICAgLy8gVGhlIC5faW52b2tlIG1ldGhvZCB1bmlmaWVzIHRoZSBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlIC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG4gIHZhciBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvICYmIGdldFByb3RvKGdldFByb3RvKHZhbHVlcyhbXSkpKTtcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcbiAgICAgIGhhc093bi5jYWxsKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlLCBpdGVyYXRvclN5bWJvbCkpIHtcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cbiAgICBJdGVyYXRvclByb3RvdHlwZSA9IE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlO1xuICB9XG5cbiAgdmFyIEdwID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUucHJvdG90eXBlID1cbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247XG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XG4gICAgICAgIGdlbkZ1blt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XG4gICAgICB9XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTtcbiAgfVxuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7XG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBleHBvcnRzLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xuXG4gIC8vIE5vdGUgdGhhdCBzaW1wbGUgYXN5bmMgZnVuY3Rpb25zIGFyZSBpbXBsZW1lbnRlZCBvbiB0b3Agb2ZcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxuICBleHBvcnRzLmFzeW5jID0gZnVuY3Rpb24oaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpIHtcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4IHx8ICcnO1xudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xudmFyIGVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcblxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcbiAgdHJ5IHtcbiAgICAvLyBjb3JyZWN0IHN1YmNsYXNzaW5nIHdpdGggQEBzcGVjaWVzIHN1cHBvcnRcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xuICAgICAgZXhlYyhlbXB0eSwgZW1wdHkpO1xuICAgIH07XG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxuICAgIHJldHVybiAoaXNOb2RlIHx8IHR5cGVvZiBQcm9taXNlUmVqZWN0aW9uRXZlbnQgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcbiAgICAgICYmIHVzZXJBZ2VudC5pbmRleE9mKCdDaHJvbWUvNjYnKSA9PT0gLTE7XG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxufSgpO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcbnZhciBub3RpZnkgPSBmdW5jdGlvbiAocHJvbWlzZSwgaXNSZWplY3QpIHtcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcbiAgcHJvbWlzZS5fbiA9IHRydWU7XG4gIHZhciBjaGFpbiA9IHByb21pc2UuX2M7XG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgb2sgPSBwcm9taXNlLl9zID09IDE7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgICAgICAgICBwcm9taXNlLl9oID0gMTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XG4gICAgICAgICAgICBpZiAoZG9tYWluKSB7XG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcbiAgICAgICAgICAgIHJlamVjdChUeXBlRXJyb3IoJ1Byb21pc2UtY2hhaW4gY3ljbGUnKSk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0gZWxzZSByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xuICAgIHByb21pc2UuX24gPSBmYWxzZTtcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xuICB9KTtcbn07XG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcbiAgICBpZiAodW5oYW5kbGVkKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzTm9kZSkge1xuICAgICAgICAgIHByb2Nlc3MuZW1pdCgndW5oYW5kbGVkUmVqZWN0aW9uJywgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIGlmICgoY29uc29sZSA9IGdsb2JhbC5jb25zb2xlKSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XG4gICAgfSBwcm9taXNlLl9hID0gdW5kZWZpbmVkO1xuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xuICB9KTtcbn07XG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XG59O1xudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBoYW5kbGVyO1xuICAgIGlmIChpc05vZGUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBpZiAoaGFuZGxlciA9IGdsb2JhbC5vbnJlamVjdGlvbmhhbmRsZWQpIHtcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XG4gICAgfVxuICB9KTtcbn07XG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xuICBwcm9taXNlLl9zID0gMjtcbiAgaWYgKCFwcm9taXNlLl9hKSBwcm9taXNlLl9hID0gcHJvbWlzZS5fYy5zbGljZSgpO1xuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XG59O1xudmFyICRyZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHZhciBwcm9taXNlID0gdGhpcztcbiAgdmFyIHRoZW47XG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XG4gIHByb21pc2UuX2QgPSB0cnVlO1xuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsIGN0eCgkcmVzb2x2ZSwgd3JhcHBlciwgMSksIGN0eCgkcmVqZWN0LCB3cmFwcGVyLCAxKSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9taXNlLl92ID0gdmFsdWU7XG4gICAgICBwcm9taXNlLl9zID0gMTtcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKCFVU0VfTkFUSVZFKSB7XG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXG4gICRQcm9taXNlID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHRoaXMuX2MgPSBbXTsgICAgICAgICAgICAgLy8gPC0gYXdhaXRpbmcgcmVhY3Rpb25zXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcbiAgICB0aGlzLl9kID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIGRvbmVcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxuICAgIHRoaXMuX24gPSBmYWxzZTsgICAgICAgICAgLy8gPC0gbm90aWZ5XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xuICAgIC8vIDI1LjQuNS4zIFByb21pc2UucHJvdG90eXBlLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xuICAgICAgdGhpcy5fYy5wdXNoKHJlYWN0aW9uKTtcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxuICAgICAgPyBuZXcgT3duUHJvbWlzZUNhcGFiaWxpdHkoQylcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICB9O1xufVxuXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xucmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKSgkUHJvbWlzZSwgUFJPTUlTRSk7XG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcblxuLy8gc3RhdGljc1xuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xuICAvLyAyNS40LjQuNSBQcm9taXNlLnJlamVjdChyKVxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcbiAgICB2YXIgJCRyZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICAkJHJlamVjdChyKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XG4gIC8vIDI1LjQuNC42IFByb21pc2UucmVzb2x2ZSh4KVxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XG4gICRQcm9taXNlLmFsbChpdGVyKVsnY2F0Y2gnXShlbXB0eSk7XG59KSksIFBST01JU0UsIHtcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XG4gICAgICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgIHJlbWFpbmluZysrO1xuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9LCByZWplY3QpO1xuICAgICAgfSk7XG4gICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgfSk7XG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH0sXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZSkgcmVqZWN0KHJlc3VsdC52KTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmF0b3IsIGZuLCB2YWx1ZSwgZW50cmllcykge1xuICB0cnkge1xuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XG4gIC8vIDcuNC42IEl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IsIGNvbXBsZXRpb24pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkgYW5PYmplY3QocmV0LmNhbGwoaXRlcmF0b3IpKTtcbiAgICB0aHJvdyBlO1xuICB9XG59O1xuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb3JlJykuZ2V0SXRlcmF0b3JNZXRob2QgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xudmFyIGNlbCA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgc2V0VGFzayA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xudmFyIERpc3BhdGNoID0gZ2xvYmFsLkRpc3BhdGNoO1xudmFyIGNvdW50ZXIgPSAwO1xudmFyIHF1ZXVlID0ge307XG52YXIgT05SRUFEWVNUQVRFQ0hBTkdFID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaWQgPSArdGhpcztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4uY2FsbChldmVudC5kYXRhKTtcbn07XG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XG5pZiAoIXNldFRhc2sgfHwgIWNsZWFyVGFzaykge1xuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XG4gICAgdmFyIGFyZ3MgPSBbXTtcbiAgICB2YXIgaSA9IDE7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhclRhc2sgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkge1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gIH07XG4gIC8vIE5vZGUuanMgMC44LVxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soY3R4KHJ1biwgaWQsIDEpKTtcbiAgICB9O1xuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcbiAgfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XG4gICAgY2hhbm5lbCA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XG4gICAgZGVmZXIgPSBjdHgocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcbiAgICB9O1xuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcbiAgLy8gSUU4LVxuICB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjZWwoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xuICAgICAgfTtcbiAgICB9O1xuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xuICB9IGVsc2Uge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XG4gICAgfTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0VGFzayxcbiAgY2xlYXI6IGNsZWFyVGFza1xufTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xuXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciBDID0gZ2xvYmFsW0tFWV07XG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9XG4gIH0pO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcbi8vIHRydWUgIC0+IFN0cmluZyNhdFxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0aGF0LCBwb3MpIHtcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xuICAgIHZhciBsID0gcy5sZW5ndGg7XG4gICAgdmFyIGEsIGI7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGEgPSBzLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXG4gICAgICA6IFRPX1NUUklORyA/IHMuc2xpY2UoaSwgaSArIDIpIDogKGEgLSAweGQ4MDAgPDwgMTApICsgKGIgLSAweGRjMDApICsgMHgxMDAwMDtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJmAnXXxcXGRcXGQ/KS9nO1xuXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/IGl0IDogU3RyaW5nKGl0KTtcbn07XG5cbi8vIEBAcmVwbGFjZSBsb2dpY1xucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcbiAgcmV0dXJuIFtcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBmbi5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0sXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJHJlcGxhY2UsIHJlZ2V4cCwgdGhpcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgICAgIGlmICghZnVuY3Rpb25hbFJlcGxhY2UpIHJlcGxhY2VWYWx1ZSA9IFN0cmluZyhyZXBsYWNlVmFsdWUpO1xuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcbiAgICAgIGlmIChnbG9iYWwpIHtcbiAgICAgICAgdmFyIGZ1bGxVbmljb2RlID0gcngudW5pY29kZTtcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHRzID0gW107XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IG51bGwpIGJyZWFrO1xuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcbiAgICAgIH1cbiAgICAgIHZhciBhY2N1bXVsYXRlZFJlc3VsdCA9ICcnO1xuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG5cbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcbiAgICB2YXIgbSA9IGNhcHR1cmVzLmxlbmd0aDtcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG5hbWVkQ2FwdHVyZXMgPSB0b09iamVjdChuYW1lZENhcHR1cmVzKTtcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgICB9XG4gICAgcmV0dXJuICRyZXBsYWNlLmNhbGwocmVwbGFjZW1lbnQsIHN5bWJvbHMsIGZ1bmN0aW9uIChtYXRjaCwgY2gpIHtcbiAgICAgIHZhciBjYXB0dXJlO1xuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgICAgY2FzZSAnJCc6IHJldHVybiAnJCc7XG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgICBjYXNlIFwiJ1wiOiByZXR1cm4gc3RyLnNsaWNlKHRhaWxQb3MpO1xuICAgICAgICBjYXNlICc8JzpcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XG4gICAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgICAgaWYgKG4gPT09IDApIHJldHVybiBtYXRjaDtcbiAgICAgICAgICBpZiAobiA+IG0pIHtcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICAgIGlmIChmID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2FwdHVyZSA9PT0gdW5kZWZpbmVkID8gJycgOiBjYXB0dXJlO1xuICAgIH0pO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBMQVNUX0lOREVYID0gJ2xhc3RJbmRleCc7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvLFxuICAgICAgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xufSkoKTtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcblxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcbiAgICAgIHJlQ29weSA9IG5ldyBSZWdFeHAoJ14nICsgcmUuc291cmNlICsgJyQoPyFcXFxccyknLCByZWdleHBGbGFncy5jYWxsKHJlKSk7XG4gICAgfVxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xuXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XG5cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HICYmIG1hdGNoKSB7XG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xuICAgIH1cbiAgICBpZiAoTlBDR19JTkNMVURFRCAmJiBtYXRjaCAmJiBtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9vcC1mdW5jXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xuICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHVuZGVmaW5lZCkgbWF0Y2hbaV0gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBtYXRjaDtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwYXRjaGVkRXhlYztcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcblxudmFyIGRlZmluZSA9IGZ1bmN0aW9uIChmbikge1xuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xufTtcblxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXG4gICAgICAnZmxhZ3MnIGluIFIgPyBSLmZsYWdzIDogIURFU0NSSVBUT1JTICYmIFIgaW5zdGFuY2VvZiBSZWdFeHAgPyAkZmxhZ3MuY2FsbChSKSA6IHVuZGVmaW5lZCk7XG4gIH0pO1xuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcbn0gZWxzZSBpZiAoJHRvU3RyaW5nLm5hbWUgIT0gVE9fU1RSSU5HKSB7XG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH0pO1xufVxuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDIpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xuICAvLyAyMi4xLjMuNyAvIDE1LjQuNC4yMCBBcnJheS5wcm90b3R5cGUuZmlsdGVyKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcbiAgfVxufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcbn07XG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIvLyAxOS4xLjIuNyAvIDE1LjIuMy40IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XG5cbnZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgLy8gZmFzdCBjYXNlXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgdmFyIGVudHJ5O1xuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcbiAgZm9yIChlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxuICAgICAgdGhhdC5fbCA9IHVuZGVmaW5lZDsgICAgLy8gbGFzdCBlbnRyeVxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xuICAgIH0pO1xuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcbiAgICAgIC8vIDIzLjIuMy4yIFNldC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcbiAgICAgICAgfVxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xuICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xuICAgICAgICAgIGRlbGV0ZSB0aGF0Ll9pW2VudHJ5LmldO1xuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xuICAgICAgICAgIGlmIChuZXh0KSBuZXh0LnAgPSBwcmV2O1xuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XG4gICAgICAgICAgdGhhdFtTSVpFXS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhpcy5fZikge1xuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XG4gICAgICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnIpIGVudHJ5ID0gZW50cnkucDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy43IE1hcC5wcm90b3R5cGUuaGFzKGtleSlcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiAhIWdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE5BTUUpLCBrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZFAoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gQztcbiAgfSxcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgdmFyIHByZXYsIGluZGV4O1xuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxuICAgIGlmIChlbnRyeSkge1xuICAgICAgZW50cnkudiA9IHZhbHVlO1xuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhhdC5fbCA9IGVudHJ5ID0ge1xuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxuICAgICAgICB2OiB2YWx1ZSwgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gdmFsdWVcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XG4gICAgICAgIHI6IGZhbHNlICAgICAgICAgICAgICAgICAgICAgICAvLyA8LSByZW1vdmVkXG4gICAgICB9O1xuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XG4gICAgICBpZiAocHJldikgcHJldi5uID0gZW50cnk7XG4gICAgICB0aGF0W1NJWkVdKys7XG4gICAgICAvLyBhZGQgdG8gaW5kZXhcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSB0aGF0Ll9pW2luZGV4XSA9IGVudHJ5O1xuICAgIH0gcmV0dXJuIHRoYXQ7XG4gIH0sXG4gIGdldEVudHJ5OiBnZXRFbnRyeSxcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XG4gICAgICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xuICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XG4gICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCF0aGF0Ll90IHx8ICEodGhhdC5fbCA9IGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uIDogdGhhdC5fdC5fZikpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHN0ZXAoMSk7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGVudHJ5LmspO1xuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGluaGVyaXRJZlJlcXVpcmVkID0gcmVxdWlyZSgnLi9faW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xuICB2YXIgQmFzZSA9IGdsb2JhbFtOQU1FXTtcbiAgdmFyIEMgPSBCYXNlO1xuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xuICB2YXIgcHJvdG8gPSBDICYmIEMucHJvdG90eXBlO1xuICB2YXIgTyA9IHt9O1xuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xuICAgIHZhciBmbiA9IHByb3RvW0tFWV07XG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xuICAgICAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChhKSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XG4gICAgICAgIDogZnVuY3Rpb24gc2V0KGEsIGIpIHsgZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEsIGIpOyByZXR1cm4gdGhpczsgfVxuICAgICk7XG4gIH07XG4gIGlmICh0eXBlb2YgQyAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBwcm90by5mb3JFYWNoICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xuICB9KSkpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xuICAgIG1ldGEuTkVFRCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAvLyBlYXJseSBpbXBsZW1lbnRhdGlvbnMgbm90IHN1cHBvcnRzIGNoYWluaW5nXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgIC8vIGZvciBlYXJseSBpbXBsZW1lbnRhdGlvbnMgLTAgYW5kICswIG5vdCB0aGUgc2FtZVxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXG4gICAgICB2YXIgJGluc3RhbmNlID0gbmV3IEMoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcbiAgICAgIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0YXJnZXQsIGl0ZXJhYmxlKSB7XG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDLnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xuICAgIH1cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XG4gICAgLy8gd2VhayBjb2xsZWN0aW9ucyBzaG91bGQgbm90IGNvbnRhaW5zIC5jbGVhciBtZXRob2RcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xuICB9XG5cbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XG5cbiAgT1tOQU1FXSA9IEM7XG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDLCBOQU1FLCBJU19NQVApO1xuXG4gIHJldHVybiBDO1xufTtcbiIsIi8qISBub3Vpc2xpZGVyIC0gMTMuMS4zIC0gMy8xNS8yMDE5ICovXG4oZnVuY3Rpb24oZmFjdG9yeSkge1xuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xuICAgICAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAvLyBOb2RlL0NvbW1vbkpTXG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEJyb3dzZXIgZ2xvYmFsc1xuICAgICAgICB3aW5kb3cubm9VaVNsaWRlciA9IGZhY3RvcnkoKTtcbiAgICB9XG59KShmdW5jdGlvbigpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcblxuICAgIHZhciBWRVJTSU9OID0gXCIxMy4xLjNcIjtcblxuICAgIC8vcmVnaW9uIEhlbHBlciBNZXRob2RzXG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGVudHJ5LnRvID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGVudHJ5LmZyb20gPT09IFwiZnVuY3Rpb25cIjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVFbGVtZW50KGVsKSB7XG4gICAgICAgIGVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoZWwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2V0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8vIEJpbmRhYmxlIHZlcnNpb25cbiAgICBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICAvLyBSZW1vdmVzIGR1cGxpY2F0ZXMgZnJvbSBhbiBhcnJheS5cbiAgICBmdW5jdGlvbiB1bmlxdWUoYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5LmZpbHRlcihmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICByZXR1cm4gIXRoaXNbYV0gPyAodGhpc1thXSA9IHRydWUpIDogZmFsc2U7XG4gICAgICAgIH0sIHt9KTtcbiAgICB9XG5cbiAgICAvLyBSb3VuZCBhIHZhbHVlIHRvIHRoZSBjbG9zZXN0ICd0bycuXG4gICAgZnVuY3Rpb24gY2xvc2VzdCh2YWx1ZSwgdG8pIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQodmFsdWUgLyB0bykgKiB0bztcbiAgICB9XG5cbiAgICAvLyBDdXJyZW50IHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gdGhlIGRvY3VtZW50LlxuICAgIGZ1bmN0aW9uIG9mZnNldChlbGVtLCBvcmllbnRhdGlvbikge1xuICAgICAgICB2YXIgcmVjdCA9IGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHBhZ2VPZmZzZXQgPSBnZXRQYWdlT2Zmc2V0KGRvYyk7XG5cbiAgICAgICAgLy8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGNvbnRhaW5zIGxlZnQgc2Nyb2xsIGluIENocm9tZSBvbiBBbmRyb2lkLlxuICAgICAgICAvLyBJIGhhdmVuJ3QgZm91bmQgYSBmZWF0dXJlIGRldGVjdGlvbiB0aGF0IHByb3ZlcyB0aGlzLiBXb3JzdCBjYXNlXG4gICAgICAgIC8vIHNjZW5hcmlvIG9uIG1pcy1tYXRjaDogdGhlICd0YXAnIGZlYXR1cmUgb24gaG9yaXpvbnRhbCBzbGlkZXJzIGJyZWFrcy5cbiAgICAgICAgaWYgKC93ZWJraXQuKkNocm9tZS4qTW9iaWxlL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgICAgICAgcGFnZU9mZnNldC54ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcmllbnRhdGlvblxuICAgICAgICAgICAgPyByZWN0LnRvcCArIHBhZ2VPZmZzZXQueSAtIGRvY0VsZW0uY2xpZW50VG9wXG4gICAgICAgICAgICA6IHJlY3QubGVmdCArIHBhZ2VPZmZzZXQueCAtIGRvY0VsZW0uY2xpZW50TGVmdDtcbiAgICB9XG5cbiAgICAvLyBDaGVja3Mgd2hldGhlciBhIHZhbHVlIGlzIG51bWVyaWNhbC5cbiAgICBmdW5jdGlvbiBpc051bWVyaWMoYSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGEgPT09IFwibnVtYmVyXCIgJiYgIWlzTmFOKGEpICYmIGlzRmluaXRlKGEpO1xuICAgIH1cblxuICAgIC8vIFNldHMgYSBjbGFzcyBhbmQgcmVtb3ZlcyBpdCBhZnRlciBbZHVyYXRpb25dIG1zLlxuICAgIGZ1bmN0aW9uIGFkZENsYXNzRm9yKGVsZW1lbnQsIGNsYXNzTmFtZSwgZHVyYXRpb24pIHtcbiAgICAgICAgaWYgKGR1cmF0aW9uID4gMCkge1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZWxlbWVudCwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0sIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIExpbWl0cyBhIHZhbHVlIHRvIDAgLSAxMDBcbiAgICBmdW5jdGlvbiBsaW1pdChhKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihhLCAxMDApLCAwKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcyBhIHZhcmlhYmxlIGFzIGFuIGFycmF5LCBpZiBpdCBpc24ndCBvbmUgeWV0LlxuICAgIC8vIE5vdGUgdGhhdCBhbiBpbnB1dCBhcnJheSBpcyByZXR1cm5lZCBieSByZWZlcmVuY2UhXG4gICAgZnVuY3Rpb24gYXNBcnJheShhKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpID8gYSA6IFthXTtcbiAgICB9XG5cbiAgICAvLyBDb3VudHMgZGVjaW1hbHNcbiAgICBmdW5jdGlvbiBjb3VudERlY2ltYWxzKG51bVN0cikge1xuICAgICAgICBudW1TdHIgPSBTdHJpbmcobnVtU3RyKTtcbiAgICAgICAgdmFyIHBpZWNlcyA9IG51bVN0ci5zcGxpdChcIi5cIik7XG4gICAgICAgIHJldHVybiBwaWVjZXMubGVuZ3RoID4gMSA/IHBpZWNlc1sxXS5sZW5ndGggOiAwO1xuICAgIH1cblxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNhZGRfY2xhc3NcbiAgICBmdW5jdGlvbiBhZGRDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSArPSBcIiBcIiArIGNsYXNzTmFtZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGh0dHA6Ly95b3VtaWdodG5vdG5lZWRqcXVlcnkuY29tLyNyZW1vdmVfY2xhc3NcbiAgICBmdW5jdGlvbiByZW1vdmVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7XG4gICAgICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIoXnxcXFxcYilcIiArIGNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcYnwkKVwiLCBcImdpXCIpLFxuICAgICAgICAgICAgICAgIFwiIFwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9wbGFpbmpzLmNvbS9qYXZhc2NyaXB0L2F0dHJpYnV0ZXMvYWRkaW5nLXJlbW92aW5nLWFuZC10ZXN0aW5nLWZvci1jbGFzc2VzLTkvXG4gICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0XG4gICAgICAgICAgICA/IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpXG4gICAgICAgICAgICA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9zY3JvbGxZI05vdGVzXG4gICAgZnVuY3Rpb24gZ2V0UGFnZU9mZnNldChkb2MpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRQYWdlT2Zmc2V0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc0NTUzFDb21wYXQgPSAoZG9jLmNvbXBhdE1vZGUgfHwgXCJcIikgPT09IFwiQ1NTMUNvbXBhdFwiO1xuICAgICAgICB2YXIgeCA9IHN1cHBvcnRQYWdlT2Zmc2V0XG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWE9mZnNldFxuICAgICAgICAgICAgOiBpc0NTUzFDb21wYXRcbiAgICAgICAgICAgICAgICA/IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIHkgPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50cyBpbnN0ZWFkXG4gICAgLy8gb2YgYWNjZXNzaW5nIHdpbmRvdy4qIGFzIHNvb24gYXMgdGhlIG1vZHVsZSBuZWVkcyBpdFxuICAgIC8vIHNvIHRoYXQgd2UgZG8gbm90IGNvbXB1dGUgYW55dGhpbmcgaWYgbm90IG5lZWRlZFxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZXZlbnRzIHRvIGJpbmQuIElFMTEgaW1wbGVtZW50cyBwb2ludGVyRXZlbnRzIHdpdGhvdXRcbiAgICAgICAgLy8gYSBwcmVmaXgsIHdoaWNoIGJyZWFrcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIElFMTAgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcInBvaW50ZXJkb3duXCIsXG4gICAgICAgICAgICAgICAgICBtb3ZlOiBcInBvaW50ZXJtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICBlbmQ6IFwicG9pbnRlcnVwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJNU1BvaW50ZXJEb3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJNU1BvaW50ZXJNb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZW5kOiBcIk1TUG9pbnRlclVwXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwibW91c2Vtb3ZlIHRvdWNobW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJtb3VzZXVwIHRvdWNoZW5kXCJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvRXZlbnRMaXN0ZW5lck9wdGlvbnMvYmxvYi9naC1wYWdlcy9leHBsYWluZXIubWRcbiAgICAvLyBJc3N1ZSAjNzg1XG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNQYXNzaXZlKCkge1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBSYW5nZSBDYWxjdWxhdGlvblxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzaXplIG9mIGEgc3ViLXJhbmdlIGluIHJlbGF0aW9uIHRvIGEgZnVsbCByYW5nZS5cbiAgICBmdW5jdGlvbiBzdWJSYW5nZVJhdGlvKHBhLCBwYikge1xuICAgICAgICByZXR1cm4gMTAwIC8gKHBiIC0gcGEpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBIb3cgbWFueSBwZXJjZW50IGlzIHRoaXMgdmFsdWUgb2YgdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBmcm9tUGVyY2VudGFnZShyYW5nZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAqIDEwMCkgLyAocmFuZ2VbMV0gLSByYW5nZVswXSk7XG4gICAgfVxuXG4gICAgLy8gKHBlcmNlbnRhZ2UpIFdoZXJlIGlzIHRoaXMgdmFsdWUgb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiB0b1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmcm9tUGVyY2VudGFnZShyYW5nZSwgcmFuZ2VbMF0gPCAwID8gdmFsdWUgKyBNYXRoLmFicyhyYW5nZVswXSkgOiB2YWx1ZSAtIHJhbmdlWzBdKTtcbiAgICB9XG5cbiAgICAvLyAodmFsdWUpIEhvdyBtdWNoIGlzIHRoaXMgcGVyY2VudGFnZSBvbiB0aGlzIHJhbmdlP1xuICAgIGZ1bmN0aW9uIGlzUGVyY2VudGFnZShyYW5nZSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAqIChyYW5nZVsxXSAtIHJhbmdlWzBdKSkgLyAxMDAgKyByYW5nZVswXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRKKHZhbHVlLCBhcnIpIHtcbiAgICAgICAgdmFyIGogPSAxO1xuXG4gICAgICAgIHdoaWxlICh2YWx1ZSA+PSBhcnJbal0pIHtcbiAgICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBJbnB1dCBhIHZhbHVlLCBmaW5kIHdoZXJlLCBvbiBhIHNjYWxlIG9mIDAtMTAwLCBpdCBhcHBsaWVzLlxuICAgIGZ1bmN0aW9uIHRvU3RlcHBpbmcoeFZhbCwgeFBjdCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID49IHhWYWwuc2xpY2UoLTEpWzBdKSB7XG4gICAgICAgICAgICByZXR1cm4gMTAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4VmFsKTtcbiAgICAgICAgdmFyIHZhID0geFZhbFtqIC0gMV07XG4gICAgICAgIHZhciB2YiA9IHhWYWxbal07XG4gICAgICAgIHZhciBwYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgcGIgPSB4UGN0W2pdO1xuXG4gICAgICAgIHJldHVybiBwYSArIHRvUGVyY2VudGFnZShbdmEsIHZiXSwgdmFsdWUpIC8gc3ViUmFuZ2VSYXRpbyhwYSwgcGIpO1xuICAgIH1cblxuICAgIC8vICh2YWx1ZSkgSW5wdXQgYSBwZXJjZW50YWdlLCBmaW5kIHdoZXJlIGl0IGlzIG9uIHRoZSBzcGVjaWZpZWQgcmFuZ2UuXG4gICAgZnVuY3Rpb24gZnJvbVN0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIC8vIFRoZXJlIGlzIG5vIHJhbmdlIGdyb3VwIHRoYXQgZml0cyAxMDBcbiAgICAgICAgaWYgKHZhbHVlID49IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHhWYWwuc2xpY2UoLTEpWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4UGN0KTtcbiAgICAgICAgdmFyIHZhID0geFZhbFtqIC0gMV07XG4gICAgICAgIHZhciB2YiA9IHhWYWxbal07XG4gICAgICAgIHZhciBwYSA9IHhQY3RbaiAtIDFdO1xuICAgICAgICB2YXIgcGIgPSB4UGN0W2pdO1xuXG4gICAgICAgIHJldHVybiBpc1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sICh2YWx1ZSAtIHBhKSAqIHN1YlJhbmdlUmF0aW8ocGEsIHBiKSk7XG4gICAgfVxuXG4gICAgLy8gKHBlcmNlbnRhZ2UpIEdldCB0aGUgc3RlcCB0aGF0IGFwcGxpZXMgYXQgYSBjZXJ0YWluIHZhbHVlLlxuICAgIGZ1bmN0aW9uIGdldFN0ZXAoeFBjdCwgeFN0ZXBzLCBzbmFwLCB2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IDEwMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB4UGN0KTtcbiAgICAgICAgdmFyIGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIGIgPSB4UGN0W2pdO1xuXG4gICAgICAgIC8vIElmICdzbmFwJyBpcyBzZXQsIHN0ZXBzIGFyZSB1c2VkIGFzIGZpeGVkIHBvaW50cyBvbiB0aGUgc2xpZGVyLlxuICAgICAgICBpZiAoc25hcCkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgY2xvc2VzdCBwb3NpdGlvbiwgYSBvciBiLlxuICAgICAgICAgICAgaWYgKHZhbHVlIC0gYSA+IChiIC0gYSkgLyAyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF4U3RlcHNbaiAtIDFdKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geFBjdFtqIC0gMV0gKyBjbG9zZXN0KHZhbHVlIC0geFBjdFtqIC0gMV0sIHhTdGVwc1tqIC0gMV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZUVudHJ5UG9pbnQoaW5kZXgsIHZhbHVlLCB0aGF0KSB7XG4gICAgICAgIHZhciBwZXJjZW50YWdlO1xuXG4gICAgICAgIC8vIFdyYXAgbnVtZXJpY2FsIGlucHV0IGluIGFuIGFycmF5LlxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IFt2YWx1ZV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWplY3QgYW55IGludmFsaWQgaW5wdXQsIGJ5IHRlc3Rpbmcgd2hldGhlciB2YWx1ZSBpcyBhbiBhcnJheS5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnIGNvbnRhaW5zIGludmFsaWQgdmFsdWUuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ292ZXJ0IG1pbi9tYXggc3ludGF4IHRvIDAgYW5kIDEwMC5cbiAgICAgICAgaWYgKGluZGV4ID09PSBcIm1pblwiKSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCA9PT0gXCJtYXhcIikge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IDEwMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSBwYXJzZUZsb2F0KGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciBjb3JyZWN0IGlucHV0LlxuICAgICAgICBpZiAoIWlzTnVtZXJpYyhwZXJjZW50YWdlKSB8fCAhaXNOdW1lcmljKHZhbHVlWzBdKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnIHZhbHVlIGlzbid0IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgdmFsdWVzLlxuICAgICAgICB0aGF0LnhQY3QucHVzaChwZXJjZW50YWdlKTtcbiAgICAgICAgdGhhdC54VmFsLnB1c2godmFsdWVbMF0pO1xuXG4gICAgICAgIC8vIE5hTiB3aWxsIGV2YWx1YXRlIHRvIGZhbHNlIHRvbywgYnV0IHRvIGtlZXBcbiAgICAgICAgLy8gbG9nZ2luZyBjbGVhciwgc2V0IHN0ZXAgZXhwbGljaXRseS4gTWFrZSBzdXJlXG4gICAgICAgIC8vIG5vdCB0byBvdmVycmlkZSB0aGUgJ3N0ZXAnIHNldHRpbmcgd2l0aCBmYWxzZS5cbiAgICAgICAgaWYgKCFwZXJjZW50YWdlKSB7XG4gICAgICAgICAgICBpZiAoIWlzTmFOKHZhbHVlWzFdKSkge1xuICAgICAgICAgICAgICAgIHRoYXQueFN0ZXBzWzBdID0gdmFsdWVbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGF0LnhTdGVwcy5wdXNoKGlzTmFOKHZhbHVlWzFdKSA/IGZhbHNlIDogdmFsdWVbMV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcC5wdXNoKDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhbmRsZVN0ZXBQb2ludChpLCBuLCB0aGF0KSB7XG4gICAgICAgIC8vIElnbm9yZSAnZmFsc2UnIHN0ZXBwaW5nLlxuICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICBpZiAodGhhdC54VmFsW2ldID09PSB0aGF0LnhWYWxbaSArIDFdKSB7XG4gICAgICAgICAgICB0aGF0LnhTdGVwc1tpXSA9IHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaV0gPSB0aGF0LnhWYWxbaV07XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZhY3RvciB0byByYW5nZSByYXRpb1xuICAgICAgICB0aGF0LnhTdGVwc1tpXSA9XG4gICAgICAgICAgICBmcm9tUGVyY2VudGFnZShbdGhhdC54VmFsW2ldLCB0aGF0LnhWYWxbaSArIDFdXSwgbikgLyBzdWJSYW5nZVJhdGlvKHRoYXQueFBjdFtpXSwgdGhhdC54UGN0W2kgKyAxXSk7XG5cbiAgICAgICAgdmFyIHRvdGFsU3RlcHMgPSAodGhhdC54VmFsW2kgKyAxXSAtIHRoYXQueFZhbFtpXSkgLyB0aGF0LnhOdW1TdGVwc1tpXTtcbiAgICAgICAgdmFyIGhpZ2hlc3RTdGVwID0gTWF0aC5jZWlsKE51bWJlcih0b3RhbFN0ZXBzLnRvRml4ZWQoMykpIC0gMSk7XG4gICAgICAgIHZhciBzdGVwID0gdGhhdC54VmFsW2ldICsgdGhhdC54TnVtU3RlcHNbaV0gKiBoaWdoZXN0U3RlcDtcblxuICAgICAgICB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gc3RlcDtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gU3BlY3RydW1cblxuICAgIGZ1bmN0aW9uIFNwZWN0cnVtKGVudHJ5LCBzbmFwLCBzaW5nbGVTdGVwKSB7XG4gICAgICAgIHRoaXMueFBjdCA9IFtdO1xuICAgICAgICB0aGlzLnhWYWwgPSBbXTtcbiAgICAgICAgdGhpcy54U3RlcHMgPSBbc2luZ2xlU3RlcCB8fCBmYWxzZV07XG4gICAgICAgIHRoaXMueE51bVN0ZXBzID0gW2ZhbHNlXTtcbiAgICAgICAgdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcCA9IFtdO1xuXG4gICAgICAgIHRoaXMuc25hcCA9IHNuYXA7XG5cbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIgb3JkZXJlZCA9IFtdOyAvLyBbMCwgJ21pbiddLCBbMSwgJzUwJSddLCBbMiwgJ21heCddXG5cbiAgICAgICAgLy8gTWFwIHRoZSBvYmplY3Qga2V5cyB0byBhbiBhcnJheS5cbiAgICAgICAgZm9yIChpbmRleCBpbiBlbnRyeSkge1xuICAgICAgICAgICAgaWYgKGVudHJ5Lmhhc093blByb3BlcnR5KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIG9yZGVyZWQucHVzaChbZW50cnlbaW5kZXhdLCBpbmRleF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU29ydCBhbGwgZW50cmllcyBieSB2YWx1ZSAobnVtZXJpYyBzb3J0KS5cbiAgICAgICAgaWYgKG9yZGVyZWQubGVuZ3RoICYmIHR5cGVvZiBvcmRlcmVkWzBdWzBdID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBvcmRlcmVkLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhWzBdWzBdIC0gYlswXVswXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXSAtIGJbMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvbnZlcnQgYWxsIGVudHJpZXMgdG8gc3VicmFuZ2VzLlxuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBvcmRlcmVkLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgaGFuZGxlRW50cnlQb2ludChvcmRlcmVkW2luZGV4XVsxXSwgb3JkZXJlZFtpbmRleF1bMF0sIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIGFjdHVhbCBzdGVwIHZhbHVlcy5cbiAgICAgICAgLy8geFN0ZXBzIGlzIHNvcnRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB4UGN0IGFuZCB4VmFsLlxuICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IHRoaXMueFN0ZXBzLnNsaWNlKDApO1xuXG4gICAgICAgIC8vIENvbnZlcnQgYWxsIG51bWVyaWMgc3RlcHMgdG8gdGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIHN1YnJhbmdlIHRoZXkgcmVwcmVzZW50LlxuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGhhbmRsZVN0ZXBQb2ludChpbmRleCwgdGhpcy54TnVtU3RlcHNbaW5kZXhdLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXRNYXJnaW4gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgc3RlcCA9IHRoaXMueE51bVN0ZXBzWzBdO1xuXG4gICAgICAgIGlmIChzdGVwICYmICh2YWx1ZSAvIHN0ZXApICUgMSAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbGltaXQnLCAnbWFyZ2luJyBhbmQgJ3BhZGRpbmcnIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMueFBjdC5sZW5ndGggPT09IDIgPyBmcm9tUGVyY2VudGFnZSh0aGlzLnhWYWwsIHZhbHVlKSA6IGZhbHNlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUudG9TdGVwcGluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gdG9TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmZyb21TdGVwcGluZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmcm9tU3RlcHBpbmcodGhpcy54VmFsLCB0aGlzLnhQY3QsIHZhbHVlKTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldFN0ZXAgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YWx1ZSA9IGdldFN0ZXAodGhpcy54UGN0LCB0aGlzLnhTdGVwcywgdGhpcy5zbmFwLCB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0RGVmYXVsdFN0ZXAgPSBmdW5jdGlvbih2YWx1ZSwgaXNEb3duLCBzaXplKSB7XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcblxuICAgICAgICAvLyBXaGVuIGF0IHRoZSB0b3Agb3Igc3RlcHBpbmcgZG93biwgbG9vayBhdCB0aGUgcHJldmlvdXMgc3ViLXJhbmdlXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gMTAwIHx8IChpc0Rvd24gJiYgdmFsdWUgPT09IHRoaXMueFBjdFtqIC0gMV0pKSB7XG4gICAgICAgICAgICBqID0gTWF0aC5tYXgoaiAtIDEsIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnhWYWxbal0gLSB0aGlzLnhWYWxbaiAtIDFdKSAvIHNpemU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXROZWFyYnlTdGVwcyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgdGhpcy54UGN0KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RlcEJlZm9yZToge1xuICAgICAgICAgICAgICAgIHN0YXJ0VmFsdWU6IHRoaXMueFZhbFtqIC0gMl0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbaiAtIDJdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2ogLSAyXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRoaXNTdGVwOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAxXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMV0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDFdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RlcEFmdGVyOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2pdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2pdLFxuICAgICAgICAgICAgICAgIGhpZ2hlc3RTdGVwOiB0aGlzLnhIaWdoZXN0Q29tcGxldGVTdGVwW2pdXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5jb3VudFN0ZXBEZWNpbWFscyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc3RlcERlY2ltYWxzID0gdGhpcy54TnVtU3RlcHMubWFwKGNvdW50RGVjaW1hbHMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgc3RlcERlY2ltYWxzKTtcbiAgICB9O1xuXG4gICAgLy8gT3V0c2lkZSB0ZXN0aW5nXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmNvbnZlcnQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGVwKHRoaXMudG9TdGVwcGluZyh2YWx1ZSkpO1xuICAgIH07XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgLy9yZWdpb24gT3B0aW9uc1xuXG4gICAgLypcdEV2ZXJ5IGlucHV0IG9wdGlvbiBpcyB0ZXN0ZWQgYW5kIHBhcnNlZC4gVGhpcydsbCBwcmV2ZW50XG4gICAgICAgIGVuZGxlc3MgdmFsaWRhdGlvbiBpbiBpbnRlcm5hbCBtZXRob2RzLiBUaGVzZSB0ZXN0cyBhcmVcbiAgICAgICAgc3RydWN0dXJlZCB3aXRoIGFuIGl0ZW0gZm9yIGV2ZXJ5IG9wdGlvbiBhdmFpbGFibGUuIEFuXG4gICAgICAgIG9wdGlvbiBjYW4gYmUgbWFya2VkIGFzIHJlcXVpcmVkIGJ5IHNldHRpbmcgdGhlICdyJyBmbGFnLlxuICAgICAgICBUaGUgdGVzdGluZyBmdW5jdGlvbiBpcyBwcm92aWRlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAgICAgICAgICAgIC0gVGhlIHByb3ZpZGVkIHZhbHVlIGZvciB0aGUgb3B0aW9uO1xuICAgICAgICAgICAgLSBBIHJlZmVyZW5jZSB0byB0aGUgb3B0aW9ucyBvYmplY3Q7XG4gICAgICAgICAgICAtIFRoZSBuYW1lIGZvciB0aGUgb3B0aW9uO1xuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIHJldHVybnMgZmFsc2Ugd2hlbiBhbiBlcnJvciBpcyBkZXRlY3RlZCxcbiAgICAgICAgb3IgdHJ1ZSB3aGVuIGV2ZXJ5dGhpbmcgaXMgT0suIEl0IGNhbiBhbHNvIG1vZGlmeSB0aGUgb3B0aW9uXG4gICAgICAgIG9iamVjdCwgdG8gbWFrZSBzdXJlIGFsbCB2YWx1ZXMgY2FuIGJlIGNvcnJlY3RseSBsb29wZWQgZWxzZXdoZXJlLiAqL1xuXG4gICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSB7XG4gICAgICAgIHRvOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudG9GaXhlZCgyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbTogTnVtYmVyXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlRm9ybWF0KGVudHJ5KSB7XG4gICAgICAgIC8vIEFueSBvYmplY3Qgd2l0aCBhIHRvIGFuZCBmcm9tIG1ldGhvZCBpcyBzdXBwb3J0ZWQuXG4gICAgICAgIGlmIChpc1ZhbGlkRm9ybWF0dGVyKGVudHJ5KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdmb3JtYXQnIHJlcXVpcmVzICd0bycgYW5kICdmcm9tJyBtZXRob2RzLlwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U3RlcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnc3RlcCcgaXMgbm90IG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHN0ZXAgb3B0aW9uIGNhbiBzdGlsbCBiZSB1c2VkIHRvIHNldCBzdGVwcGluZ1xuICAgICAgICAvLyBmb3IgbGluZWFyIHNsaWRlcnMuIE92ZXJ3cml0dGVuIGlmIHNldCBpbiAncmFuZ2UnLlxuICAgICAgICBwYXJzZWQuc2luZ2xlU3RlcCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RSYW5nZShwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEZpbHRlciBpbmNvcnJlY3QgaW5wdXQuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwib2JqZWN0XCIgfHwgQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyBpcyBub3QgYW4gb2JqZWN0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhdGNoIG1pc3Npbmcgc3RhcnQgb3IgZW5kLlxuICAgICAgICBpZiAoZW50cnkubWluID09PSB1bmRlZmluZWQgfHwgZW50cnkubWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogTWlzc2luZyAnbWluJyBvciAnbWF4JyBpbiAncmFuZ2UnLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENhdGNoIGVxdWFsIHN0YXJ0IG9yIGVuZC5cbiAgICAgICAgaWYgKGVudHJ5Lm1pbiA9PT0gZW50cnkubWF4KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdyYW5nZScgJ21pbicgYW5kICdtYXgnIGNhbm5vdCBiZSBlcXVhbC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuc3BlY3RydW0gPSBuZXcgU3BlY3RydW0oZW50cnksIHBhcnNlZC5zbmFwLCBwYXJzZWQuc2luZ2xlU3RlcCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFN0YXJ0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgZW50cnkgPSBhc0FycmF5KGVudHJ5KTtcblxuICAgICAgICAvLyBWYWxpZGF0ZSBpbnB1dC4gVmFsdWVzIGFyZW4ndCB0ZXN0ZWQsIGFzIHRoZSBwdWJsaWMgLnZhbCBtZXRob2RcbiAgICAgICAgLy8gd2lsbCBhbHdheXMgcHJvdmlkZSBhIHZhbGlkIGxvY2F0aW9uLlxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZW50cnkpIHx8ICFlbnRyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3N0YXJ0JyBvcHRpb24gaXMgaW5jb3JyZWN0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBudW1iZXIgb2YgaGFuZGxlcy5cbiAgICAgICAgcGFyc2VkLmhhbmRsZXMgPSBlbnRyeS5sZW5ndGg7XG5cbiAgICAgICAgLy8gV2hlbiB0aGUgc2xpZGVyIGlzIGluaXRpYWxpemVkLCB0aGUgLnZhbCBtZXRob2Qgd2lsbFxuICAgICAgICAvLyBiZSBjYWxsZWQgd2l0aCB0aGUgc3RhcnQgb3B0aW9ucy5cbiAgICAgICAgcGFyc2VkLnN0YXJ0ID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFNuYXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBFbmZvcmNlIDEwMCUgc3RlcHBpbmcgd2l0aGluIHN1YnJhbmdlcy5cbiAgICAgICAgcGFyc2VkLnNuYXAgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnc25hcCcgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRW5mb3JjZSAxMDAlIHN0ZXBwaW5nIHdpdGhpbiBzdWJyYW5nZXMuXG4gICAgICAgIHBhcnNlZC5hbmltYXRlID0gZW50cnk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2FuaW1hdGUnIG9wdGlvbiBtdXN0IGJlIGEgYm9vbGVhbi5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QW5pbWF0aW9uRHVyYXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBwYXJzZWQuYW5pbWF0aW9uRHVyYXRpb24gPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdhbmltYXRpb25EdXJhdGlvbicgb3B0aW9uIG11c3QgYmUgYSBudW1iZXIuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdENvbm5lY3QocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICB2YXIgY29ubmVjdCA9IFtmYWxzZV07XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIC8vIE1hcCBsZWdhY3kgb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IFwibG93ZXJcIikge1xuICAgICAgICAgICAgZW50cnkgPSBbdHJ1ZSwgZmFsc2VdO1xuICAgICAgICB9IGVsc2UgaWYgKGVudHJ5ID09PSBcInVwcGVyXCIpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW2ZhbHNlLCB0cnVlXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBib29sZWFuIG9wdGlvbnNcbiAgICAgICAgaWYgKGVudHJ5ID09PSB0cnVlIHx8IGVudHJ5ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZm9yIChpID0gMTsgaSA8IHBhcnNlZC5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICBjb25uZWN0LnB1c2goZW50cnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25uZWN0LnB1c2goZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqZWN0IGludmFsaWQgaW5wdXRcbiAgICAgICAgZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoZW50cnkpIHx8ICFlbnRyeS5sZW5ndGggfHwgZW50cnkubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcyArIDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Nvbm5lY3QnIG9wdGlvbiBkb2Vzbid0IG1hdGNoIGhhbmRsZSBjb3VudC5cIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25uZWN0ID0gZW50cnk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuY29ubmVjdCA9IGNvbm5lY3Q7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdE9yaWVudGF0aW9uKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gU2V0IG9yaWVudGF0aW9uIHRvIGFuIGEgbnVtZXJpY2FsIHZhbHVlIGZvciBlYXN5XG4gICAgICAgIC8vIGFycmF5IHNlbGVjdGlvbi5cbiAgICAgICAgc3dpdGNoIChlbnRyeSkge1xuICAgICAgICAgICAgY2FzZSBcImhvcml6b250YWxcIjpcbiAgICAgICAgICAgICAgICBwYXJzZWQub3J0ID0gMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJ2ZXJ0aWNhbFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5vcnQgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdvcmllbnRhdGlvbicgb3B0aW9uIGlzIGludmFsaWQuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdE1hcmdpbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbWFyZ2luJyBvcHRpb24gbXVzdCBiZSBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElzc3VlICM1ODJcbiAgICAgICAgaWYgKGVudHJ5ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQubWFyZ2luID0gcGFyc2VkLnNwZWN0cnVtLmdldE1hcmdpbihlbnRyeSk7XG5cbiAgICAgICAgaWYgKCFwYXJzZWQubWFyZ2luKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdtYXJnaW4nIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycy5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0TGltaXQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2xpbWl0JyBvcHRpb24gbXVzdCBiZSBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5saW1pdCA9IHBhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnkpO1xuXG4gICAgICAgIGlmICghcGFyc2VkLmxpbWl0IHx8IHBhcnNlZC5oYW5kbGVzIDwgMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgK1xuICAgICAgICAgICAgICAgICAgICBWRVJTSU9OICtcbiAgICAgICAgICAgICAgICAgICAgXCIpOiAnbGltaXQnIG9wdGlvbiBpcyBvbmx5IHN1cHBvcnRlZCBvbiBsaW5lYXIgc2xpZGVycyB3aXRoIDIgb3IgbW9yZSBoYW5kbGVzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFBhZGRpbmcocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkgJiYgIUFycmF5LmlzQXJyYXkoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBudW1lcmljIG9yIGFycmF5IG9mIGV4YWN0bHkgMiBudW1iZXJzLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW50cnkpICYmICEoZW50cnkubGVuZ3RoID09PSAyIHx8IGlzTnVtZXJpYyhlbnRyeVswXSkgfHwgaXNOdW1lcmljKGVudHJ5WzFdKSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIGVudHJ5ID0gW2VudHJ5LCBlbnRyeV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyAnZ2V0TWFyZ2luJyByZXR1cm5zIGZhbHNlIGZvciBpbnZhbGlkIHZhbHVlcy5cbiAgICAgICAgcGFyc2VkLnBhZGRpbmcgPSBbcGFyc2VkLnNwZWN0cnVtLmdldE1hcmdpbihlbnRyeVswXSksIHBhcnNlZC5zcGVjdHJ1bS5nZXRNYXJnaW4oZW50cnlbMV0pXTtcblxuICAgICAgICBpZiAocGFyc2VkLnBhZGRpbmdbMF0gPT09IGZhbHNlIHx8IHBhcnNlZC5wYWRkaW5nWzFdID09PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIGlzIG9ubHkgc3VwcG9ydGVkIG9uIGxpbmVhciBzbGlkZXJzLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwYXJzZWQucGFkZGluZ1swXSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV0gPCAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdwYWRkaW5nJyBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcihzKS5cIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFyc2VkLnBhZGRpbmdbMF0gKyBwYXJzZWQucGFkZGluZ1sxXSA+PSAxMDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IG5vdCBleGNlZWQgMTAwJSBvZiB0aGUgcmFuZ2UuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERpcmVjdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBkaXJlY3Rpb24gYXMgYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3kgcGFyc2luZy5cbiAgICAgICAgLy8gSW52ZXJ0IGNvbm5lY3Rpb24gZm9yIFJUTCBzbGlkZXJzLCBzbyB0aGF0IHRoZSBwcm9wZXJcbiAgICAgICAgLy8gaGFuZGxlcyBnZXQgdGhlIGNvbm5lY3QvYmFja2dyb3VuZCBjbGFzc2VzLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwibHRyXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicnRsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QmVoYXZpb3VyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbnB1dCBpcyBhIHN0cmluZy5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYmVoYXZpb3VyJyBtdXN0IGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgb3B0aW9ucy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcblxuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuaGFuZGxlcyAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2ZpeGVkJyBiZWhhdmlvdXIgbXVzdCBiZSB1c2VkIHdpdGggMiBoYW5kbGVzXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuY29uc3RyYWluZWQgJiYgKHBhcnNlZC5tYXJnaW4gfHwgcGFyc2VkLmxpbWl0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndW5jb25zdHJhaW5lZCcgYmVoYXZpb3VyIGNhbm5vdCBiZSB1c2VkIHdpdGggbWFyZ2luIG9yIGxpbWl0XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuZXZlbnRzID0ge1xuICAgICAgICAgICAgdGFwOiB0YXAgfHwgc25hcCxcbiAgICAgICAgICAgIGRyYWc6IGRyYWcsXG4gICAgICAgICAgICBmaXhlZDogZml4ZWQsXG4gICAgICAgICAgICBzbmFwOiBzbmFwLFxuICAgICAgICAgICAgaG92ZXI6IGhvdmVyLFxuICAgICAgICAgICAgdW5jb25zdHJhaW5lZDogdW5jb25zdHJhaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZWQudG9vbHRpcHMubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogbXVzdCBwYXNzIGEgZm9ybWF0dGVyIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdHRlciAhPT0gXCJib29sZWFuXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZvcm1hdHRlci50byAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QXJpYUZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hcmlhRm9ybWF0ID0gZW50cnk7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NQcmVmaXgocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiICYmIGVudHJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzUHJlZml4JyBtdXN0IGJlIGEgc3RyaW5nIG9yIGBmYWxzZWAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NDbGFzc2VzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzQ2xhc3NlcycgbXVzdCBiZSBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXNba2V5XSA9IHBhcnNlZC5jc3NQcmVmaXggKyBlbnRyeVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRlc3QgYWxsIGRldmVsb3BlciBzZXR0aW5ncyBhbmQgcGFyc2UgdG8gYXNzdW1wdGlvbi1zYWZlIHZhbHVlcy5cbiAgICBmdW5jdGlvbiB0ZXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIFRvIHByb3ZlIGEgZml4IGZvciAjNTM3LCBmcmVlemUgb3B0aW9ucyBoZXJlLlxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIG1vZGlmaWVkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgLy8gT2JqZWN0LmZyZWV6ZShvcHRpb25zKTtcblxuICAgICAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyLFxuICAgICAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGVzdHMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IGFyZSBwcmVzZW50ZWQgaGVyZS5cbiAgICAgICAgdmFyIHRlc3RzID0ge1xuICAgICAgICAgICAgc3RlcDogeyByOiBmYWxzZSwgdDogdGVzdFN0ZXAgfSxcbiAgICAgICAgICAgIHN0YXJ0OiB7IHI6IHRydWUsIHQ6IHRlc3RTdGFydCB9LFxuICAgICAgICAgICAgY29ubmVjdDogeyByOiB0cnVlLCB0OiB0ZXN0Q29ubmVjdCB9LFxuICAgICAgICAgICAgZGlyZWN0aW9uOiB7IHI6IHRydWUsIHQ6IHRlc3REaXJlY3Rpb24gfSxcbiAgICAgICAgICAgIHNuYXA6IHsgcjogZmFsc2UsIHQ6IHRlc3RTbmFwIH0sXG4gICAgICAgICAgICBhbmltYXRlOiB7IHI6IGZhbHNlLCB0OiB0ZXN0QW5pbWF0ZSB9LFxuICAgICAgICAgICAgYW5pbWF0aW9uRHVyYXRpb246IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRpb25EdXJhdGlvbiB9LFxuICAgICAgICAgICAgcmFuZ2U6IHsgcjogdHJ1ZSwgdDogdGVzdFJhbmdlIH0sXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdE9yaWVudGF0aW9uIH0sXG4gICAgICAgICAgICBtYXJnaW46IHsgcjogZmFsc2UsIHQ6IHRlc3RNYXJnaW4gfSxcbiAgICAgICAgICAgIGxpbWl0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0TGltaXQgfSxcbiAgICAgICAgICAgIHBhZGRpbmc6IHsgcjogZmFsc2UsIHQ6IHRlc3RQYWRkaW5nIH0sXG4gICAgICAgICAgICBiZWhhdmlvdXI6IHsgcjogdHJ1ZSwgdDogdGVzdEJlaGF2aW91ciB9LFxuICAgICAgICAgICAgYXJpYUZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEFyaWFGb3JtYXQgfSxcbiAgICAgICAgICAgIGZvcm1hdDogeyByOiBmYWxzZSwgdDogdGVzdEZvcm1hdCB9LFxuICAgICAgICAgICAgdG9vbHRpcHM6IHsgcjogZmFsc2UsIHQ6IHRlc3RUb29sdGlwcyB9LFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB7IHI6IHRydWUsIHQ6IHRlc3RLZXlib2FyZFN1cHBvcnQgfSxcbiAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudDogeyByOiBmYWxzZSwgdDogdGVzdERvY3VtZW50RWxlbWVudCB9LFxuICAgICAgICAgICAgY3NzUHJlZml4OiB7IHI6IHRydWUsIHQ6IHRlc3RDc3NQcmVmaXggfSxcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IHsgcjogdHJ1ZSwgdDogdGVzdENzc0NsYXNzZXMgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGNvbm5lY3Q6IGZhbHNlLFxuICAgICAgICAgICAgZGlyZWN0aW9uOiBcImx0clwiLFxuICAgICAgICAgICAgYmVoYXZpb3VyOiBcInRhcFwiLFxuICAgICAgICAgICAgb3JpZW50YXRpb246IFwiaG9yaXpvbnRhbFwiLFxuICAgICAgICAgICAga2V5Ym9hcmRTdXBwb3J0OiB0cnVlLFxuICAgICAgICAgICAgY3NzUHJlZml4OiBcIm5vVWktXCIsXG4gICAgICAgICAgICBjc3NDbGFzc2VzOiB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBcInRhcmdldFwiLFxuICAgICAgICAgICAgICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgICAgICAgICAgICAgIG9yaWdpbjogXCJvcmlnaW5cIixcbiAgICAgICAgICAgICAgICBoYW5kbGU6IFwiaGFuZGxlXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlTG93ZXI6IFwiaGFuZGxlLWxvd2VyXCIsXG4gICAgICAgICAgICAgICAgaGFuZGxlVXBwZXI6IFwiaGFuZGxlLXVwcGVyXCIsXG4gICAgICAgICAgICAgICAgdG91Y2hBcmVhOiBcInRvdWNoLWFyZWFcIixcbiAgICAgICAgICAgICAgICBob3Jpem9udGFsOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbDogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6IFwiYmFja2dyb3VuZFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3Q6IFwiY29ubmVjdFwiLFxuICAgICAgICAgICAgICAgIGNvbm5lY3RzOiBcImNvbm5lY3RzXCIsXG4gICAgICAgICAgICAgICAgbHRyOiBcImx0clwiLFxuICAgICAgICAgICAgICAgIHJ0bDogXCJydGxcIixcbiAgICAgICAgICAgICAgICBkcmFnZ2FibGU6IFwiZHJhZ2dhYmxlXCIsXG4gICAgICAgICAgICAgICAgZHJhZzogXCJzdGF0ZS1kcmFnXCIsXG4gICAgICAgICAgICAgICAgdGFwOiBcInN0YXRlLXRhcFwiLFxuICAgICAgICAgICAgICAgIGFjdGl2ZTogXCJhY3RpdmVcIixcbiAgICAgICAgICAgICAgICB0b29sdGlwOiBcInRvb2x0aXBcIixcbiAgICAgICAgICAgICAgICBwaXBzOiBcInBpcHNcIixcbiAgICAgICAgICAgICAgICBwaXBzSG9yaXpvbnRhbDogXCJwaXBzLWhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICBwaXBzVmVydGljYWw6IFwicGlwcy12ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgICAgIG1hcmtlcjogXCJtYXJrZXJcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJIb3Jpem9udGFsOiBcIm1hcmtlci1ob3Jpem9udGFsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyVmVydGljYWw6IFwibWFya2VyLXZlcnRpY2FsXCIsXG4gICAgICAgICAgICAgICAgbWFya2VyTm9ybWFsOiBcIm1hcmtlci1ub3JtYWxcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJMYXJnZTogXCJtYXJrZXItbGFyZ2VcIixcbiAgICAgICAgICAgICAgICBtYXJrZXJTdWI6IFwibWFya2VyLXN1YlwiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBcInZhbHVlXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVIb3Jpem9udGFsOiBcInZhbHVlLWhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZVZlcnRpY2FsOiBcInZhbHVlLXZlcnRpY2FsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVOb3JtYWw6IFwidmFsdWUtbm9ybWFsXCIsXG4gICAgICAgICAgICAgICAgdmFsdWVMYXJnZTogXCJ2YWx1ZS1sYXJnZVwiLFxuICAgICAgICAgICAgICAgIHZhbHVlU3ViOiBcInZhbHVlLXN1YlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQXJpYUZvcm1hdCBkZWZhdWx0cyB0byByZWd1bGFyIGZvcm1hdCwgaWYgYW55LlxuICAgICAgICBpZiAob3B0aW9ucy5mb3JtYXQgJiYgIW9wdGlvbnMuYXJpYUZvcm1hdCkge1xuICAgICAgICAgICAgb3B0aW9ucy5hcmlhRm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSdW4gYWxsIG9wdGlvbnMgdGhyb3VnaCBhIHRlc3RpbmcgbWVjaGFuaXNtIHRvIGVuc3VyZSBjb3JyZWN0XG4gICAgICAgIC8vIGlucHV0LiBJdCBzaG91bGQgYmUgbm90ZWQgdGhhdCBvcHRpb25zIG1pZ2h0IGdldCBtb2RpZmllZCB0b1xuICAgICAgICAvLyBiZSBoYW5kbGVkIHByb3Blcmx5LiBFLmcuIHdyYXBwaW5nIGludGVnZXJzIGluIGFycmF5cy5cbiAgICAgICAgT2JqZWN0LmtleXModGVzdHMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgLy8gSWYgdGhlIG9wdGlvbiBpc24ndCBzZXQsIGJ1dCBpdCBpcyByZXF1aXJlZCwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICAgICAgICBpZiAoIWlzU2V0KG9wdGlvbnNbbmFtZV0pICYmIGRlZmF1bHRzW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGVzdHNbbmFtZV0ucikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdcIiArIG5hbWUgKyBcIicgaXMgcmVxdWlyZWQuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0ZXN0c1tuYW1lXS50KHBhcnNlZCwgIWlzU2V0KG9wdGlvbnNbbmFtZV0pID8gZGVmYXVsdHNbbmFtZV0gOiBvcHRpb25zW25hbWVdKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRm9yd2FyZCBwaXBzIG9wdGlvbnNcbiAgICAgICAgcGFyc2VkLnBpcHMgPSBvcHRpb25zLnBpcHM7XG5cbiAgICAgICAgLy8gQWxsIHJlY2VudCBicm93c2VycyBhY2NlcHQgdW5wcmVmaXhlZCB0cmFuc2Zvcm0uXG4gICAgICAgIC8vIFdlIG5lZWQgLW1zLSBmb3IgSUU5IGFuZCAtd2Via2l0LSBmb3Igb2xkZXIgQW5kcm9pZDtcbiAgICAgICAgLy8gQXNzdW1lIHVzZSBvZiAtd2Via2l0LSBpZiB1bnByZWZpeGVkIGFuZCAtbXMtIGFyZSBub3Qgc3VwcG9ydGVkLlxuICAgICAgICAvLyBodHRwczovL2Nhbml1c2UuY29tLyNmZWF0PXRyYW5zZm9ybXMyZFxuICAgICAgICB2YXIgZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBtc1ByZWZpeCA9IGQuc3R5bGUubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcbiAgICAgICAgdmFyIG5vUHJlZml4ID0gZC5zdHlsZS50cmFuc2Zvcm0gIT09IHVuZGVmaW5lZDtcblxuICAgICAgICBwYXJzZWQudHJhbnNmb3JtUnVsZSA9IG5vUHJlZml4ID8gXCJ0cmFuc2Zvcm1cIiA6IG1zUHJlZml4ID8gXCJtc1RyYW5zZm9ybVwiIDogXCJ3ZWJraXRUcmFuc2Zvcm1cIjtcblxuICAgICAgICAvLyBQaXBzIGRvbid0IG1vdmUsIHNvIHdlIGNhbiBwbGFjZSB0aGVtIHVzaW5nIGxlZnQvdG9wLlxuICAgICAgICB2YXIgc3R5bGVzID0gW1tcImxlZnRcIiwgXCJ0b3BcIl0sIFtcInJpZ2h0XCIsIFwiYm90dG9tXCJdXTtcblxuICAgICAgICBwYXJzZWQuc3R5bGUgPSBzdHlsZXNbcGFyc2VkLmRpcl1bcGFyc2VkLm9ydF07XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZDtcbiAgICB9XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgZnVuY3Rpb24gc2NvcGUodGFyZ2V0LCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBnZXRBY3Rpb25zKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSA9IGdldFN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lKCk7XG4gICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBzdXBwb3J0c1RvdWNoQWN0aW9uTm9uZSAmJiBnZXRTdXBwb3J0c1Bhc3NpdmUoKTtcblxuICAgICAgICAvLyBBbGwgdmFyaWFibGVzIGxvY2FsIHRvICdzY29wZScgYXJlIHByZWZpeGVkIHdpdGggJ3Njb3BlXydcblxuICAgICAgICAvLyBTbGlkZXIgRE9NIE5vZGVzXG4gICAgICAgIHZhciBzY29wZV9UYXJnZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBzY29wZV9CYXNlO1xuICAgICAgICB2YXIgc2NvcGVfSGFuZGxlcztcbiAgICAgICAgdmFyIHNjb3BlX0Nvbm5lY3RzO1xuICAgICAgICB2YXIgc2NvcGVfUGlwcztcbiAgICAgICAgdmFyIHNjb3BlX1Rvb2x0aXBzO1xuXG4gICAgICAgIC8vIFNsaWRlciBzdGF0ZSB2YWx1ZXNcbiAgICAgICAgdmFyIHNjb3BlX1NwZWN0cnVtID0gb3B0aW9ucy5zcGVjdHJ1bTtcbiAgICAgICAgdmFyIHNjb3BlX1ZhbHVlcyA9IFtdO1xuICAgICAgICB2YXIgc2NvcGVfTG9jYXRpb25zID0gW107XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVOdW1iZXJzID0gW107XG4gICAgICAgIHZhciBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgPSAwO1xuICAgICAgICB2YXIgc2NvcGVfRXZlbnRzID0ge307XG5cbiAgICAgICAgLy8gRXhwb3NlZCBBUElcbiAgICAgICAgdmFyIHNjb3BlX1NlbGY7XG5cbiAgICAgICAgLy8gRG9jdW1lbnQgTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50ID0gdGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Eb2N1bWVudEVsZW1lbnQgPSBvcHRpb25zLmRvY3VtZW50RWxlbWVudCB8fCBzY29wZV9Eb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHZhciBzY29wZV9Cb2R5ID0gc2NvcGVfRG9jdW1lbnQuYm9keTtcblxuICAgICAgICAvLyBQaXBzIGNvbnN0YW50c1xuICAgICAgICB2YXIgUElQU19OT05FID0gLTE7XG4gICAgICAgIHZhciBQSVBTX05PX1ZBTFVFID0gMDtcbiAgICAgICAgdmFyIFBJUFNfTEFSR0VfVkFMVUUgPSAxO1xuICAgICAgICB2YXIgUElQU19TTUFMTF9WQUxVRSA9IDI7XG5cbiAgICAgICAgLy8gRm9yIGhvcml6b250YWwgc2xpZGVycyBpbiBzdGFuZGFyZCBsdHIgZG9jdW1lbnRzLFxuICAgICAgICAvLyBtYWtlIC5ub1VpLW9yaWdpbiBvdmVyZmxvdyB0byB0aGUgbGVmdCBzbyB0aGUgZG9jdW1lbnQgZG9lc24ndCBzY3JvbGwuXG4gICAgICAgIHZhciBzY29wZV9EaXJPZmZzZXQgPSBzY29wZV9Eb2N1bWVudC5kaXIgPT09IFwicnRsXCIgfHwgb3B0aW9ucy5vcnQgPT09IDEgPyAwIDogMTAwO1xuXG4gICAgICAgIC8vIENyZWF0ZXMgYSBub2RlLCBhZGRzIGl0IHRvIHRhcmdldCwgcmV0dXJucyB0aGUgbmV3IG5vZGUuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE5vZGVUbyhhZGRUYXJnZXQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgdmFyIGRpdiA9IHNjb3BlX0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhkaXYsIGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGFkZFRhcmdldC5hcHBlbmRDaGlsZChkaXYpO1xuXG4gICAgICAgICAgICByZXR1cm4gZGl2O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXBwZW5kIGEgb3JpZ2luIHRvIHRoZSBiYXNlXG4gICAgICAgIGZ1bmN0aW9uIGFkZE9yaWdpbihiYXNlLCBoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBvcmlnaW4gPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm9yaWdpbik7XG4gICAgICAgICAgICB2YXIgaGFuZGxlID0gYWRkTm9kZVRvKG9yaWdpbiwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZSk7XG5cbiAgICAgICAgICAgIGFkZE5vZGVUbyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b3VjaEFyZWEpO1xuXG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1oYW5kbGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMua2V5Ym9hcmRTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRNTC9HbG9iYWxfYXR0cmlidXRlcy90YWJpbmRleFxuICAgICAgICAgICAgICAgIC8vIDAgPSBmb2N1c2FibGUgYW5kIHJlYWNoYWJsZVxuICAgICAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgICAgICAgaGFuZGxlLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwic2xpZGVyXCIpO1xuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcImFyaWEtb3JpZW50YXRpb25cIiwgb3B0aW9ucy5vcnQgPyBcInZlcnRpY2FsXCIgOiBcImhvcml6b250YWxcIik7XG5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5oYW5kbGVMb3dlcik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZU51bWJlciA9PT0gb3B0aW9ucy5oYW5kbGVzIC0gMSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZVVwcGVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG9yaWdpbjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluc2VydCBub2RlcyBmb3IgY29ubmVjdCBlbGVtZW50c1xuICAgICAgICBmdW5jdGlvbiBhZGRDb25uZWN0KGJhc2UsIGFkZCkge1xuICAgICAgICAgICAgaWYgKCFhZGQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIGhhbmRsZXMgdG8gdGhlIHNsaWRlciBiYXNlLlxuICAgICAgICBmdW5jdGlvbiBhZGRFbGVtZW50cyhjb25uZWN0T3B0aW9ucywgYmFzZSkge1xuICAgICAgICAgICAgdmFyIGNvbm5lY3RCYXNlID0gYWRkTm9kZVRvKGJhc2UsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5jb25uZWN0cyk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMgPSBbXTtcbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzID0gW107XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLnB1c2goYWRkQ29ubmVjdChjb25uZWN0QmFzZSwgY29ubmVjdE9wdGlvbnNbMF0pKTtcblxuICAgICAgICAgICAgLy8gWzo6OjpPPT09PU89PT09Tz09PT1dXG4gICAgICAgICAgICAvLyBjb25uZWN0T3B0aW9ucyA9IFswLCAxLCAxLCAxXVxuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9wdGlvbnMuaGFuZGxlczsgaSsrKSB7XG4gICAgICAgICAgICAgICAgLy8gS2VlcCBhIGxpc3Qgb2YgYWxsIGFkZGVkIGhhbmRsZXMuXG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5wdXNoKGFkZE9yaWdpbihiYXNlLCBpKSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVyc1tpXSA9IGk7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1tpICsgMV0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEluaXRpYWxpemUgYSBzaW5nbGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBhZGRTbGlkZXIoYWRkVGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBBcHBseSBjbGFzc2VzIGFuZCBkYXRhIHRvIHRoZSB0YXJnZXQuXG4gICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXJnZXQpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5sdHIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ydGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vcnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5ob3Jpem9udGFsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudmVydGljYWwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYWRkTm9kZVRvKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmJhc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkVG9vbHRpcChoYW5kbGUsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oaGFuZGxlLmZpcnN0Q2hpbGQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50b29sdGlwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzU2xpZGVyRGlzYWJsZWQoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfVGFyZ2V0Lmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGlzYWJsZSB0aGUgc2xpZGVyIGRyYWdnaW5nIGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgZnVuY3Rpb24gaXNIYW5kbGVEaXNhYmxlZChoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlT3JpZ2luLmhhc0F0dHJpYnV0ZShcImRpc2FibGVkXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlVG9vbHRpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfVG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZS50b29sdGlwc1wiKTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvb2x0aXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQodG9vbHRpcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgdG9vbHRpcHMgb3B0aW9uIGlzIGEgc2hvcnRoYW5kIGZvciB1c2luZyB0aGUgJ3VwZGF0ZScgZXZlbnQuXG4gICAgICAgIGZ1bmN0aW9uIHRvb2x0aXBzKCkge1xuICAgICAgICAgICAgcmVtb3ZlVG9vbHRpcHMoKTtcblxuICAgICAgICAgICAgLy8gVG9vbHRpcHMgYXJlIGFkZGVkIHdpdGggb3B0aW9ucy50b29sdGlwcyBpbiBvcmlnaW5hbCBvcmRlci5cbiAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzID0gc2NvcGVfSGFuZGxlcy5tYXAoYWRkVG9vbHRpcCk7XG5cbiAgICAgICAgICAgIGJpbmRFdmVudChcInVwZGF0ZS50b29sdGlwc1wiLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZXNbaGFuZGxlTnVtYmVyXTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0udG8odW5lbmNvZGVkW2hhbmRsZU51bWJlcl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0uaW5uZXJIVE1MID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFyaWEoKSB7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiwgZnVuY3Rpb24odmFsdWVzLCBoYW5kbGVOdW1iZXIsIHVuZW5jb2RlZCwgdGFwLCBwb3NpdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgQXJpYSBWYWx1ZXMgZm9yIGFsbCBoYW5kbGVzLCBhcyBhIGNoYW5nZSBpbiBvbmUgY2hhbmdlcyBtaW4gYW5kIG1heCB2YWx1ZXMgZm9yIHRoZSBuZXh0LlxuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlID0gc2NvcGVfSGFuZGxlc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbiA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBpbmRleCwgMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXggPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDEwMCwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vdyA9IHBvc2l0aW9uc1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRm9ybWF0dGVkIHZhbHVlIGZvciBkaXNwbGF5XG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gb3B0aW9ucy5hcmlhRm9ybWF0LnRvKHVuZW5jb2RlZFtpbmRleF0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcCB0byBzbGlkZXIgcmFuZ2UgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIG1pbiA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtaW4pLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG1heCA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhtYXgpLnRvRml4ZWQoMSk7XG4gICAgICAgICAgICAgICAgICAgIG5vdyA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhub3cpLnRvRml4ZWQoMSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtaW5cIiwgbWluKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVtYXhcIiwgbWF4KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWVub3dcIiwgbm93KTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlLmNoaWxkcmVuWzBdLnNldEF0dHJpYnV0ZShcImFyaWEtdmFsdWV0ZXh0XCIsIHRleHQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRHcm91cChtb2RlLCB2YWx1ZXMsIHN0ZXBwZWQpIHtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgcmFuZ2UuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJyYW5nZVwiIHx8IG1vZGUgPT09IFwic3RlcHNcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS54VmFsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobW9kZSA9PT0gXCJjb3VudFwiKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlcyA8IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndmFsdWVzJyAoPj0gMikgcmVxdWlyZWQgZm9yIG1vZGUgJ2NvdW50Jy5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGl2aWRlIDAgLSAxMDAgaW4gJ2NvdW50JyBwYXJ0cy5cbiAgICAgICAgICAgICAgICB2YXIgaW50ZXJ2YWwgPSB2YWx1ZXMgLSAxO1xuICAgICAgICAgICAgICAgIHZhciBzcHJlYWQgPSAxMDAgLyBpbnRlcnZhbDtcblxuICAgICAgICAgICAgICAgIHZhbHVlcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgLy8gTGlzdCB0aGVzZSBwYXJ0cyBhbmQgaGF2ZSB0aGVtIGhhbmRsZWQgYXMgJ3Bvc2l0aW9ucycuXG4gICAgICAgICAgICAgICAgd2hpbGUgKGludGVydmFsLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ludGVydmFsXSA9IGludGVydmFsICogc3ByZWFkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKDEwMCk7XG5cbiAgICAgICAgICAgICAgICBtb2RlID0gXCJwb3NpdGlvbnNcIjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicG9zaXRpb25zXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBNYXAgYWxsIHBlcmNlbnRhZ2VzIHRvIG9uLXJhbmdlIHZhbHVlcy5cbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHN0ZXBwZWQgPyBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHZhbHVlKSA6IHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwidmFsdWVzXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgbXVzdCBiZSBzdGVwcGVkLCBpdCBuZWVkcyB0byBiZSBjb252ZXJ0ZWQgdG8gYSBwZXJjZW50YWdlIGZpcnN0LlxuICAgICAgICAgICAgICAgIGlmIChzdGVwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXMubWFwKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb252ZXJ0IHRvIHBlcmNlbnRhZ2UsIGFwcGx5IHN0ZXAsIHJldHVybiB0byB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcoc2NvcGVfU3BlY3RydW0uZ2V0U3RlcChzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHZhbHVlKSkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlIGNhbiBzaW1wbHkgdXNlIHRoZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlU3ByZWFkKGRlbnNpdHksIG1vZGUsIGdyb3VwKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBzYWZlSW5jcmVtZW50KHZhbHVlLCBpbmNyZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAvLyBBdm9pZCBmbG9hdGluZyBwb2ludCB2YXJpYW5jZSBieSBkcm9wcGluZyB0aGUgc21hbGxlc3QgZGVjaW1hbCBwbGFjZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuICh2YWx1ZSArIGluY3JlbWVudCkudG9GaXhlZCg3KSAvIDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbmRleGVzID0ge307XG4gICAgICAgICAgICB2YXIgZmlyc3RJblJhbmdlID0gc2NvcGVfU3BlY3RydW0ueFZhbFswXTtcbiAgICAgICAgICAgIHZhciBsYXN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbc2NvcGVfU3BlY3RydW0ueFZhbC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVGaXJzdCA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGlnbm9yZUxhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBwcmV2UGN0ID0gMDtcblxuICAgICAgICAgICAgLy8gQ3JlYXRlIGEgY29weSBvZiB0aGUgZ3JvdXAsIHNvcnQgaXQgYW5kIGZpbHRlciBhd2F5IGFsbCBkdXBsaWNhdGVzLlxuICAgICAgICAgICAgZ3JvdXAgPSB1bmlxdWUoXG4gICAgICAgICAgICAgICAgZ3JvdXAuc2xpY2UoKS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIHJhbmdlIHN0YXJ0cyB3aXRoIHRoZSBmaXJzdCBlbGVtZW50LlxuICAgICAgICAgICAgaWYgKGdyb3VwWzBdICE9PSBmaXJzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC51bnNoaWZ0KGZpcnN0SW5SYW5nZSk7XG4gICAgICAgICAgICAgICAgaWdub3JlRmlyc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMaWtld2lzZSBmb3IgdGhlIGxhc3Qgb25lLlxuICAgICAgICAgICAgaWYgKGdyb3VwW2dyb3VwLmxlbmd0aCAtIDFdICE9PSBsYXN0SW5SYW5nZSkge1xuICAgICAgICAgICAgICAgIGdyb3VwLnB1c2gobGFzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUxhc3QgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBncm91cC5mb3JFYWNoKGZ1bmN0aW9uKGN1cnJlbnQsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHN0ZXAgYW5kIHRoZSBsb3dlciArIHVwcGVyIHBvc2l0aW9ucy5cbiAgICAgICAgICAgICAgICB2YXIgc3RlcDtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgcTtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgaGlnaCA9IGdyb3VwW2luZGV4ICsgMV07XG4gICAgICAgICAgICAgICAgdmFyIG5ld1BjdDtcbiAgICAgICAgICAgICAgICB2YXIgcGN0RGlmZmVyZW5jZTtcbiAgICAgICAgICAgICAgICB2YXIgcGN0UG9zO1xuICAgICAgICAgICAgICAgIHZhciB0eXBlO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgcmVhbFN0ZXBzO1xuICAgICAgICAgICAgICAgIHZhciBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICB2YXIgaXNTdGVwcyA9IG1vZGUgPT09IFwic3RlcHNcIjtcblxuICAgICAgICAgICAgICAgIC8vIFdoZW4gdXNpbmcgJ3N0ZXBzJyBtb2RlLCB1c2UgdGhlIHByb3ZpZGVkIHN0ZXBzLlxuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UnbGwgc3RlcCBvbiB0byB0aGUgbmV4dCBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICBpZiAoaXNTdGVwcykge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0ueE51bVN0ZXBzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBEZWZhdWx0IHRvIGEgJ2Z1bGwnIHN0ZXAuXG4gICAgICAgICAgICAgICAgaWYgKCFzdGVwKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0ZXAgPSBoaWdoIC0gbG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExvdyBjYW4gYmUgMCwgc28gdGVzdCBmb3IgZmFsc2UuIElmIGhpZ2ggaXMgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIC8vIHdlIGFyZSBhdCB0aGUgbGFzdCBzdWJyYW5nZS4gSW5kZXggMCBpcyBhbHJlYWR5IGhhbmRsZWQuXG4gICAgICAgICAgICAgICAgaWYgKGxvdyA9PT0gZmFsc2UgfHwgaGlnaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3RlcCBpc24ndCAwLCB3aGljaCB3b3VsZCBjYXVzZSBhbiBpbmZpbml0ZSBsb29wICgjNjU0KVxuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gRmluZCBhbGwgc3RlcHMgaW4gdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgIGZvciAoaSA9IGxvdzsgaSA8PSBoaWdoOyBpID0gc2FmZUluY3JlbWVudChpLCBzdGVwKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgZm9yIHRoZSBjdXJyZW50IHN0ZXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGNhbGN1bGF0ZSB0aGUgc2l6ZSBmb3IgdGhlIHN1YnJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBuZXdQY3QgPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKGkpO1xuICAgICAgICAgICAgICAgICAgICBwY3REaWZmZXJlbmNlID0gbmV3UGN0IC0gcHJldlBjdDtcblxuICAgICAgICAgICAgICAgICAgICBzdGVwcyA9IHBjdERpZmZlcmVuY2UgLyBkZW5zaXR5O1xuICAgICAgICAgICAgICAgICAgICByZWFsU3RlcHMgPSBNYXRoLnJvdW5kKHN0ZXBzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBUaGlzIHJhdGlvIHJlcHJlc2VudHMgdGhlIGFtb3VudCBvZiBwZXJjZW50YWdlLXNwYWNlIGEgcG9pbnQgaW5kaWNhdGVzLlxuICAgICAgICAgICAgICAgICAgICAvLyBGb3IgYSBkZW5zaXR5IDEgdGhlIHBvaW50cy9wZXJjZW50YWdlID0gMS4gRm9yIGRlbnNpdHkgMiwgdGhhdCBwZXJjZW50YWdlIG5lZWRzIHRvIGJlIHJlLWRpdmlkZWQuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJvdW5kIHRoZSBwZXJjZW50YWdlIG9mZnNldCB0byBhbiBldmVuIG51bWJlciwgdGhlbiBkaXZpZGUgYnkgdHdvXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHNwcmVhZCB0aGUgb2Zmc2V0IG9uIGJvdGggc2lkZXMgb2YgdGhlIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICBzdGVwU2l6ZSA9IHBjdERpZmZlcmVuY2UgLyByZWFsU3RlcHM7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGl2aWRlIGFsbCBwb2ludHMgZXZlbmx5LCBhZGRpbmcgdGhlIGNvcnJlY3QgbnVtYmVyIHRvIHRoaXMgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJ1biB1cCB0byA8PSBzbyB0aGF0IDEwMCUgZ2V0cyBhIHBvaW50LCBldmVudCBpZiBpZ25vcmVMYXN0IGlzIHNldC5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChxID0gMTsgcSA8PSByZWFsU3RlcHM7IHEgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHJhdGlvIGJldHdlZW4gdGhlIHJvdW5kZWQgdmFsdWUgYW5kIHRoZSBhY3R1YWwgc2l6ZSBtaWdodCBiZSB+MSUgb2ZmLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29ycmVjdCB0aGUgcGVyY2VudGFnZSBvZmZzZXQgYnkgdGhlIG51bWJlciBvZiBwb2ludHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBlciBzdWJyYW5nZS4gZGVuc2l0eSA9IDEgd2lsbCByZXN1bHQgaW4gMTAwIHBvaW50cyBvbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZ1bGwgcmFuZ2UsIDIgZm9yIDUwLCA0IGZvciAyNSwgZXRjLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGN0UG9zID0gcHJldlBjdCArIHEgKiBzdGVwU2l6ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbcGN0UG9zLnRvRml4ZWQoNSldID0gW3Njb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhwY3RQb3MpLCAwXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERldGVybWluZSB0aGUgcG9pbnQgdHlwZS5cbiAgICAgICAgICAgICAgICAgICAgdHlwZSA9IGdyb3VwLmluZGV4T2YoaSkgPiAtMSA/IFBJUFNfTEFSR0VfVkFMVUUgOiBpc1N0ZXBzID8gUElQU19TTUFMTF9WQUxVRSA6IFBJUFNfTk9fVkFMVUU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRW5mb3JjZSB0aGUgJ2lnbm9yZUZpcnN0JyBvcHRpb24gYnkgb3ZlcndyaXRpbmcgdGhlIHR5cGUgZm9yIDAuXG4gICAgICAgICAgICAgICAgICAgIGlmICghaW5kZXggJiYgaWdub3JlRmlyc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoaSA9PT0gaGlnaCAmJiBpZ25vcmVMYXN0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgJ3R5cGUnIG9mIHRoaXMgcG9pbnQuIDAgPSBwbGFpbiwgMSA9IHJlYWwgdmFsdWUsIDIgPSBzdGVwIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1tuZXdQY3QudG9GaXhlZCg1KV0gPSBbaSwgdHlwZV07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIHBlcmNlbnRhZ2UgY291bnQuXG4gICAgICAgICAgICAgICAgICAgIHByZXZQY3QgPSBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBpbmRleGVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gYWRkTWFya2luZyhzcHJlYWQsIGZpbHRlckZ1bmMsIGZvcm1hdHRlcikge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzY29wZV9Eb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVTaXplQ2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgdmFsdWVTaXplQ2xhc3Nlc1tQSVBTX05PX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZU5vcm1hbDtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19MQVJHRV9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVMYXJnZTtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19TTUFMTF9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVTdWI7XG5cbiAgICAgICAgICAgIHZhciBtYXJrZXJTaXplQ2xhc3NlcyA9IFtdO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19OT19WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTm9ybWFsO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19MQVJHRV9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyTGFyZ2U7XG4gICAgICAgICAgICBtYXJrZXJTaXplQ2xhc3Nlc1tQSVBTX1NNQUxMX1ZBTFVFXSA9IG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJTdWI7XG5cbiAgICAgICAgICAgIHZhciB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVWZXJ0aWNhbF07XG4gICAgICAgICAgICB2YXIgbWFya2VyT3JpZW50YXRpb25DbGFzc2VzID0gW29wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXJIb3Jpem9udGFsLCBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyVmVydGljYWxdO1xuXG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLmNzc0NsYXNzZXMucGlwcyk7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBvcHRpb25zLm9ydCA9PT0gMCA/IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzSG9yaXpvbnRhbCA6IG9wdGlvbnMuY3NzQ2xhc3Nlcy5waXBzVmVydGljYWwpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRDbGFzc2VzKHR5cGUsIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gc291cmNlID09PSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uQ2xhc3NlcyA9IGEgPyB2YWx1ZU9yaWVudGF0aW9uQ2xhc3NlcyA6IG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcztcbiAgICAgICAgICAgICAgICB2YXIgc2l6ZUNsYXNzZXMgPSBhID8gdmFsdWVTaXplQ2xhc3NlcyA6IG1hcmtlclNpemVDbGFzc2VzO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZSArIFwiIFwiICsgb3JpZW50YXRpb25DbGFzc2VzW29wdGlvbnMub3J0XSArIFwiIFwiICsgc2l6ZUNsYXNzZXNbdHlwZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFNwcmVhZChvZmZzZXQsIHZhbHVlLCB0eXBlKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIGZpbHRlciBmdW5jdGlvbiwgaWYgaXQgaXMgc2V0LlxuICAgICAgICAgICAgICAgIHR5cGUgPSBmaWx0ZXJGdW5jID8gZmlsdGVyRnVuYyh2YWx1ZSwgdHlwZSkgOiB0eXBlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09IFBJUFNfTk9ORSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQWRkIGEgbWFya2VyIGZvciBldmVyeSBwb2ludFxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlcik7XG4gICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuXG4gICAgICAgICAgICAgICAgLy8gVmFsdWVzIGFyZSBvbmx5IGFwcGVuZGVkIGZvciBwb2ludHMgbWFya2VkICcxJyBvciAnMicuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPiBQSVBTX05PX1ZBTFVFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBhZGROb2RlVG8oZWxlbWVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmNsYXNzTmFtZSA9IGdldENsYXNzZXModHlwZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZhbHVlXCIsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZVtvcHRpb25zLnN0eWxlXSA9IG9mZnNldCArIFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTCA9IGZvcm1hdHRlci50byh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBcHBlbmQgYWxsIHBvaW50cy5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNwcmVhZCkuZm9yRWFjaChmdW5jdGlvbihvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICBhZGRTcHJlYWQob2Zmc2V0LCBzcHJlYWRbb2Zmc2V0XVswXSwgc3ByZWFkW29mZnNldF1bMV0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9QaXBzKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlRWxlbWVudChzY29wZV9QaXBzKTtcbiAgICAgICAgICAgICAgICBzY29wZV9QaXBzID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHBpcHMoZ3JpZCkge1xuICAgICAgICAgICAgLy8gRml4ICM2NjlcbiAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcblxuICAgICAgICAgICAgdmFyIG1vZGUgPSBncmlkLm1vZGU7XG4gICAgICAgICAgICB2YXIgZGVuc2l0eSA9IGdyaWQuZGVuc2l0eSB8fCAxO1xuICAgICAgICAgICAgdmFyIGZpbHRlciA9IGdyaWQuZmlsdGVyIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IGdyaWQudmFsdWVzIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIHN0ZXBwZWQgPSBncmlkLnN0ZXBwZWQgfHwgZmFsc2U7XG4gICAgICAgICAgICB2YXIgZ3JvdXAgPSBnZXRHcm91cChtb2RlLCB2YWx1ZXMsIHN0ZXBwZWQpO1xuICAgICAgICAgICAgdmFyIHNwcmVhZCA9IGdlbmVyYXRlU3ByZWFkKGRlbnNpdHksIG1vZGUsIGdyb3VwKTtcbiAgICAgICAgICAgIHZhciBmb3JtYXQgPSBncmlkLmZvcm1hdCB8fCB7XG4gICAgICAgICAgICAgICAgdG86IE1hdGgucm91bmRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlX1BpcHMgPSBzY29wZV9UYXJnZXQuYXBwZW5kQ2hpbGQoYWRkTWFya2luZyhzcHJlYWQsIGZpbHRlciwgZm9ybWF0KSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzY29wZV9QaXBzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2hvcnRoYW5kIGZvciBiYXNlIGRpbWVuc2lvbnMuXG4gICAgICAgIGZ1bmN0aW9uIGJhc2VTaXplKCkge1xuICAgICAgICAgICAgdmFyIHJlY3QgPSBzY29wZV9CYXNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgICAgdmFyIGFsdCA9IFwib2Zmc2V0XCIgKyBbXCJXaWR0aFwiLCBcIkhlaWdodFwiXVtvcHRpb25zLm9ydF07XG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5vcnQgPT09IDAgPyByZWN0LndpZHRoIHx8IHNjb3BlX0Jhc2VbYWx0XSA6IHJlY3QuaGVpZ2h0IHx8IHNjb3BlX0Jhc2VbYWx0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXIgZm9yIGF0dGFjaGluZyBldmVudHMgdHJvdWdoIGEgcHJveHkuXG4gICAgICAgIGZ1bmN0aW9uIGF0dGFjaEV2ZW50KGV2ZW50cywgZWxlbWVudCwgY2FsbGJhY2ssIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gJ2ZpbHRlcicgZXZlbnRzIHRvIHRoZSBzbGlkZXIuXG4gICAgICAgICAgICAvLyBlbGVtZW50IGlzIGEgbm9kZSwgbm90IGEgbm9kZUxpc3RcblxuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICBlID0gZml4RXZlbnQoZSwgZGF0YS5wYWdlT2Zmc2V0LCBkYXRhLnRhcmdldCB8fCBlbGVtZW50KTtcblxuICAgICAgICAgICAgICAgIC8vIGZpeEV2ZW50IHJldHVybnMgZmFsc2UgaWYgdGhpcyBldmVudCBoYXMgYSBkaWZmZXJlbnQgdGFyZ2V0XG4gICAgICAgICAgICAgICAgLy8gd2hlbiBoYW5kbGluZyAobXVsdGktKSB0b3VjaCBldmVudHM7XG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBkb05vdFJlamVjdCBpcyBwYXNzZWQgYnkgYWxsIGVuZCBldmVudHMgdG8gbWFrZSBzdXJlIHJlbGVhc2VkIHRvdWNoZXNcbiAgICAgICAgICAgICAgICAvLyBhcmUgbm90IHJlamVjdGVkLCBsZWF2aW5nIHRoZSBzbGlkZXIgXCJzdHVja1wiIHRvIHRoZSBjdXJzb3I7XG4gICAgICAgICAgICAgICAgaWYgKGlzU2xpZGVyRGlzYWJsZWQoKSAmJiAhZGF0YS5kb05vdFJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBhbiBhY3RpdmUgJ3RhcCcgdHJhbnNpdGlvbiBpcyB0YWtpbmcgcGxhY2UuXG4gICAgICAgICAgICAgICAgaWYgKGhhc0NsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByaWdodCBvciBtaWRkbGUgY2xpY2tzIG9uIHN0YXJ0ICM0NTRcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnRzID09PSBhY3Rpb25zLnN0YXJ0ICYmIGUuYnV0dG9ucyAhPT0gdW5kZWZpbmVkICYmIGUuYnV0dG9ucyA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIElnbm9yZSByaWdodCBvciBtaWRkbGUgY2xpY2tzIG9uIHN0YXJ0ICM0NTRcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5ob3ZlciAmJiBlLmJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vICdzdXBwb3J0c1Bhc3NpdmUnIGlzIG9ubHkgdHJ1ZSBpZiBhIGJyb3dzZXIgYWxzbyBzdXBwb3J0cyB0b3VjaC1hY3Rpb246IG5vbmUgaW4gQ1NTLlxuICAgICAgICAgICAgICAgIC8vIGlPUyBzYWZhcmkgZG9lcyBub3QsIHNvIGl0IGRvZXNuJ3QgZ2V0IHRvIGJlbmVmaXQgZnJvbSBwYXNzaXZlIHNjcm9sbGluZy4gaU9TIGRvZXMgc3VwcG9ydFxuICAgICAgICAgICAgICAgIC8vIHRvdWNoLWFjdGlvbjogbWFuaXB1bGF0aW9uLCBidXQgdGhhdCBhbGxvd3MgcGFubmluZywgd2hpY2ggYnJlYWtzXG4gICAgICAgICAgICAgICAgLy8gc2xpZGVycyBhZnRlciB6b29taW5nL29uIG5vbi1yZXNwb25zaXZlIHBhZ2VzLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzMzExMlxuICAgICAgICAgICAgICAgIGlmICghc3VwcG9ydHNQYXNzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBlLmNhbGNQb2ludCA9IGUucG9pbnRzW29wdGlvbnMub3J0XTtcblxuICAgICAgICAgICAgICAgIC8vIENhbGwgdGhlIGV2ZW50IGhhbmRsZXIgd2l0aCB0aGUgZXZlbnQgWyBhbmQgYWRkaXRpb25hbCBkYXRhIF0uXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZSwgZGF0YSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgbWV0aG9kcyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBCaW5kIGEgY2xvc3VyZSBvbiB0aGUgdGFyZ2V0IGZvciBldmVyeSBldmVudCB0eXBlLlxuICAgICAgICAgICAgZXZlbnRzLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50TmFtZSkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG1ldGhvZCwgc3VwcG9ydHNQYXNzaXZlID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbWV0aG9kcy5wdXNoKFtldmVudE5hbWUsIG1ldGhvZF0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBtZXRob2RzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUHJvdmlkZSBhIGNsZWFuIGV2ZW50IHdpdGggc3RhbmRhcmRpemVkIG9mZnNldCB2YWx1ZXMuXG4gICAgICAgIGZ1bmN0aW9uIGZpeEV2ZW50KGUsIHBhZ2VPZmZzZXQsIGV2ZW50VGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBGaWx0ZXIgdGhlIGV2ZW50IHRvIHJlZ2lzdGVyIHRoZSB0eXBlLCB3aGljaCBjYW4gYmVcbiAgICAgICAgICAgIC8vIHRvdWNoLCBtb3VzZSBvciBwb2ludGVyLiBPZmZzZXQgY2hhbmdlcyBuZWVkIHRvIGJlXG4gICAgICAgICAgICAvLyBtYWRlIG9uIGFuIGV2ZW50IHNwZWNpZmljIGJhc2lzLlxuICAgICAgICAgICAgdmFyIHRvdWNoID0gZS50eXBlLmluZGV4T2YoXCJ0b3VjaFwiKSA9PT0gMDtcbiAgICAgICAgICAgIHZhciBtb3VzZSA9IGUudHlwZS5pbmRleE9mKFwibW91c2VcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgcG9pbnRlciA9IGUudHlwZS5pbmRleE9mKFwicG9pbnRlclwiKSA9PT0gMDtcblxuICAgICAgICAgICAgdmFyIHg7XG4gICAgICAgICAgICB2YXIgeTtcblxuICAgICAgICAgICAgLy8gSUUxMCBpbXBsZW1lbnRlZCBwb2ludGVyIGV2ZW50cyB3aXRoIGEgcHJlZml4O1xuICAgICAgICAgICAgaWYgKGUudHlwZS5pbmRleE9mKFwiTVNQb2ludGVyXCIpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRlciA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFRoZSBvbmx5IHRoaW5nIG9uZSBoYW5kbGUgc2hvdWxkIGJlIGNvbmNlcm5lZCBhYm91dCBpcyB0aGUgdG91Y2hlcyB0aGF0IG9yaWdpbmF0ZWQgb24gdG9wIG9mIGl0LlxuICAgICAgICAgICAgaWYgKHRvdWNoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJucyB0cnVlIGlmIGEgdG91Y2ggb3JpZ2luYXRlZCBvbiB0aGUgdGFyZ2V0LlxuICAgICAgICAgICAgICAgIHZhciBpc1RvdWNoT25UYXJnZXQgPSBmdW5jdGlvbihjaGVja1RvdWNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjaGVja1RvdWNoLnRhcmdldCA9PT0gZXZlbnRUYXJnZXQgfHwgZXZlbnRUYXJnZXQuY29udGFpbnMoY2hlY2tUb3VjaC50YXJnZXQpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRvdWNoIHBlciBoYW5kbGUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgb3RoZXIgY2FzZXMsIGZpbmQgb24gY2hhbmdlZFRvdWNoZXMgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuY2VsIGlmIHRoZSB0YXJnZXQgdG91Y2ggaGFzIG5vdCBtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlT2Zmc2V0ID0gcGFnZU9mZnNldCB8fCBnZXRQYWdlT2Zmc2V0KHNjb3BlX0RvY3VtZW50KTtcblxuICAgICAgICAgICAgaWYgKG1vdXNlIHx8IHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB4ID0gZS5jbGllbnRYICsgcGFnZU9mZnNldC54O1xuICAgICAgICAgICAgICAgIHkgPSBlLmNsaWVudFkgKyBwYWdlT2Zmc2V0Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcblxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2xhdGUgYSBjb29yZGluYXRlIGluIHRoZSBkb2N1bWVudCB0byBhIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoY2FsY1BvaW50KSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjYWxjUG9pbnQgLSBvZmZzZXQoc2NvcGVfQmFzZSwgb3B0aW9ucy5vcnQpO1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKGxvY2F0aW9uICogMTAwKSAvIGJhc2VTaXplKCk7XG5cbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBwcm9wb3NhbCA6IHByb3Bvc2FsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBoYW5kbGUgY2xvc2VzdCB0byBhIGNlcnRhaW4gcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RIYW5kbGUocHJvcG9zYWwpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZXN0ID0gMTAwO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkIGhhbmRsZXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNIYW5kbGVEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwb3MgPSBNYXRoLmFicyhzY29wZV9Mb2NhdGlvbnNbaW5kZXhdIC0gcHJvcG9zYWwpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA8IGNsb3Nlc3QgfHwgKHBvcyA9PT0gMTAwICYmIGNsb3Nlc3QgPT09IDEwMCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIGNsb3Nlc3QgPSBwb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVOdW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlICdlbmQnIHdoZW4gYSBtb3VzZSBvciBwZW4gbGVhdmVzIHRoZSBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZG9jdW1lbnRMZWF2ZShldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnR5cGUgPT09IFwibW91c2VvdXRcIiAmJiBldmVudC50YXJnZXQubm9kZU5hbWUgPT09IFwiSFRNTFwiICYmIGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBldmVudEVuZChldmVudCwgZGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgbW92ZW1lbnQgb24gZG9jdW1lbnQgZm9yIGhhbmRsZSBhbmQgcmFuZ2UgZHJhZy5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRNb3ZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBGaXggIzQ5OFxuICAgICAgICAgICAgLy8gQ2hlY2sgdmFsdWUgb2YgLmJ1dHRvbnMgaW4gJ3N0YXJ0JyB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpbiBJRTEwIG1vYmlsZSAoZGF0YS5idXR0b25zUHJvcGVydHkpLlxuICAgICAgICAgICAgLy8gaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy85MjcwMDUvbW9iaWxlLWllMTAtd2luZG93cy1waG9uZS1idXR0b25zLXByb3BlcnR5LW9mLXBvaW50ZXJtb3ZlLWV2ZW50LWFsd2F5cy16ZXJvXG4gICAgICAgICAgICAvLyBJRTkgaGFzIC5idXR0b25zIGFuZCAud2hpY2ggemVybyBvbiBtb3VzZW1vdmUuXG4gICAgICAgICAgICAvLyBGaXJlZm94IGJyZWFrcyB0aGUgc3BlYyBNRE4gZGVmaW5lcy5cbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3IuYXBwVmVyc2lvbi5pbmRleE9mKFwiTVNJRSA5XCIpID09PSAtMSAmJiBldmVudC5idXR0b25zID09PSAwICYmIGRhdGEuYnV0dG9uc1Byb3BlcnR5ICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50RW5kKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYXJlIG1vdmluZyB1cCBvciBkb3duXG4gICAgICAgICAgICB2YXIgbW92ZW1lbnQgPSAob3B0aW9ucy5kaXIgPyAtMSA6IDEpICogKGV2ZW50LmNhbGNQb2ludCAtIGRhdGEuc3RhcnRDYWxjUG9pbnQpO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSBtb3ZlbWVudCBpbnRvIGEgcGVyY2VudGFnZSBvZiB0aGUgc2xpZGVyIHdpZHRoL2hlaWdodFxuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKG1vdmVtZW50ICogMTAwKSAvIGRhdGEuYmFzZVNpemU7XG5cbiAgICAgICAgICAgIG1vdmVIYW5kbGVzKG1vdmVtZW50ID4gMCwgcHJvcG9zYWwsIGRhdGEubG9jYXRpb25zLCBkYXRhLmhhbmRsZU51bWJlcnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVW5iaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LCBjYWxsIGNhbGxiYWNrcy5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRFbmQoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIFRoZSBoYW5kbGUgaXMgbm8gbG9uZ2VyIGFjdGl2ZSwgc28gcmVtb3ZlIHRoZSBjbGFzcy5cbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZSkge1xuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzKGRhdGEuaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuYWN0aXZlKTtcbiAgICAgICAgICAgICAgICBzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgLT0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVW5iaW5kIHRoZSBtb3ZlIGFuZCBlbmQgZXZlbnRzLCB3aGljaCBhcmUgYWRkZWQgb24gJ3N0YXJ0Jy5cbiAgICAgICAgICAgIGRhdGEubGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24oYykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0RvY3VtZW50RWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGNbMF0sIGNbMV0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChzY29wZV9BY3RpdmVIYW5kbGVzQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgZHJhZ2dpbmcgY2xhc3MuXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZyk7XG4gICAgICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgY3Vyc29yIHN0eWxlcyBhbmQgdGV4dC1zZWxlY3Rpb24gZXZlbnRzIGJvdW5kIHRvIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIGlmIChldmVudC5jdXJzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJlbmRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQmluZCBtb3ZlIGV2ZW50cyBvbiBkb2N1bWVudC5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRTdGFydChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gSWdub3JlIGV2ZW50IGlmIGFueSBoYW5kbGUgaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIGlmIChkYXRhLmhhbmRsZU51bWJlcnMuc29tZShpc0hhbmRsZURpc2FibGVkKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcblxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgaGFuZGxlT3JpZ2luID0gc2NvcGVfSGFuZGxlc1tkYXRhLmhhbmRsZU51bWJlcnNbMF1dO1xuXG4gICAgICAgICAgICAgICAgaGFuZGxlID0gaGFuZGxlT3JpZ2luLmNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCArPSAxO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgaGFuZGxlIGFzICdhY3RpdmUnIHNvIGl0IGNhbiBiZSBzdHlsZWQuXG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuYWN0aXZlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQSBkcmFnIHNob3VsZCBuZXZlciBwcm9wYWdhdGUgdXAgdG8gdGhlICd0YXAnIGV2ZW50LlxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIC8vIFJlY29yZCB0aGUgZXZlbnQgbGlzdGVuZXJzLlxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIG1vdmUgYW5kIGVuZCBldmVudHMuXG4gICAgICAgICAgICB2YXIgbW92ZUV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50TW92ZSwge1xuICAgICAgICAgICAgICAgIC8vIFRoZSBldmVudCB0YXJnZXQgaGFzIGNoYW5nZWQgc28gd2UgbmVlZCB0byBwcm9wYWdhdGUgdGhlIG9yaWdpbmFsIG9uZSBzbyB0aGF0IHdlIGtlZXBcbiAgICAgICAgICAgICAgICAvLyByZWx5aW5nIG9uIGl0IHRvIGV4dHJhY3QgdGFyZ2V0IHRvdWNoZXMuXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgc3RhcnRDYWxjUG9pbnQ6IGV2ZW50LmNhbGNQb2ludCxcbiAgICAgICAgICAgICAgICBiYXNlU2l6ZTogYmFzZVNpemUoKSxcbiAgICAgICAgICAgICAgICBwYWdlT2Zmc2V0OiBldmVudC5wYWdlT2Zmc2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVycyxcbiAgICAgICAgICAgICAgICBidXR0b25zUHJvcGVydHk6IGV2ZW50LmJ1dHRvbnMsXG4gICAgICAgICAgICAgICAgbG9jYXRpb25zOiBzY29wZV9Mb2NhdGlvbnMuc2xpY2UoKVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBlbmRFdmVudCA9IGF0dGFjaEV2ZW50KGFjdGlvbnMuZW5kLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGV2ZW50RW5kLCB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlOiBoYW5kbGUsXG4gICAgICAgICAgICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsXG4gICAgICAgICAgICAgICAgZG9Ob3RSZWplY3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG91dEV2ZW50ID0gYXR0YWNoRXZlbnQoXCJtb3VzZW91dFwiLCBzY29wZV9Eb2N1bWVudEVsZW1lbnQsIGRvY3VtZW50TGVhdmUsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBkb05vdFJlamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBXZSB3YW50IHRvIG1ha2Ugc3VyZSB3ZSBwdXNoZWQgdGhlIGxpc3RlbmVycyBpbiB0aGUgbGlzdGVuZXIgbGlzdCByYXRoZXIgdGhhbiBjcmVhdGluZ1xuICAgICAgICAgICAgLy8gYSBuZXcgb25lIGFzIGl0IGhhcyBhbHJlYWR5IGJlZW4gcGFzc2VkIHRvIHRoZSBldmVudCBoYW5kbGVycy5cbiAgICAgICAgICAgIGxpc3RlbmVycy5wdXNoLmFwcGx5KGxpc3RlbmVycywgbW92ZUV2ZW50LmNvbmNhdChlbmRFdmVudCwgb3V0RXZlbnQpKTtcblxuICAgICAgICAgICAgLy8gVGV4dCBzZWxlY3Rpb24gaXNuJ3QgYW4gaXNzdWUgb24gdG91Y2ggZGV2aWNlcyxcbiAgICAgICAgICAgIC8vIHNvIGFkZGluZyBjdXJzb3Igc3R5bGVzIGNhbiBiZSBza2lwcGVkLlxuICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGhlICdJJyBjdXJzb3IgYW5kIGV4dGVuZCB0aGUgcmFuZ2UtZHJhZyBjdXJzb3IuXG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5zdHlsZS5jdXJzb3IgPSBnZXRDb21wdXRlZFN0eWxlKGV2ZW50LnRhcmdldCkuY3Vyc29yO1xuXG4gICAgICAgICAgICAgICAgLy8gTWFyayB0aGUgdGFyZ2V0IHdpdGggYSBkcmFnZ2luZyBzdGF0ZS5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmRyYWcpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFByZXZlbnQgdGV4dCBzZWxlY3Rpb24gd2hlbiBkcmFnZ2luZyB0aGUgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICAvLyBJbiBub1VpU2xpZGVyIDw9IDkuMi4wLCB0aGlzIHdhcyBoYW5kbGVkIGJ5IGNhbGxpbmcgcHJldmVudERlZmF1bHQgb24gbW91c2UvdG91Y2ggc3RhcnQvbW92ZSxcbiAgICAgICAgICAgICAgICAvLyB3aGljaCBpcyBzY3JvbGwgYmxvY2tpbmcuIFRoZSBzZWxlY3RzdGFydCBldmVudCBpcyBzdXBwb3J0ZWQgYnkgRmlyZUZveCBzdGFydGluZyBmcm9tIHZlcnNpb24gNTIsXG4gICAgICAgICAgICAgICAgLy8gbWVhbmluZyB0aGUgb25seSBob2xkb3V0IGlzIGlPUyBTYWZhcmkuIFRoaXMgZG9lc24ndCBtYXR0ZXI6IHRleHQgc2VsZWN0aW9uIGlzbid0IHRyaWdnZXJlZCB0aGVyZS5cbiAgICAgICAgICAgICAgICAvLyBUaGUgJ2N1cnNvcicgZmxhZyBpcyBmYWxzZS5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPXNlbGVjdHN0YXJ0XG4gICAgICAgICAgICAgICAgc2NvcGVfQm9keS5hZGRFdmVudExpc3RlbmVyKFwic2VsZWN0c3RhcnRcIiwgcHJldmVudERlZmF1bHQsIGZhbHNlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGF0YS5oYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic3RhcnRcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSBjbG9zZXN0IGhhbmRsZSB0byB0YXBwZWQgbG9jYXRpb24uXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50VGFwKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBUaGUgdGFwIGV2ZW50IHNob3VsZG4ndCBwcm9wYWdhdGUgdXBcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoZXZlbnQuY2FsY1BvaW50KTtcbiAgICAgICAgICAgIHZhciBoYW5kbGVOdW1iZXIgPSBnZXRDbG9zZXN0SGFuZGxlKHByb3Bvc2FsKTtcblxuICAgICAgICAgICAgLy8gVGFja2xlIHRoZSBjYXNlIHRoYXQgYWxsIGhhbmRsZXMgYXJlICdkaXNhYmxlZCcuXG4gICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmxhZyB0aGUgc2xpZGVyIGFzIGl0IGlzIG5vdyBpbiBhIHRyYW5zaXRpb25hbCBzdGF0ZS5cbiAgICAgICAgICAgIC8vIFRyYW5zaXRpb24gdGFrZXMgYSBjb25maWd1cmFibGUgYW1vdW50IG9mIG1zIChkZWZhdWx0IDMwMCkuIFJlLWVuYWJsZSB0aGUgc2xpZGVyIGFmdGVyIHRoYXQuXG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMuZXZlbnRzLnNuYXApIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBwcm9wb3NhbCwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHNldFppbmRleCgpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJjaGFuZ2VcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGV2ZW50U3RhcnQoZXZlbnQsIHsgaGFuZGxlTnVtYmVyczogW2hhbmRsZU51bWJlcl0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGaXJlcyBhICdob3ZlcicgZXZlbnQgZm9yIGEgaG92ZXJlZCBtb3VzZS9wZW4gcG9zaXRpb24uXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50SG92ZXIoZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuXG4gICAgICAgICAgICB2YXIgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHByb3Bvc2FsKTtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNjb3BlX0V2ZW50cykuZm9yRWFjaChmdW5jdGlvbih0YXJnZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGlmIChcImhvdmVyXCIgPT09IHRhcmdldEV2ZW50LnNwbGl0KFwiLlwiKVswXSkge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9FdmVudHNbdGFyZ2V0RXZlbnRdLmZvckVhY2goZnVuY3Rpb24oY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwoc2NvcGVfU2VsZiwgdmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZXMga2V5ZG93biBvbiBmb2N1c2VkIGhhbmRsZXNcbiAgICAgICAgLy8gRG9uJ3QgbW92ZSB0aGUgZG9jdW1lbnQgd2hlbiBwcmVzc2luZyBhcnJvdyBrZXlzIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICBmdW5jdGlvbiBldmVudEtleWRvd24oZXZlbnQsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgaWYgKGlzU2xpZGVyRGlzYWJsZWQoKSB8fCBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBob3Jpem9udGFsS2V5cyA9IFtcIkxlZnRcIiwgXCJSaWdodFwiXTtcbiAgICAgICAgICAgIHZhciB2ZXJ0aWNhbEtleXMgPSBbXCJEb3duXCIsIFwiVXBcIl07XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciAmJiAhb3B0aW9ucy5vcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhbiByaWdodC10by1sZWZ0IHNsaWRlciwgdGhlIGxlZnQgYW5kIHJpZ2h0IGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgaG9yaXpvbnRhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLm9ydCAmJiAhb3B0aW9ucy5kaXIpIHtcbiAgICAgICAgICAgICAgICAvLyBPbiBhIHRvcC10by1ib3R0b20gc2xpZGVyLCB0aGUgdXAgYW5kIGRvd24ga2V5cyBhY3QgaW52ZXJ0ZWRcbiAgICAgICAgICAgICAgICB2ZXJ0aWNhbEtleXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdHJpcCBcIkFycm93XCIgZm9yIElFIGNvbXBhdGliaWxpdHkuIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50L2tleVxuICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50LmtleS5yZXBsYWNlKFwiQXJyb3dcIiwgXCJcIik7XG4gICAgICAgICAgICB2YXIgaXNEb3duID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMF0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc1VwID0ga2V5ID09PSB2ZXJ0aWNhbEtleXNbMV0gfHwga2V5ID09PSBob3Jpem9udGFsS2V5c1sxXTtcblxuICAgICAgICAgICAgaWYgKCFpc0Rvd24gJiYgIWlzVXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlzRG93biA/IDAgOiAxO1xuICAgICAgICAgICAgdmFyIHN0ZXBzID0gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB2YXIgc3RlcCA9IHN0ZXBzW2RpcmVjdGlvbl07XG5cbiAgICAgICAgICAgIC8vIEF0IHRoZSBlZGdlIG9mIGEgc2xpZGVyLCBkbyBub3RoaW5nXG4gICAgICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTm8gc3RlcCBzZXQsIHVzZSB0aGUgZGVmYXVsdCBvZiAxMCUgb2YgdGhlIHN1Yi1yYW5nZVxuICAgICAgICAgICAgaWYgKHN0ZXAgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLmdldERlZmF1bHRTdGVwKHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdLCBpc0Rvd24sIDEwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RlcCBvdmVyIHplcm8tbGVuZ3RoIHJhbmdlcyAoIzk0OCk7XG4gICAgICAgICAgICBzdGVwID0gTWF0aC5tYXgoc3RlcCwgMC4wMDAwMDAxKTtcblxuICAgICAgICAgICAgLy8gRGVjcmVtZW50IGZvciBkb3duIHN0ZXBzXG4gICAgICAgICAgICBzdGVwID0gKGlzRG93biA/IC0xIDogMSkgKiBzdGVwO1xuXG4gICAgICAgICAgICB2YWx1ZVNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX1ZhbHVlc1toYW5kbGVOdW1iZXJdICsgc3RlcCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGFjaCBldmVudHMgdG8gc2V2ZXJhbCBzbGlkZXIgcGFydHMuXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRTbGlkZXJFdmVudHMoYmVoYXZpb3VyKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHN0YW5kYXJkIGRyYWcgZXZlbnQgdG8gdGhlIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAoIWJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZXNlIGV2ZW50cyBhcmUgb25seSBib3VuZCB0byB0aGUgdmlzdWFsIGhhbmRsZVxuICAgICAgICAgICAgICAgICAgICAvLyBlbGVtZW50LCBub3QgdGhlICdyZWFsJyBvcmlnaW4gZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgaGFuZGxlLmNoaWxkcmVuWzBdLCBldmVudFN0YXJ0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdGhlIHRhcCBldmVudCB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLnRhcCkge1xuICAgICAgICAgICAgICAgIGF0dGFjaEV2ZW50KGFjdGlvbnMuc3RhcnQsIHNjb3BlX0Jhc2UsIGV2ZW50VGFwLCB7fSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZpcmUgaG92ZXIgZXZlbnRzXG4gICAgICAgICAgICBpZiAoYmVoYXZpb3VyLmhvdmVyKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5tb3ZlLCBzY29wZV9CYXNlLCBldmVudEhvdmVyLCB7XG4gICAgICAgICAgICAgICAgICAgIGhvdmVyOiB0cnVlXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIE1ha2UgdGhlIHJhbmdlIGRyYWdnYWJsZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZHJhZykge1xuICAgICAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzLmZvckVhY2goZnVuY3Rpb24oY29ubmVjdCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbm5lY3QgPT09IGZhbHNlIHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQmVmb3JlID0gc2NvcGVfSGFuZGxlc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGFuZGxlQWZ0ZXIgPSBzY29wZV9IYW5kbGVzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SG9sZGVycyA9IFtjb25uZWN0XTtcblxuICAgICAgICAgICAgICAgICAgICBhZGRDbGFzcyhjb25uZWN0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZ2dhYmxlKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSByYW5nZSBpcyBmaXhlZCwgdGhlIGVudGlyZSByYW5nZSBjYW5cbiAgICAgICAgICAgICAgICAgICAgLy8gYmUgZHJhZ2dlZCBieSB0aGUgaGFuZGxlcy4gVGhlIGhhbmRsZSBpbiB0aGUgZmlyc3RcbiAgICAgICAgICAgICAgICAgICAgLy8gb3JpZ2luIHdpbGwgcHJvcGFnYXRlIHRoZSBzdGFydCBldmVudCB1cHdhcmQsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCBpdCBuZWVkcyB0byBiZSBib3VuZCBtYW51YWxseSBvbiB0aGUgb3RoZXIuXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuZml4ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUJlZm9yZS5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMucHVzaChoYW5kbGVBZnRlci5jaGlsZHJlblswXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBldmVudEhvbGRlcnMuZm9yRWFjaChmdW5jdGlvbihldmVudEhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgZXZlbnRIb2xkZXIsIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVzOiBbaGFuZGxlQmVmb3JlLCBoYW5kbGVBZnRlcl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogW2luZGV4IC0gMSwgaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBdHRhY2ggYW4gZXZlbnQgdG8gdGhpcyBzbGlkZXIsIHBvc3NpYmx5IGluY2x1ZGluZyBhIG5hbWVzcGFjZVxuICAgICAgICBmdW5jdGlvbiBiaW5kRXZlbnQobmFtZXNwYWNlZEV2ZW50LCBjYWxsYmFjaykge1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0gPSBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZXZlbnQgYm91bmQgaXMgJ3VwZGF0ZSwnIGZpcmUgaXQgaW1tZWRpYXRlbHkgZm9yIGFsbCBoYW5kbGVzLlxuICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWRFdmVudC5zcGxpdChcIi5cIilbMF0gPT09IFwidXBkYXRlXCIpIHtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oYSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGluZGV4KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuZG8gYXR0YWNobWVudCBvZiBldmVudFxuICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChuYW1lc3BhY2VkRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5hbWVzcGFjZWRFdmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50ICYmIG5hbWVzcGFjZWRFdmVudC5zdWJzdHJpbmcoZXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKGJpbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdEV2ZW50ID0gYmluZC5zcGxpdChcIi5cIilbMF07XG4gICAgICAgICAgICAgICAgdmFyIHROYW1lc3BhY2UgPSBiaW5kLnN1YnN0cmluZyh0RXZlbnQubGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjb3BlX0V2ZW50c1tiaW5kXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4dGVybmFsIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudE5hbWUsIGhhbmRsZU51bWJlciwgdGFwKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlcyBhcyBhcnJheSwgc28gYXJnXzFbYXJnXzJdIGlzIGFsd2F5cyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kZXgsIDAgb3IgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50IGlzIGZpcmVkIGJ5IHRhcCwgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWZ0IG9mZnNldCBvZiB0aGUgaGFuZGxlLCBpbiByZWxhdGlvbiB0byB0aGUgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3BsaXQgb3V0IHRoZSBoYW5kbGUgcG9zaXRpb25pbmcgbG9naWMgc28gdGhlIE1vdmUgZXZlbnQgY2FuIHVzZSBpdCwgdG9vXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrSGFuZGxlUG9zaXRpb24ocmVmZXJlbmNlLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBnZXRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0gKyBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGxvb2tGb3J3YXJkICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0gLSBvcHRpb25zLm1hcmdpbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgbGltaXQgb3B0aW9uIGhhcyB0aGUgb3Bwb3NpdGUgZWZmZWN0LCBsaW1pdGluZyBoYW5kbGVzIHRvIGFcbiAgICAgICAgICAgIC8vIG1heGltdW0gZGlzdGFuY2UgZnJvbSBhbm90aGVyLiBMaW1pdCBtdXN0IGJlID4gMCwgYXMgb3RoZXJ3aXNlXG4gICAgICAgICAgICAvLyBoYW5kbGVzIHdvdWxkIGJlIHVubW92YWJsZS5cbiAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEgJiYgb3B0aW9ucy5saW1pdCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWluKHRvLCByZWZlcmVuY2VbaGFuZGxlTnVtYmVyIC0gMV0gKyBvcHRpb25zLmxpbWl0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgKyAxXSAtIG9wdGlvbnMubGltaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIHBhZGRpbmcgb3B0aW9uIGtlZXBzIHRoZSBoYW5kbGVzIGEgY2VydGFpbiBkaXN0YW5jZSBmcm9tIHRoZVxuICAgICAgICAgICAgLy8gZWRnZXMgb2YgdGhlIHNsaWRlci4gUGFkZGluZyBtdXN0IGJlID4gMC5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBhZGRpbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIG9wdGlvbnMucGFkZGluZ1swXSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIDEwMCAtIG9wdGlvbnMucGFkZGluZ1sxXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAodG8pO1xuXG4gICAgICAgICAgICAvLyBMaW1pdCBwZXJjZW50YWdlIHRvIHRoZSAwIC0gMTAwIHJhbmdlXG4gICAgICAgICAgICB0byA9IGxpbWl0KHRvKTtcblxuICAgICAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGlmIGhhbmRsZSBjYW4ndCBtb3ZlXG4gICAgICAgICAgICBpZiAodG8gPT09IHJlZmVyZW5jZVtoYW5kbGVOdW1iZXJdICYmICFnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRvO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXNlcyBzbGlkZXIgb3JpZW50YXRpb24gdG8gY3JlYXRlIENTUyBydWxlcy4gYSA9IGJhc2UgdmFsdWU7XG4gICAgICAgIGZ1bmN0aW9uIGluUnVsZU9yZGVyKHYsIGEpIHtcbiAgICAgICAgICAgIHZhciBvID0gb3B0aW9ucy5vcnQ7XG4gICAgICAgICAgICByZXR1cm4gKG8gPyBhIDogdikgKyBcIiwgXCIgKyAobyA/IHYgOiBhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE1vdmVzIGhhbmRsZShzKSBieSBhIHBlcmNlbnRhZ2VcbiAgICAgICAgLy8gKGJvb2wsICUgdG8gbW92ZSwgWyUgd2hlcmUgaGFuZGxlIHN0YXJ0ZWQsIC4uLl0sIFtpbmRleCBpbiBzY29wZV9IYW5kbGVzLCAuLi5dKVxuICAgICAgICBmdW5jdGlvbiBtb3ZlSGFuZGxlcyh1cHdhcmQsIHByb3Bvc2FsLCBsb2NhdGlvbnMsIGhhbmRsZU51bWJlcnMpIHtcbiAgICAgICAgICAgIHZhciBwcm9wb3NhbHMgPSBsb2NhdGlvbnMuc2xpY2UoKTtcblxuICAgICAgICAgICAgdmFyIGIgPSBbIXVwd2FyZCwgdXB3YXJkXTtcbiAgICAgICAgICAgIHZhciBmID0gW3Vwd2FyZCwgIXVwd2FyZF07XG5cbiAgICAgICAgICAgIC8vIENvcHkgaGFuZGxlTnVtYmVycyBzbyB3ZSBkb24ndCBjaGFuZ2UgdGhlIGRhdGFzZXRcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMgPSBoYW5kbGVOdW1iZXJzLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIC8vIENoZWNrIHRvIHNlZSB3aGljaCBoYW5kbGUgaXMgJ2xlYWRpbmcnLlxuICAgICAgICAgICAgLy8gSWYgdGhhdCBvbmUgY2FuJ3QgbW92ZSB0aGUgc2Vjb25kIGNhbid0IGVpdGhlci5cbiAgICAgICAgICAgIGlmICh1cHdhcmQpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RlcCAxOiBnZXQgdGhlIG1heGltdW0gcGVyY2VudGFnZSB0aGF0IGFueSBvZiB0aGUgaGFuZGxlcyBjYW4gbW92ZVxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvID0gY2hlY2tIYW5kbGVQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICBiW29dLFxuICAgICAgICAgICAgICAgICAgICAgICAgZltvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcCBpZiBvbmUgb2YgdGhlIGhhbmRsZXMgY2FuJ3QgbW92ZS5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWwgPSB0byAtIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zYWxzW2hhbmRsZU51bWJlcl0gPSB0bztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB1c2luZyBvbmUgaGFuZGxlLCBjaGVjayBiYWNrd2FyZCBBTkQgZm9yd2FyZFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYiA9IGYgPSBbdHJ1ZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGZhbHNlO1xuXG4gICAgICAgICAgICAvLyBTdGVwIDI6IFRyeSB0byBzZXQgdGhlIGhhbmRsZXMgd2l0aCB0aGUgZm91bmQgcGVyY2VudGFnZVxuICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlciwgbykge1xuICAgICAgICAgICAgICAgIHN0YXRlID0gc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgbG9jYXRpb25zW2hhbmRsZU51bWJlcl0gKyBwcm9wb3NhbCwgYltvXSwgZltvXSkgfHwgc3RhdGU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gU3RlcCAzOiBJZiBhIGhhbmRsZSBtb3ZlZCwgZmlyZSBldmVudHNcbiAgICAgICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwidXBkYXRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUYWtlcyBhIGJhc2UgdmFsdWUgYW5kIGFuIG9mZnNldC4gVGhpcyBvZmZzZXQgaXMgdXNlZCBmb3IgdGhlIGNvbm5lY3QgYmFyIHNpemUuXG4gICAgICAgIC8vIEluIHRoZSBpbml0aWFsIGRlc2lnbiBmb3IgdGhpcyBmZWF0dXJlLCB0aGUgb3JpZ2luIGVsZW1lbnQgd2FzIDElIHdpZGUuXG4gICAgICAgIC8vIFVuZm9ydHVuYXRlbHksIGEgcm91bmRpbmcgYnVnIGluIENocm9tZSBtYWtlcyBpdCBpbXBvc3NpYmxlIHRvIGltcGxlbWVudCB0aGlzIGZlYXR1cmVcbiAgICAgICAgLy8gaW4gdGhpcyBtYW5uZXI6IGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTc5ODIyM1xuICAgICAgICBmdW5jdGlvbiB0cmFuc2Zvcm1EaXJlY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuZGlyID8gMTAwIC0gYSAtIGIgOiBhO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVXBkYXRlcyBzY29wZV9Mb2NhdGlvbnMgYW5kIHNjb3BlX1ZhbHVlcywgdXBkYXRlcyB2aXN1YWwgc3RhdGVcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlSGFuZGxlUG9zaXRpb24oaGFuZGxlTnVtYmVyLCB0bykge1xuICAgICAgICAgICAgLy8gVXBkYXRlIGxvY2F0aW9ucy5cbiAgICAgICAgICAgIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdID0gdG87XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIHZhbHVlIHRvIHRoZSBzbGlkZXIgc3RlcHBpbmcvcmFuZ2UuXG4gICAgICAgICAgICBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXSA9IHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyh0byk7XG5cbiAgICAgICAgICAgIHZhciBydWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2Zvcm1EaXJlY3Rpb24odG8sIDApIC0gc2NvcGVfRGlyT2Zmc2V0ICsgXCIlXCIsIFwiMFwiKSArIFwiKVwiO1xuICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlW29wdGlvbnMudHJhbnNmb3JtUnVsZV0gPSBydWxlO1xuXG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlciArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPiA1MCA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB2YXIgekluZGV4ID0gMyArIChzY29wZV9IYW5kbGVzLmxlbmd0aCArIGRpciAqIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlLnpJbmRleCA9IHpJbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBzdWdnZXN0ZWQgdmFsdWVzIGFuZCBhcHBseSBtYXJnaW4sIHN0ZXAuXG4gICAgICAgIGZ1bmN0aW9uIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkKSB7XG4gICAgICAgICAgICB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBmYWxzZSk7XG5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc3R5bGUgYXR0cmlidXRlIGZvciBjb25uZWN0IG5vZGVzXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbm5lY3QoaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFNraXAgY29ubmVjdHMgc2V0IHRvIGZhbHNlXG4gICAgICAgICAgICBpZiAoIXNjb3BlX0Nvbm5lY3RzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgdmFyIGggPSAxMDA7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaCA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIHVzZSB0d28gcnVsZXM6XG4gICAgICAgICAgICAvLyAndHJhbnNsYXRlJyB0byBjaGFuZ2UgdGhlIGxlZnQvdG9wIG9mZnNldDtcbiAgICAgICAgICAgIC8vICdzY2FsZScgdG8gY2hhbmdlIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDtcbiAgICAgICAgICAgIC8vIEFzIHRoZSBlbGVtZW50IGhhcyBhIHdpZHRoIG9mIDEwMCUsIGEgdHJhbnNsYXRpb24gb2YgMTAwJSBpcyBlcXVhbCB0byAxMDAlIG9mIHRoZSBwYXJlbnQgKC5ub1VpLWJhc2UpXG4gICAgICAgICAgICB2YXIgY29ubmVjdFdpZHRoID0gaCAtIGw7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKGwsIGNvbm5lY3RXaWR0aCkgKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB2YXIgc2NhbGVSdWxlID0gXCJzY2FsZShcIiArIGluUnVsZU9yZGVyKGNvbm5lY3RXaWR0aCAvIDEwMCwgXCIxXCIpICsgXCIpXCI7XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzW2luZGV4XS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZSArIFwiIFwiICsgc2NhbGVSdWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFyc2VzIHZhbHVlIHBhc3NlZCB0byAuc2V0IG1ldGhvZC4gUmV0dXJucyBjdXJyZW50IHZhbHVlIGlmIG5vdCBwYXJzZS1hYmxlLlxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVG9WYWx1ZSh0bywgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR0aW5nIHdpdGggbnVsbCBpbmRpY2F0ZXMgYW4gJ2lnbm9yZScuXG4gICAgICAgICAgICAvLyBJbnB1dHRpbmcgJ2ZhbHNlJyBpcyBpbnZhbGlkLlxuICAgICAgICAgICAgaWYgKHRvID09PSBudWxsIHx8IHRvID09PSBmYWxzZSB8fCB0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBhIGZvcm1hdHRlZCBudW1iZXIgd2FzIHBhc3NlZCwgYXR0ZW1wdCB0byBkZWNvZGUgaXQuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdG8gPSBTdHJpbmcodG8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0byA9IG9wdGlvbnMuZm9ybWF0LmZyb20odG8pO1xuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgLy8gSWYgcGFyc2luZyB0aGUgbnVtYmVyIGZhaWxlZCwgdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc05hTih0bykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldChpbnB1dCwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gYXNBcnJheShpbnB1dCk7XG4gICAgICAgICAgICB2YXIgaXNJbml0ID0gc2NvcGVfTG9jYXRpb25zWzBdID09PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIC8vIEV2ZW50IGZpcmVzIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGZpcmVTZXRFdmVudCA9IGZpcmVTZXRFdmVudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhZmlyZVNldEV2ZW50O1xuXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgb3B0aW9uYWwuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGluaXRpYWwgdmFsdWVzIHdlcmUgc2V0IGJlZm9yZSB1c2luZyBhbmltYXRlZCBwbGFjZW1lbnQuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmICFpc0luaXQpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJzdCBwYXNzLCB3aXRob3V0IGxvb2tBaGVhZCBidXQgd2l0aCBsb29rQmFja3dhcmQuIFZhbHVlcyBhcmUgc2V0IGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZXNbaGFuZGxlTnVtYmVyXSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFNlY29uZCBwYXNzLiBOb3cgdGhhdCBhbGwgYmFzZSB2YWx1ZXMgYXJlIHNldCwgYXBwbHkgY29uc3RyYWludHNcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgICAgIC8vIEZpcmUgdGhlIGV2ZW50IG9ubHkgZm9yIGhhbmRsZXMgdGhhdCByZWNlaXZlZCBhIG5ldyB2YWx1ZSwgYXMgcGVyICM1NzlcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVzW2hhbmRsZU51bWJlcl0gIT09IG51bGwgJiYgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVzZXQgc2xpZGVyIHRvIGluaXRpYWwgdmFsdWVzXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlUmVzZXQoZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICB2YWx1ZVNldChvcHRpb25zLnN0YXJ0LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2V0IHZhbHVlIGZvciBhIHNpbmdsZSBoYW5kbGVcbiAgICAgICAgZnVuY3Rpb24gdmFsdWVTZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCB2YWx1ZSwgZmlyZVNldEV2ZW50KSB7XG4gICAgICAgICAgICAvLyBFbnN1cmUgbnVtZXJpYyBpbnB1dFxuICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gTnVtYmVyKGhhbmRsZU51bWJlcik7XG5cbiAgICAgICAgICAgIGlmICghKGhhbmRsZU51bWJlciA+PSAwICYmIGhhbmRsZU51bWJlciA8IHNjb3BlX0hhbmRsZU51bWJlcnMubGVuZ3RoKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogaW52YWxpZCBoYW5kbGUgbnVtYmVyLCBnb3Q6IFwiICsgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTG9vayBib3RoIGJhY2t3YXJkIGFuZCBmb3J3YXJkLCBzaW5jZSB3ZSBkb24ndCB3YW50IHRoaXMgaGFuZGxlIHRvIFwicHVzaFwiIG90aGVyIGhhbmRsZXMgKCM5NjApO1xuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuXG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBoYW5kbGUgaXMgdXNlZCwgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jc3NDbGFzc2VzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zLmNzc0NsYXNzZXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXNba2V5XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHdoaWxlIChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCkge1xuICAgICAgICAgICAgICAgIHNjb3BlX1RhcmdldC5yZW1vdmVDaGlsZChzY29wZV9UYXJnZXQuZmlyc3RDaGlsZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9UYXJnZXQubm9VaVNsaWRlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldE5leHRTdGVwc0ZvckhhbmRsZShoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBsb2NhdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgdmFyIG5lYXJieVN0ZXBzID0gc2NvcGVfU3BlY3RydW0uZ2V0TmVhcmJ5U3RlcHMobG9jYXRpb24pO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgaW5jcmVtZW50ID0gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RlcDtcbiAgICAgICAgICAgIHZhciBkZWNyZW1lbnQgPSBudWxsO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYmV5b25kIHRoZSBzdGFydGluZyBwb2ludFxuICAgICAgICAgICAgaWYgKHZhbHVlID4gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3csIGlmIGF0IHRoZSBzbGlkZXIgZWRnZXMsIHRoZXJlIGlzIG5vIGluL2RlY3JlbWVudFxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG5cbiAgICAgICAgICAgIC8vIFJvdW5kIHBlciAjMzkxXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBudWxsICYmIGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBOdW1iZXIoaW5jcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWNyZW1lbnQgIT09IG51bGwgJiYgZGVjcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IE51bWJlcihkZWNyZW1lbnQudG9GaXhlZChzdGVwRGVjaW1hbHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBzaXplIGZvciB0aGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0U3RlcHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfSGFuZGxlTnVtYmVycy5tYXAoZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZWFibGU6IG1hcmdpbiwgbGltaXQsIHBhZGRpbmcsIHN0ZXAsIHJhbmdlLCBhbmltYXRlLCBzbmFwXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0aW9uc1RvVXBkYXRlLCBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFNwZWN0cnVtIGlzIGNyZWF0ZWQgdXNpbmcgdGhlIHJhbmdlLCBzbmFwLCBkaXJlY3Rpb24gYW5kIHN0ZXAgb3B0aW9ucy5cbiAgICAgICAgICAgIC8vICdzbmFwJyBhbmQgJ3N0ZXAnIGNhbiBiZSB1cGRhdGVkLlxuICAgICAgICAgICAgLy8gSWYgJ3NuYXAnIGFuZCAnc3RlcCcgYXJlIG5vdCBwYXNzZWQsIHRoZXkgc2hvdWxkIHJlbWFpbiB1bmNoYW5nZWQuXG4gICAgICAgICAgICB2YXIgdiA9IHZhbHVlR2V0KCk7XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVBYmxlID0gW1xuICAgICAgICAgICAgICAgIFwibWFyZ2luXCIsXG4gICAgICAgICAgICAgICAgXCJsaW1pdFwiLFxuICAgICAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgICAgIFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICBcImFuaW1hdGVcIixcbiAgICAgICAgICAgICAgICBcInNuYXBcIixcbiAgICAgICAgICAgICAgICBcInN0ZXBcIixcbiAgICAgICAgICAgICAgICBcImZvcm1hdFwiLFxuICAgICAgICAgICAgICAgIFwicGlwc1wiLFxuICAgICAgICAgICAgICAgIFwidG9vbHRpcHNcIlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2Ugb3B0aW9ucyB0aGF0IHdlJ3JlIGFjdHVhbGx5IHBhc3NlZCB0byB1cGRhdGUuXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciB1bmRlZmluZWQuIG51bGwgcmVtb3ZlcyB0aGUgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsT3B0aW9uc1tuYW1lXSA9IG9wdGlvbnNUb1VwZGF0ZVtuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIG5ldyBvcHRpb25zIGludG8gdGhlIHNsaWRlciBzdGF0ZVxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1RvVXBkYXRlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG5ld09wdGlvbnNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlX1NwZWN0cnVtID0gbmV3T3B0aW9ucy5zcGVjdHJ1bTtcblxuICAgICAgICAgICAgLy8gTGltaXQsIG1hcmdpbiBhbmQgcGFkZGluZyBkZXBlbmQgb24gdGhlIHNwZWN0cnVtIGJ1dCBhcmUgc3RvcmVkIG91dHNpZGUgb2YgaXQuICgjNjc3KVxuICAgICAgICAgICAgb3B0aW9ucy5tYXJnaW4gPSBuZXdPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgPSBuZXdPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gbmV3T3B0aW9ucy5wYWRkaW5nO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjdXJyZW50IHBvc2l0aW9uaW5nIHNvIHZhbHVlU2V0IGZvcmNlcyBhbiB1cGRhdGUuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnNUb1VwZGF0ZS5zdGFydCB8fCB2LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24gc3RlcHNcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTbGlkZXIoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2UgZWxlbWVudCwgaW5pdGlhbGl6ZSBIVE1MIGFuZCBzZXQgY2xhc3Nlcy5cbiAgICAgICAgICAgIC8vIEFkZCBoYW5kbGVzIGFuZCBjb25uZWN0IGVsZW1lbnRzLlxuICAgICAgICAgICAgc2NvcGVfQmFzZSA9IGFkZFNsaWRlcihzY29wZV9UYXJnZXQpO1xuXG4gICAgICAgICAgICBhZGRFbGVtZW50cyhvcHRpb25zLmNvbm5lY3QsIHNjb3BlX0Jhc2UpO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdXNlciBldmVudHMuXG4gICAgICAgICAgICBiaW5kU2xpZGVyRXZlbnRzKG9wdGlvbnMuZXZlbnRzKTtcblxuICAgICAgICAgICAgLy8gVXNlIHRoZSBwdWJsaWMgdmFsdWUgbWV0aG9kIHRvIHNldCB0aGUgc3RhcnQgdmFsdWVzLlxuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJpYSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dXBTbGlkZXIoKTtcblxuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG4gICAgICAgIHNjb3BlX1NlbGYgPSB7XG4gICAgICAgICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgICAgICAgc3RlcHM6IGdldE5leHRTdGVwcyxcbiAgICAgICAgICAgIG9uOiBiaW5kRXZlbnQsXG4gICAgICAgICAgICBvZmY6IHJlbW92ZUV2ZW50LFxuICAgICAgICAgICAgZ2V0OiB2YWx1ZUdldCxcbiAgICAgICAgICAgIHNldDogdmFsdWVTZXQsXG4gICAgICAgICAgICBzZXRIYW5kbGU6IHZhbHVlU2V0SGFuZGxlLFxuICAgICAgICAgICAgcmVzZXQ6IHZhbHVlUmVzZXQsXG4gICAgICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgICAgICBfX21vdmVIYW5kbGVzOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgbW92ZUhhbmRsZXMoYSwgYiwgc2NvcGVfTG9jYXRpb25zLCBjKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBvcmlnaW5hbE9wdGlvbnMsIC8vIElzc3VlICM2MDAsICM2NzhcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICB0YXJnZXQ6IHNjb3BlX1RhcmdldCwgLy8gSXNzdWUgIzU5N1xuICAgICAgICAgICAgcmVtb3ZlUGlwczogcmVtb3ZlUGlwcyxcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzOiByZW1vdmVUb29sdGlwcyxcbiAgICAgICAgICAgIHBpcHM6IHBpcHMgLy8gSXNzdWUgIzU5NFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBzY29wZV9TZWxmO1xuICAgIH1cblxuICAgIC8vIFJ1biB0aGUgc3RhbmRhcmQgaW5pdGlhbGl6ZXJcbiAgICBmdW5jdGlvbiBpbml0aWFsaXplKHRhcmdldCwgb3JpZ2luYWxPcHRpb25zKSB7XG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICF0YXJnZXQubm9kZU5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogY3JlYXRlIHJlcXVpcmVzIGEgc2luZ2xlIGVsZW1lbnQsIGdvdDogXCIgKyB0YXJnZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgdGhlIHNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cbiAgICAgICAgaWYgKHRhcmdldC5ub1VpU2xpZGVyKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6IFNsaWRlciB3YXMgYWxyZWFkeSBpbml0aWFsaXplZC5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUZXN0IHRoZSBvcHRpb25zIGFuZCBjcmVhdGUgdGhlIHNsaWRlciBlbnZpcm9ubWVudDtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMsIHRhcmdldCk7XG4gICAgICAgIHZhciBhcGkgPSBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucyk7XG5cbiAgICAgICAgdGFyZ2V0Lm5vVWlTbGlkZXIgPSBhcGk7XG5cbiAgICAgICAgcmV0dXJuIGFwaTtcbiAgICB9XG5cbiAgICAvLyBVc2UgYW4gb2JqZWN0IGluc3RlYWQgb2YgYSBmdW5jdGlvbiBmb3IgZnV0dXJlIGV4cGFuZGFiaWxpdHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgLy8gRXhwb3NlZCBmb3IgdW5pdCB0ZXN0aW5nLCBkb24ndCB1c2UgdGhpcyBpbiB5b3VyIGFwcGxpY2F0aW9uLlxuICAgICAgICBfX3NwZWN0cnVtOiBTcGVjdHJ1bSxcbiAgICAgICAgdmVyc2lvbjogVkVSU0lPTixcbiAgICAgICAgY3JlYXRlOiBpbml0aWFsaXplXG4gICAgfTtcbn0pO1xuIiwiY29uc3QgYnJlYWtwb2ludHMgPSB7XG4gIGNhbGN1bGF0ZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuYm9keSlcbiAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKCctLWJyZWFrcG9pbnQnKVxuICAgICAgLnJlcGxhY2UoL1xcXCIvZywgJycpXG4gICAgICAudHJpbSgpXG4gIH0sXG4gIGlzTW9iaWxlOiBmdW5jdGlvbigpIHtcbiAgICBsZXQgYnJlYWtwb2ludCA9IHRoaXMuY2FsY3VsYXRlKClcbiAgICBpZiAoYnJlYWtwb2ludCA9PSAneHNtYWxsJyB8fCBicmVha3BvaW50ID09ICdzbWFsbCcpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJyZWFrcG9pbnRzXG4iLCIvLyBBZGRzIGZsb2F0aW5nIHBvaW50IG51bWJlcnMgd2l0aCB0d2ljZSB0aGUgbm9ybWFsIHByZWNpc2lvbi5cbi8vIFJlZmVyZW5jZTogSi4gUi4gU2hld2NodWssIEFkYXB0aXZlIFByZWNpc2lvbiBGbG9hdGluZy1Qb2ludCBBcml0aG1ldGljIGFuZFxuLy8gRmFzdCBSb2J1c3QgR2VvbWV0cmljIFByZWRpY2F0ZXMsIERpc2NyZXRlICYgQ29tcHV0YXRpb25hbCBHZW9tZXRyeSAxOCgzKVxuLy8gMzA14oCTMzYzICgxOTk3KS5cbi8vIENvZGUgYWRhcHRlZCBmcm9tIEdlb2dyYXBoaWNMaWIgYnkgQ2hhcmxlcyBGLiBGLiBLYXJuZXksXG4vLyBodHRwOi8vZ2VvZ3JhcGhpY2xpYi5zb3VyY2Vmb3JnZS5uZXQvXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IEFkZGVyO1xufVxuXG5mdW5jdGlvbiBBZGRlcigpIHtcbiAgdGhpcy5yZXNldCgpO1xufVxuXG5BZGRlci5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBBZGRlcixcbiAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucyA9IC8vIHJvdW5kZWQgdmFsdWVcbiAgICB0aGlzLnQgPSAwOyAvLyBleGFjdCBlcnJvclxuICB9LFxuICBhZGQ6IGZ1bmN0aW9uKHkpIHtcbiAgICBhZGQodGVtcCwgeSwgdGhpcy50KTtcbiAgICBhZGQodGhpcywgdGVtcC5zLCB0aGlzLnMpO1xuICAgIGlmICh0aGlzLnMpIHRoaXMudCArPSB0ZW1wLnQ7XG4gICAgZWxzZSB0aGlzLnMgPSB0ZW1wLnQ7XG4gIH0sXG4gIHZhbHVlT2Y6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnM7XG4gIH1cbn07XG5cbnZhciB0ZW1wID0gbmV3IEFkZGVyO1xuXG5mdW5jdGlvbiBhZGQoYWRkZXIsIGEsIGIpIHtcbiAgdmFyIHggPSBhZGRlci5zID0gYSArIGIsXG4gICAgICBidiA9IHggLSBhLFxuICAgICAgYXYgPSB4IC0gYnY7XG4gIGFkZGVyLnQgPSAoYSAtIGF2KSArIChiIC0gYnYpO1xufVxuIiwiZXhwb3J0IHZhciBlcHNpbG9uID0gMWUtNjtcbmV4cG9ydCB2YXIgZXBzaWxvbjIgPSAxZS0xMjtcbmV4cG9ydCB2YXIgcGkgPSBNYXRoLlBJO1xuZXhwb3J0IHZhciBoYWxmUGkgPSBwaSAvIDI7XG5leHBvcnQgdmFyIHF1YXJ0ZXJQaSA9IHBpIC8gNDtcbmV4cG9ydCB2YXIgdGF1ID0gcGkgKiAyO1xuXG5leHBvcnQgdmFyIGRlZ3JlZXMgPSAxODAgLyBwaTtcbmV4cG9ydCB2YXIgcmFkaWFucyA9IHBpIC8gMTgwO1xuXG5leHBvcnQgdmFyIGFicyA9IE1hdGguYWJzO1xuZXhwb3J0IHZhciBhdGFuID0gTWF0aC5hdGFuO1xuZXhwb3J0IHZhciBhdGFuMiA9IE1hdGguYXRhbjI7XG5leHBvcnQgdmFyIGNvcyA9IE1hdGguY29zO1xuZXhwb3J0IHZhciBjZWlsID0gTWF0aC5jZWlsO1xuZXhwb3J0IHZhciBleHAgPSBNYXRoLmV4cDtcbmV4cG9ydCB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJmdW5jdGlvbiBzdHJlYW1HZW9tZXRyeShnZW9tZXRyeSwgc3RyZWFtKSB7XG4gIGlmIChnZW9tZXRyeSAmJiBzdHJlYW1HZW9tZXRyeVR5cGUuaGFzT3duUHJvcGVydHkoZ2VvbWV0cnkudHlwZSkpIHtcbiAgICBzdHJlYW1HZW9tZXRyeVR5cGVbZ2VvbWV0cnkudHlwZV0oZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn1cblxudmFyIHN0cmVhbU9iamVjdFR5cGUgPSB7XG4gIEZlYXR1cmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0Lmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9LFxuICBGZWF0dXJlQ29sbGVjdGlvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgZmVhdHVyZXMgPSBvYmplY3QuZmVhdHVyZXMsIGkgPSAtMSwgbiA9IGZlYXR1cmVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtR2VvbWV0cnkoZmVhdHVyZXNbaV0uZ2VvbWV0cnksIHN0cmVhbSk7XG4gIH1cbn07XG5cbnZhciBzdHJlYW1HZW9tZXRyeVR5cGUgPSB7XG4gIFNwaGVyZTogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW0uc3BoZXJlKCk7XG4gIH0sXG4gIFBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIG9iamVjdCA9IG9iamVjdC5jb29yZGluYXRlcztcbiAgICBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIE11bHRpUG9pbnQ6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIG9iamVjdCA9IGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0ucG9pbnQob2JqZWN0WzBdLCBvYmplY3RbMV0sIG9iamVjdFsyXSk7XG4gIH0sXG4gIExpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtTGluZShvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSwgMCk7XG4gIH0sXG4gIE11bHRpTGluZVN0cmluZzogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAwKTtcbiAgfSxcbiAgUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBzdHJlYW1Qb2x5Z29uKG9iamVjdC5jb29yZGluYXRlcywgc3RyZWFtKTtcbiAgfSxcbiAgTXVsdGlQb2x5Z29uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzW2ldLCBzdHJlYW0pO1xuICB9LFxuICBHZW9tZXRyeUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGdlb21ldHJpZXMgPSBvYmplY3QuZ2VvbWV0cmllcywgaSA9IC0xLCBuID0gZ2VvbWV0cmllcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGdlb21ldHJpZXNbaV0sIHN0cmVhbSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXMsIHN0cmVhbSwgY2xvc2VkKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGggLSBjbG9zZWQsIGNvb3JkaW5hdGU7XG4gIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIGNvb3JkaW5hdGUgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KGNvb3JkaW5hdGVbMF0sIGNvb3JkaW5hdGVbMV0sIGNvb3JkaW5hdGVbMl0pO1xuICBzdHJlYW0ubGluZUVuZCgpO1xufVxuXG5mdW5jdGlvbiBzdHJlYW1Qb2x5Z29uKGNvb3JkaW5hdGVzLCBzdHJlYW0pIHtcbiAgdmFyIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgc3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB3aGlsZSAoKytpIDwgbikgc3RyZWFtTGluZShjb29yZGluYXRlc1tpXSwgc3RyZWFtLCAxKTtcbiAgc3RyZWFtLnBvbHlnb25FbmQoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgaWYgKG9iamVjdCAmJiBzdHJlYW1PYmplY3RUeXBlLmhhc093blByb3BlcnR5KG9iamVjdC50eXBlKSkge1xuICAgIHN0cmVhbU9iamVjdFR5cGVbb2JqZWN0LnR5cGVdKG9iamVjdCwgc3RyZWFtKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW1HZW9tZXRyeShvYmplY3QsIHN0cmVhbSk7XG4gIH1cbn1cbiIsImltcG9ydCBhZGRlciBmcm9tIFwiLi9hZGRlclwiO1xuaW1wb3J0IHthdGFuMiwgY29zLCBxdWFydGVyUGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi9ub29wXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG5leHBvcnQgdmFyIGFyZWFSaW5nU3VtID0gYWRkZXIoKTtcblxudmFyIGFyZWFTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAwLFxuICAgIHBoaTAwLFxuICAgIGxhbWJkYTAsXG4gICAgY29zUGhpMCxcbiAgICBzaW5QaGkwO1xuXG5leHBvcnQgdmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVJpbmdTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFSaW5nU3RhcnQ7XG4gICAgYXJlYVN0cmVhbS5saW5lRW5kID0gYXJlYVJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmVhUmluZyA9ICthcmVhUmluZ1N1bTtcbiAgICBhcmVhU3VtLmFkZChhcmVhUmluZyA8IDAgPyB0YXUgKyBhcmVhUmluZyA6IGFyZWFSaW5nKTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IHRoaXMubGluZUVuZCA9IHRoaXMucG9pbnQgPSBub29wO1xuICB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkge1xuICAgIGFyZWFTdW0uYWRkKHRhdSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVJpbmdFbmQoKSB7XG4gIGFyZWFQb2ludChsYW1iZGEwMCwgcGhpMDApO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnRGaXJzdChsYW1iZGEsIHBoaSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvcyhwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpKSwgc2luUGhpMCA9IHNpbihwaGkpO1xufVxuXG5mdW5jdGlvbiBhcmVhUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBwaGkgPSBwaGkgLyAyICsgcXVhcnRlclBpOyAvLyBoYWxmIHRoZSBhbmd1bGFyIGRpc3RhbmNlIGZyb20gc291dGggcG9sZVxuXG4gIC8vIFNwaGVyaWNhbCBleGNlc3MgRSBmb3IgYSBzcGhlcmljYWwgdHJpYW5nbGUgd2l0aCB2ZXJ0aWNlczogc291dGggcG9sZSxcbiAgLy8gcHJldmlvdXMgcG9pbnQsIGN1cnJlbnQgcG9pbnQuICBVc2VzIGEgZm9ybXVsYSBkZXJpdmVkIGZyb20gQ2Fnbm9saeKAmXNcbiAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICB2YXIgZExhbWJkYSA9IGxhbWJkYSAtIGxhbWJkYTAsXG4gICAgICBzZExhbWJkYSA9IGRMYW1iZGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgY29zUGhpID0gY29zKHBoaSksXG4gICAgICBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpLFxuICAgICAgdSA9IGNvc1BoaTAgKiBjb3NQaGkgKyBrICogY29zKGFkTGFtYmRhKSxcbiAgICAgIHYgPSBrICogc2RMYW1iZGEgKiBzaW4oYWRMYW1iZGEpO1xuICBhcmVhUmluZ1N1bS5hZGQoYXRhbjIodiwgdSkpO1xuXG4gIC8vIEFkdmFuY2UgdGhlIHByZXZpb3VzIHBvaW50cy5cbiAgbGFtYmRhMCA9IGxhbWJkYSwgY29zUGhpMCA9IGNvc1BoaSwgc2luUGhpMCA9IHNpblBoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGFyZWFTdW0ucmVzZXQoKTtcbiAgc3RyZWFtKG9iamVjdCwgYXJlYVN0cmVhbSk7XG4gIHJldHVybiBhcmVhU3VtICogMjtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgc2luLCBzcXJ0fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGhlcmljYWwoY2FydGVzaWFuKSB7XG4gIHJldHVybiBbYXRhbjIoY2FydGVzaWFuWzFdLCBjYXJ0ZXNpYW5bMF0pLCBhc2luKGNhcnRlc2lhblsyXSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuKHNwaGVyaWNhbCkge1xuICB2YXIgbGFtYmRhID0gc3BoZXJpY2FsWzBdLCBwaGkgPSBzcGhlcmljYWxbMV0sIGNvc1BoaSA9IGNvcyhwaGkpO1xuICByZXR1cm4gW2Nvc1BoaSAqIGNvcyhsYW1iZGEpLCBjb3NQaGkgKiBzaW4obGFtYmRhKSwgc2luKHBoaSldO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuRG90KGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gKiBiWzBdICsgYVsxXSAqIGJbMV0gKyBhWzJdICogYlsyXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkNyb3NzKGEsIGIpIHtcbiAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gYVxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbkFkZEluUGxhY2UoYSwgYikge1xuICBhWzBdICs9IGJbMF0sIGFbMV0gKz0gYlsxXSwgYVsyXSArPSBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuU2NhbGUodmVjdG9yLCBrKSB7XG4gIHJldHVybiBbdmVjdG9yWzBdICogaywgdmVjdG9yWzFdICogaywgdmVjdG9yWzJdICoga107XG59XG5cbi8vIFRPRE8gcmV0dXJuIGRcbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGQpIHtcbiAgdmFyIGwgPSBzcXJ0KGRbMF0gKiBkWzBdICsgZFsxXSAqIGRbMV0gKyBkWzJdICogZFsyXSk7XG4gIGRbMF0gLz0gbCwgZFsxXSAvPSBsLCBkWzJdIC89IGw7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YXJlYVN0cmVhbSwgYXJlYVJpbmdTdW19IGZyb20gXCIuL2FyZWFcIjtcbmltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Dcm9zcywgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZSwgc3BoZXJpY2FsfSBmcm9tIFwiLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7YWJzLCBkZWdyZWVzLCBlcHNpbG9uLCByYWRpYW5zfSBmcm9tIFwiLi9tYXRoXCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuL3N0cmVhbVwiO1xuXG52YXIgbGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSwgLy8gYm91bmRzXG4gICAgbGFtYmRhMiwgLy8gcHJldmlvdXMgbGFtYmRhLWNvb3JkaW5hdGVcbiAgICBsYW1iZGEwMCwgcGhpMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgcDAsIC8vIHByZXZpb3VzIDNEIHBvaW50XG4gICAgZGVsdGFTdW0gPSBhZGRlcigpLFxuICAgIHJhbmdlcyxcbiAgICByYW5nZTtcblxudmFyIGJvdW5kc1N0cmVhbSA9IHtcbiAgcG9pbnQ6IGJvdW5kc1BvaW50LFxuICBsaW5lU3RhcnQ6IGJvdW5kc0xpbmVTdGFydCxcbiAgbGluZUVuZDogYm91bmRzTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNSaW5nUG9pbnQ7XG4gICAgYm91bmRzU3RyZWFtLmxpbmVTdGFydCA9IGJvdW5kc1JpbmdTdGFydDtcbiAgICBib3VuZHNTdHJlYW0ubGluZUVuZCA9IGJvdW5kc1JpbmdFbmQ7XG4gICAgZGVsdGFTdW0ucmVzZXQoKTtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25TdGFydCgpO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLnBvbHlnb25FbmQoKTtcbiAgICBib3VuZHNTdHJlYW0ucG9pbnQgPSBib3VuZHNQb2ludDtcbiAgICBib3VuZHNTdHJlYW0ubGluZVN0YXJ0ID0gYm91bmRzTGluZVN0YXJ0O1xuICAgIGJvdW5kc1N0cmVhbS5saW5lRW5kID0gYm91bmRzTGluZUVuZDtcbiAgICBpZiAoYXJlYVJpbmdTdW0gPCAwKSBsYW1iZGEwID0gLShsYW1iZGExID0gMTgwKSwgcGhpMCA9IC0ocGhpMSA9IDkwKTtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA+IGVwc2lsb24pIHBoaTEgPSA5MDtcbiAgICBlbHNlIGlmIChkZWx0YVN1bSA8IC1lcHNpbG9uKSBwaGkwID0gLTkwO1xuICAgIHJhbmdlWzBdID0gbGFtYmRhMCwgcmFuZ2VbMV0gPSBsYW1iZGExO1xuICB9XG59O1xuXG5mdW5jdGlvbiBib3VuZHNQb2ludChsYW1iZGEsIHBoaSkge1xuICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIGlmIChwaGkgPCBwaGkwKSBwaGkwID0gcGhpO1xuICBpZiAocGhpID4gcGhpMSkgcGhpMSA9IHBoaTtcbn1cblxuZnVuY3Rpb24gbGluZVBvaW50KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwID0gY2FydGVzaWFuKFtsYW1iZGEgKiByYWRpYW5zLCBwaGkgKiByYWRpYW5zXSk7XG4gIGlmIChwMCkge1xuICAgIHZhciBub3JtYWwgPSBjYXJ0ZXNpYW5Dcm9zcyhwMCwgcCksXG4gICAgICAgIGVxdWF0b3JpYWwgPSBbbm9ybWFsWzFdLCAtbm9ybWFsWzBdLCAwXSxcbiAgICAgICAgaW5mbGVjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKGVxdWF0b3JpYWwsIG5vcm1hbCk7XG4gICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbmZsZWN0aW9uKTtcbiAgICBpbmZsZWN0aW9uID0gc3BoZXJpY2FsKGluZmxlY3Rpb24pO1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTIsXG4gICAgICAgIHNpZ24gPSBkZWx0YSA+IDAgPyAxIDogLTEsXG4gICAgICAgIGxhbWJkYWkgPSBpbmZsZWN0aW9uWzBdICogZGVncmVlcyAqIHNpZ24sXG4gICAgICAgIHBoaWksXG4gICAgICAgIGFudGltZXJpZGlhbiA9IGFicyhkZWx0YSkgPiAxODA7XG4gICAgaWYgKGFudGltZXJpZGlhbiBeIChzaWduICogbGFtYmRhMiA8IGxhbWJkYWkgJiYgbGFtYmRhaSA8IHNpZ24gKiBsYW1iZGEpKSB7XG4gICAgICBwaGlpID0gaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA+IHBoaTEpIHBoaTEgPSBwaGlpO1xuICAgIH0gZWxzZSBpZiAobGFtYmRhaSA9IChsYW1iZGFpICsgMzYwKSAlIDM2MCAtIDE4MCwgYW50aW1lcmlkaWFuIF4gKHNpZ24gKiBsYW1iZGEyIDwgbGFtYmRhaSAmJiBsYW1iZGFpIDwgc2lnbiAqIGxhbWJkYSkpIHtcbiAgICAgIHBoaWkgPSAtaW5mbGVjdGlvblsxXSAqIGRlZ3JlZXM7XG4gICAgICBpZiAocGhpaSA8IHBoaTApIHBoaTAgPSBwaGlpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGhpIDwgcGhpMCkgcGhpMCA9IHBoaTtcbiAgICAgIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICAgIH1cbiAgICBpZiAoYW50aW1lcmlkaWFuKSB7XG4gICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMikge1xuICAgICAgICBpZiAoYW5nbGUobGFtYmRhMCwgbGFtYmRhKSA+IGFuZ2xlKGxhbWJkYTAsIGxhbWJkYTEpKSBsYW1iZGExID0gbGFtYmRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxhbWJkYTEgPj0gbGFtYmRhMCkge1xuICAgICAgICBpZiAobGFtYmRhIDwgbGFtYmRhMCkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgaWYgKGxhbWJkYSA+IGxhbWJkYTEpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGFtYmRhID4gbGFtYmRhMikge1xuICAgICAgICAgIGlmIChhbmdsZShsYW1iZGEwLCBsYW1iZGEpID4gYW5nbGUobGFtYmRhMCwgbGFtYmRhMSkpIGxhbWJkYTEgPSBsYW1iZGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGFuZ2xlKGxhbWJkYSwgbGFtYmRhMSkgPiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSkgbGFtYmRhMCA9IGxhbWJkYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByYW5nZXMucHVzaChyYW5nZSA9IFtsYW1iZGEwID0gbGFtYmRhLCBsYW1iZGExID0gbGFtYmRhXSk7XG4gIH1cbiAgaWYgKHBoaSA8IHBoaTApIHBoaTAgPSBwaGk7XG4gIGlmIChwaGkgPiBwaGkxKSBwaGkxID0gcGhpO1xuICBwMCA9IHAsIGxhbWJkYTIgPSBsYW1iZGE7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc0xpbmVTdGFydCgpIHtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xufVxuXG5mdW5jdGlvbiBib3VuZHNMaW5lRW5kKCkge1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgYm91bmRzU3RyZWFtLnBvaW50ID0gYm91bmRzUG9pbnQ7XG4gIHAwID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGlmIChwMCkge1xuICAgIHZhciBkZWx0YSA9IGxhbWJkYSAtIGxhbWJkYTI7XG4gICAgZGVsdGFTdW0uYWRkKGFicyhkZWx0YSkgPiAxODAgPyBkZWx0YSArIChkZWx0YSA+IDAgPyAzNjAgOiAtMzYwKSA6IGRlbHRhKTtcbiAgfSBlbHNlIHtcbiAgICBsYW1iZGEwMCA9IGxhbWJkYSwgcGhpMDAgPSBwaGk7XG4gIH1cbiAgYXJlYVN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIGxpbmVQb2ludChsYW1iZGEsIHBoaSk7XG59XG5cbmZ1bmN0aW9uIGJvdW5kc1JpbmdTdGFydCgpIHtcbiAgYXJlYVN0cmVhbS5saW5lU3RhcnQoKTtcbn1cblxuZnVuY3Rpb24gYm91bmRzUmluZ0VuZCgpIHtcbiAgYm91bmRzUmluZ1BvaW50KGxhbWJkYTAwLCBwaGkwMCk7XG4gIGFyZWFTdHJlYW0ubGluZUVuZCgpO1xuICBpZiAoYWJzKGRlbHRhU3VtKSA+IGVwc2lsb24pIGxhbWJkYTAgPSAtKGxhbWJkYTEgPSAxODApO1xuICByYW5nZVswXSA9IGxhbWJkYTAsIHJhbmdlWzFdID0gbGFtYmRhMTtcbiAgcDAgPSBudWxsO1xufVxuXG4vLyBGaW5kcyB0aGUgbGVmdC1yaWdodCBkaXN0YW5jZSBiZXR3ZWVuIHR3byBsb25naXR1ZGVzLlxuLy8gVGhpcyBpcyBhbG1vc3QgdGhlIHNhbWUgYXMgKGxhbWJkYTEgLSBsYW1iZGEwICsgMzYwwrApICUgMzYwwrAsIGV4Y2VwdCB0aGF0IHdlIHdhbnRcbi8vIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIMKxMTgwwrAgdG8gYmUgMzYwwrAuXG5mdW5jdGlvbiBhbmdsZShsYW1iZGEwLCBsYW1iZGExKSB7XG4gIHJldHVybiAobGFtYmRhMSAtPSBsYW1iZGEwKSA8IDAgPyBsYW1iZGExICsgMzYwIDogbGFtYmRhMTtcbn1cblxuZnVuY3Rpb24gcmFuZ2VDb21wYXJlKGEsIGIpIHtcbiAgcmV0dXJuIGFbMF0gLSBiWzBdO1xufVxuXG5mdW5jdGlvbiByYW5nZUNvbnRhaW5zKHJhbmdlLCB4KSB7XG4gIHJldHVybiByYW5nZVswXSA8PSByYW5nZVsxXSA/IHJhbmdlWzBdIDw9IHggJiYgeCA8PSByYW5nZVsxXSA6IHggPCByYW5nZVswXSB8fCByYW5nZVsxXSA8IHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGZlYXR1cmUpIHtcbiAgdmFyIGksIG4sIGEsIGIsIG1lcmdlZCwgZGVsdGFNYXgsIGRlbHRhO1xuXG4gIHBoaTEgPSBsYW1iZGExID0gLShsYW1iZGEwID0gcGhpMCA9IEluZmluaXR5KTtcbiAgcmFuZ2VzID0gW107XG4gIHN0cmVhbShmZWF0dXJlLCBib3VuZHNTdHJlYW0pO1xuXG4gIC8vIEZpcnN0LCBzb3J0IHJhbmdlcyBieSB0aGVpciBtaW5pbXVtIGxvbmdpdHVkZXMuXG4gIGlmIChuID0gcmFuZ2VzLmxlbmd0aCkge1xuICAgIHJhbmdlcy5zb3J0KHJhbmdlQ29tcGFyZSk7XG5cbiAgICAvLyBUaGVuLCBtZXJnZSBhbnkgcmFuZ2VzIHRoYXQgb3ZlcmxhcC5cbiAgICBmb3IgKGkgPSAxLCBhID0gcmFuZ2VzWzBdLCBtZXJnZWQgPSBbYV07IGkgPCBuOyArK2kpIHtcbiAgICAgIGIgPSByYW5nZXNbaV07XG4gICAgICBpZiAocmFuZ2VDb250YWlucyhhLCBiWzBdKSB8fCByYW5nZUNvbnRhaW5zKGEsIGJbMV0pKSB7XG4gICAgICAgIGlmIChhbmdsZShhWzBdLCBiWzFdKSA+IGFuZ2xlKGFbMF0sIGFbMV0pKSBhWzFdID0gYlsxXTtcbiAgICAgICAgaWYgKGFuZ2xlKGJbMF0sIGFbMV0pID4gYW5nbGUoYVswXSwgYVsxXSkpIGFbMF0gPSBiWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVyZ2VkLnB1c2goYSA9IGIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbmFsbHksIGZpbmQgdGhlIGxhcmdlc3QgZ2FwIGJldHdlZW4gdGhlIG1lcmdlZCByYW5nZXMuXG4gICAgLy8gVGhlIGZpbmFsIGJvdW5kaW5nIGJveCB3aWxsIGJlIHRoZSBpbnZlcnNlIG9mIHRoaXMgZ2FwLlxuICAgIGZvciAoZGVsdGFNYXggPSAtSW5maW5pdHksIG4gPSBtZXJnZWQubGVuZ3RoIC0gMSwgaSA9IDAsIGEgPSBtZXJnZWRbbl07IGkgPD0gbjsgYSA9IGIsICsraSkge1xuICAgICAgYiA9IG1lcmdlZFtpXTtcbiAgICAgIGlmICgoZGVsdGEgPSBhbmdsZShhWzFdLCBiWzBdKSkgPiBkZWx0YU1heCkgZGVsdGFNYXggPSBkZWx0YSwgbGFtYmRhMCA9IGJbMF0sIGxhbWJkYTEgPSBhWzFdO1xuICAgIH1cbiAgfVxuXG4gIHJhbmdlcyA9IHJhbmdlID0gbnVsbDtcblxuICByZXR1cm4gbGFtYmRhMCA9PT0gSW5maW5pdHkgfHwgcGhpMCA9PT0gSW5maW5pdHlcbiAgICAgID8gW1tOYU4sIE5hTl0sIFtOYU4sIE5hTl1dXG4gICAgICA6IFtbbGFtYmRhMCwgcGhpMF0sIFtsYW1iZGExLCBwaGkxXV07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIGVwc2lsb24sIGVwc2lsb24yLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBXMCwgVzEsXG4gICAgWDAsIFkwLCBaMCxcbiAgICBYMSwgWTEsIFoxLFxuICAgIFgyLCBZMiwgWjIsXG4gICAgbGFtYmRhMDAsIHBoaTAwLCAvLyBmaXJzdCBwb2ludFxuICAgIHgwLCB5MCwgejA7IC8vIHByZXZpb3VzIHBvaW50XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgc3BoZXJlOiBub29wLFxuICBwb2ludDogY2VudHJvaWRQb2ludCxcbiAgbGluZVN0YXJ0OiBjZW50cm9pZExpbmVTdGFydCxcbiAgbGluZUVuZDogY2VudHJvaWRMaW5lRW5kLFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkUmluZ1N0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZFJpbmdFbmQ7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVTdGFydCA9IGNlbnRyb2lkTGluZVN0YXJ0O1xuICAgIGNlbnRyb2lkU3RyZWFtLmxpbmVFbmQgPSBjZW50cm9pZExpbmVFbmQ7XG4gIH1cbn07XG5cbi8vIEFyaXRobWV0aWMgbWVhbiBvZiBDYXJ0ZXNpYW4gdmVjdG9ycy5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKSk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeCwgeSwgeikge1xuICArK1cwO1xuICBYMCArPSAoeCAtIFgwKSAvIFcwO1xuICBZMCArPSAoeSAtIFkwKSAvIFcwO1xuICBaMCArPSAoeiAtIFowKSAvIFcwO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVTdGFydCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZExpbmVQb2ludEZpcnN0O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpO1xuICB4MCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpO1xuICB5MCA9IGNvc1BoaSAqIHNpbihsYW1iZGEpO1xuICB6MCA9IHNpbihwaGkpO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkTGluZVBvaW50O1xuICBjZW50cm9pZFBvaW50Q2FydGVzaWFuKHgwLCB5MCwgejApO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgIHggPSBjb3NQaGkgKiBjb3MobGFtYmRhKSxcbiAgICAgIHkgPSBjb3NQaGkgKiBzaW4obGFtYmRhKSxcbiAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgIHcgPSBhdGFuMihzcXJ0KCh3ID0geTAgKiB6IC0gejAgKiB5KSAqIHcgKyAodyA9IHowICogeCAtIHgwICogeikgKiB3ICsgKHcgPSB4MCAqIHkgLSB5MCAqIHgpICogdyksIHgwICogeCArIHkwICogeSArIHowICogeik7XG4gIFcxICs9IHc7XG4gIFgxICs9IHcgKiAoeDAgKyAoeDAgPSB4KSk7XG4gIFkxICs9IHcgKiAoeTAgKyAoeTAgPSB5KSk7XG4gIFoxICs9IHcgKiAoejAgKyAoejAgPSB6KSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZUVuZCgpIHtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG4vLyBTZWUgSi4gRS4gQnJvY2ssIFRoZSBJbmVydGlhIFRlbnNvciBmb3IgYSBTcGhlcmljYWwgVHJpYW5nbGUsXG4vLyBKLiBBcHBsaWVkIE1lY2hhbmljcyA0MiwgMjM5ICgxOTc1KS5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1N0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50Rmlyc3Q7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ0VuZCgpIHtcbiAgY2VudHJvaWRSaW5nUG9pbnQobGFtYmRhMDAsIHBoaTAwKTtcbiAgY2VudHJvaWRTdHJlYW0ucG9pbnQgPSBjZW50cm9pZFBvaW50O1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZFJpbmdQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYTAwID0gbGFtYmRhLCBwaGkwMCA9IHBoaTtcbiAgbGFtYmRhICo9IHJhZGlhbnMsIHBoaSAqPSByYWRpYW5zO1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUmluZ1BvaW50O1xuICB2YXIgY29zUGhpID0gY29zKHBoaSk7XG4gIHgwID0gY29zUGhpICogY29zKGxhbWJkYSk7XG4gIHkwID0gY29zUGhpICogc2luKGxhbWJkYSk7XG4gIHowID0gc2luKHBoaSk7XG4gIGNlbnRyb2lkUG9pbnRDYXJ0ZXNpYW4oeDAsIHkwLCB6MCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUmluZ1BvaW50KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgeCA9IGNvc1BoaSAqIGNvcyhsYW1iZGEpLFxuICAgICAgeSA9IGNvc1BoaSAqIHNpbihsYW1iZGEpLFxuICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgY3ggPSB5MCAqIHogLSB6MCAqIHksXG4gICAgICBjeSA9IHowICogeCAtIHgwICogeixcbiAgICAgIGN6ID0geDAgKiB5IC0geTAgKiB4LFxuICAgICAgbSA9IHNxcnQoY3ggKiBjeCArIGN5ICogY3kgKyBjeiAqIGN6KSxcbiAgICAgIHcgPSBhc2luKG0pLCAvLyBsaW5lIHdlaWdodCA9IGFuZ2xlXG4gICAgICB2ID0gbSAmJiAtdyAvIG07IC8vIGFyZWEgd2VpZ2h0IG11bHRpcGxpZXJcbiAgWDIgKz0gdiAqIGN4O1xuICBZMiArPSB2ICogY3k7XG4gIFoyICs9IHYgKiBjejtcbiAgVzEgKz0gdztcbiAgWDEgKz0gdyAqICh4MCArICh4MCA9IHgpKTtcbiAgWTEgKz0gdyAqICh5MCArICh5MCA9IHkpKTtcbiAgWjEgKz0gdyAqICh6MCArICh6MCA9IHopKTtcbiAgY2VudHJvaWRQb2ludENhcnRlc2lhbih4MCwgeTAsIHowKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIFcwID0gVzEgPVxuICBYMCA9IFkwID0gWjAgPVxuICBYMSA9IFkxID0gWjEgPVxuICBYMiA9IFkyID0gWjIgPSAwO1xuICBzdHJlYW0ob2JqZWN0LCBjZW50cm9pZFN0cmVhbSk7XG5cbiAgdmFyIHggPSBYMixcbiAgICAgIHkgPSBZMixcbiAgICAgIHogPSBaMixcbiAgICAgIG0gPSB4ICogeCArIHkgKiB5ICsgeiAqIHo7XG5cbiAgLy8gSWYgdGhlIGFyZWEtd2VpZ2h0ZWQgY2NlbnRyb2lkIGlzIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIGxlbmd0aC13ZWlnaHRlZCBjY2VudHJvaWQuXG4gIGlmIChtIDwgZXBzaWxvbjIpIHtcbiAgICB4ID0gWDEsIHkgPSBZMSwgeiA9IFoxO1xuICAgIC8vIElmIHRoZSBmZWF0dXJlIGhhcyB6ZXJvIGxlbmd0aCwgZmFsbCBiYWNrIHRvIGFyaXRobWV0aWMgbWVhbiBvZiBwb2ludCB2ZWN0b3JzLlxuICAgIGlmIChXMSA8IGVwc2lsb24pIHggPSBYMCwgeSA9IFkwLCB6ID0gWjA7XG4gICAgbSA9IHggKiB4ICsgeSAqIHkgKyB6ICogejtcbiAgICAvLyBJZiB0aGUgZmVhdHVyZSBzdGlsbCBoYXMgYW4gdW5kZWZpbmVkIGNjZW50cm9pZCwgdGhlbiByZXR1cm4uXG4gICAgaWYgKG0gPCBlcHNpbG9uMikgcmV0dXJuIFtOYU4sIE5hTl07XG4gIH1cblxuICByZXR1cm4gW2F0YW4yKHksIHgpICogZGVncmVlcywgYXNpbih6IC8gc3FydChtKSkgKiBkZWdyZWVzXTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcblxuICBmdW5jdGlvbiBjb21wb3NlKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGEoeCwgeSksIGIoeFswXSwgeFsxXSk7XG4gIH1cblxuICBpZiAoYS5pbnZlcnQgJiYgYi5pbnZlcnQpIGNvbXBvc2UuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiB4ID0gYi5pbnZlcnQoeCwgeSksIHggJiYgYS5pbnZlcnQoeFswXSwgeFsxXSk7XG4gIH07XG5cbiAgcmV0dXJuIGNvbXBvc2U7XG59XG4iLCJpbXBvcnQgY29tcG9zZSBmcm9tIFwiLi9jb21wb3NlXCI7XG5pbXBvcnQge2FicywgYXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgcGksIHJhZGlhbnMsIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbmZ1bmN0aW9uIHJvdGF0aW9uSWRlbnRpdHkobGFtYmRhLCBwaGkpIHtcbiAgcmV0dXJuIFthYnMobGFtYmRhKSA+IHBpID8gbGFtYmRhICsgTWF0aC5yb3VuZCgtbGFtYmRhIC8gdGF1KSAqIHRhdSA6IGxhbWJkYSwgcGhpXTtcbn1cblxucm90YXRpb25JZGVudGl0eS5pbnZlcnQgPSByb3RhdGlvbklkZW50aXR5O1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgcmV0dXJuIChkZWx0YUxhbWJkYSAlPSB0YXUpID8gKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyBjb21wb3NlKHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSwgcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkpXG4gICAgOiByb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkpXG4gICAgOiAoZGVsdGFQaGkgfHwgZGVsdGFHYW1tYSA/IHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpXG4gICAgOiByb3RhdGlvbklkZW50aXR5KTtcbn1cblxuZnVuY3Rpb24gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHJldHVybiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBsYW1iZGEgKz0gZGVsdGFMYW1iZGEsIFtsYW1iZGEgPiBwaSA/IGxhbWJkYSAtIHRhdSA6IGxhbWJkYSA8IC1waSA/IGxhbWJkYSArIHRhdSA6IGxhbWJkYSwgcGhpXTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpIHtcbiAgdmFyIHJvdGF0aW9uID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKTtcbiAgcm90YXRpb24uaW52ZXJ0ID0gZm9yd2FyZFJvdGF0aW9uTGFtYmRhKC1kZWx0YUxhbWJkYSk7XG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZnVuY3Rpb24gcm90YXRpb25QaGlHYW1tYShkZWx0YVBoaSwgZGVsdGFHYW1tYSkge1xuICB2YXIgY29zRGVsdGFQaGkgPSBjb3MoZGVsdGFQaGkpLFxuICAgICAgc2luRGVsdGFQaGkgPSBzaW4oZGVsdGFQaGkpLFxuICAgICAgY29zRGVsdGFHYW1tYSA9IGNvcyhkZWx0YUdhbW1hKSxcbiAgICAgIHNpbkRlbHRhR2FtbWEgPSBzaW4oZGVsdGFHYW1tYSk7XG5cbiAgZnVuY3Rpb24gcm90YXRpb24obGFtYmRhLCBwaGkpIHtcbiAgICB2YXIgY29zUGhpID0gY29zKHBoaSksXG4gICAgICAgIHggPSBjb3MobGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeSA9IHNpbihsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB6ID0gc2luKHBoaSksXG4gICAgICAgIGsgPSB6ICogY29zRGVsdGFQaGkgKyB4ICogc2luRGVsdGFQaGk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hIC0gayAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSAtIHogKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YUdhbW1hICsgeSAqIHNpbkRlbHRhR2FtbWEpXG4gICAgXTtcbiAgfVxuXG4gIHJvdGF0aW9uLmludmVydCA9IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhR2FtbWEgLSB5ICogc2luRGVsdGFHYW1tYTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSAqIGNvc0RlbHRhR2FtbWEgKyB6ICogc2luRGVsdGFHYW1tYSwgeCAqIGNvc0RlbHRhUGhpICsgayAqIHNpbkRlbHRhUGhpKSxcbiAgICAgIGFzaW4oayAqIGNvc0RlbHRhUGhpIC0geCAqIHNpbkRlbHRhUGhpKVxuICAgIF07XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0aW9uO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyb3RhdGUpIHtcbiAgcm90YXRlID0gcm90YXRlUmFkaWFucyhyb3RhdGVbMF0gKiByYWRpYW5zLCByb3RhdGVbMV0gKiByYWRpYW5zLCByb3RhdGUubGVuZ3RoID4gMiA/IHJvdGF0ZVsyXSAqIHJhZGlhbnMgOiAwKTtcblxuICBmdW5jdGlvbiBmb3J3YXJkKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfVxuXG4gIGZvcndhcmQuaW52ZXJ0ID0gZnVuY3Rpb24oY29vcmRpbmF0ZXMpIHtcbiAgICBjb29yZGluYXRlcyA9IHJvdGF0ZS5pbnZlcnQoY29vcmRpbmF0ZXNbMF0gKiByYWRpYW5zLCBjb29yZGluYXRlc1sxXSAqIHJhZGlhbnMpO1xuICAgIHJldHVybiBjb29yZGluYXRlc1swXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlc1sxXSAqPSBkZWdyZWVzLCBjb29yZGluYXRlcztcbiAgfTtcblxuICByZXR1cm4gZm9yd2FyZDtcbn1cbiIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlLCBzcGhlcmljYWx9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5pbXBvcnQge2Fjb3MsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4vcm90YXRpb25cIjtcblxuLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIHQwLCB0MSkge1xuICBpZiAoIWRlbHRhKSByZXR1cm47XG4gIHZhciBjb3NSYWRpdXMgPSBjb3MocmFkaXVzKSxcbiAgICAgIHNpblJhZGl1cyA9IHNpbihyYWRpdXMpLFxuICAgICAgc3RlcCA9IGRpcmVjdGlvbiAqIGRlbHRhO1xuICBpZiAodDAgPT0gbnVsbCkge1xuICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1O1xuICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gIH0gZWxzZSB7XG4gICAgdDAgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MCk7XG4gICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgaWYgKGRpcmVjdGlvbiA+IDAgPyB0MCA8IHQxIDogdDAgPiB0MSkgdDAgKz0gZGlyZWN0aW9uICogdGF1O1xuICB9XG4gIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgIHBvaW50ID0gc3BoZXJpY2FsKFtjb3NSYWRpdXMsIC1zaW5SYWRpdXMgKiBjb3ModCksIC1zaW5SYWRpdXMgKiBzaW4odCldKTtcbiAgICBzdHJlYW0ucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgfVxufVxuXG4vLyBSZXR1cm5zIHRoZSBzaWduZWQgYW5nbGUgb2YgYSBjYXJ0ZXNpYW4gcG9pbnQgcmVsYXRpdmUgdG8gW2Nvc1JhZGl1cywgMCwgMF0uXG5mdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICBwb2ludCA9IGNhcnRlc2lhbihwb2ludCksIHBvaW50WzBdIC09IGNvc1JhZGl1cztcbiAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShwb2ludCk7XG4gIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gIHJldHVybiAoKC1wb2ludFsyXSA8IDAgPyAtcmFkaXVzIDogcmFkaXVzKSArIHRhdSAtIGVwc2lsb24pICUgdGF1O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNlbnRlciA9IGNvbnN0YW50KFswLCAwXSksXG4gICAgICByYWRpdXMgPSBjb25zdGFudCg5MCksXG4gICAgICBwcmVjaXNpb24gPSBjb25zdGFudCg2KSxcbiAgICAgIHJpbmcsXG4gICAgICByb3RhdGUsXG4gICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgIHhbMF0gKj0gZGVncmVlcywgeFsxXSAqPSBkZWdyZWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjID0gY2VudGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgcmluZyA9IFtdO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICBjID0ge3R5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddfTtcbiAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gIH07XG5cbiAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHJhZGl1cztcbiAgfTtcblxuICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICB9O1xuXG4gIHJldHVybiBjaXJjbGU7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHldKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuL21hdGhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24gJiYgYWJzKGFbMV0gLSBiWzFdKSA8IGVwc2lsb247XG59XG4iLCJpbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbFwiO1xuXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gIHRoaXMueCA9IHBvaW50O1xuICB0aGlzLnogPSBwb2ludHM7XG4gIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICB0aGlzLmUgPSBlbnRyeTsgLy8gaXMgYW4gZW50cnk/XG4gIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXG4gIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xufVxuXG4vLyBBIGdlbmVyYWxpemVkIHBvbHlnb24gY2xpcHBpbmcgYWxnb3JpdGhtOiBnaXZlbiBhIHBvbHlnb24gdGhhdCBoYXMgYmVlbiBjdXRcbi8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbi8vIGFsb25nIHRoZSBjbGlwIGVkZ2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pIHtcbiAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgIGNsaXAgPSBbXSxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgIC8vIElmIHRoZSBmaXJzdCBhbmQgbGFzdCBwb2ludHMgb2YgYSBzZWdtZW50IGFyZSBjb2luY2lkZW50LCB0aGVuIHRyZWF0IGFzIGFcbiAgICAvLyBjbG9zZWQgcmluZy4gVE9ETyBpZiBhbGwgcmluZ3MgYXJlIGNsb3NlZCwgdGhlbiB0aGUgd2luZGluZyBvcmRlciBvZiB0aGVcbiAgICAvLyBleHRlcmlvciByaW5nIHNob3VsZCBiZSBjaGVja2VkLlxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHN0cmVhbS5wb2ludCgocDAgPSBzZWdtZW50W2ldKVswXSwgcDBbMV0pO1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDAsIHNlZ21lbnQsIG51bGwsIHRydWUpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMCwgbnVsbCwgeCwgZmFsc2UpKTtcbiAgICBzdWJqZWN0LnB1c2goeCA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIHNlZ21lbnQsIG51bGwsIGZhbHNlKSk7XG4gICAgY2xpcC5wdXNoKHgubyA9IG5ldyBJbnRlcnNlY3Rpb24ocDEsIG51bGwsIHgsIHRydWUpKTtcbiAgfSk7XG5cbiAgaWYgKCFzdWJqZWN0Lmxlbmd0aCkgcmV0dXJuO1xuXG4gIGNsaXAuc29ydChjb21wYXJlSW50ZXJzZWN0aW9uKTtcbiAgbGluayhzdWJqZWN0KTtcbiAgbGluayhjbGlwKTtcblxuICBmb3IgKGkgPSAwLCBuID0gY2xpcC5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICBjbGlwW2ldLmUgPSBzdGFydEluc2lkZSA9ICFzdGFydEluc2lkZTtcbiAgfVxuXG4gIHZhciBzdGFydCA9IHN1YmplY3RbMF0sXG4gICAgICBwb2ludHMsXG4gICAgICBwb2ludDtcblxuICB3aGlsZSAoMSkge1xuICAgIC8vIEZpbmQgZmlyc3QgdW52aXNpdGVkIGludGVyc2VjdGlvbi5cbiAgICB2YXIgY3VycmVudCA9IHN0YXJ0LFxuICAgICAgICBpc1N1YmplY3QgPSB0cnVlO1xuICAgIHdoaWxlIChjdXJyZW50LnYpIGlmICgoY3VycmVudCA9IGN1cnJlbnQubikgPT09IHN0YXJ0KSByZXR1cm47XG4gICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICBkbyB7XG4gICAgICBjdXJyZW50LnYgPSBjdXJyZW50Lm8udiA9IHRydWU7XG4gICAgICBpZiAoY3VycmVudC5lKSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBuID0gcG9pbnRzLmxlbmd0aDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwb2ludCA9IHBvaW50c1tpXSlbMF0sIHBvaW50WzFdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShjdXJyZW50LngsIGN1cnJlbnQubi54LCAxLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm47XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNTdWJqZWN0KSB7XG4gICAgICAgICAgcG9pbnRzID0gY3VycmVudC5wLno7XG4gICAgICAgICAgZm9yIChpID0gcG9pbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5wLngsIC0xLCBzdHJlYW0pO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnA7XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5vO1xuICAgICAgcG9pbnRzID0gY3VycmVudC56O1xuICAgICAgaXNTdWJqZWN0ID0gIWlzU3ViamVjdDtcbiAgICB9IHdoaWxlICghY3VycmVudC52KTtcbiAgICBzdHJlYW0ubGluZUVuZCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxpbmsoYXJyYXkpIHtcbiAgaWYgKCEobiA9IGFycmF5Lmxlbmd0aCkpIHJldHVybjtcbiAgdmFyIG4sXG4gICAgICBpID0gMCxcbiAgICAgIGEgPSBhcnJheVswXSxcbiAgICAgIGI7XG4gIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgYS5uID0gYiA9IGFycmF5W2ldO1xuICAgIGIucCA9IGE7XG4gICAgYSA9IGI7XG4gIH1cbiAgYS5uID0gYiA9IGFycmF5WzBdO1xuICBiLnAgPSBhO1xufVxuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuL2FkZGVyXCI7XG5pbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2V9IGZyb20gXCIuL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBxdWFydGVyUGksIHNpbiwgdGF1fSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBzdW0gPSBhZGRlcigpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gcG9pbnRbMF0sXG4gICAgICBwaGkgPSBwb2ludFsxXSxcbiAgICAgIHNpblBoaSA9IHNpbihwaGkpLFxuICAgICAgbm9ybWFsID0gW3NpbihsYW1iZGEpLCAtY29zKGxhbWJkYSksIDBdLFxuICAgICAgYW5nbGUgPSAwLFxuICAgICAgd2luZGluZyA9IDA7XG5cbiAgc3VtLnJlc2V0KCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IHBvaW50MFswXSxcbiAgICAgICAgcGhpMCA9IHBvaW50MFsxXSAvIDIgKyBxdWFydGVyUGksXG4gICAgICAgIHNpblBoaTAgPSBzaW4ocGhpMCksXG4gICAgICAgIGNvc1BoaTAgPSBjb3MocGhpMCk7XG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IG07ICsraiwgbGFtYmRhMCA9IGxhbWJkYTEsIHNpblBoaTAgPSBzaW5QaGkxLCBjb3NQaGkwID0gY29zUGhpMSwgcG9pbnQwID0gcG9pbnQxKSB7XG4gICAgICB2YXIgcG9pbnQxID0gcmluZ1tqXSxcbiAgICAgICAgICBsYW1iZGExID0gcG9pbnQxWzBdLFxuICAgICAgICAgIHBoaTEgPSBwb2ludDFbMV0gLyAyICsgcXVhcnRlclBpLFxuICAgICAgICAgIHNpblBoaTEgPSBzaW4ocGhpMSksXG4gICAgICAgICAgY29zUGhpMSA9IGNvcyhwaGkxKSxcbiAgICAgICAgICBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICAgIHNpZ24gPSBkZWx0YSA+PSAwID8gMSA6IC0xLFxuICAgICAgICAgIGFic0RlbHRhID0gc2lnbiAqIGRlbHRhLFxuICAgICAgICAgIGFudGltZXJpZGlhbiA9IGFic0RlbHRhID4gcGksXG4gICAgICAgICAgayA9IHNpblBoaTAgKiBzaW5QaGkxO1xuXG4gICAgICBzdW0uYWRkKGF0YW4yKGsgKiBzaWduICogc2luKGFic0RlbHRhKSwgY29zUGhpMCAqIGNvc1BoaTEgKyBrICogY29zKGFic0RlbHRhKSkpO1xuICAgICAgYW5nbGUgKz0gYW50aW1lcmlkaWFuID8gZGVsdGEgKyBzaWduICogdGF1IDogZGVsdGE7XG5cbiAgICAgIC8vIEFyZSB0aGUgbG9uZ2l0dWRlcyBlaXRoZXIgc2lkZSBvZiB0aGUgcG9pbnTigJlzIG1lcmlkaWFuIChsYW1iZGEpLFxuICAgICAgLy8gYW5kIGFyZSB0aGUgbGF0aXR1ZGVzIHNtYWxsZXIgdGhhbiB0aGUgcGFyYWxsZWwgKHBoaSk/XG4gICAgICBpZiAoYW50aW1lcmlkaWFuIF4gbGFtYmRhMCA+PSBsYW1iZGEgXiBsYW1iZGExID49IGxhbWJkYSkge1xuICAgICAgICB2YXIgYXJjID0gY2FydGVzaWFuQ3Jvc3MoY2FydGVzaWFuKHBvaW50MCksIGNhcnRlc2lhbihwb2ludDEpKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShhcmMpO1xuICAgICAgICB2YXIgaW50ZXJzZWN0aW9uID0gY2FydGVzaWFuQ3Jvc3Mobm9ybWFsLCBhcmMpO1xuICAgICAgICBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlKGludGVyc2VjdGlvbik7XG4gICAgICAgIHZhciBwaGlBcmMgPSAoYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IC0xIDogMSkgKiBhc2luKGludGVyc2VjdGlvblsyXSk7XG4gICAgICAgIGlmIChwaGkgPiBwaGlBcmMgfHwgcGhpID09PSBwaGlBcmMgJiYgKGFyY1swXSB8fCBhcmNbMV0pKSB7XG4gICAgICAgICAgd2luZGluZyArPSBhbnRpbWVyaWRpYW4gXiBkZWx0YSA+PSAwID8gMSA6IC0xO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRmlyc3QsIGRldGVybWluZSB3aGV0aGVyIHRoZSBTb3V0aCBwb2xlIGlzIGluc2lkZSBvciBvdXRzaWRlOlxuICAvL1xuICAvLyBJdCBpcyBpbnNpZGUgaWY6XG4gIC8vICogdGhlIHBvbHlnb24gd2luZHMgYXJvdW5kIGl0IGluIGEgY2xvY2t3aXNlIGRpcmVjdGlvbi5cbiAgLy8gKiB0aGUgcG9seWdvbiBkb2VzIG5vdCAoY3VtdWxhdGl2ZWx5KSB3aW5kIGFyb3VuZCBpdCwgYnV0IGhhcyBhIG5lZ2F0aXZlXG4gIC8vICAgKGNvdW50ZXItY2xvY2t3aXNlKSBhcmVhLlxuICAvL1xuICAvLyBTZWNvbmQsIGNvdW50IHRoZSAoc2lnbmVkKSBudW1iZXIgb2YgdGltZXMgYSBzZWdtZW50IGNyb3NzZXMgYSBsYW1iZGFcbiAgLy8gZnJvbSB0aGUgcG9pbnQgdG8gdGhlIFNvdXRoIHBvbGUuICBJZiBpdCBpcyB6ZXJvLCB0aGVuIHRoZSBwb2ludCBpcyB0aGVcbiAgLy8gc2FtZSBzaWRlIGFzIHRoZSBTb3V0aCBwb2xlLlxuXG4gIHJldHVybiAoYW5nbGUgPCAtZXBzaWxvbiB8fCBhbmdsZSA8IGVwc2lsb24gJiYgc3VtIDwgLWVwc2lsb24pIF4gKHdpbmRpbmcgJiAxKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPCBiID8gLTEgOiBhID4gYiA/IDEgOiBhID49IGIgPyAwIDogTmFOO1xufVxuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcbmltcG9ydCBiaXNlY3RvciBmcm9tIFwiLi9iaXNlY3RvclwiO1xuXG52YXIgYXNjZW5kaW5nQmlzZWN0ID0gYmlzZWN0b3IoYXNjZW5kaW5nKTtcbmV4cG9ydCB2YXIgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgdmFyIGJpc2VjdExlZnQgPSBhc2NlbmRpbmdCaXNlY3QubGVmdDtcbmV4cG9ydCBkZWZhdWx0IGJpc2VjdFJpZ2h0O1xuIiwiaW1wb3J0IGFzY2VuZGluZyBmcm9tIFwiLi9hc2NlbmRpbmdcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoY29tcGFyZS5sZW5ndGggPT09IDEpIGNvbXBhcmUgPSBhc2NlbmRpbmdDb21wYXJhdG9yKGNvbXBhcmUpO1xuICByZXR1cm4ge1xuICAgIGxlZnQ6IGZ1bmN0aW9uKGEsIHgsIGxvLCBoaSkge1xuICAgICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICAgIGlmIChoaSA9PSBudWxsKSBoaSA9IGEubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPCAwKSBsbyA9IG1pZCArIDE7XG4gICAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gbG87XG4gICAgfSxcbiAgICByaWdodDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA+IDApIGhpID0gbWlkO1xuICAgICAgICBlbHNlIGxvID0gbWlkICsgMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gZnVuY3Rpb24oZCwgeCkge1xuICAgIHJldHVybiBhc2NlbmRpbmcoZihkKSwgeCk7XG4gIH07XG59XG4iLCJpbXBvcnQge3BhaXJ9IGZyb20gXCIuL3BhaXJzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlczAsIHZhbHVlczEsIHJlZHVjZSkge1xuICB2YXIgbjAgPSB2YWx1ZXMwLmxlbmd0aCxcbiAgICAgIG4xID0gdmFsdWVzMS5sZW5ndGgsXG4gICAgICB2YWx1ZXMgPSBuZXcgQXJyYXkobjAgKiBuMSksXG4gICAgICBpMCxcbiAgICAgIGkxLFxuICAgICAgaSxcbiAgICAgIHZhbHVlMDtcblxuICBpZiAocmVkdWNlID09IG51bGwpIHJlZHVjZSA9IHBhaXI7XG5cbiAgZm9yIChpMCA9IGkgPSAwOyBpMCA8IG4wOyArK2kwKSB7XG4gICAgZm9yICh2YWx1ZTAgPSB2YWx1ZXMwW2kwXSwgaTEgPSAwOyBpMSA8IG4xOyArK2kxLCArK2kpIHtcbiAgICAgIHZhbHVlc1tpXSA9IHJlZHVjZSh2YWx1ZTAsIHZhbHVlczFbaTFdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuIiwidmFyIGFycmF5ID0gQXJyYXkucHJvdG90eXBlO1xuXG5leHBvcnQgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG5leHBvcnQgdmFyIG1hcCA9IGFycmF5Lm1hcDtcbiIsInZhciBlMTAgPSBNYXRoLnNxcnQoNTApLFxuICAgIGU1ID0gTWF0aC5zcXJ0KDEwKSxcbiAgICBlMiA9IE1hdGguc3FydCgyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciByZXZlcnNlLFxuICAgICAgaSA9IC0xLFxuICAgICAgbixcbiAgICAgIHRpY2tzLFxuICAgICAgc3RlcDtcblxuICBzdG9wID0gK3N0b3AsIHN0YXJ0ID0gK3N0YXJ0LCBjb3VudCA9ICtjb3VudDtcbiAgaWYgKHN0YXJ0ID09PSBzdG9wICYmIGNvdW50ID4gMCkgcmV0dXJuIFtzdGFydF07XG4gIGlmIChyZXZlcnNlID0gc3RvcCA8IHN0YXJ0KSBuID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IG47XG4gIGlmICgoc3RlcCA9IHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSkgPT09IDAgfHwgIWlzRmluaXRlKHN0ZXApKSByZXR1cm4gW107XG5cbiAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgLyBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wIC8gc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgKiBzdGVwO1xuICB9IGVsc2Uge1xuICAgIHN0YXJ0ID0gTWF0aC5mbG9vcihzdGFydCAqIHN0ZXApO1xuICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAqIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RhcnQgLSBzdG9wICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCAtIGkpIC8gc3RlcDtcbiAgfVxuXG4gIGlmIChyZXZlcnNlKSB0aWNrcy5yZXZlcnNlKCk7XG5cbiAgcmV0dXJuIHRpY2tzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAgPSAoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHBvd2VyID0gTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwKSAvIE1hdGguTE4xMCksXG4gICAgICBlcnJvciA9IHN0ZXAgLyBNYXRoLnBvdygxMCwgcG93ZXIpO1xuICByZXR1cm4gcG93ZXIgPj0gMFxuICAgICAgPyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKSAqIE1hdGgucG93KDEwLCBwb3dlcilcbiAgICAgIDogLU1hdGgucG93KDEwLCAtcG93ZXIpIC8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrU3RlcChzdGFydCwgc3RvcCwgY291bnQpIHtcbiAgdmFyIHN0ZXAwID0gTWF0aC5hYnMoc3RvcCAtIHN0YXJ0KSAvIE1hdGgubWF4KDAsIGNvdW50KSxcbiAgICAgIHN0ZXAxID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcDApIC8gTWF0aC5MTjEwKSksXG4gICAgICBlcnJvciA9IHN0ZXAwIC8gc3RlcDE7XG4gIGlmIChlcnJvciA+PSBlMTApIHN0ZXAxICo9IDEwO1xuICBlbHNlIGlmIChlcnJvciA+PSBlNSkgc3RlcDEgKj0gNTtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTIpIHN0ZXAxICo9IDI7XG4gIHJldHVybiBzdG9wIDwgc3RhcnQgPyAtc3RlcDEgOiBzdGVwMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nKHZhbHVlcy5sZW5ndGgpIC8gTWF0aC5MTjIpICsgMTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGFycmF5cykge1xuICB2YXIgbiA9IGFycmF5cy5sZW5ndGgsXG4gICAgICBtLFxuICAgICAgaSA9IC0xLFxuICAgICAgaiA9IDAsXG4gICAgICBtZXJnZWQsXG4gICAgICBhcnJheTtcblxuICB3aGlsZSAoKytpIDwgbikgaiArPSBhcnJheXNbaV0ubGVuZ3RoO1xuICBtZXJnZWQgPSBuZXcgQXJyYXkoaik7XG5cbiAgd2hpbGUgKC0tbiA+PSAwKSB7XG4gICAgYXJyYXkgPSBhcnJheXNbbl07XG4gICAgbSA9IGFycmF5Lmxlbmd0aDtcbiAgICB3aGlsZSAoLS1tID49IDApIHtcbiAgICAgIG1lcmdlZFstLWpdID0gYXJyYXlbbV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZDtcbn1cbiIsImltcG9ydCB0cmFuc3Bvc2UgZnJvbSBcIi4vdHJhbnNwb3NlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdHJhbnNwb3NlKGFyZ3VtZW50cyk7XG59XG4iLCJpbXBvcnQgY2xpcEJ1ZmZlciBmcm9tIFwiLi9idWZmZXJcIjtcbmltcG9ydCBjbGlwUmVqb2luIGZyb20gXCIuL3Jlam9pblwiO1xuaW1wb3J0IHtlcHNpbG9uLCBoYWxmUGl9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgcG9seWdvbkNvbnRhaW5zIGZyb20gXCIuLi9wb2x5Z29uQ29udGFpbnNcIjtcbmltcG9ydCB7bWVyZ2V9IGZyb20gXCJkMy1hcnJheVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2ludFZpc2libGUsIGNsaXBMaW5lLCBpbnRlcnBvbGF0ZSwgc3RhcnQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHNpbmspIHtcbiAgICB2YXIgbGluZSA9IGNsaXBMaW5lKHNpbmspLFxuICAgICAgICByaW5nQnVmZmVyID0gY2xpcEJ1ZmZlcigpLFxuICAgICAgICByaW5nU2luayA9IGNsaXBMaW5lKHJpbmdCdWZmZXIpLFxuICAgICAgICBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlLFxuICAgICAgICBwb2x5Z29uLFxuICAgICAgICBzZWdtZW50cyxcbiAgICAgICAgcmluZztcblxuICAgIHZhciBjbGlwID0ge1xuICAgICAgcG9pbnQ6IHBvaW50LFxuICAgICAgbGluZVN0YXJ0OiBsaW5lU3RhcnQsXG4gICAgICBsaW5lRW5kOiBsaW5lRW5kLFxuICAgICAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50UmluZztcbiAgICAgICAgY2xpcC5saW5lU3RhcnQgPSByaW5nU3RhcnQ7XG4gICAgICAgIGNsaXAubGluZUVuZCA9IHJpbmdFbmQ7XG4gICAgICAgIHNlZ21lbnRzID0gW107XG4gICAgICAgIHBvbHlnb24gPSBbXTtcbiAgICAgIH0sXG4gICAgICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgICBjbGlwLmxpbmVTdGFydCA9IGxpbmVTdGFydDtcbiAgICAgICAgY2xpcC5saW5lRW5kID0gbGluZUVuZDtcbiAgICAgICAgc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cyk7XG4gICAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25Db250YWlucyhwb2x5Z29uLCBzdGFydCk7XG4gICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgY2xpcFJlam9pbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzaW5rKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdGFydEluc2lkZSkge1xuICAgICAgICAgIGlmICghcG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvblN0YXJ0KCksIHBvbHlnb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICBzaW5rLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uRW5kKCksIHBvbHlnb25TdGFydGVkID0gZmFsc2U7XG4gICAgICAgIHNlZ21lbnRzID0gcG9seWdvbiA9IG51bGw7XG4gICAgICB9LFxuICAgICAgc3BoZXJlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgc2luay5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgaW50ZXJwb2xhdGUobnVsbCwgbnVsbCwgMSwgc2luayk7XG4gICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICBzaW5rLnBvbHlnb25FbmQoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGlmIChwb2ludFZpc2libGUobGFtYmRhLCBwaGkpKSBzaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludExpbmUobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmUucG9pbnQobGFtYmRhLCBwaGkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVTdGFydCgpIHtcbiAgICAgIGNsaXAucG9pbnQgPSBwb2ludExpbmU7XG4gICAgICBsaW5lLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVFbmQoKSB7XG4gICAgICBjbGlwLnBvaW50ID0gcG9pbnQ7XG4gICAgICBsaW5lLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwb2ludFJpbmcobGFtYmRhLCBwaGkpIHtcbiAgICAgIHJpbmcucHVzaChbbGFtYmRhLCBwaGldKTtcbiAgICAgIHJpbmdTaW5rLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nU3RhcnQoKSB7XG4gICAgICByaW5nU2luay5saW5lU3RhcnQoKTtcbiAgICAgIHJpbmcgPSBbXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nRW5kKCkge1xuICAgICAgcG9pbnRSaW5nKHJpbmdbMF1bMF0sIHJpbmdbMF1bMV0pO1xuICAgICAgcmluZ1NpbmsubGluZUVuZCgpO1xuXG4gICAgICB2YXIgY2xlYW4gPSByaW5nU2luay5jbGVhbigpLFxuICAgICAgICAgIHJpbmdTZWdtZW50cyA9IHJpbmdCdWZmZXIucmVzdWx0KCksXG4gICAgICAgICAgaSwgbiA9IHJpbmdTZWdtZW50cy5sZW5ndGgsIG0sXG4gICAgICAgICAgc2VnbWVudCxcbiAgICAgICAgICBwb2ludDtcblxuICAgICAgcmluZy5wb3AoKTtcbiAgICAgIHBvbHlnb24ucHVzaChyaW5nKTtcbiAgICAgIHJpbmcgPSBudWxsO1xuXG4gICAgICBpZiAoIW4pIHJldHVybjtcblxuICAgICAgLy8gTm8gaW50ZXJzZWN0aW9ucy5cbiAgICAgIGlmIChjbGVhbiAmIDEpIHtcbiAgICAgICAgc2VnbWVudCA9IHJpbmdTZWdtZW50c1swXTtcbiAgICAgICAgaWYgKChtID0gc2VnbWVudC5sZW5ndGggLSAxKSA+IDApIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbTsgKytpKSBzaW5rLnBvaW50KChwb2ludCA9IHNlZ21lbnRbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgICAgc2luay5saW5lRW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZWpvaW4gY29ubmVjdGVkIHNlZ21lbnRzLlxuICAgICAgLy8gVE9ETyByZXVzZSByaW5nQnVmZmVyLnJlam9pbigpP1xuICAgICAgaWYgKG4gPiAxICYmIGNsZWFuICYgMikgcmluZ1NlZ21lbnRzLnB1c2gocmluZ1NlZ21lbnRzLnBvcCgpLmNvbmNhdChyaW5nU2VnbWVudHMuc2hpZnQoKSkpO1xuXG4gICAgICBzZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5maWx0ZXIodmFsaWRTZWdtZW50KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkU2VnbWVudChzZWdtZW50KSB7XG4gIHJldHVybiBzZWdtZW50Lmxlbmd0aCA+IDE7XG59XG5cbi8vIEludGVyc2VjdGlvbnMgYXJlIHNvcnRlZCBhbG9uZyB0aGUgY2xpcCBlZGdlLiBGb3IgYm90aCBhbnRpbWVyaWRpYW4gY3V0dGluZ1xuLy8gYW5kIGNpcmNsZSBjbGlwcGluZywgdGhlIHNhbWUgY29tcGFyaXNvbiBpcyB1c2VkLlxuZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gIHJldHVybiAoKGEgPSBhLngpWzBdIDwgMCA/IGFbMV0gLSBoYWxmUGkgLSBlcHNpbG9uIDogaGFsZlBpIC0gYVsxXSlcbiAgICAgICAtICgoYiA9IGIueClbMF0gPCAwID8gYlsxXSAtIGhhbGZQaSAtIGVwc2lsb24gOiBoYWxmUGkgLSBiWzFdKTtcbn1cbiIsImltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQge2FicywgYXRhbiwgY29zLCBlcHNpbG9uLCBoYWxmUGksIHBpLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsaXAoXG4gIGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSxcbiAgY2xpcEFudGltZXJpZGlhbkxpbmUsXG4gIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZSxcbiAgWy1waSwgLWhhbGZQaV1cbik7XG5cbi8vIFRha2VzIGEgbGluZSBhbmQgY3V0cyBpbnRvIHZpc2libGUgc2VnbWVudHMuIFJldHVybiB2YWx1ZXM6IDAgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vIGludGVyc2VjdGlvbnM7IDIgLSB0aGVyZSB3ZXJlXG4vLyBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzIHNob3VsZCBiZSByZWpvaW5lZC5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5MaW5lKHN0cmVhbSkge1xuICB2YXIgbGFtYmRhMCA9IE5hTixcbiAgICAgIHBoaTAgPSBOYU4sXG4gICAgICBzaWduMCA9IE5hTixcbiAgICAgIGNsZWFuOyAvLyBubyBpbnRlcnNlY3Rpb25zXG5cbiAgcmV0dXJuIHtcbiAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgY2xlYW4gPSAxO1xuICAgIH0sXG4gICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYTEsIHBoaTEpIHtcbiAgICAgIHZhciBzaWduMSA9IGxhbWJkYTEgPiAwID8gcGkgOiAtcGksXG4gICAgICAgICAgZGVsdGEgPSBhYnMobGFtYmRhMSAtIGxhbWJkYTApO1xuICAgICAgaWYgKGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24pIHsgLy8gbGluZSBjcm9zc2VzIGEgcG9sZVxuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMCwgcGhpMCA9IChwaGkwICsgcGhpMSkgLyAyID4gMCA/IGhhbGZQaSA6IC1oYWxmUGkpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChsYW1iZGExLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfSBlbHNlIGlmIChzaWduMCAhPT0gc2lnbjEgJiYgZGVsdGEgPj0gcGkpIHsgLy8gbGluZSBjcm9zc2VzIGFudGltZXJpZGlhblxuICAgICAgICBpZiAoYWJzKGxhbWJkYTAgLSBzaWduMCkgPCBlcHNpbG9uKSBsYW1iZGEwIC09IHNpZ24wICogZXBzaWxvbjsgLy8gaGFuZGxlIGRlZ2VuZXJhY2llc1xuICAgICAgICBpZiAoYWJzKGxhbWJkYTEgLSBzaWduMSkgPCBlcHNpbG9uKSBsYW1iZGExIC09IHNpZ24xICogZXBzaWxvbjtcbiAgICAgICAgcGhpMCA9IGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMCwgcGhpMCk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24xLCBwaGkwKTtcbiAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgfVxuICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAgPSBsYW1iZGExLCBwaGkwID0gcGhpMSk7XG4gICAgICBzaWduMCA9IHNpZ24xO1xuICAgIH0sXG4gICAgbGluZUVuZDogZnVuY3Rpb24oKSB7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgbGFtYmRhMCA9IHBoaTAgPSBOYU47XG4gICAgfSxcbiAgICBjbGVhbjogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gMiAtIGNsZWFuOyAvLyBpZiBpbnRlcnNlY3Rpb25zLCByZWpvaW4gZmlyc3QgYW5kIGxhc3Qgc2VnbWVudHNcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QobGFtYmRhMCwgcGhpMCwgbGFtYmRhMSwgcGhpMSkge1xuICB2YXIgY29zUGhpMCxcbiAgICAgIGNvc1BoaTEsXG4gICAgICBzaW5MYW1iZGEwTGFtYmRhMSA9IHNpbihsYW1iZGEwIC0gbGFtYmRhMSk7XG4gIHJldHVybiBhYnMoc2luTGFtYmRhMExhbWJkYTEpID4gZXBzaWxvblxuICAgICAgPyBhdGFuKChzaW4ocGhpMCkgKiAoY29zUGhpMSA9IGNvcyhwaGkxKSkgKiBzaW4obGFtYmRhMSlcbiAgICAgICAgICAtIHNpbihwaGkxKSAqIChjb3NQaGkwID0gY29zKHBoaTApKSAqIHNpbihsYW1iZGEwKSlcbiAgICAgICAgICAvIChjb3NQaGkwICogY29zUGhpMSAqIHNpbkxhbWJkYTBMYW1iZGExKSlcbiAgICAgIDogKHBoaTAgKyBwaGkxKSAvIDI7XG59XG5cbmZ1bmN0aW9uIGNsaXBBbnRpbWVyaWRpYW5JbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgdmFyIHBoaTtcbiAgaWYgKGZyb20gPT0gbnVsbCkge1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGhhbGZQaTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChwaSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIDApO1xuICAgIHN0cmVhbS5wb2ludChwaSwgLXBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIDApO1xuICAgIHN0cmVhbS5wb2ludCgtcGksIHBoaSk7XG4gIH0gZWxzZSBpZiAoYWJzKGZyb21bMF0gLSB0b1swXSkgPiBlcHNpbG9uKSB7XG4gICAgdmFyIGxhbWJkYSA9IGZyb21bMF0gPCB0b1swXSA/IHBpIDogLXBpO1xuICAgIHBoaSA9IGRpcmVjdGlvbiAqIGxhbWJkYSAvIDI7XG4gICAgc3RyZWFtLnBvaW50KC1sYW1iZGEsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KDAsIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJlYW0ucG9pbnQodG9bMF0sIHRvWzFdKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkFkZEluUGxhY2UsIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Eb3QsIGNhcnRlc2lhblNjYWxlLCBzcGhlcmljYWx9IGZyb20gXCIuLi9jYXJ0ZXNpYW5cIjtcbmltcG9ydCB7Y2lyY2xlU3RyZWFtfSBmcm9tIFwiLi4vY2lyY2xlXCI7XG5pbXBvcnQge2FicywgY29zLCBlcHNpbG9uLCBwaSwgcmFkaWFucywgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBwb2ludEVxdWFsIGZyb20gXCIuLi9wb2ludEVxdWFsXCI7XG5pbXBvcnQgY2xpcCBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihyYWRpdXMpIHtcbiAgdmFyIGNyID0gY29zKHJhZGl1cyksXG4gICAgICBkZWx0YSA9IDYgKiByYWRpYW5zLFxuICAgICAgc21hbGxSYWRpdXMgPSBjciA+IDAsXG4gICAgICBub3RIZW1pc3BoZXJlID0gYWJzKGNyKSA+IGVwc2lsb247IC8vIFRPRE8gb3B0aW1pc2UgZm9yIHRoaXMgY29tbW9uIGNhc2VcblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIGZyb20sIHRvKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHZpc2libGUobGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gY29zKGxhbWJkYSkgKiBjb3MocGhpKSA+IGNyO1xuICB9XG5cbiAgLy8gVGFrZXMgYSBsaW5lIGFuZCBjdXRzIGludG8gdmlzaWJsZSBzZWdtZW50cy4gUmV0dXJuIHZhbHVlcyB1c2VkIGZvciBwb2x5Z29uXG4gIC8vIGNsaXBwaW5nOiAwIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zIG9yIHRoZSBsaW5lIHdhcyBlbXB0eTsgMSAtIG5vXG4gIC8vIGludGVyc2VjdGlvbnMgMiAtIHRoZXJlIHdlcmUgaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50c1xuICAvLyBzaG91bGQgYmUgcmVqb2luZWQuXG4gIGZ1bmN0aW9uIGNsaXBMaW5lKHN0cmVhbSkge1xuICAgIHZhciBwb2ludDAsIC8vIHByZXZpb3VzIHBvaW50XG4gICAgICAgIGMwLCAvLyBjb2RlIGZvciBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MCwgLy8gdmlzaWJpbGl0eSBvZiBwcmV2aW91cyBwb2ludFxuICAgICAgICB2MDAsIC8vIHZpc2liaWxpdHkgb2YgZmlyc3QgcG9pbnRcbiAgICAgICAgY2xlYW47IC8vIG5vIGludGVyc2VjdGlvbnNcbiAgICByZXR1cm4ge1xuICAgICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdjAwID0gdjAgPSBmYWxzZTtcbiAgICAgICAgY2xlYW4gPSAxO1xuICAgICAgfSxcbiAgICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgICAgICB2YXIgcG9pbnQxID0gW2xhbWJkYSwgcGhpXSxcbiAgICAgICAgICAgIHBvaW50MixcbiAgICAgICAgICAgIHYgPSB2aXNpYmxlKGxhbWJkYSwgcGhpKSxcbiAgICAgICAgICAgIGMgPSBzbWFsbFJhZGl1c1xuICAgICAgICAgICAgICA/IHYgPyAwIDogY29kZShsYW1iZGEsIHBoaSlcbiAgICAgICAgICAgICAgOiB2ID8gY29kZShsYW1iZGEgKyAobGFtYmRhIDwgMCA/IHBpIDogLXBpKSwgcGhpKSA6IDA7XG4gICAgICAgIGlmICghcG9pbnQwICYmICh2MDAgPSB2MCA9IHYpKSBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIC8vIEhhbmRsZSBkZWdlbmVyYWNpZXMuXG4gICAgICAgIC8vIFRPRE8gaWdub3JlIGlmIG5vdCBjbGlwcGluZyBwb2x5Z29ucy5cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICBpZiAoIXBvaW50MiB8fCBwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSkge1xuICAgICAgICAgICAgcG9pbnQxWzBdICs9IGVwc2lsb247XG4gICAgICAgICAgICBwb2ludDFbMV0gKz0gZXBzaWxvbjtcbiAgICAgICAgICAgIHYgPSB2aXNpYmxlKHBvaW50MVswXSwgcG9pbnQxWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAvLyBvdXRzaWRlIGdvaW5nIGluXG4gICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5zaWRlIGdvaW5nIG91dFxuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSk7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgLy8gSWYgdGhlIGNvZGVzIGZvciB0d28gcG9pbnRzIGFyZSBkaWZmZXJlbnQsIG9yIGFyZSBib3RoIHplcm8sXG4gICAgICAgICAgLy8gYW5kIHRoZXJlIHRoaXMgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHNtYWxsIGNpcmNsZS5cbiAgICAgICAgICBpZiAoIShjICYgYzApICYmICh0ID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwLCB0cnVlKSkpIHtcbiAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIXBvaW50RXF1YWwocG9pbnQwLCBwb2ludDEpKSkge1xuICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHYwKSBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBwb2ludDAgPSBudWxsO1xuICAgICAgfSxcbiAgICAgIC8vIFJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBpZiB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgYW5kIHRoZSBmaXJzdFxuICAgICAgLy8gYW5kIGxhc3QgcG9pbnRzIHdlcmUgdmlzaWJsZS5cbiAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuIHwgKCh2MDAgJiYgdjApIDw8IDEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBJbnRlcnNlY3RzIHRoZSBncmVhdCBjaXJjbGUgYmV0d2VlbiBhIGFuZCBiIHdpdGggdGhlIGNsaXAgY2lyY2xlLlxuICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG4gICAgdmFyIHBhID0gY2FydGVzaWFuKGEpLFxuICAgICAgICBwYiA9IGNhcnRlc2lhbihiKTtcblxuICAgIC8vIFdlIGhhdmUgdHdvIHBsYW5lcywgbjEucCA9IGQxIGFuZCBuMi5wID0gZDIuXG4gICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXG4gICAgdmFyIG4xID0gWzEsIDAsIDBdLCAvLyBub3JtYWxcbiAgICAgICAgbjIgPSBjYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLFxuICAgICAgICBuMm4yID0gY2FydGVzaWFuRG90KG4yLCBuMiksXG4gICAgICAgIG4xbjIgPSBuMlswXSwgLy8gY2FydGVzaWFuRG90KG4xLCBuMiksXG4gICAgICAgIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXG4gICAgLy8gVHdvIHBvbGFyIHBvaW50cy5cbiAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xuXG4gICAgdmFyIGMxID0gIGNyICogbjJuMiAvIGRldGVybWluYW50LFxuICAgICAgICBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgbjF4bjIgPSBjYXJ0ZXNpYW5Dcm9zcyhuMSwgbjIpLFxuICAgICAgICBBID0gY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcbiAgICAgICAgQiA9IGNhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShBLCBCKTtcblxuICAgIC8vIFNvbHZlIHxwKHQpfF4yID0gMS5cbiAgICB2YXIgdSA9IG4xeG4yLFxuICAgICAgICB3ID0gY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICB1dSA9IGNhcnRlc2lhbkRvdCh1LCB1KSxcbiAgICAgICAgdDIgPSB3ICogdyAtIHV1ICogKGNhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xuXG4gICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xuXG4gICAgdmFyIHQgPSBzcXJ0KHQyKSxcbiAgICAgICAgcSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocSwgQSk7XG4gICAgcSA9IHNwaGVyaWNhbChxKTtcblxuICAgIGlmICghdHdvKSByZXR1cm4gcTtcblxuICAgIC8vIFR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgIHZhciBsYW1iZGEwID0gYVswXSxcbiAgICAgICAgbGFtYmRhMSA9IGJbMF0sXG4gICAgICAgIHBoaTAgPSBhWzFdLFxuICAgICAgICBwaGkxID0gYlsxXSxcbiAgICAgICAgejtcblxuICAgIGlmIChsYW1iZGExIDwgbGFtYmRhMCkgeiA9IGxhbWJkYTAsIGxhbWJkYTAgPSBsYW1iZGExLCBsYW1iZGExID0gejtcblxuICAgIHZhciBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICBwb2xhciA9IGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24sXG4gICAgICAgIG1lcmlkaWFuID0gcG9sYXIgfHwgZGVsdGEgPCBlcHNpbG9uO1xuXG4gICAgaWYgKCFwb2xhciAmJiBwaGkxIDwgcGhpMCkgeiA9IHBoaTAsIHBoaTAgPSBwaGkxLCBwaGkxID0gejtcblxuICAgIC8vIENoZWNrIHRoYXQgdGhlIGZpcnN0IHBvaW50IGlzIGJldHdlZW4gYSBhbmQgYi5cbiAgICBpZiAobWVyaWRpYW5cbiAgICAgICAgPyBwb2xhclxuICAgICAgICAgID8gcGhpMCArIHBoaTEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIGxhbWJkYTApIDwgZXBzaWxvbiA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICA6IGRlbHRhID4gcGkgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcbiAgICAgIHZhciBxMSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShxMSwgQSk7XG4gICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYXRlcyBhIDQtYml0IHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgcG9pbnQgcmVsYXRpdmUgdG9cbiAgLy8gdGhlIHNtYWxsIGNpcmNsZSdzIGJvdW5kaW5nIGJveC5cbiAgZnVuY3Rpb24gY29kZShsYW1iZGEsIHBoaSkge1xuICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiBwaSAtIHJhZGl1cyxcbiAgICAgICAgY29kZSA9IDA7XG4gICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICBlbHNlIGlmIChsYW1iZGEgPiByKSBjb2RlIHw9IDI7IC8vIHJpZ2h0XG4gICAgaWYgKHBoaSA8IC1yKSBjb2RlIHw9IDQ7IC8vIGJlbG93XG4gICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgcmV0dXJuIGNsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFswLCAtcmFkaXVzXSA6IFstcGksIHJhZGl1cyAtIHBpXSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKHQwID4gMCkgYVswXSA9IGF4ICsgdDAgKiBkeCwgYVsxXSA9IGF5ICsgdDAgKiBkeTtcbiAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgcmV0dXJuIHRydWU7XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlclwiO1xuaW1wb3J0IGNsaXBMaW5lIGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCBjbGlwUmVqb2luIGZyb20gXCIuL3Jlam9pblwiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbnZhciBjbGlwTWF4ID0gMWU5LCBjbGlwTWluID0gLWNsaXBNYXg7XG5cbi8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbi8vIFRPRE8gRWxpbWluYXRlIGR1cGxpY2F0ZSBidWZmZXJpbmcgaW4gY2xpcEJ1ZmZlciBhbmQgcG9seWdvbi5wdXNoP1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGlwUmVjdGFuZ2xlKHgwLCB5MCwgeDEsIHkxKSB7XG5cbiAgZnVuY3Rpb24gdmlzaWJsZSh4LCB5KSB7XG4gICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICBpZiAoZnJvbSA9PSBudWxsXG4gICAgICAgIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpXG4gICAgICAgIHx8IGNvbXBhcmVQb2ludChmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuICAgICAgZG8gc3RyZWFtLnBvaW50KGEgPT09IDAgfHwgYSA9PT0gMyA/IHgwIDogeDEsIGEgPiAxID8geTEgOiB5MCk7XG4gICAgICB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29ybmVyKHAsIGRpcmVjdGlvbikge1xuICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMCA6IDNcbiAgICAgICAgOiBhYnMocFswXSAtIHgxKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMSA6IDBcbiAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVQb2ludChhLngsIGIueCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlUG9pbnQoYSwgYikge1xuICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSxcbiAgICAgICAgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2JcbiAgICAgICAgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdXG4gICAgICAgIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXVxuICAgICAgICA6IGNhID09PSAyID8gYVsxXSAtIGJbMV1cbiAgICAgICAgOiBiWzBdIC0gYVswXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxuICAgICAgICBidWZmZXJTdHJlYW0gPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICBwb2x5Z29uLFxuICAgICAgICByaW5nLFxuICAgICAgICB4X18sIHlfXywgdl9fLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICBmaXJzdCxcbiAgICAgICAgY2xlYW47XG5cbiAgICB2YXIgY2xpcFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogcG9seWdvblN0YXJ0LFxuICAgICAgcG9seWdvbkVuZDogcG9seWdvbkVuZFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBpZiAodmlzaWJsZSh4LCB5KSkgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbHlnb25JbnNpZGUoKSB7XG4gICAgICB2YXIgd2luZGluZyA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZm9yICh2YXIgcmluZyA9IHBvbHlnb25baV0sIGogPSAxLCBtID0gcmluZy5sZW5ndGgsIHBvaW50ID0gcmluZ1swXSwgYTAsIGExLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgYTAgPSBiMCwgYTEgPSBiMSwgcG9pbnQgPSByaW5nW2pdLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdO1xuICAgICAgICAgIGlmIChhMSA8PSB5MSkgeyBpZiAoYjEgPiB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPiAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpICsrd2luZGluZzsgfVxuICAgICAgICAgIGVsc2UgeyBpZiAoYjEgPD0geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpIDwgKGIxIC0gYTEpICogKHgwIC0gYTApKSAtLXdpbmRpbmc7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2luZGluZztcbiAgICB9XG5cbiAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgIGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGFjdGl2ZVN0cmVhbSA9IGJ1ZmZlclN0cmVhbSwgc2VnbWVudHMgPSBbXSwgcG9seWdvbiA9IFtdLCBjbGVhbiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25JbnNpZGUoKSxcbiAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgIHZpc2libGUgPSAoc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cykpLmxlbmd0aDtcbiAgICAgIGlmIChjbGVhbkluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgaWYgKGNsZWFuSW5zaWRlKSB7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgdl8gPSBmYWxzZTtcbiAgICAgIHhfID0geV8gPSBOYU47XG4gICAgfVxuXG4gICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgIC8vIElkZWFsbHksIGNvaW5jaWRlbnQgaW50ZXJzZWN0aW9uIHBvaW50cyBzaG91bGQgYmUgaml0dGVyZWQgdG8gYXZvaWRcbiAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyU3RyZWFtLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIGlmICh2XykgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xuICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxuICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gIH07XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4vYWRkZXJcIjtcbmltcG9ydCB7YWJzLCBhdGFuMiwgY29zLCByYWRpYW5zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuL25vb3BcIjtcbmltcG9ydCBzdHJlYW0gZnJvbSBcIi4vc3RyZWFtXCI7XG5cbnZhciBsZW5ndGhTdW0gPSBhZGRlcigpLFxuICAgIGxhbWJkYTAsXG4gICAgc2luUGhpMCxcbiAgICBjb3NQaGkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBzcGhlcmU6IG5vb3AsXG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IGxlbmd0aExpbmVTdGFydCxcbiAgbGluZUVuZDogbm9vcCxcbiAgcG9seWdvblN0YXJ0OiBub29wLFxuICBwb2x5Z29uRW5kOiBub29wXG59O1xuXG5mdW5jdGlvbiBsZW5ndGhMaW5lU3RhcnQoKSB7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50Rmlyc3Q7XG4gIGxlbmd0aFN0cmVhbS5saW5lRW5kID0gbGVuZ3RoTGluZUVuZDtcbn1cblxuZnVuY3Rpb24gbGVuZ3RoTGluZUVuZCgpIHtcbiAgbGVuZ3RoU3RyZWFtLnBvaW50ID0gbGVuZ3RoU3RyZWFtLmxpbmVFbmQgPSBub29wO1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludEZpcnN0KGxhbWJkYSwgcGhpKSB7XG4gIGxhbWJkYSAqPSByYWRpYW5zLCBwaGkgKj0gcmFkaWFucztcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpbihwaGkpLCBjb3NQaGkwID0gY29zKHBoaSk7XG4gIGxlbmd0aFN0cmVhbS5wb2ludCA9IGxlbmd0aFBvaW50O1xufVxuXG5mdW5jdGlvbiBsZW5ndGhQb2ludChsYW1iZGEsIHBoaSkge1xuICBsYW1iZGEgKj0gcmFkaWFucywgcGhpICo9IHJhZGlhbnM7XG4gIHZhciBzaW5QaGkgPSBzaW4ocGhpKSxcbiAgICAgIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgZGVsdGEgPSBhYnMobGFtYmRhIC0gbGFtYmRhMCksXG4gICAgICBjb3NEZWx0YSA9IGNvcyhkZWx0YSksXG4gICAgICBzaW5EZWx0YSA9IHNpbihkZWx0YSksXG4gICAgICB4ID0gY29zUGhpICogc2luRGVsdGEsXG4gICAgICB5ID0gY29zUGhpMCAqIHNpblBoaSAtIHNpblBoaTAgKiBjb3NQaGkgKiBjb3NEZWx0YSxcbiAgICAgIHogPSBzaW5QaGkwICogc2luUGhpICsgY29zUGhpMCAqIGNvc1BoaSAqIGNvc0RlbHRhO1xuICBsZW5ndGhTdW0uYWRkKGF0YW4yKHNxcnQoeCAqIHggKyB5ICogeSksIHopKTtcbiAgbGFtYmRhMCA9IGxhbWJkYSwgc2luUGhpMCA9IHNpblBoaSwgY29zUGhpMCA9IGNvc1BoaTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGxlbmd0aFN1bS5yZXNldCgpO1xuICBzdHJlYW0ob2JqZWN0LCBsZW5ndGhTdHJlYW0pO1xuICByZXR1cm4gK2xlbmd0aFN1bTtcbn1cbiIsImltcG9ydCB7YXNpbiwgYXRhbjIsIGNvcywgZGVncmVlcywgaGF2ZXJzaW4sIHJhZGlhbnMsIHNpbiwgc3FydH0gZnJvbSBcIi4vbWF0aFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciB4MCA9IGFbMF0gKiByYWRpYW5zLFxuICAgICAgeTAgPSBhWzFdICogcmFkaWFucyxcbiAgICAgIHgxID0gYlswXSAqIHJhZGlhbnMsXG4gICAgICB5MSA9IGJbMV0gKiByYWRpYW5zLFxuICAgICAgY3kwID0gY29zKHkwKSxcbiAgICAgIHN5MCA9IHNpbih5MCksXG4gICAgICBjeTEgPSBjb3MoeTEpLFxuICAgICAgc3kxID0gc2luKHkxKSxcbiAgICAgIGt4MCA9IGN5MCAqIGNvcyh4MCksXG4gICAgICBreTAgPSBjeTAgKiBzaW4oeDApLFxuICAgICAga3gxID0gY3kxICogY29zKHgxKSxcbiAgICAgIGt5MSA9IGN5MSAqIHNpbih4MSksXG4gICAgICBkID0gMiAqIGFzaW4oc3FydChoYXZlcnNpbih5MSAtIHkwKSArIGN5MCAqIGN5MSAqIGhhdmVyc2luKHgxIC0geDApKSksXG4gICAgICBrID0gc2luKGQpO1xuXG4gIHZhciBpbnRlcnBvbGF0ZSA9IGQgPyBmdW5jdGlvbih0KSB7XG4gICAgdmFyIEIgPSBzaW4odCAqPSBkKSAvIGssXG4gICAgICAgIEEgPSBzaW4oZCAtIHQpIC8gayxcbiAgICAgICAgeCA9IEEgKiBreDAgKyBCICoga3gxLFxuICAgICAgICB5ID0gQSAqIGt5MCArIEIgKiBreTEsXG4gICAgICAgIHogPSBBICogc3kwICsgQiAqIHN5MTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeSwgeCkgKiBkZWdyZWVzLFxuICAgICAgYXRhbjIoeiwgc3FydCh4ICogeCArIHkgKiB5KSkgKiBkZWdyZWVzXG4gICAgXTtcbiAgfSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBbeDAgKiBkZWdyZWVzLCB5MCAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIGludGVycG9sYXRlLmRpc3RhbmNlID0gZDtcblxuICByZXR1cm4gaW50ZXJwb2xhdGU7XG59XG4iLCJpbXBvcnQgYWRkZXIgZnJvbSBcIi4uL2FkZGVyXCI7XG5pbXBvcnQge2Fic30gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCBub29wIGZyb20gXCIuLi9ub29wXCI7XG5cbnZhciBhcmVhU3VtID0gYWRkZXIoKSxcbiAgICBhcmVhUmluZ1N1bSA9IGFkZGVyKCksXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFTdHJlYW0ucG9pbnQgPSBub29wO1xuICAgIGFyZWFTdW0uYWRkKGFicyhhcmVhUmluZ1N1bSkpO1xuICAgIGFyZWFSaW5nU3VtLnJlc2V0KCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBhcmVhU3VtIC8gMjtcbiAgICBhcmVhU3VtLnJlc2V0KCk7XG4gICAgcmV0dXJuIGFyZWE7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QoeCwgeSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KHgsIHkpIHtcbiAgYXJlYVJpbmdTdW0uYWRkKHkwICogeCAtIHgwICogeSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KHgwMCwgeTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJlYVN0cmVhbTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG52YXIgeDAgPSBJbmZpbml0eSxcbiAgICB5MCA9IHgwLFxuICAgIHgxID0gLXgwLFxuICAgIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3AsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgxID0geTEgPSAtKHkwID0geDAgPSBJbmZpbml0eSk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQoeCwgeSkge1xuICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gIGlmICh4ID4geDEpIHgxID0geDtcbiAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJvdW5kc1N0cmVhbTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGhcIjtcblxuLy8gVE9ETyBFbmZvcmNlIHBvc2l0aXZlIGFyZWEgZm9yIGV4dGVyaW9yLCBuZWdhdGl2ZSBhcmVhIGZvciBpbnRlcmlvcj9cblxudmFyIFgwID0gMCxcbiAgICBZMCA9IDAsXG4gICAgWjAgPSAwLFxuICAgIFgxID0gMCxcbiAgICBZMSA9IDAsXG4gICAgWjEgPSAwLFxuICAgIFgyID0gMCxcbiAgICBZMiA9IDAsXG4gICAgWjIgPSAwLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2VudHJvaWQgPSBaMiA/IFtYMiAvIFoyLCBZMiAvIFoyXVxuICAgICAgICA6IFoxID8gW1gxIC8gWjEsIFkxIC8gWjFdXG4gICAgICAgIDogWjAgPyBbWDAgLyBaMCwgWTAgLyBaMF1cbiAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgIFgwID0gWTAgPSBaMCA9XG4gICAgWDEgPSBZMSA9IFoxID1cbiAgICBYMiA9IFkyID0gWjIgPSAwO1xuICAgIHJldHVybiBjZW50cm9pZDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludCh4LCB5KSB7XG4gIFgwICs9IHg7XG4gIFkwICs9IHk7XG4gICsrWjA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdExpbmU7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFBvaW50UmluZyh4MDAsIHkwMCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICBjZW50cm9pZFBvaW50KHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsXG4gICAgICBkeSA9IHkgLSB5MCxcbiAgICAgIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICBYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICBZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICBaMSArPSB6O1xuXG4gIHogPSB5MCAqIHggLSB4MCAqIHk7XG4gIFgyICs9IHogKiAoeDAgKyB4KTtcbiAgWTIgKz0geiAqICh5MCArIHkpO1xuICBaMiArPSB6ICogMztcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNlbnRyb2lkU3RyZWFtO1xuIiwiaW1wb3J0IHt0YXV9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBub29wXG59O1xuIiwiaW1wb3J0IGFkZGVyIGZyb20gXCIuLi9hZGRlclwiO1xuaW1wb3J0IHtzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IG5vb3AgZnJvbSBcIi4uL25vb3BcIjtcblxudmFyIGxlbmd0aFN1bSA9IGFkZGVyKCksXG4gICAgbGVuZ3RoUmluZyxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQoeDAwLCB5MDApO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IHRydWU7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSArbGVuZ3RoU3VtO1xuICAgIGxlbmd0aFN1bS5yZXNldCgpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QoeCwgeSkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KHgsIHkpIHtcbiAgeDAgLT0geCwgeTAgLT0geTtcbiAgbGVuZ3RoU3VtLmFkZChzcXJ0KHgwICogeDAgKyB5MCAqIHkwKSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsZW5ndGhTdHJlYW07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlKDQuNSksXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgaWYgKChfID0gK18pICE9PSB0aGlzLl9yYWRpdXMpIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXMuX2NpcmNsZSA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fc3RyaW5nLnB1c2goXCJaXCIpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTFwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fY2lyY2xlID09IG51bGwpIHRoaXMuX2NpcmNsZSA9IGNpcmNsZSh0aGlzLl9yYWRpdXMpO1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHRoaXMuX2NpcmNsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3N0cmluZy5qb2luKFwiXCIpO1xuICAgICAgdGhpcy5fc3RyaW5nID0gW107XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNpcmNsZShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQgc3RyZWFtIGZyb20gXCIuLi9zdHJlYW1cIjtcbmltcG9ydCBwYXRoQXJlYSBmcm9tIFwiLi9hcmVhXCI7XG5pbXBvcnQgcGF0aEJvdW5kcyBmcm9tIFwiLi9ib3VuZHNcIjtcbmltcG9ydCBwYXRoQ2VudHJvaWQgZnJvbSBcIi4vY2VudHJvaWRcIjtcbmltcG9ydCBQYXRoQ29udGV4dCBmcm9tIFwiLi9jb250ZXh0XCI7XG5pbXBvcnQgcGF0aE1lYXN1cmUgZnJvbSBcIi4vbWVhc3VyZVwiO1xuaW1wb3J0IFBhdGhTdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHByb2plY3Rpb24sIGNvbnRleHQpIHtcbiAgdmFyIHBvaW50UmFkaXVzID0gNC41LFxuICAgICAgcHJvamVjdGlvblN0cmVhbSxcbiAgICAgIGNvbnRleHRTdHJlYW07XG5cbiAgZnVuY3Rpb24gcGF0aChvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzID09PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK3BvaW50UmFkaXVzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShjb250ZXh0U3RyZWFtKSk7XG4gICAgfVxuICAgIHJldHVybiBjb250ZXh0U3RyZWFtLnJlc3VsdCgpO1xuICB9XG5cbiAgcGF0aC5hcmVhID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQXJlYSkpO1xuICAgIHJldHVybiBwYXRoQXJlYS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLm1lYXN1cmUgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhNZWFzdXJlKSk7XG4gICAgcmV0dXJuIHBhdGhNZWFzdXJlLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguYm91bmRzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoQm91bmRzKSk7XG4gICAgcmV0dXJuIHBhdGhCb3VuZHMucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5jZW50cm9pZCA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aENlbnRyb2lkKSk7XG4gICAgcmV0dXJuIHBhdGhDZW50cm9pZC5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLnByb2plY3Rpb24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJvamVjdGlvblN0cmVhbSA9IF8gPT0gbnVsbCA/IChwcm9qZWN0aW9uID0gbnVsbCwgaWRlbnRpdHkpIDogKHByb2plY3Rpb24gPSBfKS5zdHJlYW0sIHBhdGgpIDogcHJvamVjdGlvbjtcbiAgfTtcblxuICBwYXRoLmNvbnRleHQgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gY29udGV4dDtcbiAgICBjb250ZXh0U3RyZWFtID0gXyA9PSBudWxsID8gKGNvbnRleHQgPSBudWxsLCBuZXcgUGF0aFN0cmluZykgOiBuZXcgUGF0aENvbnRleHQoY29udGV4dCA9IF8pO1xuICAgIGlmICh0eXBlb2YgcG9pbnRSYWRpdXMgIT09IFwiZnVuY3Rpb25cIikgY29udGV4dFN0cmVhbS5wb2ludFJhZGl1cyhwb2ludFJhZGl1cyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcGF0aC5wb2ludFJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHJldHVybiBwb2ludFJhZGl1cztcbiAgICBwb2ludFJhZGl1cyA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogKGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMoK18pLCArXyk7XG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgcmV0dXJuIHBhdGgucHJvamVjdGlvbihwcm9qZWN0aW9uKS5jb250ZXh0KGNvbnRleHQpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWV0aG9kcykge1xuICByZXR1cm4ge1xuICAgIHN0cmVhbTogdHJhbnNmb3JtZXIobWV0aG9kcylcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybWVyKG1ldGhvZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBzID0gbmV3IFRyYW5zZm9ybVN0cmVhbTtcbiAgICBmb3IgKHZhciBrZXkgaW4gbWV0aG9kcykgc1trZXldID0gbWV0aG9kc1trZXldO1xuICAgIHMuc3RyZWFtID0gc3RyZWFtO1xuICAgIHJldHVybiBzO1xuICB9O1xufVxuXG5mdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW0oKSB7fVxuXG5UcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNmb3JtU3RyZWFtLFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkgeyB0aGlzLnN0cmVhbS5wb2ludCh4LCB5KTsgfSxcbiAgc3BoZXJlOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0uc3BoZXJlKCk7IH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLmxpbmVTdGFydCgpOyB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZUVuZCgpOyB9LFxuICBwb2x5Z29uU3RhcnQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25FbmQoKTsgfVxufTtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBnZW9TdHJlYW19IGZyb20gXCIuLi9zdHJlYW1cIjtcbmltcG9ydCBib3VuZHNTdHJlYW0gZnJvbSBcIi4uL3BhdGgvYm91bmRzXCI7XG5cbmZ1bmN0aW9uIGZpdChwcm9qZWN0aW9uLCBmaXRCb3VuZHMsIG9iamVjdCkge1xuICB2YXIgY2xpcCA9IHByb2plY3Rpb24uY2xpcEV4dGVudCAmJiBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoKTtcbiAgcHJvamVjdGlvbi5zY2FsZSgxNTApLnRyYW5zbGF0ZShbMCwgMF0pO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb24uc3RyZWFtKGJvdW5kc1N0cmVhbSkpO1xuICBmaXRCb3VuZHMoYm91bmRzU3RyZWFtLnJlc3VsdCgpKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9IGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSxcbiAgICAgICAgaCA9IGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSArd2lkdGgsXG4gICAgICAgIGsgPSB3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSxcbiAgICAgICAgeCA9ICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9IC1rICogYlswXVsxXTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciBoID0gK2hlaWdodCxcbiAgICAgICAgayA9IGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pLFxuICAgICAgICB4ID0gLWsgKiBiWzBdWzBdLFxuICAgICAgICB5ID0gKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbn0gZnJvbSBcIi4uL2NhcnRlc2lhblwiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtXCI7XG5cbnZhciBtYXhEZXB0aCA9IDE2LCAvLyBtYXhpbXVtIGRlcHRoIG9mIHN1YmRpdmlzaW9uXG4gICAgY29zTWluRGlzdGFuY2UgPSBjb3MoMzAgKiByYWRpYW5zKTsgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdCwgZGVsdGEyKSB7XG4gIHJldHVybiArZGVsdGEyID8gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcblxuICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgIHZhciBhID0gYTAgKyBhMSxcbiAgICAgICAgICBiID0gYjAgKyBiMSxcbiAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICBtID0gc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgIHBoaTIgPSBhc2luKGMgLz0gbSksXG4gICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24gfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24gPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB4MCA9IE5hTjtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgbGluZUVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwQW50aW1lcmlkaWFuIGZyb20gXCIuLi9jbGlwL2FudGltZXJpZGlhblwiO1xuaW1wb3J0IGNsaXBDaXJjbGUgZnJvbSBcIi4uL2NsaXAvY2lyY2xlXCI7XG5pbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGVcIjtcbmltcG9ydCBjb21wb3NlIGZyb20gXCIuLi9jb21wb3NlXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5XCI7XG5pbXBvcnQge2NvcywgZGVncmVlcywgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi4vcm90YXRpb25cIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm1cIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXRcIjtcbmltcG9ydCByZXNhbXBsZSBmcm9tIFwiLi9yZXNhbXBsZVwiO1xuXG52YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybWVyKHtcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgciA9IHJvdGF0ZSh4LCB5KTtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb2ludChyWzBdLCByWzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHkpIHtcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICByZXR1cm4gW2R4ICsgayAqIHgsIGR5IC0gayAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFsoeCAtIGR4KSAvIGssIChkeSAtIHkpIC8ga107XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmZ1bmN0aW9uIHNjYWxlVHJhbnNsYXRlUm90YXRlKGssIGR4LCBkeSwgYWxwaGEpIHtcbiAgdmFyIGNvc0FscGhhID0gY29zKGFscGhhKSxcbiAgICAgIHNpbkFscGhhID0gc2luKGFscGhhKSxcbiAgICAgIGEgPSBjb3NBbHBoYSAqIGssXG4gICAgICBiID0gc2luQWxwaGEgKiBrLFxuICAgICAgYWkgPSBjb3NBbHBoYSAvIGssXG4gICAgICBiaSA9IHNpbkFscGhhIC8gayxcbiAgICAgIGNpID0gKHNpbkFscGhhICogZHkgLSBjb3NBbHBoYSAqIGR4KSAvIGssXG4gICAgICBmaSA9IChzaW5BbHBoYSAqIGR4ICsgY29zQWxwaGEgKiBkeSkgLyBrO1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHJldHVybiBbYSAqIHggLSBiICogeSArIGR4LCBkeSAtIGIgKiB4IC0gYSAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFthaSAqIHggLSBiaSAqIHkgKyBjaSwgZmkgLSBiaSAqIHggLSBhaSAqIHldO1xuICB9O1xuICByZXR1cm4gdHJhbnNmb3JtO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcm9qZWN0aW9uKHByb2plY3QpIHtcbiAgcmV0dXJuIHByb2plY3Rpb25NdXRhdG9yKGZ1bmN0aW9uKCkgeyByZXR1cm4gcHJvamVjdDsgfSkoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb2plY3Rpb25NdXRhdG9yKHByb2plY3RBdCkge1xuICB2YXIgcHJvamVjdCxcbiAgICAgIGsgPSAxNTAsIC8vIHNjYWxlXG4gICAgICB4ID0gNDgwLCB5ID0gMjUwLCAvLyB0cmFuc2xhdGVcbiAgICAgIGxhbWJkYSA9IDAsIHBoaSA9IDAsIC8vIGNlbnRlclxuICAgICAgZGVsdGFMYW1iZGEgPSAwLCBkZWx0YVBoaSA9IDAsIGRlbHRhR2FtbWEgPSAwLCByb3RhdGUsIC8vIHByZS1yb3RhdGVcbiAgICAgIGFscGhhID0gMCwgLy8gcG9zdC1yb3RhdGVcbiAgICAgIHRoZXRhID0gbnVsbCwgcHJlY2xpcCA9IGNsaXBBbnRpbWVyaWRpYW4sIC8vIHByZS1jbGlwIGFuZ2xlXG4gICAgICB4MCA9IG51bGwsIHkwLCB4MSwgeTEsIHBvc3RjbGlwID0gaWRlbnRpdHksIC8vIHBvc3QtY2xpcCBleHRlbnRcbiAgICAgIGRlbHRhMiA9IDAuNSwgLy8gcHJlY2lzaW9uXG4gICAgICBwcm9qZWN0UmVzYW1wbGUsXG4gICAgICBwcm9qZWN0VHJhbnNmb3JtLFxuICAgICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSxcbiAgICAgIGNhY2hlLFxuICAgICAgY2FjaGVTdHJlYW07XG5cbiAgZnVuY3Rpb24gcHJvamVjdGlvbihwb2ludCkge1xuICAgIHJldHVybiBwcm9qZWN0Um90YXRlVHJhbnNmb3JtKHBvaW50WzBdICogcmFkaWFucywgcG9pbnRbMV0gKiByYWRpYW5zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludmVydChwb2ludCkge1xuICAgIHBvaW50ID0gcHJvamVjdFJvdGF0ZVRyYW5zZm9ybS5pbnZlcnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgICByZXR1cm4gcG9pbnQgJiYgW3BvaW50WzBdICogZGVncmVlcywgcG9pbnRbMV0gKiBkZWdyZWVzXTtcbiAgfVxuXG4gIHByb2plY3Rpb24uc3RyZWFtID0gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgcmV0dXJuIGNhY2hlICYmIGNhY2hlU3RyZWFtID09PSBzdHJlYW0gPyBjYWNoZSA6IGNhY2hlID0gdHJhbnNmb3JtUmFkaWFucyh0cmFuc2Zvcm1Sb3RhdGUocm90YXRlKShwcmVjbGlwKHByb2plY3RSZXNhbXBsZShwb3N0Y2xpcChjYWNoZVN0cmVhbSA9IHN0cmVhbSkpKSkpO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2xpcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcmVjbGlwID0gXywgdGhldGEgPSB1bmRlZmluZWQsIHJlc2V0KCkpIDogcHJlY2xpcDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnBvc3RjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXywgeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCByZXNldCgpKSA6IHBvc3RjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2xpcEFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSArXyA/IGNsaXBDaXJjbGUodGhldGEgPSBfICogcmFkaWFucykgOiAodGhldGEgPSBudWxsLCBjbGlwQW50aW1lcmlkaWFuKSwgcmVzZXQoKSkgOiB0aGV0YSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwRXh0ZW50ID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHBvc3RjbGlwID0gXyA9PSBudWxsID8gKHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCwgaWRlbnRpdHkpIDogY2xpcFJlY3RhbmdsZSh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSwgcmVzZXQoKSkgOiB4MCA9PSBudWxsID8gbnVsbCA6IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICB9O1xuXG4gIHByb2plY3Rpb24uc2NhbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoayA9ICtfLCByZWNlbnRlcigpKSA6IGs7XG4gIH07XG5cbiAgcHJvamVjdGlvbi50cmFuc2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoeCA9ICtfWzBdLCB5ID0gK19bMV0sIHJlY2VudGVyKCkpIDogW3gsIHldO1xuICB9O1xuXG4gIHByb2plY3Rpb24uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBwaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBbbGFtYmRhICogZGVncmVlcywgcGhpICogZGVncmVlc107XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZGVsdGFMYW1iZGEgPSBfWzBdICUgMzYwICogcmFkaWFucywgZGVsdGFQaGkgPSBfWzFdICUgMzYwICogcmFkaWFucywgZGVsdGFHYW1tYSA9IF8ubGVuZ3RoID4gMiA/IF9bMl0gJSAzNjAgKiByYWRpYW5zIDogMCwgcmVjZW50ZXIoKSkgOiBbZGVsdGFMYW1iZGEgKiBkZWdyZWVzLCBkZWx0YVBoaSAqIGRlZ3JlZXMsIGRlbHRhR2FtbWEgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmFuZ2xlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGFscGhhID0gXyAlIDM2MCAqIHJhZGlhbnMsIHJlY2VudGVyKCkpIDogYWxwaGEgKiBkZWdyZWVzO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMiA9IF8gKiBfKSwgcmVzZXQoKSkgOiBzcXJ0KGRlbHRhMik7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRFeHRlbnQgPSBmdW5jdGlvbihleHRlbnQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRFeHRlbnQocHJvamVjdGlvbiwgZXh0ZW50LCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0U2l6ZSA9IGZ1bmN0aW9uKHNpemUsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRTaXplKHByb2plY3Rpb24sIHNpemUsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRXaWR0aCA9IGZ1bmN0aW9uKHdpZHRoLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0V2lkdGgocHJvamVjdGlvbiwgd2lkdGgsIG9iamVjdCk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5maXRIZWlnaHQgPSBmdW5jdGlvbihoZWlnaHQsIG9iamVjdCkge1xuICAgIHJldHVybiBmaXRIZWlnaHQocHJvamVjdGlvbiwgaGVpZ2h0LCBvYmplY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHJlY2VudGVyKCkge1xuICAgIHZhciBjZW50ZXIgPSBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCAwLCAwLCBhbHBoYSkuYXBwbHkobnVsbCwgcHJvamVjdChsYW1iZGEsIHBoaSkpLFxuICAgICAgICB0cmFuc2Zvcm0gPSAoYWxwaGEgPyBzY2FsZVRyYW5zbGF0ZVJvdGF0ZSA6IHNjYWxlVHJhbnNsYXRlKShrLCB4IC0gY2VudGVyWzBdLCB5IC0gY2VudGVyWzFdLCBhbHBoYSk7XG4gICAgcm90YXRlID0gcm90YXRlUmFkaWFucyhkZWx0YUxhbWJkYSwgZGVsdGFQaGksIGRlbHRhR2FtbWEpO1xuICAgIHByb2plY3RUcmFuc2Zvcm0gPSBjb21wb3NlKHByb2plY3QsIHRyYW5zZm9ybSk7XG4gICAgcHJvamVjdFJvdGF0ZVRyYW5zZm9ybSA9IGNvbXBvc2Uocm90YXRlLCBwcm9qZWN0VHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIpO1xuICAgIHJldHVybiByZXNldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXQoKSB7XG4gICAgY2FjaGUgPSBjYWNoZVN0cmVhbSA9IG51bGw7XG4gICAgcmV0dXJuIHByb2plY3Rpb247XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcHJvamVjdCA9IHByb2plY3RBdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHByb2plY3Rpb24uaW52ZXJ0ID0gcHJvamVjdC5pbnZlcnQgJiYgaW52ZXJ0O1xuICAgIHJldHVybiByZWNlbnRlcigpO1xuICB9O1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhemltdXRoYWxSYXcoc2NhbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgY3ggPSBjb3MoeCksXG4gICAgICAgIGN5ID0gY29zKHkpLFxuICAgICAgICBrID0gc2NhbGUoY3ggKiBjeSk7XG4gICAgcmV0dXJuIFtcbiAgICAgIGsgKiBjeSAqIHNpbih4KSxcbiAgICAgIGsgKiBzaW4oeSlcbiAgICBdO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhemltdXRoYWxJbnZlcnQoYW5nbGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB2YXIgeiA9IHNxcnQoeCAqIHggKyB5ICogeSksXG4gICAgICAgIGMgPSBhbmdsZSh6KSxcbiAgICAgICAgc2MgPSBzaW4oYyksXG4gICAgICAgIGNjID0gY29zKGMpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih4ICogc2MsIHogKiBjYyksXG4gICAgICBhc2luKHogJiYgeSAqIHNjIC8geilcbiAgICBdO1xuICB9XG59XG4iLCJpbXBvcnQge2FzaW4sIHNxcnR9IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbFJhdywgYXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCB2YXIgYXppbXV0aGFsRXF1YWxBcmVhUmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGN4Y3kpIHtcbiAgcmV0dXJuIHNxcnQoMiAvICgxICsgY3hjeSkpO1xufSk7XG5cbmF6aW11dGhhbEVxdWFsQXJlYVJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gMiAqIGFzaW4oeiAvIDIpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihhemltdXRoYWxFcXVhbEFyZWFSYXcpXG4gICAgICAuc2NhbGUoMTI0Ljc1KVxuICAgICAgLmNsaXBBbmdsZSgxODAgLSAxZS0zKTtcbn1cbiIsImltcG9ydCB7YWNvcywgc2lufSBmcm9tIFwiLi4vbWF0aFwiO1xuaW1wb3J0IHthemltdXRoYWxSYXcsIGF6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgdmFyIGF6aW11dGhhbEVxdWlkaXN0YW50UmF3ID0gYXppbXV0aGFsUmF3KGZ1bmN0aW9uKGMpIHtcbiAgcmV0dXJuIChjID0gYWNvcyhjKSkgJiYgYyAvIHNpbihjKTtcbn0pO1xuXG5hemltdXRoYWxFcXVpZGlzdGFudFJhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoZnVuY3Rpb24oeikge1xuICByZXR1cm4gejtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oYXppbXV0aGFsRXF1aWRpc3RhbnRSYXcpXG4gICAgICAuc2NhbGUoNzkuNDE4OClcbiAgICAgIC5jbGlwQW5nbGUoMTgwIC0gMWUtMyk7XG59XG4iLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHBpLCB0YW4sIHRhdX0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCByb3RhdGlvbiBmcm9tIFwiLi4vcm90YXRpb25cIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKV07XG59XG5cbm1lcmNhdG9yUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgcmV0dXJuIFt4LCAyICogYXRhbihleHAoeSkpIC0gaGFsZlBpXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbWVyY2F0b3JQcm9qZWN0aW9uKG1lcmNhdG9yUmF3KVxuICAgICAgLnNjYWxlKDk2MSAvIHRhdSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJjYXRvclByb2plY3Rpb24ocHJvamVjdCkge1xuICB2YXIgbSA9IHByb2plY3Rpb24ocHJvamVjdCksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHNjYWxlID0gbS5zY2FsZSxcbiAgICAgIHRyYW5zbGF0ZSA9IG0udHJhbnNsYXRlLFxuICAgICAgY2xpcEV4dGVudCA9IG0uY2xpcEV4dGVudCxcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MTsgLy8gY2xpcCBleHRlbnRcblxuICBtLnNjYWxlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHNjYWxlKF8pLCByZWNsaXAoKSkgOiBzY2FsZSgpO1xuICB9O1xuXG4gIG0udHJhbnNsYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHRyYW5zbGF0ZShfKSwgcmVjbGlwKCkpIDogdHJhbnNsYXRlKCk7XG4gIH07XG5cbiAgbS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyKF8pLCByZWNsaXAoKSkgOiBjZW50ZXIoKTtcbiAgfTtcblxuICBtLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoKF8gPT0gbnVsbCA/IHgwID0geTAgPSB4MSA9IHkxID0gbnVsbCA6ICh4MCA9ICtfWzBdWzBdLCB5MCA9ICtfWzBdWzFdLCB4MSA9ICtfWzFdWzBdLCB5MSA9ICtfWzFdWzFdKSksIHJlY2xpcCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVjbGlwKCkge1xuICAgIHZhciBrID0gcGkgKiBzY2FsZSgpLFxuICAgICAgICB0ID0gbShyb3RhdGlvbihtLnJvdGF0ZSgpKS5pbnZlcnQoWzAsIDBdKSk7XG4gICAgcmV0dXJuIGNsaXBFeHRlbnQoeDAgPT0gbnVsbFxuICAgICAgICA/IFtbdFswXSAtIGssIHRbMV0gLSBrXSwgW3RbMF0gKyBrLCB0WzFdICsga11dIDogcHJvamVjdCA9PT0gbWVyY2F0b3JSYXdcbiAgICAgICAgPyBbW01hdGgubWF4KHRbMF0gLSBrLCB4MCksIHkwXSwgW01hdGgubWluKHRbMF0gKyBrLCB4MSksIHkxXV1cbiAgICAgICAgOiBbW3gwLCBNYXRoLm1heCh0WzFdIC0gaywgeTApXSwgW3gxLCBNYXRoLm1pbih0WzFdICsgaywgeTEpXV0pO1xuICB9XG5cbiAgcmV0dXJuIHJlY2xpcCgpO1xufVxuIiwiaW1wb3J0IHByb2plY3Rpb24gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGVxdWlyZWN0YW5ndWxhclJhdyhsYW1iZGEsIHBoaSkge1xuICByZXR1cm4gW2xhbWJkYSwgcGhpXTtcbn1cblxuZXF1aXJlY3Rhbmd1bGFyUmF3LmludmVydCA9IGVxdWlyZWN0YW5ndWxhclJhdztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKGVxdWlyZWN0YW5ndWxhclJhdylcbiAgICAgIC5zY2FsZSgxNTIuNjMpO1xufVxuIiwiaW1wb3J0IHthYnMsIGF0YW4yLCBjb3MsIGVwc2lsb24sIHNpZ24sIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7Y29uaWNQcm9qZWN0aW9ufSBmcm9tIFwiLi9jb25pY1wiO1xuaW1wb3J0IHtlcXVpcmVjdGFuZ3VsYXJSYXd9IGZyb20gXCIuL2VxdWlyZWN0YW5ndWxhclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gY29uaWNFcXVpZGlzdGFudFJhdyh5MCwgeTEpIHtcbiAgdmFyIGN5MCA9IGNvcyh5MCksXG4gICAgICBuID0geTAgPT09IHkxID8gc2luKHkwKSA6IChjeTAgLSBjb3MoeTEpKSAvICh5MSAtIHkwKSxcbiAgICAgIGcgPSBjeTAgLyBuICsgeTA7XG5cbiAgaWYgKGFicyhuKSA8IGVwc2lsb24pIHJldHVybiBlcXVpcmVjdGFuZ3VsYXJSYXc7XG5cbiAgZnVuY3Rpb24gcHJvamVjdCh4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHksIG54ID0gbiAqIHg7XG4gICAgcmV0dXJuIFtneSAqIHNpbihueCksIGcgLSBneSAqIGNvcyhueCldO1xuICB9XG5cbiAgcHJvamVjdC5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIGd5ID0gZyAtIHk7XG4gICAgcmV0dXJuIFthdGFuMih4LCBhYnMoZ3kpKSAvIG4gKiBzaWduKGd5KSwgZyAtIHNpZ24obikgKiBzcXJ0KHggKiB4ICsgZ3kgKiBneSldO1xuICB9O1xuXG4gIHJldHVybiBwcm9qZWN0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGNvbmljUHJvamVjdGlvbihjb25pY0VxdWlkaXN0YW50UmF3KVxuICAgICAgLnNjYWxlKDEzMS4xNTQpXG4gICAgICAuY2VudGVyKFswLCAxMy45Mzg5XSk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGNvcywgZXBzaWxvbjIsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxudmFyIEExID0gMS4zNDAyNjQsXG4gICAgQTIgPSAtMC4wODExMDYsXG4gICAgQTMgPSAwLjAwMDg5MyxcbiAgICBBNCA9IDAuMDAzNzk2LFxuICAgIE0gPSBzcXJ0KDMpIC8gMixcbiAgICBpdGVyYXRpb25zID0gMTI7XG5cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbEVhcnRoUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBsID0gYXNpbihNICogc2luKHBoaSkpLCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgcmV0dXJuIFtcbiAgICBsYW1iZGEgKiBjb3MobCkgLyAoTSAqIChBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpKSksXG4gICAgbCAqIChBMSArIEEyICogbDIgKyBsNiAqIChBMyArIEE0ICogbDIpKVxuICBdO1xufVxuXG5lcXVhbEVhcnRoUmF3LmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgdmFyIGwgPSB5LCBsMiA9IGwgKiBsLCBsNiA9IGwyICogbDIgKiBsMjtcbiAgZm9yICh2YXIgaSA9IDAsIGRlbHRhLCBmeSwgZnB5OyBpIDwgaXRlcmF0aW9uczsgKytpKSB7XG4gICAgZnkgPSBsICogKEExICsgQTIgKiBsMiArIGw2ICogKEEzICsgQTQgKiBsMikpIC0geTtcbiAgICBmcHkgPSBBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpO1xuICAgIGwgLT0gZGVsdGEgPSBmeSAvIGZweSwgbDIgPSBsICogbCwgbDYgPSBsMiAqIGwyICogbDI7XG4gICAgaWYgKGFicyhkZWx0YSkgPCBlcHNpbG9uMikgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIFtcbiAgICBNICogeCAqIChBMSArIDMgKiBBMiAqIGwyICsgbDYgKiAoNyAqIEEzICsgOSAqIEE0ICogbDIpKSAvIGNvcyhsKSxcbiAgICBhc2luKHNpbihsKSAvIE0pXG4gIF07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oZXF1YWxFYXJ0aFJhdylcbiAgICAgIC5zY2FsZSgxNzcuMTU4KTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZ25vbW9uaWNSYXcoeCwgeSkge1xuICB2YXIgY3kgPSBjb3MoeSksIGsgPSBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5nbm9tb25pY1Jhdy5pbnZlcnQgPSBhemltdXRoYWxJbnZlcnQoYXRhbik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihnbm9tb25pY1JhdylcbiAgICAgIC5zY2FsZSgxNDQuMDQ5KVxuICAgICAgLmNsaXBBbmdsZSg2MCk7XG59XG4iLCJpbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuLi9tYXRoXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBuYXR1cmFsRWFydGgxUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gIHJldHVybiBbXG4gICAgbGFtYmRhICogKDAuODcwNyAtIDAuMTMxOTc5ICogcGhpMiArIHBoaTQgKiAoLTAuMDEzNzkxICsgcGhpNCAqICgwLjAwMzk3MSAqIHBoaTIgLSAwLjAwMTUyOSAqIHBoaTQpKSksXG4gICAgcGhpICogKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSArIHBoaTQgKiAoLTAuMDQ0NDc1ICsgMC4wMjg4NzQgKiBwaGkyIC0gMC4wMDU5MTYgKiBwaGk0KSkpXG4gIF07XG59XG5cbm5hdHVyYWxFYXJ0aDFSYXcuaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICB2YXIgcGhpID0geSwgaSA9IDI1LCBkZWx0YTtcbiAgZG8ge1xuICAgIHZhciBwaGkyID0gcGhpICogcGhpLCBwaGk0ID0gcGhpMiAqIHBoaTI7XG4gICAgcGhpIC09IGRlbHRhID0gKHBoaSAqICgxLjAwNzIyNiArIHBoaTIgKiAoMC4wMTUwODUgKyBwaGk0ICogKC0wLjA0NDQ3NSArIDAuMDI4ODc0ICogcGhpMiAtIDAuMDA1OTE2ICogcGhpNCkpKSAtIHkpIC9cbiAgICAgICAgKDEuMDA3MjI2ICsgcGhpMiAqICgwLjAxNTA4NSAqIDMgKyBwaGk0ICogKC0wLjA0NDQ3NSAqIDcgKyAwLjAyODg3NCAqIDkgKiBwaGkyIC0gMC4wMDU5MTYgKiAxMSAqIHBoaTQpKSk7XG4gIH0gd2hpbGUgKGFicyhkZWx0YSkgPiBlcHNpbG9uICYmIC0taSA+IDApO1xuICByZXR1cm4gW1xuICAgIHggLyAoMC44NzA3ICsgKHBoaTIgPSBwaGkgKiBwaGkpICogKC0wLjEzMTk3OSArIHBoaTIgKiAoLTAuMDEzNzkxICsgcGhpMiAqIHBoaTIgKiBwaGkyICogKDAuMDAzOTcxIC0gMC4wMDE1MjkgKiBwaGkyKSkpKSxcbiAgICBwaGlcbiAgXTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcHJvamVjdGlvbihuYXR1cmFsRWFydGgxUmF3KVxuICAgICAgLnNjYWxlKDE3NS4yOTUpO1xufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIGVwc2lsb24sIHNpbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWxcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2Nvcyh5KSAqIHNpbih4KSwgc2luKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uKTtcbn1cbiIsImltcG9ydCB7YXRhbiwgY29zLCBzaW59IGZyb20gXCIuLi9tYXRoXCI7XG5pbXBvcnQge2F6aW11dGhhbEludmVydH0gZnJvbSBcIi4vYXppbXV0aGFsXCI7XG5pbXBvcnQgcHJvamVjdGlvbiBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RlcmVvZ3JhcGhpY1Jhdyh4LCB5KSB7XG4gIHZhciBjeSA9IGNvcyh5KSwgayA9IDEgKyBjb3MoeCkgKiBjeTtcbiAgcmV0dXJuIFtjeSAqIHNpbih4KSAvIGssIHNpbih5KSAvIGtdO1xufVxuXG5zdGVyZW9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChmdW5jdGlvbih6KSB7XG4gIHJldHVybiAyICogYXRhbih6KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHByb2plY3Rpb24oc3RlcmVvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNTApXG4gICAgICAuY2xpcEFuZ2xlKDE0Mik7XG59XG4iLCJpbXBvcnQge2F0YW4sIGV4cCwgaGFsZlBpLCBsb2csIHRhbn0gZnJvbSBcIi4uL21hdGhcIjtcbmltcG9ydCB7bWVyY2F0b3JQcm9qZWN0aW9ufSBmcm9tIFwiLi9tZXJjYXRvclwiO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnN2ZXJzZU1lcmNhdG9yUmF3KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbbG9nKHRhbigoaGFsZlBpICsgcGhpKSAvIDIpKSwgLWxhbWJkYV07XG59XG5cbnRyYW5zdmVyc2VNZXJjYXRvclJhdy5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gIHJldHVybiBbLXksIDIgKiBhdGFuKGV4cCh4KSkgLSBoYWxmUGldO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBtID0gbWVyY2F0b3JQcm9qZWN0aW9uKHRyYW5zdmVyc2VNZXJjYXRvclJhdyksXG4gICAgICBjZW50ZXIgPSBtLmNlbnRlcixcbiAgICAgIHJvdGF0ZSA9IG0ucm90YXRlO1xuXG4gIG0uY2VudGVyID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gY2VudGVyKFstX1sxXSwgX1swXV0pIDogKF8gPSBjZW50ZXIoKSwgW19bMV0sIC1fWzBdXSk7XG4gIH07XG5cbiAgbS5yb3RhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyByb3RhdGUoW19bMF0sIF9bMV0sIF8ubGVuZ3RoID4gMiA/IF9bMl0gKyA5MCA6IDkwXSkgOiAoXyA9IHJvdGF0ZSgpLCBbX1swXSwgX1sxXSwgX1syXSAtIDkwXSk7XG4gIH07XG5cbiAgcmV0dXJuIHJvdGF0ZShbMCwgMCwgOTBdKVxuICAgICAgLnNjYWxlKDE1OS4xNTUpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZ1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihjb21wYXJlKSB7XG4gIGlmIChjb21wYXJlLmxlbmd0aCA9PT0gMSkgY29tcGFyZSA9IGFzY2VuZGluZ0NvbXBhcmF0b3IoY29tcGFyZSk7XG4gIHJldHVybiB7XG4gICAgbGVmdDogZnVuY3Rpb24oYSwgeCwgbG8sIGhpKSB7XG4gICAgICBpZiAobG8gPT0gbnVsbCkgbG8gPSAwO1xuICAgICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgICB2YXIgbWlkID0gbG8gKyBoaSA+Pj4gMTtcbiAgICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgICAgZWxzZSBoaSA9IG1pZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsbztcbiAgICB9LFxuICAgIHJpZ2h0OiBmdW5jdGlvbihhLCB4LCBsbywgaGkpIHtcbiAgICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICAgIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgICAgIHZhciBtaWQgPSBsbyArIGhpID4+PiAxO1xuICAgICAgICBpZiAoY29tcGFyZShhW21pZF0sIHgpID4gMCkgaGkgPSBtaWQ7XG4gICAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxvO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gYXNjZW5kaW5nQ29tcGFyYXRvcihmKSB7XG4gIHJldHVybiBmdW5jdGlvbihkLCB4KSB7XG4gICAgcmV0dXJuIGFzY2VuZGluZyhmKGQpLCB4KTtcbiAgfTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3JcIjtcblxudmFyIGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgdmFyIGJpc2VjdFJpZ2h0ID0gYXNjZW5kaW5nQmlzZWN0LnJpZ2h0O1xuZXhwb3J0IHZhciBiaXNlY3RMZWZ0ID0gYXNjZW5kaW5nQmlzZWN0LmxlZnQ7XG5leHBvcnQgZGVmYXVsdCBiaXNlY3RSaWdodDtcbiIsInZhciBhcnJheSA9IEFycmF5LnByb3RvdHlwZTtcblxuZXhwb3J0IHZhciBzbGljZSA9IGFycmF5LnNsaWNlO1xuZXhwb3J0IHZhciBtYXAgPSBhcnJheS5tYXA7XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgKiBzdGVwKTtcbiAgICB0aWNrcyA9IG5ldyBBcnJheShuID0gTWF0aC5jZWlsKHN0YXJ0IC0gc3RvcCArIDEpKTtcbiAgICB3aGlsZSAoKytpIDwgbikgdGlja3NbaV0gPSAoc3RhcnQgLSBpKSAvIHN0ZXA7XG4gIH1cblxuICBpZiAocmV2ZXJzZSkgdGlja3MucmV2ZXJzZSgpO1xuXG4gIHJldHVybiB0aWNrcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tJbmNyZW1lbnQoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwID0gKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBwb3dlciA9IE1hdGguZmxvb3IoTWF0aC5sb2coc3RlcCkgLyBNYXRoLkxOMTApLFxuICAgICAgZXJyb3IgPSBzdGVwIC8gTWF0aC5wb3coMTAsIHBvd2VyKTtcbiAgcmV0dXJuIHBvd2VyID49IDBcbiAgICAgID8gKGVycm9yID49IGUxMCA/IDEwIDogZXJyb3IgPj0gZTUgPyA1IDogZXJyb3IgPj0gZTIgPyAyIDogMSkgKiBNYXRoLnBvdygxMCwgcG93ZXIpXG4gICAgICA6IC1NYXRoLnBvdygxMCwgLXBvd2VyKSAvIChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSB7XG4gIHZhciBzdGVwMCA9IE1hdGguYWJzKHN0b3AgLSBzdGFydCkgLyBNYXRoLm1heCgwLCBjb3VudCksXG4gICAgICBzdGVwMSA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXAwKSAvIE1hdGguTE4xMCkpLFxuICAgICAgZXJyb3IgPSBzdGVwMCAvIHN0ZXAxO1xuICBpZiAoZXJyb3IgPj0gZTEwKSBzdGVwMSAqPSAxMDtcbiAgZWxzZSBpZiAoZXJyb3IgPj0gZTUpIHN0ZXAxICo9IDU7XG4gIGVsc2UgaWYgKGVycm9yID49IGUyKSBzdGVwMSAqPSAyO1xuICByZXR1cm4gc3RvcCA8IHN0YXJ0ID8gLXN0ZXAxIDogc3RlcDE7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5pdFJhbmdlKGRvbWFpbiwgcmFuZ2UpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHRoaXMucmFuZ2UoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5yYW5nZShyYW5nZSkuZG9tYWluKGRvbWFpbik7IGJyZWFrO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdEludGVycG9sYXRvcihkb21haW4sIGludGVycG9sYXRvcikge1xuICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBjYXNlIDA6IGJyZWFrO1xuICAgIGNhc2UgMTogdGhpcy5pbnRlcnBvbGF0b3IoZG9tYWluKTsgYnJlYWs7XG4gICAgZGVmYXVsdDogdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKS5kb21haW4oZG9tYWluKTsgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdFwiO1xuXG5leHBvcnQgY29uc3QgaW1wbGljaXQgPSBTeW1ib2woXCJpbXBsaWNpdFwiKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkaW5hbCgpIHtcbiAgdmFyIGluZGV4ID0gbmV3IE1hcCgpLFxuICAgICAgZG9tYWluID0gW10sXG4gICAgICByYW5nZSA9IFtdLFxuICAgICAgdW5rbm93biA9IGltcGxpY2l0O1xuXG4gIGZ1bmN0aW9uIHNjYWxlKGQpIHtcbiAgICB2YXIga2V5ID0gZCArIFwiXCIsIGkgPSBpbmRleC5nZXQoa2V5KTtcbiAgICBpZiAoIWkpIHtcbiAgICAgIGlmICh1bmtub3duICE9PSBpbXBsaWNpdCkgcmV0dXJuIHVua25vd247XG4gICAgICBpbmRleC5zZXQoa2V5LCBpID0gZG9tYWluLnB1c2goZCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmFuZ2VbKGkgLSAxKSAlIHJhbmdlLmxlbmd0aF07XG4gIH1cblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gZG9tYWluLnNsaWNlKCk7XG4gICAgZG9tYWluID0gW10sIGluZGV4ID0gbmV3IE1hcCgpO1xuICAgIGZvciAoY29uc3QgdmFsdWUgb2YgXykge1xuICAgICAgY29uc3Qga2V5ID0gdmFsdWUgKyBcIlwiO1xuICAgICAgaWYgKGluZGV4LmhhcyhrZXkpKSBjb250aW51ZTtcbiAgICAgIGluZGV4LnNldChrZXksIGRvbWFpbi5wdXNoKHZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICBzY2FsZS5yYW5nZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYW5nZSA9IEFycmF5LmZyb20oXyksIHNjYWxlKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICBzY2FsZS5jb3B5ID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG9yZGluYWwoZG9tYWluLCByYW5nZSkudW5rbm93bih1bmtub3duKTtcbiAgfTtcblxuICBpbml0UmFuZ2UuYXBwbHkoc2NhbGUsIGFyZ3VtZW50cyk7XG5cbiAgcmV0dXJuIHNjYWxlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmVcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXgzID0gL14jKFswLTlhLWZdezN9KSQvLFxuICAgIHJlSGV4NiA9IC9eIyhbMC05YS1mXXs2fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnJnYigpLmRpc3BsYXlhYmxlKCk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuaGV4KCk7XG4gIH0sXG4gIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5yZ2IoKSArIFwiXCI7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG07XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXgzLmV4ZWMoZm9ybWF0KSkgPyAobSA9IHBhcnNlSW50KG1bMV0sIDE2KSwgbmV3IFJnYigobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweDBmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkpIC8vICNmMDBcbiAgICAgIDogKG0gPSByZUhleDYuZXhlYyhmb3JtYXQpKSA/IHJnYm4ocGFyc2VJbnQobVsxXSwgMTYpKSAvLyAjZmYwMDAwXG4gICAgICA6IChtID0gcmVSZ2JJbnRlZ2VyLmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0sIG1bMl0sIG1bM10sIDEpIC8vIHJnYigyNTUsIDAsIDApXG4gICAgICA6IChtID0gcmVSZ2JQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBuZXcgUmdiKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIDEpIC8vIHJnYigxMDAlLCAwJSwgMCUpXG4gICAgICA6IChtID0gcmVSZ2JhSW50ZWdlci5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdLCBtWzJdLCBtWzNdLCBtWzRdKSAvLyByZ2JhKDI1NSwgMCwgMCwgMSlcbiAgICAgIDogKG0gPSByZVJnYmFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyByZ2JhKG1bMV0gKiAyNTUgLyAxMDAsIG1bMl0gKiAyNTUgLyAxMDAsIG1bM10gKiAyNTUgLyAxMDAsIG1bNF0pIC8vIHJnYigxMDAlLCAwJSwgMCUsIDEpXG4gICAgICA6IChtID0gcmVIc2xQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIDEpIC8vIGhzbCgxMjAsIDUwJSwgNTAlKVxuICAgICAgOiAobSA9IHJlSHNsYVBlcmNlbnQuZXhlYyhmb3JtYXQpKSA/IGhzbGEobVsxXSwgbVsyXSAvIDEwMCwgbVszXSAvIDEwMCwgbVs0XSkgLy8gaHNsYSgxMjAsIDUwJSwgNTAlLCAxKVxuICAgICAgOiBuYW1lZC5oYXNPd25Qcm9wZXJ0eShmb3JtYXQpID8gcmdibihuYW1lZFtmb3JtYXRdKVxuICAgICAgOiBmb3JtYXQgPT09IFwidHJhbnNwYXJlbnRcIiA/IG5ldyBSZ2IoTmFOLCBOYU4sIE5hTiwgMClcbiAgICAgIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gcmdibihuKSB7XG4gIHJldHVybiBuZXcgUmdiKG4gPj4gMTYgJiAweGZmLCBuID4+IDggJiAweGZmLCBuICYgMHhmZiwgMSk7XG59XG5cbmZ1bmN0aW9uIHJnYmEociwgZywgYiwgYSkge1xuICBpZiAoYSA8PSAwKSByID0gZyA9IGIgPSBOYU47XG4gIHJldHVybiBuZXcgUmdiKHIsIGcsIGIsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiQ29udmVydChvKSB7XG4gIGlmICghKG8gaW5zdGFuY2VvZiBDb2xvcikpIG8gPSBjb2xvcihvKTtcbiAgaWYgKCFvKSByZXR1cm4gbmV3IFJnYjtcbiAgbyA9IG8ucmdiKCk7XG4gIHJldHVybiBuZXcgUmdiKG8uciwgby5nLCBvLmIsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IHJnYkNvbnZlcnQocikgOiBuZXcgUmdiKHIsIGcsIGIsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFJnYihyLCBnLCBiLCBvcGFjaXR5KSB7XG4gIHRoaXMuciA9ICtyO1xuICB0aGlzLmcgPSArZztcbiAgdGhpcy5iID0gK2I7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoUmdiLCByZ2IsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IFJnYih0aGlzLnIgKiBrLCB0aGlzLmcgKiBrLCB0aGlzLmIgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMuciAmJiB0aGlzLnIgPD0gMjU1KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmcgJiYgdGhpcy5nIDw9IDI1NSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5iICYmIHRoaXMuYiA8PSAyNTUpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGhleDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIFwiI1wiICsgaGV4KHRoaXMucikgKyBoZXgodGhpcy5nKSArIGhleCh0aGlzLmIpO1xuICB9LFxuICB0b1N0cmluZzogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJyZ2IoXCIgOiBcInJnYmEoXCIpXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuZykgfHwgMCkpICsgXCIsIFwiXG4gICAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMuYikgfHwgMCkpXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuZnVuY3Rpb24gaGV4KHZhbHVlKSB7XG4gIHZhbHVlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHZhbHVlKSB8fCAwKSk7XG4gIHJldHVybiAodmFsdWUgPCAxNiA/IFwiMFwiIDogXCJcIikgKyB2YWx1ZS50b1N0cmluZygxNik7XG59XG5cbmZ1bmN0aW9uIGhzbGEoaCwgcywgbCwgYSkge1xuICBpZiAoYSA8PSAwKSBoID0gcyA9IGwgPSBOYU47XG4gIGVsc2UgaWYgKGwgPD0gMCB8fCBsID49IDEpIGggPSBzID0gTmFOO1xuICBlbHNlIGlmIChzIDw9IDApIGggPSBOYU47XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbmV3IEhzbChvLmgsIG8ucywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBIc2w7XG4gIGlmIChvIGluc3RhbmNlb2YgSHNsKSByZXR1cm4gbztcbiAgbyA9IG8ucmdiKCk7XG4gIHZhciByID0gby5yIC8gMjU1LFxuICAgICAgZyA9IG8uZyAvIDI1NSxcbiAgICAgIGIgPSBvLmIgLyAyNTUsXG4gICAgICBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKSxcbiAgICAgIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpLFxuICAgICAgaCA9IE5hTixcbiAgICAgIHMgPSBtYXggLSBtaW4sXG4gICAgICBsID0gKG1heCArIG1pbikgLyAyO1xuICBpZiAocykge1xuICAgIGlmIChyID09PSBtYXgpIGggPSAoZyAtIGIpIC8gcyArIChnIDwgYikgKiA2O1xuICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaCA9IChiIC0gcikgLyBzICsgMjtcbiAgICBlbHNlIGggPSAociAtIGcpIC8gcyArIDQ7XG4gICAgcyAvPSBsIDwgMC41ID8gbWF4ICsgbWluIDogMiAtIG1heCAtIG1pbjtcbiAgICBoICo9IDYwO1xuICB9IGVsc2Uge1xuICAgIHMgPSBsID4gMCAmJiBsIDwgMSA/IDAgOiBoO1xuICB9XG4gIHJldHVybiBuZXcgSHNsKGgsIHMsIGwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoc2woaCwgcywgbCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhzbENvbnZlcnQoaCkgOiBuZXcgSHNsKGgsIHMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZnVuY3Rpb24gSHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMucyA9ICtzO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIc2wsIGhzbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGJyaWdodGVyIDogTWF0aC5wb3coYnJpZ2h0ZXIsIGspO1xuICAgIHJldHVybiBuZXcgSHNsKHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gZGFya2VyIDogTWF0aC5wb3coZGFya2VyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgaCA9IHRoaXMuaCAlIDM2MCArICh0aGlzLmggPCAwKSAqIDM2MCxcbiAgICAgICAgcyA9IGlzTmFOKGgpIHx8IGlzTmFOKHRoaXMucykgPyAwIDogdGhpcy5zLFxuICAgICAgICBsID0gdGhpcy5sLFxuICAgICAgICBtMiA9IGwgKyAobCA8IDAuNSA/IGwgOiAxIC0gbCkgKiBzLFxuICAgICAgICBtMSA9IDIgKiBsIC0gbTI7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBoc2wycmdiKGggPj0gMjQwID8gaCAtIDI0MCA6IGggKyAxMjAsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGgsIG0xLCBtMiksXG4gICAgICBoc2wycmdiKGggPCAxMjAgPyBoICsgMjQwIDogaCAtIDEyMCwgbTEsIG0yKSxcbiAgICAgIHRoaXMub3BhY2l0eVxuICAgICk7XG4gIH0sXG4gIGRpc3BsYXlhYmxlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKDAgPD0gdGhpcy5zICYmIHRoaXMucyA8PSAxIHx8IGlzTmFOKHRoaXMucykpXG4gICAgICAgICYmICgwIDw9IHRoaXMubCAmJiB0aGlzLmwgPD0gMSlcbiAgICAgICAgJiYgKDAgPD0gdGhpcy5vcGFjaXR5ICYmIHRoaXMub3BhY2l0eSA8PSAxKTtcbiAgfVxufSkpO1xuXG4vKiBGcm9tIEZ2RCAxMy4zNywgQ1NTIENvbG9yIE1vZHVsZSBMZXZlbCAzICovXG5mdW5jdGlvbiBoc2wycmdiKGgsIG0xLCBtMikge1xuICByZXR1cm4gKGggPCA2MCA/IG0xICsgKG0yIC0gbTEpICogaCAvIDYwXG4gICAgICA6IGggPCAxODAgPyBtMlxuICAgICAgOiBoIDwgMjQwID8gbTEgKyAobTIgLSBtMSkgKiAoMjQwIC0gaCkgLyA2MFxuICAgICAgOiBtMSkgKiAyNTU7XG59XG4iLCJleHBvcnQgdmFyIGRlZzJyYWQgPSBNYXRoLlBJIC8gMTgwO1xuZXhwb3J0IHZhciByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdifSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbi8vIGh0dHBzOi8vYmV0YS5vYnNlcnZhYmxlaHEuY29tL0BtYm9zdG9jay9sYWItYW5kLXJnYlxudmFyIEsgPSAxOCxcbiAgICBYbiA9IDAuOTY0MjIsXG4gICAgWW4gPSAxLFxuICAgIFpuID0gMC44MjUyMSxcbiAgICB0MCA9IDQgLyAyOSxcbiAgICB0MSA9IDYgLyAyOSxcbiAgICB0MiA9IDMgKiB0MSAqIHQxLFxuICAgIHQzID0gdDEgKiB0MSAqIHQxO1xuXG5mdW5jdGlvbiBsYWJDb252ZXJ0KG8pIHtcbiAgaWYgKG8gaW5zdGFuY2VvZiBMYWIpIHJldHVybiBuZXcgTGFiKG8ubCwgby5hLCBvLmIsIG8ub3BhY2l0eSk7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSB7XG4gICAgaWYgKGlzTmFOKG8uaCkpIHJldHVybiBuZXcgTGFiKG8ubCwgMCwgMCwgby5vcGFjaXR5KTtcbiAgICB2YXIgaCA9IG8uaCAqIGRlZzJyYWQ7XG4gICAgcmV0dXJuIG5ldyBMYWIoby5sLCBNYXRoLmNvcyhoKSAqIG8uYywgTWF0aC5zaW4oaCkgKiBvLmMsIG8ub3BhY2l0eSk7XG4gIH1cbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IHJnYjJscmdiKG8uciksXG4gICAgICBnID0gcmdiMmxyZ2Ioby5nKSxcbiAgICAgIGIgPSByZ2IybHJnYihvLmIpLFxuICAgICAgeSA9IHh5ejJsYWIoKDAuMjIyNTA0NSAqIHIgKyAwLjcxNjg3ODYgKiBnICsgMC4wNjA2MTY5ICogYikgLyBZbiksIHgsIHo7XG4gIGlmIChyID09PSBnICYmIGcgPT09IGIpIHggPSB6ID0geTsgZWxzZSB7XG4gICAgeCA9IHh5ejJsYWIoKDAuNDM2MDc0NyAqIHIgKyAwLjM4NTA2NDkgKiBnICsgMC4xNDMwODA0ICogYikgLyBYbik7XG4gICAgeiA9IHh5ejJsYWIoKDAuMDEzOTMyMiAqIHIgKyAwLjA5NzEwNDUgKiBnICsgMC43MTQxNzMzICogYikgLyBabik7XG4gIH1cbiAgcmV0dXJuIG5ldyBMYWIoMTE2ICogeSAtIDE2LCA1MDAgKiAoeCAtIHkpLCAyMDAgKiAoeSAtIHopLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JheShsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBuZXcgTGFiKGwsIDAsIDAsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFiKGwsIGEsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBsYWJDb252ZXJ0KGwpIDogbmV3IExhYihsLCBhLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBMYWIobCwgYSwgYiwgb3BhY2l0eSkge1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5hID0gK2E7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKExhYiwgbGFiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IExhYih0aGlzLmwgKyBLICogKGsgPT0gbnVsbCA/IDEgOiBrKSwgdGhpcy5hLCB0aGlzLmIsIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIHJldHVybiBuZXcgTGFiKHRoaXMubCAtIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLmEsIHRoaXMuYiwgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICB2YXIgeSA9ICh0aGlzLmwgKyAxNikgLyAxMTYsXG4gICAgICAgIHggPSBpc05hTih0aGlzLmEpID8geSA6IHkgKyB0aGlzLmEgLyA1MDAsXG4gICAgICAgIHogPSBpc05hTih0aGlzLmIpID8geSA6IHkgLSB0aGlzLmIgLyAyMDA7XG4gICAgeCA9IFhuICogbGFiMnh5eih4KTtcbiAgICB5ID0gWW4gKiBsYWIyeHl6KHkpO1xuICAgIHogPSBabiAqIGxhYjJ4eXooeik7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICBscmdiMnJnYiggMy4xMzM4NTYxICogeCAtIDEuNjE2ODY2NyAqIHkgLSAwLjQ5MDYxNDYgKiB6KSxcbiAgICAgIGxyZ2IycmdiKC0wLjk3ODc2ODQgKiB4ICsgMS45MTYxNDE1ICogeSArIDAuMDMzNDU0MCAqIHopLFxuICAgICAgbHJnYjJyZ2IoIDAuMDcxOTQ1MyAqIHggLSAwLjIyODk5MTQgKiB5ICsgMS40MDUyNDI3ICogeiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9XG59KSk7XG5cbmZ1bmN0aW9uIHh5ejJsYWIodCkge1xuICByZXR1cm4gdCA+IHQzID8gTWF0aC5wb3codCwgMSAvIDMpIDogdCAvIHQyICsgdDA7XG59XG5cbmZ1bmN0aW9uIGxhYjJ4eXoodCkge1xuICByZXR1cm4gdCA+IHQxID8gdCAqIHQgKiB0IDogdDIgKiAodCAtIHQwKTtcbn1cblxuZnVuY3Rpb24gbHJnYjJyZ2IoeCkge1xuICByZXR1cm4gMjU1ICogKHggPD0gMC4wMDMxMzA4ID8gMTIuOTIgKiB4IDogMS4wNTUgKiBNYXRoLnBvdyh4LCAxIC8gMi40KSAtIDAuMDU1KTtcbn1cblxuZnVuY3Rpb24gcmdiMmxyZ2IoeCkge1xuICByZXR1cm4gKHggLz0gMjU1KSA8PSAwLjA0MDQ1ID8geCAvIDEyLjkyIDogTWF0aC5wb3coKHggKyAwLjA1NSkgLyAxLjA1NSwgMi40KTtcbn1cblxuZnVuY3Rpb24gaGNsQ29udmVydChvKSB7XG4gIGlmIChvIGluc3RhbmNlb2YgSGNsKSByZXR1cm4gbmV3IEhjbChvLmgsIG8uYywgby5sLCBvLm9wYWNpdHkpO1xuICBpZiAoIShvIGluc3RhbmNlb2YgTGFiKSkgbyA9IGxhYkNvbnZlcnQobyk7XG4gIGlmIChvLmEgPT09IDAgJiYgby5iID09PSAwKSByZXR1cm4gbmV3IEhjbChOYU4sIDAsIG8ubCwgby5vcGFjaXR5KTtcbiAgdmFyIGggPSBNYXRoLmF0YW4yKG8uYiwgby5hKSAqIHJhZDJkZWc7XG4gIHJldHVybiBuZXcgSGNsKGggPCAwID8gaCArIDM2MCA6IGgsIE1hdGguc3FydChvLmEgKiBvLmEgKyBvLmIgKiBvLmIpLCBvLmwsIG8ub3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsY2gobCwgYywgaCwgb3BhY2l0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGhjbENvbnZlcnQobCkgOiBuZXcgSGNsKGgsIGMsIGwsIG9wYWNpdHkgPT0gbnVsbCA/IDEgOiBvcGFjaXR5KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhjbChoLCBjLCBsLCBvcGFjaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gaGNsQ29udmVydChoKSA6IG5ldyBIY2woaCwgYywgbCwgb3BhY2l0eSA9PSBudWxsID8gMSA6IG9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gSGNsKGgsIGMsIGwsIG9wYWNpdHkpIHtcbiAgdGhpcy5oID0gK2g7XG4gIHRoaXMuYyA9ICtjO1xuICB0aGlzLmwgPSArbDtcbiAgdGhpcy5vcGFjaXR5ID0gK29wYWNpdHk7XG59XG5cbmRlZmluZShIY2wsIGhjbCwgZXh0ZW5kKENvbG9yLCB7XG4gIGJyaWdodGVyOiBmdW5jdGlvbihrKSB7XG4gICAgcmV0dXJuIG5ldyBIY2wodGhpcy5oLCB0aGlzLmMsIHRoaXMubCArIEsgKiAoayA9PSBudWxsID8gMSA6IGspLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICBkYXJrZXI6IGZ1bmN0aW9uKGspIHtcbiAgICByZXR1cm4gbmV3IEhjbCh0aGlzLmgsIHRoaXMuYywgdGhpcy5sIC0gSyAqIChrID09IG51bGwgPyAxIDogayksIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGxhYkNvbnZlcnQodGhpcykucmdiKCk7XG4gIH1cbn0pKTtcbiIsImltcG9ydCBkZWZpbmUsIHtleHRlbmR9IGZyb20gXCIuL2RlZmluZVwiO1xuaW1wb3J0IHtDb2xvciwgcmdiQ29udmVydCwgUmdiLCBkYXJrZXIsIGJyaWdodGVyfSBmcm9tIFwiLi9jb2xvclwiO1xuaW1wb3J0IHtkZWcycmFkLCByYWQyZGVnfSBmcm9tIFwiLi9tYXRoXCI7XG5cbnZhciBBID0gLTAuMTQ4NjEsXG4gICAgQiA9ICsxLjc4Mjc3LFxuICAgIEMgPSAtMC4yOTIyNyxcbiAgICBEID0gLTAuOTA2NDksXG4gICAgRSA9ICsxLjk3Mjk0LFxuICAgIEVEID0gRSAqIEQsXG4gICAgRUIgPSBFICogQixcbiAgICBCQ19EQSA9IEIgKiBDIC0gRCAqIEE7XG5cbmZ1bmN0aW9uIGN1YmVoZWxpeENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEN1YmVoZWxpeCkgcmV0dXJuIG5ldyBDdWJlaGVsaXgoby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIFJnYikpIG8gPSByZ2JDb252ZXJ0KG8pO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbCA9IChCQ19EQSAqIGIgKyBFRCAqIHIgLSBFQiAqIGcpIC8gKEJDX0RBICsgRUQgLSBFQiksXG4gICAgICBibCA9IGIgLSBsLFxuICAgICAgayA9IChFICogKGcgLSBsKSAtIEMgKiBibCkgLyBELFxuICAgICAgcyA9IE1hdGguc3FydChrICogayArIGJsICogYmwpIC8gKEUgKiBsICogKDEgLSBsKSksIC8vIE5hTiBpZiBsPTAgb3IgbD0xXG4gICAgICBoID0gcyA/IE1hdGguYXRhbjIoaywgYmwpICogcmFkMmRlZyAtIDEyMCA6IE5hTjtcbiAgcmV0dXJuIG5ldyBDdWJlaGVsaXgoaCA8IDAgPyBoICsgMzYwIDogaCwgcywgbCwgby5vcGFjaXR5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3ViZWhlbGl4KGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBjdWJlaGVsaXhDb252ZXJ0KGgpIDogbmV3IEN1YmVoZWxpeChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBDdWJlaGVsaXgoaCwgcywgbCwgb3BhY2l0eSkge1xuICB0aGlzLmggPSAraDtcbiAgdGhpcy5zID0gK3M7XG4gIHRoaXMubCA9ICtsO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKEN1YmVoZWxpeCwgY3ViZWhlbGl4LCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBDdWJlaGVsaXgodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIGRhcmtlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBkYXJrZXIgOiBNYXRoLnBvdyhkYXJrZXIsIGspO1xuICAgIHJldHVybiBuZXcgQ3ViZWhlbGl4KHRoaXMuaCwgdGhpcy5zLCB0aGlzLmwgKiBrLCB0aGlzLm9wYWNpdHkpO1xuICB9LFxuICByZ2I6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBoID0gaXNOYU4odGhpcy5oKSA/IDAgOiAodGhpcy5oICsgMTIwKSAqIGRlZzJyYWQsXG4gICAgICAgIGwgPSArdGhpcy5sLFxuICAgICAgICBhID0gaXNOYU4odGhpcy5zKSA/IDAgOiB0aGlzLnMgKiBsICogKDEgLSBsKSxcbiAgICAgICAgY29zaCA9IE1hdGguY29zKGgpLFxuICAgICAgICBzaW5oID0gTWF0aC5zaW4oaCk7XG4gICAgcmV0dXJuIG5ldyBSZ2IoXG4gICAgICAyNTUgKiAobCArIGEgKiAoQSAqIGNvc2ggKyBCICogc2luaCkpLFxuICAgICAgMjU1ICogKGwgKyBhICogKEMgKiBjb3NoICsgRCAqIHNpbmgpKSxcbiAgICAgIDI1NSAqIChsICsgYSAqIChFICogY29zaCkpLFxuICAgICAgdGhpcy5vcGFjaXR5XG4gICAgKTtcbiAgfVxufSkpO1xuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50XCI7XG5cbmZ1bmN0aW9uIGxpbmVhcihhLCBkKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyB0ICogZDtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZXhwb25lbnRpYWwoYSwgYiwgeSkge1xuICByZXR1cm4gYSA9IE1hdGgucG93KGEsIHkpLCBiID0gTWF0aC5wb3coYiwgeSkgLSBhLCB5ID0gMSAvIHksIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3coYSArIHQgKiBiLCB5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGh1ZShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQgPiAxODAgfHwgZCA8IC0xODAgPyBkIC0gMzYwICogTWF0aC5yb3VuZChkIC8gMzYwKSA6IGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnYW1tYSh5KSB7XG4gIHJldHVybiAoeSA9ICt5KSA9PT0gMSA/IG5vZ2FtbWEgOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIgLSBhID8gZXhwb25lbnRpYWwoYSwgYiwgeSkgOiBjb25zdGFudChpc05hTihhKSA/IGIgOiBhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9nYW1tYShhLCBiKSB7XG4gIHZhciBkID0gYiAtIGE7XG4gIHJldHVybiBkID8gbGluZWFyKGEsIGQpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG59XG4iLCJpbXBvcnQge3JnYiBhcyBjb2xvclJnYn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgYmFzaXMgZnJvbSBcIi4vYmFzaXNcIjtcbmltcG9ydCBiYXNpc0Nsb3NlZCBmcm9tIFwiLi9iYXNpc0Nsb3NlZFwiO1xuaW1wb3J0IG5vZ2FtbWEsIHtnYW1tYX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIHJnYkdhbW1hKHkpIHtcbiAgdmFyIGNvbG9yID0gZ2FtbWEoeSk7XG5cbiAgZnVuY3Rpb24gcmdiKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgciA9IGNvbG9yKChzdGFydCA9IGNvbG9yUmdiKHN0YXJ0KSkuciwgKGVuZCA9IGNvbG9yUmdiKGVuZCkpLnIpLFxuICAgICAgICBnID0gY29sb3Ioc3RhcnQuZywgZW5kLmcpLFxuICAgICAgICBiID0gY29sb3Ioc3RhcnQuYiwgZW5kLmIpLFxuICAgICAgICBvcGFjaXR5ID0gbm9nYW1tYShzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LnIgPSByKHQpO1xuICAgICAgc3RhcnQuZyA9IGcodCk7XG4gICAgICBzdGFydC5iID0gYih0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG5cbiAgcmdiLmdhbW1hID0gcmdiR2FtbWE7XG5cbiAgcmV0dXJuIHJnYjtcbn0pKDEpO1xuXG5mdW5jdGlvbiByZ2JTcGxpbmUoc3BsaW5lKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xvcnMpIHtcbiAgICB2YXIgbiA9IGNvbG9ycy5sZW5ndGgsXG4gICAgICAgIHIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGcgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGIgPSBuZXcgQXJyYXkobiksXG4gICAgICAgIGksIGNvbG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGNvbG9yID0gY29sb3JSZ2IoY29sb3JzW2ldKTtcbiAgICAgIHJbaV0gPSBjb2xvci5yIHx8IDA7XG4gICAgICBnW2ldID0gY29sb3IuZyB8fCAwO1xuICAgICAgYltpXSA9IGNvbG9yLmIgfHwgMDtcbiAgICB9XG4gICAgciA9IHNwbGluZShyKTtcbiAgICBnID0gc3BsaW5lKGcpO1xuICAgIGIgPSBzcGxpbmUoYik7XG4gICAgY29sb3Iub3BhY2l0eSA9IDE7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIGNvbG9yLnIgPSByKHQpO1xuICAgICAgY29sb3IuZyA9IGcodCk7XG4gICAgICBjb2xvci5iID0gYih0KTtcbiAgICAgIHJldHVybiBjb2xvciArIFwiXCI7XG4gICAgfTtcbiAgfTtcbn1cblxuZXhwb3J0IHZhciByZ2JCYXNpcyA9IHJnYlNwbGluZShiYXNpcyk7XG5leHBvcnQgdmFyIHJnYkJhc2lzQ2xvc2VkID0gcmdiU3BsaW5lKGJhc2lzQ2xvc2VkKTtcbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKyBiICogdDtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJpbXBvcnQgZGVjb21wb3NlLCB7aWRlbnRpdHl9IGZyb20gXCIuL2RlY29tcG9zZVwiO1xuXG52YXIgY3NzTm9kZSxcbiAgICBjc3NSb290LFxuICAgIGNzc1ZpZXcsXG4gICAgc3ZnTm9kZTtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ3NzKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gXCJub25lXCIpIHJldHVybiBpZGVudGl0eTtcbiAgaWYgKCFjc3NOb2RlKSBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIkRJVlwiKSwgY3NzUm9vdCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCwgY3NzVmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuICBjc3NOb2RlLnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlO1xuICB2YWx1ZSA9IGNzc1ZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjc3NSb290LmFwcGVuZENoaWxkKGNzc05vZGUpLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKFwidHJhbnNmb3JtXCIpO1xuICBjc3NSb290LnJlbW92ZUNoaWxkKGNzc05vZGUpO1xuICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDcsIC0xKS5zcGxpdChcIixcIik7XG4gIHJldHVybiBkZWNvbXBvc2UoK3ZhbHVlWzBdLCArdmFsdWVbMV0sICt2YWx1ZVsyXSwgK3ZhbHVlWzNdLCArdmFsdWVbNF0sICt2YWx1ZVs1XSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYlwiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuL2FycmF5XCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlclwiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3RcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgdCA9IHR5cGVvZiBiLCBjO1xuICByZXR1cm4gYiA9PSBudWxsIHx8IHQgPT09IFwiYm9vbGVhblwiID8gY29uc3RhbnQoYilcbiAgICAgIDogKHQgPT09IFwibnVtYmVyXCIgPyBudW1iZXJcbiAgICAgIDogdCA9PT0gXCJzdHJpbmdcIiA/ICgoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgcmdiKSA6IHN0cmluZylcbiAgICAgIDogYiBpbnN0YW5jZW9mIGNvbG9yID8gcmdiXG4gICAgICA6IGIgaW5zdGFuY2VvZiBEYXRlID8gZGF0ZVxuICAgICAgOiBBcnJheS5pc0FycmF5KGIpID8gYXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiAtPSBhLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICsgYiAqIHQpLCBkO1xuICB9O1xufVxuIiwiaW1wb3J0IHZhbHVlIGZyb20gXCIuL3ZhbHVlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCB2YWx1ZSBmcm9tIFwiLi92YWx1ZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBpID0ge30sXG4gICAgICBjID0ge30sXG4gICAgICBrO1xuXG4gIGlmIChhID09PSBudWxsIHx8IHR5cGVvZiBhICE9PSBcIm9iamVjdFwiKSBhID0ge307XG4gIGlmIChiID09PSBudWxsIHx8IHR5cGVvZiBiICE9PSBcIm9iamVjdFwiKSBiID0ge307XG5cbiAgZm9yIChrIGluIGIpIHtcbiAgICBpZiAoayBpbiBhKSB7XG4gICAgICBpW2tdID0gdmFsdWUoYVtrXSwgYltrXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNba10gPSBiW2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgZm9yIChrIGluIGkpIGNba10gPSBpW2tdKHQpO1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA9ICthLCBiIC09IGEsIGZ1bmN0aW9uKHQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChhICsgYiAqIHQpO1xuICB9O1xufVxuIiwidmFyIGRlZ3JlZXMgPSAxODAgLyBNYXRoLlBJO1xuXG5leHBvcnQgdmFyIGlkZW50aXR5ID0ge1xuICB0cmFuc2xhdGVYOiAwLFxuICB0cmFuc2xhdGVZOiAwLFxuICByb3RhdGU6IDAsXG4gIHNrZXdYOiAwLFxuICBzY2FsZVg6IDEsXG4gIHNjYWxlWTogMVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYiwgYywgZCwgZSwgZikge1xuICB2YXIgc2NhbGVYLCBzY2FsZVksIHNrZXdYO1xuICBpZiAoc2NhbGVYID0gTWF0aC5zcXJ0KGEgKiBhICsgYiAqIGIpKSBhIC89IHNjYWxlWCwgYiAvPSBzY2FsZVg7XG4gIGlmIChza2V3WCA9IGEgKiBjICsgYiAqIGQpIGMgLT0gYSAqIHNrZXdYLCBkIC09IGIgKiBza2V3WDtcbiAgaWYgKHNjYWxlWSA9IE1hdGguc3FydChjICogYyArIGQgKiBkKSkgYyAvPSBzY2FsZVksIGQgLz0gc2NhbGVZLCBza2V3WCAvPSBzY2FsZVk7XG4gIGlmIChhICogZCA8IGIgKiBjKSBhID0gLWEsIGIgPSAtYiwgc2tld1ggPSAtc2tld1gsIHNjYWxlWCA9IC1zY2FsZVg7XG4gIHJldHVybiB7XG4gICAgdHJhbnNsYXRlWDogZSxcbiAgICB0cmFuc2xhdGVZOiBmLFxuICAgIHJvdGF0ZTogTWF0aC5hdGFuMihiLCBhKSAqIGRlZ3JlZXMsXG4gICAgc2tld1g6IE1hdGguYXRhbihza2V3WCkgKiBkZWdyZWVzLFxuICAgIHNjYWxlWDogc2NhbGVYLFxuICAgIHNjYWxlWTogc2NhbGVZXG4gIH07XG59XG4iLCJpbXBvcnQgbnVtYmVyIGZyb20gXCIuLi9udW1iZXJcIjtcbmltcG9ydCB7cGFyc2VDc3MsIHBhcnNlU3ZnfSBmcm9tIFwiLi9wYXJzZVwiO1xuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZSwgcHhDb21tYSwgcHhQYXJlbiwgZGVnUGFyZW4pIHtcblxuICBmdW5jdGlvbiBwb3Aocykge1xuICAgIHJldHVybiBzLmxlbmd0aCA/IHMucG9wKCkgKyBcIiBcIiA6IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiB0cmFuc2xhdGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2goXCJ0cmFuc2xhdGUoXCIsIG51bGwsIHB4Q29tbWEsIG51bGwsIHB4UGFyZW4pO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiB8fCB5Yikge1xuICAgICAgcy5wdXNoKFwidHJhbnNsYXRlKFwiICsgeGIgKyBweENvbW1hICsgeWIgKyBweFBhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByb3RhdGUoYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBpZiAoYSAtIGIgPiAxODApIGIgKz0gMzYwOyBlbHNlIGlmIChiIC0gYSA+IDE4MCkgYSArPSAzNjA7IC8vIHNob3J0ZXN0IHBhdGhcbiAgICAgIHEucHVzaCh7aTogcy5wdXNoKHBvcChzKSArIFwicm90YXRlKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2tld1goYSwgYiwgcywgcSkge1xuICAgIGlmIChhICE9PSBiKSB7XG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiLCBudWxsLCBkZWdQYXJlbikgLSAyLCB4OiBudW1iZXIoYSwgYil9KTtcbiAgICB9IGVsc2UgaWYgKGIpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNrZXdYKFwiICsgYiArIGRlZ1BhcmVuKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4YSwgeWEsIHhiLCB5YiwgcywgcSkge1xuICAgIGlmICh4YSAhPT0geGIgfHwgeWEgIT09IHliKSB7XG4gICAgICB2YXIgaSA9IHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiLCBudWxsLCBcIixcIiwgbnVsbCwgXCIpXCIpO1xuICAgICAgcS5wdXNoKHtpOiBpIC0gNCwgeDogbnVtYmVyKHhhLCB4Yil9LCB7aTogaSAtIDIsIHg6IG51bWJlcih5YSwgeWIpfSk7XG4gICAgfSBlbHNlIGlmICh4YiAhPT0gMSB8fCB5YiAhPT0gMSkge1xuICAgICAgcy5wdXNoKHBvcChzKSArIFwic2NhbGUoXCIgKyB4YiArIFwiLFwiICsgeWIgKyBcIilcIik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKGEsIGIpIHtcbiAgICB2YXIgcyA9IFtdLCAvLyBzdHJpbmcgY29uc3RhbnRzIGFuZCBwbGFjZWhvbGRlcnNcbiAgICAgICAgcSA9IFtdOyAvLyBudW1iZXIgaW50ZXJwb2xhdG9yc1xuICAgIGEgPSBwYXJzZShhKSwgYiA9IHBhcnNlKGIpO1xuICAgIHRyYW5zbGF0ZShhLnRyYW5zbGF0ZVgsIGEudHJhbnNsYXRlWSwgYi50cmFuc2xhdGVYLCBiLnRyYW5zbGF0ZVksIHMsIHEpO1xuICAgIHJvdGF0ZShhLnJvdGF0ZSwgYi5yb3RhdGUsIHMsIHEpO1xuICAgIHNrZXdYKGEuc2tld1gsIGIuc2tld1gsIHMsIHEpO1xuICAgIHNjYWxlKGEuc2NhbGVYLCBhLnNjYWxlWSwgYi5zY2FsZVgsIGIuc2NhbGVZLCBzLCBxKTtcbiAgICBhID0gYiA9IG51bGw7IC8vIGdjXG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHZhciBpID0gLTEsIG4gPSBxLmxlbmd0aCwgbztcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICByZXR1cm4gcy5qb2luKFwiXCIpO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZUNzcywgXCJweCwgXCIsIFwicHgpXCIsIFwiZGVnKVwiKTtcbmV4cG9ydCB2YXIgaW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgPSBpbnRlcnBvbGF0ZVRyYW5zZm9ybShwYXJzZVN2ZywgXCIsIFwiLCBcIilcIiwgXCIpXCIpO1xuIiwidmFyIHJobyA9IE1hdGguU1FSVDIsXG4gICAgcmhvMiA9IDIsXG4gICAgcmhvNCA9IDQsXG4gICAgZXBzaWxvbjIgPSAxZS0xMjtcblxuZnVuY3Rpb24gY29zaCh4KSB7XG4gIHJldHVybiAoKHggPSBNYXRoLmV4cCh4KSkgKyAxIC8geCkgLyAyO1xufVxuXG5mdW5jdGlvbiBzaW5oKHgpIHtcbiAgcmV0dXJuICgoeCA9IE1hdGguZXhwKHgpKSAtIDEgLyB4KSAvIDI7XG59XG5cbmZ1bmN0aW9uIHRhbmgoeCkge1xuICByZXR1cm4gKCh4ID0gTWF0aC5leHAoMiAqIHgpKSAtIDEpIC8gKHggKyAxKTtcbn1cblxuLy8gcDAgPSBbdXgwLCB1eTAsIHcwXVxuLy8gcDEgPSBbdXgxLCB1eTEsIHcxXVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocDAsIHAxKSB7XG4gIHZhciB1eDAgPSBwMFswXSwgdXkwID0gcDBbMV0sIHcwID0gcDBbMl0sXG4gICAgICB1eDEgPSBwMVswXSwgdXkxID0gcDFbMV0sIHcxID0gcDFbMl0sXG4gICAgICBkeCA9IHV4MSAtIHV4MCxcbiAgICAgIGR5ID0gdXkxIC0gdXkwLFxuICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeSxcbiAgICAgIGksXG4gICAgICBTO1xuXG4gIC8vIFNwZWNpYWwgY2FzZSBmb3IgdTAg4omFIHUxLlxuICBpZiAoZDIgPCBlcHNpbG9uMikge1xuICAgIFMgPSBNYXRoLmxvZyh3MSAvIHcwKSAvIHJobztcbiAgICBpID0gZnVuY3Rpb24odCkge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgdXgwICsgdCAqIGR4LFxuICAgICAgICB1eTAgKyB0ICogZHksXG4gICAgICAgIHcwICogTWF0aC5leHAocmhvICogdCAqIFMpXG4gICAgICBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYWwgY2FzZS5cbiAgZWxzZSB7XG4gICAgdmFyIGQxID0gTWF0aC5zcXJ0KGQyKSxcbiAgICAgICAgYjAgPSAodzEgKiB3MSAtIHcwICogdzAgKyByaG80ICogZDIpIC8gKDIgKiB3MCAqIHJobzIgKiBkMSksXG4gICAgICAgIGIxID0gKHcxICogdzEgLSB3MCAqIHcwIC0gcmhvNCAqIGQyKSAvICgyICogdzEgKiByaG8yICogZDEpLFxuICAgICAgICByMCA9IE1hdGgubG9nKE1hdGguc3FydChiMCAqIGIwICsgMSkgLSBiMCksXG4gICAgICAgIHIxID0gTWF0aC5sb2coTWF0aC5zcXJ0KGIxICogYjEgKyAxKSAtIGIxKTtcbiAgICBTID0gKHIxIC0gcjApIC8gcmhvO1xuICAgIGkgPSBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgcyA9IHQgKiBTLFxuICAgICAgICAgIGNvc2hyMCA9IGNvc2gocjApLFxuICAgICAgICAgIHUgPSB3MCAvIChyaG8yICogZDEpICogKGNvc2hyMCAqIHRhbmgocmhvICogcyArIHIwKSAtIHNpbmgocjApKTtcbiAgICAgIHJldHVybiBbXG4gICAgICAgIHV4MCArIHUgKiBkeCxcbiAgICAgICAgdXkwICsgdSAqIGR5LFxuICAgICAgICB3MCAqIGNvc2hyMCAvIGNvc2gocmhvICogcyArIHIwKVxuICAgICAgXTtcbiAgICB9XG4gIH1cblxuICBpLmR1cmF0aW9uID0gUyAqIDEwMDA7XG5cbiAgcmV0dXJuIGk7XG59XG4iLCJpbXBvcnQge2hzbCBhcyBjb2xvckhzbH0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgY29sb3IsIHtodWV9IGZyb20gXCIuL2NvbG9yXCI7XG5cbmZ1bmN0aW9uIGhzbChodWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgaCA9IGh1ZSgoc3RhcnQgPSBjb2xvckhzbChzdGFydCkpLmgsIChlbmQgPSBjb2xvckhzbChlbmQpKS5oKSxcbiAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgbCA9IGNvbG9yKHN0YXJ0LmwsIGVuZC5sKSxcbiAgICAgICAgb3BhY2l0eSA9IGNvbG9yKHN0YXJ0Lm9wYWNpdHksIGVuZC5vcGFjaXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgc3RhcnQuaCA9IGgodCk7XG4gICAgICBzdGFydC5zID0gcyh0KTtcbiAgICAgIHN0YXJ0LmwgPSBsKHQpO1xuICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICByZXR1cm4gc3RhcnQgKyBcIlwiO1xuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgaHNsKGh1ZSk7XG5leHBvcnQgdmFyIGhzbExvbmcgPSBoc2woY29sb3IpO1xuIiwiaW1wb3J0IHtoY2wgYXMgY29sb3JIY2x9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGNvbG9yLCB7aHVlfSBmcm9tIFwiLi9jb2xvclwiO1xuXG5mdW5jdGlvbiBoY2woaHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JIY2woc3RhcnQpKS5oLCAoZW5kID0gY29sb3JIY2woZW5kKSkuaCksXG4gICAgICAgIGMgPSBjb2xvcihzdGFydC5jLCBlbmQuYyksXG4gICAgICAgIGwgPSBjb2xvcihzdGFydC5sLCBlbmQubCksXG4gICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICAgIHN0YXJ0LmggPSBoKHQpO1xuICAgICAgc3RhcnQuYyA9IGModCk7XG4gICAgICBzdGFydC5sID0gbCh0KTtcbiAgICAgIHN0YXJ0Lm9wYWNpdHkgPSBvcGFjaXR5KHQpO1xuICAgICAgcmV0dXJuIHN0YXJ0ICsgXCJcIjtcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhjbChodWUpO1xuZXhwb3J0IHZhciBoY2xMb25nID0gaGNsKGNvbG9yKTtcbiIsImltcG9ydCB7Y3ViZWhlbGl4IGFzIGNvbG9yQ3ViZWhlbGl4fSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCBjb2xvciwge2h1ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuZnVuY3Rpb24gY3ViZWhlbGl4KGh1ZSkge1xuICByZXR1cm4gKGZ1bmN0aW9uIGN1YmVoZWxpeEdhbW1hKHkpIHtcbiAgICB5ID0gK3k7XG5cbiAgICBmdW5jdGlvbiBjdWJlaGVsaXgoc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIGggPSBodWUoKHN0YXJ0ID0gY29sb3JDdWJlaGVsaXgoc3RhcnQpKS5oLCAoZW5kID0gY29sb3JDdWJlaGVsaXgoZW5kKSkuaCksXG4gICAgICAgICAgcyA9IGNvbG9yKHN0YXJ0LnMsIGVuZC5zKSxcbiAgICAgICAgICBsID0gY29sb3Ioc3RhcnQubCwgZW5kLmwpLFxuICAgICAgICAgIG9wYWNpdHkgPSBjb2xvcihzdGFydC5vcGFjaXR5LCBlbmQub3BhY2l0eSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgICAgICBzdGFydC5oID0gaCh0KTtcbiAgICAgICAgc3RhcnQucyA9IHModCk7XG4gICAgICAgIHN0YXJ0LmwgPSBsKE1hdGgucG93KHQsIHkpKTtcbiAgICAgICAgc3RhcnQub3BhY2l0eSA9IG9wYWNpdHkodCk7XG4gICAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGN1YmVoZWxpeC5nYW1tYSA9IGN1YmVoZWxpeEdhbW1hO1xuXG4gICAgcmV0dXJuIGN1YmVoZWxpeDtcbiAgfSkoMSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGN1YmVoZWxpeChodWUpO1xuZXhwb3J0IHZhciBjdWJlaGVsaXhMb25nID0gY3ViZWhlbGl4KGNvbG9yKTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGludGVycG9sYXRvciwgbikge1xuICB2YXIgc2FtcGxlcyA9IG5ldyBBcnJheShuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyArK2kpIHNhbXBsZXNbaV0gPSBpbnRlcnBvbGF0b3IoaSAvIChuIC0gMSkpO1xuICByZXR1cm4gc2FtcGxlcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudFwiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXJcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihkb21haW4pIHtcbiAgdmFyIGEgPSBkb21haW5bMF0sIGIgPSBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdLCB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgcGllY2V3aXNlID0gTWF0aC5taW4oZG9tYWluLmxlbmd0aCwgcmFuZ2UubGVuZ3RoKSA+IDIgPyBwb2x5bWFwIDogYmltYXA7XG4gICAgb3V0cHV0ID0gaW5wdXQgPSBudWxsO1xuICAgIHJldHVybiBzY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNjYWxlKHgpIHtcbiAgICByZXR1cm4gaXNOYU4oeCA9ICt4KSA/IHVua25vd24gOiAob3V0cHV0IHx8IChvdXRwdXQgPSBwaWVjZXdpc2UoZG9tYWluLm1hcCh0cmFuc2Zvcm0pLCByYW5nZSwgaW50ZXJwb2xhdGUpKSkodHJhbnNmb3JtKGNsYW1wKHgpKSk7XG4gIH1cblxuICBzY2FsZS5pbnZlcnQgPSBmdW5jdGlvbih5KSB7XG4gICAgcmV0dXJuIGNsYW1wKHVudHJhbnNmb3JtKChpbnB1dCB8fCAoaW5wdXQgPSBwaWVjZXdpc2UocmFuZ2UsIGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgaW50ZXJwb2xhdGVOdW1iZXIpKSkoeSkpKTtcbiAgfTtcblxuICBzY2FsZS5kb21haW4gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoZG9tYWluID0gQXJyYXkuZnJvbShfLCBudW1iZXIpLCBjbGFtcCA9PT0gaWRlbnRpdHkgfHwgKGNsYW1wID0gY2xhbXBlcihkb21haW4pKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyBjbGFtcGVyKGRvbWFpbikgOiBpZGVudGl0eSwgc2NhbGUpIDogY2xhbXAgIT09IGlkZW50aXR5O1xuICB9O1xuXG4gIHNjYWxlLmludGVycG9sYXRlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGludGVycG9sYXRlID0gXywgcmVzY2FsZSgpKSA6IGludGVycG9sYXRlO1xuICB9O1xuXG4gIHNjYWxlLnVua25vd24gPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAodW5rbm93biA9IF8sIHNjYWxlKSA6IHVua25vd247XG4gIH07XG5cbiAgcmV0dXJuIGZ1bmN0aW9uKHQsIHUpIHtcbiAgICB0cmFuc2Zvcm0gPSB0LCB1bnRyYW5zZm9ybSA9IHU7XG4gICAgcmV0dXJuIHJlc2NhbGUoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGludW91cyh0cmFuc2Zvcm0sIHVudHJhbnNmb3JtKSB7XG4gIHJldHVybiB0cmFuc2Zvcm1lcigpKHRyYW5zZm9ybSwgdW50cmFuc2Zvcm0pO1xufVxuIiwiLy8gQ29tcHV0ZXMgdGhlIGRlY2ltYWwgY29lZmZpY2llbnQgYW5kIGV4cG9uZW50IG9mIHRoZSBzcGVjaWZpZWQgbnVtYmVyIHggd2l0aFxuLy8gc2lnbmlmaWNhbnQgZGlnaXRzIHAsIHdoZXJlIHggaXMgcG9zaXRpdmUgYW5kIHAgaXMgaW4gWzEsIDIxXSBvciB1bmRlZmluZWQuXG4vLyBGb3IgZXhhbXBsZSwgZm9ybWF0RGVjaW1hbCgxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgaWYgKChpID0gKHggPSBwID8geC50b0V4cG9uZW50aWFsKHAgLSAxKSA6IHgudG9FeHBvbmVudGlhbCgpKS5pbmRleE9mKFwiZVwiKSkgPCAwKSByZXR1cm4gbnVsbDsgLy8gTmFOLCDCsUluZmluaXR5XG4gIHZhciBpLCBjb2VmZmljaWVudCA9IHguc2xpY2UoMCwgaSk7XG5cbiAgLy8gVGhlIHN0cmluZyByZXR1cm5lZCBieSB0b0V4cG9uZW50aWFsIGVpdGhlciBoYXMgdGhlIGZvcm0gXFxkXFwuXFxkK2VbLStdXFxkK1xuICAvLyAoZS5nLiwgMS4yZSszKSBvciB0aGUgZm9ybSBcXGRlWy0rXVxcZCsgKGUuZy4sIDFlKzMpLlxuICByZXR1cm4gW1xuICAgIGNvZWZmaWNpZW50Lmxlbmd0aCA+IDEgPyBjb2VmZmljaWVudFswXSArIGNvZWZmaWNpZW50LnNsaWNlKDIpIDogY29lZmZpY2llbnQsXG4gICAgK3guc2xpY2UoaSArIDEpXG4gIF07XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsKE1hdGguYWJzKHgpKSwgeCA/IHhbMV0gOiBOYU47XG59XG4iLCIvLyBbW2ZpbGxdYWxpZ25dW3NpZ25dW3N5bWJvbF1bMF1bd2lkdGhdWyxdWy5wcmVjaXNpb25dW35dW3R5cGVdXG52YXIgcmUgPSAvXig/OiguKT8oWzw+PV5dKSk/KFsrXFwtKCBdKT8oWyQjXSk/KDApPyhcXGQrKT8oLCk/KFxcLlxcZCspPyh+KT8oW2EteiVdKT8kL2k7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgcmV0dXJuIG5ldyBGb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZnVuY3Rpb24gRm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcikge1xuICBpZiAoIShtYXRjaCA9IHJlLmV4ZWMoc3BlY2lmaWVyKSkpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgZm9ybWF0OiBcIiArIHNwZWNpZmllcik7XG4gIHZhciBtYXRjaDtcbiAgdGhpcy5maWxsID0gbWF0Y2hbMV0gfHwgXCIgXCI7XG4gIHRoaXMuYWxpZ24gPSBtYXRjaFsyXSB8fCBcIj5cIjtcbiAgdGhpcy5zaWduID0gbWF0Y2hbM10gfHwgXCItXCI7XG4gIHRoaXMuc3ltYm9sID0gbWF0Y2hbNF0gfHwgXCJcIjtcbiAgdGhpcy56ZXJvID0gISFtYXRjaFs1XTtcbiAgdGhpcy53aWR0aCA9IG1hdGNoWzZdICYmICttYXRjaFs2XTtcbiAgdGhpcy5jb21tYSA9ICEhbWF0Y2hbN107XG4gIHRoaXMucHJlY2lzaW9uID0gbWF0Y2hbOF0gJiYgK21hdGNoWzhdLnNsaWNlKDEpO1xuICB0aGlzLnRyaW0gPSAhIW1hdGNoWzldO1xuICB0aGlzLnR5cGUgPSBtYXRjaFsxMF0gfHwgXCJcIjtcbn1cblxuRm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5maWxsXG4gICAgICArIHRoaXMuYWxpZ25cbiAgICAgICsgdGhpcy5zaWduXG4gICAgICArIHRoaXMuc3ltYm9sXG4gICAgICArICh0aGlzLnplcm8gPyBcIjBcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLndpZHRoID09IG51bGwgPyBcIlwiIDogTWF0aC5tYXgoMSwgdGhpcy53aWR0aCB8IDApKVxuICAgICAgKyAodGhpcy5jb21tYSA/IFwiLFwiIDogXCJcIilcbiAgICAgICsgKHRoaXMucHJlY2lzaW9uID09IG51bGwgPyBcIlwiIDogXCIuXCIgKyBNYXRoLm1heCgwLCB0aGlzLnByZWNpc2lvbiB8IDApKVxuICAgICAgKyAodGhpcy50cmltID8gXCJ+XCIgOiBcIlwiKVxuICAgICAgKyB0aGlzLnR5cGU7XG59O1xuIiwiLy8gVHJpbXMgaW5zaWduaWZpY2FudCB6ZXJvcywgZS5nLiwgcmVwbGFjZXMgMS4yMDAwayB3aXRoIDEuMmsuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzKSB7XG4gIG91dDogZm9yICh2YXIgbiA9IHMubGVuZ3RoLCBpID0gMSwgaTAgPSAtMSwgaTE7IGkgPCBuOyArK2kpIHtcbiAgICBzd2l0Y2ggKHNbaV0pIHtcbiAgICAgIGNhc2UgXCIuXCI6IGkwID0gaTEgPSBpOyBicmVhaztcbiAgICAgIGNhc2UgXCIwXCI6IGlmIChpMCA9PT0gMCkgaTAgPSBpOyBpMSA9IGk7IGJyZWFrO1xuICAgICAgZGVmYXVsdDogaWYgKGkwID4gMCkgeyBpZiAoIStzW2ldKSBicmVhayBvdXQ7IGkwID0gMDsgfSBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IHZhciBwcmVmaXhFeHBvbmVudDtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWwoeCwgTWF0aC5tYXgoMCwgcCArIGkgLSAxKSlbMF07IC8vIGxlc3MgdGhhbiAxeSFcbn1cbiIsImltcG9ydCBmb3JtYXRMb2NhbGUgZnJvbSBcIi4vbG9jYWxlXCI7XG5cbnZhciBsb2NhbGU7XG5leHBvcnQgdmFyIGZvcm1hdDtcbmV4cG9ydCB2YXIgZm9ybWF0UHJlZml4O1xuXG5kZWZhdWx0TG9jYWxlKHtcbiAgZGVjaW1hbDogXCIuXCIsXG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCBmb3JtYXREZWNpbWFsIGZyb20gXCIuL2Zvcm1hdERlY2ltYWxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCwgcCkge1xuICB2YXIgZCA9IGZvcm1hdERlY2ltYWwoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuICh4ICogMTAwKS50b0ZpeGVkKHApOyB9LFxuICBcImJcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygyKTsgfSxcbiAgXCJjXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggKyBcIlwiOyB9LFxuICBcImRcIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxMCk7IH0sXG4gIFwiZVwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRXhwb25lbnRpYWwocCk7IH0sXG4gIFwiZlwiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvRml4ZWQocCk7IH0sXG4gIFwiZ1wiOiBmdW5jdGlvbih4LCBwKSB7IHJldHVybiB4LnRvUHJlY2lzaW9uKHApOyB9LFxuICBcIm9cIjogZnVuY3Rpb24oeCkgeyByZXR1cm4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KTsgfSxcbiAgXCJwXCI6IGZ1bmN0aW9uKHgsIHApIHsgcmV0dXJuIGZvcm1hdFJvdW5kZWQoeCAqIDEwMCwgcCk7IH0sXG4gIFwiclwiOiBmb3JtYXRSb3VuZGVkLFxuICBcInNcIjogZm9ybWF0UHJlZml4QXV0byxcbiAgXCJYXCI6IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIE1hdGgucm91bmQoeCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7IH0sXG4gIFwieFwiOiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KTsgfVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnRcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cFwiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllclwiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbVwiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxudmFyIHByZWZpeGVzID0gW1wieVwiLFwielwiLFwiYVwiLFwiZlwiLFwicFwiLFwiblwiLFwiwrVcIixcIm1cIixcIlwiLFwia1wiLFwiTVwiLFwiR1wiLFwiVFwiLFwiUFwiLFwiRVwiLFwiWlwiLFwiWVwiXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obG9jYWxlKSB7XG4gIHZhciBncm91cCA9IGxvY2FsZS5ncm91cGluZyAmJiBsb2NhbGUudGhvdXNhbmRzID8gZm9ybWF0R3JvdXAobG9jYWxlLmdyb3VwaW5nLCBsb2NhbGUudGhvdXNhbmRzKSA6IGlkZW50aXR5LFxuICAgICAgY3VycmVuY3kgPSBsb2NhbGUuY3VycmVuY3ksXG4gICAgICBkZWNpbWFsID0gbG9jYWxlLmRlY2ltYWwsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA/IGZvcm1hdE51bWVyYWxzKGxvY2FsZS5udW1lcmFscykgOiBpZGVudGl0eSxcbiAgICAgIHBlcmNlbnQgPSBsb2NhbGUucGVyY2VudCB8fCBcIiVcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PSBudWxsICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lbMF0gOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVsxXSA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09IG51bGwgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFyIHZhbHVlTmVnYXRpdmUgPSB2YWx1ZSA8IDA7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0VHlwZShNYXRoLmFicyh2YWx1ZSksIHByZWNpc2lvbik7XG5cbiAgICAgICAgLy8gVHJpbSBpbnNpZ25pZmljYW50IHplcm9zLlxuICAgICAgICBpZiAodHJpbSkgdmFsdWUgPSBmb3JtYXRUcmltKHZhbHVlKTtcblxuICAgICAgICAvLyBJZiBhIG5lZ2F0aXZlIHZhbHVlIHJvdW5kcyB0byB6ZXJvIGR1cmluZyBmb3JtYXR0aW5nLCB0cmVhdCBhcyBwb3NpdGl2ZS5cbiAgICAgICAgaWYgKHZhbHVlTmVnYXRpdmUgJiYgK3ZhbHVlID09PSAwKSB2YWx1ZU5lZ2F0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gICAgICAgIHZhbHVlUHJlZml4ID0gKHZhbHVlTmVnYXRpdmUgPyAoc2lnbiA9PT0gXCIoXCIgPyBzaWduIDogXCItXCIpIDogc2lnbiA9PT0gXCItXCIgfHwgc2lnbiA9PT0gXCIoXCIgPyBcIlwiIDogc2lnbikgKyB2YWx1ZVByZWZpeDtcbiAgICAgICAgdmFsdWVTdWZmaXggPSAodHlwZSA9PT0gXCJzXCIgPyBwcmVmaXhlc1s4ICsgcHJlZml4RXhwb25lbnQgLyAzXSA6IFwiXCIpICsgdmFsdWVTdWZmaXggKyAodmFsdWVOZWdhdGl2ZSAmJiBzaWduID09PSBcIihcIiA/IFwiKVwiIDogXCJcIik7XG5cbiAgICAgICAgLy8gQnJlYWsgdGhlIGZvcm1hdHRlZCB2YWx1ZSBpbnRvIHRoZSBpbnRlZ2VyIOKAnHZhbHVl4oCdIHBhcnQgdGhhdCBjYW4gYmVcbiAgICAgICAgLy8gZ3JvdXBlZCwgYW5kIGZyYWN0aW9uYWwgb3IgZXhwb25lbnRpYWwg4oCcc3VmZml44oCdIHBhcnQgdGhhdCBpcyBub3QuXG4gICAgICAgIGlmIChtYXliZVN1ZmZpeCkge1xuICAgICAgICAgIGkgPSAtMSwgbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICAgICAgaWYgKGMgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpLCA0OCA+IGMgfHwgYyA+IDU3KSB7XG4gICAgICAgICAgICAgIHZhbHVlU3VmZml4ID0gKGMgPT09IDQ2ID8gZGVjaW1hbCArIHZhbHVlLnNsaWNlKGkgKyAxKSA6IHZhbHVlLnNsaWNlKGkpKSArIHZhbHVlU3VmZml4O1xuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGkpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIG5vdCBcIjBcIiwgZ3JvdXBpbmcgaXMgYXBwbGllZCBiZWZvcmUgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiAhemVybykgdmFsdWUgPSBncm91cCh2YWx1ZSwgSW5maW5pdHkpO1xuXG4gICAgICAvLyBDb21wdXRlIHRoZSBwYWRkaW5nLlxuICAgICAgdmFyIGxlbmd0aCA9IHZhbHVlUHJlZml4Lmxlbmd0aCArIHZhbHVlLmxlbmd0aCArIHZhbHVlU3VmZml4Lmxlbmd0aCxcbiAgICAgICAgICBwYWRkaW5nID0gbGVuZ3RoIDwgd2lkdGggPyBuZXcgQXJyYXkod2lkdGggLSBsZW5ndGggKyAxKS5qb2luKGZpbGwpIDogXCJcIjtcblxuICAgICAgLy8gSWYgdGhlIGZpbGwgY2hhcmFjdGVyIGlzIFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGFmdGVyIHBhZGRpbmcuXG4gICAgICBpZiAoY29tbWEgJiYgemVybykgdmFsdWUgPSBncm91cChwYWRkaW5nICsgdmFsdWUsIHBhZGRpbmcubGVuZ3RoID8gd2lkdGggLSB2YWx1ZVN1ZmZpeC5sZW5ndGggOiBJbmZpbml0eSksIHBhZGRpbmcgPSBcIlwiO1xuXG4gICAgICAvLyBSZWNvbnN0cnVjdCB0aGUgZmluYWwgb3V0cHV0IGJhc2VkIG9uIHRoZSBkZXNpcmVkIGFsaWdubWVudC5cbiAgICAgIHN3aXRjaCAoYWxpZ24pIHtcbiAgICAgICAgY2FzZSBcIjxcIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nOyBicmVhaztcbiAgICAgICAgY2FzZSBcIj1cIjogdmFsdWUgPSB2YWx1ZVByZWZpeCArIHBhZGRpbmcgKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgICAgY2FzZSBcIl5cIjogdmFsdWUgPSBwYWRkaW5nLnNsaWNlKDAsIGxlbmd0aCA9IHBhZGRpbmcubGVuZ3RoID4+IDEpICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4ICsgcGFkZGluZy5zbGljZShsZW5ndGgpOyBicmVhaztcbiAgICAgICAgZGVmYXVsdDogdmFsdWUgPSBwYWRkaW5nICsgdmFsdWVQcmVmaXggKyB2YWx1ZSArIHZhbHVlU3VmZml4OyBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWVyYWxzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBmb3JtYXQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzcGVjaWZpZXIgKyBcIlwiO1xuICAgIH07XG5cbiAgICByZXR1cm4gZm9ybWF0O1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpIHtcbiAgICB2YXIgZiA9IG5ld0Zvcm1hdCgoc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciksIHNwZWNpZmllci50eXBlID0gXCJmXCIsIHNwZWNpZmllcikpLFxuICAgICAgICBlID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMsXG4gICAgICAgIGsgPSBNYXRoLnBvdygxMCwgLWUpLFxuICAgICAgICBwcmVmaXggPSBwcmVmaXhlc1s4ICsgZSAvIDNdO1xuICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGYoayAqIHZhbHVlKSArIHByZWZpeDtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBmb3JtYXQ6IG5ld0Zvcm1hdCxcbiAgICBmb3JtYXRQcmVmaXg6IGZvcm1hdFByZWZpeFxuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oZ3JvdXBpbmcsIHRob3VzYW5kcykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUsIHdpZHRoKSB7XG4gICAgdmFyIGkgPSB2YWx1ZS5sZW5ndGgsXG4gICAgICAgIHQgPSBbXSxcbiAgICAgICAgaiA9IDAsXG4gICAgICAgIGcgPSBncm91cGluZ1swXSxcbiAgICAgICAgbGVuZ3RoID0gMDtcblxuICAgIHdoaWxlIChpID4gMCAmJiBnID4gMCkge1xuICAgICAgaWYgKGxlbmd0aCArIGcgKyAxID4gd2lkdGgpIGcgPSBNYXRoLm1heCgxLCB3aWR0aCAtIGxlbmd0aCk7XG4gICAgICB0LnB1c2godmFsdWUuc3Vic3RyaW5nKGkgLT0gZywgaSArIGcpKTtcbiAgICAgIGlmICgobGVuZ3RoICs9IGcgKyAxKSA+IHdpZHRoKSBicmVhaztcbiAgICAgIGcgPSBncm91cGluZ1tqID0gKGogKyAxKSAlIGdyb3VwaW5nLmxlbmd0aF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHQucmV2ZXJzZSgpLmpvaW4odGhvdXNhbmRzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG51bWVyYWxzKSB7XG4gIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bMC05XS9nLCBmdW5jdGlvbihpKSB7XG4gICAgICByZXR1cm4gbnVtZXJhbHNbK2ldO1xuICAgIH0pO1xuICB9O1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXApIHtcbiAgcmV0dXJuIE1hdGgubWF4KDAsIC1leHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IHt0aWNrU3RlcH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2Zvcm1hdCwgZm9ybWF0UHJlZml4LCBmb3JtYXRTcGVjaWZpZXIsIHByZWNpc2lvbkZpeGVkLCBwcmVjaXNpb25QcmVmaXgsIHByZWNpc2lvblJvdW5kfSBmcm9tIFwiZDMtZm9ybWF0XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQge3RpY2tzLCB0aWNrSW5jcmVtZW50fSBmcm9tIFwiZDMtYXJyYXlcIjtcbmltcG9ydCBjb250aW51b3VzLCB7Y29weSwgaWRlbnRpdHl9IGZyb20gXCIuL2NvbnRpbnVvdXNcIjtcbmltcG9ydCB7aW5pdFJhbmdlfSBmcm9tIFwiLi9pbml0XCI7XG5pbXBvcnQgdGlja0Zvcm1hdCBmcm9tIFwiLi90aWNrRm9ybWF0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJpc2goc2NhbGUpIHtcbiAgdmFyIGRvbWFpbiA9IHNjYWxlLmRvbWFpbjtcblxuICBzY2FsZS50aWNrcyA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja3MoZFswXSwgZFtkLmxlbmd0aCAtIDFdLCBjb3VudCA9PSBudWxsID8gMTAgOiBjb3VudCk7XG4gIH07XG5cbiAgc2NhbGUudGlja0Zvcm1hdCA9IGZ1bmN0aW9uKGNvdW50LCBzcGVjaWZpZXIpIHtcbiAgICB2YXIgZCA9IGRvbWFpbigpO1xuICAgIHJldHVybiB0aWNrRm9ybWF0KGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQsIHNwZWNpZmllcik7XG4gIH07XG5cbiAgc2NhbGUubmljZSA9IGZ1bmN0aW9uKGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09IG51bGwpIGNvdW50ID0gMTA7XG5cbiAgICB2YXIgZCA9IGRvbWFpbigpLFxuICAgICAgICBpMCA9IDAsXG4gICAgICAgIGkxID0gZC5sZW5ndGggLSAxLFxuICAgICAgICBzdGFydCA9IGRbaTBdLFxuICAgICAgICBzdG9wID0gZFtpMV0sXG4gICAgICAgIHN0ZXA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG5cbiAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdG9wID0gTWF0aC5jZWlsKHN0b3AgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBzdGVwID0gdGlja0luY3JlbWVudChzdGFydCwgc3RvcCwgY291bnQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAqIHN0ZXApIC8gc3RlcDtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAgPiAwKSB7XG4gICAgICBkW2kwXSA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICBkW2kxXSA9IE1hdGguY2VpbChzdG9wIC8gc3RlcCkgKiBzdGVwO1xuICAgICAgZG9tYWluKGQpO1xuICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgIGRbaTBdID0gTWF0aC5jZWlsKHN0YXJ0ICogc3RlcCkgLyBzdGVwO1xuICAgICAgZFtpMV0gPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICBkb21haW4oZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNjYWxlO1xuICB9O1xuXG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGluZWFyKCkge1xuICB2YXIgc2NhbGUgPSBjb250aW51b3VzKGlkZW50aXR5LCBpZGVudGl0eSk7XG5cbiAgc2NhbGUuY29weSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBjb3B5KHNjYWxlLCBsaW5lYXIoKSk7XG4gIH07XG5cbiAgaW5pdFJhbmdlLmFwcGx5KHNjYWxlLCBhcmd1bWVudHMpO1xuXG4gIHJldHVybiBsaW5lYXJpc2goc2NhbGUpO1xufVxuIiwidmFyIHQwID0gbmV3IERhdGUsXG4gICAgdDEgPSBuZXcgRGF0ZTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbmV3SW50ZXJ2YWwoZmxvb3JpLCBvZmZzZXRpLCBjb3VudCwgZmllbGQpIHtcblxuICBmdW5jdGlvbiBpbnRlcnZhbChkYXRlKSB7XG4gICAgcmV0dXJuIGZsb29yaShkYXRlID0gbmV3IERhdGUoK2RhdGUpKSwgZGF0ZTtcbiAgfVxuXG4gIGludGVydmFsLmZsb29yID0gaW50ZXJ2YWw7XG5cbiAgaW50ZXJ2YWwuY2VpbCA9IGZ1bmN0aW9uKGRhdGUpIHtcbiAgICByZXR1cm4gZmxvb3JpKGRhdGUgPSBuZXcgRGF0ZShkYXRlIC0gMSkpLCBvZmZzZXRpKGRhdGUsIDEpLCBmbG9vcmkoZGF0ZSksIGRhdGU7XG4gIH07XG5cbiAgaW50ZXJ2YWwucm91bmQgPSBmdW5jdGlvbihkYXRlKSB7XG4gICAgdmFyIGQwID0gaW50ZXJ2YWwoZGF0ZSksXG4gICAgICAgIGQxID0gaW50ZXJ2YWwuY2VpbChkYXRlKTtcbiAgICByZXR1cm4gZGF0ZSAtIGQwIDwgZDEgLSBkYXRlID8gZDAgOiBkMTtcbiAgfTtcblxuICBpbnRlcnZhbC5vZmZzZXQgPSBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgcmV0dXJuIG9mZnNldGkoZGF0ZSA9IG5ldyBEYXRlKCtkYXRlKSwgc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCkpLCBkYXRlO1xuICB9O1xuXG4gIGludGVydmFsLnJhbmdlID0gZnVuY3Rpb24oc3RhcnQsIHN0b3AsIHN0ZXApIHtcbiAgICB2YXIgcmFuZ2UgPSBbXSwgcHJldmlvdXM7XG4gICAgc3RhcnQgPSBpbnRlcnZhbC5jZWlsKHN0YXJ0KTtcbiAgICBzdGVwID0gc3RlcCA9PSBudWxsID8gMSA6IE1hdGguZmxvb3Ioc3RlcCk7XG4gICAgaWYgKCEoc3RhcnQgPCBzdG9wKSB8fCAhKHN0ZXAgPiAwKSkgcmV0dXJuIHJhbmdlOyAvLyBhbHNvIGhhbmRsZXMgSW52YWxpZCBEYXRlXG4gICAgZG8gcmFuZ2UucHVzaChwcmV2aW91cyA9IG5ldyBEYXRlKCtzdGFydCkpLCBvZmZzZXRpKHN0YXJ0LCBzdGVwKSwgZmxvb3JpKHN0YXJ0KTtcbiAgICB3aGlsZSAocHJldmlvdXMgPCBzdGFydCAmJiBzdGFydCA8IHN0b3ApO1xuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICBpbnRlcnZhbC5maWx0ZXIgPSBmdW5jdGlvbih0ZXN0KSB7XG4gICAgcmV0dXJuIG5ld0ludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHdoaWxlIChmbG9vcmkoZGF0ZSksICF0ZXN0KGRhdGUpKSBkYXRlLnNldFRpbWUoZGF0ZSAtIDEpO1xuICAgIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICAgIGlmIChkYXRlID49IGRhdGUpIHtcbiAgICAgICAgaWYgKHN0ZXAgPCAwKSB3aGlsZSAoKytzdGVwIDw9IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCAtMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH0gZWxzZSB3aGlsZSAoLS1zdGVwID49IDApIHtcbiAgICAgICAgICB3aGlsZSAob2Zmc2V0aShkYXRlLCArMSksICF0ZXN0KGRhdGUpKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBpZiAoY291bnQpIHtcbiAgICBpbnRlcnZhbC5jb3VudCA9IGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICAgIHQwLnNldFRpbWUoK3N0YXJ0KSwgdDEuc2V0VGltZSgrZW5kKTtcbiAgICAgIGZsb29yaSh0MCksIGZsb29yaSh0MSk7XG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihjb3VudCh0MCwgdDEpKTtcbiAgICB9O1xuXG4gICAgaW50ZXJ2YWwuZXZlcnkgPSBmdW5jdGlvbihzdGVwKSB7XG4gICAgICBzdGVwID0gTWF0aC5mbG9vcihzdGVwKTtcbiAgICAgIHJldHVybiAhaXNGaW5pdGUoc3RlcCkgfHwgIShzdGVwID4gMCkgPyBudWxsXG4gICAgICAgICAgOiAhKHN0ZXAgPiAxKSA/IGludGVydmFsXG4gICAgICAgICAgOiBpbnRlcnZhbC5maWx0ZXIoZmllbGRcbiAgICAgICAgICAgICAgPyBmdW5jdGlvbihkKSB7IHJldHVybiBmaWVsZChkKSAlIHN0ZXAgPT09IDA7IH1cbiAgICAgICAgICAgICAgOiBmdW5jdGlvbihkKSB7IHJldHVybiBpbnRlcnZhbC5jb3VudCgwLCBkKSAlIHN0ZXAgPT09IDA7IH0pO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gaW50ZXJ2YWw7XG59XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIG1pbGxpc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oKSB7XG4gIC8vIG5vb3Bcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQgLSBzdGFydDtcbn0pO1xuXG4vLyBBbiBvcHRpbWl6ZWQgaW1wbGVtZW50YXRpb24gZm9yIHRoaXMgc2ltcGxlIGNhc2UuXG5taWxsaXNlY29uZC5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgayA9IE1hdGguZmxvb3Ioayk7XG4gIGlmICghaXNGaW5pdGUoaykgfHwgIShrID4gMCkpIHJldHVybiBudWxsO1xuICBpZiAoIShrID4gMSkpIHJldHVybiBtaWxsaXNlY29uZDtcbiAgcmV0dXJuIGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFRpbWUoTWF0aC5mbG9vcihkYXRlIC8gaykgKiBrKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBrKTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gaztcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBtaWxsaXNlY29uZDtcbmV4cG9ydCB2YXIgbWlsbGlzZWNvbmRzID0gbWlsbGlzZWNvbmQucmFuZ2U7XG4iLCJleHBvcnQgdmFyIGR1cmF0aW9uU2Vjb25kID0gMWUzO1xuZXhwb3J0IHZhciBkdXJhdGlvbk1pbnV0ZSA9IDZlNDtcbmV4cG9ydCB2YXIgZHVyYXRpb25Ib3VyID0gMzZlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25EYXkgPSA4NjRlNTtcbmV4cG9ydCB2YXIgZHVyYXRpb25XZWVrID0gNjA0OGU1O1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uU2Vjb25kfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgc2Vjb25kID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkpO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25TZWNvbmQpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uU2Vjb25kO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENTZWNvbmRzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc2Vjb25kO1xuZXhwb3J0IHZhciBzZWNvbmRzID0gc2Vjb25kLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvblNlY29uZH0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIG1pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRUaW1lKGRhdGUgLSBkYXRlLmdldE1pbGxpc2Vjb25kcygpIC0gZGF0ZS5nZXRTZWNvbmRzKCkgKiBkdXJhdGlvblNlY29uZCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25NaW51dGU7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldE1pbnV0ZXMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtaW51dGU7XG5leHBvcnQgdmFyIG1pbnV0ZXMgPSBtaW51dGUucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25Ib3VyLCBkdXJhdGlvbk1pbnV0ZSwgZHVyYXRpb25TZWNvbmR9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbnZhciBob3VyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFRpbWUoZGF0ZSAtIGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCkgLSBkYXRlLmdldFNlY29uZHMoKSAqIGR1cmF0aW9uU2Vjb25kIC0gZGF0ZS5nZXRNaW51dGVzKCkgKiBkdXJhdGlvbk1pbnV0ZSk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0VGltZSgrZGF0ZSArIHN0ZXAgKiBkdXJhdGlvbkhvdXIpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uSG91cjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0SG91cnMoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBob3VyO1xuZXhwb3J0IHZhciBob3VycyA9IGhvdXIucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcbmltcG9ydCB7ZHVyYXRpb25EYXksIGR1cmF0aW9uTWludXRlfSBmcm9tIFwiLi9kdXJhdGlvblwiO1xuXG52YXIgZGF5ID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldERhdGUoZGF0ZS5nZXREYXRlKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIChlbmQgLSBzdGFydCAtIChlbmQuZ2V0VGltZXpvbmVPZmZzZXQoKSAtIHN0YXJ0LmdldFRpbWV6b25lT2Zmc2V0KCkpICogZHVyYXRpb25NaW51dGUpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldERhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGF5O1xuZXhwb3J0IHZhciBkYXlzID0gZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uTWludXRlLCBkdXJhdGlvbldlZWt9IGZyb20gXCIuL2R1cmF0aW9uXCI7XG5cbmZ1bmN0aW9uIHdlZWtkYXkoaSkge1xuICByZXR1cm4gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSAtIChkYXRlLmdldERheSgpICsgNyAtIGkpICUgNyk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIHN0ZXAgKiA3KTtcbiAgfSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiAoZW5kIC0gc3RhcnQgLSAoZW5kLmdldFRpbWV6b25lT2Zmc2V0KCkgLSBzdGFydC5nZXRUaW1lem9uZU9mZnNldCgpKSAqIGR1cmF0aW9uTWludXRlKSAvIGR1cmF0aW9uV2VlaztcbiAgfSk7XG59XG5cbmV4cG9ydCB2YXIgc3VuZGF5ID0gd2Vla2RheSgwKTtcbmV4cG9ydCB2YXIgbW9uZGF5ID0gd2Vla2RheSgxKTtcbmV4cG9ydCB2YXIgdHVlc2RheSA9IHdlZWtkYXkoMik7XG5leHBvcnQgdmFyIHdlZG5lc2RheSA9IHdlZWtkYXkoMyk7XG5leHBvcnQgdmFyIHRodXJzZGF5ID0gd2Vla2RheSg0KTtcbmV4cG9ydCB2YXIgZnJpZGF5ID0gd2Vla2RheSg1KTtcbmV4cG9ydCB2YXIgc2F0dXJkYXkgPSB3ZWVrZGF5KDYpO1xuXG5leHBvcnQgdmFyIHN1bmRheXMgPSBzdW5kYXkucmFuZ2U7XG5leHBvcnQgdmFyIG1vbmRheXMgPSBtb25kYXkucmFuZ2U7XG5leHBvcnQgdmFyIHR1ZXNkYXlzID0gdHVlc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgd2VkbmVzZGF5cyA9IHdlZG5lc2RheS5yYW5nZTtcbmV4cG9ydCB2YXIgdGh1cnNkYXlzID0gdGh1cnNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIGZyaWRheXMgPSBmcmlkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHNhdHVyZGF5cyA9IHNhdHVyZGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciBtb250aCA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXREYXRlKDEpO1xuICBkYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldE1vbnRoKGRhdGUuZ2V0TW9udGgoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldE1vbnRoKCkgLSBzdGFydC5nZXRNb250aCgpICsgKGVuZC5nZXRGdWxsWWVhcigpIC0gc3RhcnQuZ2V0RnVsbFllYXIoKSkgKiAxMjtcbn0sIGZ1bmN0aW9uKGRhdGUpIHtcbiAgcmV0dXJuIGRhdGUuZ2V0TW9udGgoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtb250aDtcbmV4cG9ydCB2YXIgbW9udGhzID0gbW9udGgucmFuZ2U7XG4iLCJpbXBvcnQgaW50ZXJ2YWwgZnJvbSBcIi4vaW50ZXJ2YWxcIjtcblxudmFyIHllYXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG59LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiBlbmQuZ2V0RnVsbFllYXIoKSAtIHN0YXJ0LmdldEZ1bGxZZWFyKCk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldEZ1bGxZZWFyKCk7XG59KTtcblxuLy8gQW4gb3B0aW1pemVkIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIHNpbXBsZSBjYXNlLlxueWVhci5ldmVyeSA9IGZ1bmN0aW9uKGspIHtcbiAgcmV0dXJuICFpc0Zpbml0ZShrID0gTWF0aC5mbG9vcihrKSkgfHwgIShrID4gMCkgPyBudWxsIDogaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoTWF0aC5mbG9vcihkYXRlLmdldEZ1bGxZZWFyKCkgLyBrKSAqIGspO1xuICAgIGRhdGUuc2V0TW9udGgoMCwgMSk7XG4gICAgZGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcbiAgfSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoZGF0ZS5nZXRGdWxsWWVhcigpICsgc3RlcCAqIGspO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHllYXI7XG5leHBvcnQgdmFyIHllYXJzID0geWVhci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbk1pbnV0ZX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y01pbnV0ZSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENTZWNvbmRzKDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFRpbWUoK2RhdGUgKyBzdGVwICogZHVyYXRpb25NaW51dGUpO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gKGVuZCAtIHN0YXJ0KSAvIGR1cmF0aW9uTWludXRlO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENNaW51dGVzKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTWludXRlO1xuZXhwb3J0IHZhciB1dGNNaW51dGVzID0gdXRjTWludXRlLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uSG91cn0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0hvdXIgPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDTWludXRlcygwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRUaW1lKCtkYXRlICsgc3RlcCAqIGR1cmF0aW9uSG91cik7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25Ib3VyO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENIb3VycygpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHV0Y0hvdXI7XG5leHBvcnQgdmFyIHV0Y0hvdXJzID0gdXRjSG91ci5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuaW1wb3J0IHtkdXJhdGlvbkRheX0gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxudmFyIHV0Y0RheSA9IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCk7XG59LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gIHJldHVybiAoZW5kIC0gc3RhcnQpIC8gZHVyYXRpb25EYXk7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ0RhdGUoKSAtIDE7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjRGF5O1xuZXhwb3J0IHZhciB1dGNEYXlzID0gdXRjRGF5LnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5pbXBvcnQge2R1cmF0aW9uV2Vla30gZnJvbSBcIi4vZHVyYXRpb25cIjtcblxuZnVuY3Rpb24gdXRjV2Vla2RheShpKSB7XG4gIHJldHVybiBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gKGRhdGUuZ2V0VVRDRGF5KCkgKyA3IC0gaSkgJSA3KTtcbiAgICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB9LCBmdW5jdGlvbihkYXRlLCBzdGVwKSB7XG4gICAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpICsgc3RlcCAqIDcpO1xuICB9LCBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIChlbmQgLSBzdGFydCkgLyBkdXJhdGlvbldlZWs7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIHV0Y1N1bmRheSA9IHV0Y1dlZWtkYXkoMCk7XG5leHBvcnQgdmFyIHV0Y01vbmRheSA9IHV0Y1dlZWtkYXkoMSk7XG5leHBvcnQgdmFyIHV0Y1R1ZXNkYXkgPSB1dGNXZWVrZGF5KDIpO1xuZXhwb3J0IHZhciB1dGNXZWRuZXNkYXkgPSB1dGNXZWVrZGF5KDMpO1xuZXhwb3J0IHZhciB1dGNUaHVyc2RheSA9IHV0Y1dlZWtkYXkoNCk7XG5leHBvcnQgdmFyIHV0Y0ZyaWRheSA9IHV0Y1dlZWtkYXkoNSk7XG5leHBvcnQgdmFyIHV0Y1NhdHVyZGF5ID0gdXRjV2Vla2RheSg2KTtcblxuZXhwb3J0IHZhciB1dGNTdW5kYXlzID0gdXRjU3VuZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNNb25kYXlzID0gdXRjTW9uZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNUdWVzZGF5cyA9IHV0Y1R1ZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1dlZG5lc2RheXMgPSB1dGNXZWRuZXNkYXkucmFuZ2U7XG5leHBvcnQgdmFyIHV0Y1RodXJzZGF5cyA9IHV0Y1RodXJzZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNGcmlkYXlzID0gdXRjRnJpZGF5LnJhbmdlO1xuZXhwb3J0IHZhciB1dGNTYXR1cmRheXMgPSB1dGNTYXR1cmRheS5yYW5nZTtcbiIsImltcG9ydCBpbnRlcnZhbCBmcm9tIFwiLi9pbnRlcnZhbFwiO1xuXG52YXIgdXRjTW9udGggPSBpbnRlcnZhbChmdW5jdGlvbihkYXRlKSB7XG4gIGRhdGUuc2V0VVRDRGF0ZSgxKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbn0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgZGF0ZS5zZXRVVENNb250aChkYXRlLmdldFVUQ01vbnRoKCkgKyBzdGVwKTtcbn0sIGZ1bmN0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuIGVuZC5nZXRVVENNb250aCgpIC0gc3RhcnQuZ2V0VVRDTW9udGgoKSArIChlbmQuZ2V0VVRDRnVsbFllYXIoKSAtIHN0YXJ0LmdldFVUQ0Z1bGxZZWFyKCkpICogMTI7XG59LCBmdW5jdGlvbihkYXRlKSB7XG4gIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgdXRjTW9udGg7XG5leHBvcnQgdmFyIHV0Y01vbnRocyA9IHV0Y01vbnRoLnJhbmdlO1xuIiwiaW1wb3J0IGludGVydmFsIGZyb20gXCIuL2ludGVydmFsXCI7XG5cbnZhciB1dGNZZWFyID0gaW50ZXJ2YWwoZnVuY3Rpb24oZGF0ZSkge1xuICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xufSwgZnVuY3Rpb24oZGF0ZSwgc3RlcCkge1xuICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXApO1xufSwgZnVuY3Rpb24oc3RhcnQsIGVuZCkge1xuICByZXR1cm4gZW5kLmdldFVUQ0Z1bGxZZWFyKCkgLSBzdGFydC5nZXRVVENGdWxsWWVhcigpO1xufSwgZnVuY3Rpb24oZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xufSk7XG5cbi8vIEFuIG9wdGltaXplZCBpbXBsZW1lbnRhdGlvbiBmb3IgdGhpcyBzaW1wbGUgY2FzZS5cbnV0Y1llYXIuZXZlcnkgPSBmdW5jdGlvbihrKSB7XG4gIHJldHVybiAhaXNGaW5pdGUoayA9IE1hdGguZmxvb3IoaykpIHx8ICEoayA+IDApID8gbnVsbCA6IGludGVydmFsKGZ1bmN0aW9uKGRhdGUpIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKE1hdGguZmxvb3IoZGF0ZS5nZXRVVENGdWxsWWVhcigpIC8gaykgKiBrKTtcbiAgICBkYXRlLnNldFVUQ01vbnRoKDAsIDEpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIH0sIGZ1bmN0aW9uKGRhdGUsIHN0ZXApIHtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHN0ZXAgKiBrKTtcbiAgfSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGNZZWFyO1xuZXhwb3J0IHZhciB1dGNZZWFycyA9IHV0Y1llYXIucmFuZ2U7XG4iLCJpbXBvcnQge1xuICB0aW1lRGF5LFxuICB0aW1lU3VuZGF5LFxuICB0aW1lTW9uZGF5LFxuICB0aW1lVGh1cnNkYXksXG4gIHRpbWVZZWFyLFxuICB1dGNEYXksXG4gIHV0Y1N1bmRheSxcbiAgdXRjTW9uZGF5LFxuICB1dGNUaHVyc2RheSxcbiAgdXRjWWVhclxufSBmcm9tIFwiZDMtdGltZVwiO1xuXG5mdW5jdGlvbiBsb2NhbERhdGUoZCkge1xuICBpZiAoMCA8PSBkLnkgJiYgZC55IDwgMTAwKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgtMSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcihkLnkpO1xuICAgIHJldHVybiBkYXRlO1xuICB9XG4gIHJldHVybiBuZXcgRGF0ZShkLnksIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpO1xufVxuXG5mdW5jdGlvbiB1dGNEYXRlKGQpIHtcbiAgaWYgKDAgPD0gZC55ICYmIGQueSA8IDEwMCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoLTEsIGQubSwgZC5kLCBkLkgsIGQuTSwgZC5TLCBkLkwpKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKGQueSk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH1cbiAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKGQueSwgZC5tLCBkLmQsIGQuSCwgZC5NLCBkLlMsIGQuTCkpO1xufVxuXG5mdW5jdGlvbiBuZXdZZWFyKHkpIHtcbiAgcmV0dXJuIHt5OiB5LCBtOiAwLCBkOiAxLCBIOiAwLCBNOiAwLCBTOiAwLCBMOiAwfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TG9jYWxlKGxvY2FsZSkge1xuICB2YXIgbG9jYWxlX2RhdGVUaW1lID0gbG9jYWxlLmRhdGVUaW1lLFxuICAgICAgbG9jYWxlX2RhdGUgPSBsb2NhbGUuZGF0ZSxcbiAgICAgIGxvY2FsZV90aW1lID0gbG9jYWxlLnRpbWUsXG4gICAgICBsb2NhbGVfcGVyaW9kcyA9IGxvY2FsZS5wZXJpb2RzLFxuICAgICAgbG9jYWxlX3dlZWtkYXlzID0gbG9jYWxlLmRheXMsXG4gICAgICBsb2NhbGVfc2hvcnRXZWVrZGF5cyA9IGxvY2FsZS5zaG9ydERheXMsXG4gICAgICBsb2NhbGVfbW9udGhzID0gbG9jYWxlLm1vbnRocyxcbiAgICAgIGxvY2FsZV9zaG9ydE1vbnRocyA9IGxvY2FsZS5zaG9ydE1vbnRocztcblxuICB2YXIgcGVyaW9kUmUgPSBmb3JtYXRSZShsb2NhbGVfcGVyaW9kcyksXG4gICAgICBwZXJpb2RMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3BlcmlvZHMpLFxuICAgICAgd2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHdlZWtkYXlMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3dlZWtkYXlzKSxcbiAgICAgIHNob3J0V2Vla2RheVJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0V2Vla2RheXMpLFxuICAgICAgc2hvcnRXZWVrZGF5TG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9zaG9ydFdlZWtkYXlzKSxcbiAgICAgIG1vbnRoUmUgPSBmb3JtYXRSZShsb2NhbGVfbW9udGhzKSxcbiAgICAgIG1vbnRoTG9va3VwID0gZm9ybWF0TG9va3VwKGxvY2FsZV9tb250aHMpLFxuICAgICAgc2hvcnRNb250aFJlID0gZm9ybWF0UmUobG9jYWxlX3Nob3J0TW9udGhzKSxcbiAgICAgIHNob3J0TW9udGhMb29rdXAgPSBmb3JtYXRMb29rdXAobG9jYWxlX3Nob3J0TW9udGhzKTtcblxuICB2YXIgZm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0U2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0RGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0TWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdEhvdXIxMixcbiAgICBcImpcIjogZm9ybWF0RGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdE1vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0Wm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgdXRjRm9ybWF0cyA9IHtcbiAgICBcImFcIjogZm9ybWF0VVRDU2hvcnRXZWVrZGF5LFxuICAgIFwiQVwiOiBmb3JtYXRVVENXZWVrZGF5LFxuICAgIFwiYlwiOiBmb3JtYXRVVENTaG9ydE1vbnRoLFxuICAgIFwiQlwiOiBmb3JtYXRVVENNb250aCxcbiAgICBcImNcIjogbnVsbCxcbiAgICBcImRcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImVcIjogZm9ybWF0VVRDRGF5T2ZNb250aCxcbiAgICBcImZcIjogZm9ybWF0VVRDTWljcm9zZWNvbmRzLFxuICAgIFwiSFwiOiBmb3JtYXRVVENIb3VyMjQsXG4gICAgXCJJXCI6IGZvcm1hdFVUQ0hvdXIxMixcbiAgICBcImpcIjogZm9ybWF0VVRDRGF5T2ZZZWFyLFxuICAgIFwiTFwiOiBmb3JtYXRVVENNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IGZvcm1hdFVUQ01vbnRoTnVtYmVyLFxuICAgIFwiTVwiOiBmb3JtYXRVVENNaW51dGVzLFxuICAgIFwicFwiOiBmb3JtYXRVVENQZXJpb2QsXG4gICAgXCJRXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXAsXG4gICAgXCJzXCI6IGZvcm1hdFVuaXhUaW1lc3RhbXBTZWNvbmRzLFxuICAgIFwiU1wiOiBmb3JtYXRVVENTZWNvbmRzLFxuICAgIFwidVwiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyTW9uZGF5LFxuICAgIFwiVVwiOiBmb3JtYXRVVENXZWVrTnVtYmVyU3VuZGF5LFxuICAgIFwiVlwiOiBmb3JtYXRVVENXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBmb3JtYXRVVENXZWVrZGF5TnVtYmVyU3VuZGF5LFxuICAgIFwiV1wiOiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5LFxuICAgIFwieFwiOiBudWxsLFxuICAgIFwiWFwiOiBudWxsLFxuICAgIFwieVwiOiBmb3JtYXRVVENZZWFyLFxuICAgIFwiWVwiOiBmb3JtYXRVVENGdWxsWWVhcixcbiAgICBcIlpcIjogZm9ybWF0VVRDWm9uZSxcbiAgICBcIiVcIjogZm9ybWF0TGl0ZXJhbFBlcmNlbnRcbiAgfTtcblxuICB2YXIgcGFyc2VzID0ge1xuICAgIFwiYVwiOiBwYXJzZVNob3J0V2Vla2RheSxcbiAgICBcIkFcIjogcGFyc2VXZWVrZGF5LFxuICAgIFwiYlwiOiBwYXJzZVNob3J0TW9udGgsXG4gICAgXCJCXCI6IHBhcnNlTW9udGgsXG4gICAgXCJjXCI6IHBhcnNlTG9jYWxlRGF0ZVRpbWUsXG4gICAgXCJkXCI6IHBhcnNlRGF5T2ZNb250aCxcbiAgICBcImVcIjogcGFyc2VEYXlPZk1vbnRoLFxuICAgIFwiZlwiOiBwYXJzZU1pY3Jvc2Vjb25kcyxcbiAgICBcIkhcIjogcGFyc2VIb3VyMjQsXG4gICAgXCJJXCI6IHBhcnNlSG91cjI0LFxuICAgIFwialwiOiBwYXJzZURheU9mWWVhcixcbiAgICBcIkxcIjogcGFyc2VNaWxsaXNlY29uZHMsXG4gICAgXCJtXCI6IHBhcnNlTW9udGhOdW1iZXIsXG4gICAgXCJNXCI6IHBhcnNlTWludXRlcyxcbiAgICBcInBcIjogcGFyc2VQZXJpb2QsXG4gICAgXCJRXCI6IHBhcnNlVW5peFRpbWVzdGFtcCxcbiAgICBcInNcIjogcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyxcbiAgICBcIlNcIjogcGFyc2VTZWNvbmRzLFxuICAgIFwidVwiOiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXksXG4gICAgXCJVXCI6IHBhcnNlV2Vla051bWJlclN1bmRheSxcbiAgICBcIlZcIjogcGFyc2VXZWVrTnVtYmVySVNPLFxuICAgIFwid1wiOiBwYXJzZVdlZWtkYXlOdW1iZXJTdW5kYXksXG4gICAgXCJXXCI6IHBhcnNlV2Vla051bWJlck1vbmRheSxcbiAgICBcInhcIjogcGFyc2VMb2NhbGVEYXRlLFxuICAgIFwiWFwiOiBwYXJzZUxvY2FsZVRpbWUsXG4gICAgXCJ5XCI6IHBhcnNlWWVhcixcbiAgICBcIllcIjogcGFyc2VGdWxsWWVhcixcbiAgICBcIlpcIjogcGFyc2Vab25lLFxuICAgIFwiJVwiOiBwYXJzZUxpdGVyYWxQZXJjZW50XG4gIH07XG5cbiAgLy8gVGhlc2UgcmVjdXJzaXZlIGRpcmVjdGl2ZSBkZWZpbml0aW9ucyBtdXN0IGJlIGRlZmVycmVkLlxuICBmb3JtYXRzLnggPSBuZXdGb3JtYXQobG9jYWxlX2RhdGUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLlggPSBuZXdGb3JtYXQobG9jYWxlX3RpbWUsIGZvcm1hdHMpO1xuICBmb3JtYXRzLmMgPSBuZXdGb3JtYXQobG9jYWxlX2RhdGVUaW1lLCBmb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy54ID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5YID0gbmV3Rm9ybWF0KGxvY2FsZV90aW1lLCB1dGNGb3JtYXRzKTtcbiAgdXRjRm9ybWF0cy5jID0gbmV3Rm9ybWF0KGxvY2FsZV9kYXRlVGltZSwgdXRjRm9ybWF0cyk7XG5cbiAgZnVuY3Rpb24gbmV3Rm9ybWF0KHNwZWNpZmllciwgZm9ybWF0cykge1xuICAgIHJldHVybiBmdW5jdGlvbihkYXRlKSB7XG4gICAgICB2YXIgc3RyaW5nID0gW10sXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGogPSAwLFxuICAgICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICAgIGMsXG4gICAgICAgICAgcGFkLFxuICAgICAgICAgIGZvcm1hdDtcblxuICAgICAgaWYgKCEoZGF0ZSBpbnN0YW5jZW9mIERhdGUpKSBkYXRlID0gbmV3IERhdGUoK2RhdGUpO1xuXG4gICAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgICBpZiAoc3BlY2lmaWVyLmNoYXJDb2RlQXQoaSkgPT09IDM3KSB7XG4gICAgICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgICAgICBpZiAoKHBhZCA9IHBhZHNbYyA9IHNwZWNpZmllci5jaGFyQXQoKytpKV0pICE9IG51bGwpIGMgPSBzcGVjaWZpZXIuY2hhckF0KCsraSk7XG4gICAgICAgICAgZWxzZSBwYWQgPSBjID09PSBcImVcIiA/IFwiIFwiIDogXCIwXCI7XG4gICAgICAgICAgaWYgKGZvcm1hdCA9IGZvcm1hdHNbY10pIGMgPSBmb3JtYXQoZGF0ZSwgcGFkKTtcbiAgICAgICAgICBzdHJpbmcucHVzaChjKTtcbiAgICAgICAgICBqID0gaSArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc3RyaW5nLnB1c2goc3BlY2lmaWVyLnNsaWNlKGosIGkpKTtcbiAgICAgIHJldHVybiBzdHJpbmcuam9pbihcIlwiKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbmV3UGFyc2Uoc3BlY2lmaWVyLCBuZXdEYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIGQgPSBuZXdZZWFyKDE5MDApLFxuICAgICAgICAgIGkgPSBwYXJzZVNwZWNpZmllcihkLCBzcGVjaWZpZXIsIHN0cmluZyArPSBcIlwiLCAwKSxcbiAgICAgICAgICB3ZWVrLCBkYXk7XG4gICAgICBpZiAoaSAhPSBzdHJpbmcubGVuZ3RoKSByZXR1cm4gbnVsbDtcblxuICAgICAgLy8gSWYgYSBVTklYIHRpbWVzdGFtcCBpcyBzcGVjaWZpZWQsIHJldHVybiBpdC5cbiAgICAgIGlmIChcIlFcIiBpbiBkKSByZXR1cm4gbmV3IERhdGUoZC5RKTtcblxuICAgICAgLy8gVGhlIGFtLXBtIGZsYWcgaXMgMCBmb3IgQU0sIGFuZCAxIGZvciBQTS5cbiAgICAgIGlmIChcInBcIiBpbiBkKSBkLkggPSBkLkggJSAxMiArIGQucCAqIDEyO1xuXG4gICAgICAvLyBDb252ZXJ0IGRheS1vZi13ZWVrIGFuZCB3ZWVrLW9mLXllYXIgdG8gZGF5LW9mLXllYXIuXG4gICAgICBpZiAoXCJWXCIgaW4gZCkge1xuICAgICAgICBpZiAoZC5WIDwgMSB8fCBkLlYgPiA1MykgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKFwid1wiIGluIGQpKSBkLncgPSAxO1xuICAgICAgICBpZiAoXCJaXCIgaW4gZCkge1xuICAgICAgICAgIHdlZWsgPSB1dGNEYXRlKG5ld1llYXIoZC55KSksIGRheSA9IHdlZWsuZ2V0VVRDRGF5KCk7XG4gICAgICAgICAgd2VlayA9IGRheSA+IDQgfHwgZGF5ID09PSAwID8gdXRjTW9uZGF5LmNlaWwod2VlaykgOiB1dGNNb25kYXkod2Vlayk7XG4gICAgICAgICAgd2VlayA9IHV0Y0RheS5vZmZzZXQod2VlaywgKGQuViAtIDEpICogNyk7XG4gICAgICAgICAgZC55ID0gd2Vlay5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgIGQubSA9IHdlZWsuZ2V0VVRDTW9udGgoKTtcbiAgICAgICAgICBkLmQgPSB3ZWVrLmdldFVUQ0RhdGUoKSArIChkLncgKyA2KSAlIDc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2VlayA9IG5ld0RhdGUobmV3WWVhcihkLnkpKSwgZGF5ID0gd2Vlay5nZXREYXkoKTtcbiAgICAgICAgICB3ZWVrID0gZGF5ID4gNCB8fCBkYXkgPT09IDAgPyB0aW1lTW9uZGF5LmNlaWwod2VlaykgOiB0aW1lTW9uZGF5KHdlZWspO1xuICAgICAgICAgIHdlZWsgPSB0aW1lRGF5Lm9mZnNldCh3ZWVrLCAoZC5WIC0gMSkgKiA3KTtcbiAgICAgICAgICBkLnkgPSB3ZWVrLmdldEZ1bGxZZWFyKCk7XG4gICAgICAgICAgZC5tID0gd2Vlay5nZXRNb250aCgpO1xuICAgICAgICAgIGQuZCA9IHdlZWsuZ2V0RGF0ZSgpICsgKGQudyArIDYpICUgNztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcIldcIiBpbiBkIHx8IFwiVVwiIGluIGQpIHtcbiAgICAgICAgaWYgKCEoXCJ3XCIgaW4gZCkpIGQudyA9IFwidVwiIGluIGQgPyBkLnUgJSA3IDogXCJXXCIgaW4gZCA/IDEgOiAwO1xuICAgICAgICBkYXkgPSBcIlpcIiBpbiBkID8gdXRjRGF0ZShuZXdZZWFyKGQueSkpLmdldFVUQ0RheSgpIDogbmV3RGF0ZShuZXdZZWFyKGQueSkpLmdldERheSgpO1xuICAgICAgICBkLm0gPSAwO1xuICAgICAgICBkLmQgPSBcIldcIiBpbiBkID8gKGQudyArIDYpICUgNyArIGQuVyAqIDcgLSAoZGF5ICsgNSkgJSA3IDogZC53ICsgZC5VICogNyAtIChkYXkgKyA2KSAlIDc7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgdGltZSB6b25lIGlzIHNwZWNpZmllZCwgYWxsIGZpZWxkcyBhcmUgaW50ZXJwcmV0ZWQgYXMgVVRDIGFuZCB0aGVuXG4gICAgICAvLyBvZmZzZXQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgdGltZSB6b25lLlxuICAgICAgaWYgKFwiWlwiIGluIGQpIHtcbiAgICAgICAgZC5IICs9IGQuWiAvIDEwMCB8IDA7XG4gICAgICAgIGQuTSArPSBkLlogJSAxMDA7XG4gICAgICAgIHJldHVybiB1dGNEYXRlKGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBPdGhlcndpc2UsIGFsbCBmaWVsZHMgYXJlIGluIGxvY2FsIHRpbWUuXG4gICAgICByZXR1cm4gbmV3RGF0ZShkKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTcGVjaWZpZXIoZCwgc3BlY2lmaWVyLCBzdHJpbmcsIGopIHtcbiAgICB2YXIgaSA9IDAsXG4gICAgICAgIG4gPSBzcGVjaWZpZXIubGVuZ3RoLFxuICAgICAgICBtID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgYyxcbiAgICAgICAgcGFyc2U7XG5cbiAgICB3aGlsZSAoaSA8IG4pIHtcbiAgICAgIGlmIChqID49IG0pIHJldHVybiAtMTtcbiAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckNvZGVBdChpKyspO1xuICAgICAgaWYgKGMgPT09IDM3KSB7XG4gICAgICAgIGMgPSBzcGVjaWZpZXIuY2hhckF0KGkrKyk7XG4gICAgICAgIHBhcnNlID0gcGFyc2VzW2MgaW4gcGFkcyA/IHNwZWNpZmllci5jaGFyQXQoaSsrKSA6IGNdO1xuICAgICAgICBpZiAoIXBhcnNlIHx8ICgoaiA9IHBhcnNlKGQsIHN0cmluZywgaikpIDwgMCkpIHJldHVybiAtMTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPSBzdHJpbmcuY2hhckNvZGVBdChqKyspKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gajtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlUGVyaW9kKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gcGVyaW9kUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSkpO1xuICAgIHJldHVybiBuID8gKGQucCA9IHBlcmlvZExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVNob3J0V2Vla2RheShkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0V2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSBzaG9ydFdlZWtkYXlMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gd2Vla2RheVJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgICByZXR1cm4gbiA/IChkLncgPSB3ZWVrZGF5TG9va3VwW25bMF0udG9Mb3dlckNhc2UoKV0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlU2hvcnRNb250aChkLCBzdHJpbmcsIGkpIHtcbiAgICB2YXIgbiA9IHNob3J0TW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gc2hvcnRNb250aExvb2t1cFtuWzBdLnRvTG93ZXJDYXNlKCldLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vbnRoKGQsIHN0cmluZywgaSkge1xuICAgIHZhciBuID0gbW9udGhSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gICAgcmV0dXJuIG4gPyAoZC5tID0gbW9udGhMb29rdXBbblswXS50b0xvd2VyQ2FzZSgpXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX2RhdGVUaW1lLCBzdHJpbmcsIGkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VMb2NhbGVEYXRlKGQsIHN0cmluZywgaSkge1xuICAgIHJldHVybiBwYXJzZVNwZWNpZmllcihkLCBsb2NhbGVfZGF0ZSwgc3RyaW5nLCBpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlTG9jYWxlVGltZShkLCBzdHJpbmcsIGkpIHtcbiAgICByZXR1cm4gcGFyc2VTcGVjaWZpZXIoZCwgbG9jYWxlX3RpbWUsIHN0cmluZywgaSk7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldERheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXREYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0TW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFBlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRIb3VycygpID49IDEyKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydFdlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfc2hvcnRXZWVrZGF5c1tkLmdldFVUQ0RheSgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXkoZCkge1xuICAgIHJldHVybiBsb2NhbGVfd2Vla2RheXNbZC5nZXRVVENEYXkoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENTaG9ydE1vbnRoKGQpIHtcbiAgICByZXR1cm4gbG9jYWxlX3Nob3J0TW9udGhzW2QuZ2V0VVRDTW9udGgoKV07XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRVVENNb250aChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9tb250aHNbZC5nZXRVVENNb250aCgpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZvcm1hdFVUQ1BlcmlvZChkKSB7XG4gICAgcmV0dXJuIGxvY2FsZV9wZXJpb2RzWysoZC5nZXRVVENIb3VycygpID49IDEyKV07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgZm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHBhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyICs9IFwiXCIsIGxvY2FsRGF0ZSk7XG4gICAgICBwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gcDtcbiAgICB9LFxuICAgIHV0Y0Zvcm1hdDogZnVuY3Rpb24oc3BlY2lmaWVyKSB7XG4gICAgICB2YXIgZiA9IG5ld0Zvcm1hdChzcGVjaWZpZXIgKz0gXCJcIiwgdXRjRm9ybWF0cyk7XG4gICAgICBmLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7IHJldHVybiBzcGVjaWZpZXI7IH07XG4gICAgICByZXR1cm4gZjtcbiAgICB9LFxuICAgIHV0Y1BhcnNlOiBmdW5jdGlvbihzcGVjaWZpZXIpIHtcbiAgICAgIHZhciBwID0gbmV3UGFyc2Uoc3BlY2lmaWVyLCB1dGNEYXRlKTtcbiAgICAgIHAudG9TdHJpbmcgPSBmdW5jdGlvbigpIHsgcmV0dXJuIHNwZWNpZmllcjsgfTtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIHBhZHMgPSB7XCItXCI6IFwiXCIsIFwiX1wiOiBcIiBcIiwgXCIwXCI6IFwiMFwifSxcbiAgICBudW1iZXJSZSA9IC9eXFxzKlxcZCsvLCAvLyBub3RlOiBpZ25vcmVzIG5leHQgZGlyZWN0aXZlXG4gICAgcGVyY2VudFJlID0gL14lLyxcbiAgICByZXF1b3RlUmUgPSAvW1xcXFxeJCorP3xbXFxdKCkue31dL2c7XG5cbmZ1bmN0aW9uIHBhZCh2YWx1ZSwgZmlsbCwgd2lkdGgpIHtcbiAgdmFyIHNpZ24gPSB2YWx1ZSA8IDAgPyBcIi1cIiA6IFwiXCIsXG4gICAgICBzdHJpbmcgPSAoc2lnbiA/IC12YWx1ZSA6IHZhbHVlKSArIFwiXCIsXG4gICAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICByZXR1cm4gc2lnbiArIChsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgKyBzdHJpbmcgOiBzdHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXF1b3RlKHMpIHtcbiAgcmV0dXJuIHMucmVwbGFjZShyZXF1b3RlUmUsIFwiXFxcXCQmXCIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRSZShuYW1lcykge1xuICByZXR1cm4gbmV3IFJlZ0V4cChcIl4oPzpcIiArIG5hbWVzLm1hcChyZXF1b3RlKS5qb2luKFwifFwiKSArIFwiKVwiLCBcImlcIik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdExvb2t1cChuYW1lcykge1xuICB2YXIgbWFwID0ge30sIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIG1hcFtuYW1lc1tpXS50b0xvd2VyQ2FzZSgpXSA9IGk7XG4gIHJldHVybiBtYXA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla2RheU51bWJlclN1bmRheShkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMSkpO1xuICByZXR1cm4gbiA/IChkLncgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtkYXlOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyAoZC51ID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VXZWVrTnVtYmVyU3VuZGF5KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuVSA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlV2Vla051bWJlcklTTyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLlYgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVdlZWtOdW1iZXJNb25kYXkoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5XID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VGdWxsWWVhcihkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNCkpO1xuICByZXR1cm4gbiA/IChkLnkgPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVllYXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC55ID0gK25bMF0gKyAoK25bMF0gPiA2OCA/IDE5MDAgOiAyMDAwKSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVpvbmUoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gL14oWil8KFsrLV1cXGRcXGQpKD86Oj8oXFxkXFxkKSk/Ly5leGVjKHN0cmluZy5zbGljZShpLCBpICsgNikpO1xuICByZXR1cm4gbiA/IChkLlogPSBuWzFdID8gMCA6IC0oblsyXSArIChuWzNdIHx8IFwiMDBcIikpLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTW9udGhOdW1iZXIoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5tID0gblswXSAtIDEsIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXlPZk1vbnRoKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlRGF5T2ZZZWFyKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAzKSk7XG4gIHJldHVybiBuID8gKGQubSA9IDAsIGQuZCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSG91cjI0KGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGksIGkgKyAyKSk7XG4gIHJldHVybiBuID8gKGQuSCA9ICtuWzBdLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIHBhcnNlTWludXRlcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpLCBpICsgMikpO1xuICByZXR1cm4gbiA/IChkLk0gPSArblswXSwgaSArIG5bMF0ubGVuZ3RoKSA6IC0xO1xufVxuXG5mdW5jdGlvbiBwYXJzZVNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDIpKTtcbiAgcmV0dXJuIG4gPyAoZC5TID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWxsaXNlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDMpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VNaWNyb3NlY29uZHMoZCwgc3RyaW5nLCBpKSB7XG4gIHZhciBuID0gbnVtYmVyUmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDYpKTtcbiAgcmV0dXJuIG4gPyAoZC5MID0gTWF0aC5mbG9vcihuWzBdIC8gMTAwMCksIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VMaXRlcmFsUGVyY2VudChkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBwZXJjZW50UmUuZXhlYyhzdHJpbmcuc2xpY2UoaSwgaSArIDEpKTtcbiAgcmV0dXJuIG4gPyBpICsgblswXS5sZW5ndGggOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wKGQsIHN0cmluZywgaSkge1xuICB2YXIgbiA9IG51bWJlclJlLmV4ZWMoc3RyaW5nLnNsaWNlKGkpKTtcbiAgcmV0dXJuIG4gPyAoZC5RID0gK25bMF0sIGkgKyBuWzBdLmxlbmd0aCkgOiAtMTtcbn1cblxuZnVuY3Rpb24gcGFyc2VVbml4VGltZXN0YW1wU2Vjb25kcyhkLCBzdHJpbmcsIGkpIHtcbiAgdmFyIG4gPSBudW1iZXJSZS5leGVjKHN0cmluZy5zbGljZShpKSk7XG4gIHJldHVybiBuID8gKGQuUSA9ICgrblswXSkgKiAxMDAwLCBpICsgblswXS5sZW5ndGgpIDogLTE7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0SG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEhvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0SG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0RGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdGltZURheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWxsaXNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TWlsbGlzZWNvbmRzKCksIHAsIDMpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaWNyb3NlY29uZHMoZCwgcCkge1xuICByZXR1cm4gZm9ybWF0TWlsbGlzZWNvbmRzKGQsIHApICsgXCIwMDBcIjtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TW9udGhOdW1iZXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0TW9udGgoKSArIDEsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRNaW51dGVzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldE1pbnV0ZXMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlY29uZHMoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0U2Vjb25kcygpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlck1vbmRheShkKSB7XG4gIHZhciBkYXkgPSBkLmdldERheSgpO1xuICByZXR1cm4gZGF5ID09PSAwID8gNyA6IGRheTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla051bWJlclN1bmRheShkLCBwKSB7XG4gIHJldHVybiBwYWQodGltZVN1bmRheS5jb3VudCh0aW1lWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVySVNPKGQsIHApIHtcbiAgdmFyIGRheSA9IGQuZ2V0RGF5KCk7XG4gIGQgPSAoZGF5ID49IDQgfHwgZGF5ID09PSAwKSA/IHRpbWVUaHVyc2RheShkKSA6IHRpbWVUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHRpbWVUaHVyc2RheS5jb3VudCh0aW1lWWVhcihkKSwgZCkgKyAodGltZVllYXIoZCkuZ2V0RGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0V2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldERheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh0aW1lTW9uZGF5LmNvdW50KHRpbWVZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFllYXIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0RnVsbFllYXIoKSAlIDEwMCwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdEZ1bGxZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldEZ1bGxZZWFyKCkgJSAxMDAwMCwgcCwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFpvbmUoZCkge1xuICB2YXIgeiA9IGQuZ2V0VGltZXpvbmVPZmZzZXQoKTtcbiAgcmV0dXJuICh6ID4gMCA/IFwiLVwiIDogKHogKj0gLTEsIFwiK1wiKSlcbiAgICAgICsgcGFkKHogLyA2MCB8IDAsIFwiMFwiLCAyKVxuICAgICAgKyBwYWQoeiAlIDYwLCBcIjBcIiwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ0RheU9mTW9udGgoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDRGF0ZSgpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDSG91cjI0KGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0hvdXJzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENIb3VyMTIoZCwgcCkge1xuICByZXR1cm4gcGFkKGQuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDRGF5T2ZZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZCgxICsgdXRjRGF5LmNvdW50KHV0Y1llYXIoZCksIGQpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWlsbGlzZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01pbGxpc2Vjb25kcygpLCBwLCAzKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWljcm9zZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIGZvcm1hdFVUQ01pbGxpc2Vjb25kcyhkLCBwKSArIFwiMDAwXCI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ01vbnRoTnVtYmVyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ01vbnRoKCkgKyAxLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDTWludXRlcyhkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENNaW51dGVzKCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENTZWNvbmRzKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ1NlY29uZHMoKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtkYXlOdW1iZXJNb25kYXkoZCkge1xuICB2YXIgZG93ID0gZC5nZXRVVENEYXkoKTtcbiAgcmV0dXJuIGRvdyA9PT0gMCA/IDcgOiBkb3c7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJTdW5kYXkoZCwgcCkge1xuICByZXR1cm4gcGFkKHV0Y1N1bmRheS5jb3VudCh1dGNZZWFyKGQpLCBkKSwgcCwgMik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFVUQ1dlZWtOdW1iZXJJU08oZCwgcCkge1xuICB2YXIgZGF5ID0gZC5nZXRVVENEYXkoKTtcbiAgZCA9IChkYXkgPj0gNCB8fCBkYXkgPT09IDApID8gdXRjVGh1cnNkYXkoZCkgOiB1dGNUaHVyc2RheS5jZWlsKGQpO1xuICByZXR1cm4gcGFkKHV0Y1RodXJzZGF5LmNvdW50KHV0Y1llYXIoZCksIGQpICsgKHV0Y1llYXIoZCkuZ2V0VVRDRGF5KCkgPT09IDQpLCBwLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VVRDV2Vla2RheU51bWJlclN1bmRheShkKSB7XG4gIHJldHVybiBkLmdldFVUQ0RheSgpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENXZWVrTnVtYmVyTW9uZGF5KGQsIHApIHtcbiAgcmV0dXJuIHBhZCh1dGNNb25kYXkuY291bnQodXRjWWVhcihkKSwgZCksIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENZZWFyKGQsIHApIHtcbiAgcmV0dXJuIHBhZChkLmdldFVUQ0Z1bGxZZWFyKCkgJSAxMDAsIHAsIDIpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENGdWxsWWVhcihkLCBwKSB7XG4gIHJldHVybiBwYWQoZC5nZXRVVENGdWxsWWVhcigpICUgMTAwMDAsIHAsIDQpO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVVENab25lKCkge1xuICByZXR1cm4gXCIrMDAwMFwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRMaXRlcmFsUGVyY2VudCgpIHtcbiAgcmV0dXJuIFwiJVwiO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wKGQpIHtcbiAgcmV0dXJuICtkO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVbml4VGltZXN0YW1wU2Vjb25kcyhkKSB7XG4gIHJldHVybiBNYXRoLmZsb29yKCtkIC8gMTAwMCk7XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZVwiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciB0aW1lRm9ybWF0O1xuZXhwb3J0IHZhciB0aW1lUGFyc2U7XG5leHBvcnQgdmFyIHV0Y0Zvcm1hdDtcbmV4cG9ydCB2YXIgdXRjUGFyc2U7XG5cbmRlZmF1bHRMb2NhbGUoe1xuICBkYXRlVGltZTogXCIleCwgJVhcIixcbiAgZGF0ZTogXCIlLW0vJS1kLyVZXCIsXG4gIHRpbWU6IFwiJS1JOiVNOiVTICVwXCIsXG4gIHBlcmlvZHM6IFtcIkFNXCIsIFwiUE1cIl0sXG4gIGRheXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICBzaG9ydERheXM6IFtcIlN1blwiLCBcIk1vblwiLCBcIlR1ZVwiLCBcIldlZFwiLCBcIlRodVwiLCBcIkZyaVwiLCBcIlNhdFwiXSxcbiAgbW9udGhzOiBbXCJKYW51YXJ5XCIsIFwiRmVicnVhcnlcIiwgXCJNYXJjaFwiLCBcIkFwcmlsXCIsIFwiTWF5XCIsIFwiSnVuZVwiLCBcIkp1bHlcIiwgXCJBdWd1c3RcIiwgXCJTZXB0ZW1iZXJcIiwgXCJPY3RvYmVyXCIsIFwiTm92ZW1iZXJcIiwgXCJEZWNlbWJlclwiXSxcbiAgc2hvcnRNb250aHM6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRlZmF1bHRMb2NhbGUoZGVmaW5pdGlvbikge1xuICBsb2NhbGUgPSBmb3JtYXRMb2NhbGUoZGVmaW5pdGlvbik7XG4gIHRpbWVGb3JtYXQgPSBsb2NhbGUuZm9ybWF0O1xuICB0aW1lUGFyc2UgPSBsb2NhbGUucGFyc2U7XG4gIHV0Y0Zvcm1hdCA9IGxvY2FsZS51dGNGb3JtYXQ7XG4gIHV0Y1BhcnNlID0gbG9jYWxlLnV0Y1BhcnNlO1xuICByZXR1cm4gbG9jYWxlO1xufVxuIiwiaW1wb3J0IHt1dGNGb3JtYXR9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZXhwb3J0IHZhciBpc29TcGVjaWZpZXIgPSBcIiVZLSVtLSVkVCVIOiVNOiVTLiVMWlwiO1xuXG5mdW5jdGlvbiBmb3JtYXRJc29OYXRpdmUoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS50b0lTT1N0cmluZygpO1xufVxuXG52YXIgZm9ybWF0SXNvID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmdcbiAgICA/IGZvcm1hdElzb05hdGl2ZVxuICAgIDogdXRjRm9ybWF0KGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IGZvcm1hdElzbztcbiIsImltcG9ydCB7aXNvU3BlY2lmaWVyfSBmcm9tIFwiLi9pc29Gb3JtYXRcIjtcbmltcG9ydCB7dXRjUGFyc2V9IGZyb20gXCIuL2RlZmF1bHRMb2NhbGVcIjtcblxuZnVuY3Rpb24gcGFyc2VJc29OYXRpdmUoc3RyaW5nKSB7XG4gIHZhciBkYXRlID0gbmV3IERhdGUoc3RyaW5nKTtcbiAgcmV0dXJuIGlzTmFOKGRhdGUpID8gbnVsbCA6IGRhdGU7XG59XG5cbnZhciBwYXJzZUlzbyA9ICtuZXcgRGF0ZShcIjIwMDAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiKVxuICAgID8gcGFyc2VJc29OYXRpdmVcbiAgICA6IHV0Y1BhcnNlKGlzb1NwZWNpZmllcik7XG5cbmV4cG9ydCBkZWZhdWx0IHBhcnNlSXNvO1xuIiwiZXhwb3J0IHZhciB4aHRtbCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHN2ZzogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICB4aHRtbDogeGh0bWwsXG4gIHhsaW5rOiBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixcbiAgeG1sOiBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICB4bWxuczogXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1wiXG59O1xuIiwiaW1wb3J0IG5hbWVzcGFjZXMgZnJvbSBcIi4vbmFtZXNwYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBwcmVmaXggPSBuYW1lICs9IFwiXCIsIGkgPSBwcmVmaXguaW5kZXhPZihcIjpcIik7XG4gIGlmIChpID49IDAgJiYgKHByZWZpeCA9IG5hbWUuc2xpY2UoMCwgaSkpICE9PSBcInhtbG5zXCIpIG5hbWUgPSBuYW1lLnNsaWNlKGkgKyAxKTtcbiAgcmV0dXJuIG5hbWVzcGFjZXMuaGFzT3duUHJvcGVydHkocHJlZml4KSA/IHtzcGFjZTogbmFtZXNwYWNlc1twcmVmaXhdLCBsb2NhbDogbmFtZX0gOiBuYW1lO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2VcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIG5vbmUoKSB7fVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gc2VsZWN0b3IgPT0gbnVsbCA/IG5vbmUgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIGVtcHR5KCkge1xuICByZXR1cm4gW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBzZWxlY3RvciA9PSBudWxsID8gZW1wdHkgOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHNlbGVjdG9yKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHVwZGF0ZSkge1xuICByZXR1cm4gbmV3IEFycmF5KHVwZGF0ZS5sZW5ndGgpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZW50ZXIgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEVudGVyTm9kZShwYXJlbnQsIGRhdHVtKSB7XG4gIHRoaXMub3duZXJEb2N1bWVudCA9IHBhcmVudC5vd25lckRvY3VtZW50O1xuICB0aGlzLm5hbWVzcGFjZVVSSSA9IHBhcmVudC5uYW1lc3BhY2VVUkk7XG4gIHRoaXMuX25leHQgPSBudWxsO1xuICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMuX19kYXRhX18gPSBkYXR1bTtcbn1cblxuRW50ZXJOb2RlLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IEVudGVyTm9kZSxcbiAgYXBwZW5kQ2hpbGQ6IGZ1bmN0aW9uKGNoaWxkKSB7IHJldHVybiB0aGlzLl9wYXJlbnQuaW5zZXJ0QmVmb3JlKGNoaWxkLCB0aGlzLl9uZXh0KTsgfSxcbiAgaW5zZXJ0QmVmb3JlOiBmdW5jdGlvbihjaGlsZCwgbmV4dCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgbmV4dCk7IH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7IH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7IHJldHVybiB0aGlzLl9wYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7IH1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4geDtcbiAgfTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHtFbnRlck5vZGV9IGZyb20gXCIuL2VudGVyXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4uL2NvbnN0YW50XCI7XG5cbnZhciBrZXlQcmVmaXggPSBcIiRcIjsgLy8gUHJvdGVjdCBhZ2FpbnN0IGtleXMgbGlrZSDigJxfX3Byb3RvX1/igJ0uXG5cbmZ1bmN0aW9uIGJpbmRJbmRleChwYXJlbnQsIGdyb3VwLCBlbnRlciwgdXBkYXRlLCBleGl0LCBkYXRhKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG5vZGUsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aDtcblxuICAvLyBQdXQgYW55IG5vbi1udWxsIG5vZGVzIHRoYXQgZml0IGludG8gdXBkYXRlLlxuICAvLyBQdXQgYW55IG51bGwgbm9kZXMgaW50byBlbnRlci5cbiAgLy8gUHV0IGFueSByZW1haW5pbmcgZGF0YSBpbnRvIGVudGVyLlxuICBmb3IgKDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGRvbuKAmXQgZml0IGludG8gZXhpdC5cbiAgZm9yICg7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRLZXkocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSwga2V5KSB7XG4gIHZhciBpLFxuICAgICAgbm9kZSxcbiAgICAgIG5vZGVCeUtleVZhbHVlID0ge30sXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgICAgaWYgKGtleVZhbHVlIGluIG5vZGVCeUtleVZhbHVlKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5UHJlZml4ICsga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKTtcbiAgICBpZiAobm9kZSA9IG5vZGVCeUtleVZhbHVlW2tleVZhbHVlXSkge1xuICAgICAgdXBkYXRlW2ldID0gbm9kZTtcbiAgICAgIG5vZGUuX19kYXRhX18gPSBkYXRhW2ldO1xuICAgICAgbm9kZUJ5S2V5VmFsdWVba2V5VmFsdWVdID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgZW50ZXJbaV0gPSBuZXcgRW50ZXJOb2RlKHBhcmVudCwgZGF0YVtpXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQWRkIGFueSByZW1haW5pbmcgbm9kZXMgdGhhdCB3ZXJlIG5vdCBib3VuZCB0byBkYXRhIHRvIGV4aXQuXG4gIGZvciAoaSA9IDA7IGkgPCBncm91cExlbmd0aDsgKytpKSB7XG4gICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIChub2RlQnlLZXlWYWx1ZVtrZXlWYWx1ZXNbaV1dID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCF2YWx1ZSkge1xuICAgIGRhdGEgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBqID0gLTE7XG4gICAgdGhpcy5lYWNoKGZ1bmN0aW9uKGQpIHsgZGF0YVsrK2pdID0gZDsgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICB2YXIgYmluZCA9IGtleSA/IGJpbmRLZXkgOiBiaW5kSW5kZXgsXG4gICAgICBwYXJlbnRzID0gdGhpcy5fcGFyZW50cyxcbiAgICAgIGdyb3VwcyA9IHRoaXMuX2dyb3VwcztcblxuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHZhbHVlID0gY29uc3RhbnQodmFsdWUpO1xuXG4gIGZvciAodmFyIG0gPSBncm91cHMubGVuZ3RoLCB1cGRhdGUgPSBuZXcgQXJyYXkobSksIGVudGVyID0gbmV3IEFycmF5KG0pLCBleGl0ID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIHZhciBwYXJlbnQgPSBwYXJlbnRzW2pdLFxuICAgICAgICBncm91cCA9IGdyb3Vwc1tqXSxcbiAgICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICAgIGRhdGEgPSB2YWx1ZS5jYWxsKHBhcmVudCwgcGFyZW50ICYmIHBhcmVudC5fX2RhdGFfXywgaiwgcGFyZW50cyksXG4gICAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgICAgZW50ZXJHcm91cCA9IGVudGVyW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICB1cGRhdGVHcm91cCA9IHVwZGF0ZVtqXSA9IG5ldyBBcnJheShkYXRhTGVuZ3RoKSxcbiAgICAgICAgZXhpdEdyb3VwID0gZXhpdFtqXSA9IG5ldyBBcnJheShncm91cExlbmd0aCk7XG5cbiAgICBiaW5kKHBhcmVudCwgZ3JvdXAsIGVudGVyR3JvdXAsIHVwZGF0ZUdyb3VwLCBleGl0R3JvdXAsIGRhdGEsIGtleSk7XG5cbiAgICAvLyBOb3cgY29ubmVjdCB0aGUgZW50ZXIgbm9kZXMgdG8gdGhlaXIgZm9sbG93aW5nIHVwZGF0ZSBub2RlLCBzdWNoIHRoYXRcbiAgICAvLyBhcHBlbmRDaGlsZCBjYW4gaW5zZXJ0IHRoZSBtYXRlcmlhbGl6ZWQgZW50ZXIgbm9kZSBiZWZvcmUgdGhpcyBub2RlLFxuICAgIC8vIHJhdGhlciB0aGFuIGF0IHRoZSBlbmQgb2YgdGhlIHBhcmVudCBub2RlLlxuICAgIGZvciAodmFyIGkwID0gMCwgaTEgPSAwLCBwcmV2aW91cywgbmV4dDsgaTAgPCBkYXRhTGVuZ3RoOyArK2kwKSB7XG4gICAgICBpZiAocHJldmlvdXMgPSBlbnRlckdyb3VwW2kwXSkge1xuICAgICAgICBpZiAoaTAgPj0gaTEpIGkxID0gaTAgKyAxO1xuICAgICAgICB3aGlsZSAoIShuZXh0ID0gdXBkYXRlR3JvdXBbaTFdKSAmJiArK2kxIDwgZGF0YUxlbmd0aCk7XG4gICAgICAgIHByZXZpb3VzLl9uZXh0ID0gbmV4dCB8fCBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSA9IG5ldyBTZWxlY3Rpb24odXBkYXRlLCBwYXJlbnRzKTtcbiAgdXBkYXRlLl9lbnRlciA9IGVudGVyO1xuICB1cGRhdGUuX2V4aXQgPSBleGl0O1xuICByZXR1cm4gdXBkYXRlO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNvbXBhcmUpIHtcbiAgaWYgKCFjb21wYXJlKSBjb21wYXJlID0gYXNjZW5kaW5nO1xuXG4gIGZ1bmN0aW9uIGNvbXBhcmVOb2RlKGEsIGIpIHtcbiAgICByZXR1cm4gYSAmJiBiID8gY29tcGFyZShhLl9fZGF0YV9fLCBiLl9fZGF0YV9fKSA6ICFhIC0gIWI7XG4gIH1cblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzb3J0Z3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzb3J0Z3JvdXAgPSBzb3J0Z3JvdXBzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBzb3J0Z3JvdXBbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgICBzb3J0Z3JvdXAuc29ydChjb21wYXJlTm9kZSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzb3J0Z3JvdXBzLCB0aGlzLl9wYXJlbnRzKS5vcmRlcigpO1xufVxuXG5mdW5jdGlvbiBhc2NlbmRpbmcoYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgbmFtZXNwYWNlIGZyb20gXCIuLi9uYW1lc3BhY2VcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdik7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBlbHNlIHRoaXMuc2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsLCB2KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBub2RlID0gdGhpcy5ub2RlKCk7XG4gICAgcmV0dXJuIGZ1bGxuYW1lLmxvY2FsXG4gICAgICAgID8gbm9kZS5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpXG4gICAgICAgIDogbm9kZS5nZXRBdHRyaWJ1dGUoZnVsbG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodmFsdWUgPT0gbnVsbFxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyRnVuY3Rpb25OUyA6IGF0dHJGdW5jdGlvbilcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKSkoZnVsbG5hbWUsIHZhbHVlKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlKSB7XG4gIHJldHVybiAobm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldykgLy8gbm9kZSBpcyBhIE5vZGVcbiAgICAgIHx8IChub2RlLmRvY3VtZW50ICYmIG5vZGUpIC8vIG5vZGUgaXMgYSBXaW5kb3dcbiAgICAgIHx8IG5vZGUuZGVmYXVsdFZpZXc7IC8vIG5vZGUgaXMgYSBEb2N1bWVudFxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gc3R5bGVSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVDb25zdGFudChuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsdWUsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVGdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAodiA9PSBudWxsKSB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICAgIGVsc2UgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2LCBwcmlvcml0eSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDFcbiAgICAgID8gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgICA/IHN0eWxlUmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgID8gc3R5bGVGdW5jdGlvblxuICAgICAgICAgICAgOiBzdHlsZUNvbnN0YW50KShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkgPT0gbnVsbCA/IFwiXCIgOiBwcmlvcml0eSkpXG4gICAgICA6IHN0eWxlVmFsdWUodGhpcy5ub2RlKCksIG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3R5bGVWYWx1ZShub2RlLCBuYW1lKSB7XG4gIHJldHVybiBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUobmFtZSlcbiAgICAgIHx8IGRlZmF1bHRWaWV3KG5vZGUpLmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbn1cbiIsImZ1bmN0aW9uIGNsYXNzQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcudHJpbSgpLnNwbGl0KC9efFxccysvKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NMaXN0KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuY2xhc3NMaXN0IHx8IG5ldyBDbGFzc0xpc3Qobm9kZSk7XG59XG5cbmZ1bmN0aW9uIENsYXNzTGlzdChub2RlKSB7XG4gIHRoaXMuX25vZGUgPSBub2RlO1xuICB0aGlzLl9uYW1lcyA9IGNsYXNzQXJyYXkobm9kZS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiKTtcbn1cblxuQ2xhc3NMaXN0LnByb3RvdHlwZSA9IHtcbiAgYWRkOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpIDwgMCkge1xuICAgICAgdGhpcy5fbmFtZXMucHVzaChuYW1lKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgcmVtb3ZlOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIGkgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgIGlmIChpID49IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnNwbGljZShpLCAxKTtcbiAgICAgIHRoaXMuX25vZGUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgdGhpcy5fbmFtZXMuam9pbihcIiBcIikpO1xuICAgIH1cbiAgfSxcbiAgY29udGFpbnM6IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKSA+PSAwO1xuICB9XG59O1xuXG5mdW5jdGlvbiBjbGFzc2VkQWRkKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LmFkZChuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRSZW1vdmUobm9kZSwgbmFtZXMpIHtcbiAgdmFyIGxpc3QgPSBjbGFzc0xpc3Qobm9kZSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgd2hpbGUgKCsraSA8IG4pIGxpc3QucmVtb3ZlKG5hbWVzW2ldKTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZFRydWUobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRBZGQodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRmFsc2UobmFtZXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzZWRSZW1vdmUodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkRnVuY3Rpb24obmFtZXMsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAodmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKSA/IGNsYXNzZWRBZGQgOiBjbGFzc2VkUmVtb3ZlKSh0aGlzLCBuYW1lcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBuYW1lcyA9IGNsYXNzQXJyYXkobmFtZSArIFwiXCIpO1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBsaXN0ID0gY2xhc3NMaXN0KHRoaXMubm9kZSgpKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoIWxpc3QuY29udGFpbnMobmFtZXNbaV0pKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBjbGFzc2VkRnVuY3Rpb24gOiB2YWx1ZVxuICAgICAgPyBjbGFzc2VkVHJ1ZVxuICAgICAgOiBjbGFzc2VkRmFsc2UpKG5hbWVzLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gdGV4dFJlbW92ZSgpIHtcbiAgdGhpcy50ZXh0Q29udGVudCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdiA9PSBudWxsID8gXCJcIiA6IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCh2YWx1ZSA9PSBudWxsXG4gICAgICAgICAgPyB0ZXh0UmVtb3ZlIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyB0ZXh0RnVuY3Rpb25cbiAgICAgICAgICA6IHRleHRDb25zdGFudCkodmFsdWUpKVxuICAgICAgOiB0aGlzLm5vZGUoKS50ZXh0Q29udGVudDtcbn1cbiIsImZ1bmN0aW9uIGh0bWxSZW1vdmUoKSB7XG4gIHRoaXMuaW5uZXJIVE1MID0gXCJcIjtcbn1cblxuZnVuY3Rpb24gaHRtbENvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmlubmVySFRNTCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiBodG1sRnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2ID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmlubmVySFRNTCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gaHRtbFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gaHRtbEZ1bmN0aW9uXG4gICAgICAgICAgOiBodG1sQ29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkuaW5uZXJIVE1MO1xufVxuIiwiZnVuY3Rpb24gcmFpc2UoKSB7XG4gIGlmICh0aGlzLm5leHRTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJhaXNlKTtcbn1cbiIsImZ1bmN0aW9uIGxvd2VyKCkge1xuICBpZiAodGhpcy5wcmV2aW91c1NpYmxpbmcpIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcywgdGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChsb3dlcik7XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuaW1wb3J0IHNlbGVjdG9yIGZyb20gXCIuLi9zZWxlY3RvclwiO1xuXG5mdW5jdGlvbiBjb25zdGFudE51bGwoKSB7XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBiZWZvcmUpIHtcbiAgdmFyIGNyZWF0ZSA9IHR5cGVvZiBuYW1lID09PSBcImZ1bmN0aW9uXCIgPyBuYW1lIDogY3JlYXRvcihuYW1lKSxcbiAgICAgIHNlbGVjdCA9IGJlZm9yZSA9PSBudWxsID8gY29uc3RhbnROdWxsIDogdHlwZW9mIGJlZm9yZSA9PT0gXCJmdW5jdGlvblwiID8gYmVmb3JlIDogc2VsZWN0b3IoYmVmb3JlKTtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmluc2VydEJlZm9yZShjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgc2VsZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiZnVuY3Rpb24gcmVtb3ZlKCkge1xuICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5lYWNoKHJlbW92ZSk7XG59XG4iLCJmdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVTaGFsbG93KCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZShmYWxzZSksIHRoaXMubmV4dFNpYmxpbmcpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25fY2xvbmVEZWVwKCkge1xuICByZXR1cm4gdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLmNsb25lTm9kZSh0cnVlKSwgdGhpcy5uZXh0U2libGluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJ2YXIgZmlsdGVyRXZlbnRzID0ge307XG5cbmV4cG9ydCB2YXIgZXZlbnQgPSBudWxsO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuICBpZiAoIShcIm9ubW91c2VlbnRlclwiIGluIGVsZW1lbnQpKSB7XG4gICAgZmlsdGVyRXZlbnRzID0ge21vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsIG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIn07XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsdGVyQ29udGV4dExpc3RlbmVyKGxpc3RlbmVyLCBpbmRleCwgZ3JvdXApIHtcbiAgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIsIGluZGV4LCBncm91cCk7XG4gIHJldHVybiBmdW5jdGlvbihldmVudCkge1xuICAgIHZhciByZWxhdGVkID0gZXZlbnQucmVsYXRlZFRhcmdldDtcbiAgICBpZiAoIXJlbGF0ZWQgfHwgKHJlbGF0ZWQgIT09IHRoaXMgJiYgIShyZWxhdGVkLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKHRoaXMpICYgOCkpKSB7XG4gICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnRleHRMaXN0ZW5lcihsaXN0ZW5lciwgaW5kZXgsIGdyb3VwKSB7XG4gIHJldHVybiBmdW5jdGlvbihldmVudDEpIHtcbiAgICB2YXIgZXZlbnQwID0gZXZlbnQ7IC8vIEV2ZW50cyBjYW4gYmUgcmVlbnRyYW50IChlLmcuLCBmb2N1cykuXG4gICAgZXZlbnQgPSBldmVudDE7XG4gICAgdHJ5IHtcbiAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgdGhpcy5fX2RhdGFfXywgaW5kZXgsIGdyb3VwKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgZXZlbnQgPSBldmVudDA7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBvblJlbW92ZSh0eXBlbmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uID0gdGhpcy5fX29uO1xuICAgIGlmICghb24pIHJldHVybjtcbiAgICBmb3IgKHZhciBqID0gMCwgaSA9IC0xLCBtID0gb24ubGVuZ3RoLCBvOyBqIDwgbTsgKytqKSB7XG4gICAgICBpZiAobyA9IG9uW2pdLCAoIXR5cGVuYW1lLnR5cGUgfHwgby50eXBlID09PSB0eXBlbmFtZS50eXBlKSAmJiBvLm5hbWUgPT09IHR5cGVuYW1lLm5hbWUpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKG8udHlwZSwgby5saXN0ZW5lciwgby5jYXB0dXJlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9uWysraV0gPSBvO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoKytpKSBvbi5sZW5ndGggPSBpO1xuICAgIGVsc2UgZGVsZXRlIHRoaXMuX19vbjtcbiAgfTtcbn1cblxuZnVuY3Rpb24gb25BZGQodHlwZW5hbWUsIHZhbHVlLCBjYXB0dXJlKSB7XG4gIHZhciB3cmFwID0gZmlsdGVyRXZlbnRzLmhhc093blByb3BlcnR5KHR5cGVuYW1lLnR5cGUpID8gZmlsdGVyQ29udGV4dExpc3RlbmVyIDogY29udGV4dExpc3RlbmVyO1xuICByZXR1cm4gZnVuY3Rpb24oZCwgaSwgZ3JvdXApIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb24sIG8sIGxpc3RlbmVyID0gd3JhcCh2YWx1ZSwgaSwgZ3JvdXApO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLmNhcHR1cmUpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8uY2FwdHVyZSA9IGNhcHR1cmUpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBjYXB0dXJlOiBjYXB0dXJlfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIGNhcHR1cmUpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGlmIChjYXB0dXJlID09IG51bGwpIGNhcHR1cmUgPSBmYWxzZTtcbiAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgdGhpcy5lYWNoKG9uKHR5cGVuYW1lc1tpXSwgdmFsdWUsIGNhcHR1cmUpKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b21FdmVudChldmVudDEsIGxpc3RlbmVyLCB0aGF0LCBhcmdzKSB7XG4gIHZhciBldmVudDAgPSBldmVudDtcbiAgZXZlbnQxLnNvdXJjZUV2ZW50ID0gZXZlbnQ7XG4gIGV2ZW50ID0gZXZlbnQxO1xuICB0cnkge1xuICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBldmVudCA9IGV2ZW50MDtcbiAgfVxufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3dcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGxcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGFcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXJcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemVcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHlcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWRcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbFwiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlclwiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnRcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bVwiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaFwiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cblNlbGVjdGlvbi5wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogU2VsZWN0aW9uLFxuICBzZWxlY3Q6IHNlbGVjdGlvbl9zZWxlY3QsXG4gIHNlbGVjdEFsbDogc2VsZWN0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiBzZWxlY3Rpb25fZmlsdGVyLFxuICBkYXRhOiBzZWxlY3Rpb25fZGF0YSxcbiAgZW50ZXI6IHNlbGVjdGlvbl9lbnRlcixcbiAgZXhpdDogc2VsZWN0aW9uX2V4aXQsXG4gIGpvaW46IHNlbGVjdGlvbl9qb2luLFxuICBtZXJnZTogc2VsZWN0aW9uX21lcmdlLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3JcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGxcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yQWxsKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gW10sIHBhcmVudHMgPSBbXSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc3ViZ3JvdXBzLnB1c2goc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKTtcbiAgICAgICAgcGFyZW50cy5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBtYXRjaGVyIGZyb20gXCIuLi9tYXRjaGVyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG1hdGNoKSB7XG4gIGlmICh0eXBlb2YgbWF0Y2ggIT09IFwiZnVuY3Rpb25cIikgbWF0Y2ggPSBtYXRjaGVyKG1hdGNoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBzdWJncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHN1Ymdyb3VwID0gc3ViZ3JvdXBzW2pdID0gW10sIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgbWF0Y2guY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpIHtcbiAgICAgICAgc3ViZ3JvdXAucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiaW1wb3J0IHNwYXJzZSBmcm9tIFwiLi9zcGFyc2VcIjtcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZXhpdCB8fCB0aGlzLl9ncm91cHMubWFwKHNwYXJzZSksIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ob25lbnRlciwgb251cGRhdGUsIG9uZXhpdCkge1xuICB2YXIgZW50ZXIgPSB0aGlzLmVudGVyKCksIHVwZGF0ZSA9IHRoaXMsIGV4aXQgPSB0aGlzLmV4aXQoKTtcbiAgZW50ZXIgPSB0eXBlb2Ygb25lbnRlciA9PT0gXCJmdW5jdGlvblwiID8gb25lbnRlcihlbnRlcikgOiBlbnRlci5hcHBlbmQob25lbnRlciArIFwiXCIpO1xuICBpZiAob251cGRhdGUgIT0gbnVsbCkgdXBkYXRlID0gb251cGRhdGUodXBkYXRlKTtcbiAgaWYgKG9uZXhpdCA9PSBudWxsKSBleGl0LnJlbW92ZSgpOyBlbHNlIG9uZXhpdChleGl0KTtcbiAgcmV0dXJuIGVudGVyICYmIHVwZGF0ZSA/IGVudGVyLm1lcmdlKHVwZGF0ZSkub3JkZXIoKSA6IHVwZGF0ZTtcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rpb24pIHtcblxuICBmb3IgKHZhciBncm91cHMwID0gdGhpcy5fZ3JvdXBzLCBncm91cHMxID0gc2VsZWN0aW9uLl9ncm91cHMsIG0wID0gZ3JvdXBzMC5sZW5ndGgsIG0xID0gZ3JvdXBzMS5sZW5ndGgsIG0gPSBNYXRoLm1pbihtMCwgbTEpLCBtZXJnZXMgPSBuZXcgQXJyYXkobTApLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwMCA9IGdyb3VwczBbal0sIGdyb3VwMSA9IGdyb3VwczFbal0sIG4gPSBncm91cDAubGVuZ3RoLCBtZXJnZSA9IG1lcmdlc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXAwW2ldIHx8IGdyb3VwMVtpXSkge1xuICAgICAgICBtZXJnZVtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yICg7IGogPCBtMDsgKytqKSB7XG4gICAgbWVyZ2VzW2pdID0gZ3JvdXBzMFtqXTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAtMSwgbSA9IGdyb3Vwcy5sZW5ndGg7ICsraiA8IG07KSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSBncm91cC5sZW5ndGggLSAxLCBuZXh0ID0gZ3JvdXBbaV0sIG5vZGU7IC0taSA+PSAwOykge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICBpZiAobmV4dCAmJiBub2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKG5leHQpIF4gNCkgbmV4dC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBuZXh0KTtcbiAgICAgICAgbmV4dCA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzBdO1xuICBhcmd1bWVudHNbMF0gPSB0aGlzO1xuICBjYWxsYmFjay5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgbm9kZXMgPSBuZXcgQXJyYXkodGhpcy5zaXplKCkpLCBpID0gLTE7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgbm9kZXNbKytpXSA9IHRoaXM7IH0pO1xuICByZXR1cm4gbm9kZXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgc2l6ZSA9IDA7XG4gIHRoaXMuZWFjaChmdW5jdGlvbigpIHsgKytzaXplOyB9KTtcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJpbXBvcnQgY3JlYXRvciBmcm9tIFwiLi4vY3JlYXRvclwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBjcmVhdGUgPSB0eXBlb2YgbmFtZSA9PT0gXCJmdW5jdGlvblwiID8gbmFtZSA6IGNyZWF0b3IobmFtZSk7XG4gIHJldHVybiB0aGlzLnNlbGVjdChmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChjcmVhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH0pO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5wcm9wZXJ0eShcIl9fZGF0YV9fXCIsIHZhbHVlKVxuICAgICAgOiB0aGlzLm5vZGUoKS5fX2RhdGFfXztcbn1cbiIsImltcG9ydCB7U2VsZWN0aW9uLCByb290fSBmcm9tIFwiLi9zZWxlY3Rpb24vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIlxuICAgICAgPyBuZXcgU2VsZWN0aW9uKFtbZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcildXSwgW2RvY3VtZW50LmRvY3VtZW50RWxlbWVudF0pXG4gICAgICA6IG5ldyBTZWxlY3Rpb24oW1tzZWxlY3Rvcl1dLCByb290KTtcbn1cbiIsInZhciBuZXh0SWQgPSAwO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbCgpIHtcbiAgcmV0dXJuIG5ldyBMb2NhbDtcbn1cblxuZnVuY3Rpb24gTG9jYWwoKSB7XG4gIHRoaXMuXyA9IFwiQFwiICsgKCsrbmV4dElkKS50b1N0cmluZygzNik7XG59XG5cbkxvY2FsLnByb3RvdHlwZSA9IGxvY2FsLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IExvY2FsLFxuICBnZXQ6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICB2YXIgaWQgPSB0aGlzLl87XG4gICAgd2hpbGUgKCEoaWQgaW4gbm9kZSkpIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSByZXR1cm47XG4gICAgcmV0dXJuIG5vZGVbaWRdO1xuICB9LFxuICBzZXQ6IGZ1bmN0aW9uKG5vZGUsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5vZGVbdGhpcy5fXSA9IHZhbHVlO1xuICB9LFxuICByZW1vdmU6IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5fIGluIG5vZGUgJiYgZGVsZXRlIG5vZGVbdGhpcy5fXTtcbiAgfSxcbiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl87XG4gIH1cbn07XG4iLCJ2YXIgbm9vcCA9IHt2YWx1ZTogZnVuY3Rpb24oKSB7fX07XG5cbmZ1bmN0aW9uIGRpc3BhdGNoKCkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IGFyZ3VtZW50cy5sZW5ndGgsIF8gPSB7fSwgdDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKHQgPSBhcmd1bWVudHNbaV0gKyBcIlwiKSB8fCAodCBpbiBfKSkgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCB0eXBlOiBcIiArIHQpO1xuICAgIF9bdF0gPSBbXTtcbiAgfVxuICByZXR1cm4gbmV3IERpc3BhdGNoKF8pO1xufVxuXG5mdW5jdGlvbiBEaXNwYXRjaChfKSB7XG4gIHRoaXMuXyA9IF87XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcywgdHlwZXMpIHtcbiAgcmV0dXJuIHR5cGVuYW1lcy50cmltKCkuc3BsaXQoL158XFxzKy8pLm1hcChmdW5jdGlvbih0KSB7XG4gICAgdmFyIG5hbWUgPSBcIlwiLCBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSBuYW1lID0gdC5zbGljZShpICsgMSksIHQgPSB0LnNsaWNlKDAsIGkpO1xuICAgIGlmICh0ICYmICF0eXBlcy5oYXNPd25Qcm9wZXJ0eSh0KSkgdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB0eXBlOiBcIiArIHQpO1xuICAgIHJldHVybiB7dHlwZTogdCwgbmFtZTogbmFtZX07XG4gIH0pO1xufVxuXG5EaXNwYXRjaC5wcm90b3R5cGUgPSBkaXNwYXRjaC5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBEaXNwYXRjaCxcbiAgb246IGZ1bmN0aW9uKHR5cGVuYW1lLCBjYWxsYmFjaykge1xuICAgIHZhciBfID0gdGhpcy5fLFxuICAgICAgICBUID0gcGFyc2VUeXBlbmFtZXModHlwZW5hbWUgKyBcIlwiLCBfKSxcbiAgICAgICAgdCxcbiAgICAgICAgaSA9IC0xLFxuICAgICAgICBuID0gVC5sZW5ndGg7XG5cbiAgICAvLyBJZiBubyBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZXR1cm4gdGhlIGNhbGxiYWNrIG9mIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgICAgd2hpbGUgKCsraSA8IG4pIGlmICgodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpICYmICh0ID0gZ2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUpKSkgcmV0dXJuIHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYSB0eXBlIHdhcyBzcGVjaWZpZWQsIHNldCB0aGUgY2FsbGJhY2sgZm9yIHRoZSBnaXZlbiB0eXBlIGFuZCBuYW1lLlxuICAgIC8vIE90aGVyd2lzZSwgaWYgYSBudWxsIGNhbGxiYWNrIHdhcyBzcGVjaWZpZWQsIHJlbW92ZSBjYWxsYmFja3Mgb2YgdGhlIGdpdmVuIG5hbWUuXG4gICAgaWYgKGNhbGxiYWNrICE9IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgY2FsbGJhY2s6IFwiICsgY2FsbGJhY2spO1xuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICBpZiAodCA9ICh0eXBlbmFtZSA9IFRbaV0pLnR5cGUpIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgY2FsbGJhY2spO1xuICAgICAgZWxzZSBpZiAoY2FsbGJhY2sgPT0gbnVsbCkgZm9yICh0IGluIF8pIF9bdF0gPSBzZXQoX1t0XSwgdHlwZW5hbWUubmFtZSwgbnVsbCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIGNvcHk6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBjb3B5ID0ge30sIF8gPSB0aGlzLl87XG4gICAgZm9yICh2YXIgdCBpbiBfKSBjb3B5W3RdID0gX1t0XS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgRGlzcGF0Y2goY29weSk7XG4gIH0sXG4gIGNhbGw6IGZ1bmN0aW9uKHR5cGUsIHRoYXQpIHtcbiAgICBpZiAoKG4gPSBhcmd1bWVudHMubGVuZ3RoIC0gMikgPiAwKSBmb3IgKHZhciBhcmdzID0gbmV3IEFycmF5KG4pLCBpID0gMCwgbiwgdDsgaSA8IG47ICsraSkgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMl07XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHQgPSB0aGlzLl9bdHlwZV0sIGkgPSAwLCBuID0gdC5sZW5ndGg7IGkgPCBuOyArK2kpIHRbaV0udmFsdWUuYXBwbHkodGhhdCwgYXJncyk7XG4gIH0sXG4gIGFwcGx5OiBmdW5jdGlvbih0eXBlLCB0aGF0LCBhcmdzKSB7XG4gICAgaWYgKCF0aGlzLl8uaGFzT3duUHJvcGVydHkodHlwZSkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0eXBlKTtcbiAgICBmb3IgKHZhciB0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBnZXQodHlwZSwgbmFtZSkge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoLCBjOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKChjID0gdHlwZVtpXSkubmFtZSA9PT0gbmFtZSkge1xuICAgICAgcmV0dXJuIGMudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldCh0eXBlLCBuYW1lLCBjYWxsYmFjaykge1xuICBmb3IgKHZhciBpID0gMCwgbiA9IHR5cGUubGVuZ3RoOyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKHR5cGVbaV0ubmFtZSA9PT0gbmFtZSkge1xuICAgICAgdHlwZVtpXSA9IG5vb3AsIHR5cGUgPSB0eXBlLnNsaWNlKDAsIGkpLmNvbmNhdCh0eXBlLnNsaWNlKGkgKyAxKSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKGNhbGxiYWNrICE9IG51bGwpIHR5cGUucHVzaCh7bmFtZTogbmFtZSwgdmFsdWU6IGNhbGxiYWNrfSk7XG4gIHJldHVybiB0eXBlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBkaXNwYXRjaDtcbiIsInZhciBmcmFtZSA9IDAsIC8vIGlzIGFuIGFuaW1hdGlvbiBmcmFtZSBwZW5kaW5nP1xuICAgIHRpbWVvdXQgPSAwLCAvLyBpcyBhIHRpbWVvdXQgcGVuZGluZz9cbiAgICBpbnRlcnZhbCA9IDAsIC8vIGFyZSBhbnkgdGltZXJzIGFjdGl2ZT9cbiAgICBwb2tlRGVsYXkgPSAxMDAwLCAvLyBob3cgZnJlcXVlbnRseSB3ZSBjaGVjayBmb3IgY2xvY2sgc2tld1xuICAgIHRhc2tIZWFkLFxuICAgIHRhc2tUYWlsLFxuICAgIGNsb2NrTGFzdCA9IDAsXG4gICAgY2xvY2tOb3cgPSAwLFxuICAgIGNsb2NrU2tldyA9IDAsXG4gICAgY2xvY2sgPSB0eXBlb2YgcGVyZm9ybWFuY2UgPT09IFwib2JqZWN0XCIgJiYgcGVyZm9ybWFuY2Uubm93ID8gcGVyZm9ybWFuY2UgOiBEYXRlLFxuICAgIHNldEZyYW1lID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdykgOiBmdW5jdGlvbihmKSB7IHNldFRpbWVvdXQoZiwgMTcpOyB9O1xuXG5leHBvcnQgZnVuY3Rpb24gbm93KCkge1xuICByZXR1cm4gY2xvY2tOb3cgfHwgKHNldEZyYW1lKGNsZWFyTm93KSwgY2xvY2tOb3cgPSBjbG9jay5ub3coKSArIGNsb2NrU2tldyk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyTm93KCkge1xuICBjbG9ja05vdyA9IDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBUaW1lcigpIHtcbiAgdGhpcy5fY2FsbCA9XG4gIHRoaXMuX3RpbWUgPVxuICB0aGlzLl9uZXh0ID0gbnVsbDtcbn1cblxuVGltZXIucHJvdG90eXBlID0gdGltZXIucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVGltZXIsXG4gIHJlc3RhcnQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXCIpO1xuICAgIHRpbWUgPSAodGltZSA9PSBudWxsID8gbm93KCkgOiArdGltZSkgKyAoZGVsYXkgPT0gbnVsbCA/IDAgOiArZGVsYXkpO1xuICAgIGlmICghdGhpcy5fbmV4dCAmJiB0YXNrVGFpbCAhPT0gdGhpcykge1xuICAgICAgaWYgKHRhc2tUYWlsKSB0YXNrVGFpbC5fbmV4dCA9IHRoaXM7XG4gICAgICBlbHNlIHRhc2tIZWFkID0gdGhpcztcbiAgICAgIHRhc2tUYWlsID0gdGhpcztcbiAgICB9XG4gICAgdGhpcy5fY2FsbCA9IGNhbGxiYWNrO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICAgIHNsZWVwKCk7XG4gIH0sXG4gIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYWxsKSB7XG4gICAgICB0aGlzLl9jYWxsID0gbnVsbDtcbiAgICAgIHRoaXMuX3RpbWUgPSBJbmZpbml0eTtcbiAgICAgIHNsZWVwKCk7XG4gICAgfVxuICB9XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdGltZXIoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICB0LnJlc3RhcnQoY2FsbGJhY2ssIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lckZsdXNoKCkge1xuICBub3coKTsgLy8gR2V0IHRoZSBjdXJyZW50IHRpbWUsIGlmIG5vdCBhbHJlYWR5IHNldC5cbiAgKytmcmFtZTsgLy8gUHJldGVuZCB3ZeKAmXZlIHNldCBhbiBhbGFybSwgaWYgd2UgaGF2ZW7igJl0IGFscmVhZHkuXG4gIHZhciB0ID0gdGFza0hlYWQsIGU7XG4gIHdoaWxlICh0KSB7XG4gICAgaWYgKChlID0gY2xvY2tOb3cgLSB0Ll90aW1lKSA+PSAwKSB0Ll9jYWxsLmNhbGwobnVsbCwgZSk7XG4gICAgdCA9IHQuX25leHQ7XG4gIH1cbiAgLS1mcmFtZTtcbn1cblxuZnVuY3Rpb24gd2FrZSgpIHtcbiAgY2xvY2tOb3cgPSAoY2xvY2tMYXN0ID0gY2xvY2subm93KCkpICsgY2xvY2tTa2V3O1xuICBmcmFtZSA9IHRpbWVvdXQgPSAwO1xuICB0cnkge1xuICAgIHRpbWVyRmx1c2goKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBmcmFtZSA9IDA7XG4gICAgbmFwKCk7XG4gICAgY2xvY2tOb3cgPSAwO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBva2UoKSB7XG4gIHZhciBub3cgPSBjbG9jay5ub3coKSwgZGVsYXkgPSBub3cgLSBjbG9ja0xhc3Q7XG4gIGlmIChkZWxheSA+IHBva2VEZWxheSkgY2xvY2tTa2V3IC09IGRlbGF5LCBjbG9ja0xhc3QgPSBub3c7XG59XG5cbmZ1bmN0aW9uIG5hcCgpIHtcbiAgdmFyIHQwLCB0MSA9IHRhc2tIZWFkLCB0MiwgdGltZSA9IEluZmluaXR5O1xuICB3aGlsZSAodDEpIHtcbiAgICBpZiAodDEuX2NhbGwpIHtcbiAgICAgIGlmICh0aW1lID4gdDEuX3RpbWUpIHRpbWUgPSB0MS5fdGltZTtcbiAgICAgIHQwID0gdDEsIHQxID0gdDEuX25leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHQyID0gdDEuX25leHQsIHQxLl9uZXh0ID0gbnVsbDtcbiAgICAgIHQxID0gdDAgPyB0MC5fbmV4dCA9IHQyIDogdGFza0hlYWQgPSB0MjtcbiAgICB9XG4gIH1cbiAgdGFza1RhaWwgPSB0MDtcbiAgc2xlZXAodGltZSk7XG59XG5cbmZ1bmN0aW9uIHNsZWVwKHRpbWUpIHtcbiAgaWYgKGZyYW1lKSByZXR1cm47IC8vIFNvb25lc3QgYWxhcm0gYWxyZWFkeSBzZXQsIG9yIHdpbGwgYmUuXG4gIGlmICh0aW1lb3V0KSB0aW1lb3V0ID0gY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICB2YXIgZGVsYXkgPSB0aW1lIC0gY2xvY2tOb3c7IC8vIFN0cmljdGx5IGxlc3MgdGhhbiBpZiB3ZSByZWNvbXB1dGVkIGNsb2NrTm93LlxuICBpZiAoZGVsYXkgPiAyNCkge1xuICAgIGlmICh0aW1lIDwgSW5maW5pdHkpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KHdha2UsIHRpbWUgLSBjbG9jay5ub3coKSAtIGNsb2NrU2tldyk7XG4gICAgaWYgKGludGVydmFsKSBpbnRlcnZhbCA9IGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWwpO1xuICB9IGVsc2Uge1xuICAgIGlmICghaW50ZXJ2YWwpIGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpLCBpbnRlcnZhbCA9IHNldEludGVydmFsKHBva2UsIHBva2VEZWxheSk7XG4gICAgZnJhbWUgPSAxLCBzZXRGcmFtZSh3YWtlKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtUaW1lcn0gZnJvbSBcIi4vdGltZXJcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY2FsbGJhY2ssIGRlbGF5LCB0aW1lKSB7XG4gIHZhciB0ID0gbmV3IFRpbWVyO1xuICBkZWxheSA9IGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5O1xuICB0LnJlc3RhcnQoZnVuY3Rpb24oZWxhcHNlZCkge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImZ1bmN0aW9uIHJlbW92ZUZ1bmN0aW9uKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICAgIGZvciAodmFyIGkgaW4gdGhpcy5fX3RyYW5zaXRpb24pIGlmICgraSAhPT0gaWQpIHJldHVybjtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gdGhpcy5vbihcImVuZC5yZW1vdmVcIiwgcmVtb3ZlRnVuY3Rpb24odGhpcy5faWQpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5cbnZhciBTZWxlY3Rpb24gPSBzZWxlY3Rpb24ucHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24odGhpcy5fZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1Dc3MgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtzdHlsZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gc3R5bGVOdWxsKG5hbWUsIGludGVycG9sYXRlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgc3RyaW5nMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHN0cmluZzEwID0gc3RyaW5nMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlQ29uc3RhbnQobmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHN0eWxlRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSBzdHlsZSh0aGlzLCBuYW1lKSxcbiAgICAgICAgdmFsdWUxID0gdmFsdWUodGhpcyksXG4gICAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgc3RyaW5nMSA9IHZhbHVlMSA9ICh0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpLCBzdHlsZSh0aGlzLCBuYW1lKSk7XG4gICAgcmV0dXJuIHN0cmluZzAgPT09IHN0cmluZzEgPyBudWxsXG4gICAgICAgIDogc3RyaW5nMCA9PT0gc3RyaW5nMDAgJiYgc3RyaW5nMSA9PT0gc3RyaW5nMTAgPyBpbnRlcnBvbGF0ZTBcbiAgICAgICAgOiAoc3RyaW5nMTAgPSBzdHJpbmcxLCBpbnRlcnBvbGF0ZTAgPSBpbnRlcnBvbGF0ZShzdHJpbmcwMCA9IHN0cmluZzAsIHZhbHVlMSkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZU1heWJlUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciBvbjAsIG9uMSwgbGlzdGVuZXIwLCBrZXkgPSBcInN0eWxlLlwiICsgbmFtZSwgZXZlbnQgPSBcImVuZC5cIiArIGtleSwgcmVtb3ZlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgb24gPSBzY2hlZHVsZS5vbixcbiAgICAgICAgbGlzdGVuZXIgPSBzY2hlZHVsZS52YWx1ZVtrZXldID09IG51bGwgPyByZW1vdmUgfHwgKHJlbW92ZSA9IHN0eWxlUmVtb3ZlKG5hbWUpKSA6IHVuZGVmaW5lZDtcblxuICAgIC8vIElmIHRoaXMgbm9kZSBzaGFyZWQgYSBkaXNwYXRjaCB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAob24gIT09IG9uMCB8fCBsaXN0ZW5lcjAgIT09IGxpc3RlbmVyKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKGV2ZW50LCBsaXN0ZW5lcjAgPSBsaXN0ZW5lcik7XG5cbiAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHZhciBpID0gKG5hbWUgKz0gXCJcIikgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlTnVsbChuYW1lLCBpKSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIHN0eWxlUmVtb3ZlKG5hbWUpKVxuICAgIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUZ1bmN0aW9uKG5hbWUsIGksIHR3ZWVuVmFsdWUodGhpcywgXCJzdHlsZS5cIiArIG5hbWUsIHZhbHVlKSkpXG4gICAgICAuZWFjaChzdHlsZU1heWJlUmVtb3ZlKHRoaXMuX2lkLCBuYW1lKSlcbiAgICA6IHRoaXNcbiAgICAgIC5zdHlsZVR3ZWVuKG5hbWUsIHN0eWxlQ29uc3RhbnQobmFtZSwgaSwgdmFsdWUpLCBwcmlvcml0eSlcbiAgICAgIC5vbihcImVuZC5zdHlsZS5cIiArIG5hbWUsIG51bGwpO1xufVxuIiwiaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2VlblwiO1xuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdmFsdWUxID0gdmFsdWUodGhpcyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlMSA9PSBudWxsID8gXCJcIiA6IHZhbHVlMTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMudHdlZW4oXCJ0ZXh0XCIsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IHRleHRGdW5jdGlvbih0d2VlblZhbHVlKHRoaXMsIFwidGV4dFwiLCB2YWx1ZSkpXG4gICAgICA6IHRleHRDb25zdGFudCh2YWx1ZSA9PSBudWxsID8gXCJcIiA6IHZhbHVlICsgXCJcIikpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHIgZnJvbSBcIi4vYXR0clwiO1xuaW1wb3J0IHRyYW5zaXRpb25fYXR0clR3ZWVuIGZyb20gXCIuL2F0dHJUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fZGVsYXkgZnJvbSBcIi4vZGVsYXlcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2R1cmF0aW9uIGZyb20gXCIuL2R1cmF0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlIGZyb20gXCIuL2Vhc2VcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2ZpbHRlciBmcm9tIFwiLi9maWx0ZXJcIjtcbmltcG9ydCB0cmFuc2l0aW9uX21lcmdlIGZyb20gXCIuL21lcmdlXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9vbiBmcm9tIFwiLi9vblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZVwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0IGZyb20gXCIuL3NlbGVjdFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0QWxsIGZyb20gXCIuL3NlbGVjdEFsbFwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc2VsZWN0aW9uIGZyb20gXCIuL3NlbGVjdGlvblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGUgZnJvbSBcIi4vc3R5bGVcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3N0eWxlVHdlZW4gZnJvbSBcIi4vc3R5bGVUd2VlblwiO1xuaW1wb3J0IHRyYW5zaXRpb25fdGV4dCBmcm9tIFwiLi90ZXh0XCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcbmltcG9ydCB0cmFuc2l0aW9uX3R3ZWVuIGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lbmQgZnJvbSBcIi4vZW5kXCI7XG5cbnZhciBpZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBUcmFuc2l0aW9uKGdyb3VwcywgcGFyZW50cywgbmFtZSwgaWQpIHtcbiAgdGhpcy5fZ3JvdXBzID0gZ3JvdXBzO1xuICB0aGlzLl9wYXJlbnRzID0gcGFyZW50cztcbiAgdGhpcy5fbmFtZSA9IG5hbWU7XG4gIHRoaXMuX2lkID0gaWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyYW5zaXRpb24obmFtZSkge1xuICByZXR1cm4gc2VsZWN0aW9uKCkudHJhbnNpdGlvbihuYW1lKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0lkKCkge1xuICByZXR1cm4gKytpZDtcbn1cblxudmFyIHNlbGVjdGlvbl9wcm90b3R5cGUgPSBzZWxlY3Rpb24ucHJvdG90eXBlO1xuXG5UcmFuc2l0aW9uLnByb3RvdHlwZSA9IHRyYW5zaXRpb24ucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogVHJhbnNpdGlvbixcbiAgc2VsZWN0OiB0cmFuc2l0aW9uX3NlbGVjdCxcbiAgc2VsZWN0QWxsOiB0cmFuc2l0aW9uX3NlbGVjdEFsbCxcbiAgZmlsdGVyOiB0cmFuc2l0aW9uX2ZpbHRlcixcbiAgbWVyZ2U6IHRyYW5zaXRpb25fbWVyZ2UsXG4gIHNlbGVjdGlvbjogdHJhbnNpdGlvbl9zZWxlY3Rpb24sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb25fdHJhbnNpdGlvbixcbiAgY2FsbDogc2VsZWN0aW9uX3Byb3RvdHlwZS5jYWxsLFxuICBub2Rlczogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlcyxcbiAgbm9kZTogc2VsZWN0aW9uX3Byb3RvdHlwZS5ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fcHJvdG90eXBlLnNpemUsXG4gIGVtcHR5OiBzZWxlY3Rpb25fcHJvdG90eXBlLmVtcHR5LFxuICBlYWNoOiBzZWxlY3Rpb25fcHJvdG90eXBlLmVhY2gsXG4gIG9uOiB0cmFuc2l0aW9uX29uLFxuICBhdHRyOiB0cmFuc2l0aW9uX2F0dHIsXG4gIGF0dHJUd2VlbjogdHJhbnNpdGlvbl9hdHRyVHdlZW4sXG4gIHN0eWxlOiB0cmFuc2l0aW9uX3N0eWxlLFxuICBzdHlsZVR3ZWVuOiB0cmFuc2l0aW9uX3N0eWxlVHdlZW4sXG4gIHRleHQ6IHRyYW5zaXRpb25fdGV4dCxcbiAgcmVtb3ZlOiB0cmFuc2l0aW9uX3JlbW92ZSxcbiAgdHdlZW46IHRyYW5zaXRpb25fdHdlZW4sXG4gIGRlbGF5OiB0cmFuc2l0aW9uX2RlbGF5LFxuICBkdXJhdGlvbjogdHJhbnNpdGlvbl9kdXJhdGlvbixcbiAgZWFzZTogdHJhbnNpdGlvbl9lYXNlLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXhcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGVcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtU3ZnIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7bmFtZXNwYWNlfSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuXCI7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSBcIi4vaW50ZXJwb2xhdGVcIjtcblxuZnVuY3Rpb24gYXR0clJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0clJlbW92ZU5TKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudChuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUxKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50TlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzAgPSB0aGlzLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJGdW5jdGlvbk5TKGZ1bGxuYW1lLCBpbnRlcnBvbGF0ZSwgdmFsdWUpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMTAsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCwgdmFsdWUxID0gdmFsdWUodGhpcyksIHN0cmluZzE7XG4gICAgaWYgKHZhbHVlMSA9PSBudWxsKSByZXR1cm4gdm9pZCB0aGlzLnJlbW92ZUF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICByZXR1cm4gc3RyaW5nMCA9PT0gc3RyaW5nMSA/IG51bGxcbiAgICAgICAgOiBzdHJpbmcwID09PSBzdHJpbmcwMCAmJiBzdHJpbmcxID09PSBzdHJpbmcxMCA/IGludGVycG9sYXRlMFxuICAgICAgICA6IChzdHJpbmcxMCA9IHN0cmluZzEsIGludGVycG9sYXRlMCA9IGludGVycG9sYXRlKHN0cmluZzAwID0gc3RyaW5nMCwgdmFsdWUxKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKSwgaSA9IGZ1bGxuYW1lID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHRoaXMuYXR0clR3ZWVuKG5hbWUsIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKShmdWxsbmFtZSwgaSwgdHdlZW5WYWx1ZSh0aGlzLCBcImF0dHIuXCIgKyBuYW1lLCB2YWx1ZSkpXG4gICAgICA6IHZhbHVlID09IG51bGwgPyAoZnVsbG5hbWUubG9jYWwgPyBhdHRyUmVtb3ZlTlMgOiBhdHRyUmVtb3ZlKShmdWxsbmFtZSlcbiAgICAgIDogKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckNvbnN0YW50TlMgOiBhdHRyQ29uc3RhbnQpKGZ1bGxuYW1lLCBpLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlKG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCBpKHQpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckludGVycG9sYXRlTlMoZnVsbG5hbWUsIGkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbCwgaSh0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiZnVuY3Rpb24gc3R5bGVJbnRlcnBvbGF0ZShuYW1lLCBpLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgaSh0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImltcG9ydCB7Z2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZVwiO1xuXG5mdW5jdGlvbiBkZWxheUZ1bmN0aW9uKGlkLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgaW5pdCh0aGlzLCBpZCkuZGVsYXkgPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVsYXlDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkZWxheUZ1bmN0aW9uXG4gICAgICAgICAgOiBkZWxheUNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kZWxheTtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGR1cmF0aW9uRnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gK3ZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGR1cmF0aW9uQ29uc3RhbnQoaWQsIHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9ICt2YWx1ZSwgZnVuY3Rpb24oKSB7XG4gICAgc2V0KHRoaXMsIGlkKS5kdXJhdGlvbiA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgPyBkdXJhdGlvbkZ1bmN0aW9uXG4gICAgICAgICAgOiBkdXJhdGlvbkNvbnN0YW50KShpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5kdXJhdGlvbjtcbn1cbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmZ1bmN0aW9uIGVhc2VDb25zdGFudChpZCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgdmFyIGlkID0gdGhpcy5faWQ7XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKGVhc2VDb25zdGFudChpZCwgdmFsdWUpKVxuICAgICAgOiBnZXQodGhpcy5ub2RlKCksIGlkKS5lYXNlO1xufVxuIiwiaW1wb3J0IHtzZXR9IGZyb20gXCIuL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICB2YXIgb24wLCBvbjEsIHRoYXQgPSB0aGlzLCBpZCA9IHRoYXQuX2lkLCBzaXplID0gdGhhdC5zaXplKCk7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgY2FuY2VsID0ge3ZhbHVlOiByZWplY3R9LFxuICAgICAgICBlbmQgPSB7dmFsdWU6IGZ1bmN0aW9uKCkgeyBpZiAoLS1zaXplID09PSAwKSByZXNvbHZlKCk7IH19O1xuXG4gICAgdGhhdC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKSxcbiAgICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCBkaXNwYXRjaCBhbmQgd2XigJlyZSBkb25lIVxuICAgICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgICAgaWYgKG9uICE9PSBvbjApIHtcbiAgICAgICAgb24xID0gKG9uMCA9IG9uKS5jb3B5KCk7XG4gICAgICAgIG9uMS5fLmNhbmNlbC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmludGVycnVwdC5wdXNoKGNhbmNlbCk7XG4gICAgICAgIG9uMS5fLmVuZC5wdXNoKGVuZCk7XG4gICAgICB9XG5cbiAgICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICAgIH0pO1xuICB9KTtcbn1cbiIsInZhciBleHBvbmVudCA9IDM7XG5cbmV4cG9ydCB2YXIgcG9seUluID0gKGZ1bmN0aW9uIGN1c3RvbShlKSB7XG4gIGUgPSArZTtcblxuICBmdW5jdGlvbiBwb2x5SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCBlKTtcbiAgfVxuXG4gIHBvbHlJbi5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seUluO1xufSkoZXhwb25lbnQpO1xuXG5leHBvcnQgdmFyIHBvbHlPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlPdXQodCkge1xuICAgIHJldHVybiAxIC0gTWF0aC5wb3coMSAtIHQsIGUpO1xuICB9XG5cbiAgcG9seU91dC5leHBvbmVudCA9IGN1c3RvbTtcblxuICByZXR1cm4gcG9seU91dDtcbn0pKGV4cG9uZW50KTtcblxuZXhwb3J0IHZhciBwb2x5SW5PdXQgPSAoZnVuY3Rpb24gY3VzdG9tKGUpIHtcbiAgZSA9ICtlO1xuXG4gIGZ1bmN0aW9uIHBvbHlJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gTWF0aC5wb3codCwgZSkgOiAyIC0gTWF0aC5wb3coMiAtIHQsIGUpKSAvIDI7XG4gIH1cblxuICBwb2x5SW5PdXQuZXhwb25lbnQgPSBjdXN0b207XG5cbiAgcmV0dXJuIHBvbHlJbk91dDtcbn0pKGV4cG9uZW50KTtcbiIsInZhciBwaSA9IE1hdGguUEksXG4gICAgaGFsZlBpID0gcGkgLyAyO1xuXG5leHBvcnQgZnVuY3Rpb24gc2luSW4odCkge1xuICByZXR1cm4gMSAtIE1hdGguY29zKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luT3V0KHQpIHtcbiAgcmV0dXJuIE1hdGguc2luKHQgKiBoYWxmUGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luSW5PdXQodCkge1xuICByZXR1cm4gKDEgLSBNYXRoLmNvcyhwaSAqIHQpKSAvIDI7XG59XG4iLCJ2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcblxuZXhwb3J0IHZhciBiYWNrSW4gPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG4gIH1cblxuICBiYWNrSW4ub3ZlcnNob290ID0gY3VzdG9tO1xuXG4gIHJldHVybiBiYWNrSW47XG59KShvdmVyc2hvb3QpO1xuXG5leHBvcnQgdmFyIGJhY2tPdXQgPSAoZnVuY3Rpb24gY3VzdG9tKHMpIHtcbiAgcyA9ICtzO1xuXG4gIGZ1bmN0aW9uIGJhY2tPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuICB9XG5cbiAgYmFja091dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tPdXQ7XG59KShvdmVyc2hvb3QpO1xuXG5leHBvcnQgdmFyIGJhY2tJbk91dCA9IChmdW5jdGlvbiBjdXN0b20ocykge1xuICBzID0gK3M7XG5cbiAgZnVuY3Rpb24gYmFja0luT3V0KHQpIHtcbiAgICByZXR1cm4gKCh0ICo9IDIpIDwgMSA/IHQgKiB0ICogKChzICsgMSkgKiB0IC0gcykgOiAodCAtPSAyKSAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDIpIC8gMjtcbiAgfVxuXG4gIGJhY2tJbk91dC5vdmVyc2hvb3QgPSBjdXN0b207XG5cbiAgcmV0dXJuIGJhY2tJbk91dDtcbn0pKG92ZXJzaG9vdCk7XG4iLCJ2YXIgdGF1ID0gMiAqIE1hdGguUEksXG4gICAgYW1wbGl0dWRlID0gMSxcbiAgICBwZXJpb2QgPSAwLjM7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbih0KSB7XG4gICAgcmV0dXJuIGEgKiBNYXRoLnBvdygyLCAxMCAqIC0tdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljSW4uYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW4ucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW47XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY091dCA9IChmdW5jdGlvbiBjdXN0b20oYSwgcCkge1xuICB2YXIgcyA9IE1hdGguYXNpbigxIC8gKGEgPSBNYXRoLm1heCgxLCBhKSkpICogKHAgLz0gdGF1KTtcblxuICBmdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gMSAtIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCA9ICt0KSkgKiBNYXRoLnNpbigodCArIHMpIC8gcCk7XG4gIH1cblxuICBlbGFzdGljT3V0LmFtcGxpdHVkZSA9IGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGN1c3RvbShhLCBwICogdGF1KTsgfTtcbiAgZWxhc3RpY091dC5wZXJpb2QgPSBmdW5jdGlvbihwKSB7IHJldHVybiBjdXN0b20oYSwgcCk7IH07XG5cbiAgcmV0dXJuIGVsYXN0aWNPdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG5cbmV4cG9ydCB2YXIgZWxhc3RpY0luT3V0ID0gKGZ1bmN0aW9uIGN1c3RvbShhLCBwKSB7XG4gIHZhciBzID0gTWF0aC5hc2luKDEgLyAoYSA9IE1hdGgubWF4KDEsIGEpKSkgKiAocCAvPSB0YXUpO1xuXG4gIGZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuICgodCA9IHQgKiAyIC0gMSkgPCAwXG4gICAgICAgID8gYSAqIE1hdGgucG93KDIsIDEwICogdCkgKiBNYXRoLnNpbigocyAtIHQpIC8gcClcbiAgICAgICAgOiAyIC0gYSAqIE1hdGgucG93KDIsIC0xMCAqIHQpICogTWF0aC5zaW4oKHMgKyB0KSAvIHApKSAvIDI7XG4gIH1cblxuICBlbGFzdGljSW5PdXQuYW1wbGl0dWRlID0gZnVuY3Rpb24oYSkgeyByZXR1cm4gY3VzdG9tKGEsIHAgKiB0YXUpOyB9O1xuICBlbGFzdGljSW5PdXQucGVyaW9kID0gZnVuY3Rpb24ocCkgeyByZXR1cm4gY3VzdG9tKGEsIHApOyB9O1xuXG4gIHJldHVybiBlbGFzdGljSW5PdXQ7XG59KShhbXBsaXR1ZGUsIHBlcmlvZCk7XG4iLCJpbXBvcnQge1RyYW5zaXRpb24sIG5ld0lkfSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9pbmRleFwiO1xuaW1wb3J0IHNjaGVkdWxlIGZyb20gXCIuLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5pbXBvcnQge2Vhc2VDdWJpY0luT3V0fSBmcm9tIFwiZDMtZWFzZVwiO1xuaW1wb3J0IHtub3d9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZGVmYXVsdFRpbWluZyA9IHtcbiAgdGltZTogbnVsbCwgLy8gU2V0IG9uIHVzZS5cbiAgZGVsYXk6IDAsXG4gIGR1cmF0aW9uOiAyNTAsXG4gIGVhc2U6IGVhc2VDdWJpY0luT3V0XG59O1xuXG5mdW5jdGlvbiBpbmhlcml0KG5vZGUsIGlkKSB7XG4gIHZhciB0aW1pbmc7XG4gIHdoaWxlICghKHRpbWluZyA9IG5vZGUuX190cmFuc2l0aW9uKSB8fCAhKHRpbWluZyA9IHRpbWluZ1tpZF0pKSB7XG4gICAgaWYgKCEobm9kZSA9IG5vZGUucGFyZW50Tm9kZSkpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VGltaW5nLnRpbWUgPSBub3coKSwgZGVmYXVsdFRpbWluZztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRpbWluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgaWQsXG4gICAgICB0aW1pbmc7XG5cbiAgaWYgKG5hbWUgaW5zdGFuY2VvZiBUcmFuc2l0aW9uKSB7XG4gICAgaWQgPSBuYW1lLl9pZCwgbmFtZSA9IG5hbWUuX25hbWU7XG4gIH0gZWxzZSB7XG4gICAgaWQgPSBuZXdJZCgpLCAodGltaW5nID0gZGVmYXVsdFRpbWluZykudGltZSA9IG5vdygpLCBuYW1lID0gbmFtZSA9PSBudWxsID8gbnVsbCA6IG5hbWUgKyBcIlwiO1xuICB9XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgc2NoZWR1bGUobm9kZSwgbmFtZSwgaWQsIGksIGdyb3VwLCB0aW1pbmcgfHwgaW5oZXJpdChub2RlLCBpZCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkKTtcbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgcmV0dXJuIHQgKiB0ICogdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljT3V0KHQpIHtcbiAgcmV0dXJuIC0tdCAqIHQgKiB0ICsgMTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICByZXR1cm4gKCh0ICo9IDIpIDw9IDEgPyB0ICogdCAqIHQgOiAodCAtPSAyKSAqIHQgKiB0ICsgMikgLyAyO1xufVxuIiwiaW1wb3J0IHtzZWxlY3Rpb259IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCBzZWxlY3Rpb25faW50ZXJydXB0IGZyb20gXCIuL2ludGVycnVwdFwiO1xuaW1wb3J0IHNlbGVjdGlvbl90cmFuc2l0aW9uIGZyb20gXCIuL3RyYW5zaXRpb25cIjtcblxuc2VsZWN0aW9uLnByb3RvdHlwZS5pbnRlcnJ1cHQgPSBzZWxlY3Rpb25faW50ZXJydXB0O1xuc2VsZWN0aW9uLnByb3RvdHlwZS50cmFuc2l0aW9uID0gc2VsZWN0aW9uX3RyYW5zaXRpb247XG4iLCJpbXBvcnQgaW50ZXJydXB0IGZyb20gXCIuLi9pbnRlcnJ1cHRcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgIGludGVycnVwdCh0aGlzLCBuYW1lKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQge1NUQVJUSU5HLCBFTkRJTkcsIEVOREVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUsIG5hbWUpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uLFxuICAgICAgc2NoZWR1bGUsXG4gICAgICBhY3RpdmUsXG4gICAgICBlbXB0eSA9IHRydWUsXG4gICAgICBpO1xuXG4gIGlmICghc2NoZWR1bGVzKSByZXR1cm47XG5cbiAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcblxuICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgaWYgKChzY2hlZHVsZSA9IHNjaGVkdWxlc1tpXSkubmFtZSAhPT0gbmFtZSkgeyBlbXB0eSA9IGZhbHNlOyBjb250aW51ZTsgfVxuICAgIGFjdGl2ZSA9IHNjaGVkdWxlLnN0YXRlID4gU1RBUlRJTkcgJiYgc2NoZWR1bGUuc3RhdGUgPCBFTkRJTkc7XG4gICAgc2NoZWR1bGUuc3RhdGUgPSBFTkRFRDtcbiAgICBzY2hlZHVsZS50aW1lci5zdG9wKCk7XG4gICAgc2NoZWR1bGUub24uY2FsbChhY3RpdmUgPyBcImludGVycnVwdFwiIDogXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgc2NoZWR1bGUuaW5kZXgsIHNjaGVkdWxlLmdyb3VwKTtcbiAgICBkZWxldGUgc2NoZWR1bGVzW2ldO1xuICB9XG5cbiAgaWYgKGVtcHR5KSBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG59XG4iLCJpbXBvcnQge1RyYW5zaXRpb259IGZyb20gXCIuL3RyYW5zaXRpb24vaW5kZXhcIjtcbmltcG9ydCB7U0NIRURVTEVEfSBmcm9tIFwiLi90cmFuc2l0aW9uL3NjaGVkdWxlXCI7XG5cbnZhciByb290ID0gW251bGxdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgaTtcblxuICBpZiAoc2NoZWR1bGVzKSB7XG4gICAgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBpZiAoKHNjaGVkdWxlID0gc2NoZWR1bGVzW2ldKS5zdGF0ZSA+IFNDSEVEVUxFRCAmJiBzY2hlZHVsZS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNpdGlvbihbW25vZGVdXSwgcm9vdCwgbmFtZSwgK2kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIiwiaW1wb3J0IHsgc2VsZWN0LCBldmVudCB9IGZyb20gJ2QzLXNlbGVjdGlvbidcbmltcG9ydCB7IHRyYW5zaXRpb24sIGR1cmF0aW9uLCBvbiB9IGZyb20gJ2QzLXRyYW5zaXRpb24nXG5jb25zdCB0b29sdGlwRWwgPSBzZWxlY3QoJy50b29sdGlwJylcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaG93OiBmdW5jdGlvbihjb250ZW50KSB7XG4gICAgbGV0IHlQb3MgPSBldmVudC5wYWdlWSAtIDExMFxuICAgIGxldCB4UG9zID0gZXZlbnQucGFnZVhcbiAgICBpZiAoeFBvcyArIDEwID4gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIDEwMCkge1xuICAgICAgeFBvcyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggKyA1IC0gMTUwXG4gICAgfVxuXG4gICAgdG9vbHRpcEVsXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjAwKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMC45KVxuICAgICAgLm9uKCdlbmQnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgdG9vbHRpcEVsLmNsYXNzZWQoJ2lzQWN0aXZlJywgdHJ1ZSlcbiAgICAgICAgdG9vbHRpcEVsLnNlbGVjdCgnLnRvb2x0aXAtY2xvc2UnKS5vbignY2xpY2snLCB0aGlzLmhpZGUpXG4gICAgICB9KVxuICAgIHRvb2x0aXBFbFxuICAgICAgLmh0bWwoY29udGVudClcbiAgICAgIC5zdHlsZSgndmlzaWJpbGl0eScsICd2aXNpYmxlJylcbiAgICAgIC5zdHlsZSgnbGVmdCcsIHhQb3MgKyAncHgnKVxuICAgICAgLnN0eWxlKCd0b3AnLCB5UG9zICsgJ3B4JylcbiAgfSxcbiAgaGlkZTogZnVuY3Rpb24oKSB7XG4gICAgdG9vbHRpcEVsXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oNTAwKVxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMClcbiAgfSxcbiAgZm9ybWF0Q29udGVudDogZnVuY3Rpb24oY29tcG9uZW50LCBpc0xpc3QgPSBmYWxzZSkge1xuICAgIGxldCBjb250ZW50ID0gJydcbiAgICBpZiAoaXNMaXN0KSB7XG4gICAgICBjb250ZW50ID0gJzx1bCBjbGFzcz1cInRvb2x0aXAtbGlzdFwiPidcbiAgICB9XG4gICAgY29tcG9uZW50LmZvckVhY2goZnVuY3Rpb24oaXRlbSwgaW5kZXgpIHtcbiAgICAgIGxldCBjc3NDbGFzcyA9IG51bGxcbiAgICAgIGlmIChpdGVtLmNsYXNzKSB7XG4gICAgICAgIGNzc0NsYXNzID0gaXRlbS5jbGFzc1xuICAgICAgfVxuICAgICAgbGV0IHByZWZpeCA9ICcnXG4gICAgICBsZXQgc3VmZml4ID0gJzxiciAvPidcbiAgICAgIGlmIChpc0xpc3QpIHtcbiAgICAgICAgcHJlZml4ID0gYDxsaSBjbGFzcz1cIiR7Y3NzQ2xhc3N9XCI+YFxuICAgICAgICBzdWZmaXggPSAnPC9saT4nXG4gICAgICB9XG5cbiAgICAgIGxldCBsYWJlbCA9IE9iamVjdC5rZXlzKGl0ZW0pWzBdXG4gICAgICBjb250ZW50ICs9IGAke3ByZWZpeH08c3BhbiBjbGFzcz1cInRvb2x0aXAtbGFiZWxcIj4ke2xhYmVsfTo8L3NwYW4+ICR7XG4gICAgICAgIGl0ZW1bbGFiZWxdXG4gICAgICB9JHtzdWZmaXh9YFxuICAgIH0pXG4gICAgaWYgKGlzTGlzdCkge1xuICAgICAgY29udGVudCArPSAnPC91bD4nXG4gICAgfVxuICAgIHJldHVybiBjb250ZW50XG4gIH1cbn1cblxuLy8gZXhwb3J0IGRlZmF1bHQgeyB0b29sdGlwIH1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNmb3JtKSB7XG4gIGlmICh0cmFuc2Zvcm0gPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICB2YXIgeDAsXG4gICAgICB5MCxcbiAgICAgIGt4ID0gdHJhbnNmb3JtLnNjYWxlWzBdLFxuICAgICAga3kgPSB0cmFuc2Zvcm0uc2NhbGVbMV0sXG4gICAgICBkeCA9IHRyYW5zZm9ybS50cmFuc2xhdGVbMF0sXG4gICAgICBkeSA9IHRyYW5zZm9ybS50cmFuc2xhdGVbMV07XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCwgaSkge1xuICAgIGlmICghaSkgeDAgPSB5MCA9IDA7XG4gICAgdmFyIGogPSAyLCBuID0gaW5wdXQubGVuZ3RoLCBvdXRwdXQgPSBuZXcgQXJyYXkobik7XG4gICAgb3V0cHV0WzBdID0gKHgwICs9IGlucHV0WzBdKSAqIGt4ICsgZHg7XG4gICAgb3V0cHV0WzFdID0gKHkwICs9IGlucHV0WzFdKSAqIGt5ICsgZHk7XG4gICAgd2hpbGUgKGogPCBuKSBvdXRwdXRbal0gPSBpbnB1dFtqXSwgKytqO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhcnJheSwgbikge1xuICB2YXIgdCwgaiA9IGFycmF5Lmxlbmd0aCwgaSA9IGogLSBuO1xuICB3aGlsZSAoaSA8IC0taikgdCA9IGFycmF5W2ldLCBhcnJheVtpKytdID0gYXJyYXlbal0sIGFycmF5W2pdID0gdDtcbn1cbiIsImltcG9ydCByZXZlcnNlIGZyb20gXCIuL3JldmVyc2VcIjtcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSBcIi4vdHJhbnNmb3JtXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRvcG9sb2d5LCBvKSB7XG4gIHJldHVybiBvLnR5cGUgPT09IFwiR2VvbWV0cnlDb2xsZWN0aW9uXCJcbiAgICAgID8ge3R5cGU6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIiwgZmVhdHVyZXM6IG8uZ2VvbWV0cmllcy5tYXAoZnVuY3Rpb24obykgeyByZXR1cm4gZmVhdHVyZSh0b3BvbG9neSwgbyk7IH0pfVxuICAgICAgOiBmZWF0dXJlKHRvcG9sb2d5LCBvKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZlYXR1cmUodG9wb2xvZ3ksIG8pIHtcbiAgdmFyIGlkID0gby5pZCxcbiAgICAgIGJib3ggPSBvLmJib3gsXG4gICAgICBwcm9wZXJ0aWVzID0gby5wcm9wZXJ0aWVzID09IG51bGwgPyB7fSA6IG8ucHJvcGVydGllcyxcbiAgICAgIGdlb21ldHJ5ID0gb2JqZWN0KHRvcG9sb2d5LCBvKTtcbiAgcmV0dXJuIGlkID09IG51bGwgJiYgYmJveCA9PSBudWxsID8ge3R5cGU6IFwiRmVhdHVyZVwiLCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLCBnZW9tZXRyeTogZ2VvbWV0cnl9XG4gICAgICA6IGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgaWQ6IGlkLCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLCBnZW9tZXRyeTogZ2VvbWV0cnl9XG4gICAgICA6IHt0eXBlOiBcIkZlYXR1cmVcIiwgaWQ6IGlkLCBiYm94OiBiYm94LCBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzLCBnZW9tZXRyeTogZ2VvbWV0cnl9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb2JqZWN0KHRvcG9sb2d5LCBvKSB7XG4gIHZhciB0cmFuc2Zvcm1Qb2ludCA9IHRyYW5zZm9ybSh0b3BvbG9neS50cmFuc2Zvcm0pLFxuICAgICAgYXJjcyA9IHRvcG9sb2d5LmFyY3M7XG5cbiAgZnVuY3Rpb24gYXJjKGksIHBvaW50cykge1xuICAgIGlmIChwb2ludHMubGVuZ3RoKSBwb2ludHMucG9wKCk7XG4gICAgZm9yICh2YXIgYSA9IGFyY3NbaSA8IDAgPyB+aSA6IGldLCBrID0gMCwgbiA9IGEubGVuZ3RoOyBrIDwgbjsgKytrKSB7XG4gICAgICBwb2ludHMucHVzaCh0cmFuc2Zvcm1Qb2ludChhW2tdLCBrKSk7XG4gICAgfVxuICAgIGlmIChpIDwgMCkgcmV2ZXJzZShwb2ludHMsIG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnQocCkge1xuICAgIHJldHVybiB0cmFuc2Zvcm1Qb2ludChwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmUoYXJjcykge1xuICAgIHZhciBwb2ludHMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMCwgbiA9IGFyY3MubGVuZ3RoOyBpIDwgbjsgKytpKSBhcmMoYXJjc1tpXSwgcG9pbnRzKTtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCA8IDIpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiBwZXIgdGhlIHNwZWNpZmljYXRpb24uXG4gICAgcmV0dXJuIHBvaW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpbmcoYXJjcykge1xuICAgIHZhciBwb2ludHMgPSBsaW5lKGFyY3MpO1xuICAgIHdoaWxlIChwb2ludHMubGVuZ3RoIDwgNCkgcG9pbnRzLnB1c2gocG9pbnRzWzBdKTsgLy8gVGhpcyBtYXkgaGFwcGVuIGlmIGFuIGFyYyBoYXMgb25seSB0d28gcG9pbnRzLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiBwb2x5Z29uKGFyY3MpIHtcbiAgICByZXR1cm4gYXJjcy5tYXAocmluZyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW9tZXRyeShvKSB7XG4gICAgdmFyIHR5cGUgPSBvLnR5cGUsIGNvb3JkaW5hdGVzO1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcIkdlb21ldHJ5Q29sbGVjdGlvblwiOiByZXR1cm4ge3R5cGU6IHR5cGUsIGdlb21ldHJpZXM6IG8uZ2VvbWV0cmllcy5tYXAoZ2VvbWV0cnkpfTtcbiAgICAgIGNhc2UgXCJQb2ludFwiOiBjb29yZGluYXRlcyA9IHBvaW50KG8uY29vcmRpbmF0ZXMpOyBicmVhaztcbiAgICAgIGNhc2UgXCJNdWx0aVBvaW50XCI6IGNvb3JkaW5hdGVzID0gby5jb29yZGluYXRlcy5tYXAocG9pbnQpOyBicmVhaztcbiAgICAgIGNhc2UgXCJMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gbGluZShvLmFyY3MpOyBicmVhaztcbiAgICAgIGNhc2UgXCJNdWx0aUxpbmVTdHJpbmdcIjogY29vcmRpbmF0ZXMgPSBvLmFyY3MubWFwKGxpbmUpOyBicmVhaztcbiAgICAgIGNhc2UgXCJQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gcG9seWdvbihvLmFyY3MpOyBicmVhaztcbiAgICAgIGNhc2UgXCJNdWx0aVBvbHlnb25cIjogY29vcmRpbmF0ZXMgPSBvLmFyY3MubWFwKHBvbHlnb24pOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge3R5cGU6IHR5cGUsIGNvb3JkaW5hdGVzOiBjb29yZGluYXRlc307XG4gIH1cblxuICByZXR1cm4gZ2VvbWV0cnkobyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCB4KSB7XG4gIHZhciBsbyA9IDAsIGhpID0gYS5sZW5ndGg7XG4gIHdoaWxlIChsbyA8IGhpKSB7XG4gICAgdmFyIG1pZCA9IGxvICsgaGkgPj4+IDE7XG4gICAgaWYgKGFbbWlkXSA8IHgpIGxvID0gbWlkICsgMTtcbiAgICBlbHNlIGhpID0gbWlkO1xuICB9XG4gIHJldHVybiBsbztcbn1cbiIsIi8vIFRPRE8gaWYgcXVhbnRpemVkLCB1c2Ugc2ltcGxlciBJbnQzMiBoYXNoaW5nP1xuXG52YXIgYnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKDE2KSxcbiAgICBmbG9hdHMgPSBuZXcgRmxvYXQ2NEFycmF5KGJ1ZmZlciksXG4gICAgdWludHMgPSBuZXcgVWludDMyQXJyYXkoYnVmZmVyKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnQpIHtcbiAgZmxvYXRzWzBdID0gcG9pbnRbMF07XG4gIGZsb2F0c1sxXSA9IHBvaW50WzFdO1xuICB2YXIgaGFzaCA9IHVpbnRzWzBdIF4gdWludHNbMV07XG4gIGhhc2ggPSBoYXNoIDw8IDUgXiBoYXNoID4+IDcgXiB1aW50c1syXSBeIHVpbnRzWzNdO1xuICByZXR1cm4gaGFzaCAmIDB4N2ZmZmZmZmY7XG59XG4iLCJ2YXIgcGkgPSBNYXRoLlBJLFxuICAgIHRhdSA9IDIgKiBwaSxcbiAgICBxdWFydGVyUGkgPSBwaSAvIDQsXG4gICAgcmFkaWFucyA9IHBpIC8gMTgwLFxuICAgIGFicyA9IE1hdGguYWJzLFxuICAgIGF0YW4yID0gTWF0aC5hdGFuMixcbiAgICBjb3MgPSBNYXRoLmNvcyxcbiAgICBzaW4gPSBNYXRoLnNpbjtcblxuZnVuY3Rpb24gaGFsZkFyZWEocmluZywgY2xvc2VkKSB7XG4gIHZhciBpID0gMCxcbiAgICAgIG4gPSByaW5nLmxlbmd0aCxcbiAgICAgIHN1bSA9IDAsXG4gICAgICBwb2ludCA9IHJpbmdbY2xvc2VkID8gaSsrIDogbiAtIDFdLFxuICAgICAgbGFtYmRhMCwgbGFtYmRhMSA9IHBvaW50WzBdICogcmFkaWFucyxcbiAgICAgIHBoaTEgPSAocG9pbnRbMV0gKiByYWRpYW5zKSAvIDIgKyBxdWFydGVyUGksXG4gICAgICBjb3NQaGkwLCBjb3NQaGkxID0gY29zKHBoaTEpLFxuICAgICAgc2luUGhpMCwgc2luUGhpMSA9IHNpbihwaGkxKTtcblxuICBmb3IgKDsgaSA8IG47ICsraSkge1xuICAgIHBvaW50ID0gcmluZ1tpXTtcbiAgICBsYW1iZGEwID0gbGFtYmRhMSwgbGFtYmRhMSA9IHBvaW50WzBdICogcmFkaWFucztcbiAgICBwaGkxID0gKHBvaW50WzFdICogcmFkaWFucykgLyAyICsgcXVhcnRlclBpO1xuICAgIGNvc1BoaTAgPSBjb3NQaGkxLCBjb3NQaGkxID0gY29zKHBoaTEpO1xuICAgIHNpblBoaTAgPSBzaW5QaGkxLCBzaW5QaGkxID0gc2luKHBoaTEpO1xuXG4gICAgLy8gU3BoZXJpY2FsIGV4Y2VzcyBFIGZvciBhIHNwaGVyaWNhbCB0cmlhbmdsZSB3aXRoIHZlcnRpY2VzOiBzb3V0aCBwb2xlLFxuICAgIC8vIHByZXZpb3VzIHBvaW50LCBjdXJyZW50IHBvaW50LiAgVXNlcyBhIGZvcm11bGEgZGVyaXZlZCBmcm9tIENhZ25vbGnigJlzXG4gICAgLy8gdGhlb3JlbS4gIFNlZSBUb2RodW50ZXIsIFNwaGVyaWNhbCBUcmlnLiAoMTg3MSksIFNlYy4gMTAzLCBFcS4gKDIpLlxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZDMvZDMtZ2VvL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCNnZW9BcmVhXG4gICAgdmFyIGRMYW1iZGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgc2RMYW1iZGEgPSBkTGFtYmRhID49IDAgPyAxIDogLTEsXG4gICAgICAgIGFkTGFtYmRhID0gc2RMYW1iZGEgKiBkTGFtYmRhLFxuICAgICAgICBrID0gc2luUGhpMCAqIHNpblBoaTEsXG4gICAgICAgIHUgPSBjb3NQaGkwICogY29zUGhpMSArIGsgKiBjb3MoYWRMYW1iZGEpLFxuICAgICAgICB2ID0gayAqIHNkTGFtYmRhICogc2luKGFkTGFtYmRhKTtcbiAgICBzdW0gKz0gYXRhbjIodiwgdSk7XG4gIH1cblxuICByZXR1cm4gc3VtO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BoZXJpY2FsUmluZ0FyZWEocmluZywgaW50ZXJpb3IpIHtcbiAgdmFyIHN1bSA9IGhhbGZBcmVhKHJpbmcsIHRydWUpO1xuICBpZiAoaW50ZXJpb3IpIHN1bSAqPSAtMTtcbiAgcmV0dXJuIChzdW0gPCAwID8gdGF1ICsgc3VtIDogc3VtKSAqIDI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGhlcmljYWxUcmlhbmdsZUFyZWEodCkge1xuICByZXR1cm4gYWJzKGhhbGZBcmVhKHQsIGZhbHNlKSkgKiAyO1xufVxuIiwiaW1wb3J0IHsgZ2VvUGF0aCwgZ2VvT3J0aG9ncmFwaGljIH0gZnJvbSAnZDMtZ2VvJ1xuaW1wb3J0IHsgc2NhbGVMaW5lYXIgfSBmcm9tICdkMy1zY2FsZSdcbmltcG9ydCB7IHNlbGVjdCwgc2VsZWN0QWxsIH0gZnJvbSAnZDMtc2VsZWN0aW9uJ1xuaW1wb3J0IHsgTGlnaHRlbkRhcmtlbkNvbG9yIH0gZnJvbSAnLi9oZWxwZXJzJ1xuaW1wb3J0IHRvb2x0aXAgZnJvbSAnLi90b29sdGlwJ1xuaW1wb3J0ICogYXMgdG9wb2pzb24gZnJvbSAndG9wb2pzb24nXG5cbmNvbnN0IGNoYXJ0ID0gZHJhd0NoYXJ0KClcblxubGV0IGVsXG5sZXQgd29ybGRcbmxldCB3b3JsZFByb2plY3Rpb25cbmxldCB0cmFuc2l0aW9uRHVyYXRpb25cbmxldCBnZW9TYXRlbGxpdGVzRGF0YVxuXG5mdW5jdGlvbiByZXNpemUoKSB7XG4gIGNvbnN0IHN6ID0gTWF0aC5taW4oZWwubm9kZSgpLm9mZnNldFdpZHRoLCB3aW5kb3cuaW5uZXJIZWlnaHQpXG4gIGNoYXJ0LndpZHRoKHN6KS5oZWlnaHQoc3ogLyAzKVxuICBlbC5jYWxsKGNoYXJ0KVxufVxuXG5mdW5jdGlvbiBkcmF3Q2hhcnQoKSB7XG4gIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAxMCwgcmlnaHQ6IDEwLCBib3R0b206IDEwLCBsZWZ0OiAxMCB9XG4gIGNvbnN0IGRlZmF1bHRDb29yZHMgPSB7XG4gICAgb3JiaXQ6IHtcbiAgICAgIHg6IHtcbiAgICAgICAgbWluOiAtMSxcbiAgICAgICAgbWF4OiAxXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBtaW46IC0wLjMwOSxcbiAgICAgICAgbWF4OiAwLjMwOVxuICAgICAgfVxuICAgIH0sXG4gICAgZWFydGg6IHtcbiAgICAgIHg6IHtcbiAgICAgICAgbWluOiAtMC4xNTEsXG4gICAgICAgIG1heDogMC4xNTFcbiAgICAgIH0sXG4gICAgICB5OiB7XG4gICAgICAgIG1pbjogLTAuMTUxLFxuICAgICAgICBtYXg6IDAuMTUxXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbGV0IHByb2plY3Rpb24gPSBnZW9PcnRob2dyYXBoaWMoKVxuICBsZXQgZ2xvYmVQYXRoID0gZ2VvUGF0aCgpXG5cbiAgbGV0IHdpZHRoID0gMFxuICBsZXQgaGVpZ2h0ID0gMFxuXG4gIGxldCBzY2FsZVggPSBzY2FsZUxpbmVhcigpLmRvbWFpbihbXG4gICAgZGVmYXVsdENvb3Jkcy5vcmJpdC54Lm1pbixcbiAgICBkZWZhdWx0Q29vcmRzLm9yYml0LngubWF4XG4gIF0pXG4gIGxldCBzY2FsZVkgPSBzY2FsZUxpbmVhcigpLmRvbWFpbihbXG4gICAgZGVmYXVsdENvb3Jkcy5vcmJpdC55Lm1pbixcbiAgICBkZWZhdWx0Q29vcmRzLm9yYml0LnkubWF4XG4gIF0pXG5cbiAgZnVuY3Rpb24gZW50ZXIoeyBjb250YWluZXIsIGRhdGEgfSkge1xuICAgIGNvbnN0IHN2ZyA9IGNvbnRhaW5lci5zZWxlY3RBbGwoJ3N2ZycpLmRhdGEoW2RhdGFdKVxuICAgIGNvbnN0IHN2Z0VudGVyID0gc3ZnLmVudGVyKCkuYXBwZW5kKCdzdmcnKVxuICAgIGNvbnN0IGdFbnRlciA9IHN2Z0VudGVyLmFwcGVuZCgnZycpXG4gICAgZ0VudGVyXG4gICAgICAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdnLW9yYml0JylcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuYXR0cignc3Ryb2tlJywgJyMwMDAnKVxuXG4gICAgY29uc3QgZWFydGggPSBnRW50ZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnZy1lYXJ0aCcpXG4gICAgZWFydGhcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY2xhc3MnLCAnd2F0ZXInKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCAnI2I3YzdkMScpXG5cbiAgICBlYXJ0aFxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnbGFuZCcpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnI2YyZjFlZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICcjY2NjJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgJzAuM3B4JylcblxuICAgIGdFbnRlci5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdnLWdlb1NhdGVsbGl0ZXMnKVxuICAgIGdFbnRlci5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdnLXBsb3QnKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlU2NhbGVzKHsgZGF0YSB9KSB7XG4gICAgc2NhbGVYLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgc2NhbGVZLnJhbmdlKFtoZWlnaHQsIDBdKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRG9tKHsgY29udGFpbmVyLCBkYXRhLCBnZW9TYXRlbGxpdGVzRGF0YSB9KSB7XG4gICAgbGV0IHN2ZyA9IGNvbnRhaW5lclxuICAgICAgLnNlbGVjdCgnc3ZnJylcbiAgICAgIC5hdHRyKFxuICAgICAgICAndmlld0JveCcsXG4gICAgICAgICcwIDAgJyArXG4gICAgICAgICAgKHdpZHRoICsgbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpICtcbiAgICAgICAgICAnICcgK1xuICAgICAgICAgIChoZWlnaHQgKyBtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSlcbiAgICAgIClcblxuICAgIGxldCBnID0gc3ZnXG4gICAgICAuc2VsZWN0KCdnJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXJnaW4ubGVmdCArICcsJyArIG1hcmdpbi50b3AgKyAnKScpXG5cbiAgICAvLyBFYXJ0aFxuICAgIGxldCBlYXJ0aCA9IGcuc2VsZWN0KCcuZy1lYXJ0aCcpXG5cbiAgICBjb25zdCBlYXJ0aFJhZGl1cyA9IE1hdGguYWJzKHNjYWxlWShkZWZhdWx0Q29vcmRzLmVhcnRoLnkubWF4KSAtIHNjYWxlWSgwKSlcblxuICAgIHByb2plY3Rpb25cbiAgICAgIC50cmFuc2xhdGUoW3NjYWxlWCgwKSwgc2NhbGVZKDApXSlcbiAgICAgIC5zY2FsZShlYXJ0aFJhZGl1cylcbiAgICAgIC5yb3RhdGUod29ybGRQcm9qZWN0aW9uKVxuICAgIGdsb2JlUGF0aC5wcm9qZWN0aW9uKHByb2plY3Rpb24pXG5cbiAgICBlYXJ0aFxuICAgICAgLnNlbGVjdCgnLndhdGVyJylcbiAgICAgIC5hdHRyKCdjeCcsIHNjYWxlWCgwKSlcbiAgICAgIC5hdHRyKCdjeScsIHNjYWxlWSgwKSlcbiAgICAgIC5hdHRyKCdyJywgcHJvamVjdGlvbi5zY2FsZSgpKVxuXG4gICAgZWFydGhcbiAgICAgIC5zZWxlY3QoJy5sYW5kJylcbiAgICAgIC5kYXR1bSh0b3BvanNvbi5mZWF0dXJlKHdvcmxkLCB3b3JsZC5vYmplY3RzLmNvdW50cmllcykpXG4gICAgICAuYXR0cignZCcsIGdsb2JlUGF0aClcblxuICAgIC8vIE9yYml0XG4gICAgLy8gbGV0IG9yYml0ID0gZy5zZWxlY3QoJy5nLW9yYml0IHBhdGgnKVxuXG4gICAgLy8gY29uc3Qgb3JiaXRSYWRpdXNYID0gTWF0aC5hYnMoc2NhbGVYKGRlZmF1bHRDb29yZHMub3JiaXQueC5tYXgpIC0gc2NhbGVYKDApKVxuXG4gICAgLy8gY29uc3Qgb3JiaXRSYWRpdXNZID0gTWF0aC5hYnMoc2NhbGVZKGRlZmF1bHRDb29yZHMub3JiaXQueS5tYXgpIC0gc2NhbGVZKDApKVxuXG4gICAgLy8gb3JiaXQuYXR0cihcbiAgICAvLyAgICdkJyxcbiAgICAvLyAgIGRyYXdFbGxpcHNlKHtcbiAgICAvLyAgICAgY3g6IHNjYWxlWCgwKSxcbiAgICAvLyAgICAgY3k6IHNjYWxlWSgwKSxcbiAgICAvLyAgICAgcng6IG9yYml0UmFkaXVzWCxcbiAgICAvLyAgICAgcnk6IG9yYml0UmFkaXVzWVxuICAgIC8vICAgfSlcbiAgICAvLyApXG5cbiAgICAvLyBHZW9TYXRlbGxpdGVzXG4gICAgY29uc29sZS5sb2coZ2VvU2F0ZWxsaXRlc0RhdGEpXG4gICAgbGV0IGdlb1NhdGVsbGl0ZXMgPSBnXG4gICAgICAuc2VsZWN0KCcuZy1nZW9TYXRlbGxpdGVzJylcbiAgICAgIC5zZWxlY3RBbGwoJy5zYXRlbGxpdGUnKVxuICAgICAgLmRhdGEoZ2VvU2F0ZWxsaXRlc0RhdGEsIGQgPT4gZC5zYXRfbmFtZSlcblxuICAgIGdlb1NhdGVsbGl0ZXMuam9pbihlbnRlciA9PlxuICAgICAgZW50ZXJcbiAgICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3NhdGVsbGl0ZScpXG4gICAgICAgIC5jbGFzc2VkKCdzYXRlbGxpdGUtLXBlcnAnLCBkID0+IGQuaXNfcGVycClcbiAgICAgICAgLmNsYXNzZWQoJ3NhdGVsbGl0ZS0tZ2VvJywgZCA9PiBkLmlzX2dlbylcbiAgICAgICAgLmF0dHIoJ3InLCAzKVxuICAgICAgICAuYXR0cignY3gnLCBkID0+IHNjYWxlWChkLnhfY29vcmQpKVxuICAgICAgICAuYXR0cignY3knLCBkID0+IHNjYWxlWShkLnlfY29vcmQpKVxuICAgICAgICAuYXR0cignZGF0YS14JywgZCA9PiBkLnhfY29vcmQpXG4gICAgICAgIC5hdHRyKCdkYXRhLXknLCBkID0+IGQueV9jb29yZClcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBpbnRlcmFjdGlvbnMubW91c2VvdmVyKVxuICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBpbnRlcmFjdGlvbnMubW91c2VsZWF2ZSlcbiAgICApXG5cbiAgICAvLyBTYXRlbGxpdGVzXG4gICAgbGV0IHNhdGVsbGl0ZXMgPSBnXG4gICAgICAuc2VsZWN0KCcuZy1wbG90JylcbiAgICAgIC5zZWxlY3RBbGwoJy5zYXRlbGxpdGUnKVxuICAgICAgLmRhdGEoZGF0YSwgZCA9PiBkLnNhdF9uYW1lKVxuXG4gICAgc2F0ZWxsaXRlcy5qb2luKFxuICAgICAgZW50ZXIgPT5cbiAgICAgICAgZW50ZXJcbiAgICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdzYXRlbGxpdGUnKVxuICAgICAgICAgIC5jbGFzc2VkKCdzYXRlbGxpdGUtLXBlcnAnLCBkID0+IGQuaXNfcGVycClcbiAgICAgICAgICAuY2xhc3NlZCgnc2F0ZWxsaXRlLS10YXJnZXQnLCBkID0+IGQuaXNfdGFyZ2V0KVxuICAgICAgICAgIC5hdHRyKCdyJywgNSlcbiAgICAgICAgICAuYXR0cignY3gnLCBkID0+IHNjYWxlWChkLnhfY29vcmQpKVxuICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4gc2NhbGVZKGQueV9jb29yZCkpXG4gICAgICAgICAgLmF0dHIoJ2RhdGEteCcsIGQgPT4gZC54X2Nvb3JkKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXknLCBkID0+IGQueV9jb29yZClcbiAgICAgICAgICAvLyAuYXR0cihcbiAgICAgICAgICAvLyAgICd0cmFuc2Zvcm0nLFxuICAgICAgICAgIC8vICAgZCA9PiBgdHJhbnNsYXRlKCR7c2NhbGVYKGQueF9jb29yZCl9LCAke3NjYWxlWShkLnlfY29vcmQpfSlgXG4gICAgICAgICAgLy8gKVxuICAgICAgICAgIC5vbignbW91c2VvdmVyJywgaW50ZXJhY3Rpb25zLm1vdXNlb3ZlcilcbiAgICAgICAgICAub24oJ21vdXNlbGVhdmUnLCBpbnRlcmFjdGlvbnMubW91c2VsZWF2ZSksXG4gICAgICB1cGRhdGUgPT5cbiAgICAgICAgdXBkYXRlXG4gICAgICAgICAgLmF0dHIoJ2N4JywgZCA9PiBzY2FsZVgoZC54X2Nvb3JkKSlcbiAgICAgICAgICAuYXR0cignY3knLCBkID0+IHNjYWxlWShkLnlfY29vcmQpKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXgnLCBkID0+IGQueF9jb29yZClcbiAgICAgICAgICAuYXR0cignZGF0YS15JywgZCA9PiBkLnlfY29vcmQpXG4gICAgICAvLyAuY2FsbCh1cGRhdGUgPT5cbiAgICAgIC8vICAgdXBkYXRlXG4gICAgICAvLyAgICAgLy8gLnRyYW5zaXRpb24odHJhbnNpdGlvbkR1cmF0aW9uKVxuICAgICAgLy8gICAgIC8vIC5hdHRyVHdlZW4oJ3RyYW5zZm9ybScsIHRyYW5zbGF0ZUFsb25nKG9yYml0Lm5vZGUoKSkpXG4gICAgICAvLyAgICAgLmF0dHIoJ2N4JywgZCA9PiBzY2FsZVgoZC54X2Nvb3JkKSlcbiAgICAgIC8vICAgICAuYXR0cignY3knLCBkID0+IHNjYWxlWShkLnlfY29vcmQpKVxuICAgICAgLy8gKVxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoYXJ0KGNvbnRhaW5lcikge1xuICAgIGNvbnN0IGRhdGEgPSBjb250YWluZXIuZGF0dW0oKVxuXG4gICAgZW50ZXIoeyBjb250YWluZXIsIGRhdGEgfSlcbiAgICB1cGRhdGVTY2FsZXMoeyBkYXRhIH0pXG4gICAgdXBkYXRlRG9tKHsgY29udGFpbmVyLCBkYXRhLCBnZW9TYXRlbGxpdGVzRGF0YSB9KVxuICB9XG5cbiAgY29uc3QgaW50ZXJhY3Rpb25zID0ge1xuICAgIG1vdXNlb3ZlcihkKSB7XG4gICAgICBpbnRlcmFjdGlvbnMuc2hvd1Rvb2x0aXAoZClcbiAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpcy1hY3RpdmUnLCB0cnVlKVxuICAgIH0sXG4gICAgbW91c2VsZWF2ZSgpIHtcbiAgICAgIHRvb2x0aXAuaGlkZSgpXG4gICAgICBzZWxlY3QodGhpcykuY2xhc3NlZCgnaXMtYWN0aXZlJywgZmFsc2UpXG4gICAgfSxcbiAgICBzaG93VG9vbHRpcChkKSB7XG4gICAgICBsZXQgdG9vbHRpcEJvZHkgPSBbXG4gICAgICAgIHsgT3BlcmF0b3I6IGQuc2F0X29wZXJhdG9yIH0sXG4gICAgICAgIHsgRGF0ZTogZC50aW1lc3RhbXAgfSxcbiAgICAgICAgeyBMb25naXR1ZGU6IGQubG9uZ19zdHJpbmcgfVxuICAgICAgXVxuXG4gICAgICAvLyBSZW1vdmUgdGhlIGRhdGUgZnJvbSBnZW9TYXRlbGxpdGVzXG4gICAgICBpZiAoZC5pc19nZW8pIHtcbiAgICAgICAgZGVsZXRlIHRvb2x0aXBCb2R5WzFdXG4gICAgICB9XG5cbiAgICAgIGxldCB0b29sdGlwQ29udGVudCA9IGBcbiAgICAgIDxwIGNsYXNzPVwidG9vbHRpcC1oZWFkaW5nXCI+XG4gICAgICAgICR7ZC5zYXRfbmFtZX08L3A+XG4gICAgICAke3Rvb2x0aXAuZm9ybWF0Q29udGVudCh0b29sdGlwQm9keSwgdHJ1ZSl9YFxuICAgICAgdG9vbHRpcC5zaG93KHRvb2x0aXBDb250ZW50KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdFbGxpcHNlKHsgY3gsIGN5LCByeCwgcnkgfSkge1xuICAgIGN4ID0gcGFyc2VGbG9hdChjeCwgMTApXG4gICAgY3kgPSBwYXJzZUZsb2F0KGN5LCAxMClcbiAgICByeCA9IHBhcnNlRmxvYXQocngsIDEwKVxuICAgIHJ5ID0gcGFyc2VGbG9hdChyeSwgMTApXG5cbiAgICBjb25zdCBvdXRwdXQyID0gYFxuICAgICAgICBNJHtjeCAtIHJ4fSwgJHtjeX1cbiAgICAgICAgYSR7cnh9LCAke3J5fSAwIDEsIDAgJHtyeCAqIDJ9LCAwXG4gICAgICAgIGEke3J4fSwgJHtyeX0gMCAxLCAwICR7cnggKiAtMn0sIDBcbiAgICAgICAgYFxuICAgIHJldHVybiBvdXRwdXQyXG4gIH1cblxuICBjaGFydC53aWR0aCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSByZXR1cm4gd2lkdGhcbiAgICB3aWR0aCA9IGFyZ3NbMF0gLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodFxuICAgIHJldHVybiBjaGFydFxuICB9XG5cbiAgY2hhcnQuaGVpZ2h0ID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmICghYXJncy5sZW5ndGgpIHJldHVybiBoZWlnaHRcbiAgICBoZWlnaHQgPSBhcmdzWzBdIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21cblxuICAgIHJldHVybiBjaGFydFxuICB9XG5cbiAgcmV0dXJuIGNoYXJ0XG59XG5cbmZ1bmN0aW9uIGluaXQoYXJncykge1xuICBlbCA9IHNlbGVjdChhcmdzLmNvbnRhaW5lcilcbiAgZWwuZGF0dW0oYXJncy5kYXRhKVxuICB0cmFuc2l0aW9uRHVyYXRpb24gPSBhcmdzLnRyYW5zaXRpb25EdXJhdGlvblxuICByZXNpemUoYXJncylcbn1cblxuZnVuY3Rpb24gc2V0V29ybGQoZGF0YSwgcHJvamVjdGlvbikge1xuICB3b3JsZCA9IGRhdGFcbiAgd29ybGRQcm9qZWN0aW9uID0gcHJvamVjdGlvblxufVxuXG5mdW5jdGlvbiBzZXRHZW9TYXRlbGxpdGVzKGRhdGEpIHtcbiAgZ2VvU2F0ZWxsaXRlc0RhdGEgPSBkYXRhXG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgaW5pdCwgc2V0V29ybGQsIHNldEdlb1NhdGVsbGl0ZXMgfVxuIiwiY29uc3QgU3BlZWRDb250cm9scyA9IHtcbiAgYnRuczogZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNwZWVkLWJ0bicpLFxuICBpbml0KHsgY3VycmVudFNwZWVkLCBvbkNsaWNrIH0pIHtcbiAgICBkb2N1bWVudFxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5zcGVlZC1idG4tLScgKyBjdXJyZW50U3BlZWQpXG4gICAgICAuY2xhc3NMaXN0LmFkZCgnaXMtYWN0aXZlJylcblxuICAgIEFycmF5LmZyb20odGhpcy5idG5zKS5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljaylcbiAgICB9KVxuICB9LFxuICBnZXRDdXJyZW50U3BlZWQoKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zcGVlZC1idG4uaXMtYWN0aXZlJykuZGF0YXNldC5zcGVlZFxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNwZWVkQ29udHJvbHNcbiIsImNvbnN0IFRleHREZXNjcmlwdGlvbiA9IHtcbiAgZWw6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkZXNjcmlwdGlvbicpLFxuICBzZXREZXNjKHRleHQpIHtcbiAgICB0aGlzLmVsLnRleHRDb250ZW50ID0gdGV4dFxuICB9LFxuICBjb252ZXJ0S2V5cyhvYmopIHtcbiAgICBsZXQgbW9kaWZpZWQgPSB7fVxuICAgIGZvciAobGV0IGtleSBpbiBvYmopIHtcbiAgICAgIG1vZGlmaWVkW25ldyBEYXRlKGtleSkuZ2V0VGltZSgpXSA9IG9ialtrZXldXG4gICAgfVxuICAgIHJldHVybiBtb2RpZmllZFxuICB9LFxuICBnZXRDbG9zZXN0RGVzY3JpcHRpb24oZGF0ZXMsIGN1cnJlbnREYXRlKSB7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGRhdGVzLmZpbHRlcihkID0+IGQgPD0gY3VycmVudERhdGUpKVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFRleHREZXNjcmlwdGlvblxuIiwiaW1wb3J0ICogYXMgbm9VaVNsaWRlciBmcm9tICdub3Vpc2xpZGVyJ1xuXG5jb25zdCB0aW1lbGluZSA9IHtcbiAgZWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS1iYXInKSxcbiAgYnRuQ29udHJvbHM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS1idG4nKSxcbiAgY29udHJvbEJ0bjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRyb2wtYnRuJyksXG4gIGN1cnJlbnREYXRlRWw6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50aW1lbGluZS1jdXJyZW50LWRhdGUnKSxcbiAgcGxheWluZzogZmFsc2UsXG4gIHRpbWVyOiBudWxsLFxuICB0cmFuc2l0aW9uRHVyYXRpb246IDAsXG4gIGVuZERhdGU6IDAsXG4gIHN0YXJ0RGF0ZTogMCxcbiAgdXBkYXRlQ3VycmVudERhdGUoZGF0ZSkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKVxuICAgIGRhdGUgPSBuZXcgRGF0ZShcbiAgICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpXG4gICAgKVxuICAgIHRoaXMuY3VycmVudERhdGVFbC5pbm5lckhUTUwgPSBgJHtkYXRlLmdldE1vbnRoKCkgK1xuICAgICAgMX0vJHtkYXRlLmdldERhdGUoKX0vJHtkYXRlLmdldEZ1bGxZZWFyKCl9YFxuICB9LFxuICBnZXRDdXJyZW50RGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5lbC5ub1VpU2xpZGVyLmdldCgpXG4gIH0sXG4gIHNldHVwVGltZWxpbmUoeyBzdGFydERhdGUsIGVuZERhdGUsIG9uVXBkYXRlLCBvblNsaWRlIH0pIHtcbiAgICB0aGlzLmVuZERhdGUgPSBlbmREYXRlXG4gICAgdGhpcy5zdGFydERhdGUgPSBzdGFydERhdGVcblxuICAgIG5vVWlTbGlkZXIuY3JlYXRlKHRoaXMuZWwsIHtcbiAgICAgIHN0YXJ0OiBbc3RhcnREYXRlXSxcbiAgICAgIGNvbm5lY3Q6IHRydWUsXG4gICAgICBiZWhhdmlvdXI6ICd0YXAtZHJhZycsXG4gICAgICBzdGVwOiAyNCAqIDYwICogNjAgKiAxMDAwLFxuICAgICAgcmFuZ2U6IHtcbiAgICAgICAgbWluOiBzdGFydERhdGUsXG4gICAgICAgIG1heDogZW5kRGF0ZVxuICAgICAgfSxcbiAgICAgIGZvcm1hdDoge1xuICAgICAgICBmcm9tOiB2ID0+IHBhcnNlSW50KHYpLFxuICAgICAgICB0bzogdiA9PiBwYXJzZUludCh2KVxuICAgICAgfVxuICAgICAgLy8gcGlwczoge1xuICAgICAgLy8gICBtb2RlOiAncmFuZ2UnLFxuICAgICAgLy8gICBkZW5zaXR5OiAxMFxuICAgICAgLy8gfVxuICAgIH0pXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIuc2V0KHN0YXJ0RGF0ZSlcblxuICAgIHRoaXMuc2V0dXBCdG5Db250cm9scygpXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIG9uVXBkYXRlKVxuICAgIHRoaXMuZWwubm9VaVNsaWRlci5vbignc2xpZGUnLCBvblNsaWRlKVxuICB9LFxuICBzZXR1cEJ0bkNvbnRyb2xzKCkge1xuICAgIHRoaXMuYnRuQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjdXJyZW50RGF0ZSA9IHRpbWVsaW5lLmdldEN1cnJlbnREYXRlKClcbiAgICAgIGlmIChjdXJyZW50RGF0ZSA9PSB0aW1lbGluZS5lbmREYXRlKSB7XG4gICAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KHRpbWVsaW5lLnN0YXJ0RGF0ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWVsaW5lLnBsYXlpbmcgPT0gdHJ1ZSkge1xuICAgICAgICB0aW1lbGluZS5zdG9wVGltZWxpbmUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUuc3RhcnRUaW1lbGluZSgpXG4gICAgfSlcbiAgfSxcbiAgc3RhcnRUaW1lbGluZSgpIHtcbiAgICBjb25zb2xlLmxvZyh0aW1lbGluZS50cmFuc2l0aW9uRHVyYXRpb24pXG4gICAgdGltZWxpbmUudGltZXIgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHtcbiAgICAgIGNvbnNvbGUubG9nKHRpbWVsaW5lLnRyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgIGxldCBjdXJyZW50RGF0ZSA9IHRpbWVsaW5lLmdldEN1cnJlbnREYXRlKClcbiAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KGN1cnJlbnREYXRlICsgMjQgKiA2MCAqIDYwICogMTAwMClcbiAgICB9LCB0aW1lbGluZS50cmFuc2l0aW9uRHVyYXRpb24pXG5cbiAgICB0aW1lbGluZS5jb250cm9sQnRuLmNsYXNzTGlzdC5yZW1vdmUoJ3BsYXktYnRuJylcbiAgICB0aW1lbGluZS5jb250cm9sQnRuLmNsYXNzTGlzdC5hZGQoJ3BhdXNlLWJ0bicpXG5cbiAgICB0aW1lbGluZS5wbGF5aW5nID0gdHJ1ZVxuICB9LFxuICBzdG9wVGltZWxpbmUoKSB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lbGluZS50aW1lcilcbiAgICB0aW1lbGluZS5wbGF5aW5nID0gZmFsc2VcbiAgICB0aW1lbGluZS5idG5Db250cm9scy5jbGFzc0xpc3QucmVtb3ZlKCdwYXVzZS1idG4nKVxuICAgIHRpbWVsaW5lLmJ0bkNvbnRyb2xzLmNsYXNzTGlzdC5hZGQoJ3BsYXktYnRuJylcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB0aW1lbGluZVxuIiwiZnVuY3Rpb24gcmVzcG9uc2VBcnJheUJ1ZmZlcihyZXNwb25zZSkge1xuICBpZiAoIXJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0KTtcbiAgcmV0dXJuIHJlc3BvbnNlLmFycmF5QnVmZmVyKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGlucHV0LCBpbml0KSB7XG4gIHJldHVybiBmZXRjaChpbnB1dCwgaW5pdCkudGhlbihyZXNwb25zZUFycmF5QnVmZmVyKTtcbn1cbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXVwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBwYWQodmFsdWUsIHdpZHRoKSB7XG4gIHZhciBzID0gdmFsdWUgKyBcIlwiLCBsZW5ndGggPSBzLmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbigwKSArIHMgOiBzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgPCAwID8gXCItXCIgKyBwYWQoLXllYXIsIDYpXG4gICAgOiB5ZWFyID4gOTk5OSA/IFwiK1wiICsgcGFkKHllYXIsIDYpXG4gICAgOiBwYWQoeWVhciwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBcIkludmFsaWQgRGF0ZVwiXG4gICAgICA6IGZvcm1hdFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCksIDIpXG4gICAgICArIChtaWxsaXNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCIuXCIgKyBwYWQobWlsbGlzZWNvbmRzLCAzKSArIFwiWlwiXG4gICAgICA6IHNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCJaXCJcbiAgICAgIDogbWludXRlcyB8fCBob3VycyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCJaXCJcbiAgICAgIDogXCJcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IGZvcm1hdERhdGUodmFsdWUpXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh2YWx1ZSArPSBcIlwiKSA/IFwiXFxcIlwiICsgdmFsdWUucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRCb2R5OiBmb3JtYXRCb2R5LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3NcbiAgfTtcbn1cbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciBjc3YgPSBkc3YoXCIsXCIpO1xuXG5leHBvcnQgdmFyIGNzdlBhcnNlID0gY3N2LnBhcnNlO1xuZXhwb3J0IHZhciBjc3ZQYXJzZVJvd3MgPSBjc3YucGFyc2VSb3dzO1xuZXhwb3J0IHZhciBjc3ZGb3JtYXQgPSBjc3YuZm9ybWF0O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRCb2R5ID0gY3N2LmZvcm1hdEJvZHk7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvd3MgPSBjc3YuZm9ybWF0Um93cztcbiIsImltcG9ydCBkc3YgZnJvbSBcIi4vZHN2XCI7XG5cbnZhciB0c3YgPSBkc3YoXCJcXHRcIik7XG5cbmV4cG9ydCB2YXIgdHN2UGFyc2UgPSB0c3YucGFyc2U7XG5leHBvcnQgdmFyIHRzdlBhcnNlUm93cyA9IHRzdi5wYXJzZVJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdCA9IHRzdi5mb3JtYXQ7XG5leHBvcnQgdmFyIHRzdkZvcm1hdEJvZHkgPSB0c3YuZm9ybWF0Qm9keTtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Um93cyA9IHRzdi5mb3JtYXRSb3dzO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UuanNvbigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VKc29uKTtcbn1cbiIsImltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHRcIjtcblxuZnVuY3Rpb24gcGFyc2VyKHR5cGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0KSAge1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHRleHQpIHtcbiAgICAgIHJldHVybiAobmV3IERPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKHRleHQsIHR5cGUpO1xuICAgIH0pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBwYXJzZXIoXCJhcHBsaWNhdGlvbi94bWxcIik7XG5cbmV4cG9ydCB2YXIgaHRtbCA9IHBhcnNlcihcInRleHQvaHRtbFwiKTtcblxuZXhwb3J0IHZhciBzdmcgPSBwYXJzZXIoXCJpbWFnZS9zdmcreG1sXCIpO1xuIiwiaW1wb3J0ICogYXMgZDNGZXRjaCBmcm9tICdkMy1mZXRjaCdcblxuY29uc3Qga25vd25Db3VudHJpZXMgPSBbJ1VTJywgJ0NoaW5hJywgJ1J1c3NpYSddXG5cbmFzeW5jIGZ1bmN0aW9uIGdldERhdGEoc2F0ZWxsaXRlVVJMLCBnZW9TYXRlbGxpdGVzVVJMKSB7XG4gIGNvbnN0IHNhdGVsbGl0ZVByb21pc2UgPSBkM0ZldGNoLmNzdihzYXRlbGxpdGVVUkwpXG4gIGNvbnN0IGdlb1NhdGVsbGl0ZXNQcm9taXNlID0gZDNGZXRjaC5jc3YoZ2VvU2F0ZWxsaXRlc1VSTClcblxuICBsZXQgZGF0YSA9IFByb21pc2UuYWxsKFtzYXRlbGxpdGVQcm9taXNlLCBnZW9TYXRlbGxpdGVzUHJvbWlzZV0pLnRoZW4ocmVzID0+IHtcbiAgICBjb25zdCBbc2F0ZWxsaXRlRGF0YSwgZ2VvU2F0ZWxsaXRlc0RhdGFdID0gcmVzXG5cbiAgICBsZXQgZmlsdGVyZWRTYXRlbGxpdGVzID0gZmlsdGVyU2F0ZWxsaXRlcyhzYXRlbGxpdGVEYXRhKVxuICAgIGZpbHRlcmVkU2F0ZWxsaXRlcy5mb3JFYWNoKGQgPT4ge1xuICAgICAgZm9ybWF0U2F0ZWxsaXRlRGF0YShkLCB0cnVlKVxuICAgIH0pXG5cbiAgICBsZXQgZmlsdGVyZWRHZW9TYXRlbGxpdGVzID0gZmlsdGVyU2F0ZWxsaXRlcyhnZW9TYXRlbGxpdGVzRGF0YSlcbiAgICBmaWx0ZXJlZEdlb1NhdGVsbGl0ZXMuZm9yRWFjaChkID0+IHtcbiAgICAgIGZvcm1hdFNhdGVsbGl0ZURhdGEoZCwgZmFsc2UpXG4gICAgfSlcblxuICAgIGNvbnNvbGUubG9nKGZpbHRlcmVkU2F0ZWxsaXRlcylcbiAgICBjb25zb2xlLmxvZyhmaWx0ZXJlZEdlb1NhdGVsbGl0ZXMpXG5cbiAgICBjb25zdCB0aW1lc3RhbXBzID0gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQoWy4uLmZpbHRlcmVkU2F0ZWxsaXRlcy5tYXAoZCA9PiBkLnRpbWVzdGFtcCldKVxuICAgIClcblxuICAgIGNvbnNvbGUubG9nKHRpbWVzdGFtcHMpXG5cbiAgICBjb25zdCBzYXRlbGxpdGVzID0gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQoWy4uLmZpbHRlcmVkU2F0ZWxsaXRlcy5tYXAoZCA9PiBkLnNhdF9uYW1lKV0pXG4gICAgKVxuXG4gICAgbGV0IGRhdGFzZXQgPSB7XG4gICAgICBwZXJwOiBuZXcgTWFwKCksXG4gICAgICBnZW9TYXRlbGxpdGVzOiBmaWx0ZXJlZEdlb1NhdGVsbGl0ZXNcbiAgICB9XG5cbiAgICB0aW1lc3RhbXBzLmZvckVhY2goKHRpbWVzdGFtcCwgaSkgPT4ge1xuICAgICAgbGV0IGVudHJpZXMgPSBbXVxuICAgICAgc2F0ZWxsaXRlcy5mb3JFYWNoKHNhdGVsbGl0ZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpbHRlcmVkU2F0ZWxsaXRlcy5maWx0ZXIoXG4gICAgICAgICAgZCA9PiBkLnRpbWVzdGFtcCA9PT0gdGltZXN0YW1wICYmIGQuc2F0X25hbWUgPT09IHNhdGVsbGl0ZVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCFyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBlbnRyaWVzLnB1c2gocmVzdWx0WzBdKVxuICAgICAgfSlcbiAgICAgIGRhdGFzZXQucGVycC5zZXQobmV3IERhdGUodGltZXN0YW1wKS5nZXRUaW1lKCksIGVudHJpZXMpXG4gICAgfSlcblxuICAgIGRhdGFzZXQucGVycCA9IG5ldyBNYXAoQXJyYXkuZnJvbShkYXRhc2V0LnBlcnApLnNvcnQoKGEsIGIpID0+IGFbMF0gLSBiWzBdKSlcblxuICAgIHJldHVybiBkYXRhc2V0XG4gIH0pXG5cbiAgY29uc29sZS5sb2coZGF0YSlcblxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBmaWx0ZXJTYXRlbGxpdGVzKHNhdGVsbGl0ZXMpIHtcbiAgcmV0dXJuIHNhdGVsbGl0ZXMuZmlsdGVyKGQgPT4gZC5pbmNsdWRlID09PSAnVFJVRScpXG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNhdGVsbGl0ZURhdGEoZCwgaXNQZXJwKSB7XG4gIGQuZGF0ZSA9IG5ldyBEYXRlKGQudGltZXN0YW1wKS5nZXRUaW1lKClcbiAgZC5pbmNsdWRlID0gZC5pbmNsdWRlID09ICdUUlVFJyA/IHRydWUgOiBmYWxzZVxuICBkLmxvbmdpdHVkZSA9ICtkLmxvbmdpdHVkZVxuICBkLnhfY29vcmQgPSArZC54X2Nvb3JkXG4gIGQueV9jb29yZCA9ICtkLnlfY29vcmRcbiAgZC5jb3VudHJ5ID0gZC5zYXRfb3BlcmF0b3JcbiAgZC5sb25nX3N0cmluZyA9IGQubG9uZ19zdHJpbmcucmVwbGFjZSgn77+9JywgJyYjMTc2OycpXG5cbiAgaWYgKGQuY291bnRyeS5pbmNsdWRlcygnVS5TLicpKSB7XG4gICAgZC5jb3VudHJ5ID0gJ1VTJ1xuICB9XG5cbiAgaWYgKCFrbm93bkNvdW50cmllcy5pbmNsdWRlcyhkLmNvdW50cnkpKSB7XG4gICAgZC5jb3VudHJ5ID0gJ090aGVyJ1xuICB9XG5cbiAgZC5pc19wZXJwID0gaXNQZXJwXG4gIGQuaXNfZ2VvID0gIWlzUGVycFxuXG4gIHJldHVybiBkXG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFdvcmxkRGF0YSgpIHtcbiAgbGV0IHdvcmxkID0gZDNGZXRjaC5qc29uKCcuL2RhdGEvd29ybGQtMTEwbS5qc29uJykudGhlbihkYXRhID0+IGRhdGEpXG5cbiAgcmV0dXJuIHdvcmxkXG59XG5cbmV4cG9ydCB7IGdldERhdGEsIGdldFdvcmxkRGF0YSB9XG4iLCJpbXBvcnQgYnJlYWtwb2ludHMgZnJvbSAnLi9qcy9icmVha3BvaW50cydcbmltcG9ydCBDaGFydCBmcm9tICcuL2pzL2NoYXJ0J1xuaW1wb3J0IFNwZWVkQ29udHJvbHMgZnJvbSAnLi9qcy9zcGVlZC1jb250cm9scydcbmltcG9ydCBUZXh0RGVzY3JpcHRpb24gZnJvbSAnLi9qcy90ZXh0LWRlc2NyaXB0aW9uJ1xuaW1wb3J0IHRpbWVsaW5lIGZyb20gJy4vanMvdGltZWxpbmUnXG5pbXBvcnQgeyBnZXREYXRhLCBnZXRXb3JsZERhdGEgfSBmcm9tICcuL2pzL2RhdGEnXG5cbmNvbnN0IGJhc2VTcGVlZCA9IDEwMDBcblxuY29uc3Qgc3BlZWRzID0ge1xuICBoYWxmOiBiYXNlU3BlZWQgKiAyLFxuICAnMXgnOiBiYXNlU3BlZWQsXG4gICcyeCc6IGJhc2VTcGVlZCAvIDRcbn1cblxubGV0IGJyZWFrcG9pbnQgPSBicmVha3BvaW50cy5jYWxjdWxhdGUoKVxubGV0IGRhdGFcbmxldCBkZXNjcmlwdGlvblxubGV0IGRlc2NyaXB0aW9uRGF0ZXNcbmxldCB3b3JsZFxubGV0IGN1cnJlbnREYXRlXG5sZXQgc3RhcnREYXRlXG5sZXQgZW5kRGF0ZVxubGV0IGN1cnJlbnRTcGVlZCA9ICcxeCdcbmxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSBzcGVlZHNbY3VycmVudFNwZWVkXVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkRGF0YShcbiAgc2F0ZWxsaXRlRmlsZSxcbiAgdGFyZ2V0c0ZpbGUsXG4gIHRleHQsXG4gIGNvdW50cnlOYW1lLFxuICB3b3JsZFByb2plY3Rpb25cbikge1xuICBkZXNjcmlwdGlvbiA9IFRleHREZXNjcmlwdGlvbi5jb252ZXJ0S2V5cyh0ZXh0KVxuICBkZXNjcmlwdGlvbkRhdGVzID0gT2JqZWN0LmtleXMoZGVzY3JpcHRpb24pLm1hcChkID0+ICtkKVxuXG4gIGRhdGEgPSBhd2FpdCBnZXREYXRhKHNhdGVsbGl0ZUZpbGUsIHRhcmdldHNGaWxlKVxuICBDaGFydC5zZXRHZW9TYXRlbGxpdGVzKGRhdGEuZ2VvU2F0ZWxsaXRlcylcblxuICB3b3JsZCA9IGF3YWl0IGdldFdvcmxkRGF0YSgpXG4gIENoYXJ0LnNldFdvcmxkKHdvcmxkLCB3b3JsZFByb2plY3Rpb24pXG5cbiAgY29uc29sZS5sb2coZGF0YSlcblxuICBsZXQgZGF0ZXMgPSBBcnJheS5mcm9tKGRhdGEucGVycC5rZXlzKCkpXG4gIHN0YXJ0RGF0ZSA9IGRhdGVzWzBdXG4gIGVuZERhdGUgPSBkYXRlc1tkYXRlcy5sZW5ndGggLSAxXVxuICBjdXJyZW50RGF0ZSA9IHN0YXJ0RGF0ZVxuXG4gIHVwZGF0ZUNvdW50cnlOYW1lcyhjb3VudHJ5TmFtZSlcblxuICAvLyBTZXR0aW5nIHVwIHRoZSB0aW1lbGluZSB3aWxsIGluaXRpYXRlIGRyYXdDaGFydCgpXG4gIHNldHVwU3BlZWRDb250cm9scygpXG4gIHNldHVwVGltZWxpbmUoKVxuICBoaWRlTG9hZGluZygpXG59XG5cbmZ1bmN0aW9uIGRyYXdDaGFydCgpIHtcbiAgY3VycmVudERhdGUgPSB0aW1lbGluZS5nZXRDdXJyZW50RGF0ZSgpXG4gIGxldCBkYXRhc2V0ID0gZGF0YS5wZXJwLmdldChjdXJyZW50RGF0ZSlcblxuICBDaGFydC5pbml0KHtcbiAgICBkYXRhOiBkYXRhc2V0LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBjb250YWluZXI6ICcuY2hhcnQnXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHNldHVwU3BlZWRDb250cm9scygpIHtcbiAgU3BlZWRDb250cm9scy5pbml0KHtcbiAgICBjdXJyZW50U3BlZWQsXG4gICAgb25DbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgdGltZWxpbmUuc3RvcFRpbWVsaW5lKClcbiAgICAgIEFycmF5LmZyb20oU3BlZWRDb250cm9scy5idG5zKS5mb3JFYWNoKGVsID0+XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpXG4gICAgICApXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpXG4gICAgICBjdXJyZW50U3BlZWQgPSBTcGVlZENvbnRyb2xzLmdldEN1cnJlbnRTcGVlZCgpXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBzcGVlZHNbY3VycmVudFNwZWVkXVxuICAgICAgdGltZWxpbmUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB0aW1lbGluZS5zdGFydFRpbWVsaW5lKClcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHNldHVwVGltZWxpbmUoKSB7XG4gIHRpbWVsaW5lLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblxuXG4gIHRpbWVsaW5lLnNldHVwVGltZWxpbmUoe1xuICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgIGVuZERhdGU6IGVuZERhdGUsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgZHJhd0NoYXJ0KClcbiAgICAgIHRpbWVsaW5lLnVwZGF0ZUN1cnJlbnREYXRlKGN1cnJlbnREYXRlKVxuICAgICAgaWYgKGN1cnJlbnREYXRlID09IGVuZERhdGUpIHtcbiAgICAgICAgdGltZWxpbmUuc3RvcFRpbWVsaW5lKClcbiAgICAgIH1cblxuICAgICAgaWYgKGRlc2NyaXB0aW9uW2N1cnJlbnREYXRlXSkge1xuICAgICAgICBUZXh0RGVzY3JpcHRpb24uc2V0RGVzYyhkZXNjcmlwdGlvbltjdXJyZW50RGF0ZV0pXG4gICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBJZiB0aGUgdXNlciBjbGlja3Mgb3IgZHJhZ3MgdGhlIHRpbWVsaW5lLCB3ZSBuZWVkIHRvIGZpbmQgdGhlIGNsb3Nlc3QsIHByZXZpb3VzIGRlc2NyaXB0aW9uIHRvIHRoZWlyIHNlbGVjdGVkIGRhdGUuIE5vdGUgdGhhdCBvblNsaWRlIHJ1bnMgYmVmb3JlIG9uVXBkYXRlLCBzbyB3ZSBuZWVkIHRvIHNwZWNpZmljYWxseSBnZXQgdGhlIGN1cnJlbnREYXRlIHRvIGVuc3VyZSB3ZSdyZSB1c2luZyB0aGUgbmV3bHkgc2VsZWN0ZWQgZGF0ZS5cbiAgICAgKi9cbiAgICBvblNsaWRlOiBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjbG9zZXN0RGVzY3JpcHRpb24gPSBUZXh0RGVzY3JpcHRpb24uZ2V0Q2xvc2VzdERlc2NyaXB0aW9uKFxuICAgICAgICBkZXNjcmlwdGlvbkRhdGVzLFxuICAgICAgICB0aW1lbGluZS5nZXRDdXJyZW50RGF0ZSgpXG4gICAgICApXG4gICAgICBUZXh0RGVzY3JpcHRpb24uc2V0RGVzYyhkZXNjcmlwdGlvbltjbG9zZXN0RGVzY3JpcHRpb25dKVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ291bnRyeU5hbWVzKG5hbWUpIHtcbiAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuY291bnRyeS1uYW1lJykpLmZvckVhY2goZWwgPT4ge1xuICAgIGVsLnRleHRDb250ZW50ID0gbmFtZVxuICB9KVxufVxuXG5mdW5jdGlvbiByZXNpemVDaGFydCgpIHtcbiAgbGV0IG5ld0JyZWFrcG9pbnQgPSBicmVha3BvaW50cy5jYWxjdWxhdGUoKVxuXG4gIGlmIChicmVha3BvaW50ICE9IG5ld0JyZWFrcG9pbnQpIHtcbiAgICBicmVha3BvaW50ID0gbmV3QnJlYWtwb2ludFxuICAgIGRyYXdDaGFydCgpXG4gIH1cbn1cblxuZnVuY3Rpb24gaGlkZUxvYWRpbmcoKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkaW5nLWNvbnRhaW5lcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcbiAgZG9jdW1lbnRcbiAgICAucXVlcnlTZWxlY3RvckFsbCgnLmhpZGUtb24tbG9hZCcpXG4gICAgLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZS1vbi1sb2FkJykpXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVDaGFydClcblxuZXhwb3J0IGRlZmF1bHQgbG9hZERhdGFcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5yZXF1aXJlKCcuL19oaWRlJykoSXRlcmF0b3JQcm90b3R5cGUsIHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpLCBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGRlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xufTtcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGkgPSAwO1xuICB2YXIgUDtcbiAgd2hpbGUgKGxlbmd0aCA+IGkpIGRQLmYoTywgUCA9IGtleXNbaSsrXSwgUHJvcGVydGllc1tQXSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG52YXIgbWluID0gTWF0aC5taW47XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGluZGV4IDwgMCA/IG1heChpbmRleCArIGxlbmd0aCwgMCkgOiBtaW4oaW5kZXgsIGxlbmd0aCk7XG59O1xuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvIDogbnVsbDtcbn07XG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcbiAgdmFyIGZuID0gKGNvcmUuT2JqZWN0IHx8IHt9KVtLRVldIHx8IE9iamVjdFtLRVldO1xuICB2YXIgZXhwID0ge307XG4gIGV4cFtLRVldID0gZXhlYyhmbik7XG4gICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBmbigxKTsgfSksICdPYmplY3QnLCBleHApO1xufTtcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcbiAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKG9yaWdpbmFsKSkobGVuZ3RoKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsKSkge1xuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xuICAgIGlmICh0eXBlb2YgQyA9PSAnZnVuY3Rpb24nICYmIChDID09PSBBcnJheSB8fCBpc0FycmF5KEMucHJvdG90eXBlKSkpIEMgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xufTtcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xufTtcbiIsIi8vIGZhc3QgYXBwbHksIGh0dHA6Ly9qc3BlcmYubG5raXQuY29tL2Zhc3QtYXBwbHkvNVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xuICAgIGNhc2UgMTogcmV0dXJuIHVuID8gZm4oYXJnc1swXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxuICAgICAgICAgICAgICAgICAgICAgIDogZm4uY2FsbCh0aGF0LCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgIGNhc2UgNDogcmV0dXJuIHVuID8gZm4oYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSlcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XG52YXIgcHJvY2VzcyA9IGdsb2JhbC5wcm9jZXNzO1xudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xuXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoaXNOb2RlICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gTm9kZS5qc1xuICBpZiAoaXNOb2RlKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcbiAgfSBlbHNlIGlmIChPYnNlcnZlciAmJiAhKGdsb2JhbC5uYXZpZ2F0b3IgJiYgZ2xvYmFsLm5hdmlnYXRvci5zdGFuZGFsb25lKSkge1xuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xuICAgIG5ldyBPYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHByb21pc2UudGhlbihmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XG4gICAgaWYgKCFoZWFkKSB7XG4gICAgICBoZWFkID0gdGFzaztcbiAgICAgIG5vdGlmeSgpO1xuICAgIH0gbGFzdCA9IHRhc2s7XG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiB7IGU6IHRydWUsIHY6IGUgfTtcbiAgfVxufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50IHx8ICcnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XG4gIGVsc2Ugb2JqZWN0W2luZGV4XSA9IHZhbHVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xuXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG5cbiAvLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XG4gIHZhciBleGVjID0gUi5leGVjO1xuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwI2V4ZWMgY2FsbGVkIG9uIGluY29tcGF0aWJsZSByZWNlaXZlcicpO1xuICB9XG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5cbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XG5cbnZhciBSRVBMQUNFX1NVUFBPUlRTX05BTUVEX0dST1VQUyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xuICAvLyBhIFwiZ3JvcHNcIiBwcm9wZXJ0eS5cbiAgdmFyIHJlID0gLy4vO1xuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xufSk7XG5cbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xuXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXG4gICAgdmFyIE8gPSB7fTtcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XG4gIH0pO1xuXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIC8vIFN5bWJvbC1uYW1lZCBSZWdFeHAgbWV0aG9kcyBjYWxsIC5leGVjXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcbiAgICB2YXIgcmUgPSAvYS87XG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICB9XG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KSA6IHVuZGVmaW5lZDtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBmbnMgPSBleGVjKFxuICAgICAgZGVmaW5lZCxcbiAgICAgIFNZTUJPTCxcbiAgICAgICcnW0tFWV0sXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgICAgaWYgKERFTEVHQVRFU19UT19TWU1CT0wgJiYgIWZvcmNlU3RyaW5nTWV0aG9kKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAgIC8vIFdlIGF2b2lkIGl0IGJ5IGRpcmVjdGx5IGNhbGxpbmcgdGhlIG5hdGl2ZSBAQG1ldGhvZCBtZXRob2QuXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVNZXRob2QuY2FsbChzdHIsIHJlZ2V4cCwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgICAgfVxuICAgICk7XG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xuICAgIHZhciByeGZuID0gZm5zWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XG4gICAgaGlkZShSZWdFeHAucHJvdG90eXBlLCBTWU1CT0wsIGxlbmd0aCA9PSAyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxuICAgICAgPyBmdW5jdGlvbiAoc3RyaW5nLCBhcmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzKTsgfVxuICAgICk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XG4gIHRhcmdldDogJ1JlZ0V4cCcsXG4gIHByb3RvOiB0cnVlLFxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXG59LCB7XG4gIGV4ZWM6IHJlZ2V4cEV4ZWNcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XG4gIHJldHVybiBmdW5jdGlvbiB0cmltKCkge1xuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcbiAgfTtcbn0pO1xuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzcGFjZXMgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHNwYWNlICsgc3BhY2UgKyAnKicpO1xudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcblxudmFyIGV4cG9ydGVyID0gZnVuY3Rpb24gKEtFWSwgZXhlYywgQUxJQVMpIHtcbiAgdmFyIGV4cCA9IHt9O1xuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhc3BhY2VzW0tFWV0oKSB8fCBub25bS0VZXSgpICE9IG5vbjtcbiAgfSk7XG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XG4gIGlmIChBTElBUykgZXhwW0FMSUFTXSA9IGZuO1xuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcbn07XG5cbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcbi8vIDMgLT4gU3RyaW5nI3RyaW1cbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XG4gIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xuICByZXR1cm4gc3RyaW5nO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIi8vIDIxLjIuNS4zIGdldCBSZWdFeHAucHJvdG90eXBlLmZsYWdzKClcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IHJlcXVpcmUoJy4vX2ZsYWdzJylcbn0pO1xuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XG4iLCIndXNlIHN0cmljdCc7XG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xudmFyIHdrc0RlZmluZSA9IHJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKTtcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XG52YXIgZ09QTkV4dCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuLWV4dCcpO1xudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcbnZhciAka2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XG52YXIgZ09QRCA9ICRHT1BELmY7XG52YXIgZFAgPSAkRFAuZjtcbnZhciBnT1BOID0gZ09QTkV4dC5mO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRKU09OID0gZ2xvYmFsLkpTT047XG52YXIgX3N0cmluZ2lmeSA9ICRKU09OICYmICRKU09OLnN0cmluZ2lmeTtcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcbnZhciBUT19QUklNSVRJVkUgPSB3a3MoJ3RvUHJpbWl0aXZlJyk7XG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyIFVTRV9OQVRJVkUgPSB0eXBlb2YgJFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIHNldHRlciA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7XG5cbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xudmFyIHNldFN5bWJvbERlc2MgPSBERVNDUklQVE9SUyAmJiAkZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxuICB9KSkuYSAhPSA3O1xufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcbiAgaWYgKHByb3RvRGVzYykgZGVsZXRlIE9iamVjdFByb3RvW2tleV07XG4gIGRQKGl0LCBrZXksIEQpO1xuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcbn0gOiBkUDtcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHZhciBzeW0gPSBBbGxTeW1ib2xzW3RhZ10gPSBfY3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7XG4gIHN5bS5fayA9IHRhZztcbiAgcmV0dXJuIHN5bTtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJztcbn0gOiBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8pICRkZWZpbmVQcm9wZXJ0eShPUFN5bWJvbHMsIGtleSwgRCk7XG4gIGFuT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgYW5PYmplY3QoRCk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhpdCwgSElEREVOKSkgZFAoaXQsIEhJRERFTiwgY3JlYXRlRGVzYygxLCB7fSkpO1xuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pIGl0W0hJRERFTl1ba2V5XSA9IGZhbHNlO1xuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xuICB9IHJldHVybiBkUChpdCwga2V5LCBEKTtcbn07XG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XG4gIGFuT2JqZWN0KGl0KTtcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgbCA9IGtleXMubGVuZ3RoO1xuICB2YXIga2V5O1xuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xuICByZXR1cm4gaXQ7XG59O1xudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcbiAgcmV0dXJuIFAgPT09IHVuZGVmaW5lZCA/IF9jcmVhdGUoaXQpIDogJGRlZmluZVByb3BlcnRpZXMoX2NyZWF0ZShpdCksIFApO1xufTtcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcbiAgdmFyIEUgPSBpc0VudW0uY2FsbCh0aGlzLCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKTtcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcbn07XG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XG4gIGlmIChEICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIEQuZW51bWVyYWJsZSA9IHRydWU7XG4gIHJldHVybiBEO1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoaXQpIHtcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgaSA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5ID0gbmFtZXNbaSsrXSkgJiYga2V5ICE9IEhJRERFTiAmJiBrZXkgIT0gTUVUQSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbnZhciAkZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBpID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICB9IHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcbmlmICghVVNFX05BVElWRSkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XG4gICAgdmFyIHRhZyA9IHVpZChhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xuICAgICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpIHRoaXNbSElEREVOXVt0YWddID0gZmFsc2U7XG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIHNldHRlcikgc2V0U3ltYm9sRGVzYyhPYmplY3RQcm90bywgdGFnLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgc2V0OiAkc2V0IH0pO1xuICAgIHJldHVybiB3cmFwKHRhZyk7XG4gIH07XG4gIHJlZGVmaW5lKCRTeW1ib2xbUFJPVE9UWVBFXSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2s7XG4gIH0pO1xuXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcbiAgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mID0gZ09QTkV4dC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7XG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XG4gIH1cblxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2tzKG5hbWUpKTtcbiAgfTtcbn1cblxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XG5cbmZvciAodmFyIGVzNlN5bWJvbHMgPSAoXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcbikuc3BsaXQoJywnKSwgaiA9IDA7IGVzNlN5bWJvbHMubGVuZ3RoID4gajspd2tzKGVzNlN5bWJvbHNbaisrXSk7XG5cbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XG5cbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxuICAnZm9yJzogZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxuICAgICAgOiBTeW1ib2xSZWdpc3RyeVtrZXldID0gJFN5bWJvbChrZXkpO1xuICB9LFxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xuICB9LFxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XG59KTtcblxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcbiAgLy8gMTkuMS4yLjIgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcbiAgLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xufSk7XG5cbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxuJEpTT04gJiYgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoIVVTRV9OQVRJVkUgfHwgJGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XG4gIC8vIFdlYktpdCBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMgbnVsbFxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XG59KSksICdKU09OJywge1xuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xuICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICB2YXIgaSA9IDE7XG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xuICAgICRyZXBsYWNlciA9IHJlcGxhY2VyID0gYXJnc1sxXTtcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xuICB9XG59KTtcblxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxuJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0gfHwgcmVxdWlyZSgnLi9faGlkZScpKCRTeW1ib2xbUFJPVE9UWVBFXSwgVE9fUFJJTUlUSVZFLCAkU3ltYm9sW1BST1RPVFlQRV0udmFsdWVPZik7XG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XG4vLyAyMC4yLjEuOSBNYXRoW0BAdG9TdHJpbmdUYWddXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cbnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpO1xuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgcmVzdWx0ID0gZ2V0S2V5cyhpdCk7XG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xuICBpZiAoZ2V0U3ltYm9scykge1xuICAgIHZhciBzeW1ib2xzID0gZ2V0U3ltYm9scyhpdCk7XG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIga2V5O1xuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcbiAgfSByZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGZhbGxiYWNrIGZvciBJRTExIGJ1Z2d5IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHdpdGggaWZyYW1lIGFuZCB3aW5kb3dcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGdPUE4oaXQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIHdpbmRvd05hbWVzLnNsaWNlKCk7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XG59O1xuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XG5cbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcbnZhciAkc29ydCA9IFtdLnNvcnQ7XG52YXIgdGVzdCA9IFsxLCAyLCAzXTtcblxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBJRTgtXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gVjggYnVnXG4gIHRlc3Quc29ydChudWxsKTtcbiAgLy8gT2xkIFdlYktpdFxufSkgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkc29ydCkpLCAnQXJyYXknLCB7XG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVmbiA9PT0gdW5kZWZpbmVkXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcbnZhciBNQVAgPSAnTWFwJztcblxuLy8gMjMuMSBNYXAgT2JqZWN0c1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoTUFQLCBmdW5jdGlvbiAoZ2V0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwge1xuICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xuICAgIHJldHVybiBlbnRyeSAmJiBlbnRyeS52O1xuICB9LFxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxuICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICB9XG59LCBzdHJvbmcsIHRydWUpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQ7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XG4gIHZhciBQO1xuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xuICB9IHJldHVybiB0aGF0O1xufTtcbiIsIi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcbiAgYW5PYmplY3QoTyk7XG4gIGlmICghaXNPYmplY3QocHJvdG8pICYmIHByb3RvICE9PSBudWxsKSB0aHJvdyBUeXBlRXJyb3IocHJvdG8gKyBcIjogY2FuJ3Qgc2V0IGFzIHByb3RvdHlwZSFcIik7XG59O1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc2V0ID0gcmVxdWlyZSgnLi9fY3R4JykoRnVuY3Rpb24uY2FsbCwgcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQsIDIpO1xuICAgICAgICBzZXQodGVzdCwgW10pO1xuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgYnVnZ3kgPSB0cnVlOyB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xuICAgICAgICBpZiAoYnVnZ3kpIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcbiAgICAgICAgcmV0dXJuIE87XG4gICAgICB9O1xuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXG4gIGNoZWNrOiBjaGVja1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBzdHJvbmcgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXN0cm9uZycpO1xudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xudmFyIFNFVCA9ICdTZXQnO1xuXG4vLyAyMy4yIFNldCBPYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCB7XG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxuICBhZGQ6IGZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcbiAgfVxufSwgc3Ryb25nKTtcbiIsIid1c2Ugc3RyaWN0Jztcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L0FycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xuXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XG4gICAgcmV0dXJuICRpbmNsdWRlcyh0aGlzLCBlbCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcblxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XG4iLCIvLyAyMS4xLjMuNyBTdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzKHNlYXJjaFN0cmluZywgcG9zaXRpb24gPSAwKVxuJ3VzZSBzdHJpY3QnO1xudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcbnZhciBjb250ZXh0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWNvbnRleHQnKTtcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XG5cbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoSU5DTFVERVMpLCAnU3RyaW5nJywge1xuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcbiAgICAgIC5pbmRleE9mKHNlYXJjaFN0cmluZywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIi8vIGhlbHBlciBmb3IgU3RyaW5nI3tzdGFydHNXaXRoLCBlbmRzV2l0aCwgaW5jbHVkZXN9XG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xuICByZXR1cm4gU3RyaW5nKGRlZmluZWQodGhhdCkpO1xufTtcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBpc1JlZ0V4cDtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xufTtcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XG4gIHZhciByZSA9IC8uLztcbiAgdHJ5IHtcbiAgICAnLy4vJ1tLRVldKHJlKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRyeSB7XG4gICAgICByZVtNQVRDSF0gPSBmYWxzZTtcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XG4gIH0gcmV0dXJuIHRydWU7XG59O1xuIiwiaW1wb3J0IGxvYWREYXRhIGZyb20gJy4vaW5kZXgnXG5cbmNvbnN0IGNvdW50cnkgPSAnQ2hpbmEnXG5jb25zdCBzYXRlbGxpdGVGaWxlID0gJy4vZGF0YS8yMDE5MDMyNS1jaGluYS5jc3YnXG5jb25zdCBnZW9TYXRlbGxpdGVzRmlsZSA9ICcuL2RhdGEvMjAxOTAzMjUtYWxsLWdlby1zYXRlbGxpdGVzLmNzdidcblxuY29uc3QgZGVzY3JpcHRpb24gPSB7XG4gICcyMDE2LTExLTEwJzogJ05vdmVtYmVyIGV2ZW50IHN0dWZmJyxcbiAgJzIwMTYtMTItMTAnOiAnRGVjZW1iZXIgZXZlbnQgc3R1ZmYnLFxuICAnMjAxNy0wNS0xMCc6ICdNYXkgZXZlbnQgc3R1ZmYnXG59XG5cbmNvbnN0IHdvcmxkUHJvamVjdGlvbiA9IFstMTQ0LCAtNl1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgbG9hZERhdGEoXG4gICAgc2F0ZWxsaXRlRmlsZSxcbiAgICBnZW9TYXRlbGxpdGVzRmlsZSxcbiAgICBkZXNjcmlwdGlvbixcbiAgICBjb3VudHJ5LFxuICAgIHdvcmxkUHJvamVjdGlvblxuICApXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdClcbiJdLCJzb3VyY2VSb290IjoiIn0=