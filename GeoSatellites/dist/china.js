!function(t){var n={};function r(e){if(n[e])return n[e].exports;var i=n[e]={i:e,l:!1,exports:{}};return t[e].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=n,r.d=function(t,n,e){r.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,n){if(1&n&&(t=r(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(r.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)r.d(e,i,function(n){return t[n]}.bind(null,i));return e},r.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(n,"a",n),n},r.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},r.p="",r(r.s=121)}([function(t,n,r){var e=r(26)("wks"),i=r(19),o=r(2).Symbol,u="function"==typeof o;(t.exports=function(t){return e[t]||(e[t]=u&&o[t]||(u?o:i)("Symbol."+t))}).store=e},function(t,n,r){var e=r(2),i=r(11),o=r(9),u=r(8),a=r(10),c=function(t,n,r){var s,f,l,h,p=t&c.F,v=t&c.G,d=t&c.S,g=t&c.P,m=t&c.B,y=v?e:d?e[n]||(e[n]={}):(e[n]||{}).prototype,w=v?i:i[n]||(i[n]={}),x=w.prototype||(w.prototype={});for(s in v&&(r=n),r)l=((f=!p&&y&&void 0!==y[s])?y:r)[s],h=m&&f?a(l,e):g&&"function"==typeof l?a(Function.call,l):l,y&&u(y,s,l,t&c.U),w[s]!=l&&o(w,s,h),g&&x[s]!=l&&(x[s]=l)};e.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){var r=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=r)},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,r){var e=r(3);t.exports=function(t){if(!e(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n,r){var e=r(4),i=r(51),o=r(33),u=Object.defineProperty;n.f=r(7)?Object.defineProperty:function(t,n,r){if(e(t),n=o(n,!0),e(r),i)try{return u(t,n,r)}catch(t){}if("get"in r||"set"in r)throw TypeError("Accessors not supported!");return"value"in r&&(t[n]=r.value),t}},function(t,n,r){t.exports=!r(5)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(2),i=r(9),o=r(12),u=r(19)("src"),a=r(83),c=(""+a).split("toString");r(11).inspectSource=function(t){return a.call(t)},(t.exports=function(t,n,r,a){var s="function"==typeof r;s&&(o(r,"name")||i(r,"name",n)),t[n]!==r&&(s&&(o(r,u)||i(r,u,t[n]?""+t[n]:c.join(String(n)))),t===e?t[n]=r:a?t[n]?t[n]=r:i(t,n,r):(delete t[n],i(t,n,r)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[u]||a.call(this)})},function(t,n,r){var e=r(6),i=r(18);t.exports=r(7)?function(t,n,r){return e.f(t,n,i(1,r))}:function(t,n,r){return t[n]=r,t}},function(t,n,r){var e=r(20);t.exports=function(t,n,r){if(e(t),void 0===n)return t;switch(r){case 1:return function(r){return t.call(n,r)};case 2:return function(r,e){return t.call(n,r,e)};case 3:return function(r,e,i){return t.call(n,r,e,i)}}return function(){return t.apply(n,arguments)}}},function(t,n){var r=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=r)},function(t,n){var r={}.hasOwnProperty;t.exports=function(t,n){return r.call(t,n)}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,r){var e=r(53),i=r(13);t.exports=function(t){return e(i(t))}},function(t,n){var r={}.toString;t.exports=function(t){return r.call(t).slice(8,-1)}},function(t,n,r){var e=r(13);t.exports=function(t){return Object(e(t))}},function(t,n){t.exports=!1},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var r=0,e=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++r+e).toString(36))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){t.exports={}},function(t,n,r){var e=r(52),i=r(36);t.exports=Object.keys||function(t){return e(t,i)}},function(t,n,r){var e=r(25),i=Math.min;t.exports=function(t){return t>0?i(e(t),9007199254740991):0}},function(t,n,r){var e=r(6).f,i=r(12),o=r(0)("toStringTag");t.exports=function(t,n,r){t&&!i(t=r?t:t.prototype,o)&&e(t,o,{configurable:!0,value:n})}},function(t,n){var r=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:r)(t)}},function(t,n,r){var e=r(11),i=r(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:e.version,mode:r(17)?"pure":"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,r){var e=r(15),i=r(0)("toStringTag"),o="Arguments"==e(function(){return arguments}());t.exports=function(t){var n,r,u;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(r=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?r:o?e(n):"Object"==(u=e(n))&&"function"==typeof n.callee?"Arguments":u}},function(t,n,r){"use strict";var e=r(60),i=r(61),o=r(21),u=r(14);t.exports=r(31)(Array,"Array",function(t,n){this._t=u(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,r=this._i++;return!t||r>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?r:"values"==n?t[r]:[r,t[r]])},"values"),o.Arguments=o.Array,e("keys"),e("values"),e("entries")},function(t,n,r){"use strict";var e=r(5);t.exports=function(t,n){return!!t&&e(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,r){"use strict";var e=r(27),i={};i[r(0)("toStringTag")]="z",i+""!="[object z]"&&r(8)(Object.prototype,"toString",function(){return"[object "+e(this)+"]"},!0)},function(t,n,r){"use strict";var e=r(17),i=r(1),o=r(8),u=r(9),a=r(21),c=r(84),s=r(24),f=r(87),l=r(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,r,v,d,g,m){c(r,n,v);var y,w,x,b=function(t){if(!h&&t in E)return E[t];switch(t){case"keys":case"values":return function(){return new r(this,t)}}return function(){return new r(this,t)}},_=n+" Iterator",S="values"==d,M=!1,E=t.prototype,C=E[l]||E["@@iterator"]||d&&E[d],N=C||b(d),A=d?S?b("entries"):N:void 0,T="Array"==n&&E.entries||C;if(T&&(x=f(T.call(new t)))!==Object.prototype&&x.next&&(s(x,_,!0),e||"function"==typeof x[l]||u(x,l,p)),S&&C&&"values"!==C.name&&(M=!0,N=function(){return C.call(this)}),e&&!m||!h&&!M&&E[l]||u(E,l,N),a[n]=N,a[_]=p,d)if(y={values:S?N:b("values"),keys:g?N:b("keys"),entries:A},m)for(w in y)w in E||o(E,w,y[w]);else i(i.P+i.F*(h||M),n,y);return y}},function(t,n,r){var e=r(3),i=r(2).document,o=e(i)&&e(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,r){var e=r(3);t.exports=function(t,n){if(!e(t))return t;var r,i;if(n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;if("function"==typeof(r=t.valueOf)&&!e(i=r.call(t)))return i;if(!n&&"function"==typeof(r=t.toString)&&!e(i=r.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n,r){var e=r(4),i=r(85),o=r(36),u=r(35)("IE_PROTO"),a=function(){},c=function(){var t,n=r(32)("iframe"),e=o.length;for(n.style.display="none",r(55).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;e--;)delete c.prototype[o[e]];return c()};t.exports=Object.create||function(t,n){var r;return null!==t?(a.prototype=e(t),r=new a,a.prototype=null,r[u]=t):r=c(),void 0===n?r:i(r,n)}},function(t,n,r){var e=r(26)("keys"),i=r(19);t.exports=function(t){return e[t]||(e[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,r){var e=r(0)("iterator"),i=!1;try{var o=[7][e]();o.return=function(){i=!0},Array.from(o,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var r=!1;try{var o=[7],u=o[e]();u.next=function(){return{done:r=!0}},o[e]=function(){return u},t(o)}catch(t){}return r}},function(t,n,r){for(var e=r(28),i=r(22),o=r(8),u=r(2),a=r(9),c=r(21),s=r(0),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},v=i(p),d=0;d<v.length;d++){var g,m=v[d],y=p[m],w=u[m],x=w&&w.prototype;if(x&&(x[f]||a(x,f,h),x[l]||a(x,l,m),c[m]=h,y))for(g in e)x[g]||o(x,g,e[g],!0)}},function(t,n,r){var e=r(10),i=r(53),o=r(16),u=r(23),a=r(90);t.exports=function(t,n){var r=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||a;return function(n,a,v){for(var d,g,m=o(n),y=i(m),w=e(a,v,3),x=u(y.length),b=0,_=r?p(n,x):c?p(n,0):void 0;x>b;b++)if((h||b in y)&&(g=w(d=y[b],b,m),t))if(r)_[b]=g;else if(g)switch(t){case 3:return!0;case 5:return d;case 6:return b;case 2:_.push(d)}else if(f)return!1;return l?-1:s||f?f:_}}},function(t,n,r){var e=r(15);t.exports=Array.isArray||function(t){return"Array"==e(t)}},function(t,n){t.exports=function(t,n,r,e){if(!(t instanceof n)||void 0!==e&&e in t)throw TypeError(r+": incorrect invocation!");return t}},function(t,n,r){var e=r(10),i=r(57),o=r(58),u=r(4),a=r(23),c=r(59),s={},f={};(n=t.exports=function(t,n,r,l,h){var p,v,d,g,m=h?function(){return t}:c(t),y=e(r,l,n?2:1),w=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(o(m)){for(p=a(t.length);p>w;w++)if((g=n?y(u(v=t[w])[0],v[1]):y(t[w]))===s||g===f)return g}else for(d=m.call(t);!(v=d.next()).done;)if((g=i(d,y,v.value,n))===s||g===f)return g}).BREAK=s,n.RETURN=f},function(t,n,r){var e=r(8);t.exports=function(t,n,r){for(var i in n)e(t,i,n[i],r);return t}},function(t,n,r){"use strict";var e=r(1),i=r(39)(0),o=r(29)([].forEach,!0);e(e.P+e.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,r){"use strict";var e=r(4);t.exports=function(){var t=e(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,r){var e=r(19)("meta"),i=r(3),o=r(12),u=r(6).f,a=0,c=Object.isExtensible||function(){return!0},s=!r(5)(function(){return c(Object.preventExtensions({}))}),f=function(t){u(t,e,{value:{i:"O"+ ++a,w:{}}})},l=t.exports={KEY:e,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,e)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[e].i},getWeak:function(t,n){if(!o(t,e)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[e].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!o(t,e)&&f(t),t}}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,r){var e=r(3);t.exports=function(t,n){if(!e(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,r){"use strict";var e=r(50)(!0);r(31)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,r=this._i;return r>=n.length?{value:void 0,done:!0}:(t=e(n,r),this._i+=t.length,{value:t,done:!1})})},function(t,n,r){var e=r(25),i=r(13);t.exports=function(t){return function(n,r){var o,u,a=String(i(n)),c=e(r),s=a.length;return c<0||c>=s?t?"":void 0:(o=a.charCodeAt(c))<55296||o>56319||c+1===s||(u=a.charCodeAt(c+1))<56320||u>57343?t?a.charAt(c):o:t?a.slice(c,c+2):u-56320+(o-55296<<10)+65536}}},function(t,n,r){t.exports=!r(7)&&!r(5)(function(){return 7!=Object.defineProperty(r(32)("div"),"a",{get:function(){return 7}}).a})},function(t,n,r){var e=r(12),i=r(14),o=r(54)(!1),u=r(35)("IE_PROTO");t.exports=function(t,n){var r,a=i(t),c=0,s=[];for(r in a)r!=u&&e(a,r)&&s.push(r);for(;n.length>c;)e(a,r=n[c++])&&(~o(s,r)||s.push(r));return s}},function(t,n,r){var e=r(15);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==e(t)?t.split(""):Object(t)}},function(t,n,r){var e=r(14),i=r(23),o=r(86);t.exports=function(t){return function(n,r,u){var a,c=e(n),s=i(c.length),f=o(u,s);if(t&&r!=r){for(;s>f;)if((a=c[f++])!=a)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===r)return t||f||0;return!t&&-1}}},function(t,n,r){var e=r(2).document;t.exports=e&&e.documentElement},function(t,n,r){"use strict";var e=r(10),i=r(1),o=r(16),u=r(57),a=r(58),c=r(23),s=r(88),f=r(59);i(i.S+i.F*!r(37)(function(t){Array.from(t)}),"Array",{from:function(t){var n,r,i,l,h=o(t),p="function"==typeof this?this:Array,v=arguments.length,d=v>1?arguments[1]:void 0,g=void 0!==d,m=0,y=f(h);if(g&&(d=e(d,v>2?arguments[2]:void 0,2)),null==y||p==Array&&a(y))for(r=new p(n=c(h.length));n>m;m++)s(r,m,g?d(h[m],m):h[m]);else for(l=y.call(h),r=new p;!(i=l.next()).done;m++)s(r,m,g?u(l,d,[i.value,m],!0):i.value);return r.length=m,r}})},function(t,n,r){var e=r(4);t.exports=function(t,n,r,i){try{return i?n(e(r)[0],r[1]):n(r)}catch(n){var o=t.return;throw void 0!==o&&e(o.call(t)),n}}},function(t,n,r){var e=r(21),i=r(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(e.Array===t||o[i]===t)}},function(t,n,r){var e=r(27),i=r(0)("iterator"),o=r(21);t.exports=r(11).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[e(t)]}},function(t,n,r){var e=r(0)("unscopables"),i=Array.prototype;null==i[e]&&r(9)(i,e,{}),t.exports=function(t){i[e][t]=!0}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,r){var e=r(16),i=r(22);r(89)("keys",function(){return function(t){return i(e(t))}})},function(t,n,r){"use strict";var e=r(1),i=r(39)(1);e(e.P+e.F*!r(29)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,r){var e=function(t){"use strict";var n,r=Object.prototype,e=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",a=i.toStringTag||"@@toStringTag";function c(t,n,r,e){var i=n&&n.prototype instanceof d?n:d,o=Object.create(i.prototype),u=new N(e||[]);return o._invoke=function(t,n,r){var e=f;return function(i,o){if(e===h)throw new Error("Generator is already running");if(e===p){if("throw"===i)throw o;return T()}for(r.method=i,r.arg=o;;){var u=r.delegate;if(u){var a=M(u,r);if(a){if(a===v)continue;return a}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(e===f)throw e=p,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);e=h;var c=s(t,n,r);if("normal"===c.type){if(e=r.done?p:l,c.arg===v)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(e=p,r.method="throw",r.arg=c.arg)}}}(t,r,u),o}function s(t,n,r){try{return{type:"normal",arg:t.call(n,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",l="suspendedYield",h="executing",p="completed",v={};function d(){}function g(){}function m(){}var y={};y[o]=function(){return this};var w=Object.getPrototypeOf,x=w&&w(w(A([])));x&&x!==r&&e.call(x,o)&&(y=x);var b=m.prototype=d.prototype=Object.create(y);function _(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function S(t){var n;this._invoke=function(r,i){function o(){return new Promise(function(n,o){!function n(r,i,o,u){var a=s(t[r],t,i);if("throw"!==a.type){var c=a.arg,f=c.value;return f&&"object"==typeof f&&e.call(f,"__await")?Promise.resolve(f.__await).then(function(t){n("next",t,o,u)},function(t){n("throw",t,o,u)}):Promise.resolve(f).then(function(t){c.value=t,o(c)},function(t){return n("throw",t,o,u)})}u(a.arg)}(r,i,n,o)})}return n=n?n.then(o,o):o()}}function M(t,r){var e=t.iterator[r.method];if(e===n){if(r.delegate=null,"throw"===r.method){if(t.iterator.return&&(r.method="return",r.arg=n,M(t,r),"throw"===r.method))return v;r.method="throw",r.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var i=s(e,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,v;var o=i.arg;return o?o.done?(r[t.resultName]=o.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=n),r.delegate=null,v):o:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function E(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function C(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(E,this),this.reset(!0)}function A(t){if(t){var r=t[o];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var i=-1,u=function r(){for(;++i<t.length;)if(e.call(t,i))return r.value=t[i],r.done=!1,r;return r.value=n,r.done=!0,r};return u.next=u}}return{next:T}}function T(){return{value:n,done:!0}}return g.prototype=b.constructor=m,m.constructor=g,m[a]=g.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===g||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(b),t},t.awrap=function(t){return{__await:t}},_(S.prototype),S.prototype[u]=function(){return this},t.AsyncIterator=S,t.async=function(n,r,e,i){var o=new S(c(n,r,e,i));return t.isGeneratorFunction(r)?o:o.next().then(function(t){return t.done?t.value:o.next()})},_(b),b[a]="Generator",b[o]=function(){return this},b.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var r in t)n.push(r);return n.reverse(),function r(){for(;n.length;){var e=n.pop();if(e in t)return r.value=e,r.done=!1,r}return r.done=!0,r}},t.values=A,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(C),!t)for(var r in this)"t"===r.charAt(0)&&e.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function i(e,i){return a.type="throw",a.arg=t,r.next=e,i&&(r.method="next",r.arg=n),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var u=this.tryEntries[o],a=u.completion;if("root"===u.tryLoc)return i("end");if(u.tryLoc<=this.prev){var c=e.call(u,"catchLoc"),s=e.call(u,"finallyLoc");if(c&&s){if(this.prev<u.catchLoc)return i(u.catchLoc,!0);if(this.prev<u.finallyLoc)return i(u.finallyLoc)}else if(c){if(this.prev<u.catchLoc)return i(u.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<u.finallyLoc)return i(u.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&e.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var u=o?o.completion:{};return u.type=t,u.arg=n,o?(this.method="next",this.next=o.finallyLoc,v):this.complete(u)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc===t){var e=r.completion;if("throw"===e.type){var i=e.arg;C(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,e){return this.delegate={iterator:A(t),resultName:r,nextLoc:e},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=e}catch(t){Function("r","regeneratorRuntime = r")(e)}},function(t,n,r){"use strict";var e,i,o,u,a=r(17),c=r(2),s=r(10),f=r(27),l=r(1),h=r(3),p=r(20),v=r(41),d=r(42),g=r(92),m=r(66).set,y=r(94)(),w=r(67),x=r(95),b=r(96),_=r(97),S=c.TypeError,M=c.process,E=M&&M.versions,C=E&&E.v8||"",N=c.Promise,A="process"==f(M),T=function(){},k=i=w.f,P=!!function(){try{var t=N.resolve(1),n=(t.constructor={})[r(0)("species")]=function(t){t(T,T)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(T)instanceof n&&0!==C.indexOf("6.6")&&-1===b.indexOf("Chrome/66")}catch(t){}}(),O=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},U=function(t,n){if(!t._n){t._n=!0;var r=t._c;y(function(){for(var e=t._v,i=1==t._s,o=0,u=function(n){var r,o,u,a=i?n.ok:n.fail,c=n.resolve,s=n.reject,f=n.domain;try{a?(i||(2==t._h&&L(t),t._h=1),!0===a?r=e:(f&&f.enter(),r=a(e),f&&(f.exit(),u=!0)),r===n.promise?s(S("Promise-chain cycle")):(o=O(r))?o.call(r,c,s):c(r)):s(e)}catch(t){f&&!u&&f.exit(),s(t)}};r.length>o;)u(r[o++]);t._c=[],t._n=!1,n&&!t._h&&D(t)})}},D=function(t){m.call(c,function(){var n,r,e,i=t._v,o=j(t);if(o&&(n=x(function(){A?M.emit("unhandledRejection",i,t):(r=c.onunhandledrejection)?r({promise:t,reason:i}):(e=c.console)&&e.error&&e.error("Unhandled promise rejection",i)}),t._h=A||j(t)?2:1),t._a=void 0,o&&n.e)throw n.v})},j=function(t){return 1!==t._h&&0===(t._a||t._c).length},L=function(t){m.call(c,function(){var n;A?M.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},F=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),U(n,!0))},R=function(t){var n,r=this;if(!r._d){r._d=!0,r=r._w||r;try{if(r===t)throw S("Promise can't be resolved itself");(n=O(t))?y(function(){var e={_w:r,_d:!1};try{n.call(t,s(R,e,1),s(F,e,1))}catch(t){F.call(e,t)}}):(r._v=t,r._s=1,U(r,!1))}catch(t){F.call({_w:r,_d:!1},t)}}};P||(N=function(t){v(this,N,"Promise","_h"),p(t),e.call(this);try{t(s(R,this,1),s(F,this,1))}catch(t){F.call(this,t)}},(e=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=r(43)(N.prototype,{then:function(t,n){var r=k(g(this,N));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=A?M.domain:void 0,this._c.push(r),this._a&&this._a.push(r),this._s&&U(this,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new e;this.promise=t,this.resolve=s(R,t,1),this.reject=s(F,t,1)},w.f=k=function(t){return t===N||t===u?new o(t):i(t)}),l(l.G+l.W+l.F*!P,{Promise:N}),r(24)(N,"Promise"),r(68)("Promise"),u=r(11).Promise,l(l.S+l.F*!P,"Promise",{reject:function(t){var n=k(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(a||!P),"Promise",{resolve:function(t){return _(a&&this===u?N:this,t)}}),l(l.S+l.F*!(P&&r(37)(function(t){N.all(t).catch(T)})),"Promise",{all:function(t){var n=this,r=k(n),e=r.resolve,i=r.reject,o=x(function(){var r=[],o=0,u=1;d(t,!1,function(t){var a=o++,c=!1;r.push(void 0),u++,n.resolve(t).then(function(t){c||(c=!0,r[a]=t,--u||e(r))},i)}),--u||e(r)});return o.e&&i(o.v),r.promise},race:function(t){var n=this,r=k(n),e=r.reject,i=x(function(){d(t,!1,function(t){n.resolve(t).then(r.resolve,e)})});return i.e&&e(i.v),r.promise}})},function(t,n,r){var e,i,o,u=r(10),a=r(93),c=r(55),s=r(32),f=r(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,v=f.MessageChannel,d=f.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},w=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],r=1;arguments.length>r;)n.push(arguments[r++]);return m[++g]=function(){a("function"==typeof t?t:Function(t),n)},e(g),g},p=function(t){delete m[t]},"process"==r(15)(l)?e=function(t){l.nextTick(u(y,t,1))}:d&&d.now?e=function(t){d.now(u(y,t,1))}:v?(o=(i=new v).port2,i.port1.onmessage=w,e=u(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(e=function(t){f.postMessage(t+"","*")},f.addEventListener("message",w,!1)):e="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(u(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,r){"use strict";var e=r(20);function i(t){var n,r;this.promise=new t(function(t,e){if(void 0!==n||void 0!==r)throw TypeError("Bad Promise constructor");n=t,r=e}),this.resolve=e(n),this.reject=e(r)}t.exports.f=function(t){return new i(t)}},function(t,n,r){"use strict";var e=r(2),i=r(6),o=r(7),u=r(0)("species");t.exports=function(t){var n=e[t];o&&n&&!n[u]&&i.f(n,u,{configurable:!0,get:function(){return this}})}},function(t,n,r){"use strict";var e=r(4),i=r(16),o=r(23),u=r(25),a=r(98),c=r(99),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;r(100)("replace",2,function(t,n,r,v){return[function(e,i){var o=t(this),u=null==e?void 0:e[n];return void 0!==u?u.call(e,o,i):r.call(String(o),e,i)},function(t,n){var i=v(r,t,this,n);if(i.done)return i.value;var l=e(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=l.global;if(g){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var w=c(l,h);if(null===w)break;if(y.push(w),!g)break;""===String(w[0])&&(l.lastIndex=a(h,o(l.lastIndex),m))}for(var x,b="",_=0,S=0;S<y.length;S++){w=y[S];for(var M=String(w[0]),E=s(f(u(w.index),h.length),0),C=[],N=1;N<w.length;N++)C.push(void 0===(x=w[N])?x:String(x));var A=w.groups;if(p){var T=[M].concat(C,E,h);void 0!==A&&T.push(A);var k=String(n.apply(void 0,T))}else k=d(M,h,E,C,A,n);E>=_&&(b+=h.slice(_,E)+k,_=E+M.length)}return b+h.slice(_)}];function d(t,n,e,o,u,a){var c=e+t.length,s=o.length,f=p;return void 0!==u&&(u=i(u),f=h),r.call(a,f,function(r,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(c);case"<":a=u[i.slice(1,-1)];break;default:var f=+i;if(0===f)return r;if(f>s){var h=l(f/10);return 0===h?r:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):r}a=o[f-1]}return void 0===a?"":a})}})},function(t,n,r){"use strict";var e,i,o=r(45),u=RegExp.prototype.exec,a=String.prototype.replace,c=u,s=(e=/a/,i=/b*/g,u.call(e,"a"),u.call(i,"a"),0!==e.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var n,r,e,i,c=this;return f&&(r=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(n=c.lastIndex),e=u.call(c,t),s&&e&&(c.lastIndex=c.global?e.index+e[0].length:n),f&&e&&e.length>1&&a.call(e[0],r,function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(e[i]=void 0)}),e}),t.exports=c},function(t,n,r){"use strict";r(105);var e=r(4),i=r(45),o=r(7),u=/./.toString,a=function(t){r(8)(RegExp.prototype,"toString",t,!0)};r(5)(function(){return"/a/b"!=u.call({source:"a",flags:"b"})})?a(function(){var t=e(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)}):"toString"!=u.name&&a(function(){return u.call(this)})},function(t,n,r){var e=Date.prototype,i=e.toString,o=e.getTime;new Date(NaN)+""!="Invalid Date"&&r(8)(e,"toString",function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"})},function(t,n,r){"use strict";var e=r(1),i=r(39)(2);e(e.P+e.F*!r(29)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,r){var e=r(2),i=r(11),o=r(17),u=r(75),a=r(6).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:e.Symbol||{});"_"==t.charAt(0)||t in n||a(n,t,{value:u.f(t)})}},function(t,n,r){n.f=r(0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,r){var e=r(52),i=r(36).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return e(t,i)}},function(t,n,r){var e=r(47),i=r(18),o=r(14),u=r(33),a=r(12),c=r(51),s=Object.getOwnPropertyDescriptor;n.f=r(7)?s:function(t,n){if(t=o(t),n=u(n,!0),c)try{return s(t,n)}catch(t){}if(a(t,n))return i(!e.f.call(t,n),t[n])}},function(t,n,r){"use strict";var e=r(6).f,i=r(34),o=r(43),u=r(10),a=r(41),c=r(42),s=r(31),f=r(61),l=r(68),h=r(7),p=r(46).fastKey,v=r(48),d=h?"_s":"size",g=function(t,n){var r,e=p(n);if("F"!==e)return t._i[e];for(r=t._f;r;r=r.n)if(r.k==n)return r};t.exports={getConstructor:function(t,n,r,s){var f=t(function(t,e){a(t,f,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[d]=0,null!=e&&c(e,r,t[s],t)});return o(f.prototype,{clear:function(){for(var t=v(this,n),r=t._i,e=t._f;e;e=e.n)e.r=!0,e.p&&(e.p=e.p.n=void 0),delete r[e.i];t._f=t._l=void 0,t[d]=0},delete:function(t){var r=v(this,n),e=g(r,t);if(e){var i=e.n,o=e.p;delete r._i[e.i],e.r=!0,o&&(o.n=i),i&&(i.p=o),r._f==e&&(r._f=i),r._l==e&&(r._l=o),r[d]--}return!!e},forEach:function(t){v(this,n);for(var r,e=u(t,arguments.length>1?arguments[1]:void 0,3);r=r?r.n:this._f;)for(e(r.v,r.k,this);r&&r.r;)r=r.p},has:function(t){return!!g(v(this,n),t)}}),h&&e(f.prototype,"size",{get:function(){return v(this,n)[d]}}),f},def:function(t,n,r){var e,i,o=g(t,n);return o?o.v=r:(t._l=o={i:i=p(n,!0),k:n,v:r,p:e=t._l,n:void 0,r:!1},t._f||(t._f=o),e&&(e.n=o),t[d]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,r){s(t,n,function(t,r){this._t=v(t,n),this._k=r,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},r?"entries":"values",!r,!0),l(n)}}},function(t,n,r){"use strict";var e=r(2),i=r(1),o=r(8),u=r(43),a=r(46),c=r(42),s=r(41),f=r(3),l=r(5),h=r(37),p=r(24),v=r(113);t.exports=function(t,n,r,d,g,m){var y=e[t],w=y,x=g?"set":"add",b=w&&w.prototype,_={},S=function(t){var n=b[t];o(b,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,r){return n.call(this,0===t?0:t,r),this})};if("function"==typeof w&&(m||b.forEach&&!l(function(){(new w).entries().next()}))){var M=new w,E=M[x](m?{}:-0,1)!=M,C=l(function(){M.has(1)}),N=h(function(t){new w(t)}),A=!m&&l(function(){for(var t=new w,n=5;n--;)t[x](n,n);return!t.has(-0)});N||((w=n(function(n,r){s(n,w,t);var e=v(new y,n,w);return null!=r&&c(r,g,e[x],e),e})).prototype=b,b.constructor=w),(C||A)&&(S("delete"),S("has"),g&&S("get")),(A||E)&&S(x),m&&b.clear&&delete b.clear}else w=d.getConstructor(n,t,g,x),u(w.prototype,r),a.NEED=!0;return p(w,t),_[t]=w,i(i.G+i.W+i.F*(w!=y),_),m||d.setStrong(w,t,g),w}},function(t,n,r){var e,i,o;i=[],void 0===(o="function"==typeof(e=function(){"use strict";var t="13.1.3";function n(t){t.parentElement.removeChild(t)}function r(t){return null!=t}function e(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,n,r){r>0&&(s(t,n),setTimeout(function(){f(t,n)},r))}function u(t){return Math.max(Math.min(t,100),0)}function a(t){return Array.isArray(t)?t:[t]}function c(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function s(t,n){t.classList?t.classList.add(n):t.className+=" "+n}function f(t,n){t.classList?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function l(t){var n=void 0!==window.pageXOffset,r="CSS1Compat"===(t.compatMode||""),e=n?window.pageXOffset:r?t.documentElement.scrollLeft:t.body.scrollLeft,i=n?window.pageYOffset:r?t.documentElement.scrollTop:t.body.scrollTop;return{x:e,y:i}}function h(t,n){return 100/(n-t)}function p(t,n){return 100*n/(t[1]-t[0])}function v(t,n){for(var r=1;t>=n[r];)r+=1;return r}function d(t,n,r){if(r>=t.slice(-1)[0])return 100;var e=v(r,t),i=t[e-1],o=t[e],u=n[e-1],a=n[e];return u+function(t,n){return p(t,t[0]<0?n+Math.abs(t[0]):n-t[0])}([i,o],r)/h(u,a)}function g(t,n,r,e){if(100===e)return e;var i=v(e,t),o=t[i-1],u=t[i];return r?e-o>(u-o)/2?u:o:n[i-1]?t[i-1]+function(t,n){return Math.round(t/n)*n}(e-t[i-1],n[i-1]):e}function m(n,r,e){var o;if("number"==typeof r&&(r=[r]),!Array.isArray(r))throw new Error("noUiSlider ("+t+"): 'range' contains invalid value.");if(!i(o="min"===n?0:"max"===n?100:parseFloat(n))||!i(r[0]))throw new Error("noUiSlider ("+t+"): 'range' value isn't numeric.");e.xPct.push(o),e.xVal.push(r[0]),o?e.xSteps.push(!isNaN(r[1])&&r[1]):isNaN(r[1])||(e.xSteps[0]=r[1]),e.xHighestCompleteStep.push(0)}function y(t,n,r){if(n)if(r.xVal[t]!==r.xVal[t+1]){r.xSteps[t]=p([r.xVal[t],r.xVal[t+1]],n)/h(r.xPct[t],r.xPct[t+1]);var e=(r.xVal[t+1]-r.xVal[t])/r.xNumSteps[t],i=Math.ceil(Number(e.toFixed(3))-1),o=r.xVal[t]+r.xNumSteps[t]*i;r.xHighestCompleteStep[t]=o}else r.xSteps[t]=r.xHighestCompleteStep[t]=r.xVal[t]}function w(t,n,r){var e;this.xPct=[],this.xVal=[],this.xSteps=[r||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var i=[];for(e in t)t.hasOwnProperty(e)&&i.push([t[e],e]);for(i.length&&"object"==typeof i[0][0]?i.sort(function(t,n){return t[0][0]-n[0][0]}):i.sort(function(t,n){return t[0]-n[0]}),e=0;e<i.length;e++)m(i[e][1],i[e][0],this);for(this.xNumSteps=this.xSteps.slice(0),e=0;e<this.xNumSteps.length;e++)y(e,this.xNumSteps[e],this)}w.prototype.getMargin=function(n){var r=this.xNumSteps[0];if(r&&n/r%1!=0)throw new Error("noUiSlider ("+t+"): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,n)},w.prototype.toStepping=function(t){return t=d(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,r){if(r>=100)return t.slice(-1)[0];var e=v(r,n),i=t[e-1],o=t[e],u=n[e-1],a=n[e];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([i,o],(r-u)*h(u,a))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return t=g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,r){var e=v(t,this.xPct);return(100===t||n&&t===this.xPct[e-1])&&(e=Math.max(e-1,1)),(this.xVal[e]-this.xVal[e-1])/r},w.prototype.getNearbySteps=function(t){var n=v(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(c);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function b(n){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(n))return!0;throw new Error("noUiSlider ("+t+"): 'format' requires 'to' and 'from' methods.")}function _(n,r){if(!i(r))throw new Error("noUiSlider ("+t+"): 'step' is not numeric.");n.singleStep=r}function S(n,r){if("object"!=typeof r||Array.isArray(r))throw new Error("noUiSlider ("+t+"): 'range' is not an object.");if(void 0===r.min||void 0===r.max)throw new Error("noUiSlider ("+t+"): Missing 'min' or 'max' in 'range'.");if(r.min===r.max)throw new Error("noUiSlider ("+t+"): 'range' 'min' and 'max' cannot be equal.");n.spectrum=new w(r,n.snap,n.singleStep)}function M(n,r){if(r=a(r),!Array.isArray(r)||!r.length)throw new Error("noUiSlider ("+t+"): 'start' option is incorrect.");n.handles=r.length,n.start=r}function E(n,r){if(n.snap=r,"boolean"!=typeof r)throw new Error("noUiSlider ("+t+"): 'snap' option must be a boolean.")}function C(n,r){if(n.animate=r,"boolean"!=typeof r)throw new Error("noUiSlider ("+t+"): 'animate' option must be a boolean.")}function N(n,r){if(n.animationDuration=r,"number"!=typeof r)throw new Error("noUiSlider ("+t+"): 'animationDuration' option must be a number.")}function A(n,r){var e,i=[!1];if("lower"===r?r=[!0,!1]:"upper"===r&&(r=[!1,!0]),!0===r||!1===r){for(e=1;e<n.handles;e++)i.push(r);i.push(!1)}else{if(!Array.isArray(r)||!r.length||r.length!==n.handles+1)throw new Error("noUiSlider ("+t+"): 'connect' option doesn't match handle count.");i=r}n.connect=i}function T(n,r){switch(r){case"horizontal":n.ort=0;break;case"vertical":n.ort=1;break;default:throw new Error("noUiSlider ("+t+"): 'orientation' option is invalid.")}}function k(n,r){if(!i(r))throw new Error("noUiSlider ("+t+"): 'margin' option must be numeric.");if(0!==r&&(n.margin=n.spectrum.getMargin(r),!n.margin))throw new Error("noUiSlider ("+t+"): 'margin' option is only supported on linear sliders.")}function P(n,r){if(!i(r))throw new Error("noUiSlider ("+t+"): 'limit' option must be numeric.");if(n.limit=n.spectrum.getMargin(r),!n.limit||n.handles<2)throw new Error("noUiSlider ("+t+"): 'limit' option is only supported on linear sliders with 2 or more handles.")}function O(n,r){if(!i(r)&&!Array.isArray(r))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(r)&&2!==r.length&&!i(r[0])&&!i(r[1]))throw new Error("noUiSlider ("+t+"): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==r){if(Array.isArray(r)||(r=[r,r]),n.padding=[n.spectrum.getMargin(r[0]),n.spectrum.getMargin(r[1])],!1===n.padding[0]||!1===n.padding[1])throw new Error("noUiSlider ("+t+"): 'padding' option is only supported on linear sliders.");if(n.padding[0]<0||n.padding[1]<0)throw new Error("noUiSlider ("+t+"): 'padding' option must be a positive number(s).");if(n.padding[0]+n.padding[1]>=100)throw new Error("noUiSlider ("+t+"): 'padding' option must not exceed 100% of the range.")}}function U(n,r){switch(r){case"ltr":n.dir=0;break;case"rtl":n.dir=1;break;default:throw new Error("noUiSlider ("+t+"): 'direction' option was not recognized.")}}function D(n,r){if("string"!=typeof r)throw new Error("noUiSlider ("+t+"): 'behaviour' must be a string containing options.");var e=r.indexOf("tap")>=0,i=r.indexOf("drag")>=0,o=r.indexOf("fixed")>=0,u=r.indexOf("snap")>=0,a=r.indexOf("hover")>=0,c=r.indexOf("unconstrained")>=0;if(o){if(2!==n.handles)throw new Error("noUiSlider ("+t+"): 'fixed' behaviour must be used with 2 handles");k(n,n.start[1]-n.start[0])}if(c&&(n.margin||n.limit))throw new Error("noUiSlider ("+t+"): 'unconstrained' behaviour cannot be used with margin or limit");n.events={tap:e||u,drag:i,fixed:o,snap:u,hover:a,unconstrained:c}}function j(n,r){if(!1!==r)if(!0===r){n.tooltips=[];for(var e=0;e<n.handles;e++)n.tooltips.push(!0)}else{if(n.tooltips=a(r),n.tooltips.length!==n.handles)throw new Error("noUiSlider ("+t+"): must pass a formatter for all handles.");n.tooltips.forEach(function(n){if("boolean"!=typeof n&&("object"!=typeof n||"function"!=typeof n.to))throw new Error("noUiSlider ("+t+"): 'tooltips' must be passed a formatter or 'false'.")})}}function L(t,n){t.ariaFormat=n,b(n)}function F(t,n){t.format=n,b(n)}function R(n,r){if(n.keyboardSupport=r,"boolean"!=typeof r)throw new Error("noUiSlider ("+t+"): 'keyboardSupport' option must be a boolean.")}function I(t,n){t.documentElement=n}function H(n,r){if("string"!=typeof r&&!1!==r)throw new Error("noUiSlider ("+t+"): 'cssPrefix' must be a string or `false`.");n.cssPrefix=r}function V(n,r){if("object"!=typeof r)throw new Error("noUiSlider ("+t+"): 'cssClasses' must be an object.");if("string"==typeof n.cssPrefix)for(var e in n.cssClasses={},r)r.hasOwnProperty(e)&&(n.cssClasses[e]=n.cssPrefix+r[e]);else n.cssClasses=r}function Y(n){var e={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},i={step:{r:!1,t:_},start:{r:!0,t:M},connect:{r:!0,t:A},direction:{r:!0,t:U},snap:{r:!1,t:E},animate:{r:!1,t:C},animationDuration:{r:!1,t:N},range:{r:!0,t:S},orientation:{r:!1,t:T},margin:{r:!1,t:k},limit:{r:!1,t:P},padding:{r:!1,t:O},behaviour:{r:!0,t:D},ariaFormat:{r:!1,t:L},format:{r:!1,t:F},tooltips:{r:!1,t:j},keyboardSupport:{r:!0,t:R},documentElement:{r:!1,t:I},cssPrefix:{r:!0,t:H},cssClasses:{r:!0,t:V}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};n.format&&!n.ariaFormat&&(n.ariaFormat=n.format),Object.keys(i).forEach(function(u){if(!r(n[u])&&void 0===o[u]){if(i[u].r)throw new Error("noUiSlider ("+t+"): '"+u+"' is required.");return!0}i[u].t(e,r(n[u])?n[u]:o[u])}),e.pips=n.pips;var u=document.createElement("div"),a=void 0!==u.style.msTransform,c=void 0!==u.style.transform;return e.transformRule=c?"transform":a?"msTransform":"webkitTransform",e.style=[["left","top"],["right","bottom"]][e.dir][e.ort],e}function z(r,i,c){var h,p,v,d,g,m,y,w,x=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},b=window.CSS&&CSS.supports&&CSS.supports("touch-action","none"),_=b&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),S=r,M=i.spectrum,E=[],C=[],N=[],A=0,T={},k=r.ownerDocument,P=i.documentElement||k.documentElement,O=k.body,U=-1,D=0,j=1,L=2,F="rtl"===k.dir||1===i.ort?0:100;function R(t,n){var r=k.createElement("div");return n&&s(r,n),t.appendChild(r),r}function I(t,n){var r=R(t,i.cssClasses.origin),e=R(r,i.cssClasses.handle);return R(e,i.cssClasses.touchArea),e.setAttribute("data-handle",n),i.keyboardSupport&&(e.setAttribute("tabindex","0"),e.addEventListener("keydown",function(t){return function(t,n){if(z()||q(n))return!1;var r=["Left","Right"],e=["Down","Up"];i.dir&&!i.ort?r.reverse():i.ort&&!i.dir&&e.reverse();var o=t.key.replace("Arrow",""),u=o===e[0]||o===r[0],a=o===e[1]||o===r[1];if(!u&&!a)return!0;t.preventDefault();var c=u?0:1,s=wt(n)[c];return null!==s&&(!1===s&&(s=M.getDefaultStep(C[n],u,10)),s=Math.max(s,1e-7),s*=u?-1:1,mt(n,E[n]+s,!0),!1)}(t,n)})),e.setAttribute("role","slider"),e.setAttribute("aria-orientation",i.ort?"vertical":"horizontal"),0===n?s(e,i.cssClasses.handleLower):n===i.handles-1&&s(e,i.cssClasses.handleUpper),r}function H(t,n){return!!n&&R(t,i.cssClasses.connect)}function V(t,n){return!!i.tooltips[n]&&R(t.firstChild,i.cssClasses.tooltip)}function z(){return S.hasAttribute("disabled")}function q(t){var n=p[t];return n.hasAttribute("disabled")}function B(){g&&(ut("update.tooltips"),g.forEach(function(t){t&&n(t)}),g=null)}function X(){B(),g=p.map(V),ot("update.tooltips",function(t,n,r){if(g[n]){var e=t[n];!0!==i.tooltips[n]&&(e=i.tooltips[n].to(r[n])),g[n].innerHTML=e}})}function $(t,n,r){var e=k.createElement("div"),o=[];o[D]=i.cssClasses.valueNormal,o[j]=i.cssClasses.valueLarge,o[L]=i.cssClasses.valueSub;var u=[];u[D]=i.cssClasses.markerNormal,u[j]=i.cssClasses.markerLarge,u[L]=i.cssClasses.markerSub;var a=[i.cssClasses.valueHorizontal,i.cssClasses.valueVertical],c=[i.cssClasses.markerHorizontal,i.cssClasses.markerVertical];function f(t,n){var r=n===i.cssClasses.value,e=r?a:c,s=r?o:u;return n+" "+e[i.ort]+" "+s[t]}return s(e,i.cssClasses.pips),s(e,0===i.ort?i.cssClasses.pipsHorizontal:i.cssClasses.pipsVertical),Object.keys(t).forEach(function(o){!function(t,o,u){if((u=n?n(o,u):u)!==U){var a=R(e,!1);a.className=f(u,i.cssClasses.marker),a.style[i.style]=t+"%",u>D&&((a=R(e,!1)).className=f(u,i.cssClasses.value),a.setAttribute("data-value",o),a.style[i.style]=t+"%",a.innerHTML=r.to(o))}}(o,t[o][0],t[o][1])}),e}function W(){d&&(n(d),d=null)}function G(n){W();var r=n.mode,e=n.density||1,i=n.filter||!1,o=n.values||!1,u=n.stepped||!1,a=function(n,r,e){if("range"===n||"steps"===n)return M.xVal;if("count"===n){if(r<2)throw new Error("noUiSlider ("+t+"): 'values' (>= 2) required for mode 'count'.");var i=r-1,o=100/i;for(r=[];i--;)r[i]=i*o;r.push(100),n="positions"}return"positions"===n?r.map(function(t){return M.fromStepping(e?M.getStep(t):t)}):"values"===n?e?r.map(function(t){return M.fromStepping(M.getStep(M.toStepping(t)))}):r:void 0}(r,o,u),c=function(t,n,r){var e,i={},o=M.xVal[0],u=M.xVal[M.xVal.length-1],a=!1,c=!1,s=0;return(e=r.slice().sort(function(t,n){return t-n}),r=e.filter(function(t){return!this[t]&&(this[t]=!0)},{}))[0]!==o&&(r.unshift(o),a=!0),r[r.length-1]!==u&&(r.push(u),c=!0),r.forEach(function(e,o){var u,f,l,h,p,v,d,g,m,y,w=e,x=r[o+1],b="steps"===n;if(b&&(u=M.xNumSteps[o]),u||(u=x-w),!1!==w&&void 0!==x)for(u=Math.max(u,1e-7),f=w;f<=x;f=(f+u).toFixed(7)/1){for(g=(p=(h=M.toStepping(f))-s)/t,y=p/(m=Math.round(g)),l=1;l<=m;l+=1)i[(v=s+l*y).toFixed(5)]=[M.fromStepping(v),0];d=r.indexOf(f)>-1?j:b?L:D,!o&&a&&(d=0),f===x&&c||(i[h.toFixed(5)]=[f,d]),s=h}}),i}(e,r,a),s=n.format||{to:Math.round};return d=S.appendChild($(c,i,s))}function Z(){var t=h.getBoundingClientRect(),n="offset"+["Width","Height"][i.ort];return 0===i.ort?t.width||h[n]:t.height||h[n]}function J(t,n,r,e){var o=function(o){return!!(o=function(t,n,r){var e,i,o=0===t.type.indexOf("touch"),u=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),o){var c=function(t){return t.target===r||r.contains(t.target)};if("touchstart"===t.type){var s=Array.prototype.filter.call(t.touches,c);if(s.length>1)return!1;e=s[0].pageX,i=s[0].pageY}else{var f=Array.prototype.find.call(t.changedTouches,c);if(!f)return!1;e=f.pageX,i=f.pageY}}return n=n||l(k),(u||a)&&(e=t.clientX+n.x,i=t.clientY+n.y),t.pageOffset=n,t.points=[e,i],t.cursor=u||a,t}(o,e.pageOffset,e.target||n))&&!(z()&&!e.doNotReject)&&(u=S,a=i.cssClasses.tap,!((u.classList?u.classList.contains(a):new RegExp("\\b"+a+"\\b").test(u.className))&&!e.doNotReject)&&!(t===x.start&&void 0!==o.buttons&&o.buttons>1)&&(!e.hover||!o.buttons)&&(_||o.preventDefault(),o.calcPoint=o.points[i.ort],void r(o,e)));var u,a},u=[];return t.split(" ").forEach(function(t){n.addEventListener(t,o,!!_&&{passive:!0}),u.push([t,o])}),u}function Q(t){var n,r,e,o,a,c,s=t-(n=h,r=i.ort,e=n.getBoundingClientRect(),o=n.ownerDocument,a=o.documentElement,c=l(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),r?e.top+c.y-a.clientTop:e.left+c.x-a.clientLeft),f=100*s/Z();return f=u(f),i.dir?100-f:f}function K(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&nt(t,n)}function tt(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return nt(t,n);var r=(i.dir?-1:1)*(t.calcPoint-n.startCalcPoint),e=100*r/n.baseSize;ft(r>0,e,n.locations,n.handleNumbers)}function nt(t,n){n.handle&&(f(n.handle,i.cssClasses.active),A-=1),n.listeners.forEach(function(t){P.removeEventListener(t[0],t[1])}),0===A&&(f(S,i.cssClasses.drag),ht(),t.cursor&&(O.style.cursor="",O.removeEventListener("selectstart",e))),n.handleNumbers.forEach(function(t){at("change",t),at("set",t),at("end",t)})}function rt(t,n){if(n.handleNumbers.some(q))return!1;var r;if(1===n.handleNumbers.length){var o=p[n.handleNumbers[0]];r=o.children[0],A+=1,s(r,i.cssClasses.active)}t.stopPropagation();var u=[],a=J(x.move,P,tt,{target:t.target,handle:r,listeners:u,startCalcPoint:t.calcPoint,baseSize:Z(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:C.slice()}),c=J(x.end,P,nt,{target:t.target,handle:r,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers}),f=J("mouseout",P,K,{target:t.target,handle:r,listeners:u,doNotReject:!0,handleNumbers:n.handleNumbers});u.push.apply(u,a.concat(c,f)),t.cursor&&(O.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&s(S,i.cssClasses.drag),O.addEventListener("selectstart",e,!1)),n.handleNumbers.forEach(function(t){at("start",t)})}function et(t){t.stopPropagation();var n=Q(t.calcPoint),r=function(t){var n=100,r=!1;return p.forEach(function(e,i){if(!q(i)){var o=Math.abs(C[i]-t);(o<n||100===o&&100===n)&&(r=i,n=o)}}),r}(n);if(!1===r)return!1;i.events.snap||o(S,i.cssClasses.tap,i.animationDuration),pt(r,n,!0,!0),ht(),at("slide",r,!0),at("update",r,!0),at("change",r,!0),at("set",r,!0),i.events.snap&&rt(t,{handleNumbers:[r]})}function it(t){var n=Q(t.calcPoint),r=M.getStep(n),e=M.fromStepping(r);Object.keys(T).forEach(function(t){"hover"===t.split(".")[0]&&T[t].forEach(function(t){t.call(m,e)})})}function ot(t,n){T[t]=T[t]||[],T[t].push(n),"update"===t.split(".")[0]&&p.forEach(function(t,n){at("update",n)})}function ut(t){var n=t&&t.split(".")[0],r=n&&t.substring(n.length);Object.keys(T).forEach(function(t){var e=t.split(".")[0],i=t.substring(e.length);n&&n!==e||r&&r!==i||delete T[t]})}function at(t,n,r){Object.keys(T).forEach(function(e){var o=e.split(".")[0];t===o&&T[e].forEach(function(t){t.call(m,E.map(i.format.to),n,E.slice(),r||!1,C.slice())})})}function ct(t,n,r,e,o,a){return p.length>1&&!i.events.unconstrained&&(e&&n>0&&(r=Math.max(r,t[n-1]+i.margin)),o&&n<p.length-1&&(r=Math.min(r,t[n+1]-i.margin))),p.length>1&&i.limit&&(e&&n>0&&(r=Math.min(r,t[n-1]+i.limit)),o&&n<p.length-1&&(r=Math.max(r,t[n+1]-i.limit))),i.padding&&(0===n&&(r=Math.max(r,i.padding[0])),n===p.length-1&&(r=Math.min(r,100-i.padding[1]))),!((r=u(r=M.getStep(r)))===t[n]&&!a)&&r}function st(t,n){var r=i.ort;return(r?n:t)+", "+(r?t:n)}function ft(t,n,r,e){var i=r.slice(),o=[!t,t],u=[t,!t];e=e.slice(),t&&e.reverse(),e.length>1?e.forEach(function(t,r){var e=ct(i,t,i[t]+n,o[r],u[r],!1);!1===e?n=0:(n=e-i[t],i[t]=e)}):o=u=[!0];var a=!1;e.forEach(function(t,e){a=pt(t,r[t]+n,o[e],u[e])||a}),a&&e.forEach(function(t){at("update",t),at("slide",t)})}function lt(t,n){return i.dir?100-t-n:t}function ht(){N.forEach(function(t){var n=C[t]>50?-1:1,r=3+(p.length+n*t);p[t].style.zIndex=r})}function pt(t,n,r,e){return!1!==(n=ct(C,t,n,r,e,!1))&&(function(t,n){C[t]=n,E[t]=M.fromStepping(n);var r="translate("+st(lt(n,0)-F+"%","0")+")";p[t].style[i.transformRule]=r,vt(t),vt(t+1)}(t,n),!0)}function vt(t){if(v[t]){var n=0,r=100;0!==t&&(n=C[t-1]),t!==v.length-1&&(r=C[t]);var e=r-n,o="translate("+st(lt(n,e)+"%","0")+")",u="scale("+st(e/100,"1")+")";v[t].style[i.transformRule]=o+" "+u}}function dt(t,n){return null===t||!1===t||void 0===t?C[n]:("number"==typeof t&&(t=String(t)),t=i.format.from(t),!1===(t=M.toStepping(t))||isNaN(t)?C[n]:t)}function gt(t,n){var r=a(t),e=void 0===C[0];n=void 0===n||!!n,i.animate&&!e&&o(S,i.cssClasses.tap,i.animationDuration),N.forEach(function(t){pt(t,dt(r[t],t),!0,!1)}),N.forEach(function(t){pt(t,C[t],!0,!0)}),ht(),N.forEach(function(t){at("update",t),null!==r[t]&&n&&at("set",t)})}function mt(n,r,e){if(!((n=Number(n))>=0&&n<N.length))throw new Error("noUiSlider ("+t+"): invalid handle number, got: "+n);pt(n,dt(r,n),!0,!0),at("update",n),e&&at("set",n)}function yt(){var t=E.map(i.format.to);return 1===t.length?t[0]:t}function wt(t){var n=C[t],r=M.getNearbySteps(n),e=E[t],i=r.thisStep.step,o=null;!1!==i&&e+i>r.stepAfter.startValue&&(i=r.stepAfter.startValue-e),o=e>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&e-r.stepBefore.highestStep,100===n?i=null:0===n&&(o=null);var u=M.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(u))),null!==o&&!1!==o&&(o=Number(o.toFixed(u))),[o,i]}return s(w=S,i.cssClasses.target),0===i.dir?s(w,i.cssClasses.ltr):s(w,i.cssClasses.rtl),0===i.ort?s(w,i.cssClasses.horizontal):s(w,i.cssClasses.vertical),h=R(w,i.cssClasses.base),function(t,n){var r=R(n,i.cssClasses.connects);p=[],(v=[]).push(H(r,t[0]));for(var e=0;e<i.handles;e++)p.push(I(n,e)),N[e]=e,v.push(H(r,t[e+1]))}(i.connect,h),(y=i.events).fixed||p.forEach(function(t,n){J(x.start,t.children[0],rt,{handleNumbers:[n]})}),y.tap&&J(x.start,h,et,{}),y.hover&&J(x.move,h,it,{hover:!0}),y.drag&&v.forEach(function(t,n){if(!1!==t&&0!==n&&n!==v.length-1){var r=p[n-1],e=p[n],o=[t];s(t,i.cssClasses.draggable),y.fixed&&(o.push(r.children[0]),o.push(e.children[0])),o.forEach(function(t){J(x.start,t,rt,{handles:[r,e],handleNumbers:[n-1,n]})})}}),gt(i.start),i.pips&&G(i.pips),i.tooltips&&X(),ot("update",function(t,n,r,e,o){N.forEach(function(t){var n=p[t],e=ct(C,t,0,!0,!0,!0),u=ct(C,t,100,!0,!0,!0),a=o[t],c=i.ariaFormat.to(r[t]);e=M.fromStepping(e).toFixed(1),u=M.fromStepping(u).toFixed(1),a=M.fromStepping(a).toFixed(1),n.children[0].setAttribute("aria-valuemin",e),n.children[0].setAttribute("aria-valuemax",u),n.children[0].setAttribute("aria-valuenow",a),n.children[0].setAttribute("aria-valuetext",c)})}),m={destroy:function(){for(var t in i.cssClasses)i.cssClasses.hasOwnProperty(t)&&f(S,i.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return N.map(wt)},on:ot,off:ut,get:yt,set:gt,setHandle:mt,reset:function(t){gt(i.start,t)},__moveHandles:function(t,n,r){ft(t,n,C,r)},options:c,updateOptions:function(t,n){var r=yt(),e=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];e.forEach(function(n){void 0!==t[n]&&(c[n]=t[n])});var o=Y(c);e.forEach(function(n){void 0!==t[n]&&(i[n]=o[n])}),M=o.spectrum,i.margin=o.margin,i.limit=o.limit,i.padding=o.padding,i.pips?G(i.pips):W(),i.tooltips?X():B(),C=[],gt(t.start||r,n)},target:S,removePips:W,removeTooltips:B,pips:G}}return{__spectrum:w,version:t,create:function(n,r){if(!n||!n.nodeName)throw new Error("noUiSlider ("+t+"): create requires a single element, got: "+n);if(n.noUiSlider)throw new Error("noUiSlider ("+t+"): Slider was already initialized.");var e=Y(r),i=z(n,e,r);return n.noUiSlider=i,i}}})?e.apply(n,i):e)||(t.exports=o)},function(t,n,r){"use strict";r(49),r(56),r(38),r(28),r(62),r(63),r(64),r(65),r(30),r(44),r(69),r(102);var e={calculate:function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()},isMobile:function(){var t=this.calculate();return"xsmall"==t||"small"==t}},i=function(){return new o};function o(){this.reset()}o.prototype={constructor:o,reset:function(){this.s=this.t=0},add:function(t){a(u,t,this.t),a(this,u.s,this.s),this.s?this.t+=u.t:this.s=u.t},valueOf:function(){return this.s}};var u=new o;function a(t,n,r){var e=t.s=n+r,i=e-n,o=e-i;t.t=n-o+(r-i)}var c=1e-6,s=Math.PI,f=s/2,l=s/4,h=2*s,p=180/s,v=s/180,d=Math.abs,g=Math.atan,m=Math.atan2,y=Math.cos,w=(Math.ceil,Math.exp),x=(Math.floor,Math.log),b=(Math.pow,Math.sin),_=(Math.sign,Math.sqrt),S=Math.tan;function M(t){return t>1?0:t<-1?s:Math.acos(t)}function E(t){return t>1?f:t<-1?-f:Math.asin(t)}function C(){}function N(t,n){t&&T.hasOwnProperty(t.type)&&T[t.type](t,n)}var A={Feature:function(t,n){N(t.geometry,n)},FeatureCollection:function(t,n){for(var r=t.features,e=-1,i=r.length;++e<i;)N(r[e].geometry,n)}},T={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var r=t.coordinates,e=-1,i=r.length;++e<i;)t=r[e],n.point(t[0],t[1],t[2])},LineString:function(t,n){k(t.coordinates,n,0)},MultiLineString:function(t,n){for(var r=t.coordinates,e=-1,i=r.length;++e<i;)k(r[e],n,0)},Polygon:function(t,n){P(t.coordinates,n)},MultiPolygon:function(t,n){for(var r=t.coordinates,e=-1,i=r.length;++e<i;)P(r[e],n)},GeometryCollection:function(t,n){for(var r=t.geometries,e=-1,i=r.length;++e<i;)N(r[e],n)}};function k(t,n,r){var e,i=-1,o=t.length-r;for(n.lineStart();++i<o;)e=t[i],n.point(e[0],e[1],e[2]);n.lineEnd()}function P(t,n){var r=-1,e=t.length;for(n.polygonStart();++r<e;)k(t[r],n,1);n.polygonEnd()}var O=function(t,n){t&&A.hasOwnProperty(t.type)?A[t.type](t,n):N(t,n)};i(),i();function U(t){return[m(t[1],t[0]),E(t[2])]}function D(t){var n=t[0],r=t[1],e=y(r);return[e*y(n),e*b(n),b(r)]}function j(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function L(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function F(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function R(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function I(t){var n=_(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}i();var H=function(t,n){function r(r,e){return r=t(r,e),n(r[0],r[1])}return t.invert&&n.invert&&(r.invert=function(r,e){return(r=n.invert(r,e))&&t.invert(r[0],r[1])}),r};function V(t,n){return[d(t)>s?t+Math.round(-t/h)*h:t,n]}function Y(t,n,r){return(t%=h)?n||r?H(q(t),B(n,r)):q(t):n||r?B(n,r):V}function z(t){return function(n,r){return[(n+=t)>s?n-h:n<-s?n+h:n,r]}}function q(t){var n=z(t);return n.invert=z(-t),n}function B(t,n){var r=y(t),e=b(t),i=y(n),o=b(n);function u(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),f=s*r+a*e;return[m(c*i-f*o,a*r-s*e),E(f*i+c*o)]}return u.invert=function(t,n){var u=y(n),a=y(t)*u,c=b(t)*u,s=b(n),f=s*i-c*o;return[m(c*i+s*o,a*r+f*e),E(f*r-a*e)]},u}V.invert=V;function X(t,n,r,e,i,o){if(r){var u=y(n),a=b(n),c=e*r;null==i?(i=n+e*h,o=n-c/2):(i=$(u,i),o=$(u,o),(e>0?i<o:i>o)&&(i+=e*h));for(var s,f=i;e>0?f>o:f<o;f-=c)s=U([u,-a*y(f),-a*b(f)]),t.point(s[0],s[1])}}function $(t,n){(n=D(n))[0]-=t,I(n);var r=M(-n[1]);return((-n[2]<0?-r:r)+h-c)%h}var W=function(){var t,n=[];return{point:function(n,r){t.push([n,r])},lineStart:function(){n.push(t=[])},lineEnd:C,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var r=n;return n=[],t=null,r}}},G=function(t,n){return d(t[0]-n[0])<c&&d(t[1]-n[1])<c};function Z(t,n,r,e){this.x=t,this.z=n,this.o=r,this.e=e,this.v=!1,this.n=this.p=null}var J=function(t,n,r,e,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,r,e=t[0],u=t[n];if(G(e,u)){for(i.lineStart(),o=0;o<n;++o)i.point((e=t[o])[0],e[1]);i.lineEnd()}else a.push(r=new Z(e,t,null,!0)),c.push(r.o=new Z(e,null,r,!1)),a.push(r=new Z(u,t,null,!1)),c.push(r.o=new Z(u,null,r,!0))}}),a.length){for(c.sort(n),Q(a),Q(c),o=0,u=c.length;o<u;++o)c[o].e=r=!r;for(var s,f,l=a[0];;){for(var h=l,p=!0;h.v;)if((h=h.n)===l)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,u=s.length;o<u;++o)i.point((f=s[o])[0],f[1]);else e(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((f=s[o])[0],f[1]);else e(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function Q(t){if(n=t.length){for(var n,r,e=0,i=t[0];++e<n;)i.n=r=t[e],r.p=i,i=r;i.n=r=t[0],r.p=i}}var K=i(),tt=function(t,n){var r=n[0],e=n[1],i=b(e),o=[b(r),-y(r),0],u=0,a=0;K.reset(),1===i?e=f+c:-1===i&&(e=-f-c);for(var p=0,v=t.length;p<v;++p)if(g=(d=t[p]).length)for(var d,g,w=d[g-1],x=w[0],_=w[1]/2+l,S=b(_),M=y(_),C=0;C<g;++C,x=A,S=k,M=P,w=N){var N=d[C],A=N[0],T=N[1]/2+l,k=b(T),P=y(T),O=A-x,U=O>=0?1:-1,j=U*O,F=j>s,R=S*k;if(K.add(m(R*U*b(j),M*P+R*y(j))),u+=F?O+U*h:O,F^x>=r^A>=r){var H=L(D(w),D(N));I(H);var V=L(o,H);I(V);var Y=(F^O>=0?-1:1)*E(V[2]);(e>Y||e===Y&&(H[0]||H[1]))&&(a+=F^O>=0?1:-1)}}return(u<-c||u<c&&K<-c)^1&a},nt=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN};var rt,et;1===(rt=nt).length&&(et=rt,rt=function(t,n){return nt(et(t),n)});var it=Array.prototype;it.slice,it.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var ot=function(t){for(var n,r,e,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(r=new Array(u);--i>=0;)for(n=(e=t[i]).length;--n>=0;)r[--u]=e[n];return r};var ut=function(t,n,r,e){return function(i){var o,u,a,c=n(i),s=W(),f=n(s),l=!1,h={point:p,lineStart:d,lineEnd:g,polygonStart:function(){h.point=m,h.lineStart=y,h.lineEnd=w,u=[],o=[]},polygonEnd:function(){h.point=p,h.lineStart=d,h.lineEnd=g,u=ot(u);var t=tt(o,e);u.length?(l||(i.polygonStart(),l=!0),J(u,ct,t,r,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),r(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),r(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function p(n,r){t(n,r)&&i.point(n,r)}function v(t,n){c.point(t,n)}function d(){h.point=v,c.lineStart()}function g(){h.point=p,c.lineEnd()}function m(t,n){a.push([t,n]),f.point(t,n)}function y(){f.lineStart(),a=[]}function w(){m(a[0][0],a[0][1]),f.lineEnd();var t,n,r,e,c=f.clean(),h=s.result(),p=h.length;if(a.pop(),o.push(a),a=null,p)if(1&c){if((n=(r=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((e=r[t])[0],e[1]);i.lineEnd()}}else p>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(at))}return h}};function at(t){return t.length>1}function ct(t,n){return((t=t.x)[0]<0?t[1]-f-c:f-t[1])-((n=n.x)[0]<0?n[1]-f-c:f-n[1])}var st=ut(function(){return!0},function(t){var n,r=NaN,e=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?s:-s,l=d(o-r);d(l-s)<c?(t.point(r,e=(e+u)/2>0?f:-f),t.point(i,e),t.lineEnd(),t.lineStart(),t.point(a,e),t.point(o,e),n=0):i!==a&&l>=s&&(d(r-i)<c&&(r-=i*c),d(o-a)<c&&(o-=a*c),e=function(t,n,r,e){var i,o,u=b(t-r);return d(u)>c?g((b(n)*(o=y(e))*b(r)-b(e)*(i=y(n))*b(t))/(i*o*u)):(n+e)/2}(r,e,o,u),t.point(i,e),t.lineEnd(),t.lineStart(),t.point(a,e),n=0),t.point(r=o,e=u),i=a},lineEnd:function(){t.lineEnd(),r=e=NaN},clean:function(){return 2-n}}},function(t,n,r,e){var i;if(null==t)i=r*f,e.point(-s,i),e.point(0,i),e.point(s,i),e.point(s,0),e.point(s,-i),e.point(0,-i),e.point(-s,-i),e.point(-s,0),e.point(-s,i);else if(d(t[0]-n[0])>c){var o=t[0]<n[0]?s:-s;i=r*o/2,e.point(-o,i),e.point(0,i),e.point(o,i)}else e.point(n[0],n[1])},[-s,-f]);var ft=function(t){var n=y(t),r=6*v,e=n>0,i=d(n)>c;function o(t,r){return y(t)*y(r)>n}function u(t,r,e){var i=[1,0,0],o=L(D(t),D(r)),u=j(o,o),a=o[0],f=u-a*a;if(!f)return!e&&t;var l=n*u/f,h=-n*a/f,p=L(i,o),v=R(i,l);F(v,R(o,h));var g=p,m=j(v,g),y=j(g,g),w=m*m-y*(j(v,v)-1);if(!(w<0)){var x=_(w),b=R(g,(-m-x)/y);if(F(b,v),b=U(b),!e)return b;var S,M=t[0],E=r[0],C=t[1],N=r[1];E<M&&(S=M,M=E,E=S);var A=E-M,T=d(A-s)<c;if(!T&&N<C&&(S=C,C=N,N=S),T||A<c?T?C+N>0^b[1]<(d(b[0]-M)<c?C:N):C<=b[1]&&b[1]<=N:A>s^(M<=b[0]&&b[0]<=E)){var k=R(g,(-m+x)/y);return F(k,v),[b,U(k)]}}}function a(n,r){var i=e?t:s-t,o=0;return n<-i?o|=1:n>i&&(o|=2),r<-i?o|=4:r>i&&(o|=8),o}return ut(o,function(t){var n,r,f,l,h;return{lineStart:function(){l=f=!1,h=1},point:function(p,v){var d,g=[p,v],m=o(p,v),y=e?m?0:a(p,v):m?a(p+(p<0?s:-s),v):0;if(!n&&(l=f=m)&&t.lineStart(),m!==f&&(!(d=u(n,g))||G(n,d)||G(g,d))&&(g[0]+=c,g[1]+=c,m=o(g[0],g[1])),m!==f)h=0,m?(t.lineStart(),d=u(g,n),t.point(d[0],d[1])):(d=u(n,g),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&e^m){var w;y&r||!(w=u(g,n,!0))||(h=0,e?(t.lineStart(),t.point(w[0][0],w[0][1]),t.point(w[1][0],w[1][1]),t.lineEnd()):(t.point(w[1][0],w[1][1]),t.lineEnd(),t.lineStart(),t.point(w[0][0],w[0][1])))}!m||n&&G(n,g)||t.point(g[0],g[1]),n=g,f=m,r=y},lineEnd:function(){f&&t.lineEnd(),n=null},clean:function(){return h|(l&&f)<<1}}},function(n,e,i,o){X(o,t,r,i,n,e)},e?[0,-t]:[-s,t-s])},lt=function(t,n,r,e,i,o){var u,a=t[0],c=t[1],s=0,f=1,l=n[0]-a,h=n[1]-c;if(u=r-a,l||!(u>0)){if(u/=l,l<0){if(u<s)return;u<f&&(f=u)}else if(l>0){if(u>f)return;u>s&&(s=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>f)return;u>s&&(s=u)}else if(l>0){if(u<s)return;u<f&&(f=u)}if(u=e-c,h||!(u>0)){if(u/=h,h<0){if(u<s)return;u<f&&(f=u)}else if(h>0){if(u>f)return;u>s&&(s=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>f)return;u>s&&(s=u)}else if(h>0){if(u<s)return;u<f&&(f=u)}return s>0&&(t[0]=a+s*l,t[1]=c+s*h),f<1&&(n[0]=a+f*l,n[1]=c+f*h),!0}}}}},ht=1e9,pt=-ht;function vt(t,n,r,e){function i(i,o){return t<=i&&i<=r&&n<=o&&o<=e}function o(i,o,a,c){var f=0,l=0;if(null==i||(f=u(i,a))!==(l=u(o,a))||s(i,o)<0^a>0)do{c.point(0===f||3===f?t:r,f>1?e:n)}while((f=(f+a+4)%4)!==l);else c.point(o[0],o[1])}function u(e,i){return d(e[0]-t)<c?i>0?0:3:d(e[0]-r)<c?i>0?2:1:d(e[1]-n)<c?i>0?1:0:i>0?3:2}function a(t,n){return s(t.x,n.x)}function s(t,n){var r=u(t,1),e=u(n,1);return r!==e?r-e:0===r?n[1]-t[1]:1===r?t[0]-n[0]:2===r?t[1]-n[1]:n[0]-t[0]}return function(u){var c,s,f,l,h,p,v,d,g,m,y,w=u,x=W(),b={point:_,lineStart:function(){b.point=S,s&&s.push(f=[]);m=!0,g=!1,v=d=NaN},lineEnd:function(){c&&(S(l,h),p&&g&&x.rejoin(),c.push(x.result()));b.point=_,g&&w.lineEnd()},polygonStart:function(){w=x,c=[],s=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,r=0,i=s.length;r<i;++r)for(var o,u,a=s[r],c=1,f=a.length,l=a[0],h=l[0],p=l[1];c<f;++c)o=h,u=p,l=a[c],h=l[0],p=l[1],u<=e?p>e&&(h-o)*(e-u)>(p-u)*(t-o)&&++n:p<=e&&(h-o)*(e-u)<(p-u)*(t-o)&&--n;return n}(),r=y&&n,i=(c=ot(c)).length;(r||i)&&(u.polygonStart(),r&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&J(c,a,n,o,u),u.polygonEnd());w=u,c=s=f=null}};function _(t,n){i(t,n)&&w.point(t,n)}function S(o,u){var a=i(o,u);if(s&&f.push([o,u]),m)l=o,h=u,p=a,m=!1,a&&(w.lineStart(),w.point(o,u));else if(a&&g)w.point(o,u);else{var c=[v=Math.max(pt,Math.min(ht,v)),d=Math.max(pt,Math.min(ht,d))],x=[o=Math.max(pt,Math.min(ht,o)),u=Math.max(pt,Math.min(ht,u))];lt(c,x,t,n,r,e)?(g||(w.lineStart(),w.point(c[0],c[1])),w.point(x[0],x[1]),a||w.lineEnd(),y=!1):a&&(w.lineStart(),w.point(o,u),y=!1)}v=o,d=u,g=a}return b}}i();var dt,gt,mt,yt,wt=function(t){return t},xt=i(),bt=i(),_t={point:C,lineStart:C,lineEnd:C,polygonStart:function(){_t.lineStart=St,_t.lineEnd=Ct},polygonEnd:function(){_t.lineStart=_t.lineEnd=_t.point=C,xt.add(d(bt)),bt.reset()},result:function(){var t=xt/2;return xt.reset(),t}};function St(){_t.point=Mt}function Mt(t,n){_t.point=Et,dt=mt=t,gt=yt=n}function Et(t,n){bt.add(yt*t-mt*n),mt=t,yt=n}function Ct(){Et(dt,gt)}var Nt=_t,At=1/0,Tt=At,kt=-At,Pt=kt;var Ot,Ut,Dt,jt,Lt={point:function(t,n){t<At&&(At=t);t>kt&&(kt=t);n<Tt&&(Tt=n);n>Pt&&(Pt=n)},lineStart:C,lineEnd:C,polygonStart:C,polygonEnd:C,result:function(){var t=[[At,Tt],[kt,Pt]];return kt=Pt=-(Tt=At=1/0),t}},Ft=0,Rt=0,It=0,Ht=0,Vt=0,Yt=0,zt=0,qt=0,Bt=0,Xt={point:$t,lineStart:Wt,lineEnd:Jt,polygonStart:function(){Xt.lineStart=Qt,Xt.lineEnd=Kt},polygonEnd:function(){Xt.point=$t,Xt.lineStart=Wt,Xt.lineEnd=Jt},result:function(){var t=Bt?[zt/Bt,qt/Bt]:Yt?[Ht/Yt,Vt/Yt]:It?[Ft/It,Rt/It]:[NaN,NaN];return Ft=Rt=It=Ht=Vt=Yt=zt=qt=Bt=0,t}};function $t(t,n){Ft+=t,Rt+=n,++It}function Wt(){Xt.point=Gt}function Gt(t,n){Xt.point=Zt,$t(Dt=t,jt=n)}function Zt(t,n){var r=t-Dt,e=n-jt,i=_(r*r+e*e);Ht+=i*(Dt+t)/2,Vt+=i*(jt+n)/2,Yt+=i,$t(Dt=t,jt=n)}function Jt(){Xt.point=$t}function Qt(){Xt.point=tn}function Kt(){nn(Ot,Ut)}function tn(t,n){Xt.point=nn,$t(Ot=Dt=t,Ut=jt=n)}function nn(t,n){var r=t-Dt,e=n-jt,i=_(r*r+e*e);Ht+=i*(Dt+t)/2,Vt+=i*(jt+n)/2,Yt+=i,zt+=(i=jt*t-Dt*n)*(Dt+t),qt+=i*(jt+n),Bt+=3*i,$t(Dt=t,jt=n)}var rn=Xt;function en(t){this._context=t}en.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,h)}},result:C};var on,un,an,cn,sn,fn=i(),ln={point:C,lineStart:function(){ln.point=hn},lineEnd:function(){on&&pn(un,an),ln.point=C},polygonStart:function(){on=!0},polygonEnd:function(){on=null},result:function(){var t=+fn;return fn.reset(),t}};function hn(t,n){ln.point=pn,un=cn=t,an=sn=n}function pn(t,n){cn-=t,sn-=n,fn.add(_(cn*cn+sn*sn)),cn=t,sn=n}var vn=ln;function dn(){this._string=[]}function gn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}dn.prototype={_radius:4.5,_circle:gn(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=gn(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var mn=function(t,n){var r,e,i=4.5;function o(t){return t&&("function"==typeof i&&e.pointRadius(+i.apply(this,arguments)),O(t,r(e))),e.result()}return o.area=function(t){return O(t,r(Nt)),Nt.result()},o.measure=function(t){return O(t,r(vn)),vn.result()},o.bounds=function(t){return O(t,r(Lt)),Lt.result()},o.centroid=function(t){return O(t,r(rn)),rn.result()},o.projection=function(n){return arguments.length?(r=null==n?(t=null,wt):(t=n).stream,o):t},o.context=function(t){return arguments.length?(e=null==t?(n=null,new dn):new en(n=t),"function"!=typeof i&&e.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(e.pointRadius(+t),+t),o):i},o.projection(t).context(n)};function yn(t){return function(n){var r=new wn;for(var e in t)r[e]=t[e];return r.stream=n,r}}function wn(){}function xn(t,n,r){var e=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=e&&t.clipExtent(null),O(r,t.stream(Lt)),n(Lt.result()),null!=e&&t.clipExtent(e),t}function bn(t,n,r){return xn(t,function(r){var e=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(e/(r[1][0]-r[0][0]),i/(r[1][1]-r[0][1])),u=+n[0][0]+(e-o*(r[1][0]+r[0][0]))/2,a=+n[0][1]+(i-o*(r[1][1]+r[0][1]))/2;t.scale(150*o).translate([u,a])},r)}function _n(t,n,r){return bn(t,[[0,0],n],r)}function Sn(t,n,r){return xn(t,function(r){var e=+n,i=e/(r[1][0]-r[0][0]),o=(e-i*(r[1][0]+r[0][0]))/2,u=-i*r[0][1];t.scale(150*i).translate([o,u])},r)}function Mn(t,n,r){return xn(t,function(r){var e=+n,i=e/(r[1][1]-r[0][1]),o=-i*r[0][0],u=(e-i*(r[1][1]+r[0][1]))/2;t.scale(150*i).translate([o,u])},r)}wn.prototype={constructor:wn,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var En=16,Cn=y(30*v),Nn=function(t,n){return+n?function(t,n){function r(e,i,o,u,a,s,f,l,h,p,v,g,y,w){var x=f-e,b=l-i,S=x*x+b*b;if(S>4*n&&y--){var M=u+p,C=a+v,N=s+g,A=_(M*M+C*C+N*N),T=E(N/=A),k=d(d(N)-1)<c||d(o-h)<c?(o+h)/2:m(C,M),P=t(k,T),O=P[0],U=P[1],D=O-e,j=U-i,L=b*D-x*j;(L*L/S>n||d((x*D+b*j)/S-.5)>.3||u*p+a*v+s*g<Cn)&&(r(e,i,o,u,a,s,O,U,k,M/=A,C/=A,N,y,w),w.point(O,U),r(O,U,k,M,C,N,f,l,h,p,v,g,y,w))}}return function(n){var e,i,o,u,a,c,s,f,l,h,p,v,d={point:g,lineStart:m,lineEnd:w,polygonStart:function(){n.polygonStart(),d.lineStart=x},polygonEnd:function(){n.polygonEnd(),d.lineStart=m}};function g(r,e){r=t(r,e),n.point(r[0],r[1])}function m(){f=NaN,d.point=y,n.lineStart()}function y(e,i){var o=D([e,i]),u=t(e,i);r(f,l,s,h,p,v,f=u[0],l=u[1],s=e,h=o[0],p=o[1],v=o[2],En,n),n.point(f,l)}function w(){d.point=g,n.lineEnd()}function x(){m(),d.point=b,d.lineEnd=_}function b(t,n){y(e=t,n),i=f,o=l,u=h,a=p,c=v,d.point=y}function _(){r(f,l,s,h,p,v,i,o,e,u,a,c,En,n),d.lineEnd=w,w()}return d}}(t,n):function(t){return yn({point:function(n,r){n=t(n,r),this.stream.point(n[0],n[1])}})}(t)};var An=yn({point:function(t,n){this.stream.point(t*v,n*v)}});function Tn(t,n,r,e){var i=y(e),o=b(e),u=i*t,a=o*t,c=i/t,s=o/t,f=(o*r-i*n)/t,l=(o*n+i*r)/t;function h(t,e){return[u*t-a*e+n,r-a*t-u*e]}return h.invert=function(t,n){return[c*t-s*n+f,l-s*t-c*n]},h}function kn(t){return Pn(function(){return t})()}function Pn(t){var n,r,e,i,o,u,a,c,s,f,l=150,h=480,d=250,g=0,m=0,y=0,w=0,x=0,b=0,S=null,M=st,E=null,C=wt,N=.5;function A(t){return c(t[0]*v,t[1]*v)}function T(t){return(t=c.invert(t[0],t[1]))&&[t[0]*p,t[1]*p]}function k(){var t=Tn(l,0,0,b).apply(null,n(g,m)),e=(b?Tn:function(t,n,r){function e(e,i){return[n+t*e,r-t*i]}return e.invert=function(e,i){return[(e-n)/t,(r-i)/t]},e})(l,h-t[0],d-t[1],b);return r=Y(y,w,x),a=H(n,e),c=H(r,a),u=Nn(a,N),P()}function P(){return s=f=null,A}return A.stream=function(t){return s&&f===t?s:s=An(function(t){return yn({point:function(n,r){var e=t(n,r);return this.stream.point(e[0],e[1])}})}(r)(M(u(C(f=t)))))},A.preclip=function(t){return arguments.length?(M=t,S=void 0,P()):M},A.postclip=function(t){return arguments.length?(C=t,E=e=i=o=null,P()):C},A.clipAngle=function(t){return arguments.length?(M=+t?ft(S=t*v):(S=null,st),P()):S*p},A.clipExtent=function(t){return arguments.length?(C=null==t?(E=e=i=o=null,wt):vt(E=+t[0][0],e=+t[0][1],i=+t[1][0],o=+t[1][1]),P()):null==E?null:[[E,e],[i,o]]},A.scale=function(t){return arguments.length?(l=+t,k()):l},A.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],k()):[h,d]},A.center=function(t){return arguments.length?(g=t[0]%360*v,m=t[1]%360*v,k()):[g*p,m*p]},A.rotate=function(t){return arguments.length?(y=t[0]%360*v,w=t[1]%360*v,x=t.length>2?t[2]%360*v:0,k()):[y*p,w*p,x*p]},A.angle=function(t){return arguments.length?(b=t%360*v,k()):b*p},A.precision=function(t){return arguments.length?(u=Nn(a,N=t*t),P()):_(N)},A.fitExtent=function(t,n){return bn(A,t,n)},A.fitSize=function(t,n){return _n(A,t,n)},A.fitWidth=function(t,n){return Sn(A,t,n)},A.fitHeight=function(t,n){return Mn(A,t,n)},function(){return n=t.apply(this,arguments),A.invert=n.invert&&T,k()}}function On(t){return function(n,r){var e=y(n),i=y(r),o=t(e*i);return[o*i*b(n),o*b(r)]}}function Un(t){return function(n,r){var e=_(n*n+r*r),i=t(e),o=b(i),u=y(i);return[m(n*o,e*u),E(e&&r*o/e)]}}var Dn=On(function(t){return _(2/(1+t))});Dn.invert=Un(function(t){return 2*E(t/2)});var jn=On(function(t){return(t=M(t))&&t/b(t)});jn.invert=Un(function(t){return t});function Ln(t,n){return[t,x(S((f+n)/2))]}Ln.invert=function(t,n){return[t,2*g(w(n))-f]};function Fn(t,n){return[t,n]}Fn.invert=Fn;var Rn=1.340264,In=-.081106,Hn=893e-6,Vn=.003796,Yn=_(3)/2;function zn(t,n){var r=E(Yn*b(n)),e=r*r,i=e*e*e;return[t*y(r)/(Yn*(Rn+3*In*e+i*(7*Hn+9*Vn*e))),r*(Rn+In*e+i*(Hn+Vn*e))]}zn.invert=function(t,n){for(var r,e=n,i=e*e,o=i*i*i,u=0;u<12&&(o=(i=(e-=r=(e*(Rn+In*i+o*(Hn+Vn*i))-n)/(Rn+3*In*i+o*(7*Hn+9*Vn*i)))*e)*i*i,!(d(r)<1e-12));++u);return[Yn*t*(Rn+3*In*i+o*(7*Hn+9*Vn*i))/y(e),E(b(e)/Yn)]};function qn(t,n){var r=y(n),e=y(t)*r;return[r*b(t)/e,b(n)/e]}qn.invert=Un(g);function Bn(t,n){var r=n*n,e=r*r;return[t*(.8707-.131979*r+e*(e*(.003971*r-.001529*e)-.013791)),n*(1.007226+r*(.015085+e*(.028874*r-.044475-.005916*e)))]}Bn.invert=function(t,n){var r,e=n,i=25;do{var o=e*e,u=o*o;e-=r=(e*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(d(r)>c&&--i>0);return[t/(.8707+(o=e*e)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),e]};function Xn(t,n){return[y(n)*b(t),b(n)]}Xn.invert=Un(E);var $n=function(){return kn(Xn).scale(249.5).clipAngle(90+c)};function Wn(t,n){var r=y(n),e=1+y(t)*r;return[r*b(t)/e,b(n)/e]}Wn.invert=Un(function(t){return 2*g(t)});function Gn(t,n){return[x(S((f+n)/2)),-t]}Gn.invert=function(t,n){return[-n,2*g(w(t))-f]};var Zn=Math.abs,Jn=Math.atan,Qn=Math.atan2,Kn=(Math.ceil,Math.cos),tr=Math.exp,nr=Math.floor,rr=Math.log,er=Math.max,ir=Math.min,or=Math.pow,ur=(Math.round,Math.sign||function(t){return t>0?1:t<0?-1:0}),ar=Math.sin,cr=Math.tan,sr=1e-6,fr=1e-12,lr=Math.PI,hr=lr/2,pr=lr/4,vr=Math.SQRT1_2,dr=_r(2),gr=_r(lr),mr=2*lr,yr=180/lr,wr=lr/180;function xr(t){return t>1?hr:t<-1?-hr:Math.asin(t)}function br(t){return t>1?0:t<-1?lr:Math.acos(t)}function _r(t){return t>0?Math.sqrt(t):0}function Sr(t){return(tr(t)-tr(-t))/2}function Mr(t){return(tr(t)+tr(-t))/2}function Er(t,n){var r=Kn(n),e=function(t){return t?t/Math.sin(t):1}(br(r*Kn(t/=2)));return[2*r*ar(t)*e,ar(n)*e]}Er.invert=function(t,n){if(!(t*t+4*n*n>lr*lr+sr)){var r=t,e=n,i=25;do{var o,u=ar(r),a=ar(r/2),c=Kn(r/2),s=ar(e),f=Kn(e),l=ar(2*e),h=s*s,p=f*f,v=a*a,d=1-p*c*c,g=d?br(f*c)*_r(o=1/d):o=0,m=2*g*f*a-t,y=g*s-n,w=o*(p*v+g*f*c*h),x=o*(.5*u*l-2*g*s*a),b=.25*o*(l*a-g*s*p*u),_=o*(h*c+g*v*f),S=x*b-_*w;if(!S)break;var M=(y*x-m*_)/S,E=(m*b-y*w)/S;r-=M,e-=E}while((Zn(M)>sr||Zn(E)>sr)&&--i>0);return[r,e]}};function Cr(t,n){var r=cr(n/2),e=_r(1-r*r),i=1+e*Kn(t/=2),o=ar(t)*e/i,u=r/i,a=o*o,c=u*u;return[4/3*o*(3+a-3*c),4/3*u*(3+3*a-c)]}Cr.invert=function(t,n){if(n*=3/8,!(t*=3/8)&&Zn(n)>1)return null;var r=1+t*t+n*n,e=_r((r-_r(r*r-4*n*n))/2),i=xr(e)/3,o=e?function(t){return rr(t+_r(t*t-1))}(Zn(n/e))/3:function(t){return rr(t+_r(t*t+1))}(Zn(t))/3,u=Kn(i),a=Mr(o),c=a*a-u*u;return[2*ur(t)*Qn(Sr(o)*u,.25-c),2*ur(n)*Qn(a*ar(i),.25+c)]};var Nr=_r(8),Ar=rr(1+dr);function Tr(t,n){var r=Zn(n);return r<pr?[t,rr(cr(pr+n/2))]:[t*Kn(r)*(2*dr-1/ar(r)),ur(n)*(2*dr*(r-pr)-rr(cr(r/2)))]}Tr.invert=function(t,n){if((e=Zn(n))<Ar)return[t,2*Jn(tr(n))-hr];var r,e,i=pr,o=25;do{var u=Kn(i/2),a=cr(i/2);i-=r=(Nr*(i-pr)-rr(a)-e)/(Nr-u*u/(2*a))}while(Zn(r)>fr&&--o>0);return[t/(Kn(i)*(Nr-1/ar(i))),ur(n)*i]};function kr(t,n){return[t*Kn(n)/Kn(n/=2),2*ar(n)]}kr.invert=function(t,n){var r=2*xr(n/2);return[t*Kn(r/2)/Kn(r),r]};function Pr(t,n){var r,e=t*ar(n),i=30;do{n-=r=(n+ar(n)-e)/(1+Kn(n))}while(Zn(r)>sr&&--i>0);return n/2}function Or(t,n,r){function e(e,i){return[t*e*Kn(i=Pr(r,i)),n*ar(i)]}return e.invert=function(e,i){return i=xr(i/n),[e/(t*Kn(i)),xr((2*i+ar(2*i))/r)]},e}var Ur=Or(dr/hr,dr,lr),Dr=2.00276,jr=1.11072;function Lr(t,n){var r=Pr(lr,n);return[Dr*t/(1/Kn(n)+jr/Kn(r)),(n+dr*ar(r))/Dr]}Lr.invert=function(t,n){var r,e,i=Dr*n,o=n<0?-pr:pr,u=25;do{e=i-dr*ar(o),o-=r=(ar(2*o)+2*o-lr*ar(e))/(2*Kn(2*o)+2+lr*Kn(e)*dr*Kn(o))}while(Zn(r)>sr&&--u>0);return e=i-dr*ar(o),[t*(1/Kn(e)+jr/Kn(o))/Dr,e]};function Fr(t,n){return[t*Kn(n),n]}Fr.invert=function(t,n){return[t/Kn(n),n]};Or(1,4/lr,lr);function Rr(t,n){var r=_r(1-ar(n));return[2/gr*t*r,gr*(1-r)]}Rr.invert=function(t,n){var r=(r=n/gr-1)*r;return[r>0?t*_r(lr/r)/2:0,xr(1-r)]};var Ir=_r(3);function Hr(t,n){return[Ir*t*(2*Kn(2*n/3)-1)/gr,Ir*gr*ar(n/3)]}Hr.invert=function(t,n){var r=3*xr(n/(Ir*gr));return[gr*t/(Ir*(2*Kn(2*r/3)-1)),r]};function Vr(t){var n=Kn(t);function r(t,r){return[t*n,ar(r)/n]}return r.invert=function(t,r){return[t/n,xr(r*n)]},r}function Yr(t,n){var r=_r(8/(3*lr));return[r*t*(1-Zn(n)/lr),r*n]}Yr.invert=function(t,n){var r=_r(8/(3*lr)),e=n/r;return[t/(r*(1-Zn(e)/lr)),e]};function zr(t,n){var r=_r(4-3*ar(Zn(n)));return[2/_r(6*lr)*t*r,ur(n)*_r(2*lr/3)*(2-r)]}zr.invert=function(t,n){var r=2-Zn(n)/_r(2*lr/3);return[t*_r(6*lr)/(2*r),ur(n)*xr((4-r*r)/3)]};function qr(t,n){var r=_r(lr*(4+lr));return[2/r*t*(1+_r(1-4*n*n/(lr*lr))),4/r*n]}qr.invert=function(t,n){var r=_r(lr*(4+lr))/2;return[t*r/(1+_r(1-n*n*(4+lr)/(4*lr))),n*r/2]};function Br(t,n){var r=(2+hr)*ar(n);n/=2;for(var e=0,i=1/0;e<10&&Zn(i)>sr;e++){var o=Kn(n);n-=i=(n+ar(n)*(o+2)-r)/(2*o*(1+o))}return[2/_r(lr*(4+lr))*t*(1+Kn(n)),2*_r(lr/(4+lr))*ar(n)]}Br.invert=function(t,n){var r=n*_r((4+lr)/lr)/2,e=xr(r),i=Kn(e);return[t/(2/_r(lr*(4+lr))*(1+i)),xr((e+r*(i+2))/(2+hr))]};function Xr(t,n){return[t*(1+Kn(n))/_r(2+lr),2*n/_r(2+lr)]}Xr.invert=function(t,n){var r=_r(2+lr),e=n*r/2;return[r*t/(1+Kn(e)),e]};function $r(t,n){for(var r=(1+hr)*ar(n),e=0,i=1/0;e<10&&Zn(i)>sr;e++)n-=i=(n+ar(n)-r)/(1+Kn(n));return r=_r(2+lr),[t*(1+Kn(n))/r,2*n/r]}$r.invert=function(t,n){var r=1+hr,e=_r(r/2);return[2*t*e/(1+Kn(n*=e)),xr((n+ar(n))/r)]};var Wr=3+2*dr;function Gr(t,n){var r=ar(t/=2),e=Kn(t),i=_r(Kn(n)),o=Kn(n/=2),u=ar(n)/(o+dr*e*i),a=_r(2/(1+u*u)),c=_r((dr*o+(e+r)*i)/(dr*o+(e-r)*i));return[Wr*(a*(c-1/c)-2*rr(c)),Wr*(a*u*(c+1/c)-2*Jn(u))]}Gr.invert=function(t,n){if(!(r=Cr.invert(t/1.2,1.065*n)))return null;var r,e=r[0],i=r[1],o=20;t/=Wr,n/=Wr;do{var u=e/2,a=i/2,c=ar(u),s=Kn(u),f=ar(a),l=Kn(a),h=Kn(i),p=_r(h),v=f/(l+dr*s*p),d=v*v,g=_r(2/(1+d)),m=(dr*l+(s+c)*p)/(dr*l+(s-c)*p),y=_r(m),w=y-1/y,x=y+1/y,b=g*w-2*rr(y)-t,_=g*v*x-2*Jn(v)-n,S=f&&vr*p*c*d/f,M=(dr*s*l+p)/(2*(l+dr*s*p)*(l+dr*s*p)*p),E=-.5*v*g*g*g,C=E*S,N=E*M,A=(A=2*l+dr*p*(s-c))*A*y,T=(dr*s*l*p+h)/A,k=-dr*c*f/(p*A),P=w*C-2*T/y+g*(T+T/m),O=w*N-2*k/y+g*(k+k/m),U=v*x*C-2*S/(1+d)+g*x*S+g*v*(T-T/m),D=v*x*N-2*M/(1+d)+g*x*M+g*v*(k-k/m),j=O*U-D*P;if(!j)break;var L=(_*O-b*D)/j,F=(b*U-_*P)/j;e-=L,i=er(-hr,ir(hr,i-F))}while((Zn(L)>sr||Zn(F)>sr)&&--o>0);return Zn(Zn(i)-hr)<sr?[0,i]:o&&[e,i]};var Zr=Kn(35*wr);function Jr(t,n){var r=cr(n/2);return[t*Zr*_r(1-r*r),(1+Zr)*r]}Jr.invert=function(t,n){var r=n/(1+Zr);return[t&&t/(Zr*_r(1-r*r)),2*Jn(r)]};function Qr(t,n){var r=n/2,e=Kn(r);return[2*t/gr*Kn(n)*e*e,gr*cr(r)]}Qr.invert=function(t,n){var r=Jn(n/gr),e=Kn(r),i=2*r;return[t*gr/2/(Kn(i)*e*e),i]};function Kr(t,n,r){var e,i,o,u=100;r=void 0===r?0:+r,n=+n;do{(i=t(r))===(o=t(r+sr))&&(o=i+sr),r-=e=-1*sr*(i-n)/(i-o)}while(u-- >0&&Zn(e)>sr);return u<0?NaN:r}var te=function(t,n,r,e,i,o,u,a){function c(c,s){if(!s)return[t*c/lr,0];var f=s*s,l=t+f*(n+f*(r+f*e)),h=s*(i-1+f*(o-a+f*u)),p=(l*l+h*h)/(2*h),v=c*xr(l/p)/lr;return[p*ar(v),s*(1+f*a)+p*(1-Kn(v))]}return arguments.length<8&&(a=0),c.invert=function(c,s){var f,l,h=lr*c/t,p=s,v=50;do{var d=p*p,g=t+d*(n+d*(r+d*e)),m=p*(i-1+d*(o-a+d*u)),y=g*g+m*m,w=2*m,x=y/w,b=x*x,_=xr(g/x)/lr,S=h*_,M=g*g,E=(2*n+d*(4*r+6*d*e))*p,C=i+d*(3*o+5*d*u),N=(2*(g*E+m*(C-1))*w-y*(2*(C-1)))/(w*w),A=Kn(S),T=ar(S),k=x*A,P=x*T,O=h/lr*(1/_r(1-M/b))*(E*x-g*N)/b,U=P-c,D=p*(1+d*a)+x-k-s,j=N*T+k*O,L=k*_,F=1+N-(N*A-P*O),R=P*_,I=j*R-F*L;if(!I)break;h-=f=(D*j-U*F)/I,p-=l=(U*R-D*L)/I}while((Zn(f)>sr||Zn(l)>sr)&&--v>0);return[h,p]},c};te(2.8284,-1.6988,.75432,-.18071,1.76003,-.38914,.042555),te(2.583819,-.835827,.170354,-.038094,1.543313,-.411435,.082742),te(5/6*lr,-.62636,-.0344,0,1.3493,-.05524,0,.045);function ne(t,n){var r=t*t,e=n*n;return[t*(1-.162388*e)*(.87-952426e-9*r*r),n*(1+e/12)]}ne.invert=function(t,n){var r,e=t,i=n,o=50;do{var u=i*i;i-=r=(i*(1+u/12)-n)/(1+u/4)}while(Zn(r)>sr&&--o>0);o=50,t/=1-.162388*u;do{var a=(a=e*e)*a;e-=r=(e*(.87-952426e-9*a)-t)/(.87-.00476213*a)}while(Zn(r)>sr&&--o>0);return[e,i]};te(2.6516,-.76534,.19123,-.047094,1.36289,-.13965,.031762);function re(t,n){var r=ur(t),e=ur(n),i=Kn(n),o=Kn(t)*i,u=ar(t)*i,a=ar(e*n);t=Zn(Qn(u,a)),n=xr(o),Zn(t-hr)>sr&&(t%=hr);var c=function(t,n){if(n===hr)return[0,0];var r,e,i=ar(n),o=i*i,u=o*o,a=1+u,c=1+3*u,s=1-u,f=xr(1/_r(a)),l=s+o*a*f,h=(1-i)/l,p=_r(h),v=h*a,d=_r(v),g=p*s;if(0===t)return[0,-(g+o*d)];var m,y=Kn(n),w=1/y,x=2*i*y,b=(-l*y-(-3*o+f*c)*x*(1-i))/(l*l),_=-w*x,S=-w*(o*a*b+h*c*x),M=-2*w*(s*(.5*b/p)-2*o*p*x),E=4*t/lr;if(t>.222*lr||n<lr/4&&t>.175*lr){if(r=(g+o*_r(v*(1+u)-g*g))/(1+u),t>lr/4)return[r,r];var C=r,N=.5*r;r=.5*(N+C),e=50;do{var A=_r(v-r*r),T=r*(M+_*A)+S*xr(r/d)-E;if(!T)break;T<0?N=r:C=r,r=.5*(N+C)}while(Zn(C-N)>sr&&--e>0)}else{r=sr,e=25;do{var k=r*r,P=_r(v-k),O=M+_*P,U=r*O+S*xr(r/d)-E,D=O+(S-_*k)/P;r-=m=P?U/D:0}while(Zn(m)>sr&&--e>0)}return[r,-g-o*_r(v-r*r)]}(t>lr/4?hr-t:t,n);return t>lr/4&&(a=c[0],c[0]=-c[1],c[1]=-a),c[0]*=r,c[1]*=-e,c}re.invert=function(t,n){Zn(t)>1&&(t=2*ur(t)-t),Zn(n)>1&&(n=2*ur(n)-n);var r=ur(t),e=ur(n),i=-r*t,o=-e*n,u=o/i<1,a=function(t,n){var r=0,e=1,i=.5,o=50;for(;;){var u=i*i,a=_r(i),c=xr(1/_r(1+u)),s=1-u+i*(1+u)*c,f=(1-a)/s,l=_r(f),h=f*(1+u),p=l*(1-u),v=h-t*t,d=_r(v),g=n+p+i*d;if(Zn(e-r)<fr||0==--o||0===g)break;g>0?r=i:e=i,i=.5*(r+e)}if(!o)return null;var m=xr(a),y=Kn(m),w=1/y,x=2*a*y,b=(-s*y-(-3*i+c*(1+3*u))*x*(1-a))/(s*s);return[lr/4*(t*(-2*w*(.5*b/l*(1-u)-2*i*l*x)+-w*x*d)+-w*(i*(1+u)*b+f*(1+3*u)*x)*xr(t/_r(h))),m]}(u?o:i,u?i:o),c=a[0],s=a[1],f=Kn(s);return u&&(c=-hr-c),[r*(Qn(ar(c)*f,-ar(s))+lr),e*xr(Kn(c)*f)]};function ee(t,n){var r,e,i,o,u,a;if(n<sr)return[(o=ar(t))-(r=n*(t-o*(e=Kn(t)))/4)*e,e+r*o,1-n*o*o/2,t-r];if(n>=1-sr)return r=(1-n)/4,i=1/(e=Mr(t)),[(o=((a=tr(2*(a=t)))-1)/(a+1))+r*((u=e*Sr(t))-t)/(e*e),i-r*o*i*(u-t),i+r*o*i*(u+t),2*Jn(tr(t))-hr+r*(u-t)/e];var c=[1,0,0,0,0,0,0,0,0],s=[_r(n),0,0,0,0,0,0,0,0],f=0;for(e=_r(1-n),u=1;Zn(s[f]/c[f])>sr&&f<8;)r=c[f++],s[f]=(r-e)/2,c[f]=(r+e)/2,e=_r(r*e),u*=2;i=u*c[f]*t;do{i=(xr(o=s[f]*ar(e=i)/c[f])+i)/2}while(--f);return[ar(i),o=Kn(i),o/Kn(i-e),i]}function ie(t,n){if(!n)return t;if(1===n)return rr(cr(t/2+pr));for(var r=1,e=_r(1-n),i=_r(n),o=0;Zn(i)>sr;o++){if(t%lr){var u=Jn(e*cr(t)/r);u<0&&(u+=lr),t+=u+~~(t/lr)*lr}else t+=t;i=(r+e)/2,e=_r(r*e),i=((r=i)-e)/2}return t/(or(2,o)*r)}function oe(t,n){var r=(dr-1)/(dr+1),e=_r(1-r*r),i=ie(hr,e*e),o=rr(cr(lr/4+Zn(n)/2)),u=tr(-1*o)/_r(r),a=function(t,n){var r=t*t,e=n+1,i=1-r-n*n;return[.5*((t>=0?hr:-hr)-Qn(i,2*t)),-.25*rr(i*i+4*r)+.5*rr(e*e+r)]}(u*Kn(-1*t),u*ar(-1*t)),c=function(t,n,r){var e=Zn(t),i=Sr(Zn(n));if(e){var o=1/ar(e),u=1/(cr(e)*cr(e)),a=-(u+r*(i*i*o*o)-1+r),c=(-a+_r(a*a-(r-1)*u*4))/2;return[ie(Jn(1/_r(c)),r)*ur(t),ie(Jn(_r((c/u-1)/r)),1-r)*ur(n)]}return[0,ie(Jn(i),1-r)*ur(n)]}(a[0],a[1],e*e);return[-c[1],(n>=0?1:-1)*(.5*i-c[0])]}oe.invert=function(t,n){var r,e,i,o,u,a,c=(dr-1)/(dr+1),s=_r(1-c*c),f=ie(hr,s*s),l=(e=-t,i=s*s,(r=.5*f-n)?(o=ee(r,i),e?(a=(u=ee(e,1-i))[1]*u[1]+i*o[0]*o[0]*u[0]*u[0],[[o[0]*u[2]/a,o[1]*o[2]*u[0]*u[1]/a],[o[1]*u[1]/a,-o[0]*o[2]*u[0]*u[2]/a],[o[2]*u[1]*u[2]/a,-i*o[0]*o[1]*u[0]/a]]):[[o[0],0],[o[1],0],[o[2],0]]):[[0,(u=ee(e,1-i))[0]/u[1]],[1/u[1],0],[u[2]/u[1],0]]),h=function(t,n){var r=n[0]*n[0]+n[1]*n[1];return[(t[0]*n[0]+t[1]*n[1])/r,(t[1]*n[0]-t[0]*n[1])/r]}(l[0],l[1]);return[Qn(h[1],h[0])/-1,2*Jn(tr(-.5*rr(c*h[0]*h[0]+c*h[1]*h[1])))-hr]};var ue=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN};var ae=function(t){var n;return 1===t.length&&(n=t,t=function(t,r){return ue(n(t),r)}),{left:function(n,r,e,i){for(null==e&&(e=0),null==i&&(i=n.length);e<i;){var o=e+i>>>1;t(n[o],r)<0?e=o+1:i=o}return e},right:function(n,r,e,i){for(null==e&&(e=0),null==i&&(i=n.length);e<i;){var o=e+i>>>1;t(n[o],r)>0?i=o:e=o+1}return e}}}(ue);ae.right,ae.left;var ce=Array.prototype;ce.slice,ce.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);Vr(0);var se=.7109889596207567,fe=.0528035274542;function le(t,n){return n>-se?((t=Ur(t,n))[1]+=fe,t):Fr(t,n)}le.invert=function(t,n){return n>-se?Ur.invert(t,n-fe):Fr.invert(t,n)};function he(t,n){return Zn(n)>se?((t=Ur(t,n))[1]-=n>0?fe:-fe,t):Fr(t,n)}he.invert=function(t,n){return Zn(n)>se?Ur.invert(t,n+(n>0?fe:-fe)):Fr.invert(t,n)};function pe(t,n){return[3/mr*t*_r(lr*lr/3-n*n),n]}pe.invert=function(t,n){return[mr/3*t/_r(lr*lr/3-n*n),n]};var ve=lr/dr;function de(t,n){return[t*(1+_r(Kn(n)))/2,n/(Kn(n/2)*Kn(t/6))]}de.invert=function(t,n){var r=Zn(t),e=Zn(n),i=sr,o=hr;e<ve?o*=e/ve:i+=6*br(ve/e);for(var u=0;u<25;u++){var a=ar(o),c=_r(Kn(o)),s=ar(o/2),f=Kn(o/2),l=ar(i/6),h=Kn(i/6),p=.5*i*(1+c)-r,v=o/(f*h)-e,d=c?-.25*i*a/c:0,g=.5*(1+c),m=(1+.5*o*s/f)/(f*h),y=o/f*(l/6)/(h*h),w=d*y-m*g,x=(p*y-v*g)/w,b=(v*d-p*m)/w;if(o-=x,i-=b,Zn(x)<sr&&Zn(b)<sr)break}return[t<0?-i:i,n<0?-o:o]};function ge(t,n){var r=t*t,e=n*n;return[t*(.975534+e*(-.0143059*r-.119161+-.0547009*e)),n*(1.00384+r*(.0802894+-.02855*e+199025e-9*r)+e*(.0998909+-.0491032*e))]}ge.invert=function(t,n){var r=ur(t)*lr,e=n/2,i=50;do{var o=r*r,u=e*e,a=r*e,c=r*(.975534+u*(-.0143059*o-.119161+-.0547009*u))-t,s=e*(1.00384+o*(.0802894+-.02855*u+199025e-9*o)+u*(.0998909+-.0491032*u))-n,f=.975534-u*(.119161+3*o*.0143059+.0547009*u),l=-a*(.238322+.2188036*u+.0286118*o),h=a*(.1605788+7961e-7*o+-.0571*u),p=1.00384+o*(.0802894+199025e-9*o)+u*(3*(.0998909-.02855*o)-.245516*u),v=l*h-p*f,d=(s*l-c*p)/v,g=(c*h-s*f)/v;r-=d,e-=g}while((Zn(d)>sr||Zn(g)>sr)&&--i>0);return i&&[r,e]};function me(t,n){return[ar(t)/Kn(n),cr(n)*Kn(t)]}me.invert=function(t,n){var r=t*t,e=n*n+1,i=r+e,o=t?vr*_r((i-_r(i*i-4*r))/r):1/_r(e);return[xr(t*o),ur(n)*br(o)]};function ye(t,n){return[t,1.25*rr(cr(pr+.4*n))]}ye.invert=function(t,n){return[t,2.5*Jn(tr(.8*n))-.625*lr]};var we=_r(6),xe=_r(7);function be(t,n){var r=xr(7*ar(n)/(3*we));return[we*t*(2*Kn(2*r/3)-1)/xe,9*ar(r/3)/xe]}be.invert=function(t,n){var r=3*xr(n*xe/9);return[t*xe/(we*(2*Kn(2*r/3)-1)),xr(3*ar(r)*we/7)]};function _e(t,n){for(var r,e=(1+vr)*ar(n),i=n,o=0;o<25&&(i-=r=(ar(i/2)+ar(i)-e)/(.5*Kn(i/2)+Kn(i)),!(Zn(r)<sr));o++);return[t*(1+2*Kn(i)/Kn(i/2))/(3*dr),2*_r(3)*ar(i/2)/_r(2+dr)]}_e.invert=function(t,n){var r=n*_r(2+dr)/(2*_r(3)),e=2*xr(r);return[3*dr*t/(1+2*Kn(e)/Kn(e/2)),xr((r+ar(e))/(1+vr))]};function Se(t,n){for(var r,e=_r(6/(4+lr)),i=(1+lr/4)*ar(n),o=n/2,u=0;u<25&&(o-=r=(o/2+ar(o)-i)/(.5+Kn(o)),!(Zn(r)<sr));u++);return[e*(.5+Kn(o))*t/1.5,e*o]}Se.invert=function(t,n){var r=_r(6/(4+lr)),e=n/r;return Zn(Zn(e)-hr)<sr&&(e=e<0?-hr:hr),[1.5*t/(r*(.5+Kn(e))),xr((e/2+ar(e))/(1+lr/4))]};function Me(t,n){var r=n*n,e=r*r,i=r*e;return[t*(.84719-.13063*r+i*i*(.05494*r-.04515-.02326*e+.00331*i)),n*(1.01183+e*e*(.01926*r-.02625-.00396*e))]}Me.invert=function(t,n){var r,e,i,o,u=n,a=25;do{u-=r=(u*(1.01183+(i=(e=u*u)*e)*i*(.01926*e-.02625-.00396*i))-n)/(1.01183+i*i*(.21186*e-.23625+-.05148*i))}while(Zn(r)>fr&&--a>0);return[t/(.84719-.13063*(e=u*u)+(o=e*(i=e*e))*o*(.05494*e-.04515-.02326*i+.00331*o)),u]};function Ee(t,n){return[t*(1+Kn(n))/2,2*(n-cr(n/2))]}Ee.invert=function(t,n){for(var r=n/2,e=0,i=1/0;e<10&&Zn(i)>sr;++e){var o=Kn(n/2);n-=i=(n-cr(n/2)-r)/(1-.5/(o*o))}return[2*t/(1+Kn(n)),n]};function Ce(t,n){var r=ar(n),e=Kn(n),i=ur(t);if(0===t||Zn(n)===hr)return[0,n];if(0===n)return[t,0];if(Zn(t)===hr)return[t*e,hr*r];var o=lr/(2*t)-2*t/lr,u=2*n/lr,a=(1-u*u)/(r-u),c=o*o,s=a*a,f=1+c/s,l=1+s/c,h=(o*r/a-o/2)/f,p=(s*r/c+a/2)/l,v=p*p-(s*r*r/c+a*r-1)/l;return[hr*(h+_r(h*h+e*e/f)*i),hr*(p+_r(v<0?0:v)*ur(-n*o)*i)]}Ce.invert=function(t,n){var r=(t/=hr)*t,e=r+(n/=hr)*n,i=lr*lr;return[t?(e-1+_r((1-e)*(1-e)+4*r))/(2*t)*hr:0,Kr(function(t){return e*(lr*ar(t)-2*t)*lr+4*t*t*(n-ar(t))+2*lr*t-i*n},0)]};var Ne=1.0148,Ae=.23185,Te=-.14499,ke=.02406,Pe=Ne,Oe=5*Ae,Ue=7*Te,De=9*ke;function je(t,n){var r=n*n;return[t,n*(Ne+r*r*(Ae+r*(Te+ke*r)))]}je.invert=function(t,n){n>1.790857183?n=1.790857183:n<-1.790857183&&(n=-1.790857183);var r,e=n;do{var i=e*e;e-=r=(e*(Ne+i*i*(Ae+i*(Te+ke*i)))-n)/(Pe+i*i*(Oe+i*(Ue+De*i)))}while(Zn(r)>sr);return[t,e]};function Le(t,n){if(Zn(n)<sr)return[t,0];var r=cr(n),e=t*ar(n);return[ar(e)/r,n+(1-Kn(e))/r]}Le.invert=function(t,n){if(Zn(n)<sr)return[t,0];var r,e=t*t+n*n,i=.5*n,o=10;do{var u=cr(i),a=1/Kn(i),c=e-2*n*i+i*i;i-=r=(u*c+2*(i-n))/(2+c*a*a+2*(i-n)*u)}while(Zn(r)>sr&&--o>0);return u=cr(i),[(Zn(n)<Zn(i+1/u)?xr(t*u):ur(t)*(br(Zn(t*u))+hr))/ar(i),i]};var Fe=[[0,90],[-90,0],[0,0],[90,0],[180,0],[0,-90]],Re=([[0,2,1],[0,3,2],[5,1,2],[5,2,3],[0,1,4],[0,4,3],[5,4,1],[5,3,4]].map(function(t){return t.map(function(t){return Fe[t]})}),2/_r(3));function Ie(t,n){var r=Rr(t,n);return[r[0]*Re,r[1]]}Ie.invert=function(t,n){return Rr.invert(t/Re,n)};var He=[[.9986,-.062],[1,0],[.9986,.062],[.9954,.124],[.99,.186],[.9822,.248],[.973,.31],[.96,.372],[.9427,.434],[.9216,.4958],[.8962,.5571],[.8679,.6176],[.835,.6769],[.7986,.7346],[.7597,.7903],[.7186,.8435],[.6732,.8936],[.6213,.9394],[.5722,.9761],[.5322,1]];function Ve(t,n){var r,e=ir(18,36*Zn(n)/lr),i=nr(e),o=e-i,u=(r=He[i])[0],a=r[1],c=(r=He[++i])[0],s=r[1],f=(r=He[ir(19,++i)])[0],l=r[1];return[t*(c+o*(f-u)/2+o*o*(f-2*c+u)/2),(n>0?hr:-hr)*(s+o*(l-a)/2+o*o*(l-2*s+a)/2)]}He.forEach(function(t){t[1]*=1.0144}),Ve.invert=function(t,n){var r=n/hr,e=90*r,i=ir(18,Zn(e/5)),o=er(0,nr(i));do{var u=He[o][1],a=He[o+1][1],c=He[ir(19,o+2)][1],s=c-u,f=c-2*a+u,l=2*(Zn(r)-a)/s,h=f/s,p=l*(1-h*l*(1-2*h*l));if(p>=0||1===o){e=(n>=0?5:-5)*(p+i);var v,d=50;do{p=(i=ir(18,Zn(e)/5))-(o=nr(i)),u=He[o][1],a=He[o+1][1],c=He[ir(19,o+2)][1],e-=(v=(n>=0?hr:-hr)*(a+p*(c-u)/2+p*p*(c-2*a+u)/2)-n)*yr}while(Zn(v)>fr&&--d>0);break}}while(--o>=0);var g=He[o][0],m=He[o+1][0],y=He[ir(19,o+2)][0];return[t/(m+p*(y-g)/2+p*p*(y-2*m+g)/2),e*wr]};function Ye(t,n){var r=cr(n/2),e=ar(pr*r);return[t*(.74482-.34588*e*e),1.70711*r]}Ye.invert=function(t,n){var r=n/1.70711,e=ar(pr*r);return[t/(.74482-.34588*e*e),2*Jn(r)]};function ze(t,n){if(Zn(n)<sr)return[t,0];var r=Zn(n/hr),e=xr(r);if(Zn(t)<sr||Zn(Zn(n)-hr)<sr)return[0,ur(n)*lr*cr(e/2)];var i=Kn(e),o=Zn(lr/t-t/lr)/2,u=o*o,a=i/(r+i-1),c=a*(2/r-1),s=c*c,f=s+u,l=a-s,h=u+a;return[ur(t)*lr*(o*l+_r(u*l*l-f*(a*a-s)))/f,ur(n)*lr*(c*h-o*_r((u+1)*f-h*h))/f]}ze.invert=function(t,n){if(Zn(n)<sr)return[t,0];if(Zn(t)<sr)return[0,hr*ar(2*Jn(n/lr))];var r=(t/=lr)*t,e=(n/=lr)*n,i=r+e,o=i*i,u=-Zn(n)*(1+i),a=u-2*e+r,c=-2*u+1+2*e+o,s=e/c+(2*a*a*a/(c*c*c)-9*u*a/(c*c))/27,f=(u-a*a/(3*c))/c,l=2*_r(-f/3),h=br(3*s/(f*l))/3;return[lr*(i-1+_r(1+2*(r-e)+o))/(2*t),ur(n)*lr*(-l*Kn(h+lr/3)-a/(3*c))]};function qe(t,n){if(Zn(n)<sr)return[t,0];var r=Zn(n/hr),e=xr(r);if(Zn(t)<sr||Zn(Zn(n)-hr)<sr)return[0,ur(n)*lr*cr(e/2)];var i=Kn(e),o=Zn(lr/t-t/lr)/2,u=o*o,a=i*(_r(1+u)-o*i)/(1+u*r*r);return[ur(t)*lr*a,ur(n)*lr*_r(1-a*(2*o+a))]}qe.invert=function(t,n){if(!t)return[0,hr*ar(2*Jn(n/lr))];var r=Zn(t/lr),e=(1-r*r-(n/=lr)*n)/(2*r),i=_r(e*e+1);return[ur(t)*lr*(i-e),ur(n)*hr*ar(2*Qn(_r((1-2*e*r)*(e+i)-r),_r(i+e+r)))]};function Be(t,n){if(Zn(n)<sr)return[t,0];var r=n/hr,e=xr(r);if(Zn(t)<sr||Zn(Zn(n)-hr)<sr)return[0,lr*cr(e/2)];var i=(lr/t-t/lr)/2,o=r/(1+Kn(e));return[lr*(ur(t)*_r(i*i+1-o*o)-i),lr*o]}Be.invert=function(t,n){if(!n)return[t,0];var r=n/lr,e=(lr*lr*(1-r*r)-t*t)/(2*lr*t);return[t?lr*(ur(t)*_r(e*e+1)-e):0,hr*ar(2*Jn(r))]};function Xe(t,n){if(!n)return[t,0];var r=Zn(n);if(!t||r===hr)return[0,n];var e=r/hr,i=e*e,o=(8*e-i*(i+2)-5)/(2*i*(e-1)),u=o*o,a=e*o,c=i+u+2*a,s=e+3*o,f=t/hr,l=f+1/f,h=ur(Zn(t)-hr)*_r(l*l-4),p=h*h,v=(h*(c+u-1)+2*_r(c*(i+u*p-1)+(1-i)*(i*(s*s+4*u)+12*a*u+4*u*u)))/(4*c+p);return[ur(t)*hr*v,ur(n)*hr*_r(1+h*Zn(v)-v*v)]}Xe.invert=function(t,n){var r;if(!t||!n)return[t,n];n/=lr;var e=ur(t)*t/hr,i=(e*e-1+4*n*n)/Zn(e),o=i*i,u=2*n,a=50;do{var c=u*u,s=(8*u-c*(c+2)-5)/(2*c*(u-1)),f=(3*u-c*u-10)/(2*c*u),l=s*s,h=u*s,p=u+s,v=p*p,d=u+3*s,g=-2*p*(4*h*l+(1-4*c+3*c*c)*(1+f)+l*(14*c-6-o+(8*c-8-2*o)*f)+h*(12*c-8+(10*c-10-o)*f)),m=_r(v*(c+l*o-1)+(1-c)*(c*(d*d+4*l)+l*(12*h+4*l)));u-=r=(i*(v+l-1)+2*m-e*(4*v+o))/(i*(2*s*f+2*p*(1+f))+g/m-8*p*(i*(-1+l+v)+2*m)*(1+f)/(o+4*v))}while(r>sr&&--a>0);return[ur(t)*(_r(i*i+4)+i)*lr/4,hr*u]};var $e=4*lr+3*_r(3),We=2*_r(2*lr*_r(3)/$e);Or(We*_r(3)/lr,We,$e/6);function Ge(t,n){return[t*_r(1-3*n*n/(lr*lr)),n]}Ge.invert=function(t,n){return[t/_r(1-3*n*n/(lr*lr)),n]};function Ze(t,n){var r=.90631*ar(n),e=_r(1-r*r),i=_r(2/(1+e*Kn(t/=3)));return[2.66723*e*i*ar(t),1.24104*r*i]}Ze.invert=function(t,n){var r=t/2.66723,e=n/1.24104,i=_r(r*r+e*e),o=2*xr(i/2);return[3*Qn(t*cr(o),2.66723*i),i&&xr(n*ar(o)/(1.24104*.90631*i))]};function Je(t,n){var r=Kn(n),e=Kn(t)*r,i=1-e,o=Kn(t=Qn(ar(t)*r,-ar(n))),u=ar(t);return[u*(r=_r(1-e*e))-o*i,-o*r-u*i]}Je.invert=function(t,n){var r=(t*t+n*n)/-2,e=_r(-r*(2+r)),i=n*r+t*e,o=t*r-n*e,u=_r(o*o+i*i);return[Qn(e*i,u*(1+r)),u?-xr(e*o/u):0]};function Qe(t,n){var r=Er(t,n);return[(r[0]+t/hr)/2,(r[1]+n)/2]}Qe.invert=function(t,n){var r=t,e=n,i=25;do{var o,u=Kn(e),a=ar(e),c=ar(2*e),s=a*a,f=u*u,l=ar(r),h=Kn(r/2),p=ar(r/2),v=p*p,d=1-f*h*h,g=d?br(u*h)*_r(o=1/d):o=0,m=.5*(2*g*u*p+r/hr)-t,y=.5*(g*a+e)-n,w=.5*o*(f*v+g*u*h*s)+.5/hr,x=o*(l*c/4-g*a*p),b=.125*o*(c*p-g*a*f*l),_=.5*o*(s*h+g*v*u)+.5,S=x*b-_*w,M=(y*x-m*_)/S,E=(m*b-y*w)/S;r-=M,e-=E}while((Zn(M)>sr||Zn(E)>sr)&&--i>0);return[r,e]};var Ke=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},ti=function(t){var n;return 1===t.length&&(n=t,t=function(t,r){return Ke(n(t),r)}),{left:function(n,r,e,i){for(null==e&&(e=0),null==i&&(i=n.length);e<i;){var o=e+i>>>1;t(n[o],r)<0?e=o+1:i=o}return e},right:function(n,r,e,i){for(null==e&&(e=0),null==i&&(i=n.length);e<i;){var o=e+i>>>1;t(n[o],r)>0?i=o:e=o+1}return e}}};var ni=ti(Ke),ri=ni.right,ei=(ni.left,ri);var ii=Array.prototype,oi=(ii.slice,ii.map,Math.sqrt(50)),ui=Math.sqrt(10),ai=Math.sqrt(2),ci=function(t,n,r){var e,i,o,u,a=-1;if(r=+r,(t=+t)===(n=+n)&&r>0)return[t];if((e=n<t)&&(i=t,t=n,n=i),0===(u=si(t,n,r))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return e&&o.reverse(),o};function si(t,n,r){var e=(n-t)/Math.max(0,r),i=Math.floor(Math.log(e)/Math.LN10),o=e/Math.pow(10,i);return i>=0?(o>=oi?10:o>=ui?5:o>=ai?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=oi?10:o>=ui?5:o>=ai?2:1)}function fi(t,n,r){var e=Math.abs(n-t)/Math.max(0,r),i=Math.pow(10,Math.floor(Math.log(e)/Math.LN10)),o=e/i;return o>=oi?i*=10:o>=ui?i*=5:o>=ai&&(i*=2),n<t?-i:i}function li(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}Symbol("implicit");var hi=function(t,n,r){t.prototype=n.prototype=r,r.constructor=t};function pi(t,n){var r=Object.create(t.prototype);for(var e in n)r[e]=n[e];return r}function vi(){}var di="\\s*([+-]?\\d+)\\s*",gi="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",mi="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",yi=/^#([0-9a-f]{3})$/,wi=/^#([0-9a-f]{6})$/,xi=new RegExp("^rgb\\("+[di,di,di]+"\\)$"),bi=new RegExp("^rgb\\("+[mi,mi,mi]+"\\)$"),_i=new RegExp("^rgba\\("+[di,di,di,gi]+"\\)$"),Si=new RegExp("^rgba\\("+[mi,mi,mi,gi]+"\\)$"),Mi=new RegExp("^hsl\\("+[gi,mi,mi]+"\\)$"),Ei=new RegExp("^hsla\\("+[gi,mi,mi,gi]+"\\)$"),Ci={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Ni(t){var n;return t=(t+"").trim().toLowerCase(),(n=yi.exec(t))?new Oi((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=wi.exec(t))?Ai(parseInt(n[1],16)):(n=xi.exec(t))?new Oi(n[1],n[2],n[3],1):(n=bi.exec(t))?new Oi(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=_i.exec(t))?Ti(n[1],n[2],n[3],n[4]):(n=Si.exec(t))?Ti(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Mi.exec(t))?Di(n[1],n[2]/100,n[3]/100,1):(n=Ei.exec(t))?Di(n[1],n[2]/100,n[3]/100,n[4]):Ci.hasOwnProperty(t)?Ai(Ci[t]):"transparent"===t?new Oi(NaN,NaN,NaN,0):null}function Ai(t){return new Oi(t>>16&255,t>>8&255,255&t,1)}function Ti(t,n,r,e){return e<=0&&(t=n=r=NaN),new Oi(t,n,r,e)}function ki(t){return t instanceof vi||(t=Ni(t)),t?new Oi((t=t.rgb()).r,t.g,t.b,t.opacity):new Oi}function Pi(t,n,r,e){return 1===arguments.length?ki(t):new Oi(t,n,r,null==e?1:e)}function Oi(t,n,r,e){this.r=+t,this.g=+n,this.b=+r,this.opacity=+e}function Ui(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Di(t,n,r,e){return e<=0?t=n=r=NaN:r<=0||r>=1?t=n=NaN:n<=0&&(t=NaN),new Li(t,n,r,e)}function ji(t,n,r,e){return 1===arguments.length?function(t){if(t instanceof Li)return new Li(t.h,t.s,t.l,t.opacity);if(t instanceof vi||(t=Ni(t)),!t)return new Li;if(t instanceof Li)return t;var n=(t=t.rgb()).r/255,r=t.g/255,e=t.b/255,i=Math.min(n,r,e),o=Math.max(n,r,e),u=NaN,a=o-i,c=(o+i)/2;return a?(u=n===o?(r-e)/a+6*(r<e):r===o?(e-n)/a+2:(n-r)/a+4,a/=c<.5?o+i:2-o-i,u*=60):a=c>0&&c<1?0:u,new Li(u,a,c,t.opacity)}(t):new Li(t,n,r,null==e?1:e)}function Li(t,n,r,e){this.h=+t,this.s=+n,this.l=+r,this.opacity=+e}function Fi(t,n,r){return 255*(t<60?n+(r-n)*t/60:t<180?r:t<240?n+(r-n)*(240-t)/60:n)}hi(vi,Ni,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),hi(Oi,Pi,pi(vi,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Oi(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Oi(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Ui(this.r)+Ui(this.g)+Ui(this.b)},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),hi(Li,ji,pi(vi,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Li(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Li(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,r=this.l,e=r+(r<.5?r:1-r)*n,i=2*r-e;return new Oi(Fi(t>=240?t-240:t+120,i,e),Fi(t,i,e),Fi(t<120?t+240:t-120,i,e),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Ri=Math.PI/180,Ii=180/Math.PI,Hi=.96422,Vi=1,Yi=.82521,zi=4/29,qi=6/29,Bi=3*qi*qi,Xi=qi*qi*qi;function $i(t){if(t instanceof Gi)return new Gi(t.l,t.a,t.b,t.opacity);if(t instanceof ro){if(isNaN(t.h))return new Gi(t.l,0,0,t.opacity);var n=t.h*Ri;return new Gi(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof Oi||(t=ki(t));var r,e,i=Ki(t.r),o=Ki(t.g),u=Ki(t.b),a=Zi((.2225045*i+.7168786*o+.0606169*u)/Vi);return i===o&&o===u?r=e=a:(r=Zi((.4360747*i+.3850649*o+.1430804*u)/Hi),e=Zi((.0139322*i+.0971045*o+.7141733*u)/Yi)),new Gi(116*a-16,500*(r-a),200*(a-e),t.opacity)}function Wi(t,n,r,e){return 1===arguments.length?$i(t):new Gi(t,n,r,null==e?1:e)}function Gi(t,n,r,e){this.l=+t,this.a=+n,this.b=+r,this.opacity=+e}function Zi(t){return t>Xi?Math.pow(t,1/3):t/Bi+zi}function Ji(t){return t>qi?t*t*t:Bi*(t-zi)}function Qi(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function Ki(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function to(t){if(t instanceof ro)return new ro(t.h,t.c,t.l,t.opacity);if(t instanceof Gi||(t=$i(t)),0===t.a&&0===t.b)return new ro(NaN,0,t.l,t.opacity);var n=Math.atan2(t.b,t.a)*Ii;return new ro(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function no(t,n,r,e){return 1===arguments.length?to(t):new ro(t,n,r,null==e?1:e)}function ro(t,n,r,e){this.h=+t,this.c=+n,this.l=+r,this.opacity=+e}hi(Gi,Wi,pi(vi,{brighter:function(t){return new Gi(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new Gi(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,r=isNaN(this.b)?t:t-this.b/200;return new Oi(Qi(3.1338561*(n=Hi*Ji(n))-1.6168667*(t=Vi*Ji(t))-.4906146*(r=Yi*Ji(r))),Qi(-.9787684*n+1.9161415*t+.033454*r),Qi(.0719453*n-.2289914*t+1.4052427*r),this.opacity)}})),hi(ro,no,pi(vi,{brighter:function(t){return new ro(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new ro(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return $i(this).rgb()}}));var eo=-.29227,io=-.90649,oo=1.97294,uo=oo*io,ao=1.78277*oo,co=1.78277*eo- -.14861*io;function so(t,n,r,e){return 1===arguments.length?function(t){if(t instanceof fo)return new fo(t.h,t.s,t.l,t.opacity);t instanceof Oi||(t=ki(t));var n=t.r/255,r=t.g/255,e=t.b/255,i=(co*e+uo*n-ao*r)/(co+uo-ao),o=e-i,u=(oo*(r-i)-eo*o)/io,a=Math.sqrt(u*u+o*o)/(oo*i*(1-i)),c=a?Math.atan2(u,o)*Ii-120:NaN;return new fo(c<0?c+360:c,a,i,t.opacity)}(t):new fo(t,n,r,null==e?1:e)}function fo(t,n,r,e){this.h=+t,this.s=+n,this.l=+r,this.opacity=+e}function lo(t,n,r,e,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*r+(1+3*t+3*o-3*u)*e+u*i)/6}hi(fo,so,pi(vi,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new fo(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new fo(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Ri,n=+this.l,r=isNaN(this.s)?0:this.s*n*(1-n),e=Math.cos(t),i=Math.sin(t);return new Oi(255*(n+r*(-.14861*e+1.78277*i)),255*(n+r*(eo*e+io*i)),255*(n+r*(oo*e)),this.opacity)}}));var ho=function(t){return function(){return t}};function po(t,n){return function(r){return t+r*n}}function vo(t,n){var r=n-t;return r?po(t,r>180||r<-180?r-360*Math.round(r/360):r):ho(isNaN(t)?n:t)}function go(t){return 1==(t=+t)?mo:function(n,r){return r-n?function(t,n,r){return t=Math.pow(t,r),n=Math.pow(n,r)-t,r=1/r,function(e){return Math.pow(t+e*n,r)}}(n,r,t):ho(isNaN(n)?r:n)}}function mo(t,n){var r=n-t;return r?po(t,r):ho(isNaN(t)?n:t)}var yo=function t(n){var r=go(n);function e(t,n){var e=r((t=Pi(t)).r,(n=Pi(n)).r),i=r(t.g,n.g),o=r(t.b,n.b),u=mo(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=i(n),t.b=o(n),t.opacity=u(n),t+""}}return e.gamma=t,e}(1);function wo(t){return function(n){var r,e,i=n.length,o=new Array(i),u=new Array(i),a=new Array(i);for(r=0;r<i;++r)e=Pi(n[r]),o[r]=e.r||0,u[r]=e.g||0,a[r]=e.b||0;return o=t(o),u=t(u),a=t(a),e.opacity=1,function(t){return e.r=o(t),e.g=u(t),e.b=a(t),e+""}}}wo(function(t){var n=t.length-1;return function(r){var e=r<=0?r=0:r>=1?(r=1,n-1):Math.floor(r*n),i=t[e],o=t[e+1],u=e>0?t[e-1]:2*i-o,a=e<n-1?t[e+2]:2*o-i;return lo((r-e/n)*n,u,i,o,a)}}),wo(function(t){var n=t.length;return function(r){var e=Math.floor(((r%=1)<0?++r:r)*n),i=t[(e+n-1)%n],o=t[e%n],u=t[(e+1)%n],a=t[(e+2)%n];return lo((r-e/n)*n,i,o,u,a)}});var xo=function(t,n){return n-=t=+t,function(r){return t+n*r}},bo=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,_o=new RegExp(bo.source,"g");var So,Mo,Eo,Co,No=function(t,n){var r,e,i,o=bo.lastIndex=_o.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(r=bo.exec(t))&&(e=_o.exec(n));)(i=e.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(r=r[0])===(e=e[0])?a[u]?a[u]+=e:a[++u]=e:(a[++u]=null,c.push({i:u,x:xo(r,e)})),o=_o.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var r,e=0;e<n;++e)a[(r=c[e]).i]=r.x(t);return a.join("")})},Ao=function(t,n){var r,e=typeof n;return null==n||"boolean"===e?ho(n):("number"===e?xo:"string"===e?(r=Ni(n))?(n=r,yo):No:n instanceof Ni?yo:n instanceof Date?function(t,n){var r=new Date;return n-=t=+t,function(e){return r.setTime(t+n*e),r}}:Array.isArray(n)?function(t,n){var r,e=n?n.length:0,i=t?Math.min(e,t.length):0,o=new Array(i),u=new Array(e);for(r=0;r<i;++r)o[r]=Ao(t[r],n[r]);for(;r<e;++r)u[r]=n[r];return function(t){for(r=0;r<i;++r)u[r]=o[r](t);return u}}:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?function(t,n){var r,e={},i={};for(r in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)r in t?e[r]=Ao(t[r],n[r]):i[r]=n[r];return function(t){for(r in e)i[r]=e[r](t);return i}}:xo)(t,n)},To=function(t,n){return n-=t=+t,function(r){return Math.round(t+n*r)}},ko=180/Math.PI,Po={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Oo=function(t,n,r,e,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*r+n*e)&&(r-=t*c,e-=n*c),(a=Math.sqrt(r*r+e*e))&&(r/=a,e/=a,c/=a),t*e<n*r&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ko,skewX:Math.atan(c)*ko,scaleX:u,scaleY:a}};function Uo(t,n,r,e){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,e,i,o,u,a){if(t!==i||e!==o){var c=u.push("translate(",null,n,null,r);a.push({i:c-4,x:xo(t,i)},{i:c-2,x:xo(e,o)})}else(i||o)&&u.push("translate("+i+n+o+r)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,r,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:r.push(i(r)+"rotate(",null,e)-2,x:xo(t,n)})):n&&r.push(i(r)+"rotate("+n+e)}(o.rotate,u.rotate,a,c),function(t,n,r,o){t!==n?o.push({i:r.push(i(r)+"skewX(",null,e)-2,x:xo(t,n)}):n&&r.push(i(r)+"skewX("+n+e)}(o.skewX,u.skewX,a,c),function(t,n,r,e,o,u){if(t!==r||n!==e){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:xo(t,r)},{i:a-2,x:xo(n,e)})}else 1===r&&1===e||o.push(i(o)+"scale("+r+","+e+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,r=-1,e=c.length;++r<e;)a[(n=c[r]).i]=n.x(t);return a.join("")}}}var Do=Uo(function(t){return"none"===t?Po:(So||(So=document.createElement("DIV"),Mo=document.documentElement,Eo=document.defaultView),So.style.transform=t,t=Eo.getComputedStyle(Mo.appendChild(So),null).getPropertyValue("transform"),Mo.removeChild(So),t=t.slice(7,-1).split(","),Oo(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),jo=Uo(function(t){return null==t?Po:(Co||(Co=document.createElementNS("http://www.w3.org/2000/svg","g")),Co.setAttribute("transform",t),(t=Co.transform.baseVal.consolidate())?(t=t.matrix,Oo(t.a,t.b,t.c,t.d,t.e,t.f)):Po)},", ",")",")");Math.SQRT2;function Lo(t){return function(n,r){var e=t((n=ji(n)).h,(r=ji(r)).h),i=mo(n.s,r.s),o=mo(n.l,r.l),u=mo(n.opacity,r.opacity);return function(t){return n.h=e(t),n.s=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Lo(vo),Lo(mo);function Fo(t){return function(n,r){var e=t((n=no(n)).h,(r=no(r)).h),i=mo(n.c,r.c),o=mo(n.l,r.l),u=mo(n.opacity,r.opacity);return function(t){return n.h=e(t),n.c=i(t),n.l=o(t),n.opacity=u(t),n+""}}}Fo(vo),Fo(mo);function Ro(t){return function n(r){function e(n,e){var i=t((n=so(n)).h,(e=so(e)).h),o=mo(n.s,e.s),u=mo(n.l,e.l),a=mo(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(Math.pow(t,r)),n.opacity=a(t),n+""}}return r=+r,e.gamma=n,e}(1)}Ro(vo),Ro(mo);var Io=function(t){return function(){return t}},Ho=function(t){return+t},Vo=[0,1];function Yo(t){return t}function zo(t,n){return(n-=t=+t)?function(r){return(r-t)/n}:Io(isNaN(n)?NaN:.5)}function qo(t){var n,r=t[0],e=t[t.length-1];return r>e&&(n=r,r=e,e=n),function(t){return Math.max(r,Math.min(e,t))}}function Bo(t,n,r){var e=t[0],i=t[1],o=n[0],u=n[1];return i<e?(e=zo(i,e),o=r(u,o)):(e=zo(e,i),o=r(o,u)),function(t){return o(e(t))}}function Xo(t,n,r){var e=Math.min(t.length,n.length)-1,i=new Array(e),o=new Array(e),u=-1;for(t[e]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<e;)i[u]=zo(t[u],t[u+1]),o[u]=r(n[u],n[u+1]);return function(n){var r=ei(t,n,1,e)-1;return o[r](i[r](n))}}function $o(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Wo(){var t,n,r,e,i,o,u=Vo,a=Vo,c=Ao,s=Yo;function f(){return e=Math.min(u.length,a.length)>2?Xo:Bo,i=o=null,l}function l(n){return isNaN(n=+n)?r:(i||(i=e(u.map(t),a,c)))(t(s(n)))}return l.invert=function(r){return s(n((o||(o=e(a,u.map(t),xo)))(r)))},l.domain=function(t){return arguments.length?(u=Array.from(t,Ho),s===Yo||(s=qo(u)),f()):u.slice()},l.range=function(t){return arguments.length?(a=Array.from(t),f()):a.slice()},l.rangeRound=function(t){return a=Array.from(t),c=To,f()},l.clamp=function(t){return arguments.length?(s=t?qo(u):Yo,l):s!==Yo},l.interpolate=function(t){return arguments.length?(c=t,f()):c},l.unknown=function(t){return arguments.length?(r=t,l):r},function(r,e){return t=r,n=e,f()}}function Go(t,n){return Wo()(t,n)}var Zo=function(t,n){if((r=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var r,e=t.slice(0,r);return[e.length>1?e[0]+e.slice(2):e,+t.slice(r+1)]},Jo=function(t){return(t=Zo(Math.abs(t)))?t[1]:NaN},Qo=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function Ko(t){return new tu(t)}function tu(t){if(!(n=Qo.exec(t)))throw new Error("invalid format: "+t);var n;this.fill=n[1]||" ",this.align=n[2]||">",this.sign=n[3]||"-",this.symbol=n[4]||"",this.zero=!!n[5],this.width=n[6]&&+n[6],this.comma=!!n[7],this.precision=n[8]&&+n[8].slice(1),this.trim=!!n[9],this.type=n[10]||""}Ko.prototype=tu.prototype,tu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var nu,ru,eu,iu,ou=function(t){t:for(var n,r=t.length,e=1,i=-1;e<r;++e)switch(t[e]){case".":i=n=e;break;case"0":0===i&&(i=e),n=e;break;default:if(i>0){if(!+t[e])break t;i=0}}return i>0?t.slice(0,i)+t.slice(n+1):t},uu=function(t,n){var r=Zo(t,n);if(!r)return t+"";var e=r[0],i=r[1];return i<0?"0."+new Array(-i).join("0")+e:e.length>i+1?e.slice(0,i+1)+"."+e.slice(i+1):e+new Array(i-e.length+2).join("0")},au={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return uu(100*t,n)},r:uu,s:function(t,n){var r=Zo(t,n);if(!r)return t+"";var e=r[0],i=r[1],o=i-(nu=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=e.length;return o===u?e:o>u?e+new Array(o-u+1).join("0"):o>0?e.slice(0,o)+"."+e.slice(o):"0."+new Array(1-o).join("0")+Zo(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},cu=function(t){return t},su=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];ru=function(t){var n,r,e=t.grouping&&t.thousands?(n=t.grouping,r=t.thousands,function(t,e){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>e&&(a=Math.max(1,e-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>e));)a=n[u=(u+1)%n.length];return o.reverse().join(r)}):cu,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):cu,a=t.percent||"%";function c(t){var n=(t=Ko(t)).fill,r=t.align,c=t.sign,s=t.symbol,f=t.zero,l=t.width,h=t.comma,p=t.precision,v=t.trim,d=t.type;"n"===d?(h=!0,d="g"):au[d]||(null==p&&(p=12),v=!0,d="g"),(f||"0"===n&&"="===r)&&(f=!0,n="0",r="=");var g="$"===s?i[0]:"#"===s&&/[boxX]/.test(d)?"0"+d.toLowerCase():"",m="$"===s?i[1]:/[%p]/.test(d)?a:"",y=au[d],w=/[defgprs%]/.test(d);function x(t){var i,a,s,x=g,b=m;if("c"===d)b=y(t)+b,t="";else{var _=(t=+t)<0;if(t=y(Math.abs(t),p),v&&(t=ou(t)),_&&0==+t&&(_=!1),x=(_?"("===c?c:"-":"-"===c||"("===c?"":c)+x,b=("s"===d?su[8+nu/3]:"")+b+(_&&"("===c?")":""),w)for(i=-1,a=t.length;++i<a;)if(48>(s=t.charCodeAt(i))||s>57){b=(46===s?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}h&&!f&&(t=e(t,1/0));var S=x.length+t.length+b.length,M=S<l?new Array(l-S+1).join(n):"";switch(h&&f&&(t=e(M+t,M.length?l-b.length:1/0),M=""),r){case"<":t=x+t+b+M;break;case"=":t=x+M+t+b;break;case"^":t=M.slice(0,S=M.length>>1)+x+t+b+M.slice(S);break;default:t=M+x+t+b}return u(t)}return p=null==p?6:/[gprs]/.test(d)?Math.max(1,Math.min(21,p)):Math.max(0,Math.min(20,p)),x.toString=function(){return t+""},x}return{format:c,formatPrefix:function(t,n){var r=c(((t=Ko(t)).type="f",t)),e=3*Math.max(-8,Math.min(8,Math.floor(Jo(n)/3))),i=Math.pow(10,-e),o=su[8+e/3];return function(t){return r(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),eu=ru.format,iu=ru.formatPrefix;var fu=function(t,n,r,e){var i,o=fi(t,n,r);switch((e=Ko(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(t),Math.abs(n));return null!=e.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Jo(n)/3)))-Jo(Math.abs(t)))}(o,u))||(e.precision=i),iu(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Jo(n)-Jo(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(e.precision=i-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(i=function(t){return Math.max(0,-Jo(Math.abs(t)))}(o))||(e.precision=i-2*("%"===e.type))}return eu(e)};function lu(t){var n=t.domain;return t.ticks=function(t){var r=n();return ci(r[0],r[r.length-1],null==t?10:t)},t.tickFormat=function(t,r){var e=n();return fu(e[0],e[e.length-1],null==t?10:t,r)},t.nice=function(r){null==r&&(r=10);var e,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(e=a,a=c,c=e,e=o,o=u,u=e),(e=si(a,c,r))>0?e=si(a=Math.floor(a/e)*e,c=Math.ceil(c/e)*e,r):e<0&&(e=si(a=Math.ceil(a*e)/e,c=Math.floor(c*e)/e,r)),e>0?(i[o]=Math.floor(a/e)*e,i[u]=Math.ceil(c/e)*e,n(i)):e<0&&(i[o]=Math.ceil(a*e)/e,i[u]=Math.floor(c*e)/e,n(i)),t},t}function hu(){var t=Go(Yo,Yo);return t.copy=function(){return $o(t,hu())},li.apply(t,arguments),lu(t)}var pu=new Date,vu=new Date;function du(t,n,r,e){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(r){return t(r=new Date(r-1)),n(r,1),t(r),r},i.round=function(t){var n=i(t),r=i.ceil(t);return t-n<r-t?n:r},i.offset=function(t,r){return n(t=new Date(+t),null==r?1:Math.floor(r)),t},i.range=function(r,e,o){var u,a=[];if(r=i.ceil(r),o=null==o?1:Math.floor(o),!(r<e&&o>0))return a;do{a.push(u=new Date(+r)),n(r,o),t(r)}while(u<r&&r<e);return a},i.filter=function(r){return du(function(n){if(n>=n)for(;t(n),!r(n);)n.setTime(n-1)},function(t,e){if(t>=t)if(e<0)for(;++e<=0;)for(;n(t,-1),!r(t););else for(;--e>=0;)for(;n(t,1),!r(t););})},r&&(i.count=function(n,e){return pu.setTime(+n),vu.setTime(+e),t(pu),t(vu),Math.floor(r(pu,vu))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(e?function(n){return e(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var gu=du(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});gu.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?du(function(n){n.setTime(Math.floor(n/t)*t)},function(n,r){n.setTime(+n+r*t)},function(n,r){return(r-n)/t}):gu:null};gu.range;var mu=6e4,yu=6048e5,wu=du(function(t){t.setTime(t-t.getMilliseconds())},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),xu=(wu.range,du(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())},function(t,n){t.setTime(+t+n*mu)},function(t,n){return(n-t)/mu},function(t){return t.getMinutes()})),bu=(xu.range,du(function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-t.getMinutes()*mu)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()})),_u=(bu.range,du(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*mu)/864e5},function(t){return t.getDate()-1})),Su=_u;_u.range;function Mu(t){return du(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*mu)/yu})}var Eu=Mu(0),Cu=Mu(1),Nu=Mu(2),Au=Mu(3),Tu=Mu(4),ku=Mu(5),Pu=Mu(6),Ou=(Eu.range,Cu.range,Nu.range,Au.range,Tu.range,ku.range,Pu.range,du(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),Uu=(Ou.range,du(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()}));Uu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?du(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,r){n.setFullYear(n.getFullYear()+r*t)}):null};var Du=Uu,ju=(Uu.range,du(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*mu)},function(t,n){return(n-t)/mu},function(t){return t.getUTCMinutes()})),Lu=(ju.range,du(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()})),Fu=(Lu.range,du(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1})),Ru=Fu;Fu.range;function Iu(t){return du(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/yu})}var Hu=Iu(0),Vu=Iu(1),Yu=Iu(2),zu=Iu(3),qu=Iu(4),Bu=Iu(5),Xu=Iu(6),$u=(Hu.range,Vu.range,Yu.range,zu.range,qu.range,Bu.range,Xu.range,du(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()})),Wu=($u.range,du(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Wu.every=function(t){return isFinite(t=Math.floor(t))&&t>0?du(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,r){n.setUTCFullYear(n.getUTCFullYear()+r*t)}):null};var Gu=Wu;Wu.range;function Zu(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ju(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Qu(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}var Ku,ta,na,ra={"-":"",_:" ",0:"0"},ea=/^\s*\d+/,ia=/^%/,oa=/[\\^$*+?|[\]().{}]/g;function ua(t,n,r){var e=t<0?"-":"",i=(e?-t:t)+"",o=i.length;return e+(o<r?new Array(r-o+1).join(n)+i:i)}function aa(t){return t.replace(oa,"\\$&")}function ca(t){return new RegExp("^(?:"+t.map(aa).join("|")+")","i")}function sa(t){for(var n={},r=-1,e=t.length;++r<e;)n[t[r].toLowerCase()]=r;return n}function fa(t,n,r){var e=ea.exec(n.slice(r,r+1));return e?(t.w=+e[0],r+e[0].length):-1}function la(t,n,r){var e=ea.exec(n.slice(r,r+1));return e?(t.u=+e[0],r+e[0].length):-1}function ha(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.U=+e[0],r+e[0].length):-1}function pa(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.V=+e[0],r+e[0].length):-1}function va(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.W=+e[0],r+e[0].length):-1}function da(t,n,r){var e=ea.exec(n.slice(r,r+4));return e?(t.y=+e[0],r+e[0].length):-1}function ga(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.y=+e[0]+(+e[0]>68?1900:2e3),r+e[0].length):-1}function ma(t,n,r){var e=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(r,r+6));return e?(t.Z=e[1]?0:-(e[2]+(e[3]||"00")),r+e[0].length):-1}function ya(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.m=e[0]-1,r+e[0].length):-1}function wa(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.d=+e[0],r+e[0].length):-1}function xa(t,n,r){var e=ea.exec(n.slice(r,r+3));return e?(t.m=0,t.d=+e[0],r+e[0].length):-1}function ba(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.H=+e[0],r+e[0].length):-1}function _a(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.M=+e[0],r+e[0].length):-1}function Sa(t,n,r){var e=ea.exec(n.slice(r,r+2));return e?(t.S=+e[0],r+e[0].length):-1}function Ma(t,n,r){var e=ea.exec(n.slice(r,r+3));return e?(t.L=+e[0],r+e[0].length):-1}function Ea(t,n,r){var e=ea.exec(n.slice(r,r+6));return e?(t.L=Math.floor(e[0]/1e3),r+e[0].length):-1}function Ca(t,n,r){var e=ia.exec(n.slice(r,r+1));return e?r+e[0].length:-1}function Na(t,n,r){var e=ea.exec(n.slice(r));return e?(t.Q=+e[0],r+e[0].length):-1}function Aa(t,n,r){var e=ea.exec(n.slice(r));return e?(t.Q=1e3*+e[0],r+e[0].length):-1}function Ta(t,n){return ua(t.getDate(),n,2)}function ka(t,n){return ua(t.getHours(),n,2)}function Pa(t,n){return ua(t.getHours()%12||12,n,2)}function Oa(t,n){return ua(1+Su.count(Du(t),t),n,3)}function Ua(t,n){return ua(t.getMilliseconds(),n,3)}function Da(t,n){return Ua(t,n)+"000"}function ja(t,n){return ua(t.getMonth()+1,n,2)}function La(t,n){return ua(t.getMinutes(),n,2)}function Fa(t,n){return ua(t.getSeconds(),n,2)}function Ra(t){var n=t.getDay();return 0===n?7:n}function Ia(t,n){return ua(Eu.count(Du(t),t),n,2)}function Ha(t,n){var r=t.getDay();return t=r>=4||0===r?Tu(t):Tu.ceil(t),ua(Tu.count(Du(t),t)+(4===Du(t).getDay()),n,2)}function Va(t){return t.getDay()}function Ya(t,n){return ua(Cu.count(Du(t),t),n,2)}function za(t,n){return ua(t.getFullYear()%100,n,2)}function qa(t,n){return ua(t.getFullYear()%1e4,n,4)}function Ba(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+ua(n/60|0,"0",2)+ua(n%60,"0",2)}function Xa(t,n){return ua(t.getUTCDate(),n,2)}function $a(t,n){return ua(t.getUTCHours(),n,2)}function Wa(t,n){return ua(t.getUTCHours()%12||12,n,2)}function Ga(t,n){return ua(1+Ru.count(Gu(t),t),n,3)}function Za(t,n){return ua(t.getUTCMilliseconds(),n,3)}function Ja(t,n){return Za(t,n)+"000"}function Qa(t,n){return ua(t.getUTCMonth()+1,n,2)}function Ka(t,n){return ua(t.getUTCMinutes(),n,2)}function tc(t,n){return ua(t.getUTCSeconds(),n,2)}function nc(t){var n=t.getUTCDay();return 0===n?7:n}function rc(t,n){return ua(Hu.count(Gu(t),t),n,2)}function ec(t,n){var r=t.getUTCDay();return t=r>=4||0===r?qu(t):qu.ceil(t),ua(qu.count(Gu(t),t)+(4===Gu(t).getUTCDay()),n,2)}function ic(t){return t.getUTCDay()}function oc(t,n){return ua(Vu.count(Gu(t),t),n,2)}function uc(t,n){return ua(t.getUTCFullYear()%100,n,2)}function ac(t,n){return ua(t.getUTCFullYear()%1e4,n,4)}function cc(){return"+0000"}function sc(){return"%"}function fc(t){return+t}function lc(t){return Math.floor(+t/1e3)}!function(t){Ku=function(t){var n=t.dateTime,r=t.date,e=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,s=ca(i),f=sa(i),l=ca(o),h=sa(o),p=ca(u),v=sa(u),d=ca(a),g=sa(a),m=ca(c),y=sa(c),w={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Ta,e:Ta,f:Da,H:ka,I:Pa,j:Oa,L:Ua,m:ja,M:La,p:function(t){return i[+(t.getHours()>=12)]},Q:fc,s:lc,S:Fa,u:Ra,U:Ia,V:Ha,w:Va,W:Ya,x:null,X:null,y:za,Y:qa,Z:Ba,"%":sc},x={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:Xa,e:Xa,f:Ja,H:$a,I:Wa,j:Ga,L:Za,m:Qa,M:Ka,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:fc,s:lc,S:tc,u:nc,U:rc,V:ec,w:ic,W:oc,x:null,X:null,y:uc,Y:ac,Z:cc,"%":sc},b={a:function(t,n,r){var e=p.exec(n.slice(r));return e?(t.w=v[e[0].toLowerCase()],r+e[0].length):-1},A:function(t,n,r){var e=l.exec(n.slice(r));return e?(t.w=h[e[0].toLowerCase()],r+e[0].length):-1},b:function(t,n,r){var e=m.exec(n.slice(r));return e?(t.m=y[e[0].toLowerCase()],r+e[0].length):-1},B:function(t,n,r){var e=d.exec(n.slice(r));return e?(t.m=g[e[0].toLowerCase()],r+e[0].length):-1},c:function(t,r,e){return M(t,n,r,e)},d:wa,e:wa,f:Ea,H:ba,I:ba,j:xa,L:Ma,m:ya,M:_a,p:function(t,n,r){var e=s.exec(n.slice(r));return e?(t.p=f[e[0].toLowerCase()],r+e[0].length):-1},Q:Na,s:Aa,S:Sa,u:la,U:ha,V:pa,w:fa,W:va,x:function(t,n,e){return M(t,r,n,e)},X:function(t,n,r){return M(t,e,n,r)},y:ga,Y:da,Z:ma,"%":Ca};function _(t,n){return function(r){var e,i,o,u=[],a=-1,c=0,s=t.length;for(r instanceof Date||(r=new Date(+r));++a<s;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=ra[e=t.charAt(++a)])?e=t.charAt(++a):i="e"===e?" ":"0",(o=n[e])&&(e=o(r,i)),u.push(e),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function S(t,n){return function(r){var e,i,o=Qu(1900);if(M(o,t,r+="",0)!=r.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(e=Ju(Qu(o.y))).getUTCDay(),e=i>4||0===i?Vu.ceil(e):Vu(e),e=Ru.offset(e,7*(o.V-1)),o.y=e.getUTCFullYear(),o.m=e.getUTCMonth(),o.d=e.getUTCDate()+(o.w+6)%7):(i=(e=n(Qu(o.y))).getDay(),e=i>4||0===i?Cu.ceil(e):Cu(e),e=Su.offset(e,7*(o.V-1)),o.y=e.getFullYear(),o.m=e.getMonth(),o.d=e.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ju(Qu(o.y)).getUTCDay():n(Qu(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ju(o)):n(o)}}function M(t,n,r,e){for(var i,o,u=0,a=n.length,c=r.length;u<a;){if(e>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=b[i in ra?n.charAt(u++):i])||(e=o(t,r,e))<0)return-1}else if(i!=r.charCodeAt(e++))return-1}return e}return w.x=_(r,w),w.X=_(e,w),w.c=_(n,w),x.x=_(r,x),x.X=_(e,x),x.c=_(n,x),{format:function(t){var n=_(t+="",w);return n.toString=function(){return t},n},parse:function(t){var n=S(t+="",Zu);return n.toString=function(){return t},n},utcFormat:function(t){var n=_(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=S(t,Ju);return n.toString=function(){return t},n}}}(t),Ku.format,Ku.parse,ta=Ku.utcFormat,na=Ku.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||ta("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||na("%Y-%m-%dT%H:%M:%S.%LZ");var hc="http://www.w3.org/1999/xhtml",pc={svg:"http://www.w3.org/2000/svg",xhtml:hc,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},vc=function(t){var n=t+="",r=n.indexOf(":");return r>=0&&"xmlns"!==(n=t.slice(0,r))&&(t=t.slice(r+1)),pc.hasOwnProperty(n)?{space:pc[n],local:t}:t};var dc=function(t){var n=vc(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,r=this.namespaceURI;return r===hc&&n.documentElement.namespaceURI===hc?n.createElement(t):n.createElementNS(r,t)}})(n)};function gc(){}var mc=function(t){return null==t?gc:function(){return this.querySelector(t)}};function yc(){return[]}var wc=function(t){return null==t?yc:function(){return this.querySelectorAll(t)}},xc=function(t){return function(){return this.matches(t)}},bc=function(t){return new Array(t.length)};function _c(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}_c.prototype={constructor:_c,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Sc="$";function Mc(t,n,r,e,i,o){for(var u,a=0,c=n.length,s=o.length;a<s;++a)(u=n[a])?(u.__data__=o[a],e[a]=u):r[a]=new _c(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function Ec(t,n,r,e,i,o,u){var a,c,s,f={},l=n.length,h=o.length,p=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(p[a]=s=Sc+u.call(c,c.__data__,a,n),s in f?i[a]=c:f[s]=c);for(a=0;a<h;++a)(c=f[s=Sc+u.call(t,o[a],a,o)])?(e[a]=c,c.__data__=o[a],f[s]=null):r[a]=new _c(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&f[p[a]]===c&&(i[a]=c)}function Cc(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var Nc=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ac(t,n){return t.style.getPropertyValue(n)||Nc(t).getComputedStyle(t,null).getPropertyValue(n)}function Tc(t){return t.trim().split(/^|\s+/)}function kc(t){return t.classList||new Pc(t)}function Pc(t){this._node=t,this._names=Tc(t.getAttribute("class")||"")}function Oc(t,n){for(var r=kc(t),e=-1,i=n.length;++e<i;)r.add(n[e])}function Uc(t,n){for(var r=kc(t),e=-1,i=n.length;++e<i;)r.remove(n[e])}Pc.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Dc(){this.textContent=""}function jc(){this.innerHTML=""}function Lc(){this.nextSibling&&this.parentNode.appendChild(this)}function Fc(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Rc(){return null}function Ic(){var t=this.parentNode;t&&t.removeChild(this)}function Hc(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function Vc(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var Yc={},zc=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Yc={mouseenter:"mouseover",mouseleave:"mouseout"}));function qc(t,n,r){return t=Bc(t,n,r),function(n){var r=n.relatedTarget;r&&(r===this||8&r.compareDocumentPosition(this))||t.call(this,n)}}function Bc(t,n,r){return function(e){var i=zc;zc=e;try{t.call(this,this.__data__,n,r)}finally{zc=i}}}function Xc(t){return function(){var n=this.__on;if(n){for(var r,e=0,i=-1,o=n.length;e<o;++e)r=n[e],t.type&&r.type!==t.type||r.name!==t.name?n[++i]=r:this.removeEventListener(r.type,r.listener,r.capture);++i?n.length=i:delete this.__on}}}function $c(t,n,r){var e=Yc.hasOwnProperty(t.type)?qc:Bc;return function(i,o,u){var a,c=this.__on,s=e(n,o,u);if(c)for(var f=0,l=c.length;f<l;++f)if((a=c[f]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=s,a.capture=r),void(a.value=n);this.addEventListener(t.type,s,r),a={type:t.type,name:t.name,value:n,listener:s,capture:r},c?c.push(a):this.__on=[a]}}function Wc(t,n,r){var e=Nc(t),i=e.CustomEvent;"function"==typeof i?i=new i(n,r):(i=e.document.createEvent("Event"),r?(i.initEvent(n,r.bubbles,r.cancelable),i.detail=r.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var Gc=[null];function Zc(t,n){this._groups=t,this._parents=n}function Jc(){return new Zc([[document.documentElement]],Gc)}Zc.prototype=Jc.prototype={constructor:Zc,select:function(t){"function"!=typeof t&&(t=mc(t));for(var n=this._groups,r=n.length,e=new Array(r),i=0;i<r;++i)for(var o,u,a=n[i],c=a.length,s=e[i]=new Array(c),f=0;f<c;++f)(o=a[f])&&(u=t.call(o,o.__data__,f,a))&&("__data__"in o&&(u.__data__=o.__data__),s[f]=u);return new Zc(e,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=wc(t));for(var n=this._groups,r=n.length,e=[],i=[],o=0;o<r;++o)for(var u,a=n[o],c=a.length,s=0;s<c;++s)(u=a[s])&&(e.push(t.call(u,u.__data__,s,a)),i.push(u));return new Zc(e,i)},filter:function(t){"function"!=typeof t&&(t=xc(t));for(var n=this._groups,r=n.length,e=new Array(r),i=0;i<r;++i)for(var o,u=n[i],a=u.length,c=e[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Zc(e,this._parents)},data:function(t,n){if(!t)return v=new Array(this.size()),f=-1,this.each(function(t){v[++f]=t}),v;var r,e=n?Ec:Mc,i=this._parents,o=this._groups;"function"!=typeof t&&(r=t,t=function(){return r});for(var u=o.length,a=new Array(u),c=new Array(u),s=new Array(u),f=0;f<u;++f){var l=i[f],h=o[f],p=h.length,v=t.call(l,l&&l.__data__,f,i),d=v.length,g=c[f]=new Array(d),m=a[f]=new Array(d);e(l,h,g,m,s[f]=new Array(p),v,n);for(var y,w,x=0,b=0;x<d;++x)if(y=g[x]){for(x>=b&&(b=x+1);!(w=m[b])&&++b<d;);y._next=w||null}}return(a=new Zc(a,i))._enter=c,a._exit=s,a},enter:function(){return new Zc(this._enter||this._groups.map(bc),this._parents)},exit:function(){return new Zc(this._exit||this._groups.map(bc),this._parents)},join:function(t,n,r){var e=this.enter(),i=this,o=this.exit();return e="function"==typeof t?t(e):e.append(t+""),null!=n&&(i=n(i)),null==r?o.remove():r(o),e&&i?e.merge(i).order():i},merge:function(t){for(var n=this._groups,r=t._groups,e=n.length,i=r.length,o=Math.min(e,i),u=new Array(e),a=0;a<o;++a)for(var c,s=n[a],f=r[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<e;++a)u[a]=n[a];return new Zc(u,this._parents)},order:function(){for(var t=this._groups,n=-1,r=t.length;++n<r;)for(var e,i=t[n],o=i.length-1,u=i[o];--o>=0;)(e=i[o])&&(u&&4^e.compareDocumentPosition(u)&&u.parentNode.insertBefore(e,u),u=e);return this},sort:function(t){function n(n,r){return n&&r?t(n.__data__,r.__data__):!n-!r}t||(t=Cc);for(var r=this._groups,e=r.length,i=new Array(e),o=0;o<e;++o){for(var u,a=r[o],c=a.length,s=i[o]=new Array(c),f=0;f<c;++f)(u=a[f])&&(s[f]=u);s.sort(n)}return new Zc(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,r=t.length;n<r;++n)for(var e=t[n],i=0,o=e.length;i<o;++i){var u=e[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,r=0,e=n.length;r<e;++r)for(var i,o=n[r],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var r=vc(t);if(arguments.length<2){var e=this.node();return r.local?e.getAttributeNS(r.space,r.local):e.getAttribute(r)}return this.each((null==n?r.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}}:"function"==typeof n?r.local?function(t,n){return function(){var r=n.apply(this,arguments);null==r?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,r)}}:function(t,n){return function(){var r=n.apply(this,arguments);null==r?this.removeAttribute(t):this.setAttribute(t,r)}}:r.local?function(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}:function(t,n){return function(){this.setAttribute(t,n)}})(r,n))},style:function(t,n,r){return arguments.length>1?this.each((null==n?function(t){return function(){this.style.removeProperty(t)}}:"function"==typeof n?function(t,n,r){return function(){var e=n.apply(this,arguments);null==e?this.style.removeProperty(t):this.style.setProperty(t,e,r)}}:function(t,n,r){return function(){this.style.setProperty(t,n,r)}})(t,n,null==r?"":r)):Ac(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?function(t){return function(){delete this[t]}}:"function"==typeof n?function(t,n){return function(){var r=n.apply(this,arguments);null==r?delete this[t]:this[t]=r}}:function(t,n){return function(){this[t]=n}})(t,n)):this.node()[t]},classed:function(t,n){var r=Tc(t+"");if(arguments.length<2){for(var e=kc(this.node()),i=-1,o=r.length;++i<o;)if(!e.contains(r[i]))return!1;return!0}return this.each(("function"==typeof n?function(t,n){return function(){(n.apply(this,arguments)?Oc:Uc)(this,t)}}:n?function(t){return function(){Oc(this,t)}}:function(t){return function(){Uc(this,t)}})(r,n))},text:function(t){return arguments.length?this.each(null==t?Dc:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}:function(t){return function(){this.textContent=t}})(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?jc:("function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}:function(t){return function(){this.innerHTML=t}})(t)):this.node().innerHTML},raise:function(){return this.each(Lc)},lower:function(){return this.each(Fc)},append:function(t){var n="function"==typeof t?t:dc(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var r="function"==typeof t?t:dc(t),e=null==n?Rc:"function"==typeof n?n:mc(n);return this.select(function(){return this.insertBefore(r.apply(this,arguments),e.apply(this,arguments)||null)})},remove:function(){return this.each(Ic)},clone:function(t){return this.select(t?Vc:Hc)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,r){var e,i,o=function(t){return t.trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");return r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),{type:t,name:n}})}(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?$c:Xc,null==r&&(r=!1),e=0;e<u;++e)this.each(a(o[e],n,r));return this}var a=this.node().__on;if(a)for(var c,s=0,f=a.length;s<f;++s)for(e=0,c=a[s];e<u;++e)if((i=o[e]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return Wc(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return Wc(this,t,n)}})(t,n))}};var Qc=Jc,Kc=function(t){return"string"==typeof t?new Zc([[document.querySelector(t)]],[document.documentElement]):new Zc([[t]],Gc)},ts=0;function ns(){this._="@"+(++ts).toString(36)}ns.prototype=function(){return new ns}.prototype={constructor:ns,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};r(71),r(72);var rs={value:function(){}};function es(){for(var t,n=0,r=arguments.length,e={};n<r;++n){if(!(t=arguments[n]+"")||t in e)throw new Error("illegal type: "+t);e[t]=[]}return new is(e)}function is(t){this._=t}function os(t,n){for(var r,e=0,i=t.length;e<i;++e)if((r=t[e]).name===n)return r.value}function us(t,n,r){for(var e=0,i=t.length;e<i;++e)if(t[e].name===n){t[e]=rs,t=t.slice(0,e).concat(t.slice(e+1));break}return null!=r&&t.push({name:n,value:r}),t}is.prototype=es.prototype={constructor:is,on:function(t,n){var r,e,i=this._,o=(e=i,(t+"").trim().split(/^|\s+/).map(function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}})),u=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++u<a;)if(r=(t=o[u]).type)i[r]=us(i[r],t.name,n);else if(null==n)for(r in i)i[r]=us(i[r],t.name,null);return this}for(;++u<a;)if((r=(t=o[u]).type)&&(r=os(i[r],t.name)))return r},copy:function(){var t={},n=this._;for(var r in n)t[r]=n[r].slice();return new is(t)},call:function(t,n){if((r=arguments.length-2)>0)for(var r,e,i=new Array(r),o=0;o<r;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,r=(e=this._[t]).length;o<r;++o)e[o].value.apply(n,i)},apply:function(t,n,r){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var e=this._[t],i=0,o=e.length;i<o;++i)e[i].value.apply(n,r)}};var as,cs,ss=es,fs=0,ls=0,hs=0,ps=1e3,vs=0,ds=0,gs=0,ms="object"==typeof performance&&performance.now?performance:Date,ys="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function ws(){return ds||(ys(xs),ds=ms.now()+gs)}function xs(){ds=0}function bs(){this._call=this._time=this._next=null}function _s(t,n,r){var e=new bs;return e.restart(t,n,r),e}function Ss(){ds=(vs=ms.now())+gs,fs=ls=0;try{!function(){ws(),++fs;for(var t,n=as;n;)(t=ds-n._time)>=0&&n._call.call(null,t),n=n._next;--fs}()}finally{fs=0,function(){var t,n,r=as,e=1/0;for(;r;)r._call?(e>r._time&&(e=r._time),t=r,r=r._next):(n=r._next,r._next=null,r=t?t._next=n:as=n);cs=t,Es(e)}(),ds=0}}function Ms(){var t=ms.now(),n=t-vs;n>ps&&(gs-=n,vs=t)}function Es(t){fs||(ls&&(ls=clearTimeout(ls)),t-ds>24?(t<1/0&&(ls=setTimeout(Ss,t-ms.now()-gs)),hs&&(hs=clearInterval(hs))):(hs||(vs=ms.now(),hs=setInterval(Ms,ps)),fs=1,ys(Ss)))}bs.prototype=_s.prototype={constructor:bs,restart:function(t,n,r){if("function"!=typeof t)throw new TypeError("callback is not a function");r=(null==r?ws():+r)+(null==n?0:+n),this._next||cs===this||(cs?cs._next=this:as=this,cs=this),this._call=t,this._time=r,Es()},stop:function(){this._call&&(this._call=null,this._time=1/0,Es())}};var Cs=function(t,n,r){var e=new bs;return n=null==n?0:+n,e.restart(function(r){e.stop(),t(r+n)},n,r),e},Ns=ss("start","end","cancel","interrupt"),As=[],Ts=0,ks=1,Ps=2,Os=3,Us=4,Ds=5,js=6,Ls=function(t,n,r,e,i,o){var u=t.__transition;if(u){if(r in u)return}else t.__transition={};!function(t,n,r){var e,i=t.__transition;function o(c){var s,f,l,h;if(r.state!==ks)return a();for(s in i)if((h=i[s]).name===r.name){if(h.state===Os)return Cs(o);h.state===Us?(h.state=js,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<n&&(h.state=js,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Cs(function(){r.state===Os&&(r.state=Us,r.timer.restart(u,r.delay,r.time),u(c))}),r.state=Ps,r.on.call("start",t,t.__data__,r.index,r.group),r.state===Ps){for(r.state=Os,e=new Array(l=r.tween.length),s=0,f=-1;s<l;++s)(h=r.tween[s].value.call(t,t.__data__,r.index,r.group))&&(e[++f]=h);e.length=f+1}}function u(n){for(var i=n<r.duration?r.ease.call(null,n/r.duration):(r.timer.restart(a),r.state=Ds,1),o=-1,u=e.length;++o<u;)e[o].call(t,i);r.state===Ds&&(r.on.call("end",t,t.__data__,r.index,r.group),a())}function a(){for(var e in r.state=js,r.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=r,r.timer=_s(function(t){r.state=ks,r.timer.restart(o,r.delay,r.time),r.delay<=t&&o(t-r.delay)},0,r.time)}(t,r,{name:n,index:e,group:i,on:Ns,tween:As,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:Ts})};function Fs(t,n){var r=Is(t,n);if(r.state>Ts)throw new Error("too late; already scheduled");return r}function Rs(t,n){var r=Is(t,n);if(r.state>Os)throw new Error("too late; already running");return r}function Is(t,n){var r=t.__transition;if(!r||!(r=r[n]))throw new Error("transition not found");return r}function Hs(t,n,r){var e=t._id;return t.each(function(){var t=Rs(this,e);(t.value||(t.value={}))[n]=r.apply(this,arguments)}),function(t){return Is(t,e).value[n]}}var Vs=function(t,n){var r;return("number"==typeof n?xo:n instanceof Ni?yo:(r=Ni(n))?(n=r,yo):No)(t,n)};var Ys=Qc.prototype.constructor;function zs(t){return function(){this.style.removeProperty(t)}}var qs=0;function Bs(t,n,r,e){this._groups=t,this._parents=n,this._name=r,this._id=e}function Xs(){return++qs}var $s=Qc.prototype;Bs.prototype=function(t){return Qc().transition(t)}.prototype={constructor:Bs,select:function(t){var n=this._name,r=this._id;"function"!=typeof t&&(t=mc(t));for(var e=this._groups,i=e.length,o=new Array(i),u=0;u<i;++u)for(var a,c,s=e[u],f=s.length,l=o[u]=new Array(f),h=0;h<f;++h)(a=s[h])&&(c=t.call(a,a.__data__,h,s))&&("__data__"in a&&(c.__data__=a.__data__),l[h]=c,Ls(l[h],n,r,h,l,Is(a,r)));return new Bs(o,this._parents,n,r)},selectAll:function(t){var n=this._name,r=this._id;"function"!=typeof t&&(t=wc(t));for(var e=this._groups,i=e.length,o=[],u=[],a=0;a<i;++a)for(var c,s=e[a],f=s.length,l=0;l<f;++l)if(c=s[l]){for(var h,p=t.call(c,c.__data__,l,s),v=Is(c,r),d=0,g=p.length;d<g;++d)(h=p[d])&&Ls(h,n,r,d,p,v);o.push(p),u.push(c)}return new Bs(o,u,n,r)},filter:function(t){"function"!=typeof t&&(t=xc(t));for(var n=this._groups,r=n.length,e=new Array(r),i=0;i<r;++i)for(var o,u=n[i],a=u.length,c=e[i]=[],s=0;s<a;++s)(o=u[s])&&t.call(o,o.__data__,s,u)&&c.push(o);return new Bs(e,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,r=t._groups,e=n.length,i=r.length,o=Math.min(e,i),u=new Array(e),a=0;a<o;++a)for(var c,s=n[a],f=r[a],l=s.length,h=u[a]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;a<e;++a)u[a]=n[a];return new Bs(u,this._parents,this._name,this._id)},selection:function(){return new Ys(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,r=Xs(),e=this._groups,i=e.length,o=0;o<i;++o)for(var u,a=e[o],c=a.length,s=0;s<c;++s)if(u=a[s]){var f=Is(u,n);Ls(u,t,r,s,a,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Bs(e,this._parents,t,r)},call:$s.call,nodes:$s.nodes,node:$s.node,size:$s.size,empty:$s.empty,each:$s.each,on:function(t,n){var r=this._id;return arguments.length<2?Is(this.node(),r).on.on(t):this.each(function(t,n,r){var e,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?Fs:Rs;return function(){var u=o(this,t),a=u.on;a!==e&&(i=(e=a).copy()).on(n,r),u.on=i}}(r,t,n))},attr:function(t,n){var r=vc(t),e="transform"===r?jo:Vs;return this.attrTween(t,"function"==typeof n?(r.local?function(t,n,r){var e,i,o;return function(){var u,a,c=r(this);if(null!=c)return(u=this.getAttributeNS(t.space,t.local))===(a=c+"")?null:u===e&&a===i?o:(i=a,o=n(e=u,c));this.removeAttributeNS(t.space,t.local)}}:function(t,n,r){var e,i,o;return function(){var u,a,c=r(this);if(null!=c)return(u=this.getAttribute(t))===(a=c+"")?null:u===e&&a===i?o:(i=a,o=n(e=u,c));this.removeAttribute(t)}})(r,e,Hs(this,"attr."+t,n)):null==n?(r.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(r):(r.local?function(t,n,r){var e,i,o=r+"";return function(){var u=this.getAttributeNS(t.space,t.local);return u===o?null:u===e?i:i=n(e=u,r)}}:function(t,n,r){var e,i,o=r+"";return function(){var u=this.getAttribute(t);return u===o?null:u===e?i:i=n(e=u,r)}})(r,e,n))},attrTween:function(t,n){var r="attr."+t;if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;var e=vc(t);return this.tween(r,(e.local?function(t,n){var r,e;function i(){var i=n.apply(this,arguments);return i!==e&&(r=(e=i)&&function(t,n){return function(r){this.setAttributeNS(t.space,t.local,n(r))}}(t,i)),r}return i._value=n,i}:function(t,n){var r,e;function i(){var i=n.apply(this,arguments);return i!==e&&(r=(e=i)&&function(t,n){return function(r){this.setAttribute(t,n(r))}}(t,i)),r}return i._value=n,i})(e,n))},style:function(t,n,r){var e="transform"==(t+="")?Do:Vs;return null==n?this.styleTween(t,function(t,n){var r,e,i;return function(){var o=Ac(this,t),u=(this.style.removeProperty(t),Ac(this,t));return o===u?null:o===r&&u===e?i:i=n(r=o,e=u)}}(t,e)).on("end.style."+t,zs(t)):"function"==typeof n?this.styleTween(t,function(t,n,r){var e,i,o;return function(){var u=Ac(this,t),a=r(this),c=a+"";return null==a&&(this.style.removeProperty(t),c=a=Ac(this,t)),u===c?null:u===e&&c===i?o:(i=c,o=n(e=u,a))}}(t,e,Hs(this,"style."+t,n))).each(function(t,n){var r,e,i,o,u="style."+n,a="end."+u;return function(){var c=Rs(this,t),s=c.on,f=null==c.value[u]?o||(o=zs(n)):void 0;s===r&&i===f||(e=(r=s).copy()).on(a,i=f),c.on=e}}(this._id,t)):this.styleTween(t,function(t,n,r){var e,i,o=r+"";return function(){var u=Ac(this,t);return u===o?null:u===e?i:i=n(e=u,r)}}(t,e,n),r).on("end.style."+t,null)},styleTween:function(t,n,r){var e="style."+(t+="");if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;return this.tween(e,function(t,n,r){var e,i;function o(){var o=n.apply(this,arguments);return o!==i&&(e=(i=o)&&function(t,n,r){return function(e){this.style.setProperty(t,n(e),r)}}(t,o,r)),e}return o._value=n,o}(t,n,null==r?"":r))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(Hs(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var r in this.__transition)if(+r!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var r=this._id;if(t+="",arguments.length<2){for(var e,i=Is(this.node(),r).tween,o=0,u=i.length;o<u;++o)if((e=i[o]).name===t)return e.value;return null}return this.each((null==n?function(t,n){var r,e;return function(){var i=Rs(this,t),o=i.tween;if(o!==r)for(var u=0,a=(e=r=o).length;u<a;++u)if(e[u].name===n){(e=e.slice()).splice(u,1);break}i.tween=e}}:function(t,n,r){var e,i;if("function"!=typeof r)throw new Error;return function(){var o=Rs(this,t),u=o.tween;if(u!==e){i=(e=u).slice();for(var a={name:n,value:r},c=0,s=i.length;c<s;++c)if(i[c].name===n){i[c]=a;break}c===s&&i.push(a)}o.tween=i}})(r,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Fs(this,t).delay=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Fs(this,t).delay=n}})(n,t)):Is(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?function(t,n){return function(){Rs(this,t).duration=+n.apply(this,arguments)}}:function(t,n){return n=+n,function(){Rs(this,t).duration=n}})(n,t)):Is(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(function(t,n){if("function"!=typeof n)throw new Error;return function(){Rs(this,t).ease=n}}(n,t)):Is(this.node(),n).ease},end:function(){var t,n,r=this,e=r._id,i=r.size();return new Promise(function(o,u){var a={value:u},c={value:function(){0==--i&&o()}};r.each(function(){var r=Rs(this,e),i=r.on;i!==t&&((n=(t=i).copy())._.cancel.push(a),n._.interrupt.push(a),n._.end.push(c)),r.on=n})})}};(function t(n){function r(t){return Math.pow(t,n)}return n=+n,r.exponent=t,r})(3),function t(n){function r(t){return 1-Math.pow(1-t,n)}return n=+n,r.exponent=t,r}(3),function t(n){function r(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,r.exponent=t,r}(3),Math.PI;(function t(n){function r(t){return t*t*((n+1)*t-n)}return n=+n,r.overshoot=t,r})(1.70158),function t(n){function r(t){return--t*t*((n+1)*t+n)+1}return n=+n,r.overshoot=t,r}(1.70158),function t(n){function r(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,r.overshoot=t,r}(1.70158);var Ws=2*Math.PI,Gs=(function t(n,r){var e=Math.asin(1/(n=Math.max(1,n)))*(r/=Ws);function i(t){return n*Math.pow(2,10*--t)*Math.sin((e-t)/r)}return i.amplitude=function(n){return t(n,r*Ws)},i.period=function(r){return t(n,r)},i}(1,.3),function t(n,r){var e=Math.asin(1/(n=Math.max(1,n)))*(r/=Ws);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+e)/r)}return i.amplitude=function(n){return t(n,r*Ws)},i.period=function(r){return t(n,r)},i}(1,.3),function t(n,r){var e=Math.asin(1/(n=Math.max(1,n)))*(r/=Ws);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((e-t)/r):2-n*Math.pow(2,-10*t)*Math.sin((e+t)/r))/2}return i.amplitude=function(n){return t(n,r*Ws)},i.period=function(r){return t(n,r)},i}(1,.3),{time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}});function Zs(t,n){for(var r;!(r=t.__transition)||!(r=r[n]);)if(!(t=t.parentNode))return Gs.time=ws(),Gs;return r}Qc.prototype.interrupt=function(t){return this.each(function(){!function(t,n){var r,e,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(r=o[i]).name===n?(e=r.state>Ps&&r.state<Ds,r.state=js,r.timer.stop(),r.on.call(e?"interrupt":"cancel",t,t.__data__,r.index,r.group),delete o[i]):u=!1;u&&delete t.__transition}}(this,t)})},Qc.prototype.transition=function(t){var n,r;t instanceof Bs?(n=t._id,t=t._name):(n=Xs(),(r=Gs).time=ws(),t=null==t?null:t+"");for(var e=this._groups,i=e.length,o=0;o<i;++o)for(var u,a=e[o],c=a.length,s=0;s<c;++s)(u=a[s])&&Ls(u,t,n,s,a,r||Zs(u,n));return new Bs(e,this._parents,t,n)};var Js=Kc(".tooltip"),Qs={show:function(t){var n=zc.pageY-110,r=zc.pageX;r+10>document.body.clientWidth-100&&(r=document.body.clientWidth+5-150),Js.transition().duration(200).style("opacity",.9).on("end",function(){Js.classed("isActive",!0),Js.select(".tooltip-close").on("click",this.hide)}),Js.html(t).style("visibility","visible").style("left",r+"px").style("top",n+"px")},hide:function(){Js.transition().duration(500).style("opacity",0)},formatContent:function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r="";return n&&(r='<ul class="tooltip-list">'),t.forEach(function(t,e){var i=null;t.class&&(i=t.class);var o="",u="<br />";n&&(o='<li class="'.concat(i,'">'),u="</li>");var a=Object.keys(t)[0];r+="".concat(o,'<span class="tooltip-label">').concat(a,":</span> ").concat(t[a]).concat(u)}),n&&(r+="</ul>"),r}},Ks=function(t){return t},tf=function(t){if(null==t)return Ks;var n,r,e=t.scale[0],i=t.scale[1],o=t.translate[0],u=t.translate[1];return function(t,a){a||(n=r=0);var c=2,s=t.length,f=new Array(s);for(f[0]=(n+=t[0])*e+o,f[1]=(r+=t[1])*i+u;c<s;)f[c]=t[c],++c;return f}},nf=function(t,n){for(var r,e=t.length,i=e-n;i<--e;)r=t[i],t[i++]=t[e],t[e]=r},rf=function(t,n){return"GeometryCollection"===n.type?{type:"FeatureCollection",features:n.geometries.map(function(n){return ef(t,n)})}:ef(t,n)};function ef(t,n){var r=n.id,e=n.bbox,i=null==n.properties?{}:n.properties,o=of(t,n);return null==r&&null==e?{type:"Feature",properties:i,geometry:o}:null==e?{type:"Feature",id:r,properties:i,geometry:o}:{type:"Feature",id:r,bbox:e,properties:i,geometry:o}}function of(t,n){var r=tf(t.transform),e=t.arcs;function i(t,n){n.length&&n.pop();for(var i=e[t<0?~t:t],o=0,u=i.length;o<u;++o)n.push(r(i[o],o));t<0&&nf(n,u)}function o(t){return r(t)}function u(t){for(var n=[],r=0,e=t.length;r<e;++r)i(t[r],n);return n.length<2&&n.push(n[0]),n}function a(t){for(var n=u(t);n.length<4;)n.push(n[0]);return n}function c(t){return t.map(a)}return function t(n){var r,e=n.type;switch(e){case"GeometryCollection":return{type:e,geometries:n.geometries.map(t)};case"Point":r=o(n.coordinates);break;case"MultiPoint":r=n.coordinates.map(o);break;case"LineString":r=u(n.arcs);break;case"MultiLineString":r=n.arcs.map(u);break;case"Polygon":r=c(n.arcs);break;case"MultiPolygon":r=n.arcs.map(c);break;default:return null}return{type:e,coordinates:r}}(n)}var uf=new ArrayBuffer(16);new Float64Array(uf),new Uint32Array(uf);Math.PI,Math.abs,Math.atan2,Math.cos,Math.sin;var af,cf,sf=function(){var t={top:10,right:10,bottom:10,left:10},n={orbit:{x:{min:-1,max:1},y:{min:-.309,max:.309}},earth:{x:{min:-.151,max:.151},y:{min:-.151,max:.151}}},r={China:"#d66e42",Russia:"#196c95",US:"#f9bc65",Other:"#b5bdc1"},e=$n(),i=mn(),o=0,u=0,a=hu().domain([n.orbit.x.min,n.orbit.x.max]),c=hu().domain([n.orbit.y.min,n.orbit.y.max]);function s(s){var f=s.container,h=s.data,p=f.select("svg").attr("viewBox","0 0 "+(o+t.left+t.right)+" "+(u+t.top+t.bottom)),v=p.select("g").attr("transform","translate("+t.left+","+t.top+")"),d=v.select(".g-earth"),g=Math.abs(c(n.earth.y.max)-c(0));e.translate([a(0),c(0)]).scale(g).rotate([270,18]),i.projection(e),d.select(".water").attr("cx",a(0)).attr("cy",c(0)).attr("r",e.scale()),d.select(".land").datum(rf(cf,cf.objects.countries)).attr("d",i);var m,y,w,x,b,_=v.select(".g-orbit path"),S=Math.abs(a(n.orbit.x.max)-a(0)),M=Math.abs(c(n.orbit.y.max)-c(0));_.attr("d",(m={cx:a(0),cy:c(0),rx:S,ry:M},y=m.cx,w=m.cy,x=m.rx,b=m.ry,y=parseFloat(y,10),w=parseFloat(w,10),x=parseFloat(x,10),b=parseFloat(b,10),"\n        M".concat(y-x,", ").concat(w,"\n        a").concat(x,", ").concat(b," 0 1, 0 ").concat(2*x,", 0\n        a").concat(x,", ").concat(b," 0 1, 0 ").concat(-2*x,", 0\n        ")));var E=v.select(".g-plot"),C=E.selectAll(".satellite").data(h,function(t){return t.sat_name});C.join(function(t){return t.append("circle").attr("class","satellite").attr("r",10).attr("fill",function(t){return r[t.country]}).attr("stroke",function(t){return function(t,n){var r=!1;"#"==t[0]&&(t=t.slice(1),r=!0);var e=parseInt(t,16),i=(e>>16)+n;i>255?i=255:i<0&&(i=0);var o=(e>>8&255)+n;o>255?o=255:o<0&&(o=0);var u=(255&e)+n;return u>255?u=255:u<0&&(u=0),(r?"#":"")+(u|o<<8|i<<16).toString(16)}(r[t.country],-20)}).attr("fill-opacity",.8).attr("cx",function(t){return a(t.x_coord)}).attr("cy",function(t){return c(t.y_coord)}).attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).on("mouseover",l.mouseover).on("mouseleave",l.mouseleave)},function(t){return t.attr("data-x",function(t){return t.x_coord}).attr("data-y",function(t){return t.y_coord}).call(function(t){return t.transition(25).attr("cx",function(t){return a(t.x_coord)}).attr("cy",function(t){return c(t.y_coord)})})})}function f(t){var n=t.datum();!function(t){var n=t.container,r=t.data,e=n.selectAll("svg").data([r]).enter().append("svg").append("g");e.append("g").attr("class","g-orbit").append("path").attr("fill","none").attr("stroke","#000");var i=e.append("g").attr("class","g-earth");i.append("circle").attr("class","water").attr("fill","#b7c7d1"),i.append("path").attr("class","land").style("fill","#f2f1ee").style("stroke","#ccc").style("stroke-width","0.3px"),e.append("g").attr("class","g-plot")}({container:t,data:n}),function(t){t.data;a.range([0,o]),c.range([u,0])}({data:n}),s({container:t,data:n})}var l={mouseover:function(t){l.showTooltip(t),Kc(this).classed("is-active",!0)},mouseleave:function(){Qs.hide(),Kc(this).classed("is-active",!1)},showTooltip:function(t){var n=[{Operator:t.sat_operator},{Date:t.timestamp},{Longitude:t.long_string}],r='\n      <p class="tooltip-heading">\n        '.concat(t.sat_name,"</p>\n      ").concat(Qs.formatContent(n,!0));Qs.show(r)}};return f.width=function(){return arguments.length?(o=(arguments.length<=0?void 0:arguments[0])-t.left-t.right,f):o},f.height=function(){return arguments.length?(u=(arguments.length<=0?void 0:arguments[0])-t.top-t.bottom,f):u},f}();var ff={init:function(t){var n;(af=Kc(t.container)).datum(t.data),n=Math.min(af.node().offsetWidth,window.innerHeight),sf.width(n).height(n/3),af.call(sf)},setWorld:function(t){cf=t}},lf=(r(73),{el:document.getElementById("description"),setDesc:function(t){this.el.textContent=t},convertKeys:function(t){var n={};for(var r in t)n[new Date(r).getTime()]=t[r];return n},getClosestDescription:function(t,n){return Math.max.apply(null,t.filter(function(t){return t<=n}))}}),hf=r(81),pf={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),currentDateEl:document.querySelector(".timeline-current-date"),currentLaunchesEl:document.querySelector(".timeline-num-launches"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,updateCurrentDate:function(t){t=new Date(t),t=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()),this.currentDateEl.innerHTML="".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,r=t.endDate,e=t.onUpdate,i=t.onSlide;this.endDate=r,this.startDate=n,hf.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",step:864e5,range:{min:n,max:r},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",e),this.el.noUiSlider.on("slide",i)},setupBtnControls:function(){this.btnControls.addEventListener("click",function(){var t=pf.getCurrentDate();t==pf.endDate&&pf.el.noUiSlider.set(pf.startDate),1!=pf.playing?(pf.timer=setInterval(function(){t=pf.getCurrentDate(),pf.el.noUiSlider.set(t+864e5)},pf.transitionDuration),this.classList.remove("play-btn"),this.classList.add("pause-btn"),pf.playing=!0):pf.stopTimeline()})},stopTimeline:function(){clearInterval(pf.timer),pf.playing=!1,pf.btnControls.classList.remove("pause-btn"),pf.btnControls.classList.add("play-btn")}},vf=pf;r(106),r(107),r(110),r(111),r(112),r(115),r(116),r(117);var df={},gf={},mf=34,yf=10,wf=13;function xf(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function bf(t){var n=Object.create(null),r=[];return t.forEach(function(t){for(var e in t)e in n||r.push(n[e]=e)}),r}function _f(t,n){var r=t+"",e=r.length;return e<n?new Array(n-e+1).join(0)+r:r}function Sf(t){var n,r=t.getUTCHours(),e=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+_f(-n,6):n>9999?"+"+_f(n,6):_f(n,4))+"-"+_f(t.getUTCMonth()+1,2)+"-"+_f(t.getUTCDate(),2)+(o?"T"+_f(r,2)+":"+_f(e,2)+":"+_f(i,2)+"."+_f(o,3)+"Z":i?"T"+_f(r,2)+":"+_f(e,2)+":"+_f(i,2)+"Z":e||r?"T"+_f(r,2)+":"+_f(e,2)+"Z":"")}var Mf=function(t){var n=new RegExp('["'+t+"\n\r]"),r=t.charCodeAt(0);function e(t,n){var e,i=[],o=t.length,u=0,a=0,c=o<=0,s=!1;function f(){if(c)return gf;if(s)return s=!1,df;var n,e,i=u;if(t.charCodeAt(i)===mf){for(;u++<o&&t.charCodeAt(u)!==mf||t.charCodeAt(++u)===mf;);return(n=u)>=o?c=!0:(e=t.charCodeAt(u++))===yf?s=!0:e===wf&&(s=!0,t.charCodeAt(u)===yf&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((e=t.charCodeAt(n=u++))===yf)s=!0;else if(e===wf)s=!0,t.charCodeAt(u)===yf&&++u;else if(e!==r)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===yf&&--o,t.charCodeAt(o-1)===wf&&--o;(e=f())!==gf;){for(var l=[];e!==df&&e!==gf;)l.push(e),e=f();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n,r){return n.map(function(n){return r.map(function(t){return u(n[t])}).join(t)})}function o(n){return n.map(u).join(t)}function u(t){return null==t?"":t instanceof Date?Sf(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var r,i,o=e(t,function(t,e){if(r)return r(t,e-1);i=t,r=n?function(t,n){var r=xf(t);return function(e,i){return n(r(e),i,t)}}(t,n):xf(t)});return o.columns=i||[],o},parseRows:e,format:function(n,r){return null==r&&(r=bf(n)),[r.map(u).join(t)].concat(i(n,r)).join("\n")},formatBody:function(t,n){return null==n&&(n=bf(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")}}},Ef=Mf(","),Cf=Ef.parse,Nf=(Ef.parseRows,Ef.format,Ef.formatBody,Ef.formatRows,Mf("\t")),Af=Nf.parse;Nf.parseRows,Nf.format,Nf.formatBody,Nf.formatRows;function Tf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var kf=function(t,n){return fetch(t,n).then(Tf)};function Pf(t){return function(n,r,e){return 2===arguments.length&&"function"==typeof r&&(e=r,r=void 0),kf(n,r).then(function(n){return t(n,e)})}}var Of=Pf(Cf);Pf(Af);function Uf(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.json()}var Df=function(t,n){return fetch(t,n).then(Uf)};function jf(t){return function(n,r){return kf(n,r).then(function(n){return(new DOMParser).parseFromString(n,t)})}}jf("application/xml"),jf("text/html"),jf("image/svg+xml");function Lf(t){return function(t){if(Array.isArray(t)){for(var n=0,r=new Array(t.length);n<t.length;n++)r[n]=t[n];return r}}(t)||function(t){if(Symbol.iterator in Object(t)||"[object Arguments]"===Object.prototype.toString.call(t))return Array.from(t)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Ff(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){var r=[],e=!0,i=!1,o=void 0;try{for(var u,a=t[Symbol.iterator]();!(e=(u=a.next()).done)&&(r.push(u.value),!n||r.length!==n);e=!0);}catch(t){i=!0,o=t}finally{try{e||null==a.return||a.return()}finally{if(i)throw o}}return r}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function Rf(t,n,r,e,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void r(t)}a.done?n(c):Promise.resolve(c).then(e,i)}function If(t){return function(){var n=this,r=arguments;return new Promise(function(e,i){var o=t.apply(n,r);function u(t){Rf(o,e,i,u,a,"next",t)}function a(t){Rf(o,e,i,u,a,"throw",t)}u(void 0)})}}var Hf=["US","China","Russia"];function Vf(t,n){return Yf.apply(this,arguments)}function Yf(){return(Yf=If(regeneratorRuntime.mark(function t(n,r){var e,i,o;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=Of(n),i=Of(r),o=Promise.all([e,i]).then(function(t){var n=Ff(t,2),r=n[0],e=n[1];r.forEach(function(t){t.is_satellite=!0,t.is_target=!1}),e.forEach(function(t){t.is_satellite=!1,t.is_target=!0});var i=[].concat(Lf(r),Lf(e));i.forEach(function(t){t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("ï¿½","&#176;"),t.country.includes("U.S.")&&(t.country="US"),Hf.includes(t.country)||(t.country="Other")});var o=Array.from(new Set(Lf(i.map(function(t){return t.timestamp})))),u=Array.from(new Set(Lf(i.map(function(t){return t.sat_name})))),a=new Map;return o.forEach(function(t,n){var r=[];u.forEach(function(n){var e=i.filter(function(r){return r.timestamp===t&&r.sat_name===n});e.length&&r.push(e[0])}),a.set(new Date(t).getTime(),r)}),new Map(Array.from(a).sort(function(t,n){return t[0]-n[0]}))}),t.abrupt("return",o);case 4:case"end":return t.stop()}},t)}))).apply(this,arguments)}function zf(){return qf.apply(this,arguments)}function qf(){return(qf=If(regeneratorRuntime.mark(function t(){var n;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return n=Df("./data/world-110m.json").then(function(t){return t}),t.abrupt("return",n);case 2:case"end":return t.stop()}},t)}))).apply(this,arguments)}function Bf(t,n,r,e,i,o,u){try{var a=t[o](u),c=a.value}catch(t){return void r(t)}a.done?n(c):Promise.resolve(c).then(e,i)}var Xf,$f,Wf,Gf,Zf,Jf,Qf,Kf=25,tl=e.calculate();function nl(){var t;return t=regeneratorRuntime.mark(function t(n,r,e){var i;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return $f=lf.convertKeys(e),Wf=Object.keys($f).map(function(t){return+t}),t.next=4,Vf(n,r);case 4:return Xf=t.sent,t.next=7,zf();case 7:Gf=t.sent,ff.setWorld(Gf),console.log(Xf),i=Array.from(Xf.keys()),Jf=i[0],Qf=i[i.length-1],Zf=Jf,el(),il();case 16:case"end":return t.stop()}},t)}),(nl=function(){var n=this,r=arguments;return new Promise(function(e,i){var o=t.apply(n,r);function u(t){Bf(o,e,i,u,a,"next",t)}function a(t){Bf(o,e,i,u,a,"throw",t)}u(void 0)})}).apply(this,arguments)}function rl(){Zf=vf.getCurrentDate();var t=Xf.get(Zf);ff.init({data:t,container:".chart"})}function el(){vf.transitionDuration=Kf,vf.setupTimeline({startDate:Jf,endDate:Qf,transitionDuration:Kf,onUpdate:function(){rl(),vf.updateCurrentDate(Zf),Zf==Qf&&vf.stopTimeline(),$f[Zf]&&lf.setDesc($f[Zf])},onSlide:function(){var t=lf.getClosestDescription(Wf,vf.getCurrentDate());lf.setDesc($f[t])}})}function il(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach(function(t){return t.classList.remove("hide-on-load")})}window.addEventListener("resize",function(){var t=e.calculate();tl!=t&&(tl=t,rl())});n.a=function(t,n,r){return nl.apply(this,arguments)}},function(t,n,r){t.exports=r(26)("native-function-to-string",Function.toString)},function(t,n,r){"use strict";var e=r(34),i=r(18),o=r(24),u={};r(9)(u,r(0)("iterator"),function(){return this}),t.exports=function(t,n,r){t.prototype=e(u,{next:i(1,r)}),o(t,n+" Iterator")}},function(t,n,r){var e=r(6),i=r(4),o=r(22);t.exports=r(7)?Object.defineProperties:function(t,n){i(t);for(var r,u=o(n),a=u.length,c=0;a>c;)e.f(t,r=u[c++],n[r]);return t}},function(t,n,r){var e=r(25),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=e(t))<0?i(t+n,0):o(t,n)}},function(t,n,r){var e=r(12),i=r(16),o=r(35)("IE_PROTO"),u=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),e(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?u:null}},function(t,n,r){"use strict";var e=r(6),i=r(18);t.exports=function(t,n,r){n in t?e.f(t,n,i(0,r)):t[n]=r}},function(t,n,r){var e=r(1),i=r(11),o=r(5);t.exports=function(t,n){var r=(i.Object||{})[t]||Object[t],u={};u[t]=n(r),e(e.S+e.F*o(function(){r(1)}),"Object",u)}},function(t,n,r){var e=r(91);t.exports=function(t,n){return new(e(t))(n)}},function(t,n,r){var e=r(3),i=r(40),o=r(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),e(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,r){var e=r(4),i=r(20),o=r(0)("species");t.exports=function(t,n){var r,u=e(t).constructor;return void 0===u||null==(r=e(u)[o])?n:i(r)}},function(t,n){t.exports=function(t,n,r){var e=void 0===r;switch(n.length){case 0:return e?t():t.call(r);case 1:return e?t(n[0]):t.call(r,n[0]);case 2:return e?t(n[0],n[1]):t.call(r,n[0],n[1]);case 3:return e?t(n[0],n[1],n[2]):t.call(r,n[0],n[1],n[2]);case 4:return e?t(n[0],n[1],n[2],n[3]):t.call(r,n[0],n[1],n[2],n[3])}return t.apply(r,n)}},function(t,n,r){var e=r(2),i=r(66).set,o=e.MutationObserver||e.WebKitMutationObserver,u=e.process,a=e.Promise,c="process"==r(15)(u);t.exports=function(){var t,n,r,s=function(){var e,i;for(c&&(e=u.domain)&&e.exit();t;){i=t.fn,t=t.next;try{i()}catch(e){throw t?r():n=void 0,e}}n=void 0,e&&e.enter()};if(c)r=function(){u.nextTick(s)};else if(!o||e.navigator&&e.navigator.standalone)if(a&&a.resolve){var f=a.resolve(void 0);r=function(){f.then(s)}}else r=function(){i.call(e,s)};else{var l=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),r=function(){h.data=l=!l}}return function(e){var i={fn:e,next:void 0};n&&(n.next=i),t||(t=i,r()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,r){var e=r(2).navigator;t.exports=e&&e.userAgent||""},function(t,n,r){var e=r(4),i=r(3),o=r(67);t.exports=function(t,n){if(e(t),i(n)&&n.constructor===t)return n;var r=o.f(t);return(0,r.resolve)(n),r.promise}},function(t,n,r){"use strict";var e=r(50)(!0);t.exports=function(t,n,r){return n+(r?e(t,n).length:1)}},function(t,n,r){"use strict";var e=r(27),i=RegExp.prototype.exec;t.exports=function(t,n){var r=t.exec;if("function"==typeof r){var o=r.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==e(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,r){"use strict";r(101);var e=r(8),i=r(9),o=r(5),u=r(13),a=r(0),c=r(70),s=a("species"),f=!o(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var r="ab".split(t);return 2===r.length&&"a"===r[0]&&"b"===r[1]}();t.exports=function(t,n,r){var h=a(t),p=!o(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),v=p?!o(function(){var n=!1,r=/a/;return r.exec=function(){return n=!0,null},"split"===t&&(r.constructor={},r.constructor[s]=function(){return r}),r[h](""),!n}):void 0;if(!p||!v||"replace"===t&&!f||"split"===t&&!l){var d=/./[h],g=r(u,h,""[t],function(t,n,r,e,i){return n.exec===c?p&&!i?{done:!0,value:d.call(n,r,e)}:{done:!0,value:t.call(r,n,e)}:{done:!1}}),m=g[0],y=g[1];e(String.prototype,t,m),i(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,r){"use strict";var e=r(70);r(1)({target:"RegExp",proto:!0,forced:e!==/./.exec},{exec:e})},function(t,n,r){"use strict";r(103)("trim",function(t){return function(){return t(this,3)}})},function(t,n,r){var e=r(1),i=r(13),o=r(5),u=r(104),a="["+u+"]",c=RegExp("^"+a+a+"*"),s=RegExp(a+a+"*$"),f=function(t,n,r){var i={},a=o(function(){return!!u[t]()||"âÂ"!="âÂ"[t]()}),c=i[t]=a?n(l):u[t];r&&(i[r]=c),e(e.P+e.F*a,"String",i)},l=f.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports="\t\n\v\f\r Â áá ââââââââââââ¯âã\u2028\u2029\ufeff"},function(t,n,r){r(7)&&"g"!=/./g.flags&&r(6).f(RegExp.prototype,"flags",{configurable:!0,get:r(45)})},function(t,n,r){r(74)("asyncIterator")},function(t,n,r){"use strict";var e=r(2),i=r(12),o=r(7),u=r(1),a=r(8),c=r(46).KEY,s=r(5),f=r(26),l=r(24),h=r(19),p=r(0),v=r(75),d=r(74),g=r(108),m=r(40),y=r(4),w=r(3),x=r(14),b=r(33),_=r(18),S=r(34),M=r(109),E=r(78),C=r(6),N=r(22),A=E.f,T=C.f,k=M.f,P=e.Symbol,O=e.JSON,U=O&&O.stringify,D=p("_hidden"),j=p("toPrimitive"),L={}.propertyIsEnumerable,F=f("symbol-registry"),R=f("symbols"),I=f("op-symbols"),H=Object.prototype,V="function"==typeof P,Y=e.QObject,z=!Y||!Y.prototype||!Y.prototype.findChild,q=o&&s(function(){return 7!=S(T({},"a",{get:function(){return T(this,"a",{value:7}).a}})).a})?function(t,n,r){var e=A(H,n);e&&delete H[n],T(t,n,r),e&&t!==H&&T(H,n,e)}:T,B=function(t){var n=R[t]=S(P.prototype);return n._k=t,n},X=V&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},$=function(t,n,r){return t===H&&$(I,n,r),y(t),n=b(n,!0),y(r),i(R,n)?(r.enumerable?(i(t,D)&&t[D][n]&&(t[D][n]=!1),r=S(r,{enumerable:_(0,!1)})):(i(t,D)||T(t,D,_(1,{})),t[D][n]=!0),q(t,n,r)):T(t,n,r)},W=function(t,n){y(t);for(var r,e=g(n=x(n)),i=0,o=e.length;o>i;)$(t,r=e[i++],n[r]);return t},G=function(t){var n=L.call(this,t=b(t,!0));return!(this===H&&i(R,t)&&!i(I,t))&&(!(n||!i(this,t)||!i(R,t)||i(this,D)&&this[D][t])||n)},Z=function(t,n){if(t=x(t),n=b(n,!0),t!==H||!i(R,n)||i(I,n)){var r=A(t,n);return!r||!i(R,n)||i(t,D)&&t[D][n]||(r.enumerable=!0),r}},J=function(t){for(var n,r=k(x(t)),e=[],o=0;r.length>o;)i(R,n=r[o++])||n==D||n==c||e.push(n);return e},Q=function(t){for(var n,r=t===H,e=k(r?I:x(t)),o=[],u=0;e.length>u;)!i(R,n=e[u++])||r&&!i(H,n)||o.push(R[n]);return o};V||(a((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(r){this===H&&n.call(I,r),i(this,D)&&i(this[D],t)&&(this[D][t]=!1),q(this,t,_(1,r))};return o&&z&&q(H,t,{configurable:!0,set:n}),B(t)}).prototype,"toString",function(){return this._k}),E.f=Z,C.f=$,r(77).f=M.f=J,r(47).f=G,r(76).f=Q,o&&!r(17)&&a(H,"propertyIsEnumerable",G,!0),v.f=function(t){return B(p(t))}),u(u.G+u.W+u.F*!V,{Symbol:P});for(var K="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;K.length>tt;)p(K[tt++]);for(var nt=N(p.store),rt=0;nt.length>rt;)d(nt[rt++]);u(u.S+u.F*!V,"Symbol",{for:function(t){return i(F,t+="")?F[t]:F[t]=P(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var n in F)if(F[n]===t)return n},useSetter:function(){z=!0},useSimple:function(){z=!1}}),u(u.S+u.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):W(S(t),n)},defineProperty:$,defineProperties:W,getOwnPropertyDescriptor:Z,getOwnPropertyNames:J,getOwnPropertySymbols:Q}),O&&u(u.S+u.F*(!V||s(function(){var t=P();return"[null]"!=U([t])||"{}"!=U({a:t})||"{}"!=U(Object(t))})),"JSON",{stringify:function(t){for(var n,r,e=[t],i=1;arguments.length>i;)e.push(arguments[i++]);if(r=n=e[1],(w(n)||void 0!==t)&&!X(t))return m(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!X(n))return n}),e[1]=n,U.apply(O,e)}}),P.prototype[j]||r(9)(P.prototype,j,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(e.JSON,"JSON",!0)},function(t,n,r){var e=r(22),i=r(76),o=r(47);t.exports=function(t){var n=e(t),r=i.f;if(r)for(var u,a=r(t),c=o.f,s=0;a.length>s;)c.call(t,u=a[s++])&&n.push(u);return n}},function(t,n,r){var e=r(14),i=r(77).f,o={}.toString,u="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return u&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return u.slice()}}(t):i(e(t))}},function(t,n,r){var e=r(1);e(e.S,"Array",{isArray:r(40)})},function(t,n,r){"use strict";var e=r(1),i=r(20),o=r(16),u=r(5),a=[].sort,c=[1,2,3];e(e.P+e.F*(u(function(){c.sort(void 0)})||!u(function(){c.sort(null)})||!r(29)(a)),"Array",{sort:function(t){return void 0===t?a.call(o(this)):a.call(o(this),i(t))}})},function(t,n,r){"use strict";var e=r(79),i=r(48);t.exports=r(80)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=e.getEntry(i(this,"Map"),t);return n&&n.v},set:function(t,n){return e.def(i(this,"Map"),0===t?0:t,n)}},e,!0)},function(t,n,r){var e=r(3),i=r(114).set;t.exports=function(t,n,r){var o,u=n.constructor;return u!==r&&"function"==typeof u&&(o=u.prototype)!==r.prototype&&e(o)&&i&&i(t,o),t}},function(t,n,r){var e=r(3),i=r(4),o=function(t,n){if(i(t),!e(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,e){try{(e=r(10)(Function.call,r(78).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,r){return o(t,r),n?t.__proto__=r:e(t,r),t}}({},!1):void 0),check:o}},function(t,n,r){"use strict";var e=r(79),i=r(48);t.exports=r(80)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return e.def(i(this,"Set"),t=0===t?0:t,t)}},e)},function(t,n,r){"use strict";var e=r(1),i=r(54)(!0);e(e.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),r(60)("includes")},function(t,n,r){"use strict";var e=r(1),i=r(118);e(e.P+e.F*r(120)("includes"),"String",{includes:function(t){return!!~i(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,r){var e=r(119),i=r(13);t.exports=function(t,n,r){if(e(n))throw TypeError("String#"+r+" doesn't accept regex!");return String(i(t))}},function(t,n,r){var e=r(3),i=r(15),o=r(0)("match");t.exports=function(t){var n;return e(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},function(t,n,r){var e=r(0)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(r){try{return n[e]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,r){"use strict";r.r(n);var e=r(82),i="./data/20190318-china.csv",o="./data/20190318-china-targets.csv",u={"2016-11-10":"November event stuff","2016-12-10":"December event stuff","2017-05-10":"May event stuff"};window.addEventListener("DOMContentLoaded",function(){Object(e.a)(i,o,u)})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,