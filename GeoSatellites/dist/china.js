/*! For license information please see china.js.LICENSE.txt */
(()=>{var t,n,e,r,o,i,a,u={3933:(t,n,e)=>{"use strict";e(5666),e(9554),e(4747),e(1038),e(8783),e(8674),e(1539),e(6992),e(3948),e(3210),e(5306),e(4916);const r=function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()};e(9600),e(2222),e(4678);var o=1e-6,i=Math.PI,a=i/2,u=i/4,s=2*i,c=180/i,l=i/180,f=Math.abs,p=Math.atan,h=Math.atan2,d=Math.cos,v=(Math.ceil,Math.exp,Math.floor,Math.hypot,Math.log,Math.pow,Math.sin),g=Math.sign||function(t){return t>0?1:t<0?-1:0},m=Math.sqrt;function y(t){return t>1?a:t<-1?-a:Math.asin(t)}function w(){}function x(){var t,n=[];return{point:function(n,e,r){t.push([n,e,r])},lineStart:function(){n.push(t=[])},lineEnd:w,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}}function b(t,n){return f(t[0]-n[0])<o&&f(t[1]-n[1])<o}function _(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function S(t,n,e,r,o){var i,a,u=[],s=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],a=t[n];if(b(r,a)){if(!r[2]&&!a[2]){for(o.lineStart(),i=0;i<n;++i)o.point((r=t[i])[0],r[1]);return void o.lineEnd()}a[0]+=2e-6}u.push(e=new _(r,t,null,!0)),s.push(e.o=new _(r,null,e,!1)),u.push(e=new _(a,t,null,!1)),s.push(e.o=new _(a,null,e,!0))}})),u.length){for(s.sort(n),E(u),E(s),i=0,a=s.length;i<a;++i)s[i].e=e=!e;for(var c,l,f=u[0];;){for(var p=f,h=!0;p.v;)if((p=p.n)===f)return;c=p.z,o.lineStart();do{if(p.v=p.o.v=!0,p.e){if(h)for(i=0,a=c.length;i<a;++i)o.point((l=c[i])[0],l[1]);else r(p.x,p.n.x,1,o);p=p.n}else{if(h)for(c=p.p.z,i=c.length-1;i>=0;--i)o.point((l=c[i])[0],l[1]);else r(p.x,p.p.x,-1,o);p=p.p}c=(p=p.o).z,h=!h}while(!p.v);o.lineEnd()}}}function E(t){if(n=t.length){for(var n,e,r=0,o=t[0];++r<n;)o.n=e=t[r],e.p=o,o=e;o.n=e=t[0],e.p=o}}Math.tan;class A{constructor(){this._partials=new Float64Array(32),this._n=0}add(t){const n=this._partials;let e=0;for(let r=0;r<this._n&&r<32;r++){const o=n[r],i=t+o,a=Math.abs(t)<Math.abs(o)?t-(i-o):o-(i-t);a&&(n[e++]=a),t=i}return n[e]=t,this._n=e+1,this}valueOf(){const t=this._partials;let n,e,r,o=this._n,i=0;if(o>0){for(i=t[--o];o>0&&(n=i,e=t[--o],i=n+e,r=e-(i-n),!r););o>0&&(r<0&&t[o-1]<0||r>0&&t[o-1]>0)&&(e=2*r,n=i+e,e==n-i&&(i=n))}return i}}function M(t){return[h(t[1],t[0]),y(t[2])]}function k(t){var n=t[0],e=t[1],r=d(e);return[r*d(n),r*v(n),v(e)]}function N(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function C(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function O(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function P(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function j(t){var n=m(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function T(t){return f(t[0])<=i?t[0]:g(t[0])*((f(t[0])+i)%s-i)}function D(t){return Array.from(function*(t){for(const n of t)yield*n}(t))}function L(t,n,e,r){return function(c){var l,f,p,g=n(c),m=x(),w=n(m),b=!1,_={point:E,lineStart:N,lineEnd:O,polygonStart:function(){_.point=P,_.lineStart=L,_.lineEnd=U,f=[],l=[]},polygonEnd:function(){_.point=E,_.lineStart=N,_.lineEnd=O,f=D(f);var t=function(t,n){var e=T(n),r=n[1],c=v(r),l=[v(e),-d(e),0],f=0,p=0,g=new A;1===c?r=a+o:-1===c&&(r=-a-o);for(var m=0,w=t.length;m<w;++m)if(b=(x=t[m]).length)for(var x,b,_=x[b-1],S=T(_),E=_[1]/2+u,M=v(E),N=d(E),O=0;O<b;++O,S=D,M=I,N=R,_=P){var P=x[O],D=T(P),L=P[1]/2+u,I=v(L),R=d(L),U=D-S,F=U>=0?1:-1,H=F*U,V=H>i,q=M*I;if(g.add(h(q*F*v(H),N*R+q*d(H))),f+=V?U+F*s:U,V^S>=e^D>=e){var z=C(k(_),k(P));j(z);var B=C(l,z);j(B);var $=(V^U>=0?-1:1)*y(B[2]);(r>$||r===$&&(z[0]||z[1]))&&(p+=V^U>=0?1:-1)}}return(f<-o||f<o&&g<-1e-12)^1&p}(l,r);f.length?(b||(c.polygonStart(),b=!0),S(f,R,t,e,c)):t&&(b||(c.polygonStart(),b=!0),c.lineStart(),e(null,null,1,c),c.lineEnd()),b&&(c.polygonEnd(),b=!1),f=l=null},sphere:function(){c.polygonStart(),c.lineStart(),e(null,null,1,c),c.lineEnd(),c.polygonEnd()}};function E(n,e){t(n,e)&&c.point(n,e)}function M(t,n){g.point(t,n)}function N(){_.point=M,g.lineStart()}function O(){_.point=E,g.lineEnd()}function P(t,n){p.push([t,n]),w.point(t,n)}function L(){w.lineStart(),p=[]}function U(){P(p[0][0],p[0][1]),w.lineEnd();var t,n,e,r,o=w.clean(),i=m.result(),a=i.length;if(p.pop(),l.push(p),p=null,a)if(1&o){if((n=(e=i[0]).length-1)>0){for(b||(c.polygonStart(),b=!0),c.lineStart(),t=0;t<n;++t)c.point((r=e[t])[0],r[1]);c.lineEnd()}}else a>1&&2&o&&i.push(i.pop().concat(i.shift())),f.push(i.filter(I))}return _}}function I(t){return t.length>1}function R(t,n){return((t=t.x)[0]<0?t[1]-a-o:a-t[1])-((n=n.x)[0]<0?n[1]-a-o:a-n[1])}const U=L((function(){return!0}),(function(t){var n,e=NaN,r=NaN,u=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(s,c){var l=s>0?i:-i,h=f(s-e);f(h-i)<o?(t.point(e,r=(r+c)/2>0?a:-a),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(l,r),t.point(s,r),n=0):u!==l&&h>=i&&(f(e-u)<o&&(e-=u*o),f(s-l)<o&&(s-=l*o),r=function(t,n,e,r){var i,a,u=v(t-e);return f(u)>o?p((v(n)*(a=d(r))*v(e)-v(r)*(i=d(n))*v(t))/(i*a*u)):(n+r)/2}(e,r,s,c),t.point(u,r),t.lineEnd(),t.lineStart(),t.point(l,r),n=0),t.point(e=s,r=c),u=l},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var u;if(null==t)u=e*a,r.point(-i,u),r.point(0,u),r.point(i,u),r.point(i,0),r.point(i,-u),r.point(0,-u),r.point(-i,-u),r.point(-i,0),r.point(-i,u);else if(f(t[0]-n[0])>o){var s=t[0]<n[0]?i:-i;u=e*s/2,r.point(-s,u),r.point(0,u),r.point(s,u)}else r.point(n[0],n[1])}),[-i,-a]);function F(t,n){(n=k(n))[0]-=t,j(n);var e,r=(e=-n[1])>1?0:e<-1?i:Math.acos(e);return((-n[2]<0?-r:r)+s-o)%s}function H(t){var n=d(t),e=6*l,r=n>0,a=f(n)>o;function u(t,e){return d(t)*d(e)>n}function c(t,e,r){var a=[1,0,0],u=C(k(t),k(e)),s=N(u,u),c=u[0],l=s-c*c;if(!l)return!r&&t;var p=n*s/l,h=-n*c/l,d=C(a,u),v=P(a,p);O(v,P(u,h));var g=d,y=N(v,g),w=N(g,g),x=y*y-w*(N(v,v)-1);if(!(x<0)){var b=m(x),_=P(g,(-y-b)/w);if(O(_,v),_=M(_),!r)return _;var S,E=t[0],A=e[0],j=t[1],T=e[1];A<E&&(S=E,E=A,A=S);var D=A-E,L=f(D-i)<o;if(!L&&T<j&&(S=j,j=T,T=S),L||D<o?L?j+T>0^_[1]<(f(_[0]-E)<o?j:T):j<=_[1]&&_[1]<=T:D>i^(E<=_[0]&&_[0]<=A)){var I=P(g,(-y+b)/w);return O(I,v),[_,M(I)]}}}function p(n,e){var o=r?t:i-t,a=0;return n<-o?a|=1:n>o&&(a|=2),e<-o?a|=4:e>o&&(a|=8),a}return L(u,(function(t){var n,e,o,s,l;return{lineStart:function(){s=o=!1,l=1},point:function(f,h){var d,v=[f,h],g=u(f,h),m=r?g?0:p(f,h):g?p(f+(f<0?i:-i),h):0;if(!n&&(s=o=g)&&t.lineStart(),g!==o&&(!(d=c(n,v))||b(n,d)||b(v,d))&&(v[2]=1),g!==o)l=0,g?(t.lineStart(),d=c(v,n),t.point(d[0],d[1])):(d=c(n,v),t.point(d[0],d[1],2),t.lineEnd()),n=d;else if(a&&n&&r^g){var y;m&e||!(y=c(v,n,!0))||(l=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1],3)))}!g||n&&b(n,v)||t.point(v[0],v[1]),n=v,o=g,e=m},lineEnd:function(){o&&t.lineEnd(),n=null},clean:function(){return l|(s&&o)<<1}}}),(function(n,r,o,i){!function(t,n,e,r,o,i){if(e){var a=d(n),u=v(n),c=r*e;null==o?(o=n+r*s,i=n-c/2):(o=F(a,o),i=F(a,i),(r>0?o<i:o>i)&&(o+=r*s));for(var l,f=o;r>0?f>i:f<i;f-=c)l=M([a,-u*d(f),-u*v(f)]),t.point(l[0],l[1])}}(i,t,e,o,n,r)}),r?[0,-t]:[-i,t-i])}var V=1e9,q=-V;function z(t,n,e,r){function i(o,i){return t<=o&&o<=e&&n<=i&&i<=r}function a(o,i,a,s){var l=0,f=0;if(null==o||(l=u(o,a))!==(f=u(i,a))||c(o,i)<0^a>0)do{s.point(0===l||3===l?t:e,l>1?r:n)}while((l=(l+a+4)%4)!==f);else s.point(i[0],i[1])}function u(r,i){return f(r[0]-t)<o?i>0?0:3:f(r[0]-e)<o?i>0?2:1:f(r[1]-n)<o?i>0?1:0:i>0?3:2}function s(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(o){var u,c,l,f,p,h,d,v,g,m,y,w=o,b=x(),_={point:E,lineStart:function(){_.point=A,c&&c.push(l=[]),m=!0,g=!1,d=v=NaN},lineEnd:function(){u&&(A(f,p),h&&g&&b.rejoin(),u.push(b.result())),_.point=E,g&&w.lineEnd()},polygonStart:function(){w=b,u=[],c=[],y=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,o=c.length;e<o;++e)for(var i,a,u=c[e],s=1,l=u.length,f=u[0],p=f[0],h=f[1];s<l;++s)i=p,a=h,p=(f=u[s])[0],h=f[1],a<=r?h>r&&(p-i)*(r-a)>(h-a)*(t-i)&&++n:h<=r&&(p-i)*(r-a)<(h-a)*(t-i)&&--n;return n}(),e=y&&n,i=(u=D(u)).length;(e||i)&&(o.polygonStart(),e&&(o.lineStart(),a(null,null,1,o),o.lineEnd()),i&&S(u,s,n,a,o),o.polygonEnd()),w=o,u=c=l=null}};function E(t,n){i(t,n)&&w.point(t,n)}function A(o,a){var u=i(o,a);if(c&&l.push([o,a]),m)f=o,p=a,h=u,m=!1,u&&(w.lineStart(),w.point(o,a));else if(u&&g)w.point(o,a);else{var s=[d=Math.max(q,Math.min(V,d)),v=Math.max(q,Math.min(V,v))],x=[o=Math.max(q,Math.min(V,o)),a=Math.max(q,Math.min(V,a))];!function(t,n,e,r,o,i){var a,u=t[0],s=t[1],c=0,l=1,f=n[0]-u,p=n[1]-s;if(a=e-u,f||!(a>0)){if(a/=f,f<0){if(a<c)return;a<l&&(l=a)}else if(f>0){if(a>l)return;a>c&&(c=a)}if(a=o-u,f||!(a<0)){if(a/=f,f<0){if(a>l)return;a>c&&(c=a)}else if(f>0){if(a<c)return;a<l&&(l=a)}if(a=r-s,p||!(a>0)){if(a/=p,p<0){if(a<c)return;a<l&&(l=a)}else if(p>0){if(a>l)return;a>c&&(c=a)}if(a=i-s,p||!(a<0)){if(a/=p,p<0){if(a>l)return;a>c&&(c=a)}else if(p>0){if(a<c)return;a<l&&(l=a)}return c>0&&(t[0]=u+c*f,t[1]=s+c*p),l<1&&(n[0]=u+l*f,n[1]=s+l*p),!0}}}}}(s,x,t,n,e,r)?u&&(w.lineStart(),w.point(o,a),y=!1):(g||(w.lineStart(),w.point(s[0],s[1])),w.point(x[0],x[1]),u||w.lineEnd(),y=!1)}d=o,v=a,g=u}return _}}function B(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}const $=t=>t;function X(t,n){return[f(t)>i?t+Math.round(-t/s)*s:t,n]}function Y(t){return function(n,e){return[(n+=t)>i?n-s:n<-i?n+s:n,e]}}function G(t){var n=Y(t);return n.invert=Y(-t),n}function W(t,n){var e=d(t),r=v(t),o=d(n),i=v(n);function a(t,n){var a=d(n),u=d(t)*a,s=v(t)*a,c=v(n),l=c*e+u*r;return[h(s*o-l*i,u*e-c*r),y(l*o+s*i)]}return a.invert=function(t,n){var a=d(n),u=d(t)*a,s=v(t)*a,c=v(n),l=c*o-s*i;return[h(s*o+c*i,u*e+l*r),y(l*e-u*r)]},a}function K(t){return function(n){var e=new Z;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Z(){}function J(t,n){t&&tt.hasOwnProperty(t.type)&&tt[t.type](t,n)}X.invert=X,Z.prototype={constructor:Z,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Q={Feature:function(t,n){J(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,o=e.length;++r<o;)J(e[r].geometry,n)}},tt={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){nt(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)nt(e[r],n,0)},Polygon:function(t,n){et(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,o=e.length;++r<o;)et(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,o=e.length;++r<o;)J(e[r],n)}};function nt(t,n,e){var r,o=-1,i=t.length-e;for(n.lineStart();++o<i;)r=t[o],n.point(r[0],r[1],r[2]);n.lineEnd()}function et(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)nt(t[e],n,1);n.polygonEnd()}function rt(t,n){t&&Q.hasOwnProperty(t.type)?Q[t.type](t,n):J(t,n)}var ot=1/0,it=ot,at=-ot,ut=at;const st={point:function(t,n){t<ot&&(ot=t),t>at&&(at=t),n<it&&(it=n),n>ut&&(ut=n)},lineStart:w,lineEnd:w,polygonStart:w,polygonEnd:w,result:function(){var t=[[ot,it],[at,ut]];return at=ut=-(it=ot=1/0),t}};function ct(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),rt(e,t.stream(st)),n(st.result()),null!=r&&t.clipExtent(r),t}function lt(t,n,e){return ct(t,(function(e){var r=n[1][0]-n[0][0],o=n[1][1]-n[0][1],i=Math.min(r/(e[1][0]-e[0][0]),o/(e[1][1]-e[0][1])),a=+n[0][0]+(r-i*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(o-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([a,u])}),e)}var ft=d(30*l);function pt(t,n){return+n?function(t,n){function e(r,i,a,u,s,c,l,p,d,v,g,w,x,b){var _=l-r,S=p-i,E=_*_+S*S;if(E>4*n&&x--){var A=u+v,M=s+g,k=c+w,N=m(A*A+M*M+k*k),C=y(k/=N),O=f(f(k)-1)<o||f(a-d)<o?(a+d)/2:h(M,A),P=t(O,C),j=P[0],T=P[1],D=j-r,L=T-i,I=S*D-_*L;(I*I/E>n||f((_*D+S*L)/E-.5)>.3||u*v+s*g+c*w<ft)&&(e(r,i,a,u,s,c,j,T,O,A/=N,M/=N,k,x,b),b.point(j,T),e(j,T,O,A,M,k,l,p,d,v,g,w,x,b))}}return function(n){var r,o,i,a,u,s,c,l,f,p,h,d,v={point:g,lineStart:m,lineEnd:w,polygonStart:function(){n.polygonStart(),v.lineStart=x},polygonEnd:function(){n.polygonEnd(),v.lineStart=m}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){l=NaN,v.point=y,n.lineStart()}function y(r,o){var i=k([r,o]),a=t(r,o);e(l,f,c,p,h,d,l=a[0],f=a[1],c=r,p=i[0],h=i[1],d=i[2],16,n),n.point(l,f)}function w(){v.point=g,n.lineEnd()}function x(){m(),v.point=b,v.lineEnd=_}function b(t,n){y(r=t,n),o=l,i=f,a=p,u=h,s=d,v.point=y}function _(){e(l,f,c,p,h,d,o,i,r,a,u,s,16,n),v.lineEnd=w,w()}return v}}(t,n):function(t){return K({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)}var ht,dt=K({point:function(t,n){this.stream.point(t*l,n*l)}});function vt(t,n,e,r,o,i){if(!i)return function(t,n,e,r,o){function i(i,a){return[n+t*(i*=r),e-t*(a*=o)]}return i.invert=function(i,a){return[(i-n)/t*r,(e-a)/t*o]},i}(t,n,e,r,o);var a=d(i),u=v(i),s=a*t,c=u*t,l=a/t,f=u/t,p=(u*e-a*n)/t,h=(u*n+a*e)/t;function g(t,i){return[s*(t*=r)-c*(i*=o)+n,e-c*t-s*i]}return g.invert=function(t,n){return[r*(l*t-f*n+p),o*(h-f*t-l*n)]},g}function gt(t){return function(t){var n,e,r,o,i,a,u,f,p,h,d=150,v=480,g=250,y=0,w=0,x=0,b=0,_=0,S=0,E=1,A=1,M=null,k=U,N=null,C=$,O=.5;function P(t){return f(t[0]*l,t[1]*l)}function j(t){return(t=f.invert(t[0],t[1]))&&[t[0]*c,t[1]*c]}function T(){var t=vt(d,0,0,E,A,S).apply(null,n(y,w)),r=vt(d,v-t[0],g-t[1],E,A,S);return e=function(t,n,e){return(t%=s)?n||e?B(G(t),W(n,e)):G(t):n||e?W(n,e):X}(x,b,_),u=B(n,r),f=B(e,u),a=pt(u,O),D()}function D(){return p=h=null,P}return P.stream=function(t){return p&&h===t?p:p=dt(function(t){return K({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(e)(k(a(C(h=t)))))},P.preclip=function(t){return arguments.length?(k=t,M=void 0,D()):k},P.postclip=function(t){return arguments.length?(C=t,N=r=o=i=null,D()):C},P.clipAngle=function(t){return arguments.length?(k=+t?H(M=t*l):(M=null,U),D()):M*c},P.clipExtent=function(t){return arguments.length?(C=null==t?(N=r=o=i=null,$):z(N=+t[0][0],r=+t[0][1],o=+t[1][0],i=+t[1][1]),D()):null==N?null:[[N,r],[o,i]]},P.scale=function(t){return arguments.length?(d=+t,T()):d},P.translate=function(t){return arguments.length?(v=+t[0],g=+t[1],T()):[v,g]},P.center=function(t){return arguments.length?(y=t[0]%360*l,w=t[1]%360*l,T()):[y*c,w*c]},P.rotate=function(t){return arguments.length?(x=t[0]%360*l,b=t[1]%360*l,_=t.length>2?t[2]%360*l:0,T()):[x*c,b*c,_*c]},P.angle=function(t){return arguments.length?(S=t%360*l,T()):S*c},P.reflectX=function(t){return arguments.length?(E=t?-1:1,T()):E<0},P.reflectY=function(t){return arguments.length?(A=t?-1:1,T()):A<0},P.precision=function(t){return arguments.length?(a=pt(u,O=t*t),D()):m(O)},P.fitExtent=function(t,n){return lt(P,t,n)},P.fitSize=function(t,n){return function(t,n,e){return lt(t,[[0,0],n],e)}(P,t,n)},P.fitWidth=function(t,n){return function(t,n,e){return ct(t,(function(e){var r=+n,o=r/(e[1][0]-e[0][0]),i=(r-o*(e[1][0]+e[0][0]))/2,a=-o*e[0][1];t.scale(150*o).translate([i,a])}),e)}(P,t,n)},P.fitHeight=function(t,n){return function(t,n,e){return ct(t,(function(e){var r=+n,o=r/(e[1][1]-e[0][1]),i=-o*e[0][0],a=(r-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([i,a])}),e)}(P,t,n)},function(){return n=t.apply(this,arguments),P.invert=n.invert&&j,T()}}((function(){return t}))()}function mt(t,n){return[d(n)*v(t),v(n)]}function yt(){return gt(mt).scale(249.5).clipAngle(90.000001)}mt.invert=(ht=y,function(t,n){var e=m(t*t+n*n),r=ht(e),o=v(r),i=d(r);return[h(t*o,e*i),y(e&&n*o/e)]});var wt,xt,bt,_t,St=new A,Et=new A,At={point:w,lineStart:w,lineEnd:w,polygonStart:function(){At.lineStart=Mt,At.lineEnd=Ct},polygonEnd:function(){At.lineStart=At.lineEnd=At.point=w,St.add(f(Et)),Et=new A},result:function(){var t=St/2;return St=new A,t}};function Mt(){At.point=kt}function kt(t,n){At.point=Nt,wt=bt=t,xt=_t=n}function Nt(t,n){Et.add(_t*t-bt*n),bt=t,_t=n}function Ct(){Nt(wt,xt)}const Ot=At;var Pt,jt,Tt,Dt,Lt=0,It=0,Rt=0,Ut=0,Ft=0,Ht=0,Vt=0,qt=0,zt=0,Bt={point:$t,lineStart:Xt,lineEnd:Wt,polygonStart:function(){Bt.lineStart=Kt,Bt.lineEnd=Zt},polygonEnd:function(){Bt.point=$t,Bt.lineStart=Xt,Bt.lineEnd=Wt},result:function(){var t=zt?[Vt/zt,qt/zt]:Ht?[Ut/Ht,Ft/Ht]:Rt?[Lt/Rt,It/Rt]:[NaN,NaN];return Lt=It=Rt=Ut=Ft=Ht=Vt=qt=zt=0,t}};function $t(t,n){Lt+=t,It+=n,++Rt}function Xt(){Bt.point=Yt}function Yt(t,n){Bt.point=Gt,$t(Tt=t,Dt=n)}function Gt(t,n){var e=t-Tt,r=n-Dt,o=m(e*e+r*r);Ut+=o*(Tt+t)/2,Ft+=o*(Dt+n)/2,Ht+=o,$t(Tt=t,Dt=n)}function Wt(){Bt.point=$t}function Kt(){Bt.point=Jt}function Zt(){Qt(Pt,jt)}function Jt(t,n){Bt.point=Qt,$t(Pt=Tt=t,jt=Dt=n)}function Qt(t,n){var e=t-Tt,r=n-Dt,o=m(e*e+r*r);Ut+=o*(Tt+t)/2,Ft+=o*(Dt+n)/2,Ht+=o,Vt+=(o=Dt*t-Tt*n)*(Tt+t),qt+=o*(Dt+n),zt+=3*o,$t(Tt=t,Dt=n)}const tn=Bt;function nn(t){this._context=t}nn.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,s)}},result:w};var en,rn,on,an,un,sn=new A,cn={point:w,lineStart:function(){cn.point=ln},lineEnd:function(){en&&fn(rn,on),cn.point=w},polygonStart:function(){en=!0},polygonEnd:function(){en=null},result:function(){var t=+sn;return sn=new A,t}};function ln(t,n){cn.point=fn,rn=an=t,on=un=n}function fn(t,n){an-=t,un-=n,sn.add(m(an*an+un*un)),an=t,un=n}const pn=cn;function hn(){this._string=[]}function dn(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}hn.prototype={_radius:4.5,_circle:dn(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=dn(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var vn=Math.sqrt(50),gn=Math.sqrt(10),mn=Math.sqrt(2);function yn(t,n,e){var r=(n-t)/Math.max(0,e),o=Math.floor(Math.log(r)/Math.LN10),i=r/Math.pow(10,o);return o>=0?(i>=vn?10:i>=gn?5:i>=mn?2:1)*Math.pow(10,o):-Math.pow(10,-o)/(i>=vn?10:i>=gn?5:i>=mn?2:1)}function wn(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function xn(t){let n=t,e=t;function r(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){const i=r+o>>>1;e(t[i],n)<0?r=i+1:o=i}return r}return 1===t.length&&(n=(n,e)=>t(n)-e,e=function(t){return(n,e)=>wn(t(n),e)}(t)),{left:r,center:function(t,e,o,i){null==o&&(o=0),null==i&&(i=t.length);const a=r(t,e,o,i-1);return a>o&&n(t[a-1],e)>-n(t[a],e)?a-1:a},right:function(t,n,r,o){for(null==r&&(r=0),null==o&&(o=t.length);r<o;){const i=r+o>>>1;e(t[i],n)>0?o=i:r=i+1}return r}}}const bn=xn(wn),_n=bn.right,Sn=(bn.left,xn((function(t){return null===t?NaN:+t})).center,_n);function En(t,n,e){t.prototype=n.prototype=e,e.constructor=t}function An(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function Mn(){}var kn=.7,Nn=1/kn,Cn="\\s*([+-]?\\d+)\\s*",On="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",Pn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",jn=/^#([0-9a-f]{3,8})$/,Tn=new RegExp("^rgb\\("+[Cn,Cn,Cn]+"\\)$"),Dn=new RegExp("^rgb\\("+[Pn,Pn,Pn]+"\\)$"),Ln=new RegExp("^rgba\\("+[Cn,Cn,Cn,On]+"\\)$"),In=new RegExp("^rgba\\("+[Pn,Pn,Pn,On]+"\\)$"),Rn=new RegExp("^hsl\\("+[On,Pn,Pn]+"\\)$"),Un=new RegExp("^hsla\\("+[On,Pn,Pn,On]+"\\)$"),Fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function Hn(){return this.rgb().formatHex()}function Vn(){return this.rgb().formatRgb()}function qn(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=jn.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?zn(n):3===e?new Yn(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?Bn(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?Bn(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=Tn.exec(t))?new Yn(n[1],n[2],n[3],1):(n=Dn.exec(t))?new Yn(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=Ln.exec(t))?Bn(n[1],n[2],n[3],n[4]):(n=In.exec(t))?Bn(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=Rn.exec(t))?Zn(n[1],n[2]/100,n[3]/100,1):(n=Un.exec(t))?Zn(n[1],n[2]/100,n[3]/100,n[4]):Fn.hasOwnProperty(t)?zn(Fn[t]):"transparent"===t?new Yn(NaN,NaN,NaN,0):null}function zn(t){return new Yn(t>>16&255,t>>8&255,255&t,1)}function Bn(t,n,e,r){return r<=0&&(t=n=e=NaN),new Yn(t,n,e,r)}function $n(t){return t instanceof Mn||(t=qn(t)),t?new Yn((t=t.rgb()).r,t.g,t.b,t.opacity):new Yn}function Xn(t,n,e,r){return 1===arguments.length?$n(t):new Yn(t,n,e,null==r?1:r)}function Yn(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function Gn(){return"#"+Kn(this.r)+Kn(this.g)+Kn(this.b)}function Wn(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Kn(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Zn(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Qn(t,n,e,r)}function Jn(t){if(t instanceof Qn)return new Qn(t.h,t.s,t.l,t.opacity);if(t instanceof Mn||(t=qn(t)),!t)return new Qn;if(t instanceof Qn)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,o=Math.min(n,e,r),i=Math.max(n,e,r),a=NaN,u=i-o,s=(i+o)/2;return u?(a=n===i?(e-r)/u+6*(e<r):e===i?(r-n)/u+2:(n-e)/u+4,u/=s<.5?i+o:2-i-o,a*=60):u=s>0&&s<1?0:a,new Qn(a,u,s,t.opacity)}function Qn(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function te(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function ne(t,n,e,r,o){var i=t*t,a=i*t;return((1-3*t+3*i-a)*n+(4-6*i+3*a)*e+(1+3*t+3*i-3*a)*r+a*o)/6}En(Mn,qn,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:Hn,formatHex:Hn,formatHsl:function(){return Jn(this).formatHsl()},formatRgb:Vn,toString:Vn}),En(Yn,Xn,An(Mn,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Yn(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Yn(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Gn,formatHex:Gn,formatRgb:Wn,toString:Wn})),En(Qn,(function(t,n,e,r){return 1===arguments.length?Jn(t):new Qn(t,n,e,null==r?1:r)}),An(Mn,{brighter:function(t){return t=null==t?Nn:Math.pow(Nn,t),new Qn(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?kn:Math.pow(kn,t),new Qn(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,o=2*e-r;return new Yn(te(t>=240?t-240:t+120,o,r),te(t,o,r),te(t<120?t+240:t-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));const ee=t=>()=>t;function re(t,n){var e=n-t;return e?function(t,n){return function(e){return t+e*n}}(t,e):ee(isNaN(t)?n:t)}const oe=function t(n){var e=function(t){return 1==(t=+t)?re:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):ee(isNaN(n)?e:n)}}(n);function r(t,n){var r=e((t=Xn(t)).r,(n=Xn(n)).r),o=e(t.g,n.g),i=e(t.b,n.b),a=re(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=o(n),t.b=i(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function ie(t){return function(n){var e,r,o=n.length,i=new Array(o),a=new Array(o),u=new Array(o);for(e=0;e<o;++e)r=Xn(n[e]),i[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return i=t(i),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=i(t),r.g=a(t),r.b=u(t),r+""}}}function ae(t,n){var e,r=n?n.length:0,o=t?Math.min(r,t.length):0,i=new Array(o),a=new Array(r);for(e=0;e<o;++e)i[e]=de(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<o;++e)a[e]=i[e](t);return a}}function ue(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}}function se(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function ce(t,n){var e,r={},o={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=de(t[e],n[e]):o[e]=n[e];return function(t){for(e in r)o[e]=r[e](t);return o}}ie((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),o=t[r],i=t[r+1],a=r>0?t[r-1]:2*o-i,u=r<n-1?t[r+2]:2*i-o;return ne((e-r/n)*n,a,o,i,u)}})),ie((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),o=t[(r+n-1)%n],i=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return ne((e-r/n)*n,o,i,a,u)}}));var le=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,fe=new RegExp(le.source,"g");function pe(t,n){var e,r,o,i=le.lastIndex=fe.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=le.exec(t))&&(r=fe.exec(n));)(o=r.index)>i&&(o=n.slice(i,o),u[a]?u[a]+=o:u[++a]=o),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:se(e,r)})),i=fe.lastIndex;return i<n.length&&(o=n.slice(i),u[a]?u[a]+=o:u[++a]=o),u.length<2?s[0]?function(t){return function(n){return t(n)+""}}(s[0].x):function(t){return function(){return t}}(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}function he(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,o=n.slice();return function(i){for(e=0;e<r;++e)o[e]=t[e]*(1-i)+n[e]*i;return o}}function de(t,n){var e,r,o=typeof n;return null==n||"boolean"===o?ee(n):("number"===o?se:"string"===o?(e=qn(n))?(n=e,oe):pe:n instanceof qn?oe:n instanceof Date?ue:(r=n,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(n)?ae:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?ce:se:he))(t,n)}function ve(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}}function ge(t){return+t}var me=[0,1];function ye(t){return t}function we(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function xe(t,n,e){var r=t[0],o=t[1],i=n[0],a=n[1];return o<r?(r=we(o,r),i=e(a,i)):(r=we(r,o),i=e(i,a)),function(t){return i(r(t))}}function be(t,n,e){var r=Math.min(t.length,n.length)-1,o=new Array(r),i=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)o[a]=we(t[a],t[a+1]),i[a]=e(n[a],n[a+1]);return function(n){var e=Sn(t,n,1,r)-1;return i[e](o[e](n))}}function _e(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function Se(){return function(){var t,n,e,r,o,i,a=me,u=me,s=de,c=ye;function l(){var t,n,e,s=Math.min(a.length,u.length);return c!==ye&&(t=a[0],n=a[s-1],t>n&&(e=t,t=n,n=e),c=function(e){return Math.max(t,Math.min(n,e))}),r=s>2?be:xe,o=i=null,f}function f(n){return isNaN(n=+n)?e:(o||(o=r(a.map(t),u,s)))(t(c(n)))}return f.invert=function(e){return c(n((i||(i=r(u,a.map(t),se)))(e)))},f.domain=function(t){return arguments.length?(a=Array.from(t,ge),l()):a.slice()},f.range=function(t){return arguments.length?(u=Array.from(t),l()):u.slice()},f.rangeRound=function(t){return u=Array.from(t),s=ve,l()},f.clamp=function(t){return arguments.length?(c=!!t||ye,l()):c!==ye},f.interpolate=function(t){return arguments.length?(s=t,l()):s},f.unknown=function(t){return arguments.length?(e=t,f):e},function(e,r){return t=e,n=r,l()}}()(ye,ye)}function Ee(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}var Ae,Me=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function ke(t){if(!(n=Me.exec(t)))throw new Error("invalid format: "+t);var n;return new Ne({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function Ne(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function Ce(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]}function Oe(t){return(t=Ce(Math.abs(t)))?t[1]:NaN}function Pe(t,n){var e=Ce(t,n);if(!e)return t+"";var r=e[0],o=e[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")}ke.prototype=Ne.prototype,Ne.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const je={"%":(t,n)=>(100*t).toFixed(n),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,n)=>t.toExponential(n),f:(t,n)=>t.toFixed(n),g:(t,n)=>t.toPrecision(n),o:t=>Math.round(t).toString(8),p:(t,n)=>Pe(100*t,n),r:Pe,s:function(t,n){var e=Ce(t,n);if(!e)return t+"";var r=e[0],o=e[1],i=o-(Ae=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+Ce(t,Math.max(0,n+i-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Te(t){return t}var De,Le,Ie,Re=Array.prototype.map,Ue=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Fe(t){var n=t.domain;return t.ticks=function(t){var e=n();return function(t,n,e){var r,o,i,a,u=-1;if(e=+e,(t=+t)==(n=+n)&&e>0)return[t];if((r=n<t)&&(o=t,t=n,n=o),0===(a=yn(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),i=new Array(o=Math.ceil(n-t+1));++u<o;)i[u]=(t+u)*a;else for(a=-a,t=Math.ceil(t*a),n=Math.floor(n*a),i=new Array(o=Math.ceil(n-t+1));++u<o;)i[u]=(t+u)/a;return r&&i.reverse(),i}(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return function(t,n,e,r){var o,i=function(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),o=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),i=r/o;return i>=vn?o*=10:i>=gn?o*=5:i>=mn&&(o*=2),n<t?-o:o}(t,n,e);switch((r=ke(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(o=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Oe(n)/3)))-Oe(Math.abs(t)))}(i,a))||(r.precision=o),Ie(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(o=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Oe(n)-Oe(t))+1}(i,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=o-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(o=function(t){return Math.max(0,-Oe(Math.abs(t)))}(i))||(r.precision=o-2*("%"===r.type))}return Le(r)}(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,o,i=n(),a=0,u=i.length-1,s=i[a],c=i[u],l=10;for(c<s&&(o=s,s=c,c=o,o=a,a=u,u=o);l-- >0;){if((o=yn(s,c,e))===r)return i[a]=s,i[u]=c,n(i);if(o>0)s=Math.floor(s/o)*o,c=Math.ceil(c/o)*o;else{if(!(o<0))break;s=Math.ceil(s*o)/o,c=Math.floor(c*o)/o}r=o}return t},t}function He(){var t=Se();return t.copy=function(){return _e(t,He())},Ee.apply(t,arguments),Fe(t)}function Ve(){}function qe(t){return null==t?Ve:function(){return this.querySelector(t)}}function ze(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function Be(){return[]}function $e(t){return null==t?Be:function(){return this.querySelectorAll(t)}}function Xe(t){return function(){return this.matches(t)}}function Ye(t){return function(n){return n.matches(t)}}De=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?Te:(n=Re.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var o=t.length,i=[],a=0,u=n[0],s=0;o>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),i.push(t.substring(o-=u,o+u)),!((s+=u+1)>r));)u=n[a=(a+1)%n.length];return i.reverse().join(e)}),o=void 0===t.currency?"":t.currency[0]+"",i=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?Te:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(Re.call(t.numerals,String)),s=void 0===t.percent?"%":t.percent+"",c=void 0===t.minus?"−":t.minus+"",l=void 0===t.nan?"NaN":t.nan+"";function f(t){var n=(t=ke(t)).fill,e=t.align,f=t.sign,p=t.symbol,h=t.zero,d=t.width,v=t.comma,g=t.precision,m=t.trim,y=t.type;"n"===y?(v=!0,y="g"):je[y]||(void 0===g&&(g=12),m=!0,y="g"),(h||"0"===n&&"="===e)&&(h=!0,n="0",e="=");var w="$"===p?o:"#"===p&&/[boxX]/.test(y)?"0"+y.toLowerCase():"",x="$"===p?i:/[%p]/.test(y)?s:"",b=je[y],_=/[defgprs%]/.test(y);function S(t){var o,i,s,p=w,S=x;if("c"===y)S=b(t)+S,t="";else{var E=(t=+t)<0||1/t<0;if(t=isNaN(t)?l:b(Math.abs(t),g),m&&(t=function(t){t:for(var n,e=t.length,r=1,o=-1;r<e;++r)switch(t[r]){case".":o=n=r;break;case"0":0===o&&(o=r),n=r;break;default:if(!+t[r])break t;o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(n+1):t}(t)),E&&0==+t&&"+"!==f&&(E=!1),p=(E?"("===f?f:c:"-"===f||"("===f?"":f)+p,S=("s"===y?Ue[8+Ae/3]:"")+S+(E&&"("===f?")":""),_)for(o=-1,i=t.length;++o<i;)if(48>(s=t.charCodeAt(o))||s>57){S=(46===s?a+t.slice(o+1):t.slice(o))+S,t=t.slice(0,o);break}}v&&!h&&(t=r(t,1/0));var A=p.length+t.length+S.length,M=A<d?new Array(d-A+1).join(n):"";switch(v&&h&&(t=r(M+t,M.length?d-S.length:1/0),M=""),e){case"<":t=p+t+S+M;break;case"=":t=p+M+t+S;break;case"^":t=M.slice(0,A=M.length>>1)+p+t+S+M.slice(A);break;default:t=M+p+t+S}return u(t)}return g=void 0===g?6:/[gprs]/.test(y)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:f,formatPrefix:function(t,n){var e=f(((t=ke(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Oe(n)/3))),o=Math.pow(10,-r),i=Ue[8+r/3];return function(t){return e(o*t)+i}}}}({thousands:",",grouping:[3],currency:["$",""]}),Le=De.format,Ie=De.formatPrefix;var Ge=Array.prototype.find;function We(){return this.firstElementChild}var Ke=Array.prototype.filter;function Ze(){return this.children}function Je(t){return new Array(t.length)}function Qe(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function tr(t){return function(){return t}}function nr(t,n,e,r,o,i){for(var a,u=0,s=n.length,c=i.length;u<c;++u)(a=n[u])?(a.__data__=i[u],r[u]=a):e[u]=new Qe(t,i[u]);for(;u<s;++u)(a=n[u])&&(o[u]=a)}function er(t,n,e,r,o,i,a){var u,s,c,l=new Map,f=n.length,p=i.length,h=new Array(f);for(u=0;u<f;++u)(s=n[u])&&(h[u]=c=a.call(s,s.__data__,u,n)+"",l.has(c)?o[u]=s:l.set(c,s));for(u=0;u<p;++u)c=a.call(t,i[u],u,i)+"",(s=l.get(c))?(r[u]=s,s.__data__=i[u],l.delete(c)):e[u]=new Qe(t,i[u]);for(u=0;u<f;++u)(s=n[u])&&l.get(h[u])===s&&(o[u]=s)}function rr(t){return t.__data__}function or(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}Qe.prototype={constructor:Qe,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var ir="http://www.w3.org/1999/xhtml";const ar={svg:"http://www.w3.org/2000/svg",xhtml:ir,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function ur(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),ar.hasOwnProperty(n)?{space:ar[n],local:t}:t}function sr(t){return function(){this.removeAttribute(t)}}function cr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function lr(t,n){return function(){this.setAttribute(t,n)}}function fr(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function pr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function hr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function dr(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function vr(t){return function(){this.style.removeProperty(t)}}function gr(t,n,e){return function(){this.style.setProperty(t,n,e)}}function mr(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function yr(t,n){return t.style.getPropertyValue(n)||dr(t).getComputedStyle(t,null).getPropertyValue(n)}function wr(t){return function(){delete this[t]}}function xr(t,n){return function(){this[t]=n}}function br(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function _r(t){return t.trim().split(/^|\s+/)}function Sr(t){return t.classList||new Er(t)}function Er(t){this._node=t,this._names=_r(t.getAttribute("class")||"")}function Ar(t,n){for(var e=Sr(t),r=-1,o=n.length;++r<o;)e.add(n[r])}function Mr(t,n){for(var e=Sr(t),r=-1,o=n.length;++r<o;)e.remove(n[r])}function kr(t){return function(){Ar(this,t)}}function Nr(t){return function(){Mr(this,t)}}function Cr(t,n){return function(){(n.apply(this,arguments)?Ar:Mr)(this,t)}}function Or(){this.textContent=""}function Pr(t){return function(){this.textContent=t}}function jr(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Tr(){this.innerHTML=""}function Dr(t){return function(){this.innerHTML=t}}function Lr(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Ir(){this.nextSibling&&this.parentNode.appendChild(this)}function Rr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Ur(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===ir&&n.documentElement.namespaceURI===ir?n.createElement(t):n.createElementNS(e,t)}}function Fr(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function Hr(t){var n=ur(t);return(n.local?Fr:Ur)(n)}function Vr(){return null}function qr(){var t=this.parentNode;t&&t.removeChild(this)}function zr(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function Br(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function $r(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Xr(t){return function(){var n=this.__on;if(n){for(var e,r=0,o=-1,i=n.length;r<i;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++o]=e:this.removeEventListener(e.type,e.listener,e.options);++o?n.length=o:delete this.__on}}}function Yr(t,n,e){return function(){var r,o=this.__on,i=function(t){return function(n){t.call(this,n,this.__data__)}}(n);if(o)for(var a=0,u=o.length;a<u;++a)if((r=o[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=i,r.options=e),void(r.value=n);this.addEventListener(t.type,i,e),r={type:t.type,name:t.name,value:n,listener:i,options:e},o?o.push(r):this.__on=[r]}}function Gr(t,n,e){var r=dr(t),o=r.CustomEvent;"function"==typeof o?o=new o(n,e):(o=r.document.createEvent("Event"),e?(o.initEvent(n,e.bubbles,e.cancelable),o.detail=e.detail):o.initEvent(n,!1,!1)),t.dispatchEvent(o)}function Wr(t,n){return function(){return Gr(this,t,n)}}function Kr(t,n){return function(){return Gr(this,t,n.apply(this,arguments))}}Er.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Zr=[null];function Jr(t,n){this._groups=t,this._parents=n}function Qr(){return new Jr([[document.documentElement]],Zr)}Jr.prototype=Qr.prototype={constructor:Jr,select:function(t){"function"!=typeof t&&(t=qe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a,u=n[o],s=u.length,c=r[o]=new Array(s),l=0;l<s;++l)(i=u[l])&&(a=t.call(i,i.__data__,l,u))&&("__data__"in i&&(a.__data__=i.__data__),c[l]=a);return new Jr(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){var n=t.apply(this,arguments);return null==n?[]:ze(n)}}(t):$e(t);for(var n=this._groups,e=n.length,r=[],o=[],i=0;i<e;++i)for(var a,u=n[i],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),o.push(a));return new Jr(r,o)},selectChild:function(t){return this.select(null==t?We:function(t){return function(){return Ge.call(this.children,t)}}("function"==typeof t?t:Ye(t)))},selectChildren:function(t){return this.selectAll(null==t?Ze:function(t){return function(){return Ke.call(this.children,t)}}("function"==typeof t?t:Ye(t)))},filter:function(t){"function"!=typeof t&&(t=Xe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new Jr(r,this._parents)},data:function(t,n){if(!arguments.length)return Array.from(this,rr);var e=n?er:nr,r=this._parents,o=this._groups;"function"!=typeof t&&(t=tr(t));for(var i=o.length,a=new Array(i),u=new Array(i),s=new Array(i),c=0;c<i;++c){var l=r[c],f=o[c],p=f.length,h=ze(t.call(l,l&&l.__data__,c,r)),d=h.length,v=u[c]=new Array(d),g=a[c]=new Array(d),m=s[c]=new Array(p);e(l,f,v,g,m,h,n);for(var y,w,x=0,b=0;x<d;++x)if(y=v[x]){for(x>=b&&(b=x+1);!(w=g[b])&&++b<d;);y._next=w||null}}return(a=new Jr(a,r))._enter=u,a._exit=s,a},enter:function(){return new Jr(this._enter||this._groups.map(Je),this._parents)},exit:function(){return new Jr(this._exit||this._groups.map(Je),this._parents)},join:function(t,n,e){var r=this.enter(),o=this,i=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(o=n(o)),null==e?i.remove():e(i),r&&o?r.merge(o).order():o},merge:function(t){if(!(t instanceof Jr))throw new Error("invalid merge");for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=n[u],l=e[u],f=c.length,p=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(p[h]=s);for(;u<r;++u)a[u]=n[u];return new Jr(a,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,o=t[n],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=or);for(var e=this._groups,r=e.length,o=new Array(r),i=0;i<r;++i){for(var a,u=e[i],s=u.length,c=o[i]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new Jr(o,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){let t=0;for(const n of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var o,i=n[e],a=0,u=i.length;a<u;++a)(o=i[a])&&t.call(o,o.__data__,a,i);return this},attr:function(t,n){var e=ur(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?cr:sr:"function"==typeof n?e.local?hr:pr:e.local?fr:lr)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?vr:"function"==typeof n?mr:gr)(t,n,null==e?"":e)):yr(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?wr:"function"==typeof n?br:xr)(t,n)):this.node()[t]},classed:function(t,n){var e=_r(t+"");if(arguments.length<2){for(var r=Sr(this.node()),o=-1,i=e.length;++o<i;)if(!r.contains(e[o]))return!1;return!0}return this.each(("function"==typeof n?Cr:n?kr:Nr)(e,n))},text:function(t){return arguments.length?this.each(null==t?Or:("function"==typeof t?jr:Pr)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Tr:("function"==typeof t?Lr:Dr)(t)):this.node().innerHTML},raise:function(){return this.each(Ir)},lower:function(){return this.each(Rr)},append:function(t){var n="function"==typeof t?t:Hr(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Hr(t),r=null==n?Vr:"function"==typeof n?n:qe(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(qr)},clone:function(t){return this.select(t?Br:zr)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,o,i=$r(t+""),a=i.length;if(!(arguments.length<2)){for(u=n?Yr:Xr,r=0;r<a;++r)this.each(u(i[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((o=i[r]).type===s.type&&o.name===s.name)return s.value},dispatch:function(t,n){return this.each(("function"==typeof n?Kr:Wr)(t,n))},[Symbol.iterator]:function*(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r,o=t[n],i=0,a=o.length;i<a;++i)(r=o[i])&&(yield r)}};const to=Qr;function no(t){return"string"==typeof t?new Jr([[document.querySelector(t)]],[document.documentElement]):new Jr([[t]],Zr)}e(7941);var eo={value:()=>{}};function ro(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new oo(r)}function oo(t){this._=t}function io(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function ao(t,n){for(var e,r=0,o=t.length;r<o;++r)if((e=t[r]).name===n)return e.value}function uo(t,n,e){for(var r=0,o=t.length;r<o;++r)if(t[r].name===n){t[r]=eo,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}oo.prototype=ro.prototype={constructor:oo,on:function(t,n){var e,r=this._,o=io(t+"",r),i=-1,a=o.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++i<a;)if(e=(t=o[i]).type)r[e]=uo(r[e],t.name,n);else if(null==n)for(e in r)r[e]=uo(r[e],t.name,null);return this}for(;++i<a;)if((e=(t=o[i]).type)&&(e=ao(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new oo(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,o=new Array(e),i=0;i<e;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(i=0,e=(r=this._[t]).length;i<e;++i)r[i].value.apply(n,o)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],o=0,i=r.length;o<i;++o)r[o].value.apply(n,e)}};const so=ro;var co,lo,fo=0,po=0,ho=0,vo=0,go=0,mo=0,yo="object"==typeof performance&&performance.now?performance:Date,wo="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function xo(){return go||(wo(bo),go=yo.now()+mo)}function bo(){go=0}function _o(){this._call=this._time=this._next=null}function So(t,n,e){var r=new _o;return r.restart(t,n,e),r}function Eo(){go=(vo=yo.now())+mo,fo=po=0;try{!function(){xo(),++fo;for(var t,n=co;n;)(t=go-n._time)>=0&&n._call.call(null,t),n=n._next;--fo}()}finally{fo=0,function(){for(var t,n,e=co,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:co=n);lo=t,Mo(r)}(),go=0}}function Ao(){var t=yo.now(),n=t-vo;n>1e3&&(mo-=n,vo=t)}function Mo(t){fo||(po&&(po=clearTimeout(po)),t-go>24?(t<1/0&&(po=setTimeout(Eo,t-yo.now()-mo)),ho&&(ho=clearInterval(ho))):(ho||(vo=yo.now(),ho=setInterval(Ao,1e3)),fo=1,wo(Eo)))}function ko(t,n,e){var r=new _o;return n=null==n?0:+n,r.restart((e=>{r.stop(),t(e+n)}),n,e),r}_o.prototype=So.prototype={constructor:_o,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?xo():+e)+(null==n?0:+n),this._next||lo===this||(lo?lo._next=this:co=this,lo=this),this._call=t,this._time=e,Mo()},stop:function(){this._call&&(this._call=null,this._time=1/0,Mo())}};var No=so("start","end","cancel","interrupt"),Co=[];function Oo(t,n,e,r,o,i){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,o=t.__transition;function i(s){var c,l,f,p;if(1!==e.state)return u();for(c in o)if((p=o[c]).name===e.name){if(3===p.state)return ko(i);4===p.state?(p.state=6,p.timer.stop(),p.on.call("interrupt",t,t.__data__,p.index,p.group),delete o[c]):+c<n&&(p.state=6,p.timer.stop(),p.on.call("cancel",t,t.__data__,p.index,p.group),delete o[c])}if(ko((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(s))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(f=e.tween.length),c=0,l=-1;c<f;++c)(p=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(r[++l]=p);r.length=l+1}}function a(n){for(var o=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),i=-1,a=r.length;++i<a;)r[i].call(t,o);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete o[n],o)return;delete t.__transition}o[n]=e,e.timer=So((function(t){e.state=1,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:o,on:No,tween:Co,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:0})}function Po(t,n){var e=To(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function jo(t,n){var e=To(t,n);if(e.state>3)throw new Error("too late; already running");return e}function To(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var Do,Lo=180/Math.PI,Io={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function Ro(t,n,e,r,o,i){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(n,t)*Lo,skewX:Math.atan(s)*Lo,scaleX:a,scaleY:u}}function Uo(t,n,e,r){function o(t){return t.length?t.pop()+" ":""}return function(i,a){var u=[],s=[];return i=t(i),a=t(a),function(t,r,o,i,a,u){if(t!==o||r!==i){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:se(t,o)},{i:s-2,x:se(r,i)})}else(o||i)&&a.push("translate("+o+n+i+e)}(i.translateX,i.translateY,a.translateX,a.translateY,u,s),function(t,n,e,i){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),i.push({i:e.push(o(e)+"rotate(",null,r)-2,x:se(t,n)})):n&&e.push(o(e)+"rotate("+n+r)}(i.rotate,a.rotate,u,s),function(t,n,e,i){t!==n?i.push({i:e.push(o(e)+"skewX(",null,r)-2,x:se(t,n)}):n&&e.push(o(e)+"skewX("+n+r)}(i.skewX,a.skewX,u,s),function(t,n,e,r,i,a){if(t!==e||n!==r){var u=i.push(o(i)+"scale(",null,",",null,")");a.push({i:u-4,x:se(t,e)},{i:u-2,x:se(n,r)})}else 1===e&&1===r||i.push(o(i)+"scale("+e+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,u,s),i=a=null,function(t){for(var n,e=-1,r=s.length;++e<r;)u[(n=s[e]).i]=n.x(t);return u.join("")}}}var Fo=Uo((function(t){const n=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return n.isIdentity?Io:Ro(n.a,n.b,n.c,n.d,n.e,n.f)}),"px, ","px)","deg)"),Ho=Uo((function(t){return null==t?Io:(Do||(Do=document.createElementNS("http://www.w3.org/2000/svg","g")),Do.setAttribute("transform",t),(t=Do.transform.baseVal.consolidate())?Ro((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):Io)}),", ",")",")");function Vo(t,n){var e,r;return function(){var o=jo(this,t),i=o.tween;if(i!==e)for(var a=0,u=(r=e=i).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}o.tween=r}}function qo(t,n,e){var r,o;if("function"!=typeof e)throw new Error;return function(){var i=jo(this,t),a=i.tween;if(a!==r){o=(r=a).slice();for(var u={name:n,value:e},s=0,c=o.length;s<c;++s)if(o[s].name===n){o[s]=u;break}s===c&&o.push(u)}i.tween=o}}function zo(t,n,e){var r=t._id;return t.each((function(){var t=jo(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return To(t,r).value[n]}}function Bo(t,n){var e;return("number"==typeof n?se:n instanceof qn?oe:(e=qn(n))?(n=e,oe):pe)(t,n)}function $o(t){return function(){this.removeAttribute(t)}}function Xo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Yo(t,n,e){var r,o,i=e+"";return function(){var a=this.getAttribute(t);return a===i?null:a===r?o:o=n(r=a,e)}}function Go(t,n,e){var r,o,i=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===i?null:a===r?o:o=n(r=a,e)}}function Wo(t,n,e){var r,o,i;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttribute(t))===(u=s+"")?null:a===r&&u===o?i:(o=u,i=n(r=a,s));this.removeAttribute(t)}}function Ko(t,n,e){var r,o,i;return function(){var a,u,s=e(this);if(null!=s)return(a=this.getAttributeNS(t.space,t.local))===(u=s+"")?null:a===r&&u===o?i:(o=u,i=n(r=a,s));this.removeAttributeNS(t.space,t.local)}}function Zo(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function Jo(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Qo(t,n){var e,r;function o(){var o=n.apply(this,arguments);return o!==r&&(e=(r=o)&&Jo(t,o)),e}return o._value=n,o}function ti(t,n){var e,r;function o(){var o=n.apply(this,arguments);return o!==r&&(e=(r=o)&&Zo(t,o)),e}return o._value=n,o}function ni(t,n){return function(){Po(this,t).delay=+n.apply(this,arguments)}}function ei(t,n){return n=+n,function(){Po(this,t).delay=n}}function ri(t,n){return function(){jo(this,t).duration=+n.apply(this,arguments)}}function oi(t,n){return n=+n,function(){jo(this,t).duration=n}}function ii(t,n){if("function"!=typeof n)throw new Error;return function(){jo(this,t).ease=n}}function ai(t,n,e){var r,o,i=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Po:jo;return function(){var a=i(this,t),u=a.on;u!==r&&(o=(r=u).copy()).on(n,e),a.on=o}}var ui=to.prototype.constructor;function si(t){return function(){this.style.removeProperty(t)}}function ci(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function li(t,n,e){var r,o;function i(){var i=n.apply(this,arguments);return i!==o&&(r=(o=i)&&ci(t,i,e)),r}return i._value=n,i}function fi(t){return function(n){this.textContent=t.call(this,n)}}function pi(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&fi(r)),n}return r._value=t,r}var hi=0;function di(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function vi(){return++hi}var gi=to.prototype;di.prototype=function(t){return to().transition(t)}.prototype={constructor:di,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=qe(t));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var u,s,c=r[a],l=c.length,f=i[a]=new Array(l),p=0;p<l;++p)(u=c[p])&&(s=t.call(u,u.__data__,p,c))&&("__data__"in u&&(s.__data__=u.__data__),f[p]=s,Oo(f[p],n,e,p,f,To(u,e)));return new di(i,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=$e(t));for(var r=this._groups,o=r.length,i=[],a=[],u=0;u<o;++u)for(var s,c=r[u],l=c.length,f=0;f<l;++f)if(s=c[f]){for(var p,h=t.call(s,s.__data__,f,c),d=To(s,e),v=0,g=h.length;v<g;++v)(p=h[v])&&Oo(p,n,e,v,h,d);i.push(h),a.push(s)}return new di(i,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Xe(t));for(var n=this._groups,e=n.length,r=new Array(e),o=0;o<e;++o)for(var i,a=n[o],u=a.length,s=r[o]=[],c=0;c<u;++c)(i=a[c])&&t.call(i,i.__data__,c,a)&&s.push(i);return new di(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,o=e.length,i=Math.min(r,o),a=new Array(r),u=0;u<i;++u)for(var s,c=n[u],l=e[u],f=c.length,p=a[u]=new Array(f),h=0;h<f;++h)(s=c[h]||l[h])&&(p[h]=s);for(;u<r;++u)a[u]=n[u];return new di(a,this._parents,this._name,this._id)},selection:function(){return new ui(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=vi(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=To(a,n);Oo(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new di(r,this._parents,t,e)},call:gi.call,nodes:gi.nodes,node:gi.node,size:gi.size,empty:gi.empty,each:gi.each,on:function(t,n){var e=this._id;return arguments.length<2?To(this.node(),e).on.on(t):this.each(ai(e,t,n))},attr:function(t,n){var e=ur(t),r="transform"===e?Ho:Bo;return this.attrTween(t,"function"==typeof n?(e.local?Ko:Wo)(e,r,zo(this,"attr."+t,n)):null==n?(e.local?Xo:$o)(e):(e.local?Go:Yo)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=ur(t);return this.tween(e,(r.local?Qo:ti)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?Fo:Bo;return null==n?this.styleTween(t,function(t,n){var e,r,o;return function(){var i=yr(this,t),a=(this.style.removeProperty(t),yr(this,t));return i===a?null:i===e&&a===r?o:o=n(e=i,r=a)}}(t,r)).on("end.style."+t,si(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,o,i;return function(){var a=yr(this,t),u=e(this),s=u+"";return null==u&&(this.style.removeProperty(t),s=u=yr(this,t)),a===s?null:a===r&&s===o?i:(o=s,i=n(r=a,u))}}(t,r,zo(this,"style."+t,n))).each(function(t,n){var e,r,o,i,a="style."+n,u="end."+a;return function(){var s=jo(this,t),c=s.on,l=null==s.value[a]?i||(i=si(n)):void 0;c===e&&o===l||(r=(e=c).copy()).on(u,o=l),s.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,o,i=e+"";return function(){var a=yr(this,t);return a===i?null:a===r?o:o=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,li(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(zo(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,pi(t))},remove:function(){return this.on("end.remove",function(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}(this._id))},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,o=To(this.node(),e).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===t)return r.value;return null}return this.each((null==n?Vo:qo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ni:ei)(n,t)):To(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?ri:oi)(n,t)):To(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ii(n,t)):To(this.node(),n).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,n){return function(){var e=n.apply(this,arguments);if("function"!=typeof e)throw new Error;jo(this,t).ease=e}}(this._id,t))},end:function(){var t,n,e=this,r=e._id,o=e.size();return new Promise((function(i,a){var u={value:a},s={value:function(){0==--o&&i()}};e.each((function(){var e=jo(this,r),o=e.on;o!==t&&((n=(t=o).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(s)),e.on=n})),0===o&&i()}))},[Symbol.iterator]:gi[Symbol.iterator]};var mi={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function yi(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))throw new Error(`transition ${n} not found`);return e}to.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,o,i=t.__transition,a=!0;if(i){for(o in n=null==n?null:n+"",i)(e=i[o]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete i[o]):a=!1;a&&delete t.__transition}}(this,t)}))},to.prototype.transition=function(t){var n,e;t instanceof di?(n=t._id,t=t._name):(n=vi(),(e=mi).time=xo(),t=null==t?null:t+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,u=r[i],s=u.length,c=0;c<s;++c)(a=u[c])&&Oo(a,t,n,c,u,e||yi(a,n));return new di(r,this._parents,t,n)};var wi=no(".tooltip");function xi(t){return t}function bi(t,n){var e=n.id,r=n.bbox,o=null==n.properties?{}:n.properties,i=function(t,n){var e=function(t){if(null==t)return xi;var n,e,r=t.scale[0],o=t.scale[1],i=t.translate[0],a=t.translate[1];return function(t,u){u||(n=e=0);var s=2,c=t.length,l=new Array(c);for(l[0]=(n+=t[0])*r+i,l[1]=(e+=t[1])*o+a;s<c;)l[s]=t[s],++s;return l}}(t.transform),r=t.arcs;function o(t,n){n.length&&n.pop();for(var o=r[t<0?~t:t],i=0,a=o.length;i<a;++i)n.push(e(o[i],i));t<0&&function(t,n){for(var e,r=t.length,o=r-n;o<--r;)e=t[o],t[o++]=t[r],t[r]=e}(n,a)}function i(t){return e(t)}function a(t){for(var n=[],e=0,r=t.length;e<r;++e)o(t[e],n);return n.length<2&&n.push(n[0]),n}function u(t){for(var n=a(t);n.length<4;)n.push(n[0]);return n}function s(t){return t.map(u)}return function t(n){var e,r=n.type;switch(r){case"GeometryCollection":return{type:r,geometries:n.geometries.map(t)};case"Point":e=i(n.coordinates);break;case"MultiPoint":e=n.coordinates.map(i);break;case"LineString":e=a(n.arcs);break;case"MultiLineString":e=n.arcs.map(a);break;case"Polygon":e=s(n.arcs);break;case"MultiPolygon":e=n.arcs.map(s);break;default:return null}return{type:r,coordinates:e}}(n)}(t,n);return null==e&&null==r?{type:"Feature",properties:o,geometry:i}:null==r?{type:"Feature",id:e,properties:o,geometry:i}:{type:"Feature",id:e,bbox:r,properties:o,geometry:i}}var _i,Si,Ei,Ai,Mi=function(){var t=10,n=10,e=10,r=10,o={x:{min:-1,max:1},y:{min:-.309,max:.309}},i={x:{min:-.151,max:.151},y:{min:-.151,max:.151}},a=yt(),u=function(t,n){var e,r,o=4.5;function i(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),rt(t,e(r))),r.result()}return i.area=function(t){return rt(t,e(Ot)),Ot.result()},i.measure=function(t){return rt(t,e(pn)),pn.result()},i.bounds=function(t){return rt(t,e(st)),st.result()},i.centroid=function(t){return rt(t,e(tn)),tn.result()},i.projection=function(n){return arguments.length?(e=null==n?(t=null,$):(t=n).stream,i):t},i.context=function(t){return arguments.length?(r=null==t?(n=null,new hn):new nn(n=t),"function"!=typeof o&&r.pointRadius(o),i):n},i.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),i):o},i.projection(t).context(n)}(),s=0,c=0,l=5,f=He(),p=He();function h(h){var v=h.datum();!function(t){var n=t.data,e=t.container.selectAll("svg").data([n]).enter().append("svg").append("g");e.append("g").attr("class","g-orbit").append("path").attr("fill","none").attr("stroke","#b5bdc1").attr("stroke-width",2);var r=e.append("g").attr("class","g-earth");r.append("circle").attr("class","water").attr("fill","#b7c7d1"),r.append("path").attr("class","land").style("fill","#f2f1ee").style("stroke","#ccc").style("stroke-width","0.3px"),e.append("g").attr("class","g-plot")}({container:h,data:v}),f.domain([o.x.min,o.x.max]).range([0,s]),p.domain([o.y.min,o.y.max]).range([c,0]),function(h){var v,g,m=h.container,y=h.data,w=m.select("svg").attr("viewBox","0 0 "+(s+r+n)+" "+(c+t+e)).select("g").attr("transform","translate("+r+","+t+")"),x=w.select(".g-earth"),b=Math.abs(p(i.y.max)-p(0));a.translate([f(0),p(0)]).scale(b).rotate(Ei),u.projection(a),x.select(".water").attr("cx",f(0)).attr("cy",p(0)).attr("r",a.scale()),x.select(".land").datum((v=Si,g=Si.objects.countries,"string"==typeof g&&(g=v.objects[g]),"GeometryCollection"===g.type?{type:"FeatureCollection",features:g.geometries.map((function(t){return bi(v,t)}))}:bi(v,g))).attr("d",u);var _,S,E,A,M,k=w.select(".g-orbit path"),N=Math.abs(f(o.x.max)-f(0)),C=Math.abs(p(o.y.max)-p(0));k.attr("d",(S=(_={cx:f(0),cy:p(0),rx:N,ry:C}).cx,E=_.cy,A=_.rx,M=_.ry,S=parseFloat(S,10),E=parseFloat(E,10),A=parseFloat(A,10),M=parseFloat(M,10),"\n        M".concat(S-A,", ").concat(E,"\n        a").concat(A,", ").concat(M," 0 1, 0 ").concat(2*A,", 0\n        a").concat(A,", ").concat(M," 0 1, 0 ").concat(-2*A,", 0\n        "))),w.select(".g-plot").selectAll(".satellite").data(y,(function(t){return t.sat_name})).join((function(t){return t.append("circle").attr("class","satellite").classed("satellite--perp",(function(t){return t.is_perp})).classed("satellite--target",(function(t){return t.is_target})).attr("r",l).attr("data-x",(function(t){return t.x_coord})).attr("data-y",(function(t){return t.y_coord})).attr("transform",(function(t){return"translate(".concat(f(t.x_coord),", ").concat(p(t.y_coord),")")})).on("mouseover",d.mouseover).on("mouseleave",d.mouseleave)}),(function(t){return t.attr("data-x",(function(t){return t.x_coord})).attr("data-y",(function(t){return t.y_coord})).call((function(t){return t.transition(Ai).attr("transform",(function(t){return"translate(".concat(f(t.x_coord),", ").concat(p(t.y_coord),")")}))}))}))}({container:h,data:v})}var d={mouseover:function(t,n){d.showTooltip(t,n),no(this).classed("is-active",!0)},mouseleave:function(){wi.transition().duration(500).style("opacity",0),no(this).classed("is-active",!1)},showTooltip:function(t,n){var e=[{Date:n.timestamp},{Longitude:n.long_string}];!function(t,n){var e=t.pageY-100,r=t.pageX;r+10>document.body.clientWidth-115&&(r=document.body.clientWidth+5-175),e<25&&(e+=85),wi.transition().duration(200).style("opacity",.9).on("end",(function(){wi.classed("isActive",!0),wi.select(".tooltip-close").on("click",this.hide)})),wi.html(n).style("visibility","visible").style("left",r+"px").style("top",e+"px")}(t,'\n      <p class="tooltip-heading">\n        '.concat(n.sat_name,"</p>\n      ").concat(function(t){var n=arguments.length>1&&void 0!==arguments[1]&&arguments[1],e="";return n&&(e='<ul class="tooltip-list">'),t.forEach((function(t,r){var o=null;t.class&&(o=t.class);var i="",a="<br />";n&&(i='<li class="'.concat(o,'">'),a="</li>");var u=Object.keys(t)[0];e+="".concat(i,'<span class="tooltip-label">').concat(u,":</span> ").concat(t[u]).concat(a)})),n&&(e+="</ul>"),e}(e,!0)))}};return h.width=function(){return arguments.length?(s=(arguments.length<=0?void 0:arguments[0])-r-n,h):s},h.height=function(){return arguments.length?(c=(arguments.length<=0?void 0:arguments[0])-t-e,l=Math.max(.025*c,3),Math.max(.0117*c,1),h):c},h}();const ki=function(t){var n;(_i=no(t.container)).datum(t.data),Ai=t.transitionDuration,n=Math.min(_i.node().offsetWidth,window.innerHeight),Mi.width(n).height(n/3),_i.call(Mi)},Ni=function(t,n){Si=t,Ei=n},Ci={btns:document.querySelectorAll(".speed-btn"),init:function(t){var n=t.currentSpeed,e=t.onClick;document.querySelector(".speed-btn--"+n).classList.add("is-active"),Array.from(this.btns).forEach((function(t){t.addEventListener("click",e)}))},getCurrentSpeed:function(){return document.querySelector(".speed-btn.is-active").dataset.speed}};e(3710),e(1058),e(2564);var Oi=e(9365),Pi={el:document.querySelector(".timeline-bar"),btnControls:document.querySelector(".timeline-btn"),controlBtn:document.querySelector(".control-btn"),currentDateEl:document.querySelector(".timeline-current-date"),playing:!1,timer:null,transitionDuration:0,endDate:0,startDate:0,updateCurrentDate:function(t){this.currentDateEl.innerHTML="".concat(this.formatDate(t))},formatDate:function(t){return t=new Date(t),t=new Date(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),0,0,0),"".concat(t.getMonth()+1,"/").concat(t.getDate(),"/").concat(t.getFullYear())},getCurrentDate:function(){return this.el.noUiSlider.get()},setupTimeline:function(t){var n=t.startDate,e=t.endDate,r=t.onUpdate;this.endDate=e,this.startDate=n,Oi.create(this.el,{start:[n],connect:!0,behaviour:"tap-drag",range:{min:n,max:e},format:{from:function(t){return parseInt(t)},to:function(t){return parseInt(t)}},pips:{mode:"range",density:15}}),this.el.noUiSlider.set(n),this.setupBtnControls(),this.el.noUiSlider.on("update",r),this.el.noUiSlider.on("slide",(function(t,n){var e=new Date(t[n]);e=new Date(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()).getTime(),Pi.el.noUiSlider.set(e)})),this.el.querySelector("[data-value='".concat(n,"']")).innerHTML=this.formatDate(n),this.el.querySelector("[data-value='".concat(e,"']")).innerHTML=this.formatDate(e)},setupBtnControls:function(){this.btnControls.addEventListener("click",(function(){Pi.getCurrentDate()==Pi.endDate&&Pi.el.noUiSlider.set(Pi.startDate),1!=Pi.playing?Pi.startTimeline():Pi.stopTimeline()}))},startTimeline:function(){Pi.timer=setInterval((function(){var t=Pi.getCurrentDate(),n=new Date(t),e=n.setDate(n.getDate()+1);Pi.el.noUiSlider.set(e)}),Pi.transitionDuration),Pi.controlBtn.classList.remove("play-btn"),Pi.controlBtn.classList.add("pause-btn"),Pi.playing=!0},stopTimeline:function(){clearInterval(Pi.timer),Pi.playing=!1,Pi.btnControls.classList.remove("pause-btn"),Pi.btnControls.classList.add("play-btn")}};const ji=Pi;e(7327),e(6699),e(2023),e(189),e(1249),e(1532),e(2707),e(9753),e(2526),e(1817),e(2165),e(7042),e(8309);var Ti={},Di={};function Li(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function Ii(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function Ri(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function Ui(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,o=[],i=t.length,a=0,u=0,s=i<=0,c=!1;function l(){if(s)return Di;if(c)return c=!1,Ti;var n,r,o=a;if(34===t.charCodeAt(o)){for(;a++<i&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=i?s=!0:10===(r=t.charCodeAt(a++))?c=!0:13===r&&(c=!0,10===t.charCodeAt(a)&&++a),t.slice(o+1,n-1).replace(/""/g,'"')}for(;a<i;){if(10===(r=t.charCodeAt(n=a++)))c=!0;else if(13===r)c=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(o,n)}return s=!0,t.slice(o,i)}for(10===t.charCodeAt(i-1)&&--i,13===t.charCodeAt(i-1)&&--i;(r=l())!==Di;){for(var f=[];r!==Ti&&r!==Di;)f.push(r),r=l();n&&null==(f=n(f,u++))||o.push(f)}return o}function o(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function i(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?function(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),o=t.getUTCSeconds(),i=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+Ri(-n,6):n>9999?"+"+Ri(n,6):Ri(n,4))+"-"+Ri(t.getUTCMonth()+1,2)+"-"+Ri(t.getUTCDate(),2)+(i?"T"+Ri(e,2)+":"+Ri(r,2)+":"+Ri(o,2)+"."+Ri(i,3)+"Z":o?"T"+Ri(e,2)+":"+Ri(r,2)+":"+Ri(o,2)+"Z":r||e?"T"+Ri(e,2)+":"+Ri(r,2)+"Z":"")}(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,o,i=r(t,(function(t,r){if(e)return e(t,r-1);o=t,e=n?function(t,n){var e=Li(t);return function(r,o){return n(e(r),o,t)}}(t,n):Li(t)}));return i.columns=o||[],i},parseRows:r,format:function(n,e){return null==e&&(e=Ii(n)),[e.map(a).join(t)].concat(o(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=Ii(t)),o(t,n).join("\n")},formatRows:function(t){return t.map(i).join("\n")},formatRow:i,formatValue:a}}var Fi=Ui(","),Hi=Fi.parse,Vi=(Fi.parseRows,Fi.format,Fi.formatBody,Fi.formatRows,Fi.formatRow,Fi.formatValue,Ui("\t")),qi=Vi.parse;function zi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}function Bi(t,n){return fetch(t,n).then(zi)}function $i(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),Bi(n,e).then((function(n){return t(n,r)}))}}Vi.parseRows,Vi.format,Vi.formatBody,Vi.formatRows,Vi.formatRow,Vi.formatValue;var Xi=$i(Hi);function Yi(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}function Gi(t,n){return fetch(t,n).then(Yi)}function Wi(t){return function(t){if(Array.isArray(t))return Ji(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||Zi(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Ki(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],r=!0,o=!1,i=void 0;try{for(var a,u=t[Symbol.iterator]();!(r=(a=u.next()).done)&&(e.push(a.value),!n||e.length!==n);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==u.return||u.return()}finally{if(o)throw i}}return e}}(t,n)||Zi(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Zi(t,n){if(t){if("string"==typeof t)return Ji(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?Ji(t,n):void 0}}function Ji(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}function Qi(t,n,e,r,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,o)}function ta(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function a(t){Qi(i,r,o,a,u,"next",t)}function u(t){Qi(i,r,o,a,u,"throw",t)}a(void 0)}))}}$i(qi);var na=["US","China","Russia"];function ea(t){return ra.apply(this,arguments)}function ra(){return(ra=ta(regeneratorRuntime.mark((function t(n){var e,r;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return e=Xi(n),r=Promise.all([e]).then((function(t){var n=oa(Ki(t,1)[0]);n.forEach((function(t){ia(t,!0)}));var e=Array.from(new Set(Wi(n.map((function(t){return t.timestamp}))))),r=Array.from(new Set(Wi(n.map((function(t){return t.sat_name}))))),o={perp:new Map};return e.forEach((function(t,e){var i=[];r.forEach((function(e){var r=n.filter((function(n){return n.timestamp===t&&n.sat_name===e}));r.length&&i.push(r[0])}));var a=new Date(t);a=new Date(a.getUTCFullYear(),a.getUTCMonth(),a.getUTCDate(),0,0,0,0).getTime(),o.perp.set(a,i)})),o.perp=new Map(Array.from(o.perp).sort((function(t,n){return t[0]-n[0]}))),o})),t.abrupt("return",r);case 3:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function oa(t){return t.filter((function(t){return"TRUE"===t.include}))}function ia(t,n){return t.date=new Date(t.timestamp).getTime(),t.include="TRUE"==t.include,t.longitude=+t.longitude,t.x_coord=+t.x_coord,t.y_coord=+t.y_coord,t.country=t.sat_operator,t.long_string=t.long_string.replace("�","&#176;"),t.country.includes("U.S.")&&(t.country="US"),na.includes(t.country)||(t.country="Other"),t.is_perp=n,t.is_geo=!n,t}function aa(){return ua.apply(this,arguments)}function ua(){return(ua=ta(regeneratorRuntime.mark((function t(){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=Gi("./data/world-110m.json").then((function(t){return t})),t.abrupt("return",n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function sa(t,n,e,r,o,i,a){try{var u=t[i](a),s=u.value}catch(t){return void e(t)}u.done?n(s):Promise.resolve(s).then(r,o)}function ca(t){return function(){var n=this,e=arguments;return new Promise((function(r,o){var i=t.apply(n,e);function a(t){sa(i,r,o,a,u,"next",t)}function u(t){sa(i,r,o,a,u,"throw",t)}a(void 0)}))}}var la,fa,pa,ha,da,va={half:400,"1x":200,"2x":100},ga=r(),ma="1x",ya=va[ma];function wa(){return(wa=ca(regeneratorRuntime.mark((function t(n,e,r,o){var i;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ea(n);case 2:return la=t.sent,t.next=5,aa();case 5:fa=t.sent,Ni(fa,o),i=Array.from(la.perp.keys()),ha=i[0],da=i[i.length-1],pa=ha,Sa(e,r),ba(),_a(),Ea();case 15:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function xa(){pa=ji.getCurrentDate();var t=la.perp.get(pa);t&&ki({data:t,transitionDuration:ya,container:".chart"})}function ba(){Ci.init({currentSpeed:ma,onClick:function(t){ji.stopTimeline(),Array.from(Ci.btns).forEach((function(t){return t.classList.remove("is-active")})),this.classList.add("is-active"),ma=Ci.getCurrentSpeed(),ya=va[ma],ji.transitionDuration=ya,ji.startTimeline()}})}function _a(){ji.transitionDuration=ya,ji.setupTimeline({startDate:ha,endDate:da,transitionDuration:ya,onUpdate:function(t,n){xa(),ji.updateCurrentDate(pa),pa==da&&ji.stopTimeline()}})}function Sa(t,n){Array.from(document.querySelectorAll(".satellite-name")).forEach((function(n){n.textContent=t})),Array.from(document.querySelectorAll(".satellite-country")).forEach((function(t){t.textContent=n}))}function Ea(){document.querySelector(".loading-container").style.display="none",document.querySelectorAll(".hide-on-load").forEach((function(t){return t.classList.remove("hide-on-load")}))}window.addEventListener("resize",(function(){var t=r();ga!=t&&(ga=t,xa())}));var Aa=[-60,-18];window.addEventListener("DOMContentLoaded",(function(){!function(t,n,e,r){wa.apply(this,arguments)}("./data/data-china.csv","SJ-17","Chinese",Aa)}))},3099:t=>{t.exports=function(t){if("function"!=typeof t)throw TypeError(String(t)+" is not a function");return t}},6077:(t,n,e)=>{var r=e(111);t.exports=function(t){if(!r(t)&&null!==t)throw TypeError("Can't set "+String(t)+" as a prototype");return t}},1223:(t,n,e)=>{var r=e(5112),o=e(30),i=e(3070),a=r("unscopables"),u=Array.prototype;null==u[a]&&i.f(u,a,{configurable:!0,value:o(null)}),t.exports=function(t){u[a][t]=!0}},1530:(t,n,e)=>{"use strict";var r=e(8710).charAt;t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},5787:t=>{t.exports=function(t,n,e){if(!(t instanceof n))throw TypeError("Incorrect "+(e?e+" ":"")+"invocation");return t}},9670:(t,n,e)=>{var r=e(111);t.exports=function(t){if(!r(t))throw TypeError(String(t)+" is not an object");return t}},8533:(t,n,e)=>{"use strict";var r=e(2092).forEach,o=e(9341)("forEach");t.exports=o?[].forEach:function(t){return r(this,t,arguments.length>1?arguments[1]:void 0)}},8457:(t,n,e)=>{"use strict";var r=e(9974),o=e(7908),i=e(3411),a=e(7659),u=e(7466),s=e(6135),c=e(1246);t.exports=function(t){var n,e,l,f,p,h,d=o(t),v="function"==typeof this?this:Array,g=arguments.length,m=g>1?arguments[1]:void 0,y=void 0!==m,w=c(d),x=0;if(y&&(m=r(m,g>2?arguments[2]:void 0,2)),null==w||v==Array&&a(w))for(e=new v(n=u(d.length));n>x;x++)h=y?m(d[x],x):d[x],s(e,x,h);else for(p=(f=w.call(d)).next,e=new v;!(l=p.call(f)).done;x++)h=y?i(f,m,[l.value,x],!0):l.value,s(e,x,h);return e.length=x,e}},1318:(t,n,e)=>{var r=e(5656),o=e(7466),i=e(1400),a=function(t){return function(n,e,a){var u,s=r(n),c=o(s.length),l=i(a,c);if(t&&e!=e){for(;c>l;)if((u=s[l++])!=u)return!0}else for(;c>l;l++)if((t||l in s)&&s[l]===e)return t||l||0;return!t&&-1}};t.exports={includes:a(!0),indexOf:a(!1)}},2092:(t,n,e)=>{var r=e(9974),o=e(8361),i=e(7908),a=e(7466),u=e(5417),s=[].push,c=function(t){var n=1==t,e=2==t,c=3==t,l=4==t,f=6==t,p=7==t,h=5==t||f;return function(d,v,g,m){for(var y,w,x=i(d),b=o(x),_=r(v,g,3),S=a(b.length),E=0,A=m||u,M=n?A(d,S):e||p?A(d,0):void 0;S>E;E++)if((h||E in b)&&(w=_(y=b[E],E,x),t))if(n)M[E]=w;else if(w)switch(t){case 3:return!0;case 5:return y;case 6:return E;case 2:s.call(M,y)}else switch(t){case 4:return!1;case 7:s.call(M,y)}return f?-1:c||l?l:M}};t.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6),filterOut:c(7)}},1194:(t,n,e)=>{var r=e(7293),o=e(5112),i=e(7392),a=o("species");t.exports=function(t){return i>=51||!r((function(){var n=[];return(n.constructor={})[a]=function(){return{foo:1}},1!==n[t](Boolean).foo}))}},9341:(t,n,e)=>{"use strict";var r=e(7293);t.exports=function(t,n){var e=[][t];return!!e&&r((function(){e.call(null,n||function(){throw 1},1)}))}},5417:(t,n,e)=>{var r=e(111),o=e(3157),i=e(5112)("species");t.exports=function(t,n){var e;return o(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!o(e.prototype)?r(e)&&null===(e=e[i])&&(e=void 0):e=void 0),new(void 0===e?Array:e)(0===n?0:n)}},3411:(t,n,e)=>{var r=e(9670),o=e(9212);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){throw o(t),n}}},7072:(t,n,e)=>{var r=e(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[r]=function(){return this},Array.from(a,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i={};i[r]=function(){return{next:function(){return{done:e=!0}}}},t(i)}catch(t){}return e}},4326:t=>{var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},648:(t,n,e)=>{var r=e(1694),o=e(4326),i=e(5112)("toStringTag"),a="Arguments"==o(function(){return arguments}());t.exports=r?o:function(t){var n,e,r;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:a?o(n):"Object"==(r=o(n))&&"function"==typeof n.callee?"Arguments":r}},5631:(t,n,e)=>{"use strict";var r=e(3070).f,o=e(30),i=e(2248),a=e(9974),u=e(5787),s=e(408),c=e(654),l=e(6340),f=e(9781),p=e(2423).fastKey,h=e(9909),d=h.set,v=h.getterFor;t.exports={getConstructor:function(t,n,e,c){var l=t((function(t,r){u(t,l,n),d(t,{type:n,index:o(null),first:void 0,last:void 0,size:0}),f||(t.size=0),null!=r&&s(r,t[c],{that:t,AS_ENTRIES:e})})),h=v(n),g=function(t,n,e){var r,o,i=h(t),a=m(t,n);return a?a.value=e:(i.last=a={index:o=p(n,!0),key:n,value:e,previous:r=i.last,next:void 0,removed:!1},i.first||(i.first=a),r&&(r.next=a),f?i.size++:t.size++,"F"!==o&&(i.index[o]=a)),t},m=function(t,n){var e,r=h(t),o=p(n);if("F"!==o)return r.index[o];for(e=r.first;e;e=e.next)if(e.key==n)return e};return i(l.prototype,{clear:function(){for(var t=h(this),n=t.index,e=t.first;e;)e.removed=!0,e.previous&&(e.previous=e.previous.next=void 0),delete n[e.index],e=e.next;t.first=t.last=void 0,f?t.size=0:this.size=0},delete:function(t){var n=this,e=h(n),r=m(n,t);if(r){var o=r.next,i=r.previous;delete e.index[r.index],r.removed=!0,i&&(i.next=o),o&&(o.previous=i),e.first==r&&(e.first=o),e.last==r&&(e.last=i),f?e.size--:n.size--}return!!r},forEach:function(t){for(var n,e=h(this),r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.next:e.first;)for(r(n.value,n.key,this);n&&n.removed;)n=n.previous},has:function(t){return!!m(this,t)}}),i(l.prototype,e?{get:function(t){var n=m(this,t);return n&&n.value},set:function(t,n){return g(this,0===t?0:t,n)}}:{add:function(t){return g(this,t=0===t?0:t,t)}}),f&&r(l.prototype,"size",{get:function(){return h(this).size}}),l},setStrong:function(t,n,e){var r=n+" Iterator",o=v(n),i=v(r);c(t,n,(function(t,n){d(this,{type:r,target:t,state:o(t),kind:n,last:void 0})}),(function(){for(var t=i(this),n=t.kind,e=t.last;e&&e.removed;)e=e.previous;return t.target&&(t.last=e=e?e.next:t.state.first)?"keys"==n?{value:e.key,done:!1}:"values"==n?{value:e.value,done:!1}:{value:[e.key,e.value],done:!1}:(t.target=void 0,{value:void 0,done:!0})}),e?"entries":"values",!e,!0),l(n)}}},7710:(t,n,e)=>{"use strict";var r=e(2109),o=e(7854),i=e(4705),a=e(1320),u=e(2423),s=e(408),c=e(5787),l=e(111),f=e(7293),p=e(7072),h=e(8003),d=e(9587);t.exports=function(t,n,e){var v=-1!==t.indexOf("Map"),g=-1!==t.indexOf("Weak"),m=v?"set":"add",y=o[t],w=y&&y.prototype,x=y,b={},_=function(t){var n=w[t];a(w,t,"add"==t?function(t){return n.call(this,0===t?0:t),this}:"delete"==t?function(t){return!(g&&!l(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return g&&!l(t)?void 0:n.call(this,0===t?0:t)}:"has"==t?function(t){return!(g&&!l(t))&&n.call(this,0===t?0:t)}:function(t,e){return n.call(this,0===t?0:t,e),this})};if(i(t,"function"!=typeof y||!(g||w.forEach&&!f((function(){(new y).entries().next()})))))x=e.getConstructor(n,t,v,m),u.REQUIRED=!0;else if(i(t,!0)){var S=new x,E=S[m](g?{}:-0,1)!=S,A=f((function(){S.has(1)})),M=p((function(t){new y(t)})),k=!g&&f((function(){for(var t=new y,n=5;n--;)t[m](n,n);return!t.has(-0)}));M||((x=n((function(n,e){c(n,x,t);var r=d(new y,n,x);return null!=e&&s(e,r[m],{that:r,AS_ENTRIES:v}),r}))).prototype=w,w.constructor=x),(A||k)&&(_("delete"),_("has"),v&&_("get")),(k||E)&&_(m),g&&w.clear&&delete w.clear}return b[t]=x,r({global:!0,forced:x!=y},b),h(x,t),g||e.setStrong(x,t,v),x}},9920:(t,n,e)=>{var r=e(6656),o=e(3887),i=e(1236),a=e(3070);t.exports=function(t,n){for(var e=o(n),u=a.f,s=i.f,c=0;c<e.length;c++){var l=e[c];r(t,l)||u(t,l,s(n,l))}}},4964:(t,n,e)=>{var r=e(5112)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,"/./"[t](n)}catch(t){}}return!1}},8544:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){function t(){}return t.prototype.constructor=null,Object.getPrototypeOf(new t)!==t.prototype}))},4994:(t,n,e)=>{"use strict";var r=e(3383).IteratorPrototype,o=e(30),i=e(9114),a=e(8003),u=e(7497),s=function(){return this};t.exports=function(t,n,e){var c=n+" Iterator";return t.prototype=o(r,{next:i(1,e)}),a(t,c,!1,!0),u[c]=s,t}},8880:(t,n,e)=>{var r=e(9781),o=e(3070),i=e(9114);t.exports=r?function(t,n,e){return o.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},9114:t=>{t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},6135:(t,n,e)=>{"use strict";var r=e(7593),o=e(3070),i=e(9114);t.exports=function(t,n,e){var a=r(n);a in t?o.f(t,a,i(0,e)):t[a]=e}},654:(t,n,e)=>{"use strict";var r=e(2109),o=e(4994),i=e(9518),a=e(7674),u=e(8003),s=e(8880),c=e(1320),l=e(5112),f=e(1913),p=e(7497),h=e(3383),d=h.IteratorPrototype,v=h.BUGGY_SAFARI_ITERATORS,g=l("iterator"),m="keys",y="values",w="entries",x=function(){return this};t.exports=function(t,n,e,l,h,b,_){o(e,n,l);var S,E,A,M=function(t){if(t===h&&P)return P;if(!v&&t in C)return C[t];switch(t){case m:case y:case w:return function(){return new e(this,t)}}return function(){return new e(this)}},k=n+" Iterator",N=!1,C=t.prototype,O=C[g]||C["@@iterator"]||h&&C[h],P=!v&&O||M(h),j="Array"==n&&C.entries||O;if(j&&(S=i(j.call(new t)),d!==Object.prototype&&S.next&&(f||i(S)===d||(a?a(S,d):"function"!=typeof S[g]&&s(S,g,x)),u(S,k,!0,!0),f&&(p[k]=x))),h==y&&O&&O.name!==y&&(N=!0,P=function(){return O.call(this)}),f&&!_||C[g]===P||s(C,g,P),p[n]=P,h)if(E={values:M(y),keys:b?P:M(m),entries:M(w)},_)for(A in E)(v||N||!(A in C))&&c(C,A,E[A]);else r({target:n,proto:!0,forced:v||N},E);return E}},7235:(t,n,e)=>{var r=e(857),o=e(6656),i=e(6061),a=e(3070).f;t.exports=function(t){var n=r.Symbol||(r.Symbol={});o(n,t)||a(n,t,{value:i.f(t)})}},9781:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(t,n,e)=>{var r=e(7854),o=e(111),i=r.document,a=o(i)&&o(i.createElement);t.exports=function(t){return a?i.createElement(t):{}}},8324:t=>{t.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},6833:(t,n,e)=>{var r=e(8113);t.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},5268:(t,n,e)=>{var r=e(4326),o=e(7854);t.exports="process"==r(o.process)},1036:(t,n,e)=>{var r=e(8113);t.exports=/web0s(?!.*chrome)/i.test(r)},8113:(t,n,e)=>{var r=e(5005);t.exports=r("navigator","userAgent")||""},7392:(t,n,e)=>{var r,o,i=e(7854),a=e(8113),u=i.process,s=u&&u.versions,c=s&&s.v8;c?o=(r=c.split("."))[0]+r[1]:a&&(!(r=a.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=a.match(/Chrome\/(\d+)/))&&(o=r[1]),t.exports=o&&+o},748:t=>{t.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2109:(t,n,e)=>{var r=e(7854),o=e(1236).f,i=e(8880),a=e(1320),u=e(3505),s=e(9920),c=e(4705);t.exports=function(t,n){var e,l,f,p,h,d=t.target,v=t.global,g=t.stat;if(e=v?r:g?r[d]||u(d,{}):(r[d]||{}).prototype)for(l in n){if(p=n[l],f=t.noTargetGet?(h=o(e,l))&&h.value:e[l],!c(v?l:d+(g?".":"#")+l,t.forced)&&void 0!==f){if(typeof p==typeof f)continue;s(p,f)}(t.sham||f&&f.sham)&&i(p,"sham",!0),a(e,l,p,t)}}},7293:t=>{t.exports=function(t){try{return!!t()}catch(t){return!0}}},7007:(t,n,e)=>{"use strict";e(4916);var r=e(1320),o=e(7293),i=e(5112),a=e(2261),u=e(8880),s=i("species"),c=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l="$0"==="a".replace(/./,"$0"),f=i("replace"),p=!!/./[f]&&""===/./[f]("a","$0"),h=!o((function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2!==e.length||"a"!==e[0]||"b"!==e[1]}));t.exports=function(t,n,e,f){var d=i(t),v=!o((function(){var n={};return n[d]=function(){return 7},7!=""[t](n)})),g=v&&!o((function(){var n=!1,e=/a/;return"split"===t&&((e={}).constructor={},e.constructor[s]=function(){return e},e.flags="",e[d]=/./[d]),e.exec=function(){return n=!0,null},e[d](""),!n}));if(!v||!g||"replace"===t&&(!c||!l||p)||"split"===t&&!h){var m=/./[d],y=e(d,""[t],(function(t,n,e,r,o){return n.exec===a?v&&!o?{done:!0,value:m.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),{REPLACE_KEEPS_$0:l,REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE:p}),w=y[0],x=y[1];r(String.prototype,t,w),r(RegExp.prototype,d,2==n?function(t,n){return x.call(t,this,n)}:function(t){return x.call(t,this)})}f&&u(RegExp.prototype[d],"sham",!0)}},6677:(t,n,e)=>{var r=e(7293);t.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},9974:(t,n,e)=>{var r=e(3099);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 0:return function(){return t.call(n)};case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},5005:(t,n,e)=>{var r=e(857),o=e(7854),i=function(t){return"function"==typeof t?t:void 0};t.exports=function(t,n){return arguments.length<2?i(r[t])||i(o[t]):r[t]&&r[t][n]||o[t]&&o[t][n]}},1246:(t,n,e)=>{var r=e(648),o=e(7497),i=e(5112)("iterator");t.exports=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},647:(t,n,e)=>{var r=e(7908),o=Math.floor,i="".replace,a=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,u=/\$([$&'`]|\d{1,2})/g;t.exports=function(t,n,e,s,c,l){var f=e+t.length,p=s.length,h=u;return void 0!==c&&(c=r(c),h=a),i.call(l,h,(function(r,i){var a;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,e);case"'":return n.slice(f);case"<":a=c[i.slice(1,-1)];break;default:var u=+i;if(0===u)return r;if(u>p){var l=o(u/10);return 0===l?r:l<=p?void 0===s[l-1]?i.charAt(1):s[l-1]+i.charAt(1):r}a=s[u-1]}return void 0===a?"":a}))}},7854:(t,n,e)=>{var r=function(t){return t&&t.Math==Math&&t};t.exports=r("object"==typeof globalThis&&globalThis)||r("object"==typeof window&&window)||r("object"==typeof self&&self)||r("object"==typeof e.g&&e.g)||function(){return this}()||Function("return this")()},6656:t=>{var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},3501:t=>{t.exports={}},842:(t,n,e)=>{var r=e(7854);t.exports=function(t,n){var e=r.console;e&&e.error&&(1===arguments.length?e.error(t):e.error(t,n))}},490:(t,n,e)=>{var r=e(5005);t.exports=r("document","documentElement")},4664:(t,n,e)=>{var r=e(9781),o=e(7293),i=e(317);t.exports=!r&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(t,n,e)=>{var r=e(7293),o=e(4326),i="".split;t.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(t){return"String"==o(t)?i.call(t,""):Object(t)}:Object},9587:(t,n,e)=>{var r=e(111),o=e(7674);t.exports=function(t,n,e){var i,a;return o&&"function"==typeof(i=n.constructor)&&i!==e&&r(a=i.prototype)&&a!==e.prototype&&o(t,a),t}},2788:(t,n,e)=>{var r=e(5465),o=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(t){return o.call(t)}),t.exports=r.inspectSource},2423:(t,n,e)=>{var r=e(3501),o=e(111),i=e(6656),a=e(3070).f,u=e(9711),s=e(6677),c=u("meta"),l=0,f=Object.isExtensible||function(){return!0},p=function(t){a(t,c,{value:{objectID:"O"+ ++l,weakData:{}}})},h=t.exports={REQUIRED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,c)){if(!f(t))return"F";if(!n)return"E";p(t)}return t[c].objectID},getWeakData:function(t,n){if(!i(t,c)){if(!f(t))return!0;if(!n)return!1;p(t)}return t[c].weakData},onFreeze:function(t){return s&&h.REQUIRED&&f(t)&&!i(t,c)&&p(t),t}};r[c]=!0},9909:(t,n,e)=>{var r,o,i,a=e(8536),u=e(7854),s=e(111),c=e(8880),l=e(6656),f=e(5465),p=e(6200),h=e(3501),d=u.WeakMap;if(a){var v=f.state||(f.state=new d),g=v.get,m=v.has,y=v.set;r=function(t,n){return n.facade=t,y.call(v,t,n),n},o=function(t){return g.call(v,t)||{}},i=function(t){return m.call(v,t)}}else{var w=p("state");h[w]=!0,r=function(t,n){return n.facade=t,c(t,w,n),n},o=function(t){return l(t,w)?t[w]:{}},i=function(t){return l(t,w)}}t.exports={set:r,get:o,has:i,enforce:function(t){return i(t)?o(t):r(t,{})},getterFor:function(t){return function(n){var e;if(!s(n)||(e=o(n)).type!==t)throw TypeError("Incompatible receiver, "+t+" required");return e}}}},7659:(t,n,e)=>{var r=e(5112),o=e(7497),i=r("iterator"),a=Array.prototype;t.exports=function(t){return void 0!==t&&(o.Array===t||a[i]===t)}},3157:(t,n,e)=>{var r=e(4326);t.exports=Array.isArray||function(t){return"Array"==r(t)}},4705:(t,n,e)=>{var r=e(7293),o=/#|\.prototype\./,i=function(t,n){var e=u[a(t)];return e==c||e!=s&&("function"==typeof n?r(n):!!n)},a=i.normalize=function(t){return String(t).replace(o,".").toLowerCase()},u=i.data={},s=i.NATIVE="N",c=i.POLYFILL="P";t.exports=i},111:t=>{t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},1913:t=>{t.exports=!1},7850:(t,n,e)=>{var r=e(111),o=e(4326),i=e(5112)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},408:(t,n,e)=>{var r=e(9670),o=e(7659),i=e(7466),a=e(9974),u=e(1246),s=e(9212),c=function(t,n){this.stopped=t,this.result=n};t.exports=function(t,n,e){var l,f,p,h,d,v,g,m=e&&e.that,y=!(!e||!e.AS_ENTRIES),w=!(!e||!e.IS_ITERATOR),x=!(!e||!e.INTERRUPTED),b=a(n,m,1+y+x),_=function(t){return l&&s(l),new c(!0,t)},S=function(t){return y?(r(t),x?b(t[0],t[1],_):b(t[0],t[1])):x?b(t,_):b(t)};if(w)l=t;else{if("function"!=typeof(f=u(t)))throw TypeError("Target is not iterable");if(o(f)){for(p=0,h=i(t.length);h>p;p++)if((d=S(t[p]))&&d instanceof c)return d;return new c(!1)}l=f.call(t)}for(v=l.next;!(g=v.call(l)).done;){try{d=S(g.value)}catch(t){throw s(l),t}if("object"==typeof d&&d&&d instanceof c)return d}return new c(!1)}},9212:(t,n,e)=>{var r=e(9670);t.exports=function(t){var n=t.return;if(void 0!==n)return r(n.call(t)).value}},3383:(t,n,e)=>{"use strict";var r,o,i,a=e(7293),u=e(9518),s=e(8880),c=e(6656),l=e(5112),f=e(1913),p=l("iterator"),h=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(r=o):h=!0);var d=null==r||a((function(){var t={};return r[p].call(t)!==t}));d&&(r={}),f&&!d||c(r,p)||s(r,p,(function(){return this})),t.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:h}},7497:t=>{t.exports={}},5948:(t,n,e)=>{var r,o,i,a,u,s,c,l,f=e(7854),p=e(1236).f,h=e(261).set,d=e(6833),v=e(1036),g=e(5268),m=f.MutationObserver||f.WebKitMutationObserver,y=f.document,w=f.process,x=f.Promise,b=p(f,"queueMicrotask"),_=b&&b.value;_||(r=function(){var t,n;for(g&&(t=w.domain)&&t.exit();o;){n=o.fn,o=o.next;try{n()}catch(t){throw o?a():i=void 0,t}}i=void 0,t&&t.enter()},d||g||v||!m||!y?x&&x.resolve?(c=x.resolve(void 0),l=c.then,a=function(){l.call(c,r)}):a=g?function(){w.nextTick(r)}:function(){h.call(f,r)}:(u=!0,s=y.createTextNode(""),new m(r).observe(s,{characterData:!0}),a=function(){s.data=u=!u})),t.exports=_||function(t){var n={fn:t,next:void 0};i&&(i.next=n),o||(o=n,a()),i=n}},3366:(t,n,e)=>{var r=e(7854);t.exports=r.Promise},133:(t,n,e)=>{var r=e(5268),o=e(7392),i=e(7293);t.exports=!!Object.getOwnPropertySymbols&&!i((function(){return!Symbol.sham&&(r?38===o:o>37&&o<41)}))},8536:(t,n,e)=>{var r=e(7854),o=e(2788),i=r.WeakMap;t.exports="function"==typeof i&&/native code/.test(o(i))},8523:(t,n,e)=>{"use strict";var r=e(3099),o=function(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=r(n),this.reject=r(e)};t.exports.f=function(t){return new o(t)}},3929:(t,n,e)=>{var r=e(7850);t.exports=function(t){if(r(t))throw TypeError("The method doesn't accept regular expressions");return t}},2814:(t,n,e)=>{var r=e(7854),o=e(3111).trim,i=e(1361),a=r.parseFloat,u=1/a(i+"-0")!=-1/0;t.exports=u?function(t){var n=o(String(t)),e=a(n);return 0===e&&"-"==n.charAt(0)?-0:e}:a},3009:(t,n,e)=>{var r=e(7854),o=e(3111).trim,i=e(1361),a=r.parseInt,u=/^[+-]?0[Xx]/,s=8!==a(i+"08")||22!==a(i+"0x16");t.exports=s?function(t,n){var e=o(String(t));return a(e,n>>>0||(u.test(e)?16:10))}:a},30:(t,n,e)=>{var r,o=e(9670),i=e(6048),a=e(748),u=e(3501),s=e(490),c=e(317),l=e(6200)("IE_PROTO"),f=function(){},p=function(t){return"<script>"+t+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(t){}var t,n;h=r?function(t){t.write(p("")),t.close();var n=t.parentWindow.Object;return t=null,n}(r):((n=c("iframe")).style.display="none",s.appendChild(n),n.src=String("javascript:"),(t=n.contentWindow.document).open(),t.write(p("document.F=Object")),t.close(),t.F);for(var e=a.length;e--;)delete h.prototype[a[e]];return h()};u[l]=!0,t.exports=Object.create||function(t,n){var e;return null!==t?(f.prototype=o(t),e=new f,f.prototype=null,e[l]=t):e=h(),void 0===n?e:i(e,n)}},6048:(t,n,e)=>{var r=e(9781),o=e(3070),i=e(9670),a=e(1956);t.exports=r?Object.defineProperties:function(t,n){i(t);for(var e,r=a(n),u=r.length,s=0;u>s;)o.f(t,e=r[s++],n[e]);return t}},3070:(t,n,e)=>{var r=e(9781),o=e(4664),i=e(9670),a=e(7593),u=Object.defineProperty;n.f=r?u:function(t,n,e){if(i(t),n=a(n,!0),i(e),o)try{return u(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported");return"value"in e&&(t[n]=e.value),t}},1236:(t,n,e)=>{var r=e(9781),o=e(5296),i=e(9114),a=e(5656),u=e(7593),s=e(6656),c=e(4664),l=Object.getOwnPropertyDescriptor;n.f=r?l:function(t,n){if(t=a(t),n=u(n,!0),c)try{return l(t,n)}catch(t){}if(s(t,n))return i(!o.f.call(t,n),t[n])}},1156:(t,n,e)=>{var r=e(5656),o=e(8006).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},8006:(t,n,e)=>{var r=e(6324),o=e(748).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},5181:(t,n)=>{n.f=Object.getOwnPropertySymbols},9518:(t,n,e)=>{var r=e(6656),o=e(7908),i=e(6200),a=e(8544),u=i("IE_PROTO"),s=Object.prototype;t.exports=a?Object.getPrototypeOf:function(t){return t=o(t),r(t,u)?t[u]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?s:null}},6324:(t,n,e)=>{var r=e(6656),o=e(5656),i=e(1318).indexOf,a=e(3501);t.exports=function(t,n){var e,u=o(t),s=0,c=[];for(e in u)!r(a,e)&&r(u,e)&&c.push(e);for(;n.length>s;)r(u,e=n[s++])&&(~i(c,e)||c.push(e));return c}},1956:(t,n,e)=>{var r=e(6324),o=e(748);t.exports=Object.keys||function(t){return r(t,o)}},5296:(t,n)=>{"use strict";var e={}.propertyIsEnumerable,r=Object.getOwnPropertyDescriptor,o=r&&!e.call({1:2},1);n.f=o?function(t){var n=r(this,t);return!!n&&n.enumerable}:e},7674:(t,n,e)=>{var r=e(9670),o=e(6077);t.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var t,n=!1,e={};try{(t=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(e,[]),n=e instanceof Array}catch(t){}return function(e,i){return r(e),o(i),n?t.call(e,i):e.__proto__=i,e}}():void 0)},288:(t,n,e)=>{"use strict";var r=e(1694),o=e(648);t.exports=r?{}.toString:function(){return"[object "+o(this)+"]"}},3887:(t,n,e)=>{var r=e(5005),o=e(8006),i=e(5181),a=e(9670);t.exports=r("Reflect","ownKeys")||function(t){var n=o.f(a(t)),e=i.f;return e?n.concat(e(t)):n}},857:(t,n,e)=>{var r=e(7854);t.exports=r},2534:t=>{t.exports=function(t){try{return{error:!1,value:t()}}catch(t){return{error:!0,value:t}}}},9478:(t,n,e)=>{var r=e(9670),o=e(111),i=e(8523);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},2248:(t,n,e)=>{var r=e(1320);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},1320:(t,n,e)=>{var r=e(7854),o=e(8880),i=e(6656),a=e(3505),u=e(2788),s=e(9909),c=s.get,l=s.enforce,f=String(String).split("String");(t.exports=function(t,n,e,u){var s,c=!!u&&!!u.unsafe,p=!!u&&!!u.enumerable,h=!!u&&!!u.noTargetGet;"function"==typeof e&&("string"!=typeof n||i(e,"name")||o(e,"name",n),(s=l(e)).source||(s.source=f.join("string"==typeof n?n:""))),t!==r?(c?!h&&t[n]&&(p=!0):delete t[n],p?t[n]=e:o(t,n,e)):p?t[n]=e:a(n,e)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},7651:(t,n,e)=>{var r=e(4326),o=e(2261);t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},2261:(t,n,e)=>{"use strict";var r,o,i=e(7066),a=e(2999),u=RegExp.prototype.exec,s=String.prototype.replace,c=u,l=(r=/a/,o=/b*/g,u.call(r,"a"),u.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=a.UNSUPPORTED_Y||a.BROKEN_CARET,p=void 0!==/()??/.exec("")[1];(l||p||f)&&(c=function(t){var n,e,r,o,a=this,c=f&&a.sticky,h=i.call(a),d=a.source,v=0,g=t;return c&&(-1===(h=h.replace("y","")).indexOf("g")&&(h+="g"),g=String(t).slice(a.lastIndex),a.lastIndex>0&&(!a.multiline||a.multiline&&"\n"!==t[a.lastIndex-1])&&(d="(?: "+d+")",g=" "+g,v++),e=new RegExp("^(?:"+d+")",h)),p&&(e=new RegExp("^"+d+"$(?!\\s)",h)),l&&(n=a.lastIndex),r=u.call(c?e:a,g),c?r?(r.input=r.input.slice(v),r[0]=r[0].slice(v),r.index=a.lastIndex,a.lastIndex+=r[0].length):a.lastIndex=0:l&&r&&(a.lastIndex=a.global?r.index+r[0].length:n),p&&r&&r.length>1&&s.call(r[0],e,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)})),r}),t.exports=c},7066:(t,n,e)=>{"use strict";var r=e(9670);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.dotAll&&(n+="s"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},2999:(t,n,e)=>{"use strict";var r=e(7293);function o(t,n){return RegExp(t,n)}n.UNSUPPORTED_Y=r((function(){var t=o("a","y");return t.lastIndex=2,null!=t.exec("abcd")})),n.BROKEN_CARET=r((function(){var t=o("^r","gy");return t.lastIndex=2,null!=t.exec("str")}))},4488:t=>{t.exports=function(t){if(null==t)throw TypeError("Can't call method on "+t);return t}},3505:(t,n,e)=>{var r=e(7854),o=e(8880);t.exports=function(t,n){try{o(r,t,n)}catch(e){r[t]=n}return n}},6340:(t,n,e)=>{"use strict";var r=e(5005),o=e(3070),i=e(5112),a=e(9781),u=i("species");t.exports=function(t){var n=r(t),e=o.f;a&&n&&!n[u]&&e(n,u,{configurable:!0,get:function(){return this}})}},8003:(t,n,e)=>{var r=e(3070).f,o=e(6656),i=e(5112)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},6200:(t,n,e)=>{var r=e(2309),o=e(9711),i=r("keys");t.exports=function(t){return i[t]||(i[t]=o(t))}},5465:(t,n,e)=>{var r=e(7854),o=e(3505),i="__core-js_shared__",a=r[i]||o(i,{});t.exports=a},2309:(t,n,e)=>{var r=e(1913),o=e(5465);(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:"3.9.1",mode:r?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(t,n,e)=>{var r=e(9670),o=e(3099),i=e(5112)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[i])?n:o(e)}},8710:(t,n,e)=>{var r=e(9958),o=e(4488),i=function(t){return function(n,e){var i,a,u=String(o(n)),s=r(e),c=u.length;return s<0||s>=c?t?"":void 0:(i=u.charCodeAt(s))<55296||i>56319||s+1===c||(a=u.charCodeAt(s+1))<56320||a>57343?t?u.charAt(s):i:t?u.slice(s,s+2):a-56320+(i-55296<<10)+65536}};t.exports={codeAt:i(!1),charAt:i(!0)}},6091:(t,n,e)=>{var r=e(7293),o=e(1361);t.exports=function(t){return r((function(){return!!o[t]()||"​᠎"!="​᠎"[t]()||o[t].name!==t}))}},3111:(t,n,e)=>{var r=e(4488),o="["+e(1361)+"]",i=RegExp("^"+o+o+"*"),a=RegExp(o+o+"*$"),u=function(t){return function(n){var e=String(r(n));return 1&t&&(e=e.replace(i,"")),2&t&&(e=e.replace(a,"")),e}};t.exports={start:u(1),end:u(2),trim:u(3)}},261:(t,n,e)=>{var r,o,i,a=e(7854),u=e(7293),s=e(9974),c=e(490),l=e(317),f=e(6833),p=e(5268),h=a.location,d=a.setImmediate,v=a.clearImmediate,g=a.process,m=a.MessageChannel,y=a.Dispatch,w=0,x={},b=function(t){if(x.hasOwnProperty(t)){var n=x[t];delete x[t],n()}},_=function(t){return function(){b(t)}},S=function(t){b(t.data)},E=function(t){a.postMessage(t+"",h.protocol+"//"+h.host)};d&&v||(d=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return x[++w]=function(){("function"==typeof t?t:Function(t)).apply(void 0,n)},r(w),w},v=function(t){delete x[t]},p?r=function(t){g.nextTick(_(t))}:y&&y.now?r=function(t){y.now(_(t))}:m&&!f?(i=(o=new m).port2,o.port1.onmessage=S,r=s(i.postMessage,i,1)):a.addEventListener&&"function"==typeof postMessage&&!a.importScripts&&h&&"file:"!==h.protocol&&!u(E)?(r=E,a.addEventListener("message",S,!1)):r="onreadystatechange"in l("script")?function(t){c.appendChild(l("script")).onreadystatechange=function(){c.removeChild(this),b(t)}}:function(t){setTimeout(_(t),0)}),t.exports={set:d,clear:v}},1400:(t,n,e)=>{var r=e(9958),o=Math.max,i=Math.min;t.exports=function(t,n){var e=r(t);return e<0?o(e+n,0):i(e,n)}},5656:(t,n,e)=>{var r=e(8361),o=e(4488);t.exports=function(t){return r(o(t))}},9958:t=>{var n=Math.ceil,e=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?e:n)(t)}},7466:(t,n,e)=>{var r=e(9958),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},7908:(t,n,e)=>{var r=e(4488);t.exports=function(t){return Object(r(t))}},7593:(t,n,e)=>{var r=e(111);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},1694:(t,n,e)=>{var r={};r[e(5112)("toStringTag")]="z",t.exports="[object z]"===String(r)},9711:t=>{var n=0,e=Math.random();t.exports=function(t){return"Symbol("+String(void 0===t?"":t)+")_"+(++n+e).toString(36)}},3307:(t,n,e)=>{var r=e(133);t.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},6061:(t,n,e)=>{var r=e(5112);n.f=r},5112:(t,n,e)=>{var r=e(7854),o=e(2309),i=e(6656),a=e(9711),u=e(133),s=e(3307),c=o("wks"),l=r.Symbol,f=s?l:l&&l.withoutSetter||a;t.exports=function(t){return i(c,t)&&(u||"string"==typeof c[t])||(u&&i(l,t)?c[t]=l[t]:c[t]=f("Symbol."+t)),c[t]}},1361:t=>{t.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},2222:(t,n,e)=>{"use strict";var r=e(2109),o=e(7293),i=e(3157),a=e(111),u=e(7908),s=e(7466),c=e(6135),l=e(5417),f=e(1194),p=e(5112),h=e(7392),d=p("isConcatSpreadable"),v=9007199254740991,g="Maximum allowed index exceeded",m=h>=51||!o((function(){var t=[];return t[d]=!1,t.concat()[0]!==t})),y=f("concat"),w=function(t){if(!a(t))return!1;var n=t[d];return void 0!==n?!!n:i(t)};r({target:"Array",proto:!0,forced:!m||!y},{concat:function(t){var n,e,r,o,i,a=u(this),f=l(a,0),p=0;for(n=-1,r=arguments.length;n<r;n++)if(w(i=-1===n?a:arguments[n])){if(p+(o=s(i.length))>v)throw TypeError(g);for(e=0;e<o;e++,p++)e in i&&c(f,p,i[e])}else{if(p>=v)throw TypeError(g);c(f,p++,i)}return f.length=p,f}})},7327:(t,n,e)=>{"use strict";var r=e(2109),o=e(2092).filter;r({target:"Array",proto:!0,forced:!e(1194)("filter")},{filter:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},9554:(t,n,e)=>{"use strict";var r=e(2109),o=e(8533);r({target:"Array",proto:!0,forced:[].forEach!=o},{forEach:o})},1038:(t,n,e)=>{var r=e(2109),o=e(8457);r({target:"Array",stat:!0,forced:!e(7072)((function(t){Array.from(t)}))},{from:o})},6699:(t,n,e)=>{"use strict";var r=e(2109),o=e(1318).includes,i=e(1223);r({target:"Array",proto:!0},{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),i("includes")},9753:(t,n,e)=>{e(2109)({target:"Array",stat:!0},{isArray:e(3157)})},6992:(t,n,e)=>{"use strict";var r=e(5656),o=e(1223),i=e(7497),a=e(9909),u=e(654),s="Array Iterator",c=a.set,l=a.getterFor(s);t.exports=u(Array,"Array",(function(t,n){c(this,{type:s,target:r(t),index:0,kind:n})}),(function(){var t=l(this),n=t.target,e=t.kind,r=t.index++;return!n||r>=n.length?(t.target=void 0,{value:void 0,done:!0}):"keys"==e?{value:r,done:!1}:"values"==e?{value:n[r],done:!1}:{value:[r,n[r]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},9600:(t,n,e)=>{"use strict";var r=e(2109),o=e(8361),i=e(5656),a=e(9341),u=[].join,s=o!=Object,c=a("join",",");r({target:"Array",proto:!0,forced:s||!c},{join:function(t){return u.call(i(this),void 0===t?",":t)}})},1249:(t,n,e)=>{"use strict";var r=e(2109),o=e(2092).map;r({target:"Array",proto:!0,forced:!e(1194)("map")},{map:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}})},7042:(t,n,e)=>{"use strict";var r=e(2109),o=e(111),i=e(3157),a=e(1400),u=e(7466),s=e(5656),c=e(6135),l=e(5112),f=e(1194)("slice"),p=l("species"),h=[].slice,d=Math.max;r({target:"Array",proto:!0,forced:!f},{slice:function(t,n){var e,r,l,f=s(this),v=u(f.length),g=a(t,v),m=a(void 0===n?v:n,v);if(i(f)&&("function"!=typeof(e=f.constructor)||e!==Array&&!i(e.prototype)?o(e)&&null===(e=e[p])&&(e=void 0):e=void 0,e===Array||void 0===e))return h.call(f,g,m);for(r=new(void 0===e?Array:e)(d(m-g,0)),l=0;g<m;g++,l++)g in f&&c(r,l,f[g]);return r.length=l,r}})},2707:(t,n,e)=>{"use strict";var r=e(2109),o=e(3099),i=e(7908),a=e(7293),u=e(9341),s=[],c=s.sort,l=a((function(){s.sort(void 0)})),f=a((function(){s.sort(null)})),p=u("sort");r({target:"Array",proto:!0,forced:l||!f||!p},{sort:function(t){return void 0===t?c.call(i(this)):c.call(i(this),o(t))}})},3710:(t,n,e)=>{var r=e(1320),o=Date.prototype,i="Invalid Date",a=o.toString,u=o.getTime;new Date(NaN)+""!=i&&r(o,"toString",(function(){var t=u.call(this);return t==t?a.call(this):i}))},8309:(t,n,e)=>{var r=e(9781),o=e(3070).f,i=Function.prototype,a=i.toString,u=/^\s*function ([^ (]*)/,s="name";r&&!(s in i)&&o(i,s,{configurable:!0,get:function(){try{return a.call(this).match(u)[1]}catch(t){return""}}})},1532:(t,n,e)=>{"use strict";var r=e(7710),o=e(5631);t.exports=r("Map",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},7941:(t,n,e)=>{var r=e(2109),o=e(7908),i=e(1956);r({target:"Object",stat:!0,forced:e(7293)((function(){i(1)}))},{keys:function(t){return i(o(t))}})},1539:(t,n,e)=>{var r=e(1694),o=e(1320),i=e(288);r||o(Object.prototype,"toString",i,{unsafe:!0})},4678:(t,n,e)=>{var r=e(2109),o=e(2814);r({global:!0,forced:parseFloat!=o},{parseFloat:o})},1058:(t,n,e)=>{var r=e(2109),o=e(3009);r({global:!0,forced:parseInt!=o},{parseInt:o})},8674:(t,n,e)=>{"use strict";var r,o,i,a,u=e(2109),s=e(1913),c=e(7854),l=e(5005),f=e(3366),p=e(1320),h=e(2248),d=e(8003),v=e(6340),g=e(111),m=e(3099),y=e(5787),w=e(2788),x=e(408),b=e(7072),_=e(6707),S=e(261).set,E=e(5948),A=e(9478),M=e(842),k=e(8523),N=e(2534),C=e(9909),O=e(4705),P=e(5112),j=e(5268),T=e(7392),D=P("species"),L="Promise",I=C.get,R=C.set,U=C.getterFor(L),F=f,H=c.TypeError,V=c.document,q=c.process,z=l("fetch"),B=k.f,$=B,X=!!(V&&V.createEvent&&c.dispatchEvent),Y="function"==typeof PromiseRejectionEvent,G="unhandledrejection",W=O(L,(function(){if(w(F)===String(F)){if(66===T)return!0;if(!j&&!Y)return!0}if(s&&!F.prototype.finally)return!0;if(T>=51&&/native code/.test(F))return!1;var t=F.resolve(1),n=function(t){t((function(){}),(function(){}))};return(t.constructor={})[D]=n,!(t.then((function(){}))instanceof n)})),K=W||!b((function(t){F.all(t).catch((function(){}))})),Z=function(t){var n;return!(!g(t)||"function"!=typeof(n=t.then))&&n},J=function(t,n){if(!t.notified){t.notified=!0;var e=t.reactions;E((function(){for(var r=t.value,o=1==t.state,i=0;e.length>i;){var a,u,s,c=e[i++],l=o?c.ok:c.fail,f=c.resolve,p=c.reject,h=c.domain;try{l?(o||(2===t.rejection&&et(t),t.rejection=1),!0===l?a=r:(h&&h.enter(),a=l(r),h&&(h.exit(),s=!0)),a===c.promise?p(H("Promise-chain cycle")):(u=Z(a))?u.call(a,f,p):f(a)):p(r)}catch(t){h&&!s&&h.exit(),p(t)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&tt(t)}))}},Q=function(t,n,e){var r,o;X?((r=V.createEvent("Event")).promise=n,r.reason=e,r.initEvent(t,!1,!0),c.dispatchEvent(r)):r={promise:n,reason:e},!Y&&(o=c["on"+t])?o(r):t===G&&M("Unhandled promise rejection",e)},tt=function(t){S.call(c,(function(){var n,e=t.facade,r=t.value;if(nt(t)&&(n=N((function(){j?q.emit("unhandledRejection",r,e):Q(G,e,r)})),t.rejection=j||nt(t)?2:1,n.error))throw n.value}))},nt=function(t){return 1!==t.rejection&&!t.parent},et=function(t){S.call(c,(function(){var n=t.facade;j?q.emit("rejectionHandled",n):Q("rejectionhandled",n,t.value)}))},rt=function(t,n,e){return function(r){t(n,r,e)}},ot=function(t,n,e){t.done||(t.done=!0,e&&(t=e),t.value=n,t.state=2,J(t,!0))},it=function(t,n,e){if(!t.done){t.done=!0,e&&(t=e);try{if(t.facade===n)throw H("Promise can't be resolved itself");var r=Z(n);r?E((function(){var e={done:!1};try{r.call(n,rt(it,e,t),rt(ot,e,t))}catch(n){ot(e,n,t)}})):(t.value=n,t.state=1,J(t,!1))}catch(n){ot({done:!1},n,t)}}};W&&(F=function(t){y(this,F,L),m(t),r.call(this);var n=I(this);try{t(rt(it,n),rt(ot,n))}catch(t){ot(n,t)}},(r=function(t){R(this,{type:L,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=h(F.prototype,{then:function(t,n){var e=U(this),r=B(_(this,F));return r.ok="function"!=typeof t||t,r.fail="function"==typeof n&&n,r.domain=j?q.domain:void 0,e.parent=!0,e.reactions.push(r),0!=e.state&&J(e,!1),r.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r,n=I(t);this.promise=t,this.resolve=rt(it,n),this.reject=rt(ot,n)},k.f=B=function(t){return t===F||t===i?new o(t):$(t)},s||"function"!=typeof f||(a=f.prototype.then,p(f.prototype,"then",(function(t,n){var e=this;return new F((function(t,n){a.call(e,t,n)})).then(t,n)}),{unsafe:!0}),"function"==typeof z&&u({global:!0,enumerable:!0,forced:!0},{fetch:function(t){return A(F,z.apply(c,arguments))}}))),u({global:!0,wrap:!0,forced:W},{Promise:F}),d(F,L,!1,!0),v(L),i=l(L),u({target:L,stat:!0,forced:W},{reject:function(t){var n=B(this);return n.reject.call(void 0,t),n.promise}}),u({target:L,stat:!0,forced:s||W},{resolve:function(t){return A(s&&this===i?F:this,t)}}),u({target:L,stat:!0,forced:K},{all:function(t){var n=this,e=B(n),r=e.resolve,o=e.reject,i=N((function(){var e=m(n.resolve),i=[],a=0,u=1;x(t,(function(t){var s=a++,c=!1;i.push(void 0),u++,e.call(n,t).then((function(t){c||(c=!0,i[s]=t,--u||r(i))}),o)})),--u||r(i)}));return i.error&&o(i.value),e.promise},race:function(t){var n=this,e=B(n),r=e.reject,o=N((function(){var o=m(n.resolve);x(t,(function(t){o.call(n,t).then(e.resolve,r)}))}));return o.error&&r(o.value),e.promise}})},4916:(t,n,e)=>{"use strict";var r=e(2109),o=e(2261);r({target:"RegExp",proto:!0,forced:/./.exec!==o},{exec:o})},189:(t,n,e)=>{"use strict";var r=e(7710),o=e(5631);t.exports=r("Set",(function(t){return function(){return t(this,arguments.length?arguments[0]:void 0)}}),o)},2023:(t,n,e)=>{"use strict";var r=e(2109),o=e(3929),i=e(4488);r({target:"String",proto:!0,forced:!e(4964)("includes")},{includes:function(t){return!!~String(i(this)).indexOf(o(t),arguments.length>1?arguments[1]:void 0)}})},8783:(t,n,e)=>{"use strict";var r=e(8710).charAt,o=e(9909),i=e(654),a="String Iterator",u=o.set,s=o.getterFor(a);i(String,"String",(function(t){u(this,{type:a,string:String(t),index:0})}),(function(){var t,n=s(this),e=n.string,o=n.index;return o>=e.length?{value:void 0,done:!0}:(t=r(e,o),n.index+=t.length,{value:t,done:!1})}))},5306:(t,n,e)=>{"use strict";var r=e(7007),o=e(9670),i=e(7466),a=e(9958),u=e(4488),s=e(1530),c=e(647),l=e(7651),f=Math.max,p=Math.min;r("replace",2,(function(t,n,e,r){var h=r.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE,d=r.REPLACE_KEEPS_$0,v=h?"$":"$0";return[function(e,r){var o=u(this),i=null==e?void 0:e[t];return void 0!==i?i.call(e,o,r):n.call(String(o),e,r)},function(t,r){if(!h&&d||"string"==typeof r&&-1===r.indexOf(v)){var u=e(n,t,this,r);if(u.done)return u.value}var g=o(t),m=String(this),y="function"==typeof r;y||(r=String(r));var w=g.global;if(w){var x=g.unicode;g.lastIndex=0}for(var b=[];;){var _=l(g,m);if(null===_)break;if(b.push(_),!w)break;""===String(_[0])&&(g.lastIndex=s(m,i(g.lastIndex),x))}for(var S,E="",A=0,M=0;M<b.length;M++){_=b[M];for(var k=String(_[0]),N=f(p(a(_.index),m.length),0),C=[],O=1;O<_.length;O++)C.push(void 0===(S=_[O])?S:String(S));var P=_.groups;if(y){var j=[k].concat(C,N,m);void 0!==P&&j.push(P);var T=String(r.apply(void 0,j))}else T=c(k,m,N,C,P,r);N>=A&&(E+=m.slice(A,N)+T,A=N+k.length)}return E+m.slice(A)}]}))},3210:(t,n,e)=>{"use strict";var r=e(2109),o=e(3111).trim;r({target:"String",proto:!0,forced:e(6091)("trim")},{trim:function(){return o(this)}})},1817:(t,n,e)=>{"use strict";var r=e(2109),o=e(9781),i=e(7854),a=e(6656),u=e(111),s=e(3070).f,c=e(9920),l=i.Symbol;if(o&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var f={},p=function(){var t=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),n=this instanceof p?new l(t):void 0===t?l():l(t);return""===t&&(f[n]=!0),n};c(p,l);var h=p.prototype=l.prototype;h.constructor=p;var d=h.toString,v="Symbol(test)"==String(l("test")),g=/^Symbol\((.*)\)[^)]+$/;s(h,"description",{configurable:!0,get:function(){var t=u(this)?this.valueOf():this,n=d.call(t);if(a(f,t))return"";var e=v?n.slice(7,-1):n.replace(g,"$1");return""===e?void 0:e}}),r({global:!0,forced:!0},{Symbol:p})}},2165:(t,n,e)=>{e(7235)("iterator")},2526:(t,n,e)=>{"use strict";var r=e(2109),o=e(7854),i=e(5005),a=e(1913),u=e(9781),s=e(133),c=e(3307),l=e(7293),f=e(6656),p=e(3157),h=e(111),d=e(9670),v=e(7908),g=e(5656),m=e(7593),y=e(9114),w=e(30),x=e(1956),b=e(8006),_=e(1156),S=e(5181),E=e(1236),A=e(3070),M=e(5296),k=e(8880),N=e(1320),C=e(2309),O=e(6200),P=e(3501),j=e(9711),T=e(5112),D=e(6061),L=e(7235),I=e(8003),R=e(9909),U=e(2092).forEach,F=O("hidden"),H="Symbol",V=T("toPrimitive"),q=R.set,z=R.getterFor(H),B=Object.prototype,$=o.Symbol,X=i("JSON","stringify"),Y=E.f,G=A.f,W=_.f,K=M.f,Z=C("symbols"),J=C("op-symbols"),Q=C("string-to-symbol-registry"),tt=C("symbol-to-string-registry"),nt=C("wks"),et=o.QObject,rt=!et||!et.prototype||!et.prototype.findChild,ot=u&&l((function(){return 7!=w(G({},"a",{get:function(){return G(this,"a",{value:7}).a}})).a}))?function(t,n,e){var r=Y(B,n);r&&delete B[n],G(t,n,e),r&&t!==B&&G(B,n,r)}:G,it=function(t,n){var e=Z[t]=w($.prototype);return q(e,{type:H,tag:t,description:n}),u||(e.description=n),e},at=c?function(t){return"symbol"==typeof t}:function(t){return Object(t)instanceof $},ut=function(t,n,e){t===B&&ut(J,n,e),d(t);var r=m(n,!0);return d(e),f(Z,r)?(e.enumerable?(f(t,F)&&t[F][r]&&(t[F][r]=!1),e=w(e,{enumerable:y(0,!1)})):(f(t,F)||G(t,F,y(1,{})),t[F][r]=!0),ot(t,r,e)):G(t,r,e)},st=function(t,n){d(t);var e=g(n),r=x(e).concat(pt(e));return U(r,(function(n){u&&!ct.call(e,n)||ut(t,n,e[n])})),t},ct=function(t){var n=m(t,!0),e=K.call(this,n);return!(this===B&&f(Z,n)&&!f(J,n))&&(!(e||!f(this,n)||!f(Z,n)||f(this,F)&&this[F][n])||e)},lt=function(t,n){var e=g(t),r=m(n,!0);if(e!==B||!f(Z,r)||f(J,r)){var o=Y(e,r);return!o||!f(Z,r)||f(e,F)&&e[F][r]||(o.enumerable=!0),o}},ft=function(t){var n=W(g(t)),e=[];return U(n,(function(t){f(Z,t)||f(P,t)||e.push(t)})),e},pt=function(t){var n=t===B,e=W(n?J:g(t)),r=[];return U(e,(function(t){!f(Z,t)||n&&!f(B,t)||r.push(Z[t])})),r};s||(N(($=function(){if(this instanceof $)throw TypeError("Symbol is not a constructor");var t=arguments.length&&void 0!==arguments[0]?String(arguments[0]):void 0,n=j(t),e=function(t){this===B&&e.call(J,t),f(this,F)&&f(this[F],n)&&(this[F][n]=!1),ot(this,n,y(1,t))};return u&&rt&&ot(B,n,{configurable:!0,set:e}),it(n,t)}).prototype,"toString",(function(){return z(this).tag})),N($,"withoutSetter",(function(t){return it(j(t),t)})),M.f=ct,A.f=ut,E.f=lt,b.f=_.f=ft,S.f=pt,D.f=function(t){return it(T(t),t)},u&&(G($.prototype,"description",{configurable:!0,get:function(){return z(this).description}}),a||N(B,"propertyIsEnumerable",ct,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!s,sham:!s},{Symbol:$}),U(x(nt),(function(t){L(t)})),r({target:H,stat:!0,forced:!s},{for:function(t){var n=String(t);if(f(Q,n))return Q[n];var e=$(n);return Q[n]=e,tt[e]=n,e},keyFor:function(t){if(!at(t))throw TypeError(t+" is not a symbol");if(f(tt,t))return tt[t]},useSetter:function(){rt=!0},useSimple:function(){rt=!1}}),r({target:"Object",stat:!0,forced:!s,sham:!u},{create:function(t,n){return void 0===n?w(t):st(w(t),n)},defineProperty:ut,defineProperties:st,getOwnPropertyDescriptor:lt}),r({target:"Object",stat:!0,forced:!s},{getOwnPropertyNames:ft,getOwnPropertySymbols:pt}),r({target:"Object",stat:!0,forced:l((function(){S.f(1)}))},{getOwnPropertySymbols:function(t){return S.f(v(t))}}),X&&r({target:"JSON",stat:!0,forced:!s||l((function(){var t=$();return"[null]"!=X([t])||"{}"!=X({a:t})||"{}"!=X(Object(t))}))},{stringify:function(t,n,e){for(var r,o=[t],i=1;arguments.length>i;)o.push(arguments[i++]);if(r=n,(h(n)||void 0!==t)&&!at(t))return p(n)||(n=function(t,n){if("function"==typeof r&&(n=r.call(this,t,n)),!at(n))return n}),o[1]=n,X.apply(null,o)}}),$.prototype[V]||k($.prototype,V,$.prototype.valueOf),I($,H),P[F]=!0},4747:(t,n,e)=>{var r=e(7854),o=e(8324),i=e(8533),a=e(8880);for(var u in o){var s=r[u],c=s&&s.prototype;if(c&&c.forEach!==i)try{a(c,"forEach",i)}catch(t){c.forEach=i}}},3948:(t,n,e)=>{var r=e(7854),o=e(8324),i=e(6992),a=e(8880),u=e(5112),s=u("iterator"),c=u("toStringTag"),l=i.values;for(var f in o){var p=r[f],h=p&&p.prototype;if(h){if(h[s]!==l)try{a(h,s,l)}catch(t){h[s]=l}if(h[c]||a(h,c,f),o[f])for(var d in i)if(h[d]!==i[d])try{a(h,d,i[d])}catch(t){h[d]=i[d]}}}},2564:(t,n,e)=>{var r=e(2109),o=e(7854),i=e(8113),a=[].slice,u=function(t){return function(n,e){var r=arguments.length>2,o=r?a.call(arguments,2):void 0;return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};r({global:!0,bind:!0,forced:/MSIE .\./.test(i)},{setTimeout:u(o.setTimeout),setInterval:u(o.setInterval)})},9365:(t,n)=>{var e,r;void 0===(r="function"==typeof(e=function(){"use strict";var t="14.6.3";function n(t){t.parentElement.removeChild(t)}function e(t){return null!=t}function r(t){t.preventDefault()}function o(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function i(t,n,e){e>0&&(c(t,n),setTimeout((function(){l(t,n)}),e))}function a(t){return Math.max(Math.min(t,100),0)}function u(t){return Array.isArray(t)?t:[t]}function s(t){var n=(t=String(t)).split(".");return n.length>1?n[1].length:0}function c(t,n){t.classList&&!/\s/.test(n)?t.classList.add(n):t.className+=" "+n}function l(t,n){t.classList&&!/\s/.test(n)?t.classList.remove(n):t.className=t.className.replace(new RegExp("(^|\\b)"+n.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var n=void 0!==window.pageXOffset,e="CSS1Compat"===(t.compatMode||"");return{x:n?window.pageXOffset:e?t.documentElement.scrollLeft:t.body.scrollLeft,y:n?window.pageYOffset:e?t.documentElement.scrollTop:t.body.scrollTop}}function p(t,n){return 100/(n-t)}function h(t,n,e){return 100*n/(t[e+1]-t[e])}function d(t,n){for(var e=1;t>=n[e];)e+=1;return e}function v(t,n,e){if(e>=t.slice(-1)[0])return 100;var r=d(e,t),o=t[r-1],i=t[r],a=n[r-1],u=n[r];return a+function(t,n){return h(t,t[0]<0?n+Math.abs(t[0]):n-t[0],0)}([o,i],e)/p(a,u)}function g(t,n,e,r){if(100===r)return r;var o=d(r,t),i=t[o-1],a=t[o];return e?r-i>(a-i)/2?a:i:n[o-1]?t[o-1]+function(t,n){return Math.round(t/n)*n}(r-t[o-1],n[o-1]):r}function m(t,n,e){var r;if("number"==typeof n&&(n=[n]),!Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'range' contains invalid value.");if(!o(r="min"===t?0:"max"===t?100:parseFloat(t))||!o(n[0]))throw new Error("noUiSlider (14.6.3): 'range' value isn't numeric.");e.xPct.push(r),e.xVal.push(n[0]),r?e.xSteps.push(!isNaN(n[1])&&n[1]):isNaN(n[1])||(e.xSteps[0]=n[1]),e.xHighestCompleteStep.push(0)}function y(t,n,e){if(n)if(e.xVal[t]!==e.xVal[t+1]){e.xSteps[t]=h([e.xVal[t],e.xVal[t+1]],n,0)/p(e.xPct[t],e.xPct[t+1]);var r=(e.xVal[t+1]-e.xVal[t])/e.xNumSteps[t],o=Math.ceil(Number(r.toFixed(3))-1),i=e.xVal[t]+e.xNumSteps[t]*o;e.xHighestCompleteStep[t]=i}else e.xSteps[t]=e.xHighestCompleteStep[t]=e.xVal[t]}function w(t,n,e){var r;this.xPct=[],this.xVal=[],this.xSteps=[e||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=n;var o=[];for(r in t)t.hasOwnProperty(r)&&o.push([t[r],r]);for(o.length&&"object"==typeof o[0][0]?o.sort((function(t,n){return t[0][0]-n[0][0]})):o.sort((function(t,n){return t[0]-n[0]})),r=0;r<o.length;r++)m(o[r][1],o[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)y(r,this.xNumSteps[r],this)}w.prototype.getDistance=function(t){var n,e=[];for(n=0;n<this.xNumSteps.length-1;n++){var r=this.xNumSteps[n];if(r&&t/r%1!=0)throw new Error("noUiSlider (14.6.3): 'limit', 'margin' and 'padding' of "+this.xPct[n]+"% range must be divisible by step.");e[n]=h(this.xVal,t,n)}return e},w.prototype.getAbsoluteDistance=function(t,n,e){var r,o=0;if(t<this.xPct[this.xPct.length-1])for(;t>this.xPct[o+1];)o++;else t===this.xPct[this.xPct.length-1]&&(o=this.xPct.length-2);e||t!==this.xPct[o+1]||o++;var i=1,a=n[o],u=0,s=0,c=0,l=0;for(r=e?(t-this.xPct[o])/(this.xPct[o+1]-this.xPct[o]):(this.xPct[o+1]-t)/(this.xPct[o+1]-this.xPct[o]);a>0;)u=this.xPct[o+1+l]-this.xPct[o+l],n[o+l]*i+100-100*r>100?(s=u*r,i=(a-100*r)/n[o+l],r=1):(s=n[o+l]*u/100*i,i=0),e?(c-=s,this.xPct.length+l>=1&&l--):(c+=s,this.xPct.length-l>=1&&l++),a=n[o+l]*i;return t+c},w.prototype.toStepping=function(t){return v(this.xVal,this.xPct,t)},w.prototype.fromStepping=function(t){return function(t,n,e){if(e>=100)return t.slice(-1)[0];var r=d(e,n),o=t[r-1],i=t[r],a=n[r-1];return function(t,n){return n*(t[1]-t[0])/100+t[0]}([o,i],(e-a)*p(a,n[r]))}(this.xVal,this.xPct,t)},w.prototype.getStep=function(t){return g(this.xPct,this.xSteps,this.snap,t)},w.prototype.getDefaultStep=function(t,n,e){var r=d(t,this.xPct);return(100===t||n&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/e},w.prototype.getNearbySteps=function(t){var n=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[n-2],step:this.xNumSteps[n-2],highestStep:this.xHighestCompleteStep[n-2]},thisStep:{startValue:this.xVal[n-1],step:this.xNumSteps[n-1],highestStep:this.xHighestCompleteStep[n-1]},stepAfter:{startValue:this.xVal[n],step:this.xNumSteps[n],highestStep:this.xHighestCompleteStep[n]}}},w.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(s);return Math.max.apply(null,t)},w.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var x={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number},b={target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"},_=".__tooltips",S=".__aria";function E(t){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(t))return!0;throw new Error("noUiSlider (14.6.3): 'format' requires 'to' and 'from' methods.")}function A(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'step' is not numeric.");t.singleStep=n}function M(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'keyboardPageMultiplier' is not numeric.");t.keyboardPageMultiplier=n}function k(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'keyboardDefaultStep' is not numeric.");t.keyboardDefaultStep=n}function N(t,n){if("object"!=typeof n||Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'range' is not an object.");if(void 0===n.min||void 0===n.max)throw new Error("noUiSlider (14.6.3): Missing 'min' or 'max' in 'range'.");if(n.min===n.max)throw new Error("noUiSlider (14.6.3): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new w(n,t.snap,t.singleStep)}function C(t,n){if(n=u(n),!Array.isArray(n)||!n.length)throw new Error("noUiSlider (14.6.3): 'start' option is incorrect.");t.handles=n.length,t.start=n}function O(t,n){if(t.snap=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'snap' option must be a boolean.")}function P(t,n){if(t.animate=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'animate' option must be a boolean.")}function j(t,n){if(t.animationDuration=n,"number"!=typeof n)throw new Error("noUiSlider (14.6.3): 'animationDuration' option must be a number.")}function T(t,n){var e,r=[!1];if("lower"===n?n=[!0,!1]:"upper"===n&&(n=[!1,!0]),!0===n||!1===n){for(e=1;e<t.handles;e++)r.push(n);r.push(!1)}else{if(!Array.isArray(n)||!n.length||n.length!==t.handles+1)throw new Error("noUiSlider (14.6.3): 'connect' option doesn't match handle count.");r=n}t.connect=r}function D(t,n){switch(n){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider (14.6.3): 'orientation' option is invalid.")}}function L(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'margin' option must be numeric.");0!==n&&(t.margin=t.spectrum.getDistance(n))}function I(t,n){if(!o(n))throw new Error("noUiSlider (14.6.3): 'limit' option must be numeric.");if(t.limit=t.spectrum.getDistance(n),!t.limit||t.handles<2)throw new Error("noUiSlider (14.6.3): 'limit' option is only supported on linear sliders with 2 or more handles.")}function R(t,n){var e;if(!o(n)&&!Array.isArray(n))throw new Error("noUiSlider (14.6.3): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(n)&&2!==n.length&&!o(n[0])&&!o(n[1]))throw new Error("noUiSlider (14.6.3): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==n){for(Array.isArray(n)||(n=[n,n]),t.padding=[t.spectrum.getDistance(n[0]),t.spectrum.getDistance(n[1])],e=0;e<t.spectrum.xNumSteps.length-1;e++)if(t.padding[0][e]<0||t.padding[1][e]<0)throw new Error("noUiSlider (14.6.3): 'padding' option must be a positive number(s).");var r=n[0]+n[1],i=t.spectrum.xVal[0];if(r/(t.spectrum.xVal[t.spectrum.xVal.length-1]-i)>1)throw new Error("noUiSlider (14.6.3): 'padding' option must not exceed 100% of the range.")}}function U(t,n){switch(n){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider (14.6.3): 'direction' option was not recognized.")}}function F(t,n){if("string"!=typeof n)throw new Error("noUiSlider (14.6.3): 'behaviour' must be a string containing options.");var e=n.indexOf("tap")>=0,r=n.indexOf("drag")>=0,o=n.indexOf("fixed")>=0,i=n.indexOf("snap")>=0,a=n.indexOf("hover")>=0,u=n.indexOf("unconstrained")>=0;if(o){if(2!==t.handles)throw new Error("noUiSlider (14.6.3): 'fixed' behaviour must be used with 2 handles");L(t,t.start[1]-t.start[0])}if(u&&(t.margin||t.limit))throw new Error("noUiSlider (14.6.3): 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:e||i,drag:r,fixed:o,snap:i,hover:a,unconstrained:u}}function H(t,n){if(!1!==n)if(!0===n){t.tooltips=[];for(var e=0;e<t.handles;e++)t.tooltips.push(!0)}else{if(t.tooltips=u(n),t.tooltips.length!==t.handles)throw new Error("noUiSlider (14.6.3): must pass a formatter for all handles.");t.tooltips.forEach((function(t){if("boolean"!=typeof t&&("object"!=typeof t||"function"!=typeof t.to))throw new Error("noUiSlider (14.6.3): 'tooltips' must be passed a formatter or 'false'.")}))}}function V(t,n){t.ariaFormat=n,E(n)}function q(t,n){t.format=n,E(n)}function z(t,n){if(t.keyboardSupport=n,"boolean"!=typeof n)throw new Error("noUiSlider (14.6.3): 'keyboardSupport' option must be a boolean.")}function B(t,n){t.documentElement=n}function $(t,n){if("string"!=typeof n&&!1!==n)throw new Error("noUiSlider (14.6.3): 'cssPrefix' must be a string or `false`.");t.cssPrefix=n}function X(t,n){if("object"!=typeof n)throw new Error("noUiSlider (14.6.3): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix)for(var e in t.cssClasses={},n)n.hasOwnProperty(e)&&(t.cssClasses[e]=t.cssPrefix+n[e]);else t.cssClasses=n}function Y(t){var n={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:x,format:x},r={step:{r:!1,t:A},keyboardPageMultiplier:{r:!1,t:M},keyboardDefaultStep:{r:!1,t:k},start:{r:!0,t:C},connect:{r:!0,t:T},direction:{r:!0,t:U},snap:{r:!1,t:O},animate:{r:!1,t:P},animationDuration:{r:!1,t:j},range:{r:!0,t:N},orientation:{r:!1,t:D},margin:{r:!1,t:L},limit:{r:!1,t:I},padding:{r:!1,t:R},behaviour:{r:!0,t:F},ariaFormat:{r:!1,t:V},format:{r:!1,t:q},tooltips:{r:!1,t:H},keyboardSupport:{r:!0,t:z},documentElement:{r:!1,t:B},cssPrefix:{r:!0,t:$},cssClasses:{r:!0,t:X}},o={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:b,keyboardPageMultiplier:5,keyboardDefaultStep:10};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(r).forEach((function(i){if(!e(t[i])&&void 0===o[i]){if(r[i].r)throw new Error("noUiSlider (14.6.3): '"+i+"' is required.");return!0}r[i].t(n,e(t[i])?t[i]:o[i])})),n.pips=t.pips;var i=document.createElement("div"),a=void 0!==i.style.msTransform,u=void 0!==i.style.transform;n.transformRule=u?"transform":a?"msTransform":"webkitTransform";return n.style=[["left","top"],["right","bottom"]][n.dir][n.ort],n}function G(t,e,o){var s,p,h,d,v,g,m,y,w=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},x=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,n)}catch(t){}return t}(),b=t,E=e.spectrum,A=[],M=[],k=[],N=0,C={},O=t.ownerDocument,P=e.documentElement||O.documentElement,j=O.body,T="rtl"===O.dir||1===e.ort?0:100;function D(t,n){var e=O.createElement("div");return n&&c(e,n),t.appendChild(e),e}function L(t,n){var r=D(t,e.cssClasses.origin),o=D(r,e.cssClasses.handle);return D(o,e.cssClasses.touchArea),o.setAttribute("data-handle",n),e.keyboardSupport&&(o.setAttribute("tabindex","0"),o.addEventListener("keydown",(function(t){return function(t,n){if(U()||F(n))return!1;var r=["Left","Right"],o=["Down","Up"],i=["PageDown","PageUp"],a=["Home","End"];e.dir&&!e.ort?r.reverse():e.ort&&!e.dir&&(o.reverse(),i.reverse());var u,s=t.key.replace("Arrow",""),c=s===i[0],l=s===i[1],f=s===o[0]||s===r[0]||c,p=s===o[1]||s===r[1]||l,h=s===a[0],d=s===a[1];if(!(f||p||h||d))return!0;if(t.preventDefault(),p||f){var v=e.keyboardPageMultiplier,g=f?0:1,m=dt(n)[g];if(null===m)return!1;!1===m&&(m=E.getDefaultStep(M[n],f,e.keyboardDefaultStep)),(l||c)&&(m*=v),m=Math.max(m,1e-7),m*=f?-1:1,u=A[n]+m}else u=d?e.spectrum.xVal[e.spectrum.xVal.length-1]:e.spectrum.xVal[0];return ct(n,E.toStepping(u),!0,!0),rt("slide",n),rt("update",n),rt("change",n),rt("set",n),!1}(t,n)}))),o.setAttribute("role","slider"),o.setAttribute("aria-orientation",e.ort?"vertical":"horizontal"),0===n?c(o,e.cssClasses.handleLower):n===e.handles-1&&c(o,e.cssClasses.handleUpper),r}function I(t,n){return!!n&&D(t,e.cssClasses.connect)}function R(t,n){return!!e.tooltips[n]&&D(t.firstChild,e.cssClasses.tooltip)}function U(){return b.hasAttribute("disabled")}function F(t){return p[t].hasAttribute("disabled")}function H(){v&&(et("update"+_),v.forEach((function(t){t&&n(t)})),v=null)}function V(){H(),v=p.map(R),nt("update"+_,(function(t,n,r){if(v[n]){var o=t[n];!0!==e.tooltips[n]&&(o=e.tooltips[n].to(r[n])),v[n].innerHTML=o}}))}function q(t,n,r){var o=O.createElement("div"),i=[];i[0]=e.cssClasses.valueNormal,i[1]=e.cssClasses.valueLarge,i[2]=e.cssClasses.valueSub;var a=[];a[0]=e.cssClasses.markerNormal,a[1]=e.cssClasses.markerLarge,a[2]=e.cssClasses.markerSub;var u=[e.cssClasses.valueHorizontal,e.cssClasses.valueVertical],s=[e.cssClasses.markerHorizontal,e.cssClasses.markerVertical];function l(t,n){var r=n===e.cssClasses.value,o=r?i:a;return n+" "+(r?u:s)[e.ort]+" "+o[t]}return c(o,e.cssClasses.pips),c(o,0===e.ort?e.cssClasses.pipsHorizontal:e.cssClasses.pipsVertical),Object.keys(t).forEach((function(i){!function(t,i,a){if(-1!==(a=n?n(i,a):a)){var u=D(o,!1);u.className=l(a,e.cssClasses.marker),u.style[e.style]=t+"%",a>0&&((u=D(o,!1)).className=l(a,e.cssClasses.value),u.setAttribute("data-value",i),u.style[e.style]=t+"%",u.innerHTML=r.to(i))}}(i,t[i][0],t[i][1])})),o}function z(){d&&(n(d),d=null)}function B(t){z();var n=t.mode,e=t.density||1,r=t.filter||!1,o=function(t,n,e){var r,o={},i=E.xVal[0],a=E.xVal[E.xVal.length-1],u=!1,s=!1,c=0;return(r=e.slice().sort((function(t,n){return t-n})),e=r.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==i&&(e.unshift(i),u=!0),e[e.length-1]!==a&&(e.push(a),s=!0),e.forEach((function(r,i){var a,l,f,p,h,d,v,g,m,y,w=r,x=e[i+1],b="steps"===n;if(b&&(a=E.xNumSteps[i]),a||(a=x-w),!1!==w)for(void 0===x&&(x=w),a=Math.max(a,1e-7),l=w;l<=x;l=(l+a).toFixed(7)/1){for(g=(h=(p=E.toStepping(l))-c)/t,y=h/(m=Math.round(g)),f=1;f<=m;f+=1)o[(d=c+f*y).toFixed(5)]=[E.fromStepping(d),0];v=e.indexOf(l)>-1?1:b?2:0,!i&&u&&l!==x&&(v=0),l===x&&s||(o[p.toFixed(5)]=[l,v]),c=p}})),o}(e,n,function(t,n,e){if("range"===t||"steps"===t)return E.xVal;if("count"===t){if(n<2)throw new Error("noUiSlider (14.6.3): 'values' (>= 2) required for mode 'count'.");var r=n-1,o=100/r;for(n=[];r--;)n[r]=r*o;n.push(100),t="positions"}return"positions"===t?n.map((function(t){return E.fromStepping(e?E.getStep(t):t)})):"values"===t?e?n.map((function(t){return E.fromStepping(E.getStep(E.toStepping(t)))})):n:void 0}(n,t.values||!1,t.stepped||!1)),i=t.format||{to:Math.round};return d=b.appendChild(q(o,r,i))}function $(){var t=s.getBoundingClientRect(),n="offset"+["Width","Height"][e.ort];return 0===e.ort?t.width||s[n]:t.height||s[n]}function X(t,n,r,o){var i=function(i){return!!(i=function(t,n,e){var r,o,i=0===t.type.indexOf("touch"),a=0===t.type.indexOf("mouse"),u=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(u=!0),"mousedown"===t.type&&!t.buttons&&!t.touches)return!1;if(i){var s=function(t){return t.target===e||e.contains(t.target)||t.target.shadowRoot&&t.target.shadowRoot.contains(e)};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,s);if(c.length>1)return!1;r=c[0].pageX,o=c[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,s);if(!l)return!1;r=l.pageX,o=l.pageY}}return n=n||f(O),(a||u)&&(r=t.clientX+n.x,o=t.clientY+n.y),t.pageOffset=n,t.points=[r,o],t.cursor=a||u,t}(i,o.pageOffset,o.target||n))&&!(U()&&!o.doNotReject)&&(a=b,u=e.cssClasses.tap,!((a.classList?a.classList.contains(u):new RegExp("\\b"+u+"\\b").test(a.className))&&!o.doNotReject))&&!(t===w.start&&void 0!==i.buttons&&i.buttons>1)&&(!o.hover||!i.buttons)&&(x||i.preventDefault(),i.calcPoint=i.points[e.ort],void r(i,o));var a,u},a=[];return t.split(" ").forEach((function(t){n.addEventListener(t,i,!!x&&{passive:!0}),a.push([t,i])})),a}function G(t){var n,r,o,i,u,c,l=100*(t-(n=s,r=e.ort,o=n.getBoundingClientRect(),i=n.ownerDocument,u=i.documentElement,c=f(i),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),r?o.top+c.y-u.clientTop:o.left+c.x-u.clientLeft))/$();return l=a(l),e.dir?100-l:l}function W(t,n){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&Z(t,n)}function K(t,n){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==n.buttonsProperty)return Z(t,n);var r=(e.dir?-1:1)*(t.calcPoint-n.startCalcPoint);at(r>0,100*r/n.baseSize,n.locations,n.handleNumbers)}function Z(t,n){n.handle&&(l(n.handle,e.cssClasses.active),N-=1),n.listeners.forEach((function(t){P.removeEventListener(t[0],t[1])})),0===N&&(l(b,e.cssClasses.drag),st(),t.cursor&&(j.style.cursor="",j.removeEventListener("selectstart",r))),n.handleNumbers.forEach((function(t){rt("change",t),rt("set",t),rt("end",t)}))}function J(t,n){if(n.handleNumbers.some(F))return!1;var o;1===n.handleNumbers.length&&(o=p[n.handleNumbers[0]].children[0],N+=1,c(o,e.cssClasses.active)),t.stopPropagation();var i=[],a=X(w.move,P,K,{target:t.target,handle:o,listeners:i,startCalcPoint:t.calcPoint,baseSize:$(),pageOffset:t.pageOffset,handleNumbers:n.handleNumbers,buttonsProperty:t.buttons,locations:M.slice()}),u=X(w.end,P,Z,{target:t.target,handle:o,listeners:i,doNotReject:!0,handleNumbers:n.handleNumbers}),s=X("mouseout",P,W,{target:t.target,handle:o,listeners:i,doNotReject:!0,handleNumbers:n.handleNumbers});i.push.apply(i,a.concat(u,s)),t.cursor&&(j.style.cursor=getComputedStyle(t.target).cursor,p.length>1&&c(b,e.cssClasses.drag),j.addEventListener("selectstart",r,!1)),n.handleNumbers.forEach((function(t){rt("start",t)}))}function Q(t){t.stopPropagation();var n=G(t.calcPoint),r=function(t){var n=100,e=!1;return p.forEach((function(r,o){if(!F(o)){var i=M[o],a=Math.abs(i-t);(a<n||a<=n&&t>i||100===a&&100===n)&&(e=o,n=a)}})),e}(n);if(!1===r)return!1;e.events.snap||i(b,e.cssClasses.tap,e.animationDuration),ct(r,n,!0,!0),st(),rt("slide",r,!0),rt("update",r,!0),rt("change",r,!0),rt("set",r,!0),e.events.snap&&J(t,{handleNumbers:[r]})}function tt(t){var n=G(t.calcPoint),e=E.getStep(n),r=E.fromStepping(e);Object.keys(C).forEach((function(t){"hover"===t.split(".")[0]&&C[t].forEach((function(t){t.call(g,r)}))}))}function nt(t,n){C[t]=C[t]||[],C[t].push(n),"update"===t.split(".")[0]&&p.forEach((function(t,n){rt("update",n)}))}function et(t){var n=t&&t.split(".")[0],e=n?t.substring(n.length):t;Object.keys(C).forEach((function(t){var r=t.split(".")[0],o=t.substring(r.length);n&&n!==r||e&&e!==o||function(t){return t===S||t===_}(o)&&e!==o||delete C[t]}))}function rt(t,n,r){Object.keys(C).forEach((function(o){var i=o.split(".")[0];t===i&&C[o].forEach((function(t){t.call(g,A.map(e.format.to),n,A.slice(),r||!1,M.slice(),g)}))}))}function ot(t,n,r,o,i,u){var s;return p.length>1&&!e.events.unconstrained&&(o&&n>0&&(s=E.getAbsoluteDistance(t[n-1],e.margin,0),r=Math.max(r,s)),i&&n<p.length-1&&(s=E.getAbsoluteDistance(t[n+1],e.margin,1),r=Math.min(r,s))),p.length>1&&e.limit&&(o&&n>0&&(s=E.getAbsoluteDistance(t[n-1],e.limit,0),r=Math.min(r,s)),i&&n<p.length-1&&(s=E.getAbsoluteDistance(t[n+1],e.limit,1),r=Math.max(r,s))),e.padding&&(0===n&&(s=E.getAbsoluteDistance(0,e.padding[0],0),r=Math.max(r,s)),n===p.length-1&&(s=E.getAbsoluteDistance(100,e.padding[1],1),r=Math.min(r,s))),!((r=a(r=E.getStep(r)))===t[n]&&!u)&&r}function it(t,n){var r=e.ort;return(r?n:t)+", "+(r?t:n)}function at(t,n,e,r){var o=e.slice(),i=[!t,t],a=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,e){var r=ot(o,t,o[t]+n,i[e],a[e],!1);!1===r?n=0:(n=r-o[t],o[t]=r)})):i=a=[!0];var u=!1;r.forEach((function(t,r){u=ct(t,e[t]+n,i[r],a[r])||u})),u&&r.forEach((function(t){rt("update",t),rt("slide",t)}))}function ut(t,n){return e.dir?100-t-n:t}function st(){k.forEach((function(t){var n=M[t]>50?-1:1,e=3+(p.length+n*t);p[t].style.zIndex=e}))}function ct(t,n,r,o,i){return i||(n=ot(M,t,n,r,o,!1)),!1!==n&&(function(t,n){M[t]=n,A[t]=E.fromStepping(n);var r="translate("+it(10*(ut(n,0)-T)+"%","0")+")";p[t].style[e.transformRule]=r,lt(t),lt(t+1)}(t,n),!0)}function lt(t){if(h[t]){var n=0,r=100;0!==t&&(n=M[t-1]),t!==h.length-1&&(r=M[t]);var o=r-n,i="translate("+it(ut(n,o)+"%","0")+")",a="scale("+it(o/100,"1")+")";h[t].style[e.transformRule]=i+" "+a}}function ft(t,n){return null===t||!1===t||void 0===t?M[n]:("number"==typeof t&&(t=String(t)),t=e.format.from(t),!1===(t=E.toStepping(t))||isNaN(t)?M[n]:t)}function pt(t,n,r){var o=u(t),a=void 0===M[0];n=void 0===n||!!n,e.animate&&!a&&i(b,e.cssClasses.tap,e.animationDuration),k.forEach((function(t){ct(t,ft(o[t],t),!0,!1,r)}));for(var s=1===k.length?0:1;s<k.length;++s)k.forEach((function(t){ct(t,M[t],!0,!0,r)}));st(),k.forEach((function(t){rt("update",t),null!==o[t]&&n&&rt("set",t)}))}function ht(){var t=A.map(e.format.to);return 1===t.length?t[0]:t}function dt(t){var n=M[t],r=E.getNearbySteps(n),o=A[t],i=r.thisStep.step,a=null;if(e.snap)return[o-r.stepBefore.startValue||null,r.stepAfter.startValue-o||null];!1!==i&&o+i>r.stepAfter.startValue&&(i=r.stepAfter.startValue-o),a=o>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&o-r.stepBefore.highestStep,100===n?i=null:0===n&&(a=null);var u=E.countStepDecimals();return null!==i&&!1!==i&&(i=Number(i.toFixed(u))),null!==a&&!1!==a&&(a=Number(a.toFixed(u))),[a,i]}return c(y=b,e.cssClasses.target),0===e.dir?c(y,e.cssClasses.ltr):c(y,e.cssClasses.rtl),0===e.ort?c(y,e.cssClasses.horizontal):c(y,e.cssClasses.vertical),c(y,"rtl"===getComputedStyle(y).direction?e.cssClasses.textDirectionRtl:e.cssClasses.textDirectionLtr),s=D(y,e.cssClasses.base),function(t,n){var r=D(n,e.cssClasses.connects);p=[],(h=[]).push(I(r,t[0]));for(var o=0;o<e.handles;o++)p.push(L(n,o)),k[o]=o,h.push(I(r,t[o+1]))}(e.connect,s),(m=e.events).fixed||p.forEach((function(t,n){X(w.start,t.children[0],J,{handleNumbers:[n]})})),m.tap&&X(w.start,s,Q,{}),m.hover&&X(w.move,s,tt,{hover:!0}),m.drag&&h.forEach((function(t,n){if(!1!==t&&0!==n&&n!==h.length-1){var r=p[n-1],o=p[n],i=[t];c(t,e.cssClasses.draggable),m.fixed&&(i.push(r.children[0]),i.push(o.children[0])),i.forEach((function(t){X(w.start,t,J,{handles:[r,o],handleNumbers:[n-1,n]})}))}})),pt(e.start),e.pips&&B(e.pips),e.tooltips&&V(),et("update"+S),nt("update"+S,(function(t,n,r,o,i){k.forEach((function(t){var n=p[t],o=ot(M,t,0,!0,!0,!0),a=ot(M,t,100,!0,!0,!0),u=i[t],s=e.ariaFormat.to(r[t]);o=E.fromStepping(o).toFixed(1),a=E.fromStepping(a).toFixed(1),u=E.fromStepping(u).toFixed(1),n.children[0].setAttribute("aria-valuemin",o),n.children[0].setAttribute("aria-valuemax",a),n.children[0].setAttribute("aria-valuenow",u),n.children[0].setAttribute("aria-valuetext",s)}))})),g={destroy:function(){for(var t in et(S),et(_),e.cssClasses)e.cssClasses.hasOwnProperty(t)&&l(b,e.cssClasses[t]);for(;b.firstChild;)b.removeChild(b.firstChild);delete b.noUiSlider},steps:function(){return k.map(dt)},on:nt,off:et,get:ht,set:pt,setHandle:function(t,n,e,r){if(!((t=Number(t))>=0&&t<k.length))throw new Error("noUiSlider (14.6.3): invalid handle number, got: "+t);ct(t,ft(n,t),!0,!0,r),rt("update",t),e&&rt("set",t)},reset:function(t){pt(e.start,t)},__moveHandles:function(t,n,e){at(t,n,M,e)},options:o,updateOptions:function(t,n){var r=ht(),i=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];i.forEach((function(n){void 0!==t[n]&&(o[n]=t[n])}));var a=Y(o);i.forEach((function(n){void 0!==t[n]&&(e[n]=a[n])})),E=a.spectrum,e.margin=a.margin,e.limit=a.limit,e.padding=a.padding,e.pips?B(e.pips):z(),e.tooltips?V():H(),M=[],pt(t.start||r,n)},target:b,removePips:z,removeTooltips:H,getTooltips:function(){return v},getOrigins:function(){return p},pips:B}}return{__spectrum:w,version:t,cssClasses:b,create:function(t,n){if(!t||!t.nodeName)throw new Error("noUiSlider (14.6.3): create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider (14.6.3): Slider was already initialized.");var e=G(t,Y(n),n);return t.noUiSlider=e,e}}})?e.apply(n,[]):e)||(t.exports=r)},5666:t=>{var n=function(t){"use strict";var n,e=Object.prototype,r=e.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag";function s(t,n,e){return Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}),t[n]}try{s({},"")}catch(t){s=function(t,n,e){return t[n]=e}}function c(t,n,e,r){var o=n&&n.prototype instanceof g?n:g,i=Object.create(o.prototype),a=new N(r||[]);return i._invoke=function(t,n,e){var r=f;return function(o,i){if(r===h)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return O()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=A(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===f)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=h;var s=l(t,n,e);if("normal"===s.type){if(r=e.done?d:p,s.arg===v)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r=d,e.method="throw",e.arg=s.arg)}}}(t,e,a),i}function l(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f="suspendedStart",p="suspendedYield",h="executing",d="completed",v={};function g(){}function m(){}function y(){}var w={};w[i]=function(){return this};var x=Object.getPrototypeOf,b=x&&x(x(C([])));b&&b!==e&&r.call(b,i)&&(w=b);var _=y.prototype=g.prototype=Object.create(w);function S(t){["next","throw","return"].forEach((function(n){s(t,n,(function(t){return this._invoke(n,t)}))}))}function E(t,n){function e(o,i,a,u){var s=l(t[o],t,i);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"==typeof f&&r.call(f,"__await")?n.resolve(f.__await).then((function(t){e("next",t,a,u)}),(function(t){e("throw",t,a,u)})):n.resolve(f).then((function(t){c.value=t,a(c)}),(function(t){return e("throw",t,a,u)}))}u(s.arg)}var o;this._invoke=function(t,r){function i(){return new n((function(n,o){e(t,r,n,o)}))}return o=o?o.then(i,i):i()}}function A(t,e){var r=t.iterator[e.method];if(r===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=n,A(t,e),"throw"===e.method))return v;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=l(r,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,v;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=n),e.delegate=null,v):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,v)}function M(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function k(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function N(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(M,this),this.reset(!0)}function C(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,a=function e(){for(;++o<t.length;)if(r.call(t,o))return e.value=t[o],e.done=!1,e;return e.value=n,e.done=!0,e};return a.next=a}}return{next:O}}function O(){return{value:n,done:!0}}return m.prototype=_.constructor=y,y.constructor=m,m.displayName=s(y,u,"GeneratorFunction"),t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===m||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,y):(t.__proto__=y,s(t,u,"GeneratorFunction")),t.prototype=Object.create(_),t},t.awrap=function(t){return{__await:t}},S(E.prototype),E.prototype[a]=function(){return this},t.AsyncIterator=E,t.async=function(n,e,r,o,i){void 0===i&&(i=Promise);var a=new E(c(n,e,r,o),i);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},S(_),s(_,u,"Generator"),_[i]=function(){return this},_.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=C,N.prototype={constructor:N,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=n,this.done=!1,this.delegate=null,this.method="next",this.arg=n,this.tryEntries.forEach(k),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=n)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function o(r,o){return u.type="throw",u.arg=t,e.next=r,o&&(e.method="next",e.arg=n),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=r.call(a,"catchLoc"),c=r.call(a,"finallyLoc");if(s&&c){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var o=this.tryEntries[e];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),k(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;k(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:C(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=n),v}},t}(t.exports);try{regeneratorRuntime=n}catch(t){Function("r","regeneratorRuntime = r")(n)}}},s={};function c(t){var n=s[t];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var e=s[t]={exports:{}};try{var r={id:t,module:e,factory:u[t],require:c};c.i.forEach((function(t){t(r)})),e=r.module,r.factory.call(e.exports,e,e.exports,r.require)}catch(t){throw e.error=t,t}return e.exports}c.m=u,c.c=s,c.i=[],c.hu=t=>t+"."+c.h()+".hot-update.js",c.miniCssF=t=>{},c.hmrF=()=>"china."+c.h()+".hot-update.json",c.h=()=>"f4ba0ba700dda6ad14bc",c.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),c.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),t={},n="geo-satellites:",c.l=(e,r,o,i)=>{if(t[e])t[e].push(r);else{var a,u;if(void 0!==o)for(var s=document.getElementsByTagName("script"),l=0;l<s.length;l++){var f=s[l];if(f.getAttribute("src")==e||f.getAttribute("data-webpack")==n+o){a=f;break}}a||(u=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,c.nc&&a.setAttribute("nonce",c.nc),a.setAttribute("data-webpack",n+o),a.src=e),t[e]=[r];var p=(n,r)=>{a.onerror=a.onload=null,clearTimeout(h);var o=t[e];if(delete t[e],a.parentNode&&a.parentNode.removeChild(a),o&&o.forEach((t=>t(r))),n)return n(r)},h=setTimeout(p.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=p.bind(null,a.onerror),a.onload=p.bind(null,a.onload),u&&document.head.appendChild(a)}},(()=>{var t,n,e,r,o={},i=c.c,a=[],u=[],s="idle";function l(t){s=t;for(var n=0;n<u.length;n++)u[n].call(null,t)}function f(t){if(0===n.length)return t();var e=n;return n=[],Promise.all(e).then((function(){return f(t)}))}function p(t){if("idle"!==s)throw new Error("check() is only allowed in idle status");return l("check"),c.hmrM().then((function(r){if(!r)return l(v()?"ready":"idle"),null;l("prepare");var o=[];return n=[],e=[],Promise.all(Object.keys(c.hmrC).reduce((function(t,n){return c.hmrC[n](r.c,r.r,r.m,t,e,o),t}),[])).then((function(){return f((function(){return t?d(t):(l("ready"),o)}))}))}))}function h(t){return"ready"!==s?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status")})):d(t)}function d(t){t=t||{},v();var n=e.map((function(n){return n(t)}));e=void 0;var o,i=n.map((function(t){return t.error})).filter(Boolean);if(i.length>0)return l("abort"),Promise.resolve().then((function(){throw i[0]}));l("dispose"),n.forEach((function(t){t.dispose&&t.dispose()})),l("apply");var a=function(t){o||(o=t)},u=[];return n.forEach((function(t){if(t.apply){var n=t.apply(a);if(n)for(var e=0;e<n.length;e++)u.push(n[e])}})),o?(l("fail"),Promise.resolve().then((function(){throw o}))):r?d(t).then((function(t){return u.forEach((function(n){t.indexOf(n)<0&&t.push(n)})),t})):(l("idle"),Promise.resolve(u))}function v(){if(r)return e||(e=[]),Object.keys(c.hmrI).forEach((function(t){r.forEach((function(n){c.hmrI[t](n,e)}))})),r=void 0,!0}c.hmrD=o,c.i.push((function(d){var v,g,m,y=d.module,w=function(e,r){var o=i[r];if(!o)return e;var u=function(n){if(o.hot.active){if(i[n]){var u=i[n].parents;-1===u.indexOf(r)&&u.push(r)}else a=[r],t=n;-1===o.children.indexOf(n)&&o.children.push(n)}else console.warn("[HMR] unexpected require("+n+") from disposed module "+r),a=[];return e(n)},c=function(t){return{configurable:!0,enumerable:!0,get:function(){return e[t]},set:function(n){e[t]=n}}};for(var p in e)Object.prototype.hasOwnProperty.call(e,p)&&"e"!==p&&Object.defineProperty(u,p,c(p));return u.e=function(t){return function(t){switch(s){case"ready":return l("prepare"),n.push(t),f((function(){l("ready")})),t;case"prepare":return n.push(t),t;default:return t}}(e.e(t))},u}(d.require,d.id);y.hot=(v=d.id,g=y,m={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:t!==v,_requireSelf:function(){a=g.parents.slice(),t=v,c(v)},active:!0,accept:function(t,n,e){if(void 0===t)m._selfAccepted=!0;else if("function"==typeof t)m._selfAccepted=t;else if("object"==typeof t&&null!==t)for(var r=0;r<t.length;r++)m._acceptedDependencies[t[r]]=n||function(){},m._acceptedErrorHandlers[t[r]]=e;else m._acceptedDependencies[t]=n||function(){},m._acceptedErrorHandlers[t]=e},decline:function(t){if(void 0===t)m._selfDeclined=!0;else if("object"==typeof t&&null!==t)for(var n=0;n<t.length;n++)m._declinedDependencies[t[n]]=!0;else m._declinedDependencies[t]=!0},dispose:function(t){m._disposeHandlers.push(t)},addDisposeHandler:function(t){m._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=m._disposeHandlers.indexOf(t);n>=0&&m._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,s){case"idle":e=[],Object.keys(c.hmrI).forEach((function(t){c.hmrI[t](v,e)})),l("ready");break;case"ready":Object.keys(c.hmrI).forEach((function(t){c.hmrI[t](v,e)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(v)}},check:p,apply:h,status:function(t){if(!t)return s;u.push(t)},addStatusHandler:function(t){u.push(t)},removeStatusHandler:function(t){var n=u.indexOf(t);n>=0&&u.splice(n,1)},data:o[v]},t=void 0,m),y.parents=a,y.children=[],a=[],d.require=w})),c.hmrC={},c.hmrI={}})(),(()=>{var t;c.g.importScripts&&(t=c.g.location+"");var n=c.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var e=n.getElementsByTagName("script");e.length&&(t=e[e.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),c.p=t})(),e=(t,n,e,r)=>{var o=document.createElement("link");return o.rel="stylesheet",o.type="text/css",o.onerror=o.onload=i=>{if(o.onerror=o.onload=null,"load"===i.type)e();else{var a=i&&("load"===i.type?"missing":i.type),u=i&&i.target&&i.target.href||n,s=new Error("Loading CSS chunk "+t+" failed.\n("+u+")");s.code="CSS_CHUNK_LOAD_FAILED",s.type=a,s.request=u,o.parentNode.removeChild(o),r(s)}},o.href=n,document.head.appendChild(o),o},r=(t,n)=>{for(var e=document.getElementsByTagName("link"),r=0;r<e.length;r++){var o=(a=e[r]).getAttribute("data-href")||a.getAttribute("href");if("stylesheet"===a.rel&&(o===t||o===n))return a}var i=document.getElementsByTagName("style");for(r=0;r<i.length;r++){var a;if((o=(a=i[r]).getAttribute("data-href"))===t||o===n)return a}},o=[],i=[],a=t=>({dispose:()=>{for(var t=0;t<o.length;t++){var n=o[t];n.parentNode&&n.parentNode.removeChild(n)}o.length=0},apply:()=>{for(var t=0;t<i.length;t++)i[t].rel="stylesheet";i.length=0}}),c.hmrC.miniCss=(t,n,u,s,l,f)=>{l.push(a),t.forEach((t=>{var n=c.miniCssF(t),a=c.p+n;const u=r(n,a);u&&s.push(new Promise(((n,r)=>{var s=e(t,a,(()=>{s.as="style",s.rel="preload",n()}),r);o.push(u),i.push(s)})))}))},(()=>{var t,n,e,r,o={355:0},i={};function a(t){return new Promise(((n,e)=>{i[t]=n;var r=c.p+c.hu(t),o=new Error;c.l(r,(n=>{if(i[t]){i[t]=void 0;var r=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;o.message="Loading hot update chunk "+t+" failed.\n("+r+": "+a+")",o.name="ChunkLoadError",o.type=r,o.request=a,e(o)}}))}))}function u(i){function a(t){for(var n=[t],e={},r=n.map((function(t){return{chain:[t],id:t}}));r.length>0;){var o=r.pop(),i=o.id,a=o.chain,s=c.c[i];if(s&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:i};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:i};for(var l=0;l<s.parents.length;l++){var f=s.parents[l],p=c.c[f];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:a.concat([f]),moduleId:i,parentId:f};-1===n.indexOf(f)&&(p.hot._acceptedDependencies[i]?(e[f]||(e[f]=[]),u(e[f],[i])):(delete e[f],n.push(f),r.push({chain:a.concat([f]),id:f})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function u(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}c.f&&delete c.f.jsonpHmr,t=void 0;var s={},l=[],f={},p=function(t){console.warn("[HMR] unexpected require("+t.id+") to disposed module")};for(var h in n)if(c.o(n,h)){var d,v=n[h],g=!1,m=!1,y=!1,w="";switch((d=v?a(h):{type:"disposed",moduleId:h}).chain&&(w="\nUpdate propagation: "+d.chain.join(" -> ")),d.type){case"self-declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(g=new Error("Aborted because of self decline: "+d.moduleId+w));break;case"declined":i.onDeclined&&i.onDeclined(d),i.ignoreDeclined||(g=new Error("Aborted because of declined dependency: "+d.moduleId+" in "+d.parentId+w));break;case"unaccepted":i.onUnaccepted&&i.onUnaccepted(d),i.ignoreUnaccepted||(g=new Error("Aborted because "+h+" is not accepted"+w));break;case"accepted":i.onAccepted&&i.onAccepted(d),m=!0;break;case"disposed":i.onDisposed&&i.onDisposed(d),y=!0;break;default:throw new Error("Unexception type "+d.type)}if(g)return{error:g};if(m)for(h in f[h]=v,u(l,d.outdatedModules),d.outdatedDependencies)c.o(d.outdatedDependencies,h)&&(s[h]||(s[h]=[]),u(s[h],d.outdatedDependencies[h]));y&&(u(l,[d.moduleId]),f[h]=p)}n=void 0;for(var x,b=[],_=0;_<l.length;_++){var S=l[_],E=c.c[S];E&&E.hot._selfAccepted&&f[S]!==p&&!E.hot._selfInvalidated&&b.push({module:S,require:E.hot._requireSelf,errorHandler:E.hot._selfAccepted})}return{dispose:function(){var t;e.forEach((function(t){delete o[t]})),e=void 0;for(var n,r=l.slice();r.length>0;){var i=r.pop(),a=c.c[i];if(a){var u={},f=a.hot._disposeHandlers;for(_=0;_<f.length;_++)f[_].call(null,u);for(c.hmrD[i]=u,a.hot.active=!1,delete c.c[i],delete s[i],_=0;_<a.children.length;_++){var p=c.c[a.children[_]];p&&(t=p.parents.indexOf(i))>=0&&p.parents.splice(t,1)}}}for(var h in s)if(c.o(s,h)&&(a=c.c[h]))for(x=s[h],_=0;_<x.length;_++)n=x[_],(t=a.children.indexOf(n))>=0&&a.children.splice(t,1)},apply:function(t){for(var n in f)c.o(f,n)&&(c.m[n]=f[n]);for(var e=0;e<r.length;e++)r[e](c);for(var o in s)if(c.o(s,o)){var a=c.c[o];if(a){x=s[o];for(var u=[],p=[],h=[],d=0;d<x.length;d++){var v=x[d],g=a.hot._acceptedDependencies[v],m=a.hot._acceptedErrorHandlers[v];if(g){if(-1!==u.indexOf(g))continue;u.push(g),p.push(m),h.push(v)}}for(var y=0;y<u.length;y++)try{u[y].call(null,x)}catch(n){if("function"==typeof p[y])try{p[y](n,{moduleId:o,dependencyId:h[y]})}catch(e){i.onErrored&&i.onErrored({type:"accept-error-handler-errored",moduleId:o,dependencyId:h[y],error:e,originalError:n}),i.ignoreErrored||(t(e),t(n))}else i.onErrored&&i.onErrored({type:"accept-errored",moduleId:o,dependencyId:h[y],error:n}),i.ignoreErrored||t(n)}}}for(var w=0;w<b.length;w++){var _=b[w],S=_.module;try{_.require(S)}catch(n){if("function"==typeof _.errorHandler)try{_.errorHandler(n,{moduleId:S,module:c.c[S]})}catch(e){i.onErrored&&i.onErrored({type:"self-accept-error-handler-errored",moduleId:S,error:e,originalError:n}),i.ignoreErrored||(t(e),t(n))}else i.onErrored&&i.onErrored({type:"self-accept-errored",moduleId:S,error:n}),i.ignoreErrored||t(n)}}return l}}}self.webpackHotUpdategeo_satellites=(t,e,o)=>{for(var a in e)c.o(e,a)&&(n[a]=e[a]);o&&r.push(o),i[t]&&(i[t](),i[t]=void 0)},c.hmrI.jsonp=function(t,o){n||(n={},r=[],e=[],o.push(u)),c.o(n,t)||(n[t]=c.m[t])},c.hmrC.jsonp=function(i,s,l,f,p,h){p.push(u),t={},e=s,n=l.reduce((function(t,n){return t[n]=!1,t}),{}),r=[],i.forEach((function(n){c.o(o,n)&&void 0!==o[n]&&(f.push(a(n)),t[n]=!0)})),c.f&&(c.f.jsonpHmr=function(n,e){t&&!c.o(t,n)&&c.o(o,n)&&void 0!==o[n]&&(e.push(a(n)),t[n]=!0)})},c.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(c.p+c.hmrF()).then((t=>{if(404!==t.status){if(!t.ok)throw new Error("Failed to fetch update manifest "+t.statusText);return t.json()}}))}})(),c(3933)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy93ZWJwYWNrL3J1bnRpbWUvbG9hZCBzY3JpcHQiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvd2VicGFjay9ydW50aW1lL2NzcyBsb2FkaW5nIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vc3JjL2pzL2JyZWFrcG9pbnRzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvbWF0aC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL25vb3AuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2J1ZmZlci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvaW50RXF1YWwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL3Jlam9pbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvZnN1bS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NhcnRlc2lhbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BvbHlnb25Db250YWlucy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvbWVyZ2UuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2luZGV4LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9hbnRpbWVyaWRpYW4uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jaXJjbGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9jbGlwL2NpcmNsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2NsaXAvcmVjdGFuZ2xlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY2xpcC9saW5lLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcm90YXRpb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9zdHJlYW0uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2JvdW5kcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vZml0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcHJvamVjdGlvbi9yZXNhbXBsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wcm9qZWN0aW9uL2F6aW11dGhhbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3Byb2plY3Rpb24vb3J0aG9ncmFwaGljLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9hcmVhLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWdlby9zcmMvcGF0aC9jZW50cm9pZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvY29udGV4dC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvbWVhc3VyZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1nZW8vc3JjL3BhdGgvc3RyaW5nLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy90aWNrcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYXNjZW5kaW5nLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9iaXNlY3Rvci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1hcnJheS9zcmMvYmlzZWN0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWFycmF5L3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtY29sb3Ivc3JjL2RlZmluZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1jb2xvci9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2Jhc2lzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvY29sb3IuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JnYi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL2RhdGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL251bWJlci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvb2JqZWN0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9iYXNpc0Nsb3NlZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvc3RyaW5nLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy9udW1iZXJBcnJheS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdmFsdWUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtaW50ZXJwb2xhdGUvc3JjL3JvdW5kLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9udW1iZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnRpbnVvdXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2NhbGUvc3JjL2NvbnN0YW50LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy9pbml0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0U3BlY2lmaWVyLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0UHJlZml4QXV0by5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdERlY2ltYWwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9leHBvbmVudC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdFJvdW5kZWQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRUeXBlcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvbG9jYWxlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZGVmYXVsdExvY2FsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zY2FsZS9zcmMvbGluZWFyLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNjYWxlL3NyYy90aWNrRm9ybWF0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUHJlZml4LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvcHJlY2lzaW9uUm91bmQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9wcmVjaXNpb25GaXhlZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3RvckFsbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL21hdGNoZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZm9ybWF0L3NyYy9mb3JtYXRHcm91cC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1mb3JtYXQvc3JjL2Zvcm1hdE51bWVyYWxzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZvcm1hdC9zcmMvZm9ybWF0VHJpbS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zZWxlY3RDaGlsZHJlbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zcGFyc2UuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZW50ZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jb25zdGFudC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9kYXRhLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NvcnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9uYW1lc3BhY2VzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvbmFtZXNwYWNlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2F0dHIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy93aW5kb3cuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc3R5bGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xhc3NlZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi90ZXh0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2h0bWwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vcmFpc2UuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbG93ZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9jcmVhdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2luc2VydC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vY2xvbmUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZGlzcGF0Y2guanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vc2VsZWN0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vZXhpdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9qb2luLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL29yZGVyLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2NhbGwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vbm9kZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1zZWxlY3Rpb24vc3JjL3NlbGVjdGlvbi9zaXplLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VtcHR5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2VhY2guanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtc2VsZWN0aW9uL3NyYy9zZWxlY3Rpb24vYXBwZW5kLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2RhdHVtLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0aW9uL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXNlbGVjdGlvbi9zcmMvc2VsZWN0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWRpc3BhdGNoL3NyYy9kaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10aW1lci9zcmMvdGltZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdGltZXIvc3JjL3RpbWVvdXQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zY2hlZHVsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL2RlY29tcG9zZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1pbnRlcnBvbGF0ZS9zcmMvdHJhbnNmb3JtL3BhcnNlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWludGVycG9sYXRlL3NyYy90cmFuc2Zvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90d2Vlbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vYXR0ci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2F0dHJUd2Vlbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2RlbGF5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vZHVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9zdHlsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3N0eWxlVHdlZW4uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi90ZXh0VHdlZW4uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3NlbGVjdEFsbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL21lcmdlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLXRyYW5zaXRpb24vc3JjL3RyYW5zaXRpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL3RleHQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9yZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvdHJhbnNpdGlvbi9lYXNlVmFyeWluZy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy90cmFuc2l0aW9uL2VuZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vdHJhbnNpdGlvbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy1lYXNlL3NyYy9jdWJpYy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9zZWxlY3Rpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtdHJhbnNpdGlvbi9zcmMvc2VsZWN0aW9uL2ludGVycnVwdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9kMy10cmFuc2l0aW9uL3NyYy9pbnRlcnJ1cHQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9zcmMvanMvdG9vbHRpcC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL2lkZW50aXR5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL3RvcG9qc29uLWNsaWVudC9zcmMvZmVhdHVyZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy90b3BvanNvbi1jbGllbnQvc3JjL3JldmVyc2UuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9zcmMvanMvY2hhcnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZ2VvL3NyYy9wYXRoL2luZGV4LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vc3JjL2pzL3NwZWVkLWNvbnRyb2xzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vc3JjL2pzL3RpbWVsaW5lLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvZHN2LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvY3N2LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWRzdi9zcmMvdHN2LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy90ZXh0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2QzLWZldGNoL3NyYy9kc3YuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvZDMtZmV0Y2gvc3JjL2pzb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9zcmMvanMvZGF0YS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL3NyYy9jaGluYS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hZHZhbmNlLXN0cmluZy1pbmRleC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktZnJvbS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLXN0cm9uZy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb2xsZWN0aW9uLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LWlzLXJlZ2V4cC1sb2dpYy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW5naW5lLWlzLXdlYm9zLXdlYmtpdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9mYWlscy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZyZWV6aW5nLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtYnVpbHQtaW4uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtc3Vic3RpdHV0aW9uLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGlkZGVuLWtleXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pcy1wdXJlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXJlZ2V4cC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXByb21pc2UtY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9ub3QtYS1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL251bWJlci1wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLWV4dGVybmFsLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BlcmZvcm0uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLWFsbC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWRlZmluZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy1hYnN0cmFjdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZXhlYy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZWdleHAtZmxhZ3MuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVnZXhwLXN0aWNreS1oZWxwZXJzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtZ2xvYmFsLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1zcGVjaWVzLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC1rZXkuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLXRyaW0tZm9yY2VkLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3N0cmluZy10cmltLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3Rhc2suanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvd2hpdGVzcGFjZXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuZGF0ZS50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm1hcC5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWZsb2F0LmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zZXQuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN5bWJvbC5kZXNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi50aW1lcnMuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvbm91aXNsaWRlci9kaXN0cmlidXRlL25vdWlzbGlkZXIuanMiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvLi9ub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svcnVudGltZS9nZXQgamF2YXNjcmlwdCB1cGRhdGUgY2h1bmsgZmlsZW5hbWUiLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvd2VicGFjay9ydW50aW1lL2dldCBtaW5pLWNzcyBjaHVuayBmaWxlbmFtZSIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy93ZWJwYWNrL3J1bnRpbWUvZ2V0IHVwZGF0ZSBtYW5pZmVzdCBmaWxlbmFtZSIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy93ZWJwYWNrL3J1bnRpbWUvZ2V0RnVsbEhhc2giLCJ3ZWJwYWNrOi8vZ2VvLXNhdGVsbGl0ZXMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9nZW8tc2F0ZWxsaXRlcy93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svcnVudGltZS9ob3QgbW9kdWxlIHJlcGxhY2VtZW50Iiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL2dlby1zYXRlbGxpdGVzL3dlYnBhY2svc3RhcnR1cCJdLCJuYW1lcyI6WyJpblByb2dyZXNzIiwiZGF0YVdlYnBhY2tQcmVmaXgiLCJjcmVhdGVTdHlsZXNoZWV0IiwiZmluZFN0eWxlc2hlZXQiLCJvbGRUYWdzIiwibmV3VGFncyIsImFwcGx5SGFuZGxlciIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudCIsImJvZHkiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmVwbGFjZSIsInRyaW0iLCJlcHNpbG9uIiwicGkiLCJNYXRoIiwiUEkiLCJoYWxmUGkiLCJxdWFydGVyUGkiLCJ0YXUiLCJhYnMiLCJhdGFuIiwiYXRhbjIiLCJjb3MiLCJjZWlsIiwiZXhwIiwiZmxvb3IiLCJoeXBvdCIsImxvZyIsInBvdyIsInNpbiIsInNpZ24iLCJ4Iiwic3FydCIsImFzaW4iLCJub29wIiwibGluZSIsImxpbmVzIiwicG9pbnQiLCJ5IiwibSIsInB1c2giLCJsaW5lU3RhcnQiLCJsaW5lRW5kIiwicmVqb2luIiwibGVuZ3RoIiwicG9wIiwiY29uY2F0Iiwic2hpZnQiLCJyZXN1bHQiLCJhIiwiYiIsIkludGVyc2VjdGlvbiIsInBvaW50cyIsIm90aGVyIiwiZW50cnkiLCJ0aGlzIiwieiIsIm8iLCJlIiwidiIsIm4iLCJwIiwic2VnbWVudHMiLCJjb21wYXJlSW50ZXJzZWN0aW9uIiwic3RhcnRJbnNpZGUiLCJpbnRlcnBvbGF0ZSIsInN0cmVhbSIsImkiLCJzdWJqZWN0IiwiY2xpcCIsImZvckVhY2giLCJzZWdtZW50IiwicDAiLCJwMSIsInBvaW50RXF1YWwiLCJzb3J0Iiwic3RhcnQiLCJjdXJyZW50IiwiaXNTdWJqZWN0IiwiYXJyYXkiLCJ0YW4iLCJBZGRlciIsIl9wYXJ0aWFscyIsIkZsb2F0NjRBcnJheSIsIl9uIiwiaiIsImhpIiwibG8iLCJzcGhlcmljYWwiLCJjYXJ0ZXNpYW4iLCJsYW1iZGEiLCJwaGkiLCJjb3NQaGkiLCJjYXJ0ZXNpYW5Eb3QiLCJjYXJ0ZXNpYW5Dcm9zcyIsImNhcnRlc2lhbkFkZEluUGxhY2UiLCJjYXJ0ZXNpYW5TY2FsZSIsInZlY3RvciIsImsiLCJjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlIiwiZCIsImwiLCJsb25naXR1ZGUiLCJtZXJnZSIsImFycmF5cyIsIkFycmF5IiwiZnJvbSIsImZsYXR0ZW4iLCJwb2ludFZpc2libGUiLCJjbGlwTGluZSIsInNpbmsiLCJwb2x5Z29uIiwicmluZyIsInJpbmdCdWZmZXIiLCJyaW5nU2luayIsInBvbHlnb25TdGFydGVkIiwicG9seWdvblN0YXJ0IiwicG9pbnRSaW5nIiwicmluZ1N0YXJ0IiwicmluZ0VuZCIsInBvbHlnb25FbmQiLCJzaW5QaGkiLCJub3JtYWwiLCJhbmdsZSIsIndpbmRpbmciLCJzdW0iLCJwb2ludDAiLCJsYW1iZGEwIiwicGhpMCIsInNpblBoaTAiLCJjb3NQaGkwIiwibGFtYmRhMSIsInNpblBoaTEiLCJjb3NQaGkxIiwicG9pbnQxIiwicGhpMSIsImRlbHRhIiwiYWJzRGVsdGEiLCJhbnRpbWVyaWRpYW4iLCJhZGQiLCJhcmMiLCJpbnRlcnNlY3Rpb24iLCJwaGlBcmMiLCJwb2x5Z29uQ29udGFpbnMiLCJzcGhlcmUiLCJwb2ludExpbmUiLCJjbGVhbiIsInJpbmdTZWdtZW50cyIsImZpbHRlciIsInZhbGlkU2VnbWVudCIsIk5hTiIsInNpZ24wIiwic2lnbjEiLCJzaW5MYW1iZGEwTGFtYmRhMSIsImNsaXBBbnRpbWVyaWRpYW5JbnRlcnNlY3QiLCJ0byIsImRpcmVjdGlvbiIsImNpcmNsZVJhZGl1cyIsImNvc1JhZGl1cyIsInJhZGl1cyIsImFjb3MiLCJjciIsInNtYWxsUmFkaXVzIiwibm90SGVtaXNwaGVyZSIsInZpc2libGUiLCJpbnRlcnNlY3QiLCJ0d28iLCJuMSIsIm4yIiwibjJuMiIsIm4xbjIiLCJkZXRlcm1pbmFudCIsImMxIiwiYzIiLCJuMXhuMiIsIkEiLCJ1IiwidyIsInV1IiwidDIiLCJ0IiwicSIsInBvbGFyIiwicTEiLCJjb2RlIiwiciIsImMwIiwidjAiLCJ2MDAiLCJwb2ludDIiLCJjIiwidDAiLCJ0MSIsInNpblJhZGl1cyIsInN0ZXAiLCJjaXJjbGVTdHJlYW0iLCJjbGlwTWF4IiwiY2xpcE1pbiIsImNsaXBSZWN0YW5nbGUiLCJ4MCIsInkwIiwieDEiLCJ5MSIsImExIiwiY29ybmVyIiwiY29tcGFyZVBvaW50IiwiY2EiLCJjYiIsInhfXyIsInlfXyIsInZfXyIsInhfIiwieV8iLCJ2XyIsImZpcnN0IiwiYWN0aXZlU3RyZWFtIiwiYnVmZmVyU3RyZWFtIiwiY2xpcFN0cmVhbSIsImxpbmVQb2ludCIsImEwIiwiYjAiLCJiMSIsInBvbHlnb25JbnNpZGUiLCJjbGVhbkluc2lkZSIsIm1heCIsIm1pbiIsImF4IiwiYXkiLCJkeCIsImR5IiwiY29tcG9zZSIsImludmVydCIsInJvdGF0aW9uSWRlbnRpdHkiLCJyb3VuZCIsImZvcndhcmRSb3RhdGlvbkxhbWJkYSIsImRlbHRhTGFtYmRhIiwicm90YXRpb25MYW1iZGEiLCJyb3RhdGlvbiIsInJvdGF0aW9uUGhpR2FtbWEiLCJkZWx0YVBoaSIsImRlbHRhR2FtbWEiLCJjb3NEZWx0YVBoaSIsInNpbkRlbHRhUGhpIiwiY29zRGVsdGFHYW1tYSIsInNpbkRlbHRhR2FtbWEiLCJ0cmFuc2Zvcm1lciIsIm1ldGhvZHMiLCJzIiwiVHJhbnNmb3JtU3RyZWFtIiwia2V5Iiwic3RyZWFtR2VvbWV0cnkiLCJnZW9tZXRyeSIsInN0cmVhbUdlb21ldHJ5VHlwZSIsImhhc093blByb3BlcnR5IiwidHlwZSIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwic3RyZWFtT2JqZWN0VHlwZSIsIkZlYXR1cmUiLCJvYmplY3QiLCJGZWF0dXJlQ29sbGVjdGlvbiIsImZlYXR1cmVzIiwiU3BoZXJlIiwiUG9pbnQiLCJjb29yZGluYXRlcyIsIk11bHRpUG9pbnQiLCJMaW5lU3RyaW5nIiwic3RyZWFtTGluZSIsIk11bHRpTGluZVN0cmluZyIsIlBvbHlnb24iLCJzdHJlYW1Qb2x5Z29uIiwiTXVsdGlQb2x5Z29uIiwiR2VvbWV0cnlDb2xsZWN0aW9uIiwiZ2VvbWV0cmllcyIsImNsb3NlZCIsImNvb3JkaW5hdGUiLCJJbmZpbml0eSIsImJvdW5kcyIsImZpdCIsInByb2plY3Rpb24iLCJmaXRCb3VuZHMiLCJjbGlwRXh0ZW50Iiwic2NhbGUiLCJ0cmFuc2xhdGUiLCJmaXRFeHRlbnQiLCJleHRlbnQiLCJoIiwiY29zTWluRGlzdGFuY2UiLCJwcm9qZWN0IiwiZGVsdGEyIiwicmVzYW1wbGVMaW5lVG8iLCJkZXB0aCIsImQyIiwicGhpMiIsImxhbWJkYTIiLCJ4MiIsInkyIiwiZHgyIiwiZHkyIiwiZHoiLCJsYW1iZGEwMCIsIngwMCIsInkwMCIsImEwMCIsImIwMCIsImMwMCIsInJlc2FtcGxlU3RyZWFtIiwicmluZ1BvaW50IiwicmVzYW1wbGVOb25lIiwidHJhbnNmb3JtUmFkaWFucyIsInNjYWxlVHJhbnNsYXRlUm90YXRlIiwic3giLCJzeSIsImFscGhhIiwidHJhbnNmb3JtIiwic2NhbGVUcmFuc2xhdGUiLCJjb3NBbHBoYSIsInNpbkFscGhhIiwiYWkiLCJiaSIsImNpIiwiZmkiLCJwcm9qZWN0QXQiLCJyb3RhdGUiLCJwcm9qZWN0UmVzYW1wbGUiLCJwcm9qZWN0VHJhbnNmb3JtIiwicHJvamVjdFJvdGF0ZVRyYW5zZm9ybSIsImNhY2hlIiwiY2FjaGVTdHJlYW0iLCJ0aGV0YSIsInByZWNsaXAiLCJwb3N0Y2xpcCIsImlkZW50aXR5IiwicmVjZW50ZXIiLCJjZW50ZXIiLCJhcHBseSIsInJlc2FtcGxlIiwicmVzZXQiLCJ0cmFuc2Zvcm1Sb3RhdGUiLCJfIiwiYXJndW1lbnRzIiwidW5kZWZpbmVkIiwiY2xpcEFuZ2xlIiwicmVmbGVjdFgiLCJyZWZsZWN0WSIsInByZWNpc2lvbiIsImZpdFNpemUiLCJzaXplIiwiZml0V2lkdGgiLCJ3aWR0aCIsImZpdEhlaWdodCIsImhlaWdodCIsInByb2plY3Rpb25NdXRhdG9yIiwib3J0aG9ncmFwaGljUmF3Iiwic2MiLCJjYyIsImFyZWFTdW0iLCJhcmVhUmluZ1N1bSIsImFyZWFTdHJlYW0iLCJhcmVhUmluZ1N0YXJ0IiwiYXJlYVJpbmdFbmQiLCJhcmVhIiwiYXJlYVBvaW50Rmlyc3QiLCJhcmVhUG9pbnQiLCJYMCIsIlkwIiwiWjAiLCJYMSIsIlkxIiwiWjEiLCJYMiIsIlkyIiwiWjIiLCJjZW50cm9pZFN0cmVhbSIsImNlbnRyb2lkUG9pbnQiLCJjZW50cm9pZExpbmVTdGFydCIsImNlbnRyb2lkTGluZUVuZCIsImNlbnRyb2lkUmluZ1N0YXJ0IiwiY2VudHJvaWRSaW5nRW5kIiwiY2VudHJvaWQiLCJjZW50cm9pZFBvaW50Rmlyc3RMaW5lIiwiY2VudHJvaWRQb2ludExpbmUiLCJjZW50cm9pZFBvaW50Rmlyc3RSaW5nIiwiY2VudHJvaWRQb2ludFJpbmciLCJQYXRoQ29udGV4dCIsImNvbnRleHQiLCJfY29udGV4dCIsIl9yYWRpdXMiLCJwb2ludFJhZGl1cyIsIl9saW5lIiwiX3BvaW50IiwiY2xvc2VQYXRoIiwibW92ZVRvIiwibGluZVRvIiwibGVuZ3RoUmluZyIsImxlbmd0aFN1bSIsImxlbmd0aFN0cmVhbSIsImxlbmd0aFBvaW50Rmlyc3QiLCJsZW5ndGhQb2ludCIsIlBhdGhTdHJpbmciLCJfc3RyaW5nIiwiX2NpcmNsZSIsImpvaW4iLCJlMTAiLCJlNSIsImUyIiwidGlja0luY3JlbWVudCIsInN0b3AiLCJjb3VudCIsInBvd2VyIiwiTE4xMCIsImVycm9yIiwiZiIsImNvbXBhcmUiLCJsZWZ0IiwibWlkIiwiYXNjZW5kaW5nIiwiYXNjZW5kaW5nQ29tcGFyYXRvciIsInJpZ2h0IiwiYXNjZW5kaW5nQmlzZWN0IiwiYmlzZWN0b3IiLCJiaXNlY3RSaWdodCIsImZhY3RvcnkiLCJleHRlbmQiLCJwYXJlbnQiLCJkZWZpbml0aW9uIiwiT2JqZWN0IiwiY3JlYXRlIiwiQ29sb3IiLCJkYXJrZXIiLCJicmlnaHRlciIsInJlSSIsInJlTiIsInJlUCIsInJlSGV4IiwicmVSZ2JJbnRlZ2VyIiwiUmVnRXhwIiwicmVSZ2JQZXJjZW50IiwicmVSZ2JhSW50ZWdlciIsInJlUmdiYVBlcmNlbnQiLCJyZUhzbFBlcmNlbnQiLCJyZUhzbGFQZXJjZW50IiwibmFtZWQiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFjayIsImJsYW5jaGVkYWxtb25kIiwiYmx1ZSIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiY3lhbiIsImRhcmtibHVlIiwiZGFya2N5YW4iLCJkYXJrZ29sZGVucm9kIiwiZGFya2dyYXkiLCJkYXJrZ3JlZW4iLCJkYXJrZ3JleSIsImRhcmtraGFraSIsImRhcmttYWdlbnRhIiwiZGFya29saXZlZ3JlZW4iLCJkYXJrb3JhbmdlIiwiZGFya29yY2hpZCIsImRhcmtyZWQiLCJkYXJrc2FsbW9uIiwiZGFya3NlYWdyZWVuIiwiZGFya3NsYXRlYmx1ZSIsImRhcmtzbGF0ZWdyYXkiLCJkYXJrc2xhdGVncmV5IiwiZGFya3R1cnF1b2lzZSIsImRhcmt2aW9sZXQiLCJkZWVwcGluayIsImRlZXBza3libHVlIiwiZGltZ3JheSIsImRpbWdyZXkiLCJkb2RnZXJibHVlIiwiZmlyZWJyaWNrIiwiZmxvcmFsd2hpdGUiLCJmb3Jlc3RncmVlbiIsImZ1Y2hzaWEiLCJnYWluc2Jvcm8iLCJnaG9zdHdoaXRlIiwiZ29sZCIsImdvbGRlbnJvZCIsImdyYXkiLCJncmVlbiIsImdyZWVueWVsbG93IiwiZ3JleSIsImhvbmV5ZGV3IiwiaG90cGluayIsImluZGlhbnJlZCIsImluZGlnbyIsIml2b3J5Iiwia2hha2kiLCJsYXZlbmRlciIsImxhdmVuZGVyYmx1c2giLCJsYXduZ3JlZW4iLCJsZW1vbmNoaWZmb24iLCJsaWdodGJsdWUiLCJsaWdodGNvcmFsIiwibGlnaHRjeWFuIiwibGlnaHRnb2xkZW5yb2R5ZWxsb3ciLCJsaWdodGdyYXkiLCJsaWdodGdyZWVuIiwibGlnaHRncmV5IiwibGlnaHRwaW5rIiwibGlnaHRzYWxtb24iLCJsaWdodHNlYWdyZWVuIiwibGlnaHRza3libHVlIiwibGlnaHRzbGF0ZWdyYXkiLCJsaWdodHNsYXRlZ3JleSIsImxpZ2h0c3RlZWxibHVlIiwibGlnaHR5ZWxsb3ciLCJsaW1lIiwibGltZWdyZWVuIiwibGluZW4iLCJtYWdlbnRhIiwibWFyb29uIiwibWVkaXVtYXF1YW1hcmluZSIsIm1lZGl1bWJsdWUiLCJtZWRpdW1vcmNoaWQiLCJtZWRpdW1wdXJwbGUiLCJtZWRpdW1zZWFncmVlbiIsIm1lZGl1bXNsYXRlYmx1ZSIsIm1lZGl1bXNwcmluZ2dyZWVuIiwibWVkaXVtdHVycXVvaXNlIiwibWVkaXVtdmlvbGV0cmVkIiwibWlkbmlnaHRibHVlIiwibWludGNyZWFtIiwibWlzdHlyb3NlIiwibW9jY2FzaW4iLCJuYXZham93aGl0ZSIsIm5hdnkiLCJvbGRsYWNlIiwib2xpdmUiLCJvbGl2ZWRyYWIiLCJvcmFuZ2UiLCJvcmFuZ2VyZWQiLCJvcmNoaWQiLCJwYWxlZ29sZGVucm9kIiwicGFsZWdyZWVuIiwicGFsZXR1cnF1b2lzZSIsInBhbGV2aW9sZXRyZWQiLCJwYXBheWF3aGlwIiwicGVhY2hwdWZmIiwicGVydSIsInBpbmsiLCJwbHVtIiwicG93ZGVyYmx1ZSIsInB1cnBsZSIsInJlYmVjY2FwdXJwbGUiLCJyZWQiLCJyb3N5YnJvd24iLCJyb3lhbGJsdWUiLCJzYWRkbGVicm93biIsInNhbG1vbiIsInNhbmR5YnJvd24iLCJzZWFncmVlbiIsInNlYXNoZWxsIiwic2llbm5hIiwic2lsdmVyIiwic2t5Ymx1ZSIsInNsYXRlYmx1ZSIsInNsYXRlZ3JheSIsInNsYXRlZ3JleSIsInNub3ciLCJzcHJpbmdncmVlbiIsInN0ZWVsYmx1ZSIsInRlYWwiLCJ0aGlzdGxlIiwidG9tYXRvIiwidHVycXVvaXNlIiwidmlvbGV0Iiwid2hlYXQiLCJ3aGl0ZSIsIndoaXRlc21va2UiLCJ5ZWxsb3ciLCJ5ZWxsb3dncmVlbiIsImNvbG9yX2Zvcm1hdEhleCIsInJnYiIsImZvcm1hdEhleCIsImNvbG9yX2Zvcm1hdFJnYiIsImZvcm1hdFJnYiIsImNvbG9yIiwiZm9ybWF0IiwidG9Mb3dlckNhc2UiLCJleGVjIiwicGFyc2VJbnQiLCJyZ2JuIiwiUmdiIiwicmdiYSIsImhzbGEiLCJnIiwicmdiQ29udmVydCIsIm9wYWNpdHkiLCJyZ2JfZm9ybWF0SGV4IiwiaGV4IiwicmdiX2Zvcm1hdFJnYiIsImlzTmFOIiwidmFsdWUiLCJ0b1N0cmluZyIsIkhzbCIsImhzbENvbnZlcnQiLCJoc2wycmdiIiwibTEiLCJtMiIsImJhc2lzIiwidjEiLCJ2MiIsInYzIiwidDMiLCJjb3B5IiwiY2hhbm5lbHMiLCJhc3NpZ24iLCJkaXNwbGF5YWJsZSIsImZvcm1hdEhzbCIsIm5vZ2FtbWEiLCJsaW5lYXIiLCJyZ2JHYW1tYSIsImV4cG9uZW50aWFsIiwiZ2FtbWEiLCJlbmQiLCJyZ2JTcGxpbmUiLCJzcGxpbmUiLCJjb2xvcnMiLCJnZW5lcmljQXJyYXkiLCJuYiIsIm5hIiwiRGF0ZSIsInNldFRpbWUiLCJ2YWx1ZXMiLCJyZUEiLCJyZUIiLCJzb3VyY2UiLCJhbSIsImJtIiwiYnMiLCJsYXN0SW5kZXgiLCJpbmRleCIsInNsaWNlIiwib25lIiwiemVybyIsInN0cmluZyIsImRhdGUiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIkRhdGFWaWV3IiwiaXNBcnJheSIsInZhbHVlT2YiLCJ1bml0Iiwibm9ybWFsaXplIiwiYmltYXAiLCJkb21haW4iLCJyYW5nZSIsImQwIiwiZDEiLCJyMCIsInIxIiwicG9seW1hcCIsInJldmVyc2UiLCJiaXNlY3QiLCJ0YXJnZXQiLCJjbGFtcCIsInVua25vd24iLCJjb250aW51b3VzIiwidW50cmFuc2Zvcm0iLCJwaWVjZXdpc2UiLCJvdXRwdXQiLCJpbnB1dCIsInJlc2NhbGUiLCJtYXAiLCJyYW5nZVJvdW5kIiwiaW5pdFJhbmdlIiwicHJlZml4RXhwb25lbnQiLCJyZSIsImZvcm1hdFNwZWNpZmllciIsInNwZWNpZmllciIsIm1hdGNoIiwiRXJyb3IiLCJGb3JtYXRTcGVjaWZpZXIiLCJmaWxsIiwiYWxpZ24iLCJzeW1ib2wiLCJjb21tYSIsImZvcm1hdERlY2ltYWxQYXJ0cyIsInRvRXhwb25lbnRpYWwiLCJpbmRleE9mIiwiY29lZmZpY2llbnQiLCJleHBvbmVudCIsInRvRml4ZWQiLCJ0b0xvY2FsZVN0cmluZyIsInRvUHJlY2lzaW9uIiwiZm9ybWF0Um91bmRlZCIsInRvVXBwZXJDYXNlIiwiZm9ybWF0UHJlZml4IiwicHJlZml4ZXMiLCJsaW5lYXJpc2giLCJ0aWNrcyIsImlzRmluaXRlIiwidGlja0Zvcm1hdCIsInN0ZXAwIiwic3RlcDEiLCJ0aWNrU3RlcCIsInByZWNpc2lvblByZWZpeCIsInByZWNpc2lvblJvdW5kIiwicHJlY2lzaW9uRml4ZWQiLCJuaWNlIiwicHJlc3RlcCIsImkwIiwiaTEiLCJtYXhJdGVyIiwibm9uZSIsInNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImVtcHR5IiwicXVlcnlTZWxlY3RvckFsbCIsIm1hdGNoZXMiLCJjaGlsZE1hdGNoZXIiLCJub2RlIiwibG9jYWxlIiwiZ3JvdXBpbmciLCJ0aG91c2FuZHMiLCJncm91cCIsImNhbGwiLCJOdW1iZXIiLCJzdWJzdHJpbmciLCJjdXJyZW5jeVByZWZpeCIsImN1cnJlbmN5IiwiY3VycmVuY3lTdWZmaXgiLCJkZWNpbWFsIiwibnVtZXJhbHMiLCJmb3JtYXROdW1lcmFscyIsIlN0cmluZyIsInBlcmNlbnQiLCJtaW51cyIsIm5hbiIsIm5ld0Zvcm1hdCIsImZvcm1hdFR5cGVzIiwicHJlZml4IiwidGVzdCIsInN1ZmZpeCIsImZvcm1hdFR5cGUiLCJtYXliZVN1ZmZpeCIsInZhbHVlUHJlZml4IiwidmFsdWVTdWZmaXgiLCJ2YWx1ZU5lZ2F0aXZlIiwib3V0IiwiZm9ybWF0VHJpbSIsImNoYXJDb2RlQXQiLCJwYWRkaW5nIiwiZmluZCIsImNoaWxkRmlyc3QiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNoaWxkcmVuIiwidXBkYXRlIiwiRW50ZXJOb2RlIiwiZGF0dW0iLCJvd25lckRvY3VtZW50IiwibmFtZXNwYWNlVVJJIiwiX25leHQiLCJfcGFyZW50IiwiX19kYXRhX18iLCJiaW5kSW5kZXgiLCJlbnRlciIsImV4aXQiLCJkYXRhIiwiZ3JvdXBMZW5ndGgiLCJkYXRhTGVuZ3RoIiwiYmluZEtleSIsImtleVZhbHVlIiwibm9kZUJ5S2V5VmFsdWUiLCJNYXAiLCJrZXlWYWx1ZXMiLCJoYXMiLCJzZXQiLCJnZXQiLCJkZWxldGUiLCJhcHBlbmRDaGlsZCIsImNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwibmV4dCIsInhodG1sIiwic3ZnIiwieGxpbmsiLCJ4bWwiLCJ4bWxucyIsIm5hbWUiLCJuYW1lc3BhY2VzIiwic3BhY2UiLCJsb2NhbCIsImF0dHJSZW1vdmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJhdHRyUmVtb3ZlTlMiLCJmdWxsbmFtZSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwiYXR0ckNvbnN0YW50Iiwic2V0QXR0cmlidXRlIiwiYXR0ckNvbnN0YW50TlMiLCJzZXRBdHRyaWJ1dGVOUyIsImF0dHJGdW5jdGlvbiIsImF0dHJGdW5jdGlvbk5TIiwiZGVmYXVsdFZpZXciLCJzdHlsZVJlbW92ZSIsInN0eWxlIiwicmVtb3ZlUHJvcGVydHkiLCJzdHlsZUNvbnN0YW50IiwicHJpb3JpdHkiLCJzZXRQcm9wZXJ0eSIsInN0eWxlRnVuY3Rpb24iLCJzdHlsZVZhbHVlIiwicHJvcGVydHlSZW1vdmUiLCJwcm9wZXJ0eUNvbnN0YW50IiwicHJvcGVydHlGdW5jdGlvbiIsImNsYXNzQXJyYXkiLCJzcGxpdCIsImNsYXNzTGlzdCIsIkNsYXNzTGlzdCIsIl9ub2RlIiwiX25hbWVzIiwiZ2V0QXR0cmlidXRlIiwiY2xhc3NlZEFkZCIsIm5hbWVzIiwibGlzdCIsImNsYXNzZWRSZW1vdmUiLCJyZW1vdmUiLCJjbGFzc2VkVHJ1ZSIsImNsYXNzZWRGYWxzZSIsImNsYXNzZWRGdW5jdGlvbiIsInRleHRSZW1vdmUiLCJ0ZXh0Q29udGVudCIsInRleHRDb25zdGFudCIsInRleHRGdW5jdGlvbiIsImh0bWxSZW1vdmUiLCJpbm5lckhUTUwiLCJodG1sQ29uc3RhbnQiLCJodG1sRnVuY3Rpb24iLCJyYWlzZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImxvd2VyIiwicHJldmlvdXNTaWJsaW5nIiwiZmlyc3RDaGlsZCIsImNyZWF0b3JJbmhlcml0IiwidXJpIiwiZG9jdW1lbnRFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0b3JGaXhlZCIsIm5hbWVzcGFjZSIsImNvbnN0YW50TnVsbCIsInJlbW92ZUNoaWxkIiwic2VsZWN0aW9uX2Nsb25lU2hhbGxvdyIsImNsb25lIiwiY2xvbmVOb2RlIiwic2VsZWN0aW9uX2Nsb25lRGVlcCIsInBhcnNlVHlwZW5hbWVzIiwidHlwZW5hbWVzIiwib25SZW1vdmUiLCJ0eXBlbmFtZSIsIm9uIiwiX19vbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5lciIsIm9wdGlvbnMiLCJvbkFkZCIsImV2ZW50IiwiY29udGV4dExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc3BhdGNoRXZlbnQiLCJwYXJhbXMiLCJ3aW5kb3ciLCJDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJkZXRhaWwiLCJkaXNwYXRjaENvbnN0YW50IiwiZGlzcGF0Y2hGdW5jdGlvbiIsInNwbGljZSIsImNvbnRhaW5zIiwicm9vdCIsIlNlbGVjdGlvbiIsImdyb3VwcyIsInBhcmVudHMiLCJfZ3JvdXBzIiwiX3BhcmVudHMiLCJzZWxlY3Rpb24iLCJzZWxlY3QiLCJzdWJncm91cHMiLCJzdWJub2RlIiwic3ViZ3JvdXAiLCJzZWxlY3RBbGwiLCJhcnJheUFsbCIsInNlbGVjdG9yQWxsIiwic2VsZWN0Q2hpbGQiLCJjaGlsZEZpbmQiLCJzZWxlY3RDaGlsZHJlbiIsImNoaWxkcmVuRmlsdGVyIiwibWF0Y2hlciIsImJpbmQiLCJlbnRlckdyb3VwIiwidXBkYXRlR3JvdXAiLCJleGl0R3JvdXAiLCJwcmV2aW91cyIsIl9lbnRlciIsIl9leGl0Iiwic3BhcnNlIiwib25lbnRlciIsIm9udXBkYXRlIiwib25leGl0IiwiYXBwZW5kIiwib3JkZXIiLCJncm91cHMwIiwiZ3JvdXBzMSIsIm0wIiwibWVyZ2VzIiwiZ3JvdXAwIiwiZ3JvdXAxIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjb21wYXJlTm9kZSIsInNvcnRncm91cHMiLCJzb3J0Z3JvdXAiLCJjYWxsYmFjayIsIm5vZGVzIiwiZWFjaCIsImF0dHIiLCJnZXRBdHRyaWJ1dGVOUyIsInByb3BlcnR5IiwiY2xhc3NlZCIsInRleHQiLCJodG1sIiwiY3JlYXRvciIsImluc2VydCIsImJlZm9yZSIsImRlZXAiLCJkaXNwYXRjaCIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiRGlzcGF0Y2giLCJ0eXBlcyIsIlQiLCJ0aGF0IiwiYXJncyIsInRhc2tIZWFkIiwidGFza1RhaWwiLCJ0aW1lb3V0IiwiaW50ZXJ2YWwiLCJjbG9ja0xhc3QiLCJjbG9ja05vdyIsImNsb2NrU2tldyIsImNsb2NrIiwicGVyZm9ybWFuY2UiLCJub3ciLCJzZXRGcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldFRpbWVvdXQiLCJjbGVhck5vdyIsIlRpbWVyIiwiX2NhbGwiLCJfdGltZSIsInRpbWVyIiwiZGVsYXkiLCJ0aW1lIiwicmVzdGFydCIsIndha2UiLCJ0aW1lckZsdXNoIiwic2xlZXAiLCJuYXAiLCJwb2tlIiwiY2xlYXJUaW1lb3V0IiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwiZWxhcHNlZCIsIlR5cGVFcnJvciIsImVtcHR5T24iLCJlbXB0eVR3ZWVuIiwiaWQiLCJ0aW1pbmciLCJzY2hlZHVsZXMiLCJfX3RyYW5zaXRpb24iLCJzZWxmIiwidHdlZW4iLCJzdGF0ZSIsInRpY2siLCJkdXJhdGlvbiIsImVhc2UiLCJpbml0Iiwic2NoZWR1bGUiLCJzdmdOb2RlIiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJza2V3WCIsInNjYWxlWCIsInNjYWxlWSIsImludGVycG9sYXRlVHJhbnNmb3JtIiwicGFyc2UiLCJweENvbW1hIiwicHhQYXJlbiIsImRlZ1BhcmVuIiwieGEiLCJ5YSIsInhiIiwieWIiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybUNzcyIsIkRPTU1hdHJpeCIsIldlYktpdENTU01hdHJpeCIsImlzSWRlbnRpdHkiLCJkZWNvbXBvc2UiLCJpbnRlcnBvbGF0ZVRyYW5zZm9ybVN2ZyIsImJhc2VWYWwiLCJjb25zb2xpZGF0ZSIsIm1hdHJpeCIsInR3ZWVuUmVtb3ZlIiwidHdlZW4wIiwidHdlZW4xIiwidHdlZW5GdW5jdGlvbiIsInR3ZWVuVmFsdWUiLCJ0cmFuc2l0aW9uIiwiX2lkIiwidmFsdWUxIiwic3RyaW5nMDAiLCJpbnRlcnBvbGF0ZTAiLCJzdHJpbmcxIiwic3RyaW5nMCIsInN0cmluZzEwIiwiYXR0ckludGVycG9sYXRlIiwiYXR0ckludGVycG9sYXRlTlMiLCJhdHRyVHdlZW5OUyIsIl92YWx1ZSIsImF0dHJUd2VlbiIsImRlbGF5RnVuY3Rpb24iLCJkZWxheUNvbnN0YW50IiwiZHVyYXRpb25GdW5jdGlvbiIsImR1cmF0aW9uQ29uc3RhbnQiLCJlYXNlQ29uc3RhbnQiLCJvbkZ1bmN0aW9uIiwib24wIiwib24xIiwic2l0IiwiZXZlcnkiLCJzdHlsZUludGVycG9sYXRlIiwic3R5bGVUd2VlbiIsInRleHRJbnRlcnBvbGF0ZSIsInRleHRUd2VlbiIsIl9uYW1lIiwibmV3SWQiLCJzZWxlY3Rpb25fcHJvdG90eXBlIiwiaW5oZXJpdCIsImlkMCIsImlkMSIsInN0eWxlTnVsbCIsImxpc3RlbmVyMCIsInN0eWxlTWF5YmVSZW1vdmUiLCJyZW1vdmVGdW5jdGlvbiIsImVhc2VWYXJ5aW5nIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjYW5jZWwiLCJpbnRlcnJ1cHQiLCJkZWZhdWx0VGltaW5nIiwiYWN0aXZlIiwidG9vbHRpcEVsIiwidG9wb2xvZ3kiLCJiYm94IiwicHJvcGVydGllcyIsInRyYW5zZm9ybVBvaW50Iiwia3giLCJreSIsImFyY3MiLCJlbCIsIndvcmxkIiwid29ybGRQcm9qZWN0aW9uIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiY2hhcnQiLCJtYXJnaW4iLCJkZWZhdWx0Q29vcmRzIiwiZ2VvT3J0aG9ncmFwaGljIiwiZ2xvYmVQYXRoIiwicHJvamVjdGlvblN0cmVhbSIsImNvbnRleHRTdHJlYW0iLCJwYXRoIiwibWVhc3VyZSIsImdlb1BhdGgiLCJwZXJwUmFkaXVzIiwic2NhbGVMaW5lYXIiLCJjb250YWluZXIiLCJnRW50ZXIiLCJlYXJ0aCIsImVhcnRoUmFkaXVzIiwib2JqZWN0cyIsImNvdW50cmllcyIsImN4IiwiY3kiLCJyeCIsInJ5Iiwib3JiaXQiLCJvcmJpdFJhZGl1c1giLCJvcmJpdFJhZGl1c1kiLCJwYXJzZUZsb2F0Iiwic2F0X25hbWUiLCJpc19wZXJwIiwiaXNfdGFyZ2V0IiwieF9jb29yZCIsInlfY29vcmQiLCJpbnRlcmFjdGlvbnMiLCJtb3VzZW92ZXIiLCJtb3VzZWxlYXZlIiwidXBkYXRlRG9tIiwic2hvd1Rvb2x0aXAiLCJ0b29sdGlwQm9keSIsInRpbWVzdGFtcCIsIkxvbmdpdHVkZSIsImxvbmdfc3RyaW5nIiwiY29udGVudCIsInlQb3MiLCJwYWdlWSIsInhQb3MiLCJwYWdlWCIsImNsaWVudFdpZHRoIiwiaGlkZSIsInRvb2x0aXAiLCJjb21wb25lbnQiLCJpc0xpc3QiLCJpdGVtIiwiY3NzQ2xhc3MiLCJsYWJlbCIsImtleXMiLCJkcmF3Q2hhcnQiLCJzeiIsIm9mZnNldFdpZHRoIiwiaW5uZXJIZWlnaHQiLCJidG5zIiwiY3VycmVudFNwZWVkIiwib25DbGljayIsImdldEN1cnJlbnRTcGVlZCIsImRhdGFzZXQiLCJzcGVlZCIsInRpbWVsaW5lIiwiYnRuQ29udHJvbHMiLCJjb250cm9sQnRuIiwiY3VycmVudERhdGVFbCIsInBsYXlpbmciLCJlbmREYXRlIiwic3RhcnREYXRlIiwidXBkYXRlQ3VycmVudERhdGUiLCJmb3JtYXREYXRlIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRNb250aCIsImdldERhdGUiLCJnZXRGdWxsWWVhciIsImdldEN1cnJlbnREYXRlIiwibm9VaVNsaWRlciIsInNldHVwVGltZWxpbmUiLCJvblVwZGF0ZSIsImNvbm5lY3QiLCJiZWhhdmlvdXIiLCJwaXBzIiwibW9kZSIsImRlbnNpdHkiLCJzZXR1cEJ0bkNvbnRyb2xzIiwiaGFuZGxlIiwidGVtcERhdGUiLCJnZXRUaW1lIiwic3RhcnRUaW1lbGluZSIsInN0b3BUaW1lbGluZSIsImN1cnJlbnREYXRlIiwidGVzdEN1cnJlbnQiLCJuZXdEYXRlIiwic2V0RGF0ZSIsIkVPTCIsIkVPRiIsIm9iamVjdENvbnZlcnRlciIsImNvbHVtbnMiLCJGdW5jdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbmZlckNvbHVtbnMiLCJyb3dzIiwiY29sdW1uU2V0Iiwicm93IiwiY29sdW1uIiwicGFkIiwiZGVsaW1pdGVyIiwicmVGb3JtYXQiLCJERUxJTUlURVIiLCJwYXJzZVJvd3MiLCJOIiwiSSIsImVvZiIsImVvbCIsInRva2VuIiwicHJlZm9ybWF0Qm9keSIsImZvcm1hdFZhbHVlIiwiZm9ybWF0Um93IiwieWVhciIsImhvdXJzIiwiZ2V0VVRDSG91cnMiLCJtaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsInNlY29uZHMiLCJnZXRVVENTZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiY29udmVydCIsImN1c3RvbUNvbnZlcnRlciIsImZvcm1hdEJvZHkiLCJmb3JtYXRSb3dzIiwiY3N2IiwiZHN2IiwiY3N2UGFyc2UiLCJ0c3YiLCJ0c3ZQYXJzZSIsInJlc3BvbnNlVGV4dCIsInJlc3BvbnNlIiwib2siLCJzdGF0dXMiLCJzdGF0dXNUZXh0IiwiZmV0Y2giLCJ0aGVuIiwiZHN2UGFyc2UiLCJyZXNwb25zZUpzb24iLCJqc29uIiwia25vd25Db3VudHJpZXMiLCJnZXREYXRhIiwic2F0ZWxsaXRlVVJMIiwic2F0ZWxsaXRlUHJvbWlzZSIsImQzRmV0Y2giLCJhbGwiLCJyZXMiLCJmaWx0ZXJlZFNhdGVsbGl0ZXMiLCJmaWx0ZXJTYXRlbGxpdGVzIiwiZm9ybWF0U2F0ZWxsaXRlRGF0YSIsInRpbWVzdGFtcHMiLCJTZXQiLCJzYXRlbGxpdGVzIiwicGVycCIsImVudHJpZXMiLCJzYXRlbGxpdGUiLCJpbmNsdWRlIiwiaXNQZXJwIiwiY291bnRyeSIsInNhdF9vcGVyYXRvciIsImluY2x1ZGVzIiwiaXNfZ2VvIiwiZ2V0V29ybGREYXRhIiwic3BlZWRzIiwiaGFsZiIsImJhc2VTcGVlZCIsImJyZWFrcG9pbnQiLCJicmVha3BvaW50cyIsInNhdGVsbGl0ZUZpbGUiLCJzYXRlbGxpdGVOYW1lIiwic2F0ZWxsaXRlQ291bnRyeSIsIkNoYXJ0IiwiZGF0ZXMiLCJ1cGRhdGVTYXRlbGxpdGVOYW1lcyIsInNldHVwU3BlZWRDb250cm9scyIsImhpZGVMb2FkaW5nIiwiU3BlZWRDb250cm9scyIsImRpc3BsYXkiLCJuZXdCcmVha3BvaW50IiwibG9hZERhdGEiLCJtb2R1bGUiLCJleHBvcnRzIiwiaXQiLCJpc09iamVjdCIsIndlbGxLbm93blN5bWJvbCIsImRlZmluZVByb3BlcnR5TW9kdWxlIiwiVU5TQ09QQUJMRVMiLCJBcnJheVByb3RvdHlwZSIsImNvbmZpZ3VyYWJsZSIsImNoYXJBdCIsIlMiLCJ1bmljb2RlIiwiQ29uc3RydWN0b3IiLCIkZm9yRWFjaCIsIlNUUklDVF9NRVRIT0QiLCJhcnJheU1ldGhvZElzU3RyaWN0IiwiY2FsbGJhY2tmbiIsInRvT2JqZWN0IiwiY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsInRvTGVuZ3RoIiwiY3JlYXRlUHJvcGVydHkiLCJnZXRJdGVyYXRvck1ldGhvZCIsImFycmF5TGlrZSIsIk8iLCJDIiwiYXJndW1lbnRzTGVuZ3RoIiwibWFwZm4iLCJtYXBwaW5nIiwiaXRlcmF0b3JNZXRob2QiLCJkb25lIiwidG9JbmRleGVkT2JqZWN0IiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImZyb21JbmRleCIsIkluZGV4ZWRPYmplY3QiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJUWVBFIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIklTX0ZJTFRFUl9PVVQiLCJOT19IT0xFUyIsInNwZWNpZmljQ3JlYXRlIiwiYm91bmRGdW5jdGlvbiIsInNvbWUiLCJmaW5kSW5kZXgiLCJmaWx0ZXJPdXQiLCJmYWlscyIsIlY4X1ZFUlNJT04iLCJTUEVDSUVTIiwiTUVUSE9EX05BTUUiLCJmb28iLCJCb29sZWFuIiwiYXJndW1lbnQiLCJtZXRob2QiLCJvcmlnaW5hbEFycmF5IiwiYW5PYmplY3QiLCJpdGVyYXRvckNsb3NlIiwiZm4iLCJFTlRSSUVTIiwiSVRFUkFUT1IiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJTS0lQX0NMT1NJTkciLCJJVEVSQVRJT05fU1VQUE9SVCIsIlRPX1NUUklOR19UQUdfU1VQUE9SVCIsImNsYXNzb2ZSYXciLCJUT19TVFJJTkdfVEFHIiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJkZWZpbmVQcm9wZXJ0eSIsInJlZGVmaW5lQWxsIiwiYW5JbnN0YW5jZSIsIml0ZXJhdGUiLCJkZWZpbmVJdGVyYXRvciIsInNldFNwZWNpZXMiLCJERVNDUklQVE9SUyIsImZhc3RLZXkiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwic2V0SW50ZXJuYWxTdGF0ZSIsImludGVybmFsU3RhdGVHZXR0ZXJGb3IiLCJnZXR0ZXJGb3IiLCJnZXRDb25zdHJ1Y3RvciIsIndyYXBwZXIiLCJDT05TVFJVQ1RPUl9OQU1FIiwiQURERVIiLCJpdGVyYWJsZSIsImxhc3QiLCJBU19FTlRSSUVTIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImRlZmluZSIsImdldEVudHJ5IiwicmVtb3ZlZCIsImNsZWFyIiwicHJldiIsInNldFN0cm9uZyIsIklURVJBVE9SX05BTUUiLCJnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSIsImdldEludGVybmFsSXRlcmF0b3JTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsIiQiLCJnbG9iYWwiLCJpc0ZvcmNlZCIsInJlZGVmaW5lIiwiSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSIsImNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJjb21tb24iLCJJU19XRUFLIiwiTmF0aXZlQ29uc3RydWN0b3IiLCJOYXRpdmVQcm90b3R5cGUiLCJleHBvcnRlZCIsImZpeE1ldGhvZCIsIktFWSIsIm5hdGl2ZU1ldGhvZCIsIlJFUVVJUkVEIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJkdW1teSIsImZvcmNlZCIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJNQVRDSCIsInJlZ2V4cCIsImVycm9yMSIsImVycm9yMiIsIkYiLCJnZXRQcm90b3R5cGVPZiIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yIiwiSXRlcmF0b3JzIiwicmV0dXJuVGhpcyIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJOQU1FIiwiYml0bWFwIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwidG9QcmltaXRpdmUiLCJwcm9wZXJ0eUtleSIsImNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IiLCJzZXRQcm90b3R5cGVPZiIsImNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSIsIklTX1BVUkUiLCJJdGVyYXRvcnNDb3JlIiwiQlVHR1lfU0FGQVJJX0lURVJBVE9SUyIsIktFWVMiLCJWQUxVRVMiLCJJdGVyYWJsZSIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwicHJvdG8iLCJ3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlIiwiRVhJU1RTIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJ1c2VyQWdlbnQiLCJjbGFzc29mIiwicHJvY2VzcyIsImdldEJ1aWx0SW4iLCJ2ZXJzaW9uIiwidmVyc2lvbnMiLCJ2OCIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsInNoYW0iLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJSRVBMQUNFX0tFRVBTXyQwIiwiUkVQTEFDRSIsIlJFR0VYUF9SRVBMQUNFX1NVQlNUSVRVVEVTX1VOREVGSU5FRF9DQVBUVVJFIiwiU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDIiwib3JpZ2luYWxFeGVjIiwiU1lNQk9MIiwiREVMRUdBVEVTX1RPX1NZTUJPTCIsIkRFTEVHQVRFU19UT19FWEVDIiwiZXhlY0NhbGxlZCIsImZsYWdzIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyaW5nTWV0aG9kIiwicmVnZXhNZXRob2QiLCJhcmciLCJpc0V4dGVuc2libGUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFMiLCJTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VtZW50IiwidGFpbFBvcyIsInN5bWJvbHMiLCJjaCIsImNhcHR1cmUiLCJjaGVjayIsImdsb2JhbFRoaXMiLCJjb25zb2xlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJXcmFwcGVyIiwiTmV3VGFyZ2V0IiwiTmV3VGFyZ2V0UHJvdG90eXBlIiwic3RvcmUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsImhpZGRlbktleXMiLCJ1aWQiLCJGUkVFWklORyIsIk1FVEFEQVRBIiwic2V0TWV0YWRhdGEiLCJvYmplY3RJRCIsIndlYWtEYXRhIiwibWV0YSIsImdldFdlYWtEYXRhIiwib25GcmVlemUiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWQiLCJzaGFyZWRLZXkiLCJXZWFrTWFwIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJmYWNhZGUiLCJTVEFURSIsImVuZm9yY2UiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJpc1JlZ0V4cCIsIlJlc3VsdCIsInN0b3BwZWQiLCJ1bmJvdW5kRnVuY3Rpb24iLCJpdGVyRm4iLCJJU19JVEVSQVRPUiIsIklOVEVSUlVQVEVEIiwiY29uZGl0aW9uIiwiY2FsbEZuIiwicmV0dXJuTWV0aG9kIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIk5FV19JVEVSQVRPUl9QUk9UT1RZUEUiLCJmbHVzaCIsImhlYWQiLCJub3RpZnkiLCJ0b2dnbGUiLCJwcm9taXNlIiwibWFjcm90YXNrIiwiSVNfSU9TIiwiSVNfV0VCT1NfV0VCS0lUIiwiSVNfTk9ERSIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJXZWJLaXRNdXRhdGlvbk9ic2VydmVyIiwicXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yIiwicXVldWVNaWNyb3Rhc2siLCJuZXh0VGljayIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIndoaXRlc3BhY2VzIiwiJHBhcnNlRmxvYXQiLCJ0cmltbWVkU3RyaW5nIiwiJHBhcnNlSW50IiwicmFkaXgiLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJMVCIsIk51bGxQcm90b09iamVjdCIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiUHJvcGVydGllcyIsIm9iamVjdEtleXMiLCJJRThfRE9NX0RFRklORSIsIm5hdGl2ZURlZmluZVByb3BlcnR5IiwiUCIsIkF0dHJpYnV0ZXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSIsIm5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIm5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMiLCJ3aW5kb3dOYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImludGVybmFsT2JqZWN0S2V5cyIsIkNPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiIsIk9iamVjdFByb3RvdHlwZSIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsImFQb3NzaWJsZVByb3RvdHlwZSIsInNldHRlciIsIkNPUlJFQ1RfU0VUVEVSIiwiX19wcm90b19fIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsIm5ld1Byb21pc2VDYXBhYmlsaXR5IiwicHJvbWlzZUNhcGFiaWxpdHkiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiUiIsInJlMSIsInJlMiIsInJlZ2V4cEZsYWdzIiwic3RpY2t5SGVscGVycyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJVTlNVUFBPUlRFRF9ZIiwiQlJPS0VOX0NBUkVUIiwiTlBDR19JTkNMVURFRCIsInJlQ29weSIsInN0aWNreSIsImNoYXJzQWRkZWQiLCJzdHJDb3B5IiwibXVsdGlsaW5lIiwiaWdub3JlQ2FzZSIsImRvdEFsbCIsIlJFIiwiVEFHIiwiU0hBUkVEIiwiY29weXJpZ2h0IiwiZGVmYXVsdENvbnN0cnVjdG9yIiwidG9JbnRlZ2VyIiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsIkNPTlZFUlRfVE9fU1RSSU5HIiwicG9zIiwic2Vjb25kIiwiY29kZUF0Iiwid2hpdGVzcGFjZSIsImx0cmltIiwicnRyaW0iLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwibG9jYXRpb24iLCJzZXRJbW1lZGlhdGUiLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwicnVubmVyIiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJpbnRlZ2VyIiwiUFJFRkVSUkVEX1NUUklORyIsInZhbCIsInBvc3RmaXgiLCJyYW5kb20iLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCIsIklTX0NPTkNBVF9TUFJFQURBQkxFIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCIsIklTX0NPTkNBVF9TUFJFQURBQkxFX1NVUFBPUlQiLCJTUEVDSUVTX1NVUFBPUlQiLCJpc0NvbmNhdFNwcmVhZGFibGUiLCJzcHJlYWRhYmxlIiwibGVuIiwiRSIsIiRmaWx0ZXIiLCIkaW5jbHVkZXMiLCJhZGRUb1Vuc2NvcGFibGVzIiwiQVJSQVlfSVRFUkFUT1IiLCJBcmd1bWVudHMiLCJuYXRpdmVKb2luIiwiRVMzX1NUUklOR1MiLCJzZXBhcmF0b3IiLCIkbWFwIiwiSEFTX1NQRUNJRVNfU1VQUE9SVCIsIm5hdGl2ZVNsaWNlIiwiZmluIiwibmF0aXZlU29ydCIsIkZBSUxTX09OX1VOREVGSU5FRCIsIkZBSUxTX09OX05VTEwiLCJjb21wYXJlZm4iLCJEYXRlUHJvdG90eXBlIiwiSU5WQUxJRF9EQVRFIiwibmF0aXZlRGF0ZVRvU3RyaW5nIiwiRnVuY3Rpb25Qcm90b3R5cGUiLCJGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nIiwibmFtZVJFIiwiY29sbGVjdGlvbiIsImNvbGxlY3Rpb25TdHJvbmciLCJuYXRpdmVLZXlzIiwicGFyc2VGbG9hdEltcGxlbWVudGF0aW9uIiwicGFyc2VJbnRJbXBsZW1lbnRhdGlvbiIsIkludGVybmFsIiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJQcm9taXNlV3JhcHBlciIsIm5hdGl2ZVRoZW4iLCJOYXRpdmVQcm9taXNlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwibWljcm90YXNrIiwicHJvbWlzZVJlc29sdmUiLCJob3N0UmVwb3J0RXJyb3JzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwiUFJPTUlTRSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiRElTUEFUQ0hfRVZFTlQiLCJOQVRJVkVfUkVKRUNUSU9OX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiVU5IQU5ETEVEX1JFSkVDVElPTiIsIkZha2VQcm9taXNlIiwiSU5DT1JSRUNUX0lURVJBVElPTiIsImlzVGhlbmFibGUiLCJpc1JlamVjdCIsIm5vdGlmaWVkIiwiY2hhaW4iLCJyZWFjdGlvbnMiLCJleGl0ZWQiLCJyZWFjdGlvbiIsImhhbmRsZXIiLCJmYWlsIiwicmVqZWN0aW9uIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInJlYXNvbiIsImlzVW5oYW5kbGVkIiwiZW1pdCIsInVud3JhcCIsImludGVybmFsUmVqZWN0IiwiaW50ZXJuYWxSZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJ3cmFwIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsInJlbWFpbmluZyIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwibm90QVJlZ0V4cCIsImNvcnJlY3RJc1JlZ0V4cExvZ2ljIiwic2VhcmNoU3RyaW5nIiwiU1RSSU5HX0lURVJBVE9SIiwiZml4UmVnRXhwV2VsbEtub3duU3ltYm9sTG9naWMiLCJhZHZhbmNlU3RyaW5nSW5kZXgiLCJnZXRTdWJzdGl0dXRpb24iLCJyZWdFeHBFeGVjIiwibWF5YmVDYWxsTmF0aXZlIiwiVU5TQUZFX1NVQlNUSVRVVEUiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsInJlcGxhY2VyIiwiZnVuY3Rpb25hbFJlcGxhY2UiLCJmdWxsVW5pY29kZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsInJlcGxhY2VyQXJncyIsIiR0cmltIiwiZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCIsIk5hdGl2ZVN5bWJvbCIsImRlc2NyaXB0aW9uIiwiRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlIiwiU3ltYm9sV3JhcHBlciIsInN5bWJvbFByb3RvdHlwZSIsInN5bWJvbFRvU3RyaW5nIiwibmF0aXZlIiwiZGVzYyIsImRlZmluZVdlbGxLbm93blN5bWJvbCIsIm5hdGl2ZU9iamVjdENyZWF0ZSIsImdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIiRTeW1ib2wiLCIkc3RyaW5naWZ5IiwiQWxsU3ltYm9scyIsIk9iamVjdFByb3RvdHlwZVN5bWJvbHMiLCJTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5IiwiU3ltYm9sVG9TdHJpbmdSZWdpc3RyeSIsIlFPYmplY3QiLCJVU0VfU0VUVEVSIiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzY3JpcHRvciIsIk9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IiLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0eSIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIiRwcm9wZXJ0eUlzRW51bWVyYWJsZSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIklTX09CSkVDVF9QUk9UT1RZUEUiLCJrZXlGb3IiLCJzeW0iLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCIkcmVwbGFjZXIiLCJET01JdGVyYWJsZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJzY2hlZHVsZXIiLCJib3VuZEFyZ3MiLCJWRVJTSU9OIiwicmVtb3ZlRWxlbWVudCIsInBhcmVudEVsZW1lbnQiLCJpc1NldCIsInByZXZlbnREZWZhdWx0IiwiaXNOdW1lcmljIiwiYWRkQ2xhc3NGb3IiLCJlbGVtZW50IiwiY2xhc3NOYW1lIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImxpbWl0IiwiYXNBcnJheSIsImNvdW50RGVjaW1hbHMiLCJudW1TdHIiLCJwaWVjZXMiLCJnZXRQYWdlT2Zmc2V0IiwiZG9jIiwic3VwcG9ydFBhZ2VPZmZzZXQiLCJwYWdlWE9mZnNldCIsImlzQ1NTMUNvbXBhdCIsImNvbXBhdE1vZGUiLCJzY3JvbGxMZWZ0IiwicGFnZVlPZmZzZXQiLCJzY3JvbGxUb3AiLCJzdWJSYW5nZVJhdGlvIiwicGEiLCJwYiIsImZyb21QZXJjZW50YWdlIiwic3RhcnRSYW5nZSIsImdldEoiLCJhcnIiLCJ0b1N0ZXBwaW5nIiwieFZhbCIsInhQY3QiLCJ2YSIsInZiIiwidG9QZXJjZW50YWdlIiwiZ2V0U3RlcCIsInhTdGVwcyIsInNuYXAiLCJjbG9zZXN0IiwiaGFuZGxlRW50cnlQb2ludCIsInBlcmNlbnRhZ2UiLCJ4SGlnaGVzdENvbXBsZXRlU3RlcCIsImhhbmRsZVN0ZXBQb2ludCIsInRvdGFsU3RlcHMiLCJ4TnVtU3RlcHMiLCJoaWdoZXN0U3RlcCIsIlNwZWN0cnVtIiwic2luZ2xlU3RlcCIsIm9yZGVyZWQiLCJnZXREaXN0YW5jZSIsImRpc3RhbmNlcyIsImdldEFic29sdXRlRGlzdGFuY2UiLCJzdGFydF9mYWN0b3IiLCJ4UGN0X2luZGV4IiwicmVzdF9mYWN0b3IiLCJyZXN0X3JlbF9kaXN0YW5jZSIsInJhbmdlX3BjdCIsInJlbF9yYW5nZV9kaXN0YW5jZSIsImFic19kaXN0YW5jZV9jb3VudGVyIiwicmFuZ2VfY291bnRlciIsImZyb21TdGVwcGluZyIsImlzUGVyY2VudGFnZSIsImdldERlZmF1bHRTdGVwIiwiaXNEb3duIiwiZ2V0TmVhcmJ5U3RlcHMiLCJzdGVwQmVmb3JlIiwic3RhcnRWYWx1ZSIsInRoaXNTdGVwIiwic3RlcEFmdGVyIiwiY291bnRTdGVwRGVjaW1hbHMiLCJzdGVwRGVjaW1hbHMiLCJkZWZhdWx0Rm9ybWF0dGVyIiwiY3NzQ2xhc3NlcyIsImJhc2UiLCJvcmlnaW4iLCJoYW5kbGVMb3dlciIsImhhbmRsZVVwcGVyIiwidG91Y2hBcmVhIiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIiwiYmFja2dyb3VuZCIsImNvbm5lY3RzIiwibHRyIiwicnRsIiwidGV4dERpcmVjdGlvbkx0ciIsInRleHREaXJlY3Rpb25SdGwiLCJkcmFnZ2FibGUiLCJkcmFnIiwidGFwIiwicGlwc0hvcml6b250YWwiLCJwaXBzVmVydGljYWwiLCJtYXJrZXIiLCJtYXJrZXJIb3Jpem9udGFsIiwibWFya2VyVmVydGljYWwiLCJtYXJrZXJOb3JtYWwiLCJtYXJrZXJMYXJnZSIsIm1hcmtlclN1YiIsInZhbHVlSG9yaXpvbnRhbCIsInZhbHVlVmVydGljYWwiLCJ2YWx1ZU5vcm1hbCIsInZhbHVlTGFyZ2UiLCJ2YWx1ZVN1YiIsIklOVEVSTkFMX0VWRU5UX05TIiwidmFsaWRhdGVGb3JtYXQiLCJpc1ZhbGlkRm9ybWF0dGVyIiwidGVzdFN0ZXAiLCJwYXJzZWQiLCJ0ZXN0S2V5Ym9hcmRQYWdlTXVsdGlwbGllciIsImtleWJvYXJkUGFnZU11bHRpcGxpZXIiLCJ0ZXN0S2V5Ym9hcmREZWZhdWx0U3RlcCIsImtleWJvYXJkRGVmYXVsdFN0ZXAiLCJ0ZXN0UmFuZ2UiLCJzcGVjdHJ1bSIsInRlc3RTdGFydCIsImhhbmRsZXMiLCJ0ZXN0U25hcCIsInRlc3RBbmltYXRlIiwiYW5pbWF0ZSIsInRlc3RBbmltYXRpb25EdXJhdGlvbiIsImFuaW1hdGlvbkR1cmF0aW9uIiwidGVzdENvbm5lY3QiLCJ0ZXN0T3JpZW50YXRpb24iLCJvcnQiLCJ0ZXN0TWFyZ2luIiwidGVzdExpbWl0IiwidGVzdFBhZGRpbmciLCJ0b3RhbFBhZGRpbmciLCJmaXJzdFZhbHVlIiwidGVzdERpcmVjdGlvbiIsImRpciIsInRlc3RCZWhhdmlvdXIiLCJmaXhlZCIsImhvdmVyIiwidW5jb25zdHJhaW5lZCIsImV2ZW50cyIsInRlc3RUb29sdGlwcyIsInRvb2x0aXBzIiwiZm9ybWF0dGVyIiwidGVzdEFyaWFGb3JtYXQiLCJhcmlhRm9ybWF0IiwidGVzdEZvcm1hdCIsInRlc3RLZXlib2FyZFN1cHBvcnQiLCJrZXlib2FyZFN1cHBvcnQiLCJ0ZXN0RG9jdW1lbnRFbGVtZW50IiwidGVzdENzc1ByZWZpeCIsImNzc1ByZWZpeCIsInRlc3RDc3NDbGFzc2VzIiwidGVzdE9wdGlvbnMiLCJ0ZXN0cyIsIm9yaWVudGF0aW9uIiwiZGVmYXVsdHMiLCJtc1ByZWZpeCIsIm1zVHJhbnNmb3JtIiwibm9QcmVmaXgiLCJ0cmFuc2Zvcm1SdWxlIiwic2NvcGUiLCJvcmlnaW5hbE9wdGlvbnMiLCJzY29wZV9CYXNlIiwic2NvcGVfSGFuZGxlcyIsInNjb3BlX0Nvbm5lY3RzIiwic2NvcGVfUGlwcyIsInNjb3BlX1Rvb2x0aXBzIiwic2NvcGVfU2VsZiIsImFkZFRhcmdldCIsImFjdGlvbnMiLCJuYXZpZ2F0b3IiLCJwb2ludGVyRW5hYmxlZCIsIm1vdmUiLCJtc1BvaW50ZXJFbmFibGVkIiwic3VwcG9ydHNQYXNzaXZlIiwiQ1NTIiwic3VwcG9ydHMiLCJvcHRzIiwiZ2V0U3VwcG9ydHNQYXNzaXZlIiwic2NvcGVfVGFyZ2V0Iiwic2NvcGVfU3BlY3RydW0iLCJzY29wZV9WYWx1ZXMiLCJzY29wZV9Mb2NhdGlvbnMiLCJzY29wZV9IYW5kbGVOdW1iZXJzIiwic2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50Iiwic2NvcGVfRXZlbnRzIiwic2NvcGVfRG9jdW1lbnQiLCJzY29wZV9Eb2N1bWVudEVsZW1lbnQiLCJzY29wZV9Cb2R5Iiwic2NvcGVfRGlyT2Zmc2V0IiwiYWRkTm9kZVRvIiwiZGl2IiwiYWRkT3JpZ2luIiwiaGFuZGxlTnVtYmVyIiwiaXNTbGlkZXJEaXNhYmxlZCIsImlzSGFuZGxlRGlzYWJsZWQiLCJob3Jpem9udGFsS2V5cyIsInZlcnRpY2FsS2V5cyIsImxhcmdlU3RlcEtleXMiLCJlZGdlS2V5cyIsImlzTGFyZ2VEb3duIiwiaXNMYXJnZVVwIiwiaXNVcCIsImlzTWluIiwiaXNNYXgiLCJtdWx0aXBsaWVyIiwiZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlIiwic2V0SGFuZGxlIiwiZmlyZUV2ZW50IiwiZXZlbnRLZXlkb3duIiwiYWRkQ29ubmVjdCIsImFkZFRvb2x0aXAiLCJoYXNBdHRyaWJ1dGUiLCJyZW1vdmVUb29sdGlwcyIsInJlbW92ZUV2ZW50IiwiYmluZEV2ZW50IiwidW5lbmNvZGVkIiwiZm9ybWF0dGVkVmFsdWUiLCJhZGRNYXJraW5nIiwic3ByZWFkIiwiZmlsdGVyRnVuYyIsInZhbHVlU2l6ZUNsYXNzZXMiLCJtYXJrZXJTaXplQ2xhc3NlcyIsInZhbHVlT3JpZW50YXRpb25DbGFzc2VzIiwibWFya2VyT3JpZW50YXRpb25DbGFzc2VzIiwiZ2V0Q2xhc3NlcyIsInNpemVDbGFzc2VzIiwib2Zmc2V0IiwiYWRkU3ByZWFkIiwicmVtb3ZlUGlwcyIsImdyaWQiLCJpbmRleGVzIiwiZmlyc3RJblJhbmdlIiwibGFzdEluUmFuZ2UiLCJpZ25vcmVGaXJzdCIsImlnbm9yZUxhc3QiLCJwcmV2UGN0IiwidW5zaGlmdCIsIm5ld1BjdCIsInBjdERpZmZlcmVuY2UiLCJwY3RQb3MiLCJzdGVwcyIsInJlYWxTdGVwcyIsInN0ZXBTaXplIiwibG93IiwiaGlnaCIsImlzU3RlcHMiLCJnZW5lcmF0ZVNwcmVhZCIsInN0ZXBwZWQiLCJnZXRHcm91cCIsImJhc2VTaXplIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImFsdCIsImF0dGFjaEV2ZW50IiwicGFnZU9mZnNldCIsImV2ZW50VGFyZ2V0IiwidG91Y2giLCJtb3VzZSIsInBvaW50ZXIiLCJidXR0b25zIiwidG91Y2hlcyIsImlzVG91Y2hPblRhcmdldCIsImNoZWNrVG91Y2giLCJzaGFkb3dSb290IiwidGFyZ2V0VG91Y2hlcyIsInRhcmdldFRvdWNoIiwiY2hhbmdlZFRvdWNoZXMiLCJjbGllbnRYIiwiY2xpZW50WSIsImN1cnNvciIsImZpeEV2ZW50IiwiZG9Ob3RSZWplY3QiLCJjYWxjUG9pbnQiLCJldmVudE5hbWUiLCJwYXNzaXZlIiwiY2FsY1BvaW50VG9QZXJjZW50YWdlIiwiZWxlbSIsImRvY0VsZW0iLCJwcm9wb3NhbCIsInRvcCIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJkb2N1bWVudExlYXZlIiwibm9kZU5hbWUiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnRFbmQiLCJldmVudE1vdmUiLCJhcHBWZXJzaW9uIiwiYnV0dG9uc1Byb3BlcnR5IiwibW92ZW1lbnQiLCJzdGFydENhbGNQb2ludCIsIm1vdmVIYW5kbGVzIiwibG9jYXRpb25zIiwiaGFuZGxlTnVtYmVycyIsImxpc3RlbmVycyIsInNldFppbmRleCIsImV2ZW50U3RhcnQiLCJzdG9wUHJvcGFnYXRpb24iLCJtb3ZlRXZlbnQiLCJlbmRFdmVudCIsIm91dEV2ZW50IiwiZXZlbnRUYXAiLCJjbGlja2VkUG9zaXRpb24iLCJzbWFsbGVzdERpZmZlcmVuY2UiLCJoYW5kbGVQb3NpdGlvbiIsImRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSIsImdldENsb3Nlc3RIYW5kbGUiLCJldmVudEhvdmVyIiwidGFyZ2V0RXZlbnQiLCJuYW1lc3BhY2VkRXZlbnQiLCJ0RXZlbnQiLCJ0TmFtZXNwYWNlIiwiaXNJbnRlcm5hbE5hbWVzcGFjZSIsImV2ZW50VHlwZSIsImNoZWNrSGFuZGxlUG9zaXRpb24iLCJyZWZlcmVuY2UiLCJsb29rQmFja3dhcmQiLCJsb29rRm9yd2FyZCIsImdldFZhbHVlIiwiZGlzdGFuY2UiLCJpblJ1bGVPcmRlciIsInVwd2FyZCIsInByb3Bvc2FscyIsInRyYW5zZm9ybURpcmVjdGlvbiIsInpJbmRleCIsImV4YWN0SW5wdXQiLCJ0cmFuc2xhdGVSdWxlIiwidXBkYXRlQ29ubmVjdCIsInVwZGF0ZUhhbmRsZVBvc2l0aW9uIiwiY29ubmVjdFdpZHRoIiwic2NhbGVSdWxlIiwicmVzb2x2ZVRvVmFsdWUiLCJ2YWx1ZVNldCIsImZpcmVTZXRFdmVudCIsImlzSW5pdCIsInZhbHVlR2V0IiwibmVhcmJ5U3RlcHMiLCJpbmNyZW1lbnQiLCJkZWNyZW1lbnQiLCJjb25uZWN0T3B0aW9ucyIsImNvbm5lY3RCYXNlIiwiYWRkRWxlbWVudHMiLCJoYW5kbGVCZWZvcmUiLCJoYW5kbGVBZnRlciIsImV2ZW50SG9sZGVycyIsImV2ZW50SG9sZGVyIiwicG9zaXRpb25zIiwiZGVzdHJveSIsIm9mZiIsIl9fbW92ZUhhbmRsZXMiLCJ1cGRhdGVPcHRpb25zIiwib3B0aW9uc1RvVXBkYXRlIiwidXBkYXRlQWJsZSIsIm5ld09wdGlvbnMiLCJnZXRUb29sdGlwcyIsImdldE9yaWdpbnMiLCJfX3NwZWN0cnVtIiwiYXBpIiwicnVudGltZSIsIk9wIiwiaGFzT3duIiwiaXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvciIsInRvU3RyaW5nVGFnU3ltYm9sIiwidG9TdHJpbmdUYWciLCJvYmoiLCJlcnIiLCJpbm5lckZuIiwib3V0ZXJGbiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwiX2ludm9rZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwiQ29udGludWVTZW50aW5lbCIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwicmVjb3JkIiwidHJ5Q2F0Y2giLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwibWFrZUludm9rZU1ldGhvZCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJnZXRQcm90byIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJBc3luY0l0ZXJhdG9yIiwiUHJvbWlzZUltcGwiLCJpbnZva2UiLCJfX2F3YWl0IiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJpbmZvIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwic2tpcFRlbXBSZXNldCIsInJvb3RSZWNvcmQiLCJydmFsIiwiZXhjZXB0aW9uIiwibG9jIiwiY2F1Z2h0IiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiZmluYWxseUVudHJ5IiwiY29tcGxldGUiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVnZW5lcmF0b3JSdW50aW1lIiwiYWNjaWRlbnRhbFN0cmljdE1vZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleGVjT3B0aW9ucyIsIl9fd2VicGFja19tb2R1bGVzX18iLCJyZXF1aXJlIiwiaHUiLCJjaHVua0lkIiwibWluaUNzc0YiLCJobXJGIiwicHJvcCIsInVybCIsInNjcmlwdCIsIm5lZWRBdHRhY2giLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJjaGFyc2V0IiwibmMiLCJvblNjcmlwdENvbXBsZXRlIiwib25lcnJvciIsIm9ubG9hZCIsImRvbmVGbnMiLCJjdXJyZW50Q2hpbGRNb2R1bGUiLCJibG9ja2luZ1Byb21pc2VzIiwiY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMiLCJxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMiLCJjdXJyZW50TW9kdWxlRGF0YSIsImluc3RhbGxlZE1vZHVsZXMiLCJjdXJyZW50UGFyZW50cyIsInJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycyIsImN1cnJlbnRTdGF0dXMiLCJzZXRTdGF0dXMiLCJuZXdTdGF0dXMiLCJ3YWl0Rm9yQmxvY2tpbmdQcm9taXNlcyIsImJsb2NrZXIiLCJob3RDaGVjayIsImFwcGx5T25VcGRhdGUiLCJobXJNIiwiYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJ1cGRhdGVkTW9kdWxlcyIsImhtckMiLCJyZWR1Y2UiLCJwcm9taXNlcyIsImludGVybmFsQXBwbHkiLCJob3RBcHBseSIsImVycm9ycyIsImRpc3Bvc2UiLCJyZXBvcnRFcnJvciIsIm91dGRhdGVkTW9kdWxlcyIsIm1vZHVsZXMiLCJobXJJIiwiaG1yRCIsIm1lIiwiaG90IiwicmVxdWVzdCIsIndhcm4iLCJ0cmFja0Jsb2NraW5nUHJvbWlzZSIsImNyZWF0ZVJlcXVpcmUiLCJfYWNjZXB0ZWREZXBlbmRlbmNpZXMiLCJfYWNjZXB0ZWRFcnJvckhhbmRsZXJzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiX3JlcXVpcmVTZWxmIiwiYWNjZXB0IiwiZGVwIiwiZXJyb3JIYW5kbGVyIiwiZGVjbGluZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJpbnZhbGlkYXRlIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJzY3JpcHRVcmwiLCJjdXJyZW50U2NyaXB0IiwiZnVsbGhyZWYiLCJsaW5rVGFnIiwicmVsIiwiZXJyb3JUeXBlIiwicmVhbEhyZWYiLCJocmVmIiwiZXhpc3RpbmdMaW5rVGFncyIsImRhdGFIcmVmIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJvbGRUYWciLCJtaW5pQ3NzIiwiY2h1bmtJZHMiLCJyZW1vdmVkQ2h1bmtzIiwicmVtb3ZlZE1vZHVsZXMiLCJhcHBseUhhbmRsZXJzIiwidXBkYXRlZE1vZHVsZXNMaXN0IiwiYXMiLCJjdXJyZW50VXBkYXRlQ2h1bmtzIiwiY3VycmVudFVwZGF0ZSIsImN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzIiwiY3VycmVudFVwZGF0ZVJ1bnRpbWUiLCJpbnN0YWxsZWRDaHVua3MiLCIzNTUiLCJ3YWl0aW5nVXBkYXRlUmVzb2x2ZXMiLCJsb2FkVXBkYXRlQ2h1bmsiLCJyZWFsU3JjIiwibWVzc2FnZSIsImdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyIsInVwZGF0ZU1vZHVsZUlkIiwib3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJxdWV1ZUl0ZW0iLCJwYXJlbnRJZCIsImFkZEFsbFRvU2V0IiwianNvbnBIbXIiLCJhcHBsaWVkVXBkYXRlIiwid2FyblVuZXhwZWN0ZWRSZXF1aXJlIiwibmV3TW9kdWxlRmFjdG9yeSIsImFib3J0RXJyb3IiLCJkb0FwcGx5IiwiZG9EaXNwb3NlIiwiY2hhaW5JbmZvIiwib25EZWNsaW5lZCIsImlnbm9yZURlY2xpbmVkIiwib25VbmFjY2VwdGVkIiwiaWdub3JlVW5hY2NlcHRlZCIsIm9uQWNjZXB0ZWQiLCJvbkRpc3Bvc2VkIiwibW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJvdXRkYXRlZE1vZHVsZUlkIiwiZGVwZW5kZW5jeSIsImRpc3Bvc2VIYW5kbGVycyIsImNhbGxiYWNrcyIsImVycm9ySGFuZGxlcnMiLCJkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MiLCJhY2NlcHRDYWxsYmFjayIsImRlcGVuZGVuY3lJZCIsImVycjIiLCJvbkVycm9yZWQiLCJvcmlnaW5hbEVycm9yIiwiaWdub3JlRXJyb3JlZCIsIm1vcmVNb2R1bGVzIiwianNvbnAiXSwibWFwcGluZ3MiOiI7VUFBSUEsRUFDQUMsRUNEQUMsRUEyQkFDLEVBd0JBQyxFQUNBQyxFQUNBQyxFLCtIQ3JDSixRQWZhLFdBQ1QsT0FBT0MsaUJBQWlCQyxTQUFTQyxNQUM5QkMsaUJBQWlCLGdCQUNqQkMsUUFBUSxNQUFPLElBQ2ZDLFEsNEJDTElDLEVBQVUsS0FFVkMsRUFBS0MsS0FBS0MsR0FDVkMsRUFBU0gsRUFBSyxFQUNkSSxFQUFZSixFQUFLLEVBQ2pCSyxFQUFXLEVBQUxMLEVBRU4sRUFBVSxJQUFNQSxFQUNoQixFQUFVQSxFQUFLLElBRWZNLEVBQU1MLEtBQUtLLElBQ1hDLEVBQU9OLEtBQUtNLEtBQ1pDLEVBQVFQLEtBQUtPLE1BQ2IsRUFBTVAsS0FBS1EsSUFPWCxHQU5PUixLQUFLUyxLQUNOVCxLQUFLVSxJQUNIVixLQUFLVyxNQUNMWCxLQUFLWSxNQUNQWixLQUFLYSxJQUNMYixLQUFLYyxJQUNMZCxLQUFLZSxLQUNYQyxFQUFPaEIsS0FBS2dCLE1BQVEsU0FBU0MsR0FBSyxPQUFPQSxFQUFJLEVBQUksRUFBSUEsRUFBSSxHQUFLLEVBQUksR0FDbEVDLEVBQU9sQixLQUFLa0IsS0FPaEIsU0FBU0MsRUFBS0YsR0FDbkIsT0FBT0EsRUFBSSxFQUFJZixFQUFTZSxHQUFLLEdBQUtmLEVBQVNGLEtBQUttQixLQUFLRixHQzlCeEMsU0FBU0csS0NFVCxhQUNiLElBQ0lDLEVBREFDLEVBQVEsR0FFWixNQUFPLENBQ0xDLE1BQU8sU0FBU04sRUFBR08sRUFBR0MsR0FDcEJKLEVBQUtLLEtBQUssQ0FBQ1QsRUFBR08sRUFBR0MsS0FFbkJFLFVBQVcsV0FDVEwsRUFBTUksS0FBS0wsRUFBTyxLQUVwQk8sUUFBU1IsRUFDVFMsT0FBUSxXQUNGUCxFQUFNUSxPQUFTLEdBQUdSLEVBQU1JLEtBQUtKLEVBQU1TLE1BQU1DLE9BQU9WLEVBQU1XLFdBRTVEQyxPQUFRLFdBQ04sSUFBSUEsRUFBU1osRUFHYixPQUZBQSxFQUFRLEdBQ1JELEVBQU8sS0FDQWEsSUNsQkUsV0FBU0MsRUFBR0MsR0FDekIsT0FBTy9CLEVBQUk4QixFQUFFLEdBQUtDLEVBQUUsSUFBTXRDLEdBQVdPLEVBQUk4QixFQUFFLEdBQUtDLEVBQUUsSUFBTXRDLEVDQTFELFNBQVN1QyxFQUFhZCxFQUFPZSxFQUFRQyxFQUFPQyxHQUMxQ0MsS0FBS3hCLEVBQUlNLEVBQ1RrQixLQUFLQyxFQUFJSixFQUNURyxLQUFLRSxFQUFJSixFQUNURSxLQUFLRyxFQUFJSixFQUNUQyxLQUFLSSxHQUFJLEVBQ1RKLEtBQUtLLEVBQUlMLEtBQUtNLEVBQUksS0FNTCxXQUFTQyxFQUFVQyxFQUFxQkMsRUFBYUMsRUFBYUMsR0FDL0UsSUFFSUMsRUFDQVAsRUFIQVEsRUFBVSxHQUNWQyxFQUFPLEdBeUJYLEdBckJBUCxFQUFTUSxTQUFRLFNBQVNDLEdBQ3hCLE1BQUtYLEVBQUlXLEVBQVEzQixPQUFTLElBQU0sR0FBaEMsQ0FDQSxJQUFJZ0IsRUFBcUM3QixFQUFsQ3lDLEVBQUtELEVBQVEsR0FBSUUsRUFBS0YsRUFBUVgsR0FFckMsR0FBSWMsRUFBV0YsRUFBSUMsR0FBSyxDQUN0QixJQUFLRCxFQUFHLEtBQU9DLEVBQUcsR0FBSSxDQUVwQixJQURBUCxFQUFPekIsWUFDRjBCLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sRUFBR0QsRUFBTzdCLE9BQU9tQyxFQUFLRCxFQUFRSixJQUFJLEdBQUlLLEVBQUcsSUFFOUQsWUFEQU4sRUFBT3hCLFVBSVQrQixFQUFHLElBQU0sS0FHWEwsRUFBUTVCLEtBQUtULEVBQUksSUFBSW9CLEVBQWFxQixFQUFJRCxFQUFTLE1BQU0sSUFDckRGLEVBQUs3QixLQUFLVCxFQUFFMEIsRUFBSSxJQUFJTixFQUFhcUIsRUFBSSxLQUFNekMsR0FBRyxJQUM5Q3FDLEVBQVE1QixLQUFLVCxFQUFJLElBQUlvQixFQUFhc0IsRUFBSUYsRUFBUyxNQUFNLElBQ3JERixFQUFLN0IsS0FBS1QsRUFBRTBCLEVBQUksSUFBSU4sRUFBYXNCLEVBQUksS0FBTTFDLEdBQUcsUUFHM0NxQyxFQUFReEIsT0FBYixDQU1BLElBSkF5QixFQUFLTSxLQUFLWixHQUNWLEVBQUtLLEdBQ0wsRUFBS0MsR0FFQUYsRUFBSSxFQUFHUCxFQUFJUyxFQUFLekIsT0FBUXVCLEVBQUlQLElBQUtPLEVBQ3BDRSxFQUFLRixHQUFHVCxFQUFJTSxHQUFlQSxFQU83QixJQUpBLElBQ0laLEVBQ0FmLEVBRkF1QyxFQUFRUixFQUFRLEtBSVYsQ0FJUixJQUZBLElBQUlTLEVBQVVELEVBQ1ZFLEdBQVksRUFDVEQsRUFBUWxCLE9BQVFrQixFQUFVQSxFQUFRakIsS0FBT2dCLEVBQU8sT0FDdkR4QixFQUFTeUIsRUFBUXJCLEVBQ2pCVSxFQUFPekIsWUFDUCxFQUFHLENBRUQsR0FEQW9DLEVBQVFsQixFQUFJa0IsRUFBUXBCLEVBQUVFLEdBQUksRUFDdEJrQixFQUFRbkIsRUFBRyxDQUNiLEdBQUlvQixFQUNGLElBQUtYLEVBQUksRUFBR1AsRUFBSVIsRUFBT1IsT0FBUXVCLEVBQUlQLElBQUtPLEVBQUdELEVBQU83QixPQUFPQSxFQUFRZSxFQUFPZSxJQUFJLEdBQUk5QixFQUFNLFNBRXRGNEIsRUFBWVksRUFBUTlDLEVBQUc4QyxFQUFRakIsRUFBRTdCLEVBQUcsRUFBR21DLEdBRXpDVyxFQUFVQSxFQUFRakIsTUFDYixDQUNMLEdBQUlrQixFQUVGLElBREExQixFQUFTeUIsRUFBUWhCLEVBQUVMLEVBQ2RXLEVBQUlmLEVBQU9SLE9BQVMsRUFBR3VCLEdBQUssSUFBS0EsRUFBR0QsRUFBTzdCLE9BQU9BLEVBQVFlLEVBQU9lLElBQUksR0FBSTlCLEVBQU0sU0FFcEY0QixFQUFZWSxFQUFROUMsRUFBRzhDLEVBQVFoQixFQUFFOUIsR0FBSSxFQUFHbUMsR0FFMUNXLEVBQVVBLEVBQVFoQixFQUdwQlQsR0FEQXlCLEVBQVVBLEVBQVFwQixHQUNERCxFQUNqQnNCLEdBQWFBLFNBQ0xELEVBQVFsQixHQUNsQk8sRUFBT3hCLFlBSVgsU0FBUyxFQUFLcUMsR0FDWixHQUFNbkIsRUFBSW1CLEVBQU1uQyxPQUFoQixDQUtBLElBSkEsSUFBSWdCLEVBR0FWLEVBRkFpQixFQUFJLEVBQ0psQixFQUFJOEIsRUFBTSxLQUVMWixFQUFJUCxHQUNYWCxFQUFFVyxFQUFJVixFQUFJNkIsRUFBTVosR0FDaEJqQixFQUFFVyxFQUFJWixFQUNOQSxFQUFJQyxFQUVORCxFQUFFVyxFQUFJVixFQUFJNkIsRUFBTSxHQUNoQjdCLEVBQUVXLEVBQUlaLEdKOUVTbkMsS0FBS2tFLElLdEJmLE1BQU1DLEVBQ1gsY0FDRTFCLEtBQUsyQixVQUFZLElBQUlDLGFBQWEsSUFDbEM1QixLQUFLNkIsR0FBSyxFQUVaLElBQUlyRCxHQUNGLE1BQU04QixFQUFJTixLQUFLMkIsVUFDZixJQUFJZixFQUFJLEVBQ1IsSUFBSyxJQUFJa0IsRUFBSSxFQUFHQSxFQUFJOUIsS0FBSzZCLElBQU1DLEVBQUksR0FBSUEsSUFBSyxDQUMxQyxNQUFNL0MsRUFBSXVCLEVBQUV3QixHQUNWQyxFQUFLdkQsRUFBSU8sRUFDVGlELEVBQUt6RSxLQUFLSyxJQUFJWSxHQUFLakIsS0FBS0ssSUFBSW1CLEdBQUtQLEdBQUt1RCxFQUFLaEQsR0FBS0EsR0FBS2dELEVBQUt2RCxHQUN4RHdELElBQUkxQixFQUFFTSxLQUFPb0IsR0FDakJ4RCxFQUFJdUQsRUFJTixPQUZBekIsRUFBRU0sR0FBS3BDLEVBQ1B3QixLQUFLNkIsR0FBS2pCLEVBQUksRUFDUFosS0FFVCxVQUNFLE1BQU1NLEVBQUlOLEtBQUsyQixVQUNmLElBQWlCbkQsRUFBR08sRUFBR2lELEVBQW5CM0IsRUFBSUwsS0FBSzZCLEdBQWNFLEVBQUssRUFDaEMsR0FBSTFCLEVBQUksRUFBRyxDQUVULElBREEwQixFQUFLekIsSUFBSUQsR0FDRkEsRUFBSSxJQUNUN0IsRUFBSXVELEVBQ0poRCxFQUFJdUIsSUFBSUQsR0FDUjBCLEVBQUt2RCxFQUFJTyxFQUNUaUQsRUFBS2pELEdBQUtnRCxFQUFLdkQsSUFDWHdELEtBRUYzQixFQUFJLElBQU8yQixFQUFLLEdBQUsxQixFQUFFRCxFQUFJLEdBQUssR0FBTzJCLEVBQUssR0FBSzFCLEVBQUVELEVBQUksR0FBSyxLQUM5RHRCLEVBQVMsRUFBTGlELEVBQ0p4RCxFQUFJdUQsRUFBS2hELEVBQ0xBLEdBQUtQLEVBQUl1RCxJQUFJQSxFQUFLdkQsSUFHMUIsT0FBT3VELEdDcENKLFNBQVNFLEVBQVVDLEdBQ3hCLE1BQU8sQ0FBQ3BFLEVBQU1vRSxFQUFVLEdBQUlBLEVBQVUsSUFBS3hELEVBQUt3RCxFQUFVLEtBR3JELFNBQVNBLEVBQVVELEdBQ3hCLElBQUlFLEVBQVNGLEVBQVUsR0FBSUcsRUFBTUgsRUFBVSxHQUFJSSxFQUFTLEVBQUlELEdBQzVELE1BQU8sQ0FBQ0MsRUFBUyxFQUFJRixHQUFTRSxFQUFTLEVBQUlGLEdBQVMsRUFBSUMsSUFHbkQsU0FBU0UsRUFBYTVDLEVBQUdDLEdBQzlCLE9BQU9ELEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FBS0QsRUFBRSxHQUFLQyxFQUFFLEdBR3ZDLFNBQVM0QyxFQUFlN0MsRUFBR0MsR0FDaEMsTUFBTyxDQUFDRCxFQUFFLEdBQUtDLEVBQUUsR0FBS0QsRUFBRSxHQUFLQyxFQUFFLEdBQUlELEVBQUUsR0FBS0MsRUFBRSxHQUFLRCxFQUFFLEdBQUtDLEVBQUUsR0FBSUQsRUFBRSxHQUFLQyxFQUFFLEdBQUtELEVBQUUsR0FBS0MsRUFBRSxJQUloRixTQUFTNkMsRUFBb0I5QyxFQUFHQyxHQUNyQ0QsRUFBRSxJQUFNQyxFQUFFLEdBQUlELEVBQUUsSUFBTUMsRUFBRSxHQUFJRCxFQUFFLElBQU1DLEVBQUUsR0FHakMsU0FBUzhDLEVBQWVDLEVBQVFDLEdBQ3JDLE1BQU8sQ0FBQ0QsRUFBTyxHQUFLQyxFQUFHRCxFQUFPLEdBQUtDLEVBQUdELEVBQU8sR0FBS0MsR0FJN0MsU0FBU0MsRUFBMEJDLEdBQ3hDLElBQUlDLEVBQUlyRSxFQUFLb0UsRUFBRSxHQUFLQSxFQUFFLEdBQUtBLEVBQUUsR0FBS0EsRUFBRSxHQUFLQSxFQUFFLEdBQUtBLEVBQUUsSUFDbERBLEVBQUUsSUFBTUMsRUFBR0QsRUFBRSxJQUFNQyxFQUFHRCxFQUFFLElBQU1DLEVDM0JoQyxTQUFTQyxFQUFVakUsR0FDakIsT0FBSWxCLEVBQUlrQixFQUFNLEtBQU94QixFQUNad0IsRUFBTSxHQUVOUCxFQUFLTyxFQUFNLE1BQVFsQixFQUFJa0IsRUFBTSxJQUFNeEIsR0FBTUssRUFBTUwsR0NGM0MsU0FBUzBGLEVBQU1DLEdBQzVCLE9BQU9DLE1BQU1DLEtBUGYsVUFBa0JGLEdBQ2hCLElBQUssTUFBTXpCLEtBQVN5QixRQUNYekIsRUFLUzRCLENBQVFILElDRGIsV0FBU0ksRUFBY0MsRUFBVTVDLEVBQWFXLEdBQzNELE9BQU8sU0FBU2tDLEdBQ2QsSUFJSUMsRUFDQWpELEVBQ0FrRCxFQU5BN0UsRUFBTzBFLEVBQVNDLEdBQ2hCRyxFQUFhLElBQ2JDLEVBQVdMLEVBQVNJLEdBQ3BCRSxHQUFpQixFQUtqQjlDLEVBQU8sQ0FDVGhDLE1BQU9BLEVBQ1BJLFVBQVdBLEVBQ1hDLFFBQVNBLEVBQ1QwRSxhQUFjLFdBQ1ovQyxFQUFLaEMsTUFBUWdGLEVBQ2JoRCxFQUFLNUIsVUFBWTZFLEVBQ2pCakQsRUFBSzNCLFFBQVU2RSxFQUNmekQsRUFBVyxHQUNYaUQsRUFBVSxJQUVaUyxXQUFZLFdBQ1ZuRCxFQUFLaEMsTUFBUUEsRUFDYmdDLEVBQUs1QixVQUFZQSxFQUNqQjRCLEVBQUszQixRQUFVQSxFQUNmb0IsRUFBV3lDLEVBQU16QyxHQUNqQixJQUFJRSxFRnJCRyxTQUFTK0MsRUFBUzFFLEdBQy9CLElBQUlxRCxFQUFTWSxFQUFVakUsR0FDbkJzRCxFQUFNdEQsRUFBTSxHQUNab0YsRUFBUyxFQUFJOUIsR0FDYitCLEVBQVMsQ0FBQyxFQUFJaEMsSUFBVSxFQUFJQSxHQUFTLEdBQ3JDaUMsRUFBUSxFQUNSQyxFQUFVLEVBRVZDLEVBQU0sSUFBSTVDLEVBRUMsSUFBWHdDLEVBQWM5QixFQUFNM0UsRUFBU0osR0FDWixJQUFaNkcsSUFBZTlCLEdBQU8zRSxFQUFTSixHQUV4QyxJQUFLLElBQUl1RCxFQUFJLEVBQUdQLEVBQUltRCxFQUFRbkUsT0FBUXVCLEVBQUlQLElBQUtPLEVBQzNDLEdBQU01QixHQUFLeUUsRUFBT0QsRUFBUTVDLElBQUl2QixPQVM5QixJQVJBLElBQUlvRSxFQUNBekUsRUFDQXVGLEVBQVNkLEVBQUt6RSxFQUFJLEdBQ2xCd0YsRUFBVXpCLEVBQVV3QixHQUNwQkUsRUFBT0YsRUFBTyxHQUFLLEVBQUk3RyxFQUN2QmdILEVBQVUsRUFBSUQsR0FDZEUsRUFBVSxFQUFJRixHQUVUM0MsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQUcwQyxFQUFVSSxFQUFTRixFQUFVRyxFQUFTRixFQUFVRyxFQUFTUCxFQUFTUSxFQUFRLENBQ3BHLElBQUlBLEVBQVN0QixFQUFLM0IsR0FDZDhDLEVBQVU3QixFQUFVZ0MsR0FDcEJDLEVBQU9ELEVBQU8sR0FBSyxFQUFJckgsRUFDdkJtSCxFQUFVLEVBQUlHLEdBQ2RGLEVBQVUsRUFBSUUsR0FDZEMsRUFBUUwsRUFBVUosRUFDbEJqRyxFQUFPMEcsR0FBUyxFQUFJLEdBQUssRUFDekJDLEVBQVczRyxFQUFPMEcsRUFDbEJFLEVBQWVELEVBQVc1SCxFQUMxQnFGLEVBQUkrQixFQUFVRyxFQU9sQixHQUxBUCxFQUFJYyxJQUFJdEgsRUFBTTZFLEVBQUlwRSxFQUFPLEVBQUkyRyxHQUFXUCxFQUFVRyxFQUFVbkMsRUFBSSxFQUFJdUMsS0FDcEVkLEdBQVNlLEVBQWVGLEVBQVExRyxFQUFPWixFQUFNc0gsRUFJekNFLEVBQWVYLEdBQVdyQyxFQUFTeUMsR0FBV3pDLEVBQVEsQ0FDeEQsSUFBSWtELEVBQU05QyxFQUFlTCxFQUFVcUMsR0FBU3JDLEVBQVU2QyxJQUN0RG5DLEVBQTBCeUMsR0FDMUIsSUFBSUMsRUFBZS9DLEVBQWU0QixFQUFRa0IsR0FDMUN6QyxFQUEwQjBDLEdBQzFCLElBQUlDLEdBQVVKLEVBQWVGLEdBQVMsR0FBSyxFQUFJLEdBQUt2RyxFQUFLNEcsRUFBYSxLQUNsRWxELEVBQU1tRCxHQUFVbkQsSUFBUW1ELElBQVdGLEVBQUksSUFBTUEsRUFBSSxPQUNuRGhCLEdBQVdjLEVBQWVGLEdBQVMsRUFBSSxHQUFLLElBaUJwRCxPQUFRYixHQUFTL0csR0FBVytHLEVBQVEvRyxHQUFXaUgsR1AxRTNCLE9PMEV5RCxFQUFWRCxFRTNDM0NtQixDQUFnQmhDLEVBQVNuQyxHQUN2Q2QsRUFBU2xCLFFBQ051RSxJQUFnQkwsRUFBS00sZUFBZ0JELEdBQWlCLEdBQzNELEVBQVdyRCxFQUFVQyxFQUFxQkMsRUFBYUMsRUFBYTZDLElBQzNEOUMsSUFDSm1ELElBQWdCTCxFQUFLTSxlQUFnQkQsR0FBaUIsR0FDM0RMLEVBQUtyRSxZQUNMd0IsRUFBWSxLQUFNLEtBQU0sRUFBRzZDLEdBQzNCQSxFQUFLcEUsV0FFSHlFLElBQWdCTCxFQUFLVSxhQUFjTCxHQUFpQixHQUN4RHJELEVBQVdpRCxFQUFVLE1BRXZCaUMsT0FBUSxXQUNObEMsRUFBS00sZUFDTE4sRUFBS3JFLFlBQ0x3QixFQUFZLEtBQU0sS0FBTSxFQUFHNkMsR0FDM0JBLEVBQUtwRSxVQUNMb0UsRUFBS1UsZUFJVCxTQUFTbkYsRUFBTXFELEVBQVFDLEdBQ2pCaUIsRUFBYWxCLEVBQVFDLElBQU1tQixFQUFLekUsTUFBTXFELEVBQVFDLEdBR3BELFNBQVNzRCxFQUFVdkQsRUFBUUMsR0FDekJ4RCxFQUFLRSxNQUFNcUQsRUFBUUMsR0FHckIsU0FBU2xELElBQ1A0QixFQUFLaEMsTUFBUTRHLEVBQ2I5RyxFQUFLTSxZQUdQLFNBQVNDLElBQ1AyQixFQUFLaEMsTUFBUUEsRUFDYkYsRUFBS08sVUFHUCxTQUFTMkUsRUFBVTNCLEVBQVFDLEdBQ3pCcUIsRUFBS3hFLEtBQUssQ0FBQ2tELEVBQVFDLElBQ25CdUIsRUFBUzdFLE1BQU1xRCxFQUFRQyxHQUd6QixTQUFTMkIsSUFDUEosRUFBU3pFLFlBQ1R1RSxFQUFPLEdBR1QsU0FBU08sSUFDUEYsRUFBVUwsRUFBSyxHQUFHLEdBQUlBLEVBQUssR0FBRyxJQUM5QkUsRUFBU3hFLFVBRVQsSUFFSXlCLEVBQTRCNUIsRUFDNUJnQyxFQUNBbEMsRUFKQTZHLEVBQVFoQyxFQUFTZ0MsUUFDakJDLEVBQWVsQyxFQUFXakUsU0FDdkJZLEVBQUl1RixFQUFhdkcsT0FReEIsR0FKQW9FLEVBQUtuRSxNQUNMa0UsRUFBUXZFLEtBQUt3RSxHQUNiQSxFQUFPLEtBRUZwRCxFQUdMLEdBQVksRUFBUnNGLEdBRUYsSUFBSzNHLEdBRExnQyxFQUFVNEUsRUFBYSxJQUNOdkcsT0FBUyxHQUFLLEVBQUcsQ0FHaEMsSUFGS3VFLElBQWdCTCxFQUFLTSxlQUFnQkQsR0FBaUIsR0FDM0RMLEVBQUtyRSxZQUNBMEIsRUFBSSxFQUFHQSxFQUFJNUIsSUFBSzRCLEVBQUcyQyxFQUFLekUsT0FBT0EsRUFBUWtDLEVBQVFKLElBQUksR0FBSTlCLEVBQU0sSUFDbEV5RSxFQUFLcEUsZ0JBT0xrQixFQUFJLEdBQWEsRUFBUnNGLEdBQVdDLEVBQWEzRyxLQUFLMkcsRUFBYXRHLE1BQU1DLE9BQU9xRyxFQUFhcEcsVUFFakZlLEVBQVN0QixLQUFLMkcsRUFBYUMsT0FBT0MsSUFHcEMsT0FBT2hGLEdBSVgsU0FBU2dGLEVBQWE5RSxHQUNwQixPQUFPQSxFQUFRM0IsT0FBUyxFQUsxQixTQUFTbUIsRUFBb0JkLEVBQUdDLEdBQzlCLFFBQVNELEVBQUlBLEVBQUVsQixHQUFHLEdBQUssRUFBSWtCLEVBQUUsR0FBS2pDLEVBQVNKLEVBQVVJLEVBQVNpQyxFQUFFLE1BQ3ZEQyxFQUFJQSxFQUFFbkIsR0FBRyxHQUFLLEVBQUltQixFQUFFLEdBQUtsQyxFQUFTSixFQUFVSSxFQUFTa0MsRUFBRSxJQzlIbEUsUUFBZW1CLEdBQ2IsV0FBYSxPQUFPLEtBU3RCLFNBQThCSCxHQUM1QixJQUdJZ0YsRUFIQW5CLEVBQVV1QixJQUNWdEIsRUFBT3NCLElBQ1BDLEVBQVFELElBR1osTUFBTyxDQUNMN0csVUFBVyxXQUNUeUIsRUFBT3pCLFlBQ1B5RyxFQUFRLEdBRVY3RyxNQUFPLFNBQVM4RixFQUFTSSxHQUN2QixJQUFJaUIsRUFBUXJCLEVBQVUsRUFBSXRILEdBQU1BLEVBQzVCMkgsRUFBUXJILEVBQUlnSCxFQUFVSixHQUN0QjVHLEVBQUlxSCxFQUFRM0gsR0FBTUQsR0FDcEJzRCxFQUFPN0IsTUFBTTBGLEVBQVNDLEdBQVFBLEVBQU9PLEdBQVEsRUFBSSxFQUFJdkgsR0FBVUEsR0FDL0RrRCxFQUFPN0IsTUFBTWtILEVBQU92QixHQUNwQjlELEVBQU94QixVQUNQd0IsRUFBT3pCLFlBQ1B5QixFQUFPN0IsTUFBTW1ILEVBQU94QixHQUNwQjlELEVBQU83QixNQUFNOEYsRUFBU0gsR0FDdEJrQixFQUFRLEdBQ0NLLElBQVVDLEdBQVNoQixHQUFTM0gsSUFDakNNLEVBQUk0RyxFQUFVd0IsR0FBUzNJLElBQVNtSCxHQUFXd0IsRUFBUTNJLEdBQ25ETyxFQUFJZ0gsRUFBVXFCLEdBQVM1SSxJQUFTdUgsR0FBV3FCLEVBQVE1SSxHQUN2RG9ILEVBb0JSLFNBQW1DRCxFQUFTQyxFQUFNRyxFQUFTSSxHQUN6RCxJQUFJTCxFQUNBRyxFQUNBb0IsRUFBb0IsRUFBSTFCLEVBQVVJLEdBQ3RDLE9BQU9oSCxFQUFJc0ksR0FBcUI3SSxFQUMxQlEsR0FBTSxFQUFJNEcsSUFBU0ssRUFBVSxFQUFJRSxJQUFTLEVBQUlKLEdBQzFDLEVBQUlJLElBQVNMLEVBQVUsRUFBSUYsSUFBUyxFQUFJRCxLQUN2Q0csRUFBVUcsRUFBVW9CLEtBQ3hCekIsRUFBT08sR0FBUSxFQTVCVG1CLENBQTBCM0IsRUFBU0MsRUFBTUcsRUFBU0ksR0FDekRyRSxFQUFPN0IsTUFBTWtILEVBQU92QixHQUNwQjlELEVBQU94QixVQUNQd0IsRUFBT3pCLFlBQ1B5QixFQUFPN0IsTUFBTW1ILEVBQU94QixHQUNwQmtCLEVBQVEsR0FFVmhGLEVBQU83QixNQUFNMEYsRUFBVUksRUFBU0gsRUFBT08sR0FDdkNnQixFQUFRQyxHQUVWOUcsUUFBUyxXQUNQd0IsRUFBT3hCLFVBQ1BxRixFQUFVQyxFQUFPc0IsS0FFbkJKLE1BQU8sV0FDTCxPQUFPLEVBQUlBLE9BZ0JqQixTQUFxQ3hDLEVBQU1pRCxFQUFJQyxFQUFXMUYsR0FDeEQsSUFBSXlCLEVBQ0osR0FBWSxNQUFSZSxFQUNGZixFQUFNaUUsRUFBWTVJLEVBQ2xCa0QsRUFBTzdCLE9BQU94QixFQUFJOEUsR0FDbEJ6QixFQUFPN0IsTUFBTSxFQUFHc0QsR0FDaEJ6QixFQUFPN0IsTUFBTXhCLEVBQUk4RSxHQUNqQnpCLEVBQU83QixNQUFNeEIsRUFBSSxHQUNqQnFELEVBQU83QixNQUFNeEIsR0FBSzhFLEdBQ2xCekIsRUFBTzdCLE1BQU0sR0FBSXNELEdBQ2pCekIsRUFBTzdCLE9BQU94QixHQUFLOEUsR0FDbkJ6QixFQUFPN0IsT0FBT3hCLEVBQUksR0FDbEJxRCxFQUFPN0IsT0FBT3hCLEVBQUk4RSxRQUNiLEdBQUl4RSxFQUFJdUYsRUFBSyxHQUFLaUQsRUFBRyxJQUFNL0ksRUFBUyxDQUN6QyxJQUFJOEUsRUFBU2dCLEVBQUssR0FBS2lELEVBQUcsR0FBSzlJLEdBQU1BLEVBQ3JDOEUsRUFBTWlFLEVBQVlsRSxFQUFTLEVBQzNCeEIsRUFBTzdCLE9BQU9xRCxFQUFRQyxHQUN0QnpCLEVBQU83QixNQUFNLEVBQUdzRCxHQUNoQnpCLEVBQU83QixNQUFNcUQsRUFBUUMsUUFFckJ6QixFQUFPN0IsTUFBTXNILEVBQUcsR0FBSUEsRUFBRyxNQWxGekIsRUFBRTlJLEdBQUtHLElDbUJULFNBQVM2SSxFQUFhQyxFQUFXekgsSUFDL0JBLEVBQVFvRCxFQUFVcEQsSUFBYyxJQUFNeUgsRUFDdEMzRCxFQUEwQjlELEdBQzFCLElYSm1CTixFV0lmZ0ksR1hKZWhJLEdXSUFNLEVBQU0sSVhIZCxFQUFJLEVBQUlOLEdBQUssRUFBSWxCLEVBQUtDLEtBQUtrSixLQUFLakksR1dJM0MsU0FBVU0sRUFBTSxHQUFLLEdBQUswSCxFQUFTQSxHQUFVN0ksRUFBTU4sR0FBV00sRUN4QmpELFdBQVM2SSxHQUN0QixJQUFJRSxFQUFLLEVBQUlGLEdBQ1R2QixFQUFRLEVBQUksRUFDWjBCLEVBQWNELEVBQUssRUFDbkJFLEVBQWdCaEosRUFBSThJLEdBQU1ySixFQU05QixTQUFTd0osRUFBUTFFLEVBQVFDLEdBQ3ZCLE9BQU8sRUFBSUQsR0FBVSxFQUFJQyxHQUFPc0UsRUFrRmxDLFNBQVNJLEVBQVVwSCxFQUFHQyxFQUFHb0gsR0FDdkIsSUFLSUMsRUFBSyxDQUFDLEVBQUcsRUFBRyxHQUNaQyxFQUFLMUUsRUFOQUwsRUFBVXhDLEdBQ1Z3QyxFQUFVdkMsSUFNZnVILEVBQU81RSxFQUFhMkUsRUFBSUEsR0FDeEJFLEVBQU9GLEVBQUcsR0FDVkcsRUFBY0YsRUFBT0MsRUFBT0EsRUFHaEMsSUFBS0MsRUFBYSxPQUFRTCxHQUFPckgsRUFFakMsSUFBSTJILEVBQU1YLEVBQUtRLEVBQU9FLEVBQ2xCRSxHQUFNWixFQUFLUyxFQUFPQyxFQUNsQkcsRUFBUWhGLEVBQWV5RSxFQUFJQyxHQUMzQk8sRUFBSS9FLEVBQWV1RSxFQUFJSyxHQUUzQjdFLEVBQW9CZ0YsRUFEWi9FLEVBQWV3RSxFQUFJSyxJQUkzQixJQUFJRyxFQUFJRixFQUNKRyxFQUFJcEYsRUFBYWtGLEVBQUdDLEdBQ3BCRSxFQUFLckYsRUFBYW1GLEVBQUdBLEdBQ3JCRyxFQUFLRixFQUFJQSxFQUFJQyxHQUFNckYsRUFBYWtGLEVBQUdBLEdBQUssR0FFNUMsS0FBSUksRUFBSyxHQUFULENBRUEsSUFBSUMsRUFBSXBKLEVBQUttSixHQUNURSxFQUFJckYsRUFBZWdGLElBQUtDLEVBQUlHLEdBQUtGLEdBSXJDLEdBSEFuRixFQUFvQnNGLEVBQUdOLEdBQ3ZCTSxFQUFJN0YsRUFBVTZGLElBRVRmLEVBQUssT0FBT2UsRUFHakIsSUFJSTdILEVBSkF1RSxFQUFVOUUsRUFBRSxHQUNaa0YsRUFBVWpGLEVBQUUsR0FDWjhFLEVBQU8vRSxFQUFFLEdBQ1RzRixFQUFPckYsRUFBRSxHQUdUaUYsRUFBVUosSUFBU3ZFLEVBQUl1RSxFQUFTQSxFQUFVSSxFQUFTQSxFQUFVM0UsR0FFakUsSUFBSWdGLEVBQVFMLEVBQVVKLEVBQ2xCdUQsRUFBUW5LLEVBQUlxSCxFQUFRM0gsR0FBTUQsRUFNOUIsSUFISzBLLEdBQVMvQyxFQUFPUCxJQUFNeEUsRUFBSXdFLEVBQU1BLEVBQU9PLEVBQU1BLEVBQU8vRSxHQUYxQzhILEdBQVM5QyxFQUFRNUgsRUFNMUIwSyxFQUNFdEQsRUFBT08sRUFBTyxFQUFJOEMsRUFBRSxJQUFNbEssRUFBSWtLLEVBQUUsR0FBS3RELEdBQVduSCxFQUFVb0gsRUFBT08sR0FDakVQLEdBQVFxRCxFQUFFLElBQU1BLEVBQUUsSUFBTTlDLEVBQzFCQyxFQUFRM0gsR0FBTWtILEdBQVdzRCxFQUFFLElBQU1BLEVBQUUsSUFBTWxELEdBQVUsQ0FDdkQsSUFBSW9ELEVBQUt2RixFQUFlZ0YsSUFBS0MsRUFBSUcsR0FBS0YsR0FFdEMsT0FEQW5GLEVBQW9Cd0YsRUFBSVIsR0FDakIsQ0FBQ00sRUFBRzdGLEVBQVUrRixNQU16QixTQUFTQyxFQUFLOUYsRUFBUUMsR0FDcEIsSUFBSThGLEVBQUl2QixFQUFjSCxFQUFTbEosRUFBS2tKLEVBQ2hDeUIsRUFBTyxFQUtYLE9BSkk5RixHQUFVK0YsRUFBR0QsR0FBUSxFQUNoQjlGLEVBQVMrRixJQUFHRCxHQUFRLEdBQ3pCN0YsR0FBTzhGLEVBQUdELEdBQVEsRUFDYjdGLEVBQU04RixJQUFHRCxHQUFRLEdBQ25CQSxFQUdULE9BQU9uSCxFQUFLK0YsR0F2SlosU0FBa0JsRyxHQUNoQixJQUFJNEQsRUFDQTRELEVBQ0FDLEVBQ0FDLEVBQ0ExQyxFQUNKLE1BQU8sQ0FDTHpHLFVBQVcsV0FDVG1KLEVBQU1ELEdBQUssRUFDWHpDLEVBQVEsR0FFVjdHLE1BQU8sU0FBU3FELEVBQVFDLEdBQ3RCLElBQ0lrRyxFQURBdkQsRUFBUyxDQUFDNUMsRUFBUUMsR0FFbEJoQyxFQUFJeUcsRUFBUTFFLEVBQVFDLEdBQ3BCbUcsRUFBSTVCLEVBQ0F2RyxFQUFJLEVBQUk2SCxFQUFLOUYsRUFBUUMsR0FDckJoQyxFQUFJNkgsRUFBSzlGLEdBQVVBLEVBQVMsRUFBSTdFLEdBQU1BLEdBQUs4RSxHQUFPLEVBTzFELElBTkttQyxJQUFXOEQsRUFBTUQsRUFBS2hJLElBQUlPLEVBQU96QixZQUNsQ2tCLElBQU1nSSxNQUNSRSxFQUFTeEIsRUFBVXZDLEVBQVFRLEtBQ1o1RCxFQUFXb0QsRUFBUStELElBQVduSCxFQUFXNEQsRUFBUXVELE1BQzlEdkQsRUFBTyxHQUFLLEdBRVozRSxJQUFNZ0ksRUFDUnpDLEVBQVEsRUFDSnZGLEdBRUZPLEVBQU96QixZQUNQb0osRUFBU3hCLEVBQVUvQixFQUFRUixHQUMzQjVELEVBQU83QixNQUFNd0osRUFBTyxHQUFJQSxFQUFPLE1BRy9CQSxFQUFTeEIsRUFBVXZDLEVBQVFRLEdBQzNCcEUsRUFBTzdCLE1BQU13SixFQUFPLEdBQUlBLEVBQU8sR0FBSSxHQUNuQzNILEVBQU94QixXQUVUb0YsRUFBUytELE9BQ0osR0FBSTFCLEdBQWlCckMsR0FBVW9DLEVBQWN2RyxFQUFHLENBQ3JELElBQUl5SCxFQUdFVSxFQUFJSixLQUFRTixFQUFJZixFQUFVL0IsRUFBUVIsR0FBUSxNQUM5Q29CLEVBQVEsRUFDSmdCLEdBQ0ZoRyxFQUFPekIsWUFDUHlCLEVBQU83QixNQUFNK0ksRUFBRSxHQUFHLEdBQUlBLEVBQUUsR0FBRyxJQUMzQmxILEVBQU83QixNQUFNK0ksRUFBRSxHQUFHLEdBQUlBLEVBQUUsR0FBRyxJQUMzQmxILEVBQU94QixZQUVQd0IsRUFBTzdCLE1BQU0rSSxFQUFFLEdBQUcsR0FBSUEsRUFBRSxHQUFHLElBQzNCbEgsRUFBT3hCLFVBQ1B3QixFQUFPekIsWUFDUHlCLEVBQU83QixNQUFNK0ksRUFBRSxHQUFHLEdBQUlBLEVBQUUsR0FBRyxHQUFJLE1BSWpDekgsR0FBT21FLEdBQVdwRCxFQUFXb0QsRUFBUVEsSUFDdkNwRSxFQUFPN0IsTUFBTWlHLEVBQU8sR0FBSUEsRUFBTyxJQUVqQ1IsRUFBU1EsRUFBUXFELEVBQUtoSSxFQUFHK0gsRUFBS0ksR0FFaENwSixRQUFTLFdBQ0hpSixHQUFJekgsRUFBT3hCLFVBQ2ZvRixFQUFTLE1BSVhvQixNQUFPLFdBQ0wsT0FBT0EsR0FBVTBDLEdBQU9ELElBQU8sT0FqRnJDLFNBQXFCakYsRUFBTWlELEVBQUlDLEVBQVcxRixJRE5yQyxTQUFzQkEsRUFBUTZGLEVBQVF2QixFQUFPb0IsRUFBV21DLEVBQUlDLEdBQ2pFLEdBQUt4RCxFQUFMLENBQ0EsSUFBSXNCLEVBQVksRUFBSUMsR0FDaEJrQyxFQUFZLEVBQUlsQyxHQUNoQm1DLEVBQU90QyxFQUFZcEIsRUFDYixNQUFOdUQsR0FDRkEsRUFBS2hDLEVBQVNILEVBQVkxSSxFQUMxQjhLLEVBQUtqQyxFQUFTbUMsRUFBTyxJQUVyQkgsRUFBS2xDLEVBQWFDLEVBQVdpQyxHQUM3QkMsRUFBS25DLEVBQWFDLEVBQVdrQyxJQUN6QnBDLEVBQVksRUFBSW1DLEVBQUtDLEVBQUtELEVBQUtDLEtBQUlELEdBQU1uQyxFQUFZMUksSUFFM0QsSUFBSyxJQUFJbUIsRUFBTytJLEVBQUlXLEVBQUluQyxFQUFZLEVBQUl3QixFQUFJWSxFQUFLWixFQUFJWSxFQUFJWixHQUFLYyxFQUM1RDdKLEVBQVFtRCxFQUFVLENBQUNzRSxHQUFZbUMsRUFBWSxFQUFJYixJQUFLYSxFQUFZLEVBQUliLEtBQ3BFbEgsRUFBTzdCLE1BQU1BLEVBQU0sR0FBSUEsRUFBTSxLQ1I3QjhKLENBQWFqSSxFQUFRNkYsRUFBUXZCLEVBQU9vQixFQUFXbEQsRUFBTWlELEtBa0tYTyxFQUFjLENBQUMsR0FBSUgsR0FBVSxFQUFFbEosRUFBSWtKLEVBQVNsSixJQ3pLMUYsSUFBSXVMLEVBQVUsSUFBS0MsR0FBV0QsRUFLZixTQUFTRSxFQUFjQyxFQUFJQyxFQUFJQyxFQUFJQyxHQUVoRCxTQUFTdEMsRUFBUXJJLEVBQUdPLEdBQ2xCLE9BQU9pSyxHQUFNeEssR0FBS0EsR0FBSzBLLEdBQU1ELEdBQU1sSyxHQUFLQSxHQUFLb0ssRUFHL0MsU0FBU3pJLEVBQVl5QyxFQUFNaUQsRUFBSUMsRUFBVzFGLEdBQ3hDLElBQUlqQixFQUFJLEVBQUcwSixFQUFLLEVBQ2hCLEdBQVksTUFBUmpHLElBQ0l6RCxFQUFJMkosRUFBT2xHLEVBQU1rRCxPQUFpQitDLEVBQUtDLEVBQU9qRCxFQUFJQyxLQUNuRGlELEVBQWFuRyxFQUFNaUQsR0FBTSxFQUFJQyxFQUFZLEVBQzlDLEdBQUcxRixFQUFPN0IsTUFBWSxJQUFOWSxHQUFpQixJQUFOQSxFQUFVc0osRUFBS0UsRUFBSXhKLEVBQUksRUFBSXlKLEVBQUtGLFVBQ25EdkosR0FBS0EsRUFBSTJHLEVBQVksR0FBSyxLQUFPK0MsUUFFekN6SSxFQUFPN0IsTUFBTXNILEVBQUcsR0FBSUEsRUFBRyxJQUkzQixTQUFTaUQsRUFBTy9JLEVBQUcrRixHQUNqQixPQUFPekksRUFBSTBDLEVBQUUsR0FBSzBJLEdBQU0zTCxFQUFVZ0osRUFBWSxFQUFJLEVBQUksRUFDaER6SSxFQUFJMEMsRUFBRSxHQUFLNEksR0FBTTdMLEVBQVVnSixFQUFZLEVBQUksRUFBSSxFQUMvQ3pJLEVBQUkwQyxFQUFFLEdBQUsySSxHQUFNNUwsRUFBVWdKLEVBQVksRUFBSSxFQUFJLEVBQy9DQSxFQUFZLEVBQUksRUFBSSxFQUc1QixTQUFTN0YsRUFBb0JkLEVBQUdDLEdBQzlCLE9BQU8ySixFQUFhNUosRUFBRWxCLEVBQUdtQixFQUFFbkIsR0FHN0IsU0FBUzhLLEVBQWE1SixFQUFHQyxHQUN2QixJQUFJNEosRUFBS0YsRUFBTzNKLEVBQUcsR0FDZjhKLEVBQUtILEVBQU8xSixFQUFHLEdBQ25CLE9BQU80SixJQUFPQyxFQUFLRCxFQUFLQyxFQUNYLElBQVBELEVBQVc1SixFQUFFLEdBQUtELEVBQUUsR0FDYixJQUFQNkosRUFBVzdKLEVBQUUsR0FBS0MsRUFBRSxHQUNiLElBQVA0SixFQUFXN0osRUFBRSxHQUFLQyxFQUFFLEdBQ3BCQSxFQUFFLEdBQUtELEVBQUUsR0FHakIsT0FBTyxTQUFTaUIsR0FDZCxJQUVJSixFQUNBaUQsRUFDQUMsRUFDQWdHLEVBQUtDLEVBQUtDLEVBQ1ZDLEVBQUlDLEVBQUlDLEVBQ1JDLEVBQ0FwRSxFQVJBcUUsRUFBZXJKLEVBQ2ZzSixFQUFlLElBU2ZDLEVBQWEsQ0FDZnBMLE1BQU9BLEVBQ1BJLFVBZ0RGLFdBQ0VnTCxFQUFXcEwsTUFBUXFMLEVBQ2YzRyxHQUFTQSxFQUFRdkUsS0FBS3dFLEVBQU8sSUFDakNzRyxHQUFRLEVBQ1JELEdBQUssRUFDTEYsRUFBS0MsRUFBSzlELEtBcERWNUcsUUEwREYsV0FDTW9CLElBQ0Y0SixFQUFVVixFQUFLQyxHQUNYQyxHQUFPRyxHQUFJRyxFQUFhN0ssU0FDNUJtQixFQUFTdEIsS0FBS2dMLEVBQWF4SyxXQUU3QnlLLEVBQVdwTCxNQUFRQSxFQUNmZ0wsR0FBSUUsRUFBYTdLLFdBaEVyQjBFLGFBdUJGLFdBQ0VtRyxFQUFlQyxFQUFjMUosRUFBVyxHQUFJaUQsRUFBVSxHQUFJbUMsR0FBUSxHQXZCbEUxQixXQTBCRixXQUNFLElBQUl4RCxFQXBCTixXQUdFLElBRkEsSUFBSTRELEVBQVUsRUFFTHpELEVBQUksRUFBR1AsRUFBSW1ELEVBQVFuRSxPQUFRdUIsRUFBSVAsSUFBS08sRUFDM0MsSUFBSyxJQUFnRXdKLEVBQUloQixFQUFoRTNGLEVBQU9ELEVBQVE1QyxHQUFJa0IsRUFBSSxFQUFHOUMsRUFBSXlFLEVBQUtwRSxPQUFRUCxFQUFRMkUsRUFBSyxHQUFZNEcsRUFBS3ZMLEVBQU0sR0FBSXdMLEVBQUt4TCxFQUFNLEdBQUlnRCxFQUFJOUMsSUFBSzhDLEVBQ2xIc0ksRUFBS0MsRUFBSWpCLEVBQUtrQixFQUFxQkQsR0FBakJ2TCxFQUFRMkUsRUFBSzNCLElBQWUsR0FBSXdJLEVBQUt4TCxFQUFNLEdBQ3pEc0ssR0FBTUQsRUFBVW1CLEVBQUtuQixJQUFPa0IsRUFBS0QsSUFBT2pCLEVBQUtDLElBQU9rQixFQUFLbEIsSUFBT0osRUFBS29CLE1BQU8vRixFQUNyRWlHLEdBQU1uQixJQUFPa0IsRUFBS0QsSUFBT2pCLEVBQUtDLElBQU9rQixFQUFLbEIsSUFBT0osRUFBS29CLE1BQU8vRixFQUk1RSxPQUFPQSxFQVNXa0csR0FDZEMsRUFBYzdFLEdBQVNsRixFQUN2Qm9HLEdBQVd0RyxFQUFXeUMsRUFBTXpDLElBQVdsQixRQUN2Q21MLEdBQWUzRCxLQUNqQmxHLEVBQU9rRCxlQUNIMkcsSUFDRjdKLEVBQU96QixZQUNQd0IsRUFBWSxLQUFNLEtBQU0sRUFBR0MsR0FDM0JBLEVBQU94QixXQUVMMEgsR0FDRixFQUFXdEcsRUFBVUMsRUFBcUJDLEVBQWFDLEVBQWFDLEdBRXRFQSxFQUFPc0QsY0FFVCtGLEVBQWVySixFQUFRSixFQUFXaUQsRUFBVUMsRUFBTyxPQXZDckQsU0FBUzNFLEVBQU1OLEVBQUdPLEdBQ1o4SCxFQUFRckksRUFBR08sSUFBSWlMLEVBQWFsTCxNQUFNTixFQUFHTyxHQThEM0MsU0FBU29MLEVBQVUzTCxFQUFHTyxHQUNwQixJQUFJcUIsRUFBSXlHLEVBQVFySSxFQUFHTyxHQUVuQixHQURJeUUsR0FBU0MsRUFBS3hFLEtBQUssQ0FBQ1QsRUFBR08sSUFDdkJnTCxFQUNGTixFQUFNakwsRUFBR2tMLEVBQU0zSyxFQUFHNEssRUFBTXZKLEVBQ3hCMkosR0FBUSxFQUNKM0osSUFDRjRKLEVBQWE5SyxZQUNiOEssRUFBYWxMLE1BQU1OLEVBQUdPLFNBR3hCLEdBQUlxQixHQUFLMEosRUFBSUUsRUFBYWxMLE1BQU1OLEVBQUdPLE9BQzlCLENBQ0gsSUFBSVcsRUFBSSxDQUFDa0ssRUFBS3JNLEtBQUtrTixJQUFJM0IsRUFBU3ZMLEtBQUttTixJQUFJN0IsRUFBU2UsSUFBTUMsRUFBS3RNLEtBQUtrTixJQUFJM0IsRUFBU3ZMLEtBQUttTixJQUFJN0IsRUFBU2dCLEtBQzdGbEssRUFBSSxDQUFDbkIsRUFBSWpCLEtBQUtrTixJQUFJM0IsRUFBU3ZMLEtBQUttTixJQUFJN0IsRUFBU3JLLElBQUtPLEVBQUl4QixLQUFLa04sSUFBSTNCLEVBQVN2TCxLQUFLbU4sSUFBSTdCLEVBQVM5SixNQ2xKekYsU0FBU1csRUFBR0MsRUFBR3FKLEVBQUlDLEVBQUlDLEVBQUlDLEdBQ3hDLElBUUlqQixFQVJBeUMsRUFBS2pMLEVBQUUsR0FDUGtMLEVBQUtsTCxFQUFFLEdBR1A4SSxFQUFLLEVBQ0xDLEVBQUssRUFDTG9DLEVBSktsTCxFQUFFLEdBSUdnTCxFQUNWRyxFQUpLbkwsRUFBRSxHQUlHaUwsRUFJZCxHQURBMUMsRUFBSWMsRUFBSzJCLEVBQ0pFLEtBQU0zQyxFQUFJLEdBQWYsQ0FFQSxHQURBQSxHQUFLMkMsRUFDREEsRUFBSyxFQUFHLENBQ1YsR0FBSTNDLEVBQUlNLEVBQUksT0FDUk4sRUFBSU8sSUFBSUEsRUFBS1AsUUFDWixHQUFJMkMsRUFBSyxFQUFHLENBQ2pCLEdBQUkzQyxFQUFJTyxFQUFJLE9BQ1JQLEVBQUlNLElBQUlBLEVBQUtOLEdBSW5CLEdBREFBLEVBQUlnQixFQUFLeUIsRUFDSkUsS0FBTTNDLEVBQUksR0FBZixDQUVBLEdBREFBLEdBQUsyQyxFQUNEQSxFQUFLLEVBQUcsQ0FDVixHQUFJM0MsRUFBSU8sRUFBSSxPQUNSUCxFQUFJTSxJQUFJQSxFQUFLTixRQUNaLEdBQUkyQyxFQUFLLEVBQUcsQ0FDakIsR0FBSTNDLEVBQUlNLEVBQUksT0FDUk4sRUFBSU8sSUFBSUEsRUFBS1AsR0FJbkIsR0FEQUEsRUFBSWUsRUFBSzJCLEVBQ0pFLEtBQU01QyxFQUFJLEdBQWYsQ0FFQSxHQURBQSxHQUFLNEMsRUFDREEsRUFBSyxFQUFHLENBQ1YsR0FBSTVDLEVBQUlNLEVBQUksT0FDUk4sRUFBSU8sSUFBSUEsRUFBS1AsUUFDWixHQUFJNEMsRUFBSyxFQUFHLENBQ2pCLEdBQUk1QyxFQUFJTyxFQUFJLE9BQ1JQLEVBQUlNLElBQUlBLEVBQUtOLEdBSW5CLEdBREFBLEVBQUlpQixFQUFLeUIsRUFDSkUsS0FBTTVDLEVBQUksR0FBZixDQUVBLEdBREFBLEdBQUs0QyxFQUNEQSxFQUFLLEVBQUcsQ0FDVixHQUFJNUMsRUFBSU8sRUFBSSxPQUNSUCxFQUFJTSxJQUFJQSxFQUFLTixRQUNaLEdBQUk0QyxFQUFLLEVBQUcsQ0FDakIsR0FBSTVDLEVBQUlNLEVBQUksT0FDUk4sRUFBSU8sSUFBSUEsRUFBS1AsR0FLbkIsT0FGSU0sRUFBSyxJQUFHOUksRUFBRSxHQUFLaUwsRUFBS25DLEVBQUtxQyxFQUFJbkwsRUFBRSxHQUFLa0wsRUFBS3BDLEVBQUtzQyxHQUM5Q3JDLEVBQUssSUFBRzlJLEVBQUUsR0FBS2dMLEVBQUtsQyxFQUFLb0MsRUFBSWxMLEVBQUUsR0FBS2lMLEVBQUtuQyxFQUFLcUMsSUFDM0MsTUQwRkssQ0FBU3BMLEVBQUdDLEVBQUdxSixFQUFJQyxFQUFJQyxFQUFJQyxHQVFwQi9JLElBQ1Q0SixFQUFhOUssWUFDYjhLLEVBQWFsTCxNQUFNTixFQUFHTyxHQUN0QjRHLEdBQVEsSUFWSG1FLElBQ0hFLEVBQWE5SyxZQUNiOEssRUFBYWxMLE1BQU1ZLEVBQUUsR0FBSUEsRUFBRSxLQUU3QnNLLEVBQWFsTCxNQUFNYSxFQUFFLEdBQUlBLEVBQUUsSUFDdEJTLEdBQUc0SixFQUFhN0ssVUFDckJ3RyxHQUFRLEdBUWRpRSxFQUFLcEwsRUFBR3FMLEVBQUs5SyxFQUFHK0ssRUFBSzFKLEVBR3ZCLE9BQU84SixHRXJLSSxXQUFTeEssRUFBR0MsR0FFekIsU0FBU29MLEVBQVF2TSxFQUFHTyxHQUNsQixPQUFPUCxFQUFJa0IsRUFBRWxCLEVBQUdPLEdBQUlZLEVBQUVuQixFQUFFLEdBQUlBLEVBQUUsSUFPaEMsT0FKSWtCLEVBQUVzTCxRQUFVckwsRUFBRXFMLFNBQVFELEVBQVFDLE9BQVMsU0FBU3hNLEVBQUdPLEdBQ3JELE9BQU9QLEVBQUltQixFQUFFcUwsT0FBT3hNLEVBQUdPLEtBQVNXLEVBQUVzTCxPQUFPeE0sRUFBRSxHQUFJQSxFQUFFLE1BRzVDdU0sRUNWVCxRQUFldk0sR0FBS0EsRUNHcEIsU0FBU3lNLEVBQWlCOUksRUFBUUMsR0FDaEMsTUFBTyxDQUFDeEUsRUFBSXVFLEdBQVU3RSxFQUFLNkUsRUFBUzVFLEtBQUsyTixPQUFPL0ksRUFBU3hFLEdBQU9BLEVBQU13RSxFQUFRQyxHQVloRixTQUFTK0ksRUFBc0JDLEdBQzdCLE9BQU8sU0FBU2pKLEVBQVFDLEdBQ3RCLE1BQThCLEVBQXZCRCxHQUFVaUosR0FBdUI5TixFQUFLNkUsRUFBU3hFLEVBQU13RSxHQUFVN0UsRUFBSzZFLEVBQVN4RSxFQUFNd0UsRUFBUUMsSUFJdEcsU0FBU2lKLEVBQWVELEdBQ3RCLElBQUlFLEVBQVdILEVBQXNCQyxHQUVyQyxPQURBRSxFQUFTTixPQUFTRyxHQUF1QkMsR0FDbENFLEVBR1QsU0FBU0MsRUFBaUJDLEVBQVVDLEdBQ2xDLElBQUlDLEVBQWMsRUFBSUYsR0FDbEJHLEVBQWMsRUFBSUgsR0FDbEJJLEVBQWdCLEVBQUlILEdBQ3BCSSxFQUFnQixFQUFJSixHQUV4QixTQUFTSCxFQUFTbkosRUFBUUMsR0FDeEIsSUFBSUMsRUFBUyxFQUFJRCxHQUNiNUQsRUFBSSxFQUFJMkQsR0FBVUUsRUFDbEJ0RCxFQUFJLEVBQUlvRCxHQUFVRSxFQUNsQnBDLEVBQUksRUFBSW1DLEdBQ1JPLEVBQUkxQyxFQUFJeUwsRUFBY2xOLEVBQUltTixFQUM5QixNQUFPLENBQ0w3TixFQUFNaUIsRUFBSTZNLEVBQWdCakosRUFBSWtKLEVBQWVyTixFQUFJa04sRUFBY3pMLEVBQUkwTCxHQUNuRWpOLEVBQUtpRSxFQUFJaUosRUFBZ0I3TSxFQUFJOE0sSUFnQmpDLE9BWkFQLEVBQVNOLE9BQVMsU0FBUzdJLEVBQVFDLEdBQ2pDLElBQUlDLEVBQVMsRUFBSUQsR0FDYjVELEVBQUksRUFBSTJELEdBQVVFLEVBQ2xCdEQsRUFBSSxFQUFJb0QsR0FBVUUsRUFDbEJwQyxFQUFJLEVBQUltQyxHQUNSTyxFQUFJMUMsRUFBSTJMLEVBQWdCN00sRUFBSThNLEVBQ2hDLE1BQU8sQ0FDTC9OLEVBQU1pQixFQUFJNk0sRUFBZ0IzTCxFQUFJNEwsRUFBZXJOLEVBQUlrTixFQUFjL0ksRUFBSWdKLEdBQ25Fak4sRUFBS2lFLEVBQUkrSSxFQUFjbE4sRUFBSW1OLEtBSXhCTCxFQ3BERixTQUFTUSxFQUFZQyxHQUMxQixPQUFPLFNBQVNwTCxHQUNkLElBQUlxTCxFQUFJLElBQUlDLEVBQ1osSUFBSyxJQUFJQyxLQUFPSCxFQUFTQyxFQUFFRSxHQUFPSCxFQUFRRyxHQUUxQyxPQURBRixFQUFFckwsT0FBU0EsRUFDSnFMLEdBSVgsU0FBU0MsS0NmVCxTQUFTRSxFQUFlQyxFQUFVekwsR0FDNUJ5TCxHQUFZQyxHQUFtQkMsZUFBZUYsRUFBU0csT0FDekRGLEdBQW1CRCxFQUFTRyxNQUFNSCxFQUFVekwsR0ZLaERzSyxFQUFpQkQsT0FBU0MsRUNVMUJnQixFQUFnQk8sVUFBWSxDQUMxQkMsWUFBYVIsRUFDYm5OLE1BQU8sU0FBU04sRUFBR08sR0FBS2lCLEtBQUtXLE9BQU83QixNQUFNTixFQUFHTyxJQUM3QzBHLE9BQVEsV0FBYXpGLEtBQUtXLE9BQU84RSxVQUNqQ3ZHLFVBQVcsV0FBYWMsS0FBS1csT0FBT3pCLGFBQ3BDQyxRQUFTLFdBQWFhLEtBQUtXLE9BQU94QixXQUNsQzBFLGFBQWMsV0FBYTdELEtBQUtXLE9BQU9rRCxnQkFDdkNJLFdBQVksV0FBYWpFLEtBQUtXLE9BQU9zRCxlQ2xCdkMsSUFBSXlJLEVBQW1CLENBQ3JCQyxRQUFTLFNBQVNDLEVBQVFqTSxHQUN4QndMLEVBQWVTLEVBQU9SLFNBQVV6TCxJQUVsQ2tNLGtCQUFtQixTQUFTRCxFQUFRak0sR0FFbEMsSUFEQSxJQUFJbU0sRUFBV0YsRUFBT0UsU0FBVWxNLEdBQUssRUFBR1AsRUFBSXlNLEVBQVN6TixTQUM1Q3VCLEVBQUlQLEdBQUc4TCxFQUFlVyxFQUFTbE0sR0FBR3dMLFNBQVV6TCxLQUlyRDBMLEdBQXFCLENBQ3ZCVSxPQUFRLFNBQVNILEVBQVFqTSxHQUN2QkEsRUFBTzhFLFVBRVR1SCxNQUFPLFNBQVNKLEVBQVFqTSxHQUN0QmlNLEVBQVNBLEVBQU9LLFlBQ2hCdE0sRUFBTzdCLE1BQU04TixFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxLQUU1Q00sV0FBWSxTQUFTTixFQUFRak0sR0FFM0IsSUFEQSxJQUFJc00sRUFBY0wsRUFBT0ssWUFBYXJNLEdBQUssRUFBR1AsRUFBSTRNLEVBQVk1TixTQUNyRHVCLEVBQUlQLEdBQUd1TSxFQUFTSyxFQUFZck0sR0FBSUQsRUFBTzdCLE1BQU04TixFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxLQUVyRk8sV0FBWSxTQUFTUCxFQUFRak0sR0FDM0J5TSxHQUFXUixFQUFPSyxZQUFhdE0sRUFBUSxJQUV6QzBNLGdCQUFpQixTQUFTVCxFQUFRak0sR0FFaEMsSUFEQSxJQUFJc00sRUFBY0wsRUFBT0ssWUFBYXJNLEdBQUssRUFBR1AsRUFBSTRNLEVBQVk1TixTQUNyRHVCLEVBQUlQLEdBQUcrTSxHQUFXSCxFQUFZck0sR0FBSUQsRUFBUSxJQUVyRDJNLFFBQVMsU0FBU1YsRUFBUWpNLEdBQ3hCNE0sR0FBY1gsRUFBT0ssWUFBYXRNLElBRXBDNk0sYUFBYyxTQUFTWixFQUFRak0sR0FFN0IsSUFEQSxJQUFJc00sRUFBY0wsRUFBT0ssWUFBYXJNLEdBQUssRUFBR1AsRUFBSTRNLEVBQVk1TixTQUNyRHVCLEVBQUlQLEdBQUdrTixHQUFjTixFQUFZck0sR0FBSUQsSUFFaEQ4TSxtQkFBb0IsU0FBU2IsRUFBUWpNLEdBRW5DLElBREEsSUFBSStNLEVBQWFkLEVBQU9jLFdBQVk5TSxHQUFLLEVBQUdQLEVBQUlxTixFQUFXck8sU0FDbER1QixFQUFJUCxHQUFHOEwsRUFBZXVCLEVBQVc5TSxHQUFJRCxLQUlsRCxTQUFTeU0sR0FBV0gsRUFBYXRNLEVBQVFnTixHQUN2QyxJQUE2Q0MsRUFBekNoTixHQUFLLEVBQUdQLEVBQUk0TSxFQUFZNU4sT0FBU3NPLEVBRXJDLElBREFoTixFQUFPekIsY0FDRTBCLEVBQUlQLEdBQUd1TixFQUFhWCxFQUFZck0sR0FBSUQsRUFBTzdCLE1BQU04TyxFQUFXLEdBQUlBLEVBQVcsR0FBSUEsRUFBVyxJQUNuR2pOLEVBQU94QixVQUdULFNBQVNvTyxHQUFjTixFQUFhdE0sR0FDbEMsSUFBSUMsR0FBSyxFQUFHUCxFQUFJNE0sRUFBWTVOLE9BRTVCLElBREFzQixFQUFPa0QsaUJBQ0VqRCxFQUFJUCxHQUFHK00sR0FBV0gsRUFBWXJNLEdBQUlELEVBQVEsR0FDbkRBLEVBQU9zRCxhQUdNLFlBQVMySSxFQUFRak0sR0FDMUJpTSxHQUFVRixFQUFpQkosZUFBZU0sRUFBT0wsTUFDbkRHLEVBQWlCRSxFQUFPTCxNQUFNSyxFQUFRak0sR0FFdEN3TCxFQUFlUyxFQUFRak0sR0NoRTNCLElBQUlxSSxHQUFLNkUsSUFDTDVFLEdBQUtELEdBQ0xFLElBQU1GLEdBQ05HLEdBQUtELEdBc0JULFNBcEJtQixDQUNqQnBLLE1BWUYsU0FBcUJOLEVBQUdPLEdBQ2xCUCxFQUFJd0ssS0FBSUEsR0FBS3hLLEdBQ2JBLEVBQUkwSyxLQUFJQSxHQUFLMUssR0FDYk8sRUFBSWtLLEtBQUlBLEdBQUtsSyxHQUNiQSxFQUFJb0ssS0FBSUEsR0FBS3BLLElBZmpCRyxVQUFXUCxFQUNYUSxRQUFTUixFQUNUa0YsYUFBY2xGLEVBQ2RzRixXQUFZdEYsRUFDWmMsT0FBUSxXQUNOLElBQUlxTyxFQUFTLENBQUMsQ0FBQzlFLEdBQUlDLElBQUssQ0FBQ0MsR0FBSUMsS0FFN0IsT0FEQUQsR0FBS0MsS0FBT0YsR0FBS0QsR0FBSzZFLEtBQ2ZDLElDYlgsU0FBU0MsR0FBSUMsRUFBWUMsRUFBV3JCLEdBQ2xDLElBQUk5TCxFQUFPa04sRUFBV0UsWUFBY0YsRUFBV0UsYUFNL0MsT0FMQUYsRUFBV0csTUFBTSxLQUFLQyxVQUFVLENBQUMsRUFBRyxJQUN4QixNQUFSdE4sR0FBY2tOLEVBQVdFLFdBQVcsTUFDeEMsR0FBVXRCLEVBQVFvQixFQUFXck4sT0FBT21OLEtBQ3BDRyxFQUFVSCxHQUFBLFVBQ0UsTUFBUmhOLEdBQWNrTixFQUFXRSxXQUFXcE4sR0FDakNrTixFQUdGLFNBQVNLLEdBQVVMLEVBQVlNLEVBQVExQixHQUM1QyxPQUFPbUIsR0FBSUMsR0FBWSxTQUFTck8sR0FDOUIsSUFBSStILEVBQUk0RyxFQUFPLEdBQUcsR0FBS0EsRUFBTyxHQUFHLEdBQzdCQyxFQUFJRCxFQUFPLEdBQUcsR0FBS0EsRUFBTyxHQUFHLEdBQzdCM0wsRUFBSXBGLEtBQUttTixJQUFJaEQsR0FBSy9ILEVBQUUsR0FBRyxHQUFLQSxFQUFFLEdBQUcsSUFBSzRPLEdBQUs1TyxFQUFFLEdBQUcsR0FBS0EsRUFBRSxHQUFHLEtBQzFEbkIsR0FBSzhQLEVBQU8sR0FBRyxJQUFNNUcsRUFBSS9FLEdBQUtoRCxFQUFFLEdBQUcsR0FBS0EsRUFBRSxHQUFHLEtBQU8sRUFDcERaLEdBQUt1UCxFQUFPLEdBQUcsSUFBTUMsRUFBSTVMLEdBQUtoRCxFQUFFLEdBQUcsR0FBS0EsRUFBRSxHQUFHLEtBQU8sRUFDeERxTyxFQUFXRyxNQUFNLElBQU14TCxHQUFHeUwsVUFBVSxDQUFDNVAsRUFBR08sTUFDdkM2TixHQ2pCTCxJQUNJNEIsR0FBaUIsRUFBSSxHQUFLLEdBRWYsWUFBU0MsRUFBU0MsR0FDL0IsT0FBUUEsRUFZVixTQUFrQkQsRUFBU0MsR0FFekIsU0FBU0MsRUFBZTNGLEVBQUlDLEVBQUl6RSxFQUFTNEYsRUFBSUMsRUFBSWxDLEVBQUllLEVBQUlDLEVBQUl2RSxFQUFTd0UsRUFBSWtCLEVBQUlqRCxFQUFJdUgsRUFBT2pPLEdBQ3ZGLElBQUlrSyxFQUFLM0IsRUFBS0YsRUFDVjhCLEVBQUszQixFQUFLRixFQUNWNEYsRUFBS2hFLEVBQUtBLEVBQUtDLEVBQUtBLEVBQ3hCLEdBQUkrRCxFQUFLLEVBQUlILEdBQVVFLElBQVMsQ0FDOUIsSUFBSWxQLEVBQUkwSyxFQUFLaEIsRUFDVHpKLEVBQUkwSyxFQUFLQyxFQUNUL0IsRUFBSUosRUFBS2QsRUFDVHJJLEVBQUlQLEVBQUtpQixFQUFJQSxFQUFJQyxFQUFJQSxFQUFJNEksRUFBSUEsR0FDN0J1RyxFQUFPcFEsRUFBSzZKLEdBQUt2SixHQUNqQitQLEVBQVVuUixFQUFJQSxFQUFJMkssR0FBSyxHQUFLbEwsR0FBV08sRUFBSTRHLEVBQVVJLEdBQVd2SCxHQUFXbUgsRUFBVUksR0FBVyxFQUFJOUcsRUFBTTZCLEVBQUdELEdBQzdHWSxFQUFJbU8sRUFBUU0sRUFBU0QsR0FDckJFLEVBQUsxTyxFQUFFLEdBQ1AyTyxFQUFLM08sRUFBRSxHQUNQNE8sRUFBTUYsRUFBS2hHLEVBQ1htRyxFQUFNRixFQUFLaEcsRUFDWG1HLEVBQUt0RSxFQUFLb0UsRUFBTXJFLEVBQUtzRSxHQUNyQkMsRUFBS0EsRUFBS1AsRUFBS0gsR0FDWjlRLEdBQUtpTixFQUFLcUUsRUFBTXBFLEVBQUtxRSxHQUFPTixFQUFLLElBQU8sSUFDeEN6RSxFQUFLaEIsRUFBS2lCLEVBQUtDLEVBQUtuQyxFQUFLZCxFQUFLbUgsTUFDbkNHLEVBQWUzRixFQUFJQyxFQUFJekUsRUFBUzRGLEVBQUlDLEVBQUlsQyxFQUFJNkcsRUFBSUMsRUFBSUYsRUFBU3JQLEdBQUtWLEVBQUdXLEdBQUtYLEVBQUd1SixFQUFHcUcsRUFBT2pPLEdBQ3ZGQSxFQUFPN0IsTUFBTWtRLEVBQUlDLEdBQ2pCTixFQUFlSyxFQUFJQyxFQUFJRixFQUFTclAsRUFBR0MsRUFBRzRJLEVBQUdXLEVBQUlDLEVBQUl2RSxFQUFTd0UsRUFBSWtCLEVBQUlqRCxFQUFJdUgsRUFBT2pPLEtBSW5GLE9BQU8sU0FBU0EsR0FDZCxJQUFJME8sRUFBVUMsRUFBS0MsRUFBS0MsRUFBS0MsRUFBS0MsRUFDOUJsTCxFQUFTd0UsRUFBSUMsRUFBSW1CLEVBQUlDLEVBQUlsQyxFQUV6QndILEVBQWlCLENBQ25CN1EsTUFBT0EsRUFDUEksVUFBV0EsRUFDWEMsUUFBU0EsRUFDVDBFLGFBQWMsV0FBYWxELEVBQU9rRCxlQUFnQjhMLEVBQWV6USxVQUFZNkUsR0FDN0VFLFdBQVksV0FBYXRELEVBQU9zRCxhQUFjMEwsRUFBZXpRLFVBQVlBLElBRzNFLFNBQVNKLEVBQU1OLEVBQUdPLEdBQ2hCUCxFQUFJaVEsRUFBUWpRLEVBQUdPLEdBQ2Y0QixFQUFPN0IsTUFBTU4sRUFBRSxHQUFJQSxFQUFFLElBR3ZCLFNBQVNVLElBQ1A4SixFQUFLakQsSUFDTDRKLEVBQWU3USxNQUFRcUwsRUFDdkJ4SixFQUFPekIsWUFHVCxTQUFTaUwsRUFBVWhJLEVBQVFDLEdBQ3pCLElBQUltRyxFQUFJckcsRUFBVSxDQUFDQyxFQUFRQyxJQUFPOUIsRUFBSW1PLEVBQVF0TSxFQUFRQyxHQUN0RHVNLEVBQWUzRixFQUFJQyxFQUFJekUsRUFBUzRGLEVBQUlDLEVBQUlsQyxFQUFJYSxFQUFLMUksRUFBRSxHQUFJMkksRUFBSzNJLEVBQUUsR0FBSWtFLEVBQVVyQyxFQUFRaUksRUFBSzdCLEVBQUUsR0FBSThCLEVBQUs5QixFQUFFLEdBQUlKLEVBQUtJLEVBQUUsR0FyRXhHLEdBcUVzSDVILEdBQy9IQSxFQUFPN0IsTUFBTWtLLEVBQUlDLEdBR25CLFNBQVM5SixJQUNQd1EsRUFBZTdRLE1BQVFBLEVBQ3ZCNkIsRUFBT3hCLFVBR1QsU0FBUzRFLElBQ1A3RSxJQUNBeVEsRUFBZTdRLE1BQVE4USxFQUN2QkQsRUFBZXhRLFFBQVU2RSxFQUczQixTQUFTNEwsRUFBVXpOLEVBQVFDLEdBQ3pCK0gsRUFBVWtGLEVBQVdsTixFQUFRQyxHQUFNa04sRUFBTXRHLEVBQUl1RyxFQUFNdEcsRUFBSXVHLEVBQU1wRixFQUFJcUYsRUFBTXBGLEVBQUlxRixFQUFNdkgsRUFDakZ3SCxFQUFlN1EsTUFBUXFMLEVBR3pCLFNBQVNuRyxJQUNQMkssRUFBZTNGLEVBQUlDLEVBQUl6RSxFQUFTNEYsRUFBSUMsRUFBSWxDLEVBQUltSCxFQUFLQyxFQUFLRixFQUFVRyxFQUFLQyxFQUFLQyxFQTFGakUsR0EwRmdGL08sR0FDekZnUCxFQUFleFEsUUFBVUEsRUFDekJBLElBR0YsT0FBT3dRLEdBM0ZRLENBQVNsQixFQUFTQyxHQUdyQyxTQUFzQkQsR0FDcEIsT0FBTzNDLEVBQVksQ0FDakJoTixNQUFPLFNBQVNOLEVBQUdPLEdBQ2pCUCxFQUFJaVEsRUFBUWpRLEVBQUdPLEdBQ2ZpQixLQUFLVyxPQUFPN0IsTUFBTU4sRUFBRSxHQUFJQSxFQUFFLE9BUGVxUixDQUFhcEIsR0NHNUQsSUNJZ0NySyxHREo1QjBMLEdBQW1CaEUsRUFBWSxDQUNqQ2hOLE1BQU8sU0FBU04sRUFBR08sR0FDakJpQixLQUFLVyxPQUFPN0IsTUFBTU4sRUFBSSxFQUFTTyxFQUFJLE1Bd0J2QyxTQUFTZ1IsR0FBcUJwTixFQUFHa0ksRUFBSUMsRUFBSWtGLEVBQUlDLEVBQUlDLEdBQy9DLElBQUtBLEVBQU8sT0FaZCxTQUF3QnZOLEVBQUdrSSxFQUFJQyxFQUFJa0YsRUFBSUMsR0FDckMsU0FBU0UsRUFBVTNSLEVBQUdPLEdBRXBCLE1BQU8sQ0FBQzhMLEVBQUtsSSxHQURibkUsR0FBS3dSLEdBQ2VsRixFQUFLbkksR0FEaEI1RCxHQUFLa1IsSUFNaEIsT0FIQUUsRUFBVW5GLE9BQVMsU0FBU3hNLEVBQUdPLEdBQzdCLE1BQU8sRUFBRVAsRUFBSXFNLEdBQU1sSSxFQUFJcU4sR0FBS2xGLEVBQUsvTCxHQUFLNEQsRUFBSXNOLElBRXJDRSxFQUlZQyxDQUFlek4sRUFBR2tJLEVBQUlDLEVBQUlrRixFQUFJQyxHQUNqRCxJQUFJSSxFQUFXLEVBQUlILEdBQ2ZJLEVBQVcsRUFBSUosR0FDZnhRLEVBQUkyUSxFQUFXMU4sRUFDZmhELEVBQUkyUSxFQUFXM04sRUFDZjROLEVBQUtGLEVBQVcxTixFQUNoQjZOLEVBQUtGLEVBQVczTixFQUNoQjhOLEdBQU1ILEVBQVd4RixFQUFLdUYsRUFBV3hGLEdBQU1sSSxFQUN2QytOLEdBQU1KLEVBQVd6RixFQUFLd0YsRUFBV3ZGLEdBQU1uSSxFQUMzQyxTQUFTd04sRUFBVTNSLEVBQUdPLEdBRXBCLE1BQU8sQ0FBQ1csR0FEUmxCLEdBQUt3UixHQUNXclEsR0FEUFosR0FBS2tSLEdBQ1VwRixFQUFJQyxFQUFLbkwsRUFBSW5CLEVBQUlrQixFQUFJWCxHQUsvQyxPQUhBb1IsRUFBVW5GLE9BQVMsU0FBU3hNLEVBQUdPLEdBQzdCLE1BQU8sQ0FBQ2lSLEdBQU1PLEVBQUsvUixFQUFJZ1MsRUFBS3pSLEVBQUkwUixHQUFLUixHQUFNUyxFQUFLRixFQUFLaFMsRUFBSStSLEVBQUt4UixLQUV6RG9SLEVBR00sU0FBU25DLEdBQVdTLEdBQ2pDLE9BR0ssU0FBMkJrQyxHQUNoQyxJQUFJbEMsRUFJK0NtQyxFQUtwQzNILEVBQUlDLEVBQUlDLEVBRW5CMEgsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFkQXRPLEVBQUksSUFDSm5FLEVBQUksSUFBS08sRUFBSSxJQUNib0QsRUFBUyxFQUFHQyxFQUFNLEVBQ2xCZ0osRUFBYyxFQUFHSSxFQUFXLEVBQUdDLEVBQWEsRUFDNUN5RSxFQUFRLEVBQ1JGLEVBQUssRUFDTEMsRUFBSyxFQUNMaUIsRUFBUSxLQUFNQyxFQUFVLEVBQ3hCbkksRUFBSyxLQUFrQm9JLEVBQVdDLEVBQ2xDM0MsRUFBUyxHQU9iLFNBQVNWLEVBQVdsUCxHQUNsQixPQUFPaVMsRUFBdUJqUyxFQUFNLEdBQUssRUFBU0EsRUFBTSxHQUFLLEdBRy9ELFNBQVNrTSxFQUFPbE0sR0FFZCxPQURBQSxFQUFRaVMsRUFBdUIvRixPQUFPbE0sRUFBTSxHQUFJQSxFQUFNLE1BQ3RDLENBQUNBLEVBQU0sR0FBSyxFQUFTQSxFQUFNLEdBQUssR0F1RWxELFNBQVN3UyxJQUNQLElBQUlDLEVBQVN4QixHQUFxQnBOLEVBQUcsRUFBRyxFQUFHcU4sRUFBSUMsRUFBSUMsR0FBT3NCLE1BQU0sS0FBTS9DLEVBQVF0TSxFQUFRQyxJQUNsRitOLEVBQVlKLEdBQXFCcE4sRUFBR25FLEVBQUkrUyxFQUFPLEdBQUl4UyxFQUFJd1MsRUFBTyxHQUFJdkIsRUFBSUMsRUFBSUMsR0FLOUUsT0FKQVUsRU50SkcsU0FBdUJ4RixFQUFhSSxFQUFVQyxHQUNuRCxPQUFRTCxHQUFlek4sR0FBUTZOLEdBQVlDLEVBQWFWLEVBQVFNLEVBQWVELEdBQWNHLEVBQWlCQyxFQUFVQyxJQUNwSEosRUFBZUQsR0FDZEksR0FBWUMsRUFBYUYsRUFBaUJDLEVBQVVDLEdBQ3JEUixFTWtKTyxDQUFjRyxFQUFhSSxFQUFVQyxHQUM5Q3FGLEVBQW1CL0YsRUFBUTBELEVBQVMwQixHQUNwQ1ksRUFBeUJoRyxFQUFRNkYsRUFBUUUsR0FDekNELEVBQWtCWSxHQUFTWCxFQUFrQnBDLEdBQ3RDZ0QsSUFHVCxTQUFTQSxJQUVQLE9BREFWLEVBQVFDLEVBQWMsS0FDZmpELEVBR1QsT0FuRkFBLEVBQVdyTixPQUFTLFNBQVNBLEdBQzNCLE9BQU9xUSxHQUFTQyxJQUFnQnRRLEVBQVNxUSxFQUFRQSxFQUFRbEIsR0F4RTdELFNBQXlCYyxHQUN2QixPQUFPOUUsRUFBWSxDQUNqQmhOLE1BQU8sU0FBU04sRUFBR08sR0FDakIsSUFBSW1KLEVBQUkwSSxFQUFPcFMsRUFBR08sR0FDbEIsT0FBT2lCLEtBQUtXLE9BQU83QixNQUFNb0osRUFBRSxHQUFJQSxFQUFFLE9Bb0V1Q3lKLENBQWdCZixFQUFoQmUsQ0FBd0JSLEVBQVFOLEVBQWdCTyxFQUFTSCxFQUFjdFEsUUFHbkpxTixFQUFXbUQsUUFBVSxTQUFTUyxHQUM1QixPQUFPQyxVQUFVeFMsUUFBVThSLEVBQVVTLEVBQUdWLE9BQVFZLEVBQVdKLEtBQVdQLEdBR3hFbkQsRUFBV29ELFNBQVcsU0FBU1EsR0FDN0IsT0FBT0MsVUFBVXhTLFFBQVUrUixFQUFXUSxFQUFHNUksRUFBS0MsRUFBS0MsRUFBS0MsRUFBSyxLQUFNdUksS0FBV04sR0FHaEZwRCxFQUFXK0QsVUFBWSxTQUFTSCxHQUM5QixPQUFPQyxVQUFVeFMsUUFBVThSLEdBQVdTLEVBQUksRUFBV1YsRUFBUVUsRUFBSSxJQUFZVixFQUFRLEtBQU0sR0FBbUJRLEtBQVdSLEVBQVEsR0FHbklsRCxFQUFXRSxXQUFhLFNBQVMwRCxHQUMvQixPQUFPQyxVQUFVeFMsUUFBVStSLEVBQWdCLE1BQUxRLEdBQWE1SSxFQUFLQyxFQUFLQyxFQUFLQyxFQUFLLEtBQU1rSSxHQUFZdEksRUFBY0MsR0FBTTRJLEVBQUUsR0FBRyxHQUFJM0ksR0FBTTJJLEVBQUUsR0FBRyxHQUFJMUksR0FBTTBJLEVBQUUsR0FBRyxHQUFJekksR0FBTXlJLEVBQUUsR0FBRyxJQUFLRixLQUFpQixNQUFOMUksRUFBYSxLQUFPLENBQUMsQ0FBQ0EsRUFBSUMsR0FBSyxDQUFDQyxFQUFJQyxLQUdyTjZFLEVBQVdHLE1BQVEsU0FBU3lELEdBQzFCLE9BQU9DLFVBQVV4UyxRQUFVc0QsR0FBS2lQLEVBQUdOLEtBQWMzTyxHQUduRHFMLEVBQVdJLFVBQVksU0FBU3dELEdBQzlCLE9BQU9DLFVBQVV4UyxRQUFVYixHQUFLb1QsRUFBRSxHQUFJN1MsR0FBSzZTLEVBQUUsR0FBSU4sS0FBYyxDQUFDOVMsRUFBR08sSUFHckVpUCxFQUFXdUQsT0FBUyxTQUFTSyxHQUMzQixPQUFPQyxVQUFVeFMsUUFBVThDLEVBQVN5UCxFQUFFLEdBQUssSUFBTSxFQUFTeFAsRUFBTXdQLEVBQUUsR0FBSyxJQUFNLEVBQVNOLEtBQWMsQ0FBQ25QLEVBQVMsRUFBU0MsRUFBTSxJQUcvSDRMLEVBQVc0QyxPQUFTLFNBQVNnQixHQUMzQixPQUFPQyxVQUFVeFMsUUFBVStMLEVBQWN3RyxFQUFFLEdBQUssSUFBTSxFQUFTcEcsRUFBV29HLEVBQUUsR0FBSyxJQUFNLEVBQVNuRyxFQUFhbUcsRUFBRXZTLE9BQVMsRUFBSXVTLEVBQUUsR0FBSyxJQUFNLEVBQVUsRUFBR04sS0FBYyxDQUFDbEcsRUFBYyxFQUFTSSxFQUFXLEVBQVNDLEVBQWEsSUFHL051QyxFQUFXNUosTUFBUSxTQUFTd04sR0FDMUIsT0FBT0MsVUFBVXhTLFFBQVU2USxFQUFRMEIsRUFBSSxJQUFNLEVBQVNOLEtBQWNwQixFQUFRLEdBRzlFbEMsRUFBV2dFLFNBQVcsU0FBU0osR0FDN0IsT0FBT0MsVUFBVXhTLFFBQVUyUSxFQUFLNEIsR0FBSyxFQUFJLEVBQUdOLEtBQWN0QixFQUFLLEdBR2pFaEMsRUFBV2lFLFNBQVcsU0FBU0wsR0FDN0IsT0FBT0MsVUFBVXhTLFFBQVU0USxFQUFLMkIsR0FBSyxFQUFJLEVBQUdOLEtBQWNyQixFQUFLLEdBR2pFakMsRUFBV2tFLFVBQVksU0FBU04sR0FDOUIsT0FBT0MsVUFBVXhTLFFBQVV3UixFQUFrQlksR0FBU1gsRUFBa0JwQyxFQUFTa0QsRUFBSUEsR0FBSUYsS0FBV2pULEVBQUtpUSxJQUczR1YsRUFBV0ssVUFBWSxTQUFTQyxFQUFRMUIsR0FDdEMsT0FBT3lCLEdBQVVMLEVBQVlNLEVBQVExQixJQUd2Q29CLEVBQVdtRSxRQUFVLFNBQVNDLEVBQU14RixHQUNsQyxPRnpIRyxTQUFpQm9CLEVBQVlvRSxFQUFNeEYsR0FDeEMsT0FBT3lCLEdBQVVMLEVBQVksQ0FBQyxDQUFDLEVBQUcsR0FBSW9FLEdBQU94RixHRXdIcEN1RixDQUFRbkUsRUFBWW9FLEVBQU14RixJQUduQ29CLEVBQVdxRSxTQUFXLFNBQVNDLEVBQU8xRixHQUNwQyxPRnpIRyxTQUFrQm9CLEVBQVlzRSxFQUFPMUYsR0FDMUMsT0FBT21CLEdBQUlDLEdBQVksU0FBU3JPLEdBQzlCLElBQUkrSCxHQUFLNEssRUFDTDNQLEVBQUkrRSxHQUFLL0gsRUFBRSxHQUFHLEdBQUtBLEVBQUUsR0FBRyxJQUN4Qm5CLEdBQUtrSixFQUFJL0UsR0FBS2hELEVBQUUsR0FBRyxHQUFLQSxFQUFFLEdBQUcsS0FBTyxFQUNwQ1osR0FBSzRELEVBQUloRCxFQUFFLEdBQUcsR0FDbEJxTyxFQUFXRyxNQUFNLElBQU14TCxHQUFHeUwsVUFBVSxDQUFDNVAsRUFBR08sTUFDdkM2TixHRWtITXlGLENBQVNyRSxFQUFZc0UsRUFBTzFGLElBR3JDb0IsRUFBV3VFLFVBQVksU0FBU0MsRUFBUTVGLEdBQ3RDLE9GbkhHLFNBQW1Cb0IsRUFBWXdFLEVBQVE1RixHQUM1QyxPQUFPbUIsR0FBSUMsR0FBWSxTQUFTck8sR0FDOUIsSUFBSTRPLEdBQUtpRSxFQUNMN1AsRUFBSTRMLEdBQUs1TyxFQUFFLEdBQUcsR0FBS0EsRUFBRSxHQUFHLElBQ3hCbkIsR0FBS21FLEVBQUloRCxFQUFFLEdBQUcsR0FDZFosR0FBS3dQLEVBQUk1TCxHQUFLaEQsRUFBRSxHQUFHLEdBQUtBLEVBQUUsR0FBRyxLQUFPLEVBQ3hDcU8sRUFBV0csTUFBTSxJQUFNeEwsR0FBR3lMLFVBQVUsQ0FBQzVQLEVBQUdPLE1BQ3ZDNk4sR0U0R00yRixDQUFVdkUsRUFBWXdFLEVBQVE1RixJQWtCaEMsV0FHTCxPQUZBNkIsRUFBVWtDLEVBQVVhLE1BQU14UixLQUFNNlIsV0FDaEM3RCxFQUFXaEQsT0FBU3lELEVBQVF6RCxRQUFVQSxFQUMvQnNHLEtBcEhGbUIsRUFBa0IsV0FBYSxPQUFPaEUsSUFBdENnRSxHRXRERixTQUFTQyxHQUFnQmxVLEVBQUdPLEdBQ2pDLE1BQU8sQ0FBQyxFQUFJQSxHQUFLLEVBQUlQLEdBQUksRUFBSU8sSUFLaEIsY0FDYixPQUFPaVAsR0FBVzBFLElBQ2J2RSxNQUFNLE9BQ040RCxVQUFVLFdBTGpCVyxHQUFnQjFILFFET2dCNUcsR0NQUzFGLEVEUWhDLFNBQVNGLEVBQUdPLEdBQ2pCLElBQUlrQixFQUFJeEIsRUFBS0QsRUFBSUEsRUFBSU8sRUFBSUEsR0FDckJ3SixFQUFJbkUsR0FBTW5FLEdBQ1YwUyxFQUFLLEVBQUlwSyxHQUNUcUssRUFBSyxFQUFJckssR0FDYixNQUFPLENBQ0x6SyxFQUFNVSxFQUFJbVUsRUFBSTFTLEVBQUkyUyxHQUNsQmxVLEVBQUt1QixHQUFLbEIsRUFBSTRULEVBQUsxUyxNRW5CekIsSUFFSXFQLEdBQ0FDLEdBQ0EsR0FDQSxHQUxBc0QsR0FBVSxJQUFJblIsRUFDZG9SLEdBQWMsSUFBSXBSLEVBTWxCcVIsR0FBYSxDQUNmalUsTUFBT0gsRUFDUE8sVUFBV1AsRUFDWFEsUUFBU1IsRUFDVGtGLGFBQWMsV0FDWmtQLEdBQVc3VCxVQUFZOFQsR0FDdkJELEdBQVc1VCxRQUFVOFQsSUFFdkJoUCxXQUFZLFdBQ1Y4TyxHQUFXN1QsVUFBWTZULEdBQVc1VCxRQUFVNFQsR0FBV2pVLE1BQVFILEVBQy9Ea1UsR0FBUXpOLElBQUl4SCxFQUFJa1YsS0FDaEJBLEdBQWMsSUFBSXBSLEdBRXBCakMsT0FBUSxXQUNOLElBQUl5VCxFQUFPTCxHQUFVLEVBRXJCLE9BREFBLEdBQVUsSUFBSW5SLEVBQ1B3UixJQUlYLFNBQVNGLEtBQ1BELEdBQVdqVSxNQUFRcVUsR0FHckIsU0FBU0EsR0FBZTNVLEVBQUdPLEdBQ3pCZ1UsR0FBV2pVLE1BQVFzVSxHQUNuQjlELEdBQU0sR0FBSzlRLEVBQUcrUSxHQUFNLEdBQUt4USxFQUczQixTQUFTcVUsR0FBVTVVLEVBQUdPLEdBQ3BCK1QsR0FBWTFOLElBQUksR0FBSzVHLEVBQUksR0FBS08sR0FDOUIsR0FBS1AsRUFBRyxHQUFLTyxFQUdmLFNBQVNrVSxLQUNQRyxHQUFVOUQsR0FBS0MsSUFHakIsWUM3Q0EsSUFTSSxHQUNBLEdBQ0EsR0FDQSxHQVpBOEQsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLEdBQUssRUFDTEMsR0FBSyxFQUNMQyxHQUFLLEVBQ0xDLEdBQUssRUFNTEMsR0FBaUIsQ0FDbkJoVixNQUFPaVYsR0FDUDdVLFVBQVc4VSxHQUNYN1UsUUFBUzhVLEdBQ1RwUSxhQUFjLFdBQ1ppUSxHQUFlNVUsVUFBWWdWLEdBQzNCSixHQUFlM1UsUUFBVWdWLElBRTNCbFEsV0FBWSxXQUNWNlAsR0FBZWhWLE1BQVFpVixHQUN2QkQsR0FBZTVVLFVBQVk4VSxHQUMzQkYsR0FBZTNVLFFBQVU4VSxJQUUzQnhVLE9BQVEsV0FDTixJQUFJMlUsRUFBV1AsR0FBSyxDQUFDRixHQUFLRSxHQUFJRCxHQUFLQyxJQUM3QkgsR0FBSyxDQUFDRixHQUFLRSxHQUFJRCxHQUFLQyxJQUNwQkgsR0FBSyxDQUFDRixHQUFLRSxHQUFJRCxHQUFLQyxJQUNwQixDQUFDeE4sSUFBS0EsS0FJWixPQUhBc04sR0FBS0MsR0FBS0MsR0FDVkMsR0FBS0MsR0FBS0MsR0FDVkMsR0FBS0MsR0FBS0MsR0FBSyxFQUNSTyxJQUlYLFNBQVNMLEdBQWN2VixFQUFHTyxHQUN4QnNVLElBQU03VSxFQUNOOFUsSUFBTXZVLElBQ0p3VSxHQUdKLFNBQVNTLEtBQ1BGLEdBQWVoVixNQUFRdVYsR0FHekIsU0FBU0EsR0FBdUI3VixFQUFHTyxHQUNqQytVLEdBQWVoVixNQUFRd1YsR0FDdkJQLEdBQWMsR0FBS3ZWLEVBQUcsR0FBS08sR0FHN0IsU0FBU3VWLEdBQWtCOVYsRUFBR08sR0FDNUIsSUFBSThMLEVBQUtyTSxFQUFJLEdBQUlzTSxFQUFLL0wsRUFBSSxHQUFJa0IsRUFBSXhCLEVBQUtvTSxFQUFLQSxFQUFLQyxFQUFLQSxHQUN0RDBJLElBQU12VCxHQUFLLEdBQUt6QixHQUFLLEVBQ3JCaVYsSUFBTXhULEdBQUssR0FBS2xCLEdBQUssRUFDckIyVSxJQUFNelQsRUFDTjhULEdBQWMsR0FBS3ZWLEVBQUcsR0FBS08sR0FHN0IsU0FBU2tWLEtBQ1BILEdBQWVoVixNQUFRaVYsR0FHekIsU0FBU0csS0FDUEosR0FBZWhWLE1BQVF5VixHQUd6QixTQUFTSixLQUNQSyxHQUFrQixHQUFLLElBR3pCLFNBQVNELEdBQXVCL1YsRUFBR08sR0FDakMrVSxHQUFlaFYsTUFBUTBWLEdBQ3ZCVCxHQUFjLEdBQU0sR0FBS3ZWLEVBQUcsR0FBTSxHQUFLTyxHQUd6QyxTQUFTeVYsR0FBa0JoVyxFQUFHTyxHQUM1QixJQUFJOEwsRUFBS3JNLEVBQUksR0FDVHNNLEVBQUsvTCxFQUFJLEdBQ1RrQixFQUFJeEIsRUFBS29NLEVBQUtBLEVBQUtDLEVBQUtBLEdBRTVCMEksSUFBTXZULEdBQUssR0FBS3pCLEdBQUssRUFDckJpVixJQUFNeFQsR0FBSyxHQUFLbEIsR0FBSyxFQUNyQjJVLElBQU16VCxFQUdOMFQsS0FEQTFULEVBQUksR0FBS3pCLEVBQUksR0FBS08sSUFDUCxHQUFLUCxHQUNoQm9WLElBQU0zVCxHQUFLLEdBQUtsQixHQUNoQjhVLElBQVUsRUFBSjVULEVBQ044VCxHQUFjLEdBQUt2VixFQUFHLEdBQUtPLEdBRzdCLFlDaEdlLFNBQVMwVixHQUFZQyxHQUNsQzFVLEtBQUsyVSxTQUFXRCxFQUdsQkQsR0FBWWpJLFVBQVksQ0FDdEJvSSxRQUFTLElBQ1RDLFlBQWEsU0FBU2pELEdBQ3BCLE9BQU81UixLQUFLNFUsUUFBVWhELEVBQUc1UixNQUUzQjZELGFBQWMsV0FDWjdELEtBQUs4VSxNQUFRLEdBRWY3USxXQUFZLFdBQ1ZqRSxLQUFLOFUsTUFBUS9PLEtBRWY3RyxVQUFXLFdBQ1RjLEtBQUsrVSxPQUFTLEdBRWhCNVYsUUFBUyxXQUNZLElBQWZhLEtBQUs4VSxPQUFhOVUsS0FBSzJVLFNBQVNLLFlBQ3BDaFYsS0FBSytVLE9BQVNoUCxLQUVoQmpILE1BQU8sU0FBU04sRUFBR08sR0FDakIsT0FBUWlCLEtBQUsrVSxRQUNYLEtBQUssRUFDSC9VLEtBQUsyVSxTQUFTTSxPQUFPelcsRUFBR08sR0FDeEJpQixLQUFLK1UsT0FBUyxFQUNkLE1BRUYsS0FBSyxFQUNIL1UsS0FBSzJVLFNBQVNPLE9BQU8xVyxFQUFHTyxHQUN4QixNQUVGLFFBQ0VpQixLQUFLMlUsU0FBU00sT0FBT3pXLEVBQUl3QixLQUFLNFUsUUFBUzdWLEdBQ3ZDaUIsS0FBSzJVLFNBQVN0UCxJQUFJN0csRUFBR08sRUFBR2lCLEtBQUs0VSxRQUFTLEVBQUdqWCxLQUsvQzhCLE9BQVFkLEdDdkNWLElBQ0l3VyxHQUNBLEdBQ0EsR0FDQSxHQUNBLEdBTEFDLEdBQVksSUFBSTFULEVBT2hCMlQsR0FBZSxDQUNqQnZXLE1BQU9ILEVBQ1BPLFVBQVcsV0FDVG1XLEdBQWF2VyxNQUFRd1csSUFFdkJuVyxRQUFTLFdBQ0hnVyxJQUFZSSxHQUFZLEdBQUssSUFDakNGLEdBQWF2VyxNQUFRSCxHQUV2QmtGLGFBQWMsV0FDWnNSLElBQWEsR0FFZmxSLFdBQVksV0FDVmtSLEdBQWEsTUFFZjFWLE9BQVEsV0FDTixJQUFJSixHQUFVK1YsR0FFZCxPQURBQSxHQUFZLElBQUkxVCxFQUNUckMsSUFJWCxTQUFTaVcsR0FBaUI5VyxFQUFHTyxHQUMzQnNXLEdBQWF2VyxNQUFReVcsR0FDckIsR0FBTSxHQUFLL1csRUFBRyxHQUFNLEdBQUtPLEVBRzNCLFNBQVN3VyxHQUFZL1csRUFBR08sR0FDdEIsSUFBTVAsRUFBRyxJQUFNTyxFQUNmcVcsR0FBVWhRLElBQUkzRyxFQUFLLEdBQUssR0FBSyxHQUFLLEtBQ2xDLEdBQUtELEVBQUcsR0FBS08sRUFHZixZQzVDZSxTQUFTeVcsS0FDdEJ4VixLQUFLeVYsUUFBVSxHQW9EakIsU0FBUyxHQUFPalAsR0FDZCxNQUFPLE1BQVFBLEVBQ1QsSUFBTUEsRUFBUyxJQUFNQSxFQUFTLGFBQWUsRUFBSUEsRUFDakQsSUFBTUEsRUFBUyxJQUFNQSxFQUFTLFlBQWMsRUFBSUEsRUFDaEQsSUFyRFJnUCxHQUFXaEosVUFBWSxDQUNyQm9JLFFBQVMsSUFDVGMsUUFBUyxHQUFPLEtBQ2hCYixZQUFhLFNBQVNqRCxHQUVwQixPQURLQSxHQUFLQSxLQUFPNVIsS0FBSzRVLFVBQVM1VSxLQUFLNFUsUUFBVWhELEVBQUc1UixLQUFLMFYsUUFBVSxNQUN6RDFWLE1BRVQ2RCxhQUFjLFdBQ1o3RCxLQUFLOFUsTUFBUSxHQUVmN1EsV0FBWSxXQUNWakUsS0FBSzhVLE1BQVEvTyxLQUVmN0csVUFBVyxXQUNUYyxLQUFLK1UsT0FBUyxHQUVoQjVWLFFBQVMsV0FDWSxJQUFmYSxLQUFLOFUsT0FBYTlVLEtBQUt5VixRQUFReFcsS0FBSyxLQUN4Q2UsS0FBSytVLE9BQVNoUCxLQUVoQmpILE1BQU8sU0FBU04sRUFBR08sR0FDakIsT0FBUWlCLEtBQUsrVSxRQUNYLEtBQUssRUFDSC9VLEtBQUt5VixRQUFReFcsS0FBSyxJQUFLVCxFQUFHLElBQUtPLEdBQy9CaUIsS0FBSytVLE9BQVMsRUFDZCxNQUVGLEtBQUssRUFDSC9VLEtBQUt5VixRQUFReFcsS0FBSyxJQUFLVCxFQUFHLElBQUtPLEdBQy9CLE1BRUYsUUFDc0IsTUFBaEJpQixLQUFLMFYsVUFBaUIxVixLQUFLMFYsUUFBVSxHQUFPMVYsS0FBSzRVLFVBQ3JENVUsS0FBS3lWLFFBQVF4VyxLQUFLLElBQUtULEVBQUcsSUFBS08sRUFBR2lCLEtBQUswVixXQUs3Q2pXLE9BQVEsV0FDTixHQUFJTyxLQUFLeVYsUUFBUXBXLE9BQVEsQ0FDdkIsSUFBSUksRUFBU08sS0FBS3lWLFFBQVFFLEtBQUssSUFFL0IsT0FEQTNWLEtBQUt5VixRQUFVLEdBQ1JoVyxFQUVQLE9BQU8sT0NoRGIsSUFBSW1XLEdBQU1yWSxLQUFLa0IsS0FBSyxJQUNoQm9YLEdBQUt0WSxLQUFLa0IsS0FBSyxJQUNmcVgsR0FBS3ZZLEtBQUtrQixLQUFLLEdBZ0NaLFNBQVNzWCxHQUFjMVUsRUFBTzJVLEVBQU1DLEdBQ3pDLElBQUl0TixHQUFRcU4sRUFBTzNVLEdBQVM5RCxLQUFLa04sSUFBSSxFQUFHd0wsR0FDcENDLEVBQVEzWSxLQUFLVyxNQUFNWCxLQUFLYSxJQUFJdUssR0FBUXBMLEtBQUs0WSxNQUN6Q0MsRUFBUXpOLEVBQU9wTCxLQUFLYyxJQUFJLEdBQUk2WCxHQUNoQyxPQUFPQSxHQUFTLEdBQ1RFLEdBQVNSLEdBQU0sR0FBS1EsR0FBU1AsR0FBSyxFQUFJTyxHQUFTTixHQUFLLEVBQUksR0FBS3ZZLEtBQUtjLElBQUksR0FBSTZYLElBQzFFM1ksS0FBS2MsSUFBSSxJQUFLNlgsSUFBVUUsR0FBU1IsR0FBTSxHQUFLUSxHQUFTUCxHQUFLLEVBQUlPLEdBQVNOLEdBQUssRUFBSSxHQ3hDMUUsWUFBU3BXLEVBQUdDLEdBQ3pCLE9BQU9ELEVBQUlDLEdBQUssRUFBSUQsRUFBSUMsRUFBSSxFQUFJRCxHQUFLQyxFQUFJLEVBQUlvRyxJQ0NoQyxZQUFTc1EsR0FDdEIsSUFBSXBSLEVBQVFvUixFQUNSQyxFQUFVRCxFQU9kLFNBQVNFLEVBQUs3VyxFQUFHbEIsRUFBR3dELEVBQUlELEdBR3RCLElBRlUsTUFBTkMsSUFBWUEsRUFBSyxHQUNYLE1BQU5ELElBQVlBLEVBQUtyQyxFQUFFTCxRQUNoQjJDLEVBQUtELEdBQUksQ0FDZCxNQUFNeVUsRUFBT3hVLEVBQUtELElBQVEsRUFDdEJ1VSxFQUFRNVcsRUFBRThXLEdBQU1oWSxHQUFLLEVBQUd3RCxFQUFLd1UsRUFBTSxFQUNsQ3pVLEVBQUt5VSxFQUVaLE9BQU94VSxFQXFCVCxPQWxDaUIsSUFBYnFVLEVBQUVoWCxTQUNKNEYsRUFBUSxDQUFDcEMsRUFBR3JFLElBQU02WCxFQUFFeFQsR0FBS3JFLEVBQ3pCOFgsRUFtQ0osU0FBNkJELEdBQzNCLE1BQU8sQ0FBQ3hULEVBQUdyRSxJQUFNaVksR0FBVUosRUFBRXhULEdBQUlyRSxHQXBDckJrWSxDQUFvQkwsSUFnQ3pCLENBQUNFLE9BQU1oRixPQVBkLFNBQWdCN1IsRUFBR2xCLEVBQUd3RCxFQUFJRCxHQUNkLE1BQU5DLElBQVlBLEVBQUssR0FDWCxNQUFORCxJQUFZQSxFQUFLckMsRUFBRUwsUUFDdkIsTUFBTXVCLEVBQUkyVixFQUFLN1csRUFBR2xCLEVBQUd3RCxFQUFJRCxFQUFLLEdBQzlCLE9BQU9uQixFQUFJb0IsR0FBTWlELEVBQU12RixFQUFFa0IsRUFBSSxHQUFJcEMsSUFBTXlHLEVBQU12RixFQUFFa0IsR0FBSXBDLEdBQUtvQyxFQUFJLEVBQUlBLEdBRzVDK1YsTUFsQnRCLFNBQWVqWCxFQUFHbEIsRUFBR3dELEVBQUlELEdBR3ZCLElBRlUsTUFBTkMsSUFBWUEsRUFBSyxHQUNYLE1BQU5ELElBQVlBLEVBQUtyQyxFQUFFTCxRQUNoQjJDLEVBQUtELEdBQUksQ0FDZCxNQUFNeVUsRUFBT3hVLEVBQUtELElBQVEsRUFDdEJ1VSxFQUFRNVcsRUFBRThXLEdBQU1oWSxHQUFLLEVBQUd1RCxFQUFLeVUsRUFDNUJ4VSxFQUFLd1UsRUFBTSxFQUVsQixPQUFPeFUsSUMxQlgsTUFBTTRVLEdBQWtCQyxHQUFTSixJQUNwQkssR0FBY0YsR0FBZ0JELE1BRzNDLElBRjBCQyxHQUFnQkwsS0FDZE0sSUNQYixTQUFTclksR0FDdEIsT0FBYSxPQUFOQSxFQUFhdUgsS0FBT3ZILEtETWdCK1MsT0FDN0MsSUVSZSxZQUFTOUUsRUFBYXNLLEVBQVN2SyxHQUM1Q0MsRUFBWUQsVUFBWXVLLEVBQVF2SyxVQUFZQSxFQUM1Q0EsRUFBVUMsWUFBY0EsRUFHbkIsU0FBU3VLLEdBQU9DLEVBQVFDLEdBQzdCLElBQUkxSyxFQUFZMkssT0FBT0MsT0FBT0gsRUFBT3pLLFdBQ3JDLElBQUssSUFBSU4sS0FBT2dMLEVBQVkxSyxFQUFVTixHQUFPZ0wsRUFBV2hMLEdBQ3hELE9BQU9NLEVDTkYsU0FBUzZLLE1BRVQsSUFBSUMsR0FBUyxHQUNUQyxHQUFXLEVBQUlELEdBRXRCRSxHQUFNLHNCQUNOQyxHQUFNLGdEQUNOQyxHQUFNLGlEQUNOQyxHQUFRLHFCQUNSQyxHQUFlLElBQUlDLE9BQU8sVUFBWSxDQUFDTCxHQUFLQSxHQUFLQSxJQUFPLFFBQ3hETSxHQUFlLElBQUlELE9BQU8sVUFBWSxDQUFDSCxHQUFLQSxHQUFLQSxJQUFPLFFBQ3hESyxHQUFnQixJQUFJRixPQUFPLFdBQWEsQ0FBQ0wsR0FBS0EsR0FBS0EsR0FBS0MsSUFBTyxRQUMvRE8sR0FBZ0IsSUFBSUgsT0FBTyxXQUFhLENBQUNILEdBQUtBLEdBQUtBLEdBQUtELElBQU8sUUFDL0RRLEdBQWUsSUFBSUosT0FBTyxVQUFZLENBQUNKLEdBQUtDLEdBQUtBLElBQU8sUUFDeERRLEdBQWdCLElBQUlMLE9BQU8sV0FBYSxDQUFDSixHQUFLQyxHQUFLQSxHQUFLRCxJQUFPLFFBRS9EVSxHQUFRLENBQ1ZDLFVBQVcsU0FDWEMsYUFBYyxTQUNkQyxLQUFNLE1BQ05DLFdBQVksUUFDWkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLE9BQVEsU0FDUkMsTUFBTyxFQUNQQyxlQUFnQixTQUNoQkMsS0FBTSxJQUNOQyxXQUFZLFFBQ1pDLE1BQU8sU0FDUEMsVUFBVyxTQUNYQyxVQUFXLFFBQ1hDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxNQUFPLFNBQ1BDLGVBQWdCLFFBQ2hCQyxTQUFVLFNBQ1ZDLFFBQVMsU0FDVEMsS0FBTSxNQUNOQyxTQUFVLElBQ1ZDLFNBQVUsTUFDVkMsY0FBZSxTQUNmQyxTQUFVLFNBQ1ZDLFVBQVcsTUFDWEMsU0FBVSxTQUNWQyxVQUFXLFNBQ1hDLFlBQWEsUUFDYkMsZUFBZ0IsUUFDaEJDLFdBQVksU0FDWkMsV0FBWSxTQUNaQyxRQUFTLFFBQ1RDLFdBQVksU0FDWkMsYUFBYyxRQUNkQyxjQUFlLFFBQ2ZDLGNBQWUsUUFDZkMsY0FBZSxRQUNmQyxjQUFlLE1BQ2ZDLFdBQVksUUFDWkMsU0FBVSxTQUNWQyxZQUFhLE1BQ2JDLFFBQVMsUUFDVEMsUUFBUyxRQUNUQyxXQUFZLFFBQ1pDLFVBQVcsU0FDWEMsWUFBYSxTQUNiQyxZQUFhLFFBQ2JDLFFBQVMsU0FDVEMsVUFBVyxTQUNYQyxXQUFZLFNBQ1pDLEtBQU0sU0FDTkMsVUFBVyxTQUNYQyxLQUFNLFFBQ05DLE1BQU8sTUFDUEMsWUFBYSxTQUNiQyxLQUFNLFFBQ05DLFNBQVUsU0FDVkMsUUFBUyxTQUNUQyxVQUFXLFNBQ1hDLE9BQVEsUUFDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFNBQVUsU0FDVkMsY0FBZSxTQUNmQyxVQUFXLFFBQ1hDLGFBQWMsU0FDZEMsVUFBVyxTQUNYQyxXQUFZLFNBQ1pDLFVBQVcsU0FDWEMscUJBQXNCLFNBQ3RCQyxVQUFXLFNBQ1hDLFdBQVksUUFDWkMsVUFBVyxTQUNYQyxVQUFXLFNBQ1hDLFlBQWEsU0FDYkMsY0FBZSxRQUNmQyxhQUFjLFFBQ2RDLGVBQWdCLFFBQ2hCQyxlQUFnQixRQUNoQkMsZUFBZ0IsU0FDaEJDLFlBQWEsU0FDYkMsS0FBTSxNQUNOQyxVQUFXLFFBQ1hDLE1BQU8sU0FDUEMsUUFBUyxTQUNUQyxPQUFRLFFBQ1JDLGlCQUFrQixRQUNsQkMsV0FBWSxJQUNaQyxhQUFjLFNBQ2RDLGFBQWMsUUFDZEMsZUFBZ0IsUUFDaEJDLGdCQUFpQixRQUNqQkMsa0JBQW1CLE1BQ25CQyxnQkFBaUIsUUFDakJDLGdCQUFpQixTQUNqQkMsYUFBYyxRQUNkQyxVQUFXLFNBQ1hDLFVBQVcsU0FDWEMsU0FBVSxTQUNWQyxZQUFhLFNBQ2JDLEtBQU0sSUFDTkMsUUFBUyxTQUNUQyxNQUFPLFFBQ1BDLFVBQVcsUUFDWEMsT0FBUSxTQUNSQyxVQUFXLFNBQ1hDLE9BQVEsU0FDUkMsY0FBZSxTQUNmQyxVQUFXLFNBQ1hDLGNBQWUsU0FDZkMsY0FBZSxTQUNmQyxXQUFZLFNBQ1pDLFVBQVcsU0FDWEMsS0FBTSxTQUNOQyxLQUFNLFNBQ05DLEtBQU0sU0FDTkMsV0FBWSxTQUNaQyxPQUFRLFFBQ1JDLGNBQWUsUUFDZkMsSUFBSyxTQUNMQyxVQUFXLFNBQ1hDLFVBQVcsUUFDWEMsWUFBYSxRQUNiQyxPQUFRLFNBQ1JDLFdBQVksU0FDWkMsU0FBVSxRQUNWQyxTQUFVLFNBQ1ZDLE9BQVEsU0FDUkMsT0FBUSxTQUNSQyxRQUFTLFFBQ1RDLFVBQVcsUUFDWEMsVUFBVyxRQUNYQyxVQUFXLFFBQ1hDLEtBQU0sU0FDTkMsWUFBYSxNQUNiQyxVQUFXLFFBQ1huZixJQUFLLFNBQ0xvZixLQUFNLE1BQ05DLFFBQVMsU0FDVEMsT0FBUSxTQUNSQyxVQUFXLFFBQ1hDLE9BQVEsU0FDUkMsTUFBTyxTQUNQQyxNQUFPLFNBQ1BDLFdBQVksU0FDWkMsT0FBUSxTQUNSQyxZQUFhLFVBaUJmLFNBQVNDLEtBQ1AsT0FBT3ZoQixLQUFLd2hCLE1BQU1DLFlBT3BCLFNBQVNDLEtBQ1AsT0FBTzFoQixLQUFLd2hCLE1BQU1HLFlBR0wsU0FBU0MsR0FBTUMsR0FDNUIsSUFBSTdpQixFQUFHOEQsRUFFUCxPQURBK2UsR0FBVUEsRUFBUyxJQUFJemtCLE9BQU8wa0IsZUFDdEI5aUIsRUFBSTJZLEdBQU1vSyxLQUFLRixLQUFZL2UsRUFBSTlELEVBQUUsR0FBR0ssT0FBUUwsRUFBSWdqQixTQUFTaGpCLEVBQUUsR0FBSSxJQUFXLElBQU44RCxFQUFVbWYsR0FBS2pqQixHQUMvRSxJQUFOOEQsRUFBVSxJQUFJb2YsR0FBS2xqQixHQUFLLEVBQUksR0FBUUEsR0FBSyxFQUFJLElBQVFBLEdBQUssRUFBSSxHQUFZLElBQUpBLEdBQWlCLEdBQUpBLElBQVksRUFBVSxHQUFKQSxFQUFVLEdBQ3pHLElBQU44RCxFQUFVcWYsR0FBS25qQixHQUFLLEdBQUssSUFBTUEsR0FBSyxHQUFLLElBQU1BLEdBQUssRUFBSSxLQUFXLElBQUpBLEdBQVksS0FDckUsSUFBTjhELEVBQVVxZixHQUFNbmpCLEdBQUssR0FBSyxHQUFRQSxHQUFLLEVBQUksSUFBUUEsR0FBSyxFQUFJLEdBQVFBLEdBQUssRUFBSSxJQUFRQSxHQUFLLEVBQUksR0FBWSxJQUFKQSxJQUFrQixHQUFKQSxJQUFZLEVBQVUsR0FBSkEsR0FBWSxLQUNsSixPQUNDQSxFQUFJNFksR0FBYW1LLEtBQUtGLElBQVcsSUFBSUssR0FBSWxqQixFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxHQUFJLElBQzNEQSxFQUFJOFksR0FBYWlLLEtBQUtGLElBQVcsSUFBSUssR0FBVyxJQUFQbGpCLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFZLElBQVBBLEVBQUUsR0FBVyxJQUFLLElBQy9GQSxFQUFJK1ksR0FBY2dLLEtBQUtGLElBQVdNLEdBQUtuakIsRUFBRSxHQUFJQSxFQUFFLEdBQUlBLEVBQUUsR0FBSUEsRUFBRSxLQUMzREEsRUFBSWdaLEdBQWMrSixLQUFLRixJQUFXTSxHQUFZLElBQVBuakIsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQVksSUFBUEEsRUFBRSxHQUFXLElBQUtBLEVBQUUsS0FDL0ZBLEVBQUlpWixHQUFhOEosS0FBS0YsSUFBV08sR0FBS3BqQixFQUFFLEdBQUlBLEVBQUUsR0FBSyxJQUFLQSxFQUFFLEdBQUssSUFBSyxJQUNwRUEsRUFBSWtaLEdBQWM2SixLQUFLRixJQUFXTyxHQUFLcGpCLEVBQUUsR0FBSUEsRUFBRSxHQUFLLElBQUtBLEVBQUUsR0FBSyxJQUFLQSxFQUFFLElBQ3hFbVosR0FBTTdMLGVBQWV1VixHQUFVSSxHQUFLOUosR0FBTTBKLElBQy9CLGdCQUFYQSxFQUEyQixJQUFJSyxHQUFJbmMsSUFBS0EsSUFBS0EsSUFBSyxHQUNsRCxLQUdSLFNBQVNrYyxHQUFLNWhCLEdBQ1osT0FBTyxJQUFJNmhCLEdBQUk3aEIsR0FBSyxHQUFLLElBQU1BLEdBQUssRUFBSSxJQUFVLElBQUpBLEVBQVUsR0FHMUQsU0FBUzhoQixHQUFLamEsRUFBR21hLEVBQUcxaUIsRUFBR0QsR0FFckIsT0FESUEsR0FBSyxJQUFHd0ksRUFBSW1hLEVBQUkxaUIsRUFBSW9HLEtBQ2pCLElBQUltYyxHQUFJaGEsRUFBR21hLEVBQUcxaUIsRUFBR0QsR0FHbkIsU0FBUzRpQixHQUFXcGlCLEdBRXpCLE9BRE1BLGFBQWFtWCxLQUFRblgsRUFBSTBoQixHQUFNMWhCLElBQ2hDQSxFQUVFLElBQUlnaUIsSUFEWGhpQixFQUFJQSxFQUFFc2hCLE9BQ1d0WixFQUFHaEksRUFBRW1pQixFQUFHbmlCLEVBQUVQLEVBQUdPLEVBQUVxaUIsU0FGakIsSUFBSUwsR0FLZCxTQUFTLEdBQUloYSxFQUFHbWEsRUFBRzFpQixFQUFHNGlCLEdBQzNCLE9BQTRCLElBQXJCMVEsVUFBVXhTLE9BQWVpakIsR0FBV3BhLEdBQUssSUFBSWdhLEdBQUloYSxFQUFHbWEsRUFBRzFpQixFQUFjLE1BQVg0aUIsRUFBa0IsRUFBSUEsR0FHbEYsU0FBU0wsR0FBSWhhLEVBQUdtYSxFQUFHMWlCLEVBQUc0aUIsR0FDM0J2aUIsS0FBS2tJLEdBQUtBLEVBQ1ZsSSxLQUFLcWlCLEdBQUtBLEVBQ1ZyaUIsS0FBS0wsR0FBS0EsRUFDVkssS0FBS3VpQixTQUFXQSxFQTJCbEIsU0FBU0MsS0FDUCxNQUFPLElBQU1DLEdBQUl6aUIsS0FBS2tJLEdBQUt1YSxHQUFJemlCLEtBQUtxaUIsR0FBS0ksR0FBSXppQixLQUFLTCxHQUdwRCxTQUFTK2lCLEtBQ1AsSUFBSWhqQixFQUFJTSxLQUFLdWlCLFFBQ2IsT0FBYyxLQURRN2lCLEVBQUlpakIsTUFBTWpqQixHQUFLLEVBQUluQyxLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksRUFBR2hMLEtBQy9DLE9BQVMsU0FDckJuQyxLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksSUFBS25OLEtBQUsyTixNQUFNbEwsS0FBS2tJLElBQU0sSUFBTSxLQUN0RDNLLEtBQUtrTixJQUFJLEVBQUdsTixLQUFLbU4sSUFBSSxJQUFLbk4sS0FBSzJOLE1BQU1sTCxLQUFLcWlCLElBQU0sSUFBTSxLQUN0RDlrQixLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksSUFBS25OLEtBQUsyTixNQUFNbEwsS0FBS0wsSUFBTSxLQUN6QyxJQUFORCxFQUFVLElBQU0sS0FBT0EsRUFBSSxLQUdwQyxTQUFTK2lCLEdBQUlHLEdBRVgsUUFEQUEsRUFBUXJsQixLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksSUFBS25OLEtBQUsyTixNQUFNMFgsSUFBVSxLQUN2QyxHQUFLLElBQU0sSUFBTUEsRUFBTUMsU0FBUyxJQUdsRCxTQUFTVCxHQUFLN1QsRUFBR3ZDLEVBQUdsSixFQUFHcEQsR0FJckIsT0FISUEsR0FBSyxFQUFHNk8sRUFBSXZDLEVBQUlsSixFQUFJaUQsSUFDZmpELEdBQUssR0FBS0EsR0FBSyxFQUFHeUwsRUFBSXZDLEVBQUlqRyxJQUMxQmlHLEdBQUssSUFBR3VDLEVBQUl4SSxLQUNkLElBQUkrYyxHQUFJdlUsRUFBR3ZDLEVBQUdsSixFQUFHcEQsR0FHbkIsU0FBU3FqQixHQUFXN2lCLEdBQ3pCLEdBQUlBLGFBQWE0aUIsR0FBSyxPQUFPLElBQUlBLEdBQUk1aUIsRUFBRXFPLEVBQUdyTyxFQUFFOEwsRUFBRzlMLEVBQUU0QyxFQUFHNUMsRUFBRXFpQixTQUV0RCxHQURNcmlCLGFBQWFtWCxLQUFRblgsRUFBSTBoQixHQUFNMWhCLEtBQ2hDQSxFQUFHLE9BQU8sSUFBSTRpQixHQUNuQixHQUFJNWlCLGFBQWE0aUIsR0FBSyxPQUFPNWlCLEVBRTdCLElBQUlnSSxHQURKaEksRUFBSUEsRUFBRXNoQixPQUNJdFosRUFBSSxJQUNWbWEsRUFBSW5pQixFQUFFbWlCLEVBQUksSUFDVjFpQixFQUFJTyxFQUFFUCxFQUFJLElBQ1YrSyxFQUFNbk4sS0FBS21OLElBQUl4QyxFQUFHbWEsRUFBRzFpQixHQUNyQjhLLEVBQU1sTixLQUFLa04sSUFBSXZDLEVBQUdtYSxFQUFHMWlCLEdBQ3JCNE8sRUFBSXhJLElBQ0ppRyxFQUFJdkIsRUFBTUMsRUFDVjVILEdBQUsySCxFQUFNQyxHQUFPLEVBVXRCLE9BVElzQixHQUNhdUMsRUFBWHJHLElBQU11QyxHQUFVNFgsRUFBSTFpQixHQUFLcU0sRUFBYyxHQUFUcVcsRUFBSTFpQixHQUM3QjBpQixJQUFNNVgsR0FBVTlLLEVBQUl1SSxHQUFLOEQsRUFBSSxHQUM1QjlELEVBQUltYSxHQUFLclcsRUFBSSxFQUN2QkEsR0FBS2xKLEVBQUksR0FBTTJILEVBQU1DLEVBQU0sRUFBSUQsRUFBTUMsRUFDckM2RCxHQUFLLElBRUx2QyxFQUFJbEosRUFBSSxHQUFLQSxFQUFJLEVBQUksRUFBSXlMLEVBRXBCLElBQUl1VSxHQUFJdlUsRUFBR3ZDLEVBQUdsSixFQUFHNUMsRUFBRXFpQixTQU81QixTQUFTTyxHQUFJdlUsRUFBR3ZDLEVBQUdsSixFQUFHeWYsR0FDcEJ2aUIsS0FBS3VPLEdBQUtBLEVBQ1Z2TyxLQUFLZ00sR0FBS0EsRUFDVmhNLEtBQUs4QyxHQUFLQSxFQUNWOUMsS0FBS3VpQixTQUFXQSxFQXlDbEIsU0FBU1MsR0FBUXpVLEVBQUcwVSxFQUFJQyxHQUN0QixPQUdZLEtBSEozVSxFQUFJLEdBQUswVSxHQUFNQyxFQUFLRCxHQUFNMVUsRUFBSSxHQUNoQ0EsRUFBSSxJQUFNMlUsRUFDVjNVLEVBQUksSUFBTTBVLEdBQU1DLEVBQUtELElBQU8sSUFBTTFVLEdBQUssR0FDdkMwVSxHQ2pYRCxTQUFTRSxHQUFNMWEsRUFBSUwsRUFBSWdiLEVBQUlDLEVBQUlDLEdBQ3BDLElBQUkxYixFQUFLYSxFQUFLQSxFQUFJOGEsRUFBSzNiLEVBQUthLEVBQzVCLFFBQVMsRUFBSSxFQUFJQSxFQUFLLEVBQUliLEVBQUsyYixHQUFNbmIsR0FDOUIsRUFBSSxFQUFJUixFQUFLLEVBQUkyYixHQUFNSCxHQUN2QixFQUFJLEVBQUkzYSxFQUFLLEVBQUliLEVBQUssRUFBSTJiLEdBQU1GLEVBQ2pDRSxFQUFLRCxHQUFNLEVEb0tuQixHQUFPak0sR0FBT3VLLEdBQU8sQ0FDbkI0QixLQUFNLFNBQVNDLEdBQ2IsT0FBT3RNLE9BQU91TSxPQUFPLElBQUkxakIsS0FBS3lNLFlBQWF6TSxLQUFNeWpCLElBRW5ERSxZQUFhLFdBQ1gsT0FBTzNqQixLQUFLd2hCLE1BQU1tQyxlQUVwQmxCLElBQUtsQixHQUNMRSxVQUFXRixHQUNYcUMsVUFTRixXQUNFLE9BQU9iLEdBQVcvaUIsTUFBTTRqQixhQVR4QmpDLFVBQVdELEdBQ1htQixTQUFVbkIsS0E2RFosR0FBT1EsR0FBSyxHQUFLbEwsR0FBT0ssR0FBTyxDQUM3QkUsU0FBVSxTQUFTNVUsR0FFakIsT0FEQUEsRUFBUyxNQUFMQSxFQUFZNFUsR0FBV2hhLEtBQUtjLElBQUlrWixHQUFVNVUsR0FDdkMsSUFBSXVmLEdBQUlsaUIsS0FBS2tJLEVBQUl2RixFQUFHM0MsS0FBS3FpQixFQUFJMWYsRUFBRzNDLEtBQUtMLEVBQUlnRCxFQUFHM0MsS0FBS3VpQixVQUUxRGpMLE9BQVEsU0FBUzNVLEdBRWYsT0FEQUEsRUFBUyxNQUFMQSxFQUFZMlUsR0FBUy9aLEtBQUtjLElBQUlpWixHQUFRM1UsR0FDbkMsSUFBSXVmLEdBQUlsaUIsS0FBS2tJLEVBQUl2RixFQUFHM0MsS0FBS3FpQixFQUFJMWYsRUFBRzNDLEtBQUtMLEVBQUlnRCxFQUFHM0MsS0FBS3VpQixVQUUxRGYsSUFBSyxXQUNILE9BQU94aEIsTUFFVDJqQixZQUFhLFdBQ1gsT0FBUyxJQUFPM2pCLEtBQUtrSSxHQUFLbEksS0FBS2tJLEVBQUksUUFDMUIsSUFBT2xJLEtBQUtxaUIsR0FBS3JpQixLQUFLcWlCLEVBQUksUUFDMUIsSUFBT3JpQixLQUFLTCxHQUFLSyxLQUFLTCxFQUFJLE9BQzNCLEdBQUtLLEtBQUt1aUIsU0FBV3ZpQixLQUFLdWlCLFNBQVcsR0FFL0NFLElBQUtELEdBQ0xmLFVBQVdlLEdBQ1hiLFVBQVdlLEdBQ1hHLFNBQVVILE1BaUVaLEdBQU9JLElBWEEsU0FBYXZVLEVBQUd2QyxFQUFHbEosRUFBR3lmLEdBQzNCLE9BQTRCLElBQXJCMVEsVUFBVXhTLE9BQWUwakIsR0FBV3hVLEdBQUssSUFBSXVVLEdBQUl2VSxFQUFHdkMsRUFBR2xKLEVBQWMsTUFBWHlmLEVBQWtCLEVBQUlBLEtBVXhFdkwsR0FBT0ssR0FBTyxDQUM3QkUsU0FBVSxTQUFTNVUsR0FFakIsT0FEQUEsRUFBUyxNQUFMQSxFQUFZNFUsR0FBV2hhLEtBQUtjLElBQUlrWixHQUFVNVUsR0FDdkMsSUFBSW1nQixHQUFJOWlCLEtBQUt1TyxFQUFHdk8sS0FBS2dNLEVBQUdoTSxLQUFLOEMsRUFBSUgsRUFBRzNDLEtBQUt1aUIsVUFFbERqTCxPQUFRLFNBQVMzVSxHQUVmLE9BREFBLEVBQVMsTUFBTEEsRUFBWTJVLEdBQVMvWixLQUFLYyxJQUFJaVosR0FBUTNVLEdBQ25DLElBQUltZ0IsR0FBSTlpQixLQUFLdU8sRUFBR3ZPLEtBQUtnTSxFQUFHaE0sS0FBSzhDLEVBQUlILEVBQUczQyxLQUFLdWlCLFVBRWxEZixJQUFLLFdBQ0gsSUFBSWpULEVBQUl2TyxLQUFLdU8sRUFBSSxJQUFxQixLQUFkdk8sS0FBS3VPLEVBQUksR0FDN0J2QyxFQUFJMlcsTUFBTXBVLElBQU1vVSxNQUFNM2lCLEtBQUtnTSxHQUFLLEVBQUloTSxLQUFLZ00sRUFDekNsSixFQUFJOUMsS0FBSzhDLEVBQ1RvZ0IsRUFBS3BnQixHQUFLQSxFQUFJLEdBQU1BLEVBQUksRUFBSUEsR0FBS2tKLEVBQ2pDaVgsRUFBSyxFQUFJbmdCLEVBQUlvZ0IsRUFDakIsT0FBTyxJQUFJaEIsR0FDVGMsR0FBUXpVLEdBQUssSUFBTUEsRUFBSSxJQUFNQSxFQUFJLElBQUswVSxFQUFJQyxHQUMxQ0YsR0FBUXpVLEVBQUcwVSxFQUFJQyxHQUNmRixHQUFRelUsRUFBSSxJQUFNQSxFQUFJLElBQU1BLEVBQUksSUFBSzBVLEVBQUlDLEdBQ3pDbGpCLEtBQUt1aUIsVUFHVG9CLFlBQWEsV0FDWCxPQUFRLEdBQUszakIsS0FBS2dNLEdBQUtoTSxLQUFLZ00sR0FBSyxHQUFLMlcsTUFBTTNpQixLQUFLZ00sS0FDekMsR0FBS2hNLEtBQUs4QyxHQUFLOUMsS0FBSzhDLEdBQUssR0FDekIsR0FBSzlDLEtBQUt1aUIsU0FBV3ZpQixLQUFLdWlCLFNBQVcsR0FFL0NxQixVQUFXLFdBQ1QsSUFBSWxrQixFQUFJTSxLQUFLdWlCLFFBQ2IsT0FBYyxLQURRN2lCLEVBQUlpakIsTUFBTWpqQixHQUFLLEVBQUluQyxLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksRUFBR2hMLEtBQy9DLE9BQVMsVUFDcEJNLEtBQUt1TyxHQUFLLEdBQUssS0FDQSxLQUFmdk8sS0FBS2dNLEdBQUssR0FBVyxNQUNOLEtBQWZoTSxLQUFLOEMsR0FBSyxHQUFXLEtBQ2YsSUFBTnBELEVBQVUsSUFBTSxLQUFPQSxFQUFJLFNFeFd0QyxTQUFlbEIsR0FBSyxJQUFNQSxFQ3lCWCxTQUFTcWxCLEdBQVFua0IsRUFBR0MsR0FDakMsSUFBSWtELEVBQUlsRCxFQUFJRCxFQUNaLE9BQU9tRCxFQXpCVCxTQUFnQm5ELEVBQUdtRCxHQUNqQixPQUFPLFNBQVNnRixHQUNkLE9BQU9uSSxFQUFJbUksRUFBSWhGLEdBdUJOaWhCLENBQU9wa0IsRUFBR21ELEdBQUssR0FBUzhmLE1BQU1qakIsR0FBS0MsRUFBSUQsR0N0QnBELFNBQWUsU0FBVXFrQixFQUFTaGxCLEdBQ2hDLElBQUk2aUIsRURhQyxTQUFlN2lCLEdBQ3BCLE9BQW9CLElBQVpBLEdBQUtBLEdBQVc4a0IsR0FBVSxTQUFTbmtCLEVBQUdDLEdBQzVDLE9BQU9BLEVBQUlELEVBYmYsU0FBcUJBLEVBQUdDLEVBQUdaLEdBQ3pCLE9BQU9XLEVBQUluQyxLQUFLYyxJQUFJcUIsRUFBR1gsR0FBSVksRUFBSXBDLEtBQUtjLElBQUlzQixFQUFHWixHQUFLVyxFQUFHWCxFQUFJLEVBQUlBLEVBQUcsU0FBUzhJLEdBQ3JFLE9BQU90SyxLQUFLYyxJQUFJcUIsRUFBSW1JLEVBQUlsSSxFQUFHWixJQVdaaWxCLENBQVl0a0IsRUFBR0MsRUFBR1osR0FBSyxHQUFTNGpCLE1BQU1qakIsR0FBS0MsRUFBSUQsSUNmcER1a0IsQ0FBTWxsQixHQUVsQixTQUFTeWlCLEVBQUluZ0IsRUFBTzZpQixHQUNsQixJQUFJaGMsRUFBSTBaLEdBQU92Z0IsRUFBUSxHQUFTQSxJQUFRNkcsR0FBSWdjLEVBQU0sR0FBU0EsSUFBTWhjLEdBQzdEbWEsRUFBSVQsRUFBTXZnQixFQUFNZ2hCLEVBQUc2QixFQUFJN0IsR0FDdkIxaUIsRUFBSWlpQixFQUFNdmdCLEVBQU0xQixFQUFHdWtCLEVBQUl2a0IsR0FDdkI0aUIsRUFBVXNCLEdBQVF4aUIsRUFBTWtoQixRQUFTMkIsRUFBSTNCLFNBQ3pDLE9BQU8sU0FBUzFhLEdBS2QsT0FKQXhHLEVBQU02RyxFQUFJQSxFQUFFTCxHQUNaeEcsRUFBTWdoQixFQUFJQSxFQUFFeGEsR0FDWnhHLEVBQU0xQixFQUFJQSxFQUFFa0ksR0FDWnhHLEVBQU1raEIsUUFBVUEsRUFBUTFhLEdBQ2pCeEcsRUFBUSxJQU1uQixPQUZBbWdCLEVBQUl5QyxNQUFRRixFQUVMdkMsRUFuQlQsQ0FvQkcsR0FFSCxTQUFTMkMsR0FBVUMsR0FDakIsT0FBTyxTQUFTQyxHQUNkLElBSUl6akIsRUFBR2doQixFQUpIdmhCLEVBQUlna0IsRUFBT2hsQixPQUNYNkksRUFBSSxJQUFJaEYsTUFBTTdDLEdBQ2RnaUIsRUFBSSxJQUFJbmYsTUFBTTdDLEdBQ2RWLEVBQUksSUFBSXVELE1BQU03QyxHQUVsQixJQUFLTyxFQUFJLEVBQUdBLEVBQUlQLElBQUtPLEVBQ25CZ2hCLEVBQVEsR0FBU3lDLEVBQU96akIsSUFDeEJzSCxFQUFFdEgsR0FBS2doQixFQUFNMVosR0FBSyxFQUNsQm1hLEVBQUV6aEIsR0FBS2doQixFQUFNUyxHQUFLLEVBQ2xCMWlCLEVBQUVpQixHQUFLZ2hCLEVBQU1qaUIsR0FBSyxFQU1wQixPQUpBdUksRUFBSWtjLEVBQU9sYyxHQUNYbWEsRUFBSStCLEVBQU8vQixHQUNYMWlCLEVBQUl5a0IsRUFBT3prQixHQUNYaWlCLEVBQU1XLFFBQVUsRUFDVCxTQUFTMWEsR0FJZCxPQUhBK1osRUFBTTFaLEVBQUlBLEVBQUVMLEdBQ1orWixFQUFNUyxFQUFJQSxFQUFFeGEsR0FDWitaLEVBQU1qaUIsRUFBSUEsRUFBRWtJLEdBQ0wrWixFQUFRLEtDekNkLFNBQVMwQyxHQUFhNWtCLEVBQUdDLEdBQzlCLElBSUlpQixFQUpBMmpCLEVBQUs1a0IsRUFBSUEsRUFBRU4sT0FBUyxFQUNwQm1sQixFQUFLOWtCLEVBQUluQyxLQUFLbU4sSUFBSTZaLEVBQUk3a0IsRUFBRUwsUUFBVSxFQUNsQ2IsRUFBSSxJQUFJMEUsTUFBTXNoQixHQUNkamMsRUFBSSxJQUFJckYsTUFBTXFoQixHQUdsQixJQUFLM2pCLEVBQUksRUFBR0EsRUFBSTRqQixJQUFNNWpCLEVBQUdwQyxFQUFFb0MsR0FBS2dpQixHQUFNbGpCLEVBQUVrQixHQUFJakIsRUFBRWlCLElBQzlDLEtBQU9BLEVBQUkyakIsSUFBTTNqQixFQUFHMkgsRUFBRTNILEdBQUtqQixFQUFFaUIsR0FFN0IsT0FBTyxTQUFTaUgsR0FDZCxJQUFLakgsRUFBSSxFQUFHQSxFQUFJNGpCLElBQU01akIsRUFBRzJILEVBQUUzSCxHQUFLcEMsRUFBRW9DLEdBQUdpSCxHQUNyQyxPQUFPVSxHQ25CSSxZQUFTN0ksRUFBR0MsR0FDekIsSUFBSWtELEVBQUksSUFBSTRoQixLQUNaLE9BQU8va0IsR0FBS0EsRUFBR0MsR0FBS0EsRUFBRyxTQUFTa0ksR0FDOUIsT0FBT2hGLEVBQUU2aEIsUUFBUWhsQixHQUFLLEVBQUltSSxHQUFLbEksRUFBSWtJLEdBQUloRixHQ0g1QixZQUFTbkQsRUFBR0MsR0FDekIsT0FBT0QsR0FBS0EsRUFBR0MsR0FBS0EsRUFBRyxTQUFTa0ksR0FDOUIsT0FBT25JLEdBQUssRUFBSW1JLEdBQUtsSSxFQUFJa0ksR0NBZCxZQUFTbkksRUFBR0MsR0FDekIsSUFFSWdELEVBRkEvQixFQUFJLEdBQ0oySCxFQUFJLEdBTVIsSUFBSzVGLEtBSEssT0FBTmpELEdBQTJCLGlCQUFOQSxJQUFnQkEsRUFBSSxJQUNuQyxPQUFOQyxHQUEyQixpQkFBTkEsSUFBZ0JBLEVBQUksSUFFbkNBLEVBQ0pnRCxLQUFLakQsRUFDUGtCLEVBQUUrQixHQUFLaWdCLEdBQU1sakIsRUFBRWlELEdBQUloRCxFQUFFZ0QsSUFFckI0RixFQUFFNUYsR0FBS2hELEVBQUVnRCxHQUliLE9BQU8sU0FBU2tGLEdBQ2QsSUFBS2xGLEtBQUsvQixFQUFHMkgsRUFBRTVGLEdBQUsvQixFQUFFK0IsR0FBR2tGLEdBQ3pCLE9BQU9VLEdKaUNXNGIsSUg3Q1AsU0FBU1EsR0FDdEIsSUFBSXRrQixFQUFJc2tCLEVBQU90bEIsT0FBUyxFQUN4QixPQUFPLFNBQVN3SSxHQUNkLElBQUlqSCxFQUFJaUgsR0FBSyxFQUFLQSxFQUFJLEVBQUtBLEdBQUssR0FBS0EsRUFBSSxFQUFHeEgsRUFBSSxHQUFLOUMsS0FBS1csTUFBTTJKLEVBQUl4SCxHQUNoRStpQixFQUFLdUIsRUFBTy9qQixHQUNaeWlCLEVBQUtzQixFQUFPL2pCLEVBQUksR0FDaEJ3SCxFQUFLeEgsRUFBSSxFQUFJK2pCLEVBQU8vakIsRUFBSSxHQUFLLEVBQUl3aUIsRUFBS0MsRUFDdENDLEVBQUsxaUIsRUFBSVAsRUFBSSxFQUFJc2tCLEVBQU8vakIsRUFBSSxHQUFLLEVBQUl5aUIsRUFBS0QsRUFDOUMsT0FBT0QsSUFBT3RiLEVBQUlqSCxFQUFJUCxHQUFLQSxFQUFHK0gsRUFBSWdiLEVBQUlDLEVBQUlDLE9Hc0NsQmEsSUtwRGIsU0FBU1EsR0FDdEIsSUFBSXRrQixFQUFJc2tCLEVBQU90bEIsT0FDZixPQUFPLFNBQVN3SSxHQUNkLElBQUlqSCxFQUFJckQsS0FBS1csUUFBUTJKLEdBQUssR0FBSyxJQUFNQSxFQUFJQSxHQUFLeEgsR0FDMUMrSCxFQUFLdWMsR0FBUS9qQixFQUFJUCxFQUFJLEdBQUtBLEdBQzFCK2lCLEVBQUt1QixFQUFPL2pCLEVBQUlQLEdBQ2hCZ2pCLEVBQUtzQixHQUFRL2pCLEVBQUksR0FBS1AsR0FDdEJpakIsRUFBS3FCLEdBQVEvakIsRUFBSSxHQUFLUCxHQUMxQixPQUFPOGlCLElBQU90YixFQUFJakgsRUFBSVAsR0FBS0EsRUFBRytILEVBQUlnYixFQUFJQyxFQUFJQyxPQ1I5QyxJQUFJc0IsR0FBTSw4Q0FDTkMsR0FBTSxJQUFJaE4sT0FBTytNLEdBQUlFLE9BQVEsS0FjbEIsWUFBU3BsQixFQUFHQyxHQUN6QixJQUNJb2xCLEVBQ0FDLEVBQ0FDLEVBSEF6VSxFQUFLb1UsR0FBSU0sVUFBWUwsR0FBSUssVUFBWSxFQUlyQ3RrQixHQUFLLEVBQ0xvTCxFQUFJLEdBQ0psRSxFQUFJLEdBTVIsSUFIQXBJLEdBQVEsR0FBSUMsR0FBUSxJQUdab2xCLEVBQUtILEdBQUk3QyxLQUFLcmlCLE1BQ2RzbEIsRUFBS0gsR0FBSTlDLEtBQUtwaUIsTUFDZnNsQixFQUFLRCxFQUFHRyxPQUFTM1UsSUFDcEJ5VSxFQUFLdGxCLEVBQUV5bEIsTUFBTTVVLEVBQUl5VSxHQUNialosRUFBRXBMLEdBQUlvTCxFQUFFcEwsSUFBTXFrQixFQUNialosSUFBSXBMLEdBQUtxa0IsSUFFWEYsRUFBS0EsRUFBRyxPQUFTQyxFQUFLQSxFQUFHLElBQ3hCaFosRUFBRXBMLEdBQUlvTCxFQUFFcEwsSUFBTW9rQixFQUNiaFosSUFBSXBMLEdBQUtva0IsR0FFZGhaLElBQUlwTCxHQUFLLEtBQ1RrSCxFQUFFN0ksS0FBSyxDQUFDMkIsRUFBR0EsRUFBR3BDLEVBQUcsR0FBT3VtQixFQUFJQyxNQUU5QnhVLEVBQUtxVSxHQUFJSyxVQVlYLE9BUkkxVSxFQUFLN1EsRUFBRU4sU0FDVDRsQixFQUFLdGxCLEVBQUV5bEIsTUFBTTVVLEdBQ1R4RSxFQUFFcEwsR0FBSW9MLEVBQUVwTCxJQUFNcWtCLEVBQ2JqWixJQUFJcEwsR0FBS3FrQixHQUtUalosRUFBRTNNLE9BQVMsRUFBS3lJLEVBQUUsR0E3QzNCLFNBQWFuSSxHQUNYLE9BQU8sU0FBU2tJLEdBQ2QsT0FBT2xJLEVBQUVrSSxHQUFLLElBNENWd2QsQ0FBSXZkLEVBQUUsR0FBR3RKLEdBcERqQixTQUFjbUIsR0FDWixPQUFPLFdBQ0wsT0FBT0EsR0FtREgybEIsQ0FBSzNsQixJQUNKQSxFQUFJbUksRUFBRXpJLE9BQVEsU0FBU3dJLEdBQ3RCLElBQUssSUFBVzNILEVBQVBVLEVBQUksRUFBTUEsRUFBSWpCLElBQUtpQixFQUFHb0wsR0FBRzlMLEVBQUk0SCxFQUFFbEgsSUFBSUEsR0FBS1YsRUFBRTFCLEVBQUVxSixHQUNyRCxPQUFPbUUsRUFBRTJKLEtBQUssTUM3RFQsWUFBU2pXLEVBQUdDLEdBQ3BCQSxJQUFHQSxFQUFJLElBQ1osSUFFSWlCLEVBRkFQLEVBQUlYLEVBQUluQyxLQUFLbU4sSUFBSS9LLEVBQUVOLE9BQVFLLEVBQUVMLFFBQVUsRUFDdkNrSixFQUFJNUksRUFBRXlsQixRQUVWLE9BQU8sU0FBU3ZkLEdBQ2QsSUFBS2pILEVBQUksRUFBR0EsRUFBSVAsSUFBS08sRUFBRzJILEVBQUUzSCxHQUFLbEIsRUFBRWtCLElBQU0sRUFBSWlILEdBQUtsSSxFQUFFaUIsR0FBS2lILEVBQ3ZELE9BQU9VLEdDR0ksWUFBUzdJLEVBQUdDLEdBQ3pCLElBQWtCNEksRURBVS9KLEVDQXhCcUosU0FBV2xJLEVBQ2YsT0FBWSxNQUFMQSxHQUFtQixZQUFOa0ksRUFBa0IsR0FBU2xJLElBQ2xDLFdBQU5rSSxFQUFpQixHQUNaLFdBQU5BLEdBQW1CVSxFQUFJcVosR0FBTWppQixLQUFPQSxFQUFJNEksRUFBR2laLElBQU8rRCxHQUNsRDVsQixhQUFhaWlCLEdBQVFKLEdBQ3JCN2hCLGFBQWE4a0IsS0FBT2UsSURMRWhuQixFQ01SbUIsR0RMYjhsQixZQUFZQyxPQUFPbG5CLElBQVFBLGFBQWFtbkIsU0NNekN6aUIsTUFBTTBpQixRQUFRam1CLEdBQUsya0IsR0FDRSxtQkFBZDNrQixFQUFFa21CLFNBQWdELG1CQUFmbG1CLEVBQUVrakIsVUFBMkJGLE1BQU1oakIsR0FBS2lOLEdBQ2xGLEdBSG1CLEtBR1hsTixFQUFHQyxHQ3BCSixZQUFTRCxFQUFHQyxHQUN6QixPQUFPRCxHQUFLQSxFQUFHQyxHQUFLQSxFQUFHLFNBQVNrSSxHQUM5QixPQUFPdEssS0FBSzJOLE1BQU14TCxHQUFLLEVBQUltSSxHQUFLbEksRUFBSWtJLElDRnpCLFNBQVMsR0FBT3JKLEdBQzdCLE9BQVFBLEVDSVYsSUFBSXNuQixHQUFPLENBQUMsRUFBRyxHQUVSLFNBQVMsR0FBU3RuQixHQUN2QixPQUFPQSxFQUdULFNBQVN1bkIsR0FBVXJtQixFQUFHQyxHQUNwQixPQUFRQSxHQUFNRCxHQUFLQSxHQUNiLFNBQVNsQixHQUFLLE9BQVFBLEVBQUlrQixHQUFLQyxJQ2JMbkIsRURjakJta0IsTUFBTWhqQixHQUFLb0csSUFBTSxHQ2J6QixXQUNMLE9BQU92SCxJQUZJLElBQW1CQSxFRHlCbEMsU0FBU3duQixHQUFNQyxFQUFRQyxFQUFPeGxCLEdBQzVCLElBQUl5bEIsRUFBS0YsRUFBTyxHQUFJRyxFQUFLSCxFQUFPLEdBQUlJLEVBQUtILEVBQU0sR0FBSUksRUFBS0osRUFBTSxHQUc5RCxPQUZJRSxFQUFLRCxHQUFJQSxFQUFLSixHQUFVSyxFQUFJRCxHQUFLRSxFQUFLM2xCLEVBQVk0bEIsRUFBSUQsS0FDckRGLEVBQUtKLEdBQVVJLEVBQUlDLEdBQUtDLEVBQUszbEIsRUFBWTJsQixFQUFJQyxJQUMzQyxTQUFTOW5CLEdBQUssT0FBTzZuQixFQUFHRixFQUFHM25CLEtBR3BDLFNBQVMrbkIsR0FBUU4sRUFBUUMsRUFBT3hsQixHQUM5QixJQUFJb0IsRUFBSXZFLEtBQUttTixJQUFJdWIsRUFBTzVtQixPQUFRNm1CLEVBQU03bUIsUUFBVSxFQUM1Q3dELEVBQUksSUFBSUssTUFBTXBCLEdBQ2RvRyxFQUFJLElBQUloRixNQUFNcEIsR0FDZGxCLEdBQUssRUFRVCxJQUxJcWxCLEVBQU9ua0IsR0FBS21rQixFQUFPLEtBQ3JCQSxFQUFTQSxFQUFPYixRQUFRb0IsVUFDeEJOLEVBQVFBLEVBQU1kLFFBQVFvQixhQUdmNWxCLEVBQUlrQixHQUNYZSxFQUFFakMsR0FBS21sQixHQUFVRSxFQUFPcmxCLEdBQUlxbEIsRUFBT3JsQixFQUFJLElBQ3ZDc0gsRUFBRXRILEdBQUtGLEVBQVl3bEIsRUFBTXRsQixHQUFJc2xCLEVBQU10bEIsRUFBSSxJQUd6QyxPQUFPLFNBQVNwQyxHQUNkLElBQUlvQyxFQUFJNmxCLEdBQU9SLEVBQVF6bkIsRUFBRyxFQUFHc0QsR0FBSyxFQUNsQyxPQUFPb0csRUFBRXRILEdBQUdpQyxFQUFFakMsR0FBR3BDLEtBSWQsU0FBU2dsQixHQUFLc0IsRUFBUTRCLEdBQzNCLE9BQU9BLEVBQ0ZULE9BQU9uQixFQUFPbUIsVUFDZEMsTUFBTXBCLEVBQU9vQixTQUNieGxCLFlBQVlva0IsRUFBT3BrQixlQUNuQmltQixNQUFNN0IsRUFBTzZCLFNBQ2JDLFFBQVE5QixFQUFPOEIsV0E2RFAsU0FBU0MsS0FDdEIsT0EzREssV0FDTCxJQUdJMVcsRUFDQTJXLEVBQ0FGLEVBRUFHLEVBQ0FDLEVBQ0FDLEVBVEFoQixFQUFTSCxHQUNUSSxFQUFRSixHQUNScGxCLEVBQWMsR0FJZGltQixFQUFRLEdBS1osU0FBU08sSUFDUCxJQTVEYXhuQixFQUFHQyxFQUNka0ksRUEyREV4SCxFQUFJOUMsS0FBS21OLElBQUl1YixFQUFPNW1CLE9BQVE2bUIsRUFBTTdtQixRQUl0QyxPQUhJc25CLElBQVUsS0E3RERqbkIsRUE2RDJCdW1CLEVBQU8sR0E3RC9CdG1CLEVBNkRtQ3NtQixFQUFPNWxCLEVBQUksR0EzRDVEWCxFQUFJQyxJQUFHa0ksRUFBSW5JLEVBQUdBLEVBQUlDLEVBQUdBLEVBQUlrSSxHQTJESDhlLEVBMURuQixTQUFTbm9CLEdBQUssT0FBT2pCLEtBQUtrTixJQUFJL0ssRUFBR25DLEtBQUttTixJQUFJL0ssRUFBR25CLE1BMkRsRHVvQixFQUFZMW1CLEVBQUksRUFBSWttQixHQUFVUCxHQUM5QmdCLEVBQVNDLEVBQVEsS0FDVjlZLEVBR1QsU0FBU0EsRUFBTTNQLEdBQ2IsT0FBT21rQixNQUFNbmtCLEdBQUtBLEdBQUtvb0IsR0FBV0ksSUFBV0EsRUFBU0QsRUFBVWQsRUFBT2tCLElBQUloWCxHQUFZK1YsRUFBT3hsQixLQUFleVAsRUFBVXdXLEVBQU1ub0IsS0ErQi9ILE9BNUJBMlAsRUFBTW5ELE9BQVMsU0FBU2pNLEdBQ3RCLE9BQU80bkIsRUFBTUcsR0FBYUcsSUFBVUEsRUFBUUYsRUFBVWIsRUFBT0QsRUFBT2tCLElBQUloWCxHQUFZLE1BQXFCcFIsTUFHM0dvUCxFQUFNOFgsT0FBUyxTQUFTclUsR0FDdEIsT0FBT0MsVUFBVXhTLFFBQVU0bUIsRUFBUy9pQixNQUFNQyxLQUFLeU8sRUFBRyxJQUFTc1YsS0FBYWpCLEVBQU9iLFNBR2pGalgsRUFBTStYLE1BQVEsU0FBU3RVLEdBQ3JCLE9BQU9DLFVBQVV4UyxRQUFVNm1CLEVBQVFoakIsTUFBTUMsS0FBS3lPLEdBQUlzVixLQUFhaEIsRUFBTWQsU0FHdkVqWCxFQUFNaVosV0FBYSxTQUFTeFYsR0FDMUIsT0FBT3NVLEVBQVFoakIsTUFBTUMsS0FBS3lPLEdBQUlsUixFQUFjLEdBQWtCd21CLEtBR2hFL1ksRUFBTXdZLE1BQVEsU0FBUy9VLEdBQ3JCLE9BQU9DLFVBQVV4UyxRQUFVc25CLElBQVEvVSxHQUFXLEdBQVVzVixLQUFhUCxJQUFVLElBR2pGeFksRUFBTXpOLFlBQWMsU0FBU2tSLEdBQzNCLE9BQU9DLFVBQVV4UyxRQUFVcUIsRUFBY2tSLEVBQUdzVixLQUFheG1CLEdBRzNEeU4sRUFBTXlZLFFBQVUsU0FBU2hWLEdBQ3ZCLE9BQU9DLFVBQVV4UyxRQUFVdW5CLEVBQVVoVixFQUFHekQsR0FBU3lZLEdBRzVDLFNBQVMvZSxFQUFHSixHQUVqQixPQURBMEksRUFBWXRJLEVBQUdpZixFQUFjcmYsRUFDdEJ5ZixLQUtGLEdBQWMsR0FBVSxJRTNIMUIsU0FBU0csR0FBVXBCLEVBQVFDLEdBQ2hDLE9BQVFyVSxVQUFVeFMsUUFDaEIsS0FBSyxFQUFHLE1BQ1IsS0FBSyxFQUFHVyxLQUFLa21CLE1BQU1ELEdBQVMsTUFDNUIsUUFBU2ptQixLQUFLa21CLE1BQU1BLEdBQU9ELE9BQU9BLEdBRXBDLE9BQU9qbUIsS0NMVCxJQ0NXc25CLEdERFBDLEdBQUssMkVBRU0sU0FBU0MsR0FBZ0JDLEdBQ3RDLEtBQU1DLEVBQVFILEdBQUd4RixLQUFLMEYsSUFBYSxNQUFNLElBQUlFLE1BQU0sbUJBQXFCRixHQUN4RSxJQUFJQyxFQUNKLE9BQU8sSUFBSUUsR0FBZ0IsQ0FDekJDLEtBQU1ILEVBQU0sR0FDWkksTUFBT0osRUFBTSxHQUNibnBCLEtBQU1tcEIsRUFBTSxHQUNaSyxPQUFRTCxFQUFNLEdBQ2RwQyxLQUFNb0MsRUFBTSxHQUNacFYsTUFBT29WLEVBQU0sR0FDYk0sTUFBT04sRUFBTSxHQUNieFYsVUFBV3dWLEVBQU0sSUFBTUEsRUFBTSxHQUFHdEMsTUFBTSxHQUN0Q2hvQixLQUFNc3FCLEVBQU0sR0FDWm5iLEtBQU1tYixFQUFNLE1BTVQsU0FBU0UsR0FBZ0JILEdBQzlCem5CLEtBQUs2bkIsVUFBMEIvVixJQUFuQjJWLEVBQVVJLEtBQXFCLElBQU1KLEVBQVVJLEtBQU8sR0FDbEU3bkIsS0FBSzhuQixXQUE0QmhXLElBQXBCMlYsRUFBVUssTUFBc0IsSUFBTUwsRUFBVUssTUFBUSxHQUNyRTluQixLQUFLekIsVUFBMEJ1VCxJQUFuQjJWLEVBQVVscEIsS0FBcUIsSUFBTWtwQixFQUFVbHBCLEtBQU8sR0FDbEV5QixLQUFLK25CLFlBQThCalcsSUFBckIyVixFQUFVTSxPQUF1QixHQUFLTixFQUFVTSxPQUFTLEdBQ3ZFL25CLEtBQUtzbEIsT0FBU21DLEVBQVVuQyxLQUN4QnRsQixLQUFLc1MsV0FBNEJSLElBQXBCMlYsRUFBVW5WLFdBQXNCUixHQUFhMlYsRUFBVW5WLE1BQ3BFdFMsS0FBS2dvQixRQUFVUCxFQUFVTyxNQUN6QmhvQixLQUFLa1MsZUFBb0NKLElBQXhCMlYsRUFBVXZWLGVBQTBCSixHQUFhMlYsRUFBVXZWLFVBQzVFbFMsS0FBSzVDLE9BQVNxcUIsRUFBVXJxQixLQUN4QjRDLEtBQUt1TSxVQUEwQnVGLElBQW5CMlYsRUFBVWxiLEtBQXFCLEdBQUtrYixFQUFVbGIsS0FBTyxHRXZCNUQsU0FBUzBiLEdBQW1CenBCLEVBQUc4QixHQUNwQyxJQUFLTSxHQUFLcEMsRUFBSThCLEVBQUk5QixFQUFFMHBCLGNBQWM1bkIsRUFBSSxHQUFLOUIsRUFBRTBwQixpQkFBaUJDLFFBQVEsTUFBUSxFQUFHLE9BQU8sS0FDeEYsSUFBSXZuQixFQUFHd25CLEVBQWM1cEIsRUFBRTRtQixNQUFNLEVBQUd4a0IsR0FJaEMsTUFBTyxDQUNMd25CLEVBQVkvb0IsT0FBUyxFQUFJK29CLEVBQVksR0FBS0EsRUFBWWhELE1BQU0sR0FBS2dELEdBQ2hFNXBCLEVBQUU0bUIsTUFBTXhrQixFQUFJLElDZkYsWUFBU3BDLEdBQ3RCLE9BQU9BLEVBQUl5cEIsR0FBbUIxcUIsS0FBS0ssSUFBSVksS0FBU0EsRUFBRSxHQUFLdUgsSUNEMUMsWUFBU3ZILEVBQUc4QixHQUN6QixJQUFJdUMsRUFBSW9sQixHQUFtQnpwQixFQUFHOEIsR0FDOUIsSUFBS3VDLEVBQUcsT0FBT3JFLEVBQUksR0FDbkIsSUFBSTRwQixFQUFjdmxCLEVBQUUsR0FDaEJ3bEIsRUFBV3hsQixFQUFFLEdBQ2pCLE9BQU93bEIsRUFBVyxFQUFJLEtBQU8sSUFBSW5sQixPQUFPbWxCLEdBQVUxUyxLQUFLLEtBQU95UyxFQUN4REEsRUFBWS9vQixPQUFTZ3BCLEVBQVcsRUFBSUQsRUFBWWhELE1BQU0sRUFBR2lELEVBQVcsR0FBSyxJQUFNRCxFQUFZaEQsTUFBTWlELEVBQVcsR0FDNUdELEVBQWMsSUFBSWxsQixNQUFNbWxCLEVBQVdELEVBQVkvb0IsT0FBUyxHQUFHc1csS0FBSyxLSld4RTZSLEdBQWdCaGIsVUFBWW9iLEdBQWdCcGIsVUFlNUNvYixHQUFnQnBiLFVBQVVxVyxTQUFXLFdBQ25DLE9BQU83aUIsS0FBSzZuQixLQUNON25CLEtBQUs4bkIsTUFDTDluQixLQUFLekIsS0FDTHlCLEtBQUsrbkIsUUFDSi9uQixLQUFLc2xCLEtBQU8sSUFBTSxVQUNIeFQsSUFBZjlSLEtBQUtzUyxNQUFzQixHQUFLL1UsS0FBS2tOLElBQUksRUFBZ0IsRUFBYnpLLEtBQUtzUyxTQUNqRHRTLEtBQUtnb0IsTUFBUSxJQUFNLFVBQ0FsVyxJQUFuQjlSLEtBQUtrUyxVQUEwQixHQUFLLElBQU0zVSxLQUFLa04sSUFBSSxFQUFvQixFQUFqQnpLLEtBQUtrUyxhQUMzRGxTLEtBQUs1QyxLQUFPLElBQU0sSUFDbkI0QyxLQUFLdU0sTUt6Q2IsVUFDRSxJQUFLLENBQUMvTixFQUFHOEIsS0FBVyxJQUFKOUIsR0FBUzhwQixRQUFRaG9CLEdBQ2pDLEVBQU05QixHQUFNakIsS0FBSzJOLE1BQU0xTSxHQUFHcWtCLFNBQVMsR0FDbkMsRUFBTXJrQixHQUFNQSxFQUFJLEdBQ2hCLEVIUmEsU0FBU0EsR0FDdEIsT0FBT2pCLEtBQUtLLElBQUlZLEVBQUlqQixLQUFLMk4sTUFBTTFNLEtBQU8sS0FDaENBLEVBQUUrcEIsZUFBZSxNQUFNcHJCLFFBQVEsS0FBTSxJQUNyQ3FCLEVBQUVxa0IsU0FBUyxLR01qQixFQUFLLENBQUNya0IsRUFBRzhCLElBQU05QixFQUFFMHBCLGNBQWM1bkIsR0FDL0IsRUFBSyxDQUFDOUIsRUFBRzhCLElBQU05QixFQUFFOHBCLFFBQVFob0IsR0FDekIsRUFBSyxDQUFDOUIsRUFBRzhCLElBQU05QixFQUFFZ3FCLFlBQVlsb0IsR0FDN0IsRUFBTTlCLEdBQU1qQixLQUFLMk4sTUFBTTFNLEdBQUdxa0IsU0FBUyxHQUNuQyxFQUFLLENBQUNya0IsRUFBRzhCLElBQU1tb0IsR0FBa0IsSUFBSmpxQixFQUFTOEIsR0FDdEMsRUFBS21vQixHQUNMLEVKWGEsU0FBU2pxQixFQUFHOEIsR0FDekIsSUFBSXVDLEVBQUlvbEIsR0FBbUJ6cEIsRUFBRzhCLEdBQzlCLElBQUt1QyxFQUFHLE9BQU9yRSxFQUFJLEdBQ25CLElBQUk0cEIsRUFBY3ZsQixFQUFFLEdBQ2hCd2xCLEVBQVd4bEIsRUFBRSxHQUNiakMsRUFBSXluQixHQUFZZixHQUF1RSxFQUF0RC9wQixLQUFLa04sS0FBSyxFQUFHbE4sS0FBS21OLElBQUksRUFBR25OLEtBQUtXLE1BQU1tcUIsRUFBVyxNQUFZLEVBQzVGaG9CLEVBQUkrbkIsRUFBWS9vQixPQUNwQixPQUFPdUIsSUFBTVAsRUFBSStuQixFQUNYeG5CLEVBQUlQLEVBQUkrbkIsRUFBYyxJQUFJbGxCLE1BQU10QyxFQUFJUCxFQUFJLEdBQUdzVixLQUFLLEtBQ2hEL1UsRUFBSSxFQUFJd25CLEVBQVloRCxNQUFNLEVBQUd4a0IsR0FBSyxJQUFNd25CLEVBQVloRCxNQUFNeGtCLEdBQzFELEtBQU8sSUFBSXNDLE1BQU0sRUFBSXRDLEdBQUcrVSxLQUFLLEtBQU9zUyxHQUFtQnpwQixFQUFHakIsS0FBS2tOLElBQUksRUFBR25LLEVBQUlNLEVBQUksSUFBSSxJSUV4RixFQUFNcEMsR0FBTWpCLEtBQUsyTixNQUFNMU0sR0FBR3FrQixTQUFTLElBQUk2RixjQUN2QyxFQUFNbHFCLEdBQU1qQixLQUFLMk4sTUFBTTFNLEdBQUdxa0IsU0FBUyxLQ2pCdEIsWUFBU3JrQixHQUN0QixPQUFPQSxFQ1FULElDUEksR0FDT3FqQixHQUNBOEcsR0RLUHhCLEdBQU1qa0IsTUFBTXNKLFVBQVUyYSxJQUN0QnlCLEdBQVcsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtFTHhFLFNBQVNDLEdBQVUxYSxHQUN4QixJQUFJOFgsRUFBUzlYLEVBQU04WCxPQWtEbkIsT0FoREE5WCxFQUFNMmEsTUFBUSxTQUFTN1MsR0FDckIsSUFBSXBULEVBQUlvakIsSUFDUixPakNOVyxTQUFTNWtCLEVBQU8yVSxFQUFNQyxHQUNuQyxJQUFJdVEsRUFFQW5tQixFQUNBeW9CLEVBQ0FuZ0IsRUFIQS9ILEdBQUssRUFNVCxHQUQ4QnFWLEdBQVNBLEdBQXpCNVUsR0FBU0EsS0FBdkIyVSxHQUFRQSxJQUNjQyxFQUFRLEVBQUcsTUFBTyxDQUFDNVUsR0FFekMsSUFESW1sQixFQUFVeFEsRUFBTzNVLEtBQU9oQixFQUFJZ0IsRUFBT0EsRUFBUTJVLEVBQU1BLEVBQU8zVixHQUNULEtBQTlDc0ksRUFBT29OLEdBQWMxVSxFQUFPMlUsRUFBTUMsTUFBa0I4UyxTQUFTcGdCLEdBQU8sTUFBTyxHQUVoRixHQUFJQSxFQUFPLEVBSVQsSUFIQXRILEVBQVE5RCxLQUFLUyxLQUFLcUQsRUFBUXNILEdBQzFCcU4sRUFBT3pZLEtBQUtXLE1BQU04WCxFQUFPck4sR0FDekJtZ0IsRUFBUSxJQUFJNWxCLE1BQU03QyxFQUFJOUMsS0FBS1MsS0FBS2dZLEVBQU8zVSxFQUFRLE1BQ3RDVCxFQUFJUCxHQUFHeW9CLEVBQU1sb0IsSUFBTVMsRUFBUVQsR0FBSytILE9BTXpDLElBSkFBLEdBQVFBLEVBQ1J0SCxFQUFROUQsS0FBS1MsS0FBS3FELEVBQVFzSCxHQUMxQnFOLEVBQU96WSxLQUFLVyxNQUFNOFgsRUFBT3JOLEdBQ3pCbWdCLEVBQVEsSUFBSTVsQixNQUFNN0MsRUFBSTlDLEtBQUtTLEtBQUtnWSxFQUFPM1UsRUFBUSxNQUN0Q1QsRUFBSVAsR0FBR3lvQixFQUFNbG9CLElBQU1TLEVBQVFULEdBQUsrSCxFQUszQyxPQUZJNmQsR0FBU3NDLEVBQU10QyxVQUVac0MsRWlDckJFQSxDQUFNam1CLEVBQUUsR0FBSUEsRUFBRUEsRUFBRXhELE9BQVMsR0FBYSxNQUFUNFcsRUFBZ0IsR0FBS0EsSUFHM0Q5SCxFQUFNNmEsV0FBYSxTQUFTL1MsRUFBT3dSLEdBQ2pDLElBQUk1a0IsRUFBSW9qQixJQUNSLE9DWlcsU0FBb0I1a0IsRUFBTzJVLEVBQU1DLEVBQU93UixHQUNyRCxJQUNJdlYsRUFEQXZKLEVsQ3VDQyxTQUFrQnRILEVBQU8yVSxFQUFNQyxHQUNwQyxJQUFJZ1QsRUFBUTFyQixLQUFLSyxJQUFJb1ksRUFBTzNVLEdBQVM5RCxLQUFLa04sSUFBSSxFQUFHd0wsR0FDN0NpVCxFQUFRM3JCLEtBQUtjLElBQUksR0FBSWQsS0FBS1csTUFBTVgsS0FBS2EsSUFBSTZxQixHQUFTMXJCLEtBQUs0WSxPQUN2REMsRUFBUTZTLEVBQVFDLEVBSXBCLE9BSEk5UyxHQUFTUixHQUFLc1QsR0FBUyxHQUNsQjlTLEdBQVNQLEdBQUlxVCxHQUFTLEVBQ3RCOVMsR0FBU04sS0FBSW9ULEdBQVMsR0FDeEJsVCxFQUFPM1UsR0FBUzZuQixFQUFRQSxFa0M5Q3BCQyxDQUFTOW5CLEVBQU8yVSxFQUFNQyxHQUdqQyxRQURBd1IsRUFBWUQsR0FBNkIsTUFBYkMsRUFBb0IsS0FBT0EsSUFDckNsYixNQUNoQixJQUFLLElBQ0gsSUFBSXFXLEVBQVFybEIsS0FBS2tOLElBQUlsTixLQUFLSyxJQUFJeUQsR0FBUTlELEtBQUtLLElBQUlvWSxJQUUvQyxPQUQyQixNQUF2QnlSLEVBQVV2VixXQUFzQnlRLE1BQU16USxFQ1JqQyxTQUFTdkosRUFBTWlhLEdBQzVCLE9BQU9ybEIsS0FBS2tOLElBQUksRUFBZ0UsRUFBN0RsTixLQUFLa04sS0FBSyxFQUFHbE4sS0FBS21OLElBQUksRUFBR25OLEtBQUtXLE1BQU1tcUIsR0FBU3pGLEdBQVMsS0FBV3lGLEdBQVM5cUIsS0FBS0ssSUFBSStLLEtETzVDeWdCLENBQWdCemdCLEVBQU1pYSxNQUFTNkUsRUFBVXZWLFVBQVlBLEdBQ3BHeVcsR0FBYWxCLEVBQVc3RSxHQUVqQyxJQUFLLEdBQ0wsSUFBSyxJQUNMLElBQUssSUFDTCxJQUFLLElBQ0wsSUFBSyxJQUN3QixNQUF2QjZFLEVBQVV2VixXQUFzQnlRLE1BQU16USxFRWhCakMsU0FBU3ZKLEVBQU04QixHQUU1QixPQURBOUIsRUFBT3BMLEtBQUtLLElBQUkrSyxHQUFPOEIsRUFBTWxOLEtBQUtLLElBQUk2TSxHQUFPOUIsRUFDdENwTCxLQUFLa04sSUFBSSxFQUFHNGQsR0FBUzVkLEdBQU80ZCxHQUFTMWYsSUFBUyxFRmNLMGdCLENBQWUxZ0IsRUFBTXBMLEtBQUtrTixJQUFJbE4sS0FBS0ssSUFBSXlELEdBQVE5RCxLQUFLSyxJQUFJb1ksUUFBVXlSLEVBQVV2VixVQUFZQSxHQUFnQyxNQUFuQnVWLEVBQVVsYixPQUNySyxNQUVGLElBQUssSUFDTCxJQUFLLElBQ3dCLE1BQXZCa2IsRUFBVXZWLFdBQXNCeVEsTUFBTXpRLEVHckJqQyxTQUFTdkosR0FDdEIsT0FBT3BMLEtBQUtrTixJQUFJLEdBQUk0ZCxHQUFTOXFCLEtBQUtLLElBQUkrSyxLSG9Cb0IyZ0IsQ0FBZTNnQixNQUFROGUsRUFBVXZWLFVBQVlBLEVBQXVDLEdBQVAsTUFBbkJ1VixFQUFVbGIsT0FJOUgsT0FBT3NWLEdBQU80RixHRFpMdUIsQ0FBV25tQixFQUFFLEdBQUlBLEVBQUVBLEVBQUV4RCxPQUFTLEdBQWEsTUFBVDRXLEVBQWdCLEdBQUtBLEVBQU93UixJQUd2RXRaLEVBQU1vYixLQUFPLFNBQVN0VCxHQUNQLE1BQVRBLElBQWVBLEVBQVEsSUFFM0IsSUFLSXVULEVBQ0E3Z0IsRUFOQTlGLEVBQUlvakIsSUFDSndELEVBQUssRUFDTEMsRUFBSzdtQixFQUFFeEQsT0FBUyxFQUNoQmdDLEVBQVF3QixFQUFFNG1CLEdBQ1Z6VCxFQUFPblQsRUFBRTZtQixHQUdUQyxFQUFVLEdBT2QsSUFMSTNULEVBQU8zVSxJQUNUc0gsRUFBT3RILEVBQU9BLEVBQVEyVSxFQUFNQSxFQUFPck4sRUFDbkNBLEVBQU84Z0IsRUFBSUEsRUFBS0MsRUFBSUEsRUFBSy9nQixHQUdwQmdoQixLQUFZLEdBQUcsQ0FFcEIsSUFEQWhoQixFQUFPb04sR0FBYzFVLEVBQU8yVSxFQUFNQyxNQUNyQnVULEVBR1gsT0FGQTNtQixFQUFFNG1CLEdBQU1wb0IsRUFDUndCLEVBQUU2bUIsR0FBTTFULEVBQ0RpUSxFQUFPcGpCLEdBQ1QsR0FBSThGLEVBQU8sRUFDaEJ0SCxFQUFROUQsS0FBS1csTUFBTW1ELEVBQVFzSCxHQUFRQSxFQUNuQ3FOLEVBQU96WSxLQUFLUyxLQUFLZ1ksRUFBT3JOLEdBQVFBLE1BQzNCLE1BQUlBLEVBQU8sR0FJaEIsTUFIQXRILEVBQVE5RCxLQUFLUyxLQUFLcUQsRUFBUXNILEdBQVFBLEVBQ2xDcU4sRUFBT3pZLEtBQUtXLE1BQU04WCxFQUFPck4sR0FBUUEsRUFJbkM2Z0IsRUFBVTdnQixFQUdaLE9BQU93RixHQUdGQSxFQUdNLFNBQVMsS0FDdEIsSUFBSUEsRUFBUTBZLEtBUVosT0FOQTFZLEVBQU1xVixLQUFPLFdBQ1gsT0FBT0EsR0FBS3JWLEVBQU8sT0FHckJrWixHQUFVN1YsTUFBTXJELEVBQU8wRCxXQUVoQmdYLEdBQVUxYSxHS3BFbkIsU0FBU3liLE1BRU0sWUFBU0MsR0FDdEIsT0FBbUIsTUFBWkEsRUFBbUJELEdBQU8sV0FDL0IsT0FBTzVwQixLQUFLOHBCLGNBQWNELElDSmYsWUFBU3JyQixHQUN0QixNQUFvQixpQkFBTkEsR0FBa0IsV0FBWUEsRUFDeENBLEVBQ0EwRSxNQUFNQyxLQUFLM0UsR0NIakIsU0FBU3VyQixLQUNQLE1BQU8sR0FHTSxZQUFTRixHQUN0QixPQUFtQixNQUFaQSxFQUFtQkUsR0FBUSxXQUNoQyxPQUFPL3BCLEtBQUtncUIsaUJBQWlCSCxJQ05sQixZQUFTQSxHQUN0QixPQUFPLFdBQ0wsT0FBTzdwQixLQUFLaXFCLFFBQVFKLElBSWpCLFNBQVNLLEdBQWFMLEdBQzNCLE9BQU8sU0FBU00sR0FDZCxPQUFPQSxFQUFLRixRQUFRSixJVEt0QixHRERhLFNBQVNPLEdBQ3RCLElXYnNCQyxFQUFVQyxFWGE1QkMsT0FBNEJ6WSxJQUFwQnNZLEVBQU9DLGVBQStDdlksSUFBckJzWSxFQUFPRSxVQUEwQixJV2J4REQsRVhhK0VsRCxHQUFJcUQsS0FBS0osRUFBT0MsU0FBVUksUVdiL0ZILEVYYXdHRixFQUFPRSxVQUFZLEdXWnBKLFNBQVMxSCxFQUFPdFEsR0FPckIsSUFOQSxJQUFJMVIsRUFBSWdpQixFQUFNdmpCLE9BQ1Z3SSxFQUFJLEdBQ0ovRixFQUFJLEVBQ0p1Z0IsRUFBSWdJLEVBQVMsR0FDYmhyQixFQUFTLEVBRU51QixFQUFJLEdBQUt5aEIsRUFBSSxJQUNkaGpCLEVBQVNnakIsRUFBSSxFQUFJL1AsSUFBTytQLEVBQUk5a0IsS0FBS2tOLElBQUksRUFBRzZILEVBQVFqVCxJQUNwRHdJLEVBQUU1SSxLQUFLMmpCLEVBQU04SCxVQUFVOXBCLEdBQUt5aEIsRUFBR3poQixFQUFJeWhCLE9BQzlCaGpCLEdBQVVnakIsRUFBSSxHQUFLL1AsS0FDeEIrUCxFQUFJZ0ksRUFBU3ZvQixHQUFLQSxFQUFJLEdBQUt1b0IsRUFBU2hyQixRQUd0QyxPQUFPd0ksRUFBRTJlLFVBQVU3USxLQUFLMlUsS1hEdEJLLE9BQXFDN1ksSUFBcEJzWSxFQUFPUSxTQUF5QixHQUFLUixFQUFPUSxTQUFTLEdBQUssR0FDM0VDLE9BQXFDL1ksSUFBcEJzWSxFQUFPUSxTQUF5QixHQUFLUixFQUFPUSxTQUFTLEdBQUssR0FDM0VFLE9BQTZCaFosSUFBbkJzWSxFQUFPVSxRQUF3QixJQUFNVixFQUFPVSxRQUFVLEdBQ2hFQyxPQUErQmpaLElBQXBCc1ksRUFBT1csU0FBeUIsR1lqQmxDLFNBQVNBLEdBQ3RCLE9BQU8sU0FBU25JLEdBQ2QsT0FBT0EsRUFBTXpsQixRQUFRLFVBQVUsU0FBU3lELEdBQ3RDLE9BQU9tcUIsR0FBVW5xQixPWmNxQ29xQixDQUFlN0QsR0FBSXFELEtBQUtKLEVBQU9XLFNBQVVFLFNBQy9GQyxPQUE2QnBaLElBQW5Cc1ksRUFBT2MsUUFBd0IsSUFBTWQsRUFBT2MsUUFBVSxHQUNoRUMsT0FBeUJyWixJQUFqQnNZLEVBQU9lLE1BQXNCLElBQU1mLEVBQU9lLE1BQVEsR0FDMURDLE9BQXFCdFosSUFBZnNZLEVBQU9nQixJQUFvQixNQUFRaEIsRUFBT2dCLElBQU0sR0FFMUQsU0FBU0MsRUFBVTVELEdBR2pCLElBQUlJLEdBRkpKLEVBQVlELEdBQWdCQyxJQUVQSSxLQUNqQkMsRUFBUUwsRUFBVUssTUFDbEJ2cEIsRUFBT2twQixFQUFVbHBCLEtBQ2pCd3BCLEVBQVNOLEVBQVVNLE9BQ25CekMsRUFBT21DLEVBQVVuQyxLQUNqQmhULEVBQVFtVixFQUFVblYsTUFDbEIwVixFQUFRUCxFQUFVTyxNQUNsQjlWLEVBQVl1VixFQUFVdlYsVUFDdEI5VSxFQUFPcXFCLEVBQVVycUIsS0FDakJtUCxFQUFPa2IsRUFBVWxiLEtBR1IsTUFBVEEsR0FBY3liLEdBQVEsRUFBTXpiLEVBQU8sS0FHN0IrZSxHQUFZL2UsVUFBcUJ1RixJQUFkSSxJQUE0QkEsRUFBWSxJQUFLOVUsR0FBTyxFQUFNbVAsRUFBTyxNQUcxRitZLEdBQWtCLE1BQVR1QyxHQUEwQixNQUFWQyxLQUFnQnhDLEdBQU8sRUFBTXVDLEVBQU8sSUFBS0MsRUFBUSxLQUk5RSxJQUFJeUQsRUFBb0IsTUFBWHhELEVBQWlCNEMsRUFBNEIsTUFBWDVDLEdBQWtCLFNBQVN5RCxLQUFLamYsR0FBUSxJQUFNQSxFQUFLdVYsY0FBZ0IsR0FDOUcySixFQUFvQixNQUFYMUQsRUFBaUI4QyxFQUFpQixPQUFPVyxLQUFLamYsR0FBUTJlLEVBQVUsR0FLekVRLEVBQWFKLEdBQVkvZSxHQUN6Qm9mLEVBQWMsYUFBYUgsS0FBS2pmLEdBVXBDLFNBQVNzVixFQUFPZSxHQUNkLElBRUloaUIsRUFBR1AsRUFBR2tJLEVBRk5xakIsRUFBY0wsRUFDZE0sRUFBY0osRUFHbEIsR0FBYSxNQUFUbGYsRUFDRnNmLEVBQWNILEVBQVc5SSxHQUFTaUosRUFDbENqSixFQUFRLE9BQ0gsQ0FJTCxJQUFJa0osR0FISmxKLEdBQVNBLEdBR21CLEdBQUssRUFBSUEsRUFBUSxFQWlCN0MsR0FkQUEsRUFBUUQsTUFBTUMsR0FBU3dJLEVBQU1NLEVBQVdudUIsS0FBS0ssSUFBSWdsQixHQUFRMVEsR0FHckQ5VSxJQUFNd2xCLEVhakZILFNBQVM1VyxHQUN0QitmLEVBQUssSUFBSyxJQUFrQ3JDLEVBQTlCcnBCLEVBQUkyTCxFQUFFM00sT0FBUXVCLEVBQUksRUFBRzZvQixHQUFNLEVBQU83b0IsRUFBSVAsSUFBS08sRUFDdkQsT0FBUW9MLEVBQUVwTCxJQUNSLElBQUssSUFBSzZvQixFQUFLQyxFQUFLOW9CLEVBQUcsTUFDdkIsSUFBSyxJQUFnQixJQUFQNm9CLElBQVVBLEVBQUs3b0IsR0FBRzhvQixFQUFLOW9CLEVBQUcsTUFDeEMsUUFBUyxLQUFNb0wsRUFBRXBMLEdBQUksTUFBTW1yQixFQUFTdEMsRUFBSyxJQUFHQSxFQUFLLEdBR3JELE9BQU9BLEVBQUssRUFBSXpkLEVBQUVvWixNQUFNLEVBQUdxRSxHQUFNemQsRUFBRW9aLE1BQU1zRSxFQUFLLEdBQUsxZCxFYnlFM0JnZ0IsQ0FBV3BKLElBR3pCa0osR0FBNEIsSUFBVmxKLEdBQXdCLE1BQVRya0IsSUFBY3V0QixHQUFnQixHQUduRUYsR0FBZUUsRUFBMEIsTUFBVHZ0QixFQUFlQSxFQUFPNHNCLEVBQWtCLE1BQVQ1c0IsR0FBeUIsTUFBVEEsRUFBZSxHQUFLQSxHQUFRcXRCLEVBQzNHQyxHQUF3QixNQUFUdGYsRUFBZXFjLEdBQVMsRUFBSXRCLEdBQWlCLEdBQUssSUFBTXVFLEdBQWVDLEdBQTBCLE1BQVR2dEIsRUFBZSxJQUFNLElBSXhIb3RCLEVBRUYsSUFEQS9xQixHQUFLLEVBQUdQLEVBQUl1aUIsRUFBTXZqQixTQUNUdUIsRUFBSVAsR0FDWCxHQUE2QixJQUF6QmtJLEVBQUlxYSxFQUFNcUosV0FBV3JyQixLQUFjMkgsRUFBSSxHQUFJLENBQzdDc2pCLEdBQXFCLEtBQU50akIsRUFBV3VpQixFQUFVbEksRUFBTXdDLE1BQU14a0IsRUFBSSxHQUFLZ2lCLEVBQU13QyxNQUFNeGtCLElBQU1pckIsRUFDM0VqSixFQUFRQSxFQUFNd0MsTUFBTSxFQUFHeGtCLEdBQ3ZCLE9BT0pvbkIsSUFBVTFDLElBQU0xQyxFQUFRMkgsRUFBTTNILEVBQU8vVSxNQUd6QyxJQUFJeE8sRUFBU3VzQixFQUFZdnNCLE9BQVN1akIsRUFBTXZqQixPQUFTd3NCLEVBQVl4c0IsT0FDekQ2c0IsRUFBVTdzQixFQUFTaVQsRUFBUSxJQUFJcFAsTUFBTW9QLEVBQVFqVCxFQUFTLEdBQUdzVyxLQUFLa1MsR0FBUSxHQU0xRSxPQUhJRyxHQUFTMUMsSUFBTTFDLEVBQVEySCxFQUFNMkIsRUFBVXRKLEVBQU9zSixFQUFRN3NCLE9BQVNpVCxFQUFRdVosRUFBWXhzQixPQUFTd08sS0FBV3FlLEVBQVUsSUFHN0dwRSxHQUNOLElBQUssSUFBS2xGLEVBQVFnSixFQUFjaEosRUFBUWlKLEVBQWNLLEVBQVMsTUFDL0QsSUFBSyxJQUFLdEosRUFBUWdKLEVBQWNNLEVBQVV0SixFQUFRaUosRUFBYSxNQUMvRCxJQUFLLElBQUtqSixFQUFRc0osRUFBUTlHLE1BQU0sRUFBRy9sQixFQUFTNnNCLEVBQVE3c0IsUUFBVSxHQUFLdXNCLEVBQWNoSixFQUFRaUosRUFBY0ssRUFBUTlHLE1BQU0vbEIsR0FBUyxNQUM5SCxRQUFTdWpCLEVBQVFzSixFQUFVTixFQUFjaEosRUFBUWlKLEVBR25ELE9BQU9kLEVBQVNuSSxHQU9sQixPQXRFQTFRLE9BQTBCSixJQUFkSSxFQUEwQixFQUNoQyxTQUFTc1osS0FBS2pmLEdBQVFoUCxLQUFLa04sSUFBSSxFQUFHbE4sS0FBS21OLElBQUksR0FBSXdILElBQy9DM1UsS0FBS2tOLElBQUksRUFBR2xOLEtBQUttTixJQUFJLEdBQUl3SCxJQWdFL0IyUCxFQUFPZ0IsU0FBVyxXQUNoQixPQUFPNEUsRUFBWSxJQUdkNUYsRUFhVCxNQUFPLENBQ0xBLE9BQVF3SixFQUNSMUMsYUFaRixTQUFzQmxCLEVBQVc3RSxHQUMvQixJQUFJdk0sRUFBSWdWLElBQVc1RCxFQUFZRCxHQUFnQkMsSUFBc0JsYixLQUFPLElBQUtrYixJQUM3RXRuQixFQUFpRSxFQUE3RDVDLEtBQUtrTixLQUFLLEVBQUdsTixLQUFLbU4sSUFBSSxFQUFHbk4sS0FBS1csTUFBTW1xQixHQUFTekYsR0FBUyxLQUMxRGpnQixFQUFJcEYsS0FBS2MsSUFBSSxJQUFLOEIsR0FDbEJvckIsRUFBUzNDLEdBQVMsRUFBSXpvQixFQUFJLEdBQzlCLE9BQU8sU0FBU3lpQixHQUNkLE9BQU92TSxFQUFFMVQsRUFBSWlnQixHQUFTMkksS0M5SGpCLENBUEcsQ0FDWmpCLFVBQVcsSUFDWEQsU0FBVSxDQUFDLEdBQ1hPLFNBQVUsQ0FBQyxJQUFLLE1BS2hCL0ksR0FBUyxHQUFPQSxPQUNoQjhHLEdBQWUsR0FBT0EsYWFieEIsSUFBSXdELEdBQU9qcEIsTUFBTXNKLFVBQVUyZixLQVEzQixTQUFTQyxLQUNQLE9BQU9wc0IsS0FBS3FzQixrQkNUZCxJQUFJeG1CLEdBQVMzQyxNQUFNc0osVUFBVTNHLE9BRTdCLFNBQVN5bUIsS0FDUCxPQUFPdHNCLEtBQUtzc0IsU0NMQyxZQUFTQyxHQUN0QixPQUFPLElBQUlycEIsTUFBTXFwQixFQUFPbHRCLFFDTW5CLFNBQVNtdEIsR0FBVXZWLEVBQVF3VixHQUNoQ3pzQixLQUFLMHNCLGNBQWdCelYsRUFBT3lWLGNBQzVCMXNCLEtBQUsyc0IsYUFBZTFWLEVBQU8wVixhQUMzQjNzQixLQUFLNHNCLE1BQVEsS0FDYjVzQixLQUFLNnNCLFFBQVU1VixFQUNmalgsS0FBSzhzQixTQUFXTCxFQ1pILFlBQVNqdUIsR0FDdEIsT0FBTyxXQUNMLE9BQU9BLEdDR1gsU0FBU3V1QixHQUFVOVYsRUFBUXNULEVBQU95QyxFQUFPVCxFQUFRVSxFQUFNQyxHQVNyRCxJQVJBLElBQ0kvQyxFQURBdnBCLEVBQUksRUFFSnVzQixFQUFjNUMsRUFBTWxyQixPQUNwQit0QixFQUFhRixFQUFLN3RCLE9BS2Z1QixFQUFJd3NCLElBQWN4c0IsR0FDbkJ1cEIsRUFBT0ksRUFBTTNwQixLQUNmdXBCLEVBQUsyQyxTQUFXSSxFQUFLdHNCLEdBQ3JCMnJCLEVBQU8zckIsR0FBS3VwQixHQUVaNkMsRUFBTXBzQixHQUFLLElBQUk0ckIsR0FBVXZWLEVBQVFpVyxFQUFLdHNCLElBSzFDLEtBQU9BLEVBQUl1c0IsSUFBZXZzQixHQUNwQnVwQixFQUFPSSxFQUFNM3BCLE1BQ2Zxc0IsRUFBS3JzQixHQUFLdXBCLEdBS2hCLFNBQVNrRCxHQUFRcFcsRUFBUXNULEVBQU95QyxFQUFPVCxFQUFRVSxFQUFNQyxFQUFNaGhCLEdBQ3pELElBQUl0TCxFQUNBdXBCLEVBS0FtRCxFQUpBQyxFQUFpQixJQUFJQyxJQUNyQkwsRUFBYzVDLEVBQU1sckIsT0FDcEIrdEIsRUFBYUYsRUFBSzd0QixPQUNsQm91QixFQUFZLElBQUl2cUIsTUFBTWlxQixHQUsxQixJQUFLdnNCLEVBQUksRUFBR0EsRUFBSXVzQixJQUFldnNCLEdBQ3pCdXBCLEVBQU9JLEVBQU0zcEIsTUFDZjZzQixFQUFVN3NCLEdBQUswc0IsRUFBV3BoQixFQUFJc2UsS0FBS0wsRUFBTUEsRUFBSzJDLFNBQVVsc0IsRUFBRzJwQixHQUFTLEdBQ2hFZ0QsRUFBZUcsSUFBSUosR0FDckJMLEVBQUtyc0IsR0FBS3VwQixFQUVWb0QsRUFBZUksSUFBSUwsRUFBVW5ELElBUW5DLElBQUt2cEIsRUFBSSxFQUFHQSxFQUFJd3NCLElBQWN4c0IsRUFDNUIwc0IsRUFBV3BoQixFQUFJc2UsS0FBS3ZULEVBQVFpVyxFQUFLdHNCLEdBQUlBLEVBQUdzc0IsR0FBUSxJQUM1Qy9DLEVBQU9vRCxFQUFlSyxJQUFJTixLQUM1QmYsRUFBTzNyQixHQUFLdXBCLEVBQ1pBLEVBQUsyQyxTQUFXSSxFQUFLdHNCLEdBQ3JCMnNCLEVBQWVNLE9BQU9QLElBRXRCTixFQUFNcHNCLEdBQUssSUFBSTRyQixHQUFVdlYsRUFBUWlXLEVBQUt0c0IsSUFLMUMsSUFBS0EsRUFBSSxFQUFHQSxFQUFJdXNCLElBQWV2c0IsR0FDeEJ1cEIsRUFBT0ksRUFBTTNwQixLQUFRMnNCLEVBQWVLLElBQUlILEVBQVU3c0IsTUFBUXVwQixJQUM3RDhDLEVBQUtyc0IsR0FBS3VwQixHQUtoQixTQUFTc0MsR0FBTXRDLEdBQ2IsT0FBT0EsRUFBSzJDLFNDdkRkLFNBQVMsR0FBVXB0QixFQUFHQyxHQUNwQixPQUFPRCxFQUFJQyxHQUFLLEVBQUlELEVBQUlDLEVBQUksRUFBSUQsR0FBS0MsRUFBSSxFQUFJb0csSUhQL0N5bUIsR0FBVWhnQixVQUFZLENBQ3BCQyxZQUFhK2YsR0FDYnNCLFlBQWEsU0FBU0MsR0FBUyxPQUFPL3RCLEtBQUs2c0IsUUFBUW1CLGFBQWFELEVBQU8vdEIsS0FBSzRzQixRQUM1RW9CLGFBQWMsU0FBU0QsRUFBT0UsR0FBUSxPQUFPanVCLEtBQUs2c0IsUUFBUW1CLGFBQWFELEVBQU9FLElBQzlFbkUsY0FBZSxTQUFTRCxHQUFZLE9BQU83cEIsS0FBSzZzQixRQUFRL0MsY0FBY0QsSUFDdEVHLGlCQUFrQixTQUFTSCxHQUFZLE9BQU83cEIsS0FBSzZzQixRQUFRN0MsaUJBQWlCSCxLSXBCdkUsSUFBSXFFLEdBQVEsK0JBRW5CLFVBQ0VDLElBQUssNkJBQ0xELE1BQU9BLEdBQ1BFLE1BQU8sK0JBQ1BDLElBQUssdUNBQ0xDLE1BQU8saUNDTE0sWUFBU0MsR0FDdEIsSUFBSWhELEVBQVNnRCxHQUFRLEdBQUkzdEIsRUFBSTJxQixFQUFPcEQsUUFBUSxLQUU1QyxPQURJdm5CLEdBQUssR0FBcUMsV0FBL0IycUIsRUFBU2dELEVBQUtuSixNQUFNLEVBQUd4a0IsTUFBaUIydEIsRUFBT0EsRUFBS25KLE1BQU14a0IsRUFBSSxJQUN0RTR0QixHQUFXbGlCLGVBQWVpZixHQUFVLENBQUNrRCxNQUFPRCxHQUFXakQsR0FBU21ELE1BQU9ILEdBQVFBLEVDSHhGLFNBQVNJLEdBQVdKLEdBQ2xCLE9BQU8sV0FDTHZ1QixLQUFLNHVCLGdCQUFnQkwsSUFJekIsU0FBU00sR0FBYUMsR0FDcEIsT0FBTyxXQUNMOXVCLEtBQUsrdUIsa0JBQWtCRCxFQUFTTCxNQUFPSyxFQUFTSixRQUlwRCxTQUFTTSxHQUFhVCxFQUFNM0wsR0FDMUIsT0FBTyxXQUNMNWlCLEtBQUtpdkIsYUFBYVYsRUFBTTNMLElBSTVCLFNBQVNzTSxHQUFlSixFQUFVbE0sR0FDaEMsT0FBTyxXQUNMNWlCLEtBQUttdkIsZUFBZUwsRUFBU0wsTUFBT0ssRUFBU0osTUFBTzlMLElBSXhELFNBQVN3TSxHQUFhYixFQUFNM0wsR0FDMUIsT0FBTyxXQUNMLElBQUl4aUIsRUFBSXdpQixFQUFNcFIsTUFBTXhSLEtBQU02UixXQUNqQixNQUFMelIsRUFBV0osS0FBSzR1QixnQkFBZ0JMLEdBQy9CdnVCLEtBQUtpdkIsYUFBYVYsRUFBTW51QixJQUlqQyxTQUFTaXZCLEdBQWVQLEVBQVVsTSxHQUNoQyxPQUFPLFdBQ0wsSUFBSXhpQixFQUFJd2lCLEVBQU1wUixNQUFNeFIsS0FBTTZSLFdBQ2pCLE1BQUx6UixFQUFXSixLQUFLK3VCLGtCQUFrQkQsRUFBU0wsTUFBT0ssRUFBU0osT0FDMUQxdUIsS0FBS212QixlQUFlTCxFQUFTTCxNQUFPSyxFQUFTSixNQUFPdHVCLElDdEM5QyxZQUFTK3BCLEdBQ3RCLE9BQVFBLEVBQUt1QyxlQUFpQnZDLEVBQUt1QyxjQUFjNEMsYUFDekNuRixFQUFLbnRCLFVBQVltdEIsR0FDbEJBLEVBQUttRixZQ0RkLFNBQVNDLEdBQVloQixHQUNuQixPQUFPLFdBQ0x2dUIsS0FBS3d2QixNQUFNQyxlQUFlbEIsSUFJOUIsU0FBU21CLEdBQWNuQixFQUFNM0wsRUFBTytNLEdBQ2xDLE9BQU8sV0FDTDN2QixLQUFLd3ZCLE1BQU1JLFlBQVlyQixFQUFNM0wsRUFBTytNLElBSXhDLFNBQVNFLEdBQWN0QixFQUFNM0wsRUFBTytNLEdBQ2xDLE9BQU8sV0FDTCxJQUFJdnZCLEVBQUl3aUIsRUFBTXBSLE1BQU14UixLQUFNNlIsV0FDakIsTUFBTHpSLEVBQVdKLEtBQUt3dkIsTUFBTUMsZUFBZWxCLEdBQ3BDdnVCLEtBQUt3dkIsTUFBTUksWUFBWXJCLEVBQU1udUIsRUFBR3V2QixJQWFsQyxTQUFTRyxHQUFXM0YsRUFBTW9FLEdBQy9CLE9BQU9wRSxFQUFLcUYsTUFBTXR5QixpQkFBaUJxeEIsSUFDNUIsR0FBWXBFLEdBQU1wdEIsaUJBQWlCb3RCLEVBQU0sTUFBTWp0QixpQkFBaUJxeEIsR0NqQ3pFLFNBQVN3QixHQUFleEIsR0FDdEIsT0FBTyxrQkFDRXZ1QixLQUFLdXVCLElBSWhCLFNBQVN5QixHQUFpQnpCLEVBQU0zTCxHQUM5QixPQUFPLFdBQ0w1aUIsS0FBS3V1QixHQUFRM0wsR0FJakIsU0FBU3FOLEdBQWlCMUIsRUFBTTNMLEdBQzlCLE9BQU8sV0FDTCxJQUFJeGlCLEVBQUl3aUIsRUFBTXBSLE1BQU14UixLQUFNNlIsV0FDakIsTUFBTHpSLFNBQWtCSixLQUFLdXVCLEdBQ3RCdnVCLEtBQUt1dUIsR0FBUW51QixHQ2hCdEIsU0FBUzh2QixHQUFXM0ssR0FDbEIsT0FBT0EsRUFBT25vQixPQUFPK3lCLE1BQU0sU0FHN0IsU0FBU0MsR0FBVWpHLEdBQ2pCLE9BQU9BLEVBQUtpRyxXQUFhLElBQUlDLEdBQVVsRyxHQUd6QyxTQUFTa0csR0FBVWxHLEdBQ2pCbnFCLEtBQUtzd0IsTUFBUW5HLEVBQ2JucUIsS0FBS3V3QixPQUFTTCxHQUFXL0YsRUFBS3FHLGFBQWEsVUFBWSxJQXVCekQsU0FBU0MsR0FBV3RHLEVBQU11RyxHQUV4QixJQURBLElBQUlDLEVBQU9QLEdBQVVqRyxHQUFPdnBCLEdBQUssRUFBR1AsRUFBSXF3QixFQUFNcnhCLFNBQ3JDdUIsRUFBSVAsR0FBR3N3QixFQUFLdnJCLElBQUlzckIsRUFBTTl2QixJQUdqQyxTQUFTZ3dCLEdBQWN6RyxFQUFNdUcsR0FFM0IsSUFEQSxJQUFJQyxFQUFPUCxHQUFVakcsR0FBT3ZwQixHQUFLLEVBQUdQLEVBQUlxd0IsRUFBTXJ4QixTQUNyQ3VCLEVBQUlQLEdBQUdzd0IsRUFBS0UsT0FBT0gsRUFBTTl2QixJQUdwQyxTQUFTa3dCLEdBQVlKLEdBQ25CLE9BQU8sV0FDTEQsR0FBV3p3QixLQUFNMHdCLElBSXJCLFNBQVNLLEdBQWFMLEdBQ3BCLE9BQU8sV0FDTEUsR0FBYzV3QixLQUFNMHdCLElBSXhCLFNBQVNNLEdBQWdCTixFQUFPOU4sR0FDOUIsT0FBTyxZQUNKQSxFQUFNcFIsTUFBTXhSLEtBQU02UixXQUFhNGUsR0FBYUcsSUFBZTV3QixLQUFNMHdCLElDekR0RSxTQUFTTyxLQUNQanhCLEtBQUtreEIsWUFBYyxHQUdyQixTQUFTQyxHQUFhdk8sR0FDcEIsT0FBTyxXQUNMNWlCLEtBQUtreEIsWUFBY3RPLEdBSXZCLFNBQVN3TyxHQUFheE8sR0FDcEIsT0FBTyxXQUNMLElBQUl4aUIsRUFBSXdpQixFQUFNcFIsTUFBTXhSLEtBQU02UixXQUMxQjdSLEtBQUtreEIsWUFBbUIsTUFBTDl3QixFQUFZLEdBQUtBLEdDYnhDLFNBQVNpeEIsS0FDUHJ4QixLQUFLc3hCLFVBQVksR0FHbkIsU0FBU0MsR0FBYTNPLEdBQ3BCLE9BQU8sV0FDTDVpQixLQUFLc3hCLFVBQVkxTyxHQUlyQixTQUFTNE8sR0FBYTVPLEdBQ3BCLE9BQU8sV0FDTCxJQUFJeGlCLEVBQUl3aUIsRUFBTXBSLE1BQU14UixLQUFNNlIsV0FDMUI3UixLQUFLc3hCLFVBQWlCLE1BQUxseEIsRUFBWSxHQUFLQSxHQ2J0QyxTQUFTcXhCLEtBQ0h6eEIsS0FBSzB4QixhQUFhMXhCLEtBQUsyeEIsV0FBVzdELFlBQVk5dEIsTUNEcEQsU0FBUzR4QixLQUNINXhCLEtBQUs2eEIsaUJBQWlCN3hCLEtBQUsyeEIsV0FBVzNELGFBQWFodUIsS0FBTUEsS0FBSzJ4QixXQUFXRyxZQ0UvRSxTQUFTQyxHQUFleEQsR0FDdEIsT0FBTyxXQUNMLElBQUl2eEIsRUFBV2dELEtBQUswc0IsY0FDaEJzRixFQUFNaHlCLEtBQUsyc0IsYUFDZixPQUFPcUYsSUFBUTlELElBQVNseEIsRUFBU2kxQixnQkFBZ0J0RixlQUFpQnVCLEdBQzVEbHhCLEVBQVNrMUIsY0FBYzNELEdBQ3ZCdnhCLEVBQVNtMUIsZ0JBQWdCSCxFQUFLekQsSUFJeEMsU0FBUzZELEdBQWF0RCxHQUNwQixPQUFPLFdBQ0wsT0FBTzl1QixLQUFLMHNCLGNBQWN5RixnQkFBZ0JyRCxFQUFTTCxNQUFPSyxFQUFTSixRQUl4RCxZQUFTSCxHQUN0QixJQUFJTyxFQUFXdUQsR0FBVTlELEdBQ3pCLE9BQVFPLEVBQVNKLE1BQ1gwRCxHQUNBTCxJQUFnQmpELEdDcEJ4QixTQUFTd0QsS0FDUCxPQUFPLEtDSlQsU0FBU3pCLEtBQ1AsSUFBSTVaLEVBQVNqWCxLQUFLMnhCLFdBQ2QxYSxHQUFRQSxFQUFPc2IsWUFBWXZ5QixNQ0ZqQyxTQUFTd3lCLEtBQ1AsSUFBSUMsRUFBUXp5QixLQUFLMHlCLFdBQVUsR0FBUXpiLEVBQVNqWCxLQUFLMnhCLFdBQ2pELE9BQU8xYSxFQUFTQSxFQUFPK1csYUFBYXlFLEVBQU96eUIsS0FBSzB4QixhQUFlZSxFQUdqRSxTQUFTRSxLQUNQLElBQUlGLEVBQVF6eUIsS0FBSzB5QixXQUFVLEdBQU96YixFQUFTalgsS0FBSzJ4QixXQUNoRCxPQUFPMWEsRUFBU0EsRUFBTytXLGFBQWF5RSxFQUFPenlCLEtBQUsweEIsYUFBZWUsRUNEakUsU0FBU0csR0FBZUMsR0FDdEIsT0FBT0EsRUFBVXoxQixPQUFPK3lCLE1BQU0sU0FBU2hKLEtBQUksU0FBU3RmLEdBQ2xELElBQUkwbUIsRUFBTyxHQUFJM3RCLEVBQUlpSCxFQUFFc2dCLFFBQVEsS0FFN0IsT0FESXZuQixHQUFLLElBQUcydEIsRUFBTzFtQixFQUFFdWQsTUFBTXhrQixFQUFJLEdBQUlpSCxFQUFJQSxFQUFFdWQsTUFBTSxFQUFHeGtCLElBQzNDLENBQUMyTCxLQUFNMUUsRUFBRzBtQixLQUFNQSxNQUkzQixTQUFTdUUsR0FBU0MsR0FDaEIsT0FBTyxXQUNMLElBQUlDLEVBQUtoekIsS0FBS2l6QixLQUNkLEdBQUtELEVBQUwsQ0FDQSxJQUFLLElBQWtDOXlCLEVBQTlCNEIsRUFBSSxFQUFHbEIsR0FBSyxFQUFHNUIsRUFBSWcwQixFQUFHM3pCLE9BQVd5QyxFQUFJOUMsSUFBSzhDLEVBQzdDNUIsRUFBSTh5QixFQUFHbHhCLEdBQU1peEIsRUFBU3htQixNQUFRck0sRUFBRXFNLE9BQVN3bUIsRUFBU3htQixNQUFTck0sRUFBRXF1QixPQUFTd0UsRUFBU3hFLEtBR2pGeUUsSUFBS3B5QixHQUFLVixFQUZWRixLQUFLa3pCLG9CQUFvQmh6QixFQUFFcU0sS0FBTXJNLEVBQUVpekIsU0FBVWp6QixFQUFFa3pCLFdBSzdDeHlCLEVBQUdveUIsRUFBRzN6QixPQUFTdUIsU0FDVFosS0FBS2l6QixPQUlyQixTQUFTSSxHQUFNTixFQUFVblEsRUFBT3dRLEdBQzlCLE9BQU8sV0FDTCxJQUFvQmx6QixFQUFoQjh5QixFQUFLaHpCLEtBQUtpekIsS0FBU0UsRUFoQzNCLFNBQXlCQSxHQUN2QixPQUFPLFNBQVNHLEdBQ2RILEVBQVMzSSxLQUFLeHFCLEtBQU1zekIsRUFBT3R6QixLQUFLOHNCLFdBOEJFeUcsQ0FBZ0IzUSxHQUNsRCxHQUFJb1EsRUFBSSxJQUFLLElBQUlseEIsRUFBSSxFQUFHOUMsRUFBSWcwQixFQUFHM3pCLE9BQVF5QyxFQUFJOUMsSUFBSzhDLEVBQzlDLElBQUs1QixFQUFJOHlCLEVBQUdseEIsSUFBSXlLLE9BQVN3bUIsRUFBU3htQixNQUFRck0sRUFBRXF1QixPQUFTd0UsRUFBU3hFLEtBSTVELE9BSEF2dUIsS0FBS2t6QixvQkFBb0JoekIsRUFBRXFNLEtBQU1yTSxFQUFFaXpCLFNBQVVqekIsRUFBRWt6QixTQUMvQ3B6QixLQUFLd3pCLGlCQUFpQnR6QixFQUFFcU0sS0FBTXJNLEVBQUVpekIsU0FBV0EsRUFBVWp6QixFQUFFa3pCLFFBQVVBLFFBQ2pFbHpCLEVBQUUwaUIsTUFBUUEsR0FJZDVpQixLQUFLd3pCLGlCQUFpQlQsRUFBU3htQixLQUFNNG1CLEVBQVVDLEdBQy9DbHpCLEVBQUksQ0FBQ3FNLEtBQU13bUIsRUFBU3htQixLQUFNZ2lCLEtBQU13RSxFQUFTeEUsS0FBTTNMLE1BQU9BLEVBQU91USxTQUFVQSxFQUFVQyxRQUFTQSxHQUNyRkosRUFDQUEsRUFBRy96QixLQUFLaUIsR0FESkYsS0FBS2l6QixLQUFPLENBQUMveUIsSUN6QzFCLFNBQVN1ekIsR0FBY3RKLEVBQU01ZCxFQUFNbW5CLEdBQ2pDLElBQUlDLEVBQVMsR0FBWXhKLEdBQ3JCbUosRUFBUUssRUFBT0MsWUFFRSxtQkFBVk4sRUFDVEEsRUFBUSxJQUFJQSxFQUFNL21CLEVBQU1tbkIsSUFFeEJKLEVBQVFLLEVBQU8zMkIsU0FBUzYyQixZQUFZLFNBQ2hDSCxHQUFRSixFQUFNUSxVQUFVdm5CLEVBQU1tbkIsRUFBT0ssUUFBU0wsRUFBT00sWUFBYVYsRUFBTVcsT0FBU1AsRUFBT08sUUFDdkZYLEVBQU1RLFVBQVV2bkIsR0FBTSxHQUFPLElBR3BDNGQsRUFBS3NKLGNBQWNILEdBR3JCLFNBQVNZLEdBQWlCM25CLEVBQU1tbkIsR0FDOUIsT0FBTyxXQUNMLE9BQU9ELEdBQWN6ekIsS0FBTXVNLEVBQU1tbkIsSUFJckMsU0FBU1MsR0FBaUI1bkIsRUFBTW1uQixHQUM5QixPQUFPLFdBQ0wsT0FBT0QsR0FBY3p6QixLQUFNdU0sRUFBTW1uQixFQUFPbGlCLE1BQU14UixLQUFNNlIsYVZaeER3ZSxHQUFVN2pCLFVBQVksQ0FDcEJwSCxJQUFLLFNBQVNtcEIsR0FDSnZ1QixLQUFLdXdCLE9BQU9wSSxRQUFRb0csR0FDcEIsSUFDTnZ1QixLQUFLdXdCLE9BQU90eEIsS0FBS3N2QixHQUNqQnZ1QixLQUFLc3dCLE1BQU1yQixhQUFhLFFBQVNqdkIsS0FBS3V3QixPQUFPNWEsS0FBSyxRQUd0RGtiLE9BQVEsU0FBU3RDLEdBQ2YsSUFBSTN0QixFQUFJWixLQUFLdXdCLE9BQU9wSSxRQUFRb0csR0FDeEIzdEIsR0FBSyxJQUNQWixLQUFLdXdCLE9BQU82RCxPQUFPeHpCLEVBQUcsR0FDdEJaLEtBQUtzd0IsTUFBTXJCLGFBQWEsUUFBU2p2QixLQUFLdXdCLE9BQU81YSxLQUFLLFFBR3REMGUsU0FBVSxTQUFTOUYsR0FDakIsT0FBT3Z1QixLQUFLdXdCLE9BQU9wSSxRQUFRb0csSUFBUyxJV01qQyxJQUFJK0YsR0FBTyxDQUFDLE1BRVosU0FBU0MsR0FBVUMsRUFBUUMsR0FDaEN6MEIsS0FBSzAwQixRQUFVRixFQUNmeDBCLEtBQUsyMEIsU0FBV0YsRUFHbEIsU0FBU0csS0FDUCxPQUFPLElBQUlMLEdBQVUsQ0FBQyxDQUFDdjNCLFNBQVNpMUIsa0JBQW1CcUMsSUFPckRDLEdBQVUvbkIsVUFBWW9vQixHQUFVcG9CLFVBQVksQ0FDMUNDLFlBQWE4bkIsR0FDYk0sT0NqRGEsU0FBU0EsR0FDQSxtQkFBWEEsSUFBdUJBLEVBQVNoTCxHQUFTZ0wsSUFFcEQsSUFBSyxJQUFJTCxFQUFTeDBCLEtBQUswMEIsUUFBUzExQixFQUFJdzFCLEVBQU9uMUIsT0FBUXkxQixFQUFZLElBQUk1eEIsTUFBTWxFLEdBQUk4QyxFQUFJLEVBQUdBLEVBQUk5QyxJQUFLOEMsRUFDM0YsSUFBSyxJQUFpRnFvQixFQUFNNEssRUFBbkZ4SyxFQUFRaUssRUFBTzF5QixHQUFJekIsRUFBSWtxQixFQUFNbHJCLE9BQVEyMUIsRUFBV0YsRUFBVWh6QixHQUFLLElBQUlvQixNQUFNN0MsR0FBbUJPLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDOUd1cEIsRUFBT0ksRUFBTTNwQixNQUFRbTBCLEVBQVVGLEVBQU9ySyxLQUFLTCxFQUFNQSxFQUFLMkMsU0FBVWxzQixFQUFHMnBCLE1BQ2xFLGFBQWNKLElBQU00SyxFQUFRakksU0FBVzNDLEVBQUsyQyxVQUNoRGtJLEVBQVNwMEIsR0FBS20wQixHQUtwQixPQUFPLElBQUlSLEdBQVVPLEVBQVc5MEIsS0FBSzIwQixXRHNDckNNLFVFMUNhLFNBQVNKLEdBQ1lBLEVBQVosbUJBQVhBLEVBUmIsU0FBa0JBLEdBQ2hCLE9BQU8sV0FDTCxJQUFJdEssRUFBUXNLLEVBQU9yakIsTUFBTXhSLEtBQU02UixXQUMvQixPQUFnQixNQUFUMFksRUFBZ0IsR0FBSyxHQUFNQSxJQUtPMkssQ0FBU0wsR0FDdENNLEdBQVlOLEdBRTFCLElBQUssSUFBSUwsRUFBU3gwQixLQUFLMDBCLFFBQVMxMUIsRUFBSXcxQixFQUFPbjFCLE9BQVF5MUIsRUFBWSxHQUFJTCxFQUFVLEdBQUkzeUIsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQy9GLElBQUssSUFBeUNxb0IsRUFBckNJLEVBQVFpSyxFQUFPMXlCLEdBQUl6QixFQUFJa3FCLEVBQU1sckIsT0FBY3VCLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDOUR1cEIsRUFBT0ksRUFBTTNwQixNQUNmazBCLEVBQVU3MUIsS0FBSzQxQixFQUFPckssS0FBS0wsRUFBTUEsRUFBSzJDLFNBQVVsc0IsRUFBRzJwQixJQUNuRGtLLEVBQVF4MUIsS0FBS2tyQixJQUtuQixPQUFPLElBQUlvSyxHQUFVTyxFQUFXTCxJRjhCaENXLFl4QnhDYSxTQUFTMU4sR0FDdEIsT0FBTzFuQixLQUFLNjBCLE9BQWdCLE1BQVRuTixFQUFnQjBFLEdBWHJDLFNBQW1CMUUsR0FDakIsT0FBTyxXQUNMLE9BQU95RSxHQUFLM0IsS0FBS3hxQixLQUFLc3NCLFNBQVU1RSxJQVU1QjJOLENBQTJCLG1CQUFWM04sRUFBdUJBLEVBQVF3QyxHQUFheEMsTXdCdUNuRTROLGV2QnpDYSxTQUFTNU4sR0FDdEIsT0FBTzFuQixLQUFLaTFCLFVBQW1CLE1BQVR2TixFQUFnQjRFLEdBUHhDLFNBQXdCNUUsR0FDdEIsT0FBTyxXQUNMLE9BQU83aEIsR0FBTzJrQixLQUFLeHFCLEtBQUtzc0IsU0FBVTVFLElBTTlCNk4sQ0FBZ0MsbUJBQVY3TixFQUF1QkEsRUFBUXdDLEdBQWF4QyxNdUJ3Q3hFN2hCLE9HckRhLFNBQVM2aEIsR0FDRCxtQkFBVkEsSUFBc0JBLEVBQVE4TixHQUFROU4sSUFFakQsSUFBSyxJQUFJOE0sRUFBU3gwQixLQUFLMDBCLFFBQVMxMUIsRUFBSXcxQixFQUFPbjFCLE9BQVF5MUIsRUFBWSxJQUFJNXhCLE1BQU1sRSxHQUFJOEMsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQzNGLElBQUssSUFBdUVxb0IsRUFBbkVJLEVBQVFpSyxFQUFPMXlCLEdBQUl6QixFQUFJa3FCLEVBQU1sckIsT0FBUTIxQixFQUFXRixFQUFVaHpCLEdBQUssR0FBVWxCLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDM0Z1cEIsRUFBT0ksRUFBTTNwQixLQUFPOG1CLEVBQU04QyxLQUFLTCxFQUFNQSxFQUFLMkMsU0FBVWxzQixFQUFHMnBCLElBQzFEeUssRUFBUy8xQixLQUFLa3JCLEdBS3BCLE9BQU8sSUFBSW9LLEdBQVVPLEVBQVc5MEIsS0FBSzIwQixXSDJDckN6SCxLbkJzQmEsU0FBU3RLLEVBQU8xVyxHQUM3QixJQUFLMkYsVUFBVXhTLE9BQVEsT0FBTzZELE1BQU1DLEtBQUtuRCxLQUFNeXNCLElBRS9DLElBQUlnSixFQUFPdnBCLEVBQU1taEIsR0FBVU4sR0FDdkIwSCxFQUFVejBCLEtBQUsyMEIsU0FDZkgsRUFBU3gwQixLQUFLMDBCLFFBRUcsbUJBQVY5UixJQUFzQkEsRUFBUSxHQUFTQSxJQUVsRCxJQUFLLElBQUk1akIsRUFBSXcxQixFQUFPbjFCLE9BQVFrdEIsRUFBUyxJQUFJcnBCLE1BQU1sRSxHQUFJZ3VCLEVBQVEsSUFBSTlwQixNQUFNbEUsR0FBSWl1QixFQUFPLElBQUkvcEIsTUFBTWxFLEdBQUk4QyxFQUFJLEVBQUdBLEVBQUk5QyxJQUFLOEMsRUFBRyxDQUMvRyxJQUFJbVYsRUFBU3dkLEVBQVEzeUIsR0FDakJ5b0IsRUFBUWlLLEVBQU8xeUIsR0FDZnFyQixFQUFjNUMsRUFBTWxyQixPQUNwQjZ0QixFQUFPLEdBQU10SyxFQUFNNEgsS0FBS3ZULEVBQVFBLEdBQVVBLEVBQU82VixTQUFVaHJCLEVBQUcyeUIsSUFDOURySCxFQUFhRixFQUFLN3RCLE9BQ2xCcTJCLEVBQWExSSxFQUFNbHJCLEdBQUssSUFBSW9CLE1BQU1rcUIsR0FDbEN1SSxFQUFjcEosRUFBT3pxQixHQUFLLElBQUlvQixNQUFNa3FCLEdBQ3BDd0ksRUFBWTNJLEVBQUtuckIsR0FBSyxJQUFJb0IsTUFBTWlxQixHQUVwQ3NJLEVBQUt4ZSxFQUFRc1QsRUFBT21MLEVBQVlDLEVBQWFDLEVBQVcxSSxFQUFNaGhCLEdBSzlELElBQUssSUFBb0IycEIsRUFBVTVILEVBQTFCeEUsRUFBSyxFQUFHQyxFQUFLLEVBQW1CRCxFQUFLMkQsSUFBYzNELEVBQzFELEdBQUlvTSxFQUFXSCxFQUFXak0sR0FBSyxDQUU3QixJQURJQSxHQUFNQyxJQUFJQSxFQUFLRCxFQUFLLEtBQ2Z3RSxFQUFPMEgsRUFBWWpNLE9BQVVBLEVBQUswRCxJQUMzQ3lJLEVBQVNqSixNQUFRcUIsR0FBUSxNQVEvQixPQUhBMUIsRUFBUyxJQUFJZ0ksR0FBVWhJLEVBQVFrSSxJQUN4QnFCLE9BQVM5SSxFQUNoQlQsRUFBT3dKLE1BQVE5SSxFQUNSVixHbUJ6RFBTLE1yQnZEYSxXQUNiLE9BQU8sSUFBSXVILEdBQVV2MEIsS0FBSzgxQixRQUFVOTFCLEtBQUswMEIsUUFBUXZOLElBQUk2TyxJQUFTaDJCLEtBQUsyMEIsV3FCdURuRTFILEtJeERhLFdBQ2IsT0FBTyxJQUFJc0gsR0FBVXYwQixLQUFLKzFCLE9BQVMvMUIsS0FBSzAwQixRQUFRdk4sSUFBSTZPLElBQVNoMkIsS0FBSzIwQixXSndEbEVoZixLSzVEYSxTQUFTc2dCLEVBQVNDLEVBQVVDLEdBQ3pDLElBQUluSixFQUFRaHRCLEtBQUtndEIsUUFBU1QsRUFBU3ZzQixLQUFNaXRCLEVBQU9qdEIsS0FBS2l0QixPQUlyRCxPQUhBRCxFQUEyQixtQkFBWmlKLEVBQXlCQSxFQUFRakosR0FBU0EsRUFBTW9KLE9BQU9ILEVBQVUsSUFDaEUsTUFBWkMsSUFBa0IzSixFQUFTMkosRUFBUzNKLElBQzFCLE1BQVY0SixFQUFnQmxKLEVBQUs0RCxTQUFlc0YsRUFBT2xKLEdBQ3hDRCxHQUFTVCxFQUFTUyxFQUFNaHFCLE1BQU11cEIsR0FBUThKLFFBQVU5SixHTHdEdkR2cEIsTU0zRGEsU0FBUzR4QixHQUN0QixLQUFNQSxhQUFxQkwsSUFBWSxNQUFNLElBQUk1TSxNQUFNLGlCQUV2RCxJQUFLLElBQUkyTyxFQUFVdDJCLEtBQUswMEIsUUFBUzZCLEVBQVUzQixFQUFVRixRQUFTOEIsRUFBS0YsRUFBUWozQixPQUFRNGpCLEVBQUtzVCxFQUFRbDNCLE9BQVFMLEVBQUl6QixLQUFLbU4sSUFBSThyQixFQUFJdlQsR0FBS3dULEVBQVMsSUFBSXZ6QixNQUFNc3pCLEdBQUsxMEIsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQ3BLLElBQUssSUFBbUdxb0IsRUFBL0Z1TSxFQUFTSixFQUFReDBCLEdBQUk2MEIsRUFBU0osRUFBUXowQixHQUFJekIsRUFBSXEyQixFQUFPcjNCLE9BQVEyRCxFQUFReXpCLEVBQU8zMEIsR0FBSyxJQUFJb0IsTUFBTTdDLEdBQVVPLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDeEh1cEIsRUFBT3VNLEVBQU85MUIsSUFBTSsxQixFQUFPLzFCLE1BQzdCb0MsRUFBTXBDLEdBQUt1cEIsR0FLakIsS0FBT3JvQixFQUFJMDBCLElBQU0xMEIsRUFDZjIwQixFQUFPMzBCLEdBQUt3MEIsRUFBUXgwQixHQUd0QixPQUFPLElBQUl5eUIsR0FBVWtDLEVBQVF6MkIsS0FBSzIwQixXTjZDbENDLFVBaEJGLFdBQ0UsT0FBTzUwQixNQWdCUHEyQixNTy9EYSxXQUViLElBQUssSUFBSTdCLEVBQVN4MEIsS0FBSzAwQixRQUFTNXlCLEdBQUssRUFBRzlDLEVBQUl3MUIsRUFBT24xQixTQUFVeUMsRUFBSTlDLEdBQy9ELElBQUssSUFBOERtckIsRUFBMURJLEVBQVFpSyxFQUFPMXlCLEdBQUlsQixFQUFJMnBCLEVBQU1sckIsT0FBUyxFQUFHNHVCLEVBQU8xRCxFQUFNM3BCLEtBQVlBLEdBQUssSUFDMUV1cEIsRUFBT0ksRUFBTTNwQixNQUNYcXRCLEdBQTZDLEVBQXJDOUQsRUFBS3lNLHdCQUF3QjNJLElBQVdBLEVBQUswRCxXQUFXM0QsYUFBYTdELEVBQU04RCxHQUN2RkEsRUFBTzlELEdBS2IsT0FBT25xQixNUHFEUG9CLEtsQjlEYSxTQUFTa1YsR0FHdEIsU0FBU3VnQixFQUFZbjNCLEVBQUdDLEdBQ3RCLE9BQU9ELEdBQUtDLEVBQUkyVyxFQUFRNVcsRUFBRW90QixTQUFVbnRCLEVBQUVtdEIsV0FBYXB0QixHQUFLQyxFQUhyRDJXLElBQVNBLEVBQVUsSUFNeEIsSUFBSyxJQUFJa2UsRUFBU3gwQixLQUFLMDBCLFFBQVMxMUIsRUFBSXcxQixFQUFPbjFCLE9BQVF5M0IsRUFBYSxJQUFJNXpCLE1BQU1sRSxHQUFJOEMsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQUcsQ0FDL0YsSUFBSyxJQUFtRnFvQixFQUEvRUksRUFBUWlLLEVBQU8xeUIsR0FBSXpCLEVBQUlrcUIsRUFBTWxyQixPQUFRMDNCLEVBQVlELEVBQVdoMUIsR0FBSyxJQUFJb0IsTUFBTTdDLEdBQVVPLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDeEd1cEIsRUFBT0ksRUFBTTNwQixNQUNmbTJCLEVBQVVuMkIsR0FBS3VwQixHQUduQjRNLEVBQVUzMUIsS0FBS3kxQixHQUdqQixPQUFPLElBQUl0QyxHQUFVdUMsRUFBWTkyQixLQUFLMjBCLFVBQVUwQixTa0IrQ2hEN0wsS1FqRWEsV0FDYixJQUFJd00sRUFBV25sQixVQUFVLEdBR3pCLE9BRkFBLFVBQVUsR0FBSzdSLEtBQ2ZnM0IsRUFBU3hsQixNQUFNLEtBQU1LLFdBQ2Q3UixNUjhEUGkzQixNU2xFYSxXQUNiLE9BQU8vekIsTUFBTUMsS0FBS25ELE9Ua0VsQm1xQixLVW5FYSxXQUViLElBQUssSUFBSXFLLEVBQVN4MEIsS0FBSzAwQixRQUFTNXlCLEVBQUksRUFBRzlDLEVBQUl3MUIsRUFBT24xQixPQUFReUMsRUFBSTlDLElBQUs4QyxFQUNqRSxJQUFLLElBQUl5b0IsRUFBUWlLLEVBQU8xeUIsR0FBSWxCLEVBQUksRUFBR1AsRUFBSWtxQixFQUFNbHJCLE9BQVF1QixFQUFJUCxJQUFLTyxFQUFHLENBQy9ELElBQUl1cEIsRUFBT0ksRUFBTTNwQixHQUNqQixHQUFJdXBCLEVBQU0sT0FBT0EsRUFJckIsT0FBTyxNVjJEUC9YLEtXcEVhLFdBQ2IsSUFBSUEsRUFBTyxFQUNYLElBQUssTUFBTStYLEtBQVFucUIsT0FBUW9TLEVBQzNCLE9BQU9BLEdYa0VQMlgsTVlyRWEsV0FDYixPQUFRL3BCLEtBQUttcUIsUVpxRWIrTSxLYXRFYSxTQUFTRixHQUV0QixJQUFLLElBQUl4QyxFQUFTeDBCLEtBQUswMEIsUUFBUzV5QixFQUFJLEVBQUc5QyxFQUFJdzFCLEVBQU9uMUIsT0FBUXlDLEVBQUk5QyxJQUFLOEMsRUFDakUsSUFBSyxJQUFnRHFvQixFQUE1Q0ksRUFBUWlLLEVBQU8xeUIsR0FBSWxCLEVBQUksRUFBR1AsRUFBSWtxQixFQUFNbHJCLE9BQWN1QixFQUFJUCxJQUFLTyxHQUM5RHVwQixFQUFPSSxFQUFNM3BCLEtBQUlvMkIsRUFBU3hNLEtBQUtMLEVBQU1BLEVBQUsyQyxTQUFVbHNCLEVBQUcycEIsR0FJL0QsT0FBT3ZxQixNYitEUG0zQixLZjdCYSxTQUFTNUksRUFBTTNMLEdBQzVCLElBQUlrTSxFQUFXdUQsR0FBVTlELEdBRXpCLEdBQUkxYyxVQUFVeFMsT0FBUyxFQUFHLENBQ3hCLElBQUk4cUIsRUFBT25xQixLQUFLbXFCLE9BQ2hCLE9BQU8yRSxFQUFTSixNQUNWdkUsRUFBS2lOLGVBQWV0SSxFQUFTTCxNQUFPSyxFQUFTSixPQUM3Q3ZFLEVBQUtxRyxhQUFhMUIsR0FHMUIsT0FBTzl1QixLQUFLazNCLE1BQWUsTUFBVHRVLEVBQ1hrTSxFQUFTSixNQUFRRyxHQUFlRixHQUFnQyxtQkFBVi9MLEVBQ3REa00sRUFBU0osTUFBUVcsR0FBaUJELEdBQ2xDTixFQUFTSixNQUFRUSxHQUFpQkYsSUFBZ0JGLEVBQVVsTSxLZWlCbkU0TSxNYmxEYSxTQUFTakIsRUFBTTNMLEVBQU8rTSxHQUNuQyxPQUFPOWQsVUFBVXhTLE9BQVMsRUFDcEJXLEtBQUtrM0IsTUFBZSxNQUFUdFUsRUFDTDJNLEdBQStCLG1CQUFWM00sRUFDckJpTixHQUNBSCxJQUFlbkIsRUFBTTNMLEVBQW1CLE1BQVorTSxFQUFtQixHQUFLQSxJQUMxREcsR0FBVzl2QixLQUFLbXFCLE9BQVFvRSxJYTZDOUI4SSxTWnJEYSxTQUFTOUksRUFBTTNMLEdBQzVCLE9BQU8vUSxVQUFVeFMsT0FBUyxFQUNwQlcsS0FBS2szQixNQUFlLE1BQVR0VSxFQUNQbU4sR0FBa0MsbUJBQVZuTixFQUN4QnFOLEdBQ0FELElBQWtCekIsRUFBTTNMLElBQzVCNWlCLEtBQUttcUIsT0FBT29FLElZZ0RsQitJLFFYYmEsU0FBUy9JLEVBQU0zTCxHQUM1QixJQUFJOE4sRUFBUVIsR0FBVzNCLEVBQU8sSUFFOUIsR0FBSTFjLFVBQVV4UyxPQUFTLEVBQUcsQ0FFeEIsSUFEQSxJQUFJc3hCLEVBQU9QLEdBQVVwd0IsS0FBS21xQixRQUFTdnBCLEdBQUssRUFBR1AsRUFBSXF3QixFQUFNcnhCLFNBQzVDdUIsRUFBSVAsT0FBUXN3QixFQUFLMEQsU0FBUzNELEVBQU05dkIsSUFBSyxPQUFPLEVBQ3JELE9BQU8sRUFHVCxPQUFPWixLQUFLazNCLE1BQXVCLG1CQUFWdFUsRUFDbkJvTyxHQUFrQnBPLEVBQ2xCa08sR0FDQUMsSUFBY0wsRUFBTzlOLEtXRTNCMlUsS1YxRGEsU0FBUzNVLEdBQ3RCLE9BQU8vUSxVQUFVeFMsT0FDWFcsS0FBS2szQixLQUFjLE1BQVR0VSxFQUNOcU8sSUFBK0IsbUJBQVZyTyxFQUNyQndPLEdBQ0FELElBQWN2TyxJQUNsQjVpQixLQUFLbXFCLE9BQU8rRyxhVXFEbEJzRyxLVDNEYSxTQUFTNVUsR0FDdEIsT0FBTy9RLFVBQVV4UyxPQUNYVyxLQUFLazNCLEtBQWMsTUFBVHRVLEVBQ055TyxJQUErQixtQkFBVnpPLEVBQ3JCNE8sR0FDQUQsSUFBYzNPLElBQ2xCNWlCLEtBQUttcUIsT0FBT21ILFdTc0RsQkcsTVJ6RWEsV0FDYixPQUFPenhCLEtBQUtrM0IsS0FBS3pGLEtReUVqQkcsTVAxRWEsV0FDYixPQUFPNXhCLEtBQUtrM0IsS0FBS3RGLEtPMEVqQndFLE9jN0VhLFNBQVM3SCxHQUN0QixJQUFJblgsRUFBeUIsbUJBQVRtWCxFQUFzQkEsRUFBT2tKLEdBQVFsSixHQUN6RCxPQUFPdnVCLEtBQUs2MEIsUUFBTyxXQUNqQixPQUFPNzBCLEtBQUs4dEIsWUFBWTFXLEVBQU81RixNQUFNeFIsS0FBTTZSLGdCZDJFN0M2bEIsT0x6RWEsU0FBU25KLEVBQU1vSixHQUM1QixJQUFJdmdCLEVBQXlCLG1CQUFUbVgsRUFBc0JBLEVBQU9rSixHQUFRbEosR0FDckRzRyxFQUFtQixNQUFWOEMsRUFBaUJyRixHQUFpQyxtQkFBWHFGLEVBQXdCQSxFQUFTOU4sR0FBUzhOLEdBQzlGLE9BQU8zM0IsS0FBSzYwQixRQUFPLFdBQ2pCLE9BQU83MEIsS0FBS2d1QixhQUFhNVcsRUFBTzVGLE1BQU14UixLQUFNNlIsV0FBWWdqQixFQUFPcmpCLE1BQU14UixLQUFNNlIsWUFBYyxVS3NFM0ZnZixPSjVFYSxXQUNiLE9BQU83d0IsS0FBS2szQixLQUFLckcsS0k0RWpCNEIsTUh4RWEsU0FBU21GLEdBQ3RCLE9BQU81M0IsS0FBSzYwQixPQUFPK0MsRUFBT2pGLEdBQXNCSCxLR3dFaEQvRixNZW5GYSxTQUFTN0osR0FDdEIsT0FBTy9RLFVBQVV4UyxPQUNYVyxLQUFLcTNCLFNBQVMsV0FBWXpVLEdBQzFCNWlCLEtBQUttcUIsT0FBTzJDLFVmaUZsQmtHLEdGcENhLFNBQVNELEVBQVVuUSxFQUFPd1EsR0FDdkMsSUFBK0N4eUIsRUFBeUJpSCxFQUFwRWdyQixFQUFZRCxHQUFlRyxFQUFXLElBQVExeUIsRUFBSXd5QixFQUFVeHpCLE9BRWhFLEtBQUl3UyxVQUFVeFMsT0FBUyxHQUF2QixDQWFBLElBREEyekIsRUFBS3BRLEVBQVF5USxHQUFRUCxHQUNoQmx5QixFQUFJLEVBQUdBLEVBQUlQLElBQUtPLEVBQUdaLEtBQUtrM0IsS0FBS2xFLEVBQUdILEVBQVVqeUIsR0FBSWdpQixFQUFPd1EsSUFDMUQsT0FBT3B6QixLQWJMLElBQUlnekIsRUFBS2h6QixLQUFLbXFCLE9BQU84SSxLQUNyQixHQUFJRCxFQUFJLElBQUssSUFBMEI5eUIsRUFBdEI0QixFQUFJLEVBQUc5QyxFQUFJZzBCLEVBQUczekIsT0FBV3lDLEVBQUk5QyxJQUFLOEMsRUFDakQsSUFBS2xCLEVBQUksRUFBR1YsRUFBSTh5QixFQUFHbHhCLEdBQUlsQixFQUFJUCxJQUFLTyxFQUM5QixJQUFLaUgsRUFBSWdyQixFQUFVanlCLElBQUkyTCxPQUFTck0sRUFBRXFNLE1BQVExRSxFQUFFMG1CLE9BQVNydUIsRUFBRXF1QixLQUNyRCxPQUFPcnVCLEVBQUUwaUIsT0U2QmpCaVYsU0R4RGEsU0FBU3RyQixFQUFNbW5CLEdBQzVCLE9BQU8xekIsS0FBS2szQixNQUF3QixtQkFBWHhELEVBQ25CUyxHQUNBRCxJQUFrQjNuQixFQUFNbW5CLEtDc0Q5QixDQUFDb0UsT0FBT0MsVWdCdEZLLFlBQ2IsSUFBSyxJQUFJdkQsRUFBU3gwQixLQUFLMDBCLFFBQVM1eUIsRUFBSSxFQUFHOUMsRUFBSXcxQixFQUFPbjFCLE9BQVF5QyxFQUFJOUMsSUFBSzhDLEVBQ2pFLElBQUssSUFBZ0Rxb0IsRUFBNUNJLEVBQVFpSyxFQUFPMXlCLEdBQUlsQixFQUFJLEVBQUdQLEVBQUlrcUIsRUFBTWxyQixPQUFjdUIsRUFBSVAsSUFBS08sR0FDOUR1cEIsRUFBT0ksRUFBTTNwQixZQUFVdXBCLEtoQnNGakMsWWlCdkZlLFlBQVNOLEdBQ3RCLE1BQTJCLGlCQUFiQSxFQUNSLElBQUkwSyxHQUFVLENBQUMsQ0FBQ3YzQixTQUFTOHNCLGNBQWNELEtBQWEsQ0FBQzdzQixTQUFTaTFCLGtCQUM5RCxJQUFJc0MsR0FBVSxDQUFDLENBQUMxSyxJQUFZeUssSSxZQ0xoQyxHQUFPLENBQUMxUixNQUFPLFFBRW5CLFNBQVMsS0FDUCxJQUFLLElBQXlDL2EsRUFBckNqSCxFQUFJLEVBQUdQLEVBQUl3UixVQUFVeFMsT0FBUXVTLEVBQUksR0FBT2hSLEVBQUlQLElBQUtPLEVBQUcsQ0FDM0QsS0FBTWlILEVBQUlnSyxVQUFValIsR0FBSyxLQUFRaUgsS0FBSytKLEdBQU0sUUFBUTRaLEtBQUszakIsR0FBSSxNQUFNLElBQUk4ZixNQUFNLGlCQUFtQjlmLEdBQ2hHK0osRUFBRS9KLEdBQUssR0FFVCxPQUFPLElBQUltd0IsR0FBU3BtQixHQUd0QixTQUFTb21CLEdBQVNwbUIsR0FDaEI1UixLQUFLNFIsRUFBSUEsRUFHWCxTQUFTLEdBQWVpaEIsRUFBV29GLEdBQ2pDLE9BQU9wRixFQUFVejFCLE9BQU8reUIsTUFBTSxTQUFTaEosS0FBSSxTQUFTdGYsR0FDbEQsSUFBSTBtQixFQUFPLEdBQUkzdEIsRUFBSWlILEVBQUVzZ0IsUUFBUSxLQUU3QixHQURJdm5CLEdBQUssSUFBRzJ0QixFQUFPMW1CLEVBQUV1ZCxNQUFNeGtCLEVBQUksR0FBSWlILEVBQUlBLEVBQUV1ZCxNQUFNLEVBQUd4a0IsSUFDOUNpSCxJQUFNb3dCLEVBQU0zckIsZUFBZXpFLEdBQUksTUFBTSxJQUFJOGYsTUFBTSxpQkFBbUI5ZixHQUN0RSxNQUFPLENBQUMwRSxLQUFNMUUsRUFBRzBtQixLQUFNQSxNQTZDM0IsU0FBU1gsR0FBSXJoQixFQUFNZ2lCLEdBQ2pCLElBQUssSUFBNEJobUIsRUFBeEIzSCxFQUFJLEVBQUdQLEVBQUlrTSxFQUFLbE4sT0FBV3VCLEVBQUlQLElBQUtPLEVBQzNDLElBQUsySCxFQUFJZ0UsRUFBSzNMLElBQUkydEIsT0FBU0EsRUFDekIsT0FBT2htQixFQUFFcWEsTUFLZixTQUFTK0ssR0FBSXBoQixFQUFNZ2lCLEVBQU15SSxHQUN2QixJQUFLLElBQUlwMkIsRUFBSSxFQUFHUCxFQUFJa00sRUFBS2xOLE9BQVF1QixFQUFJUCxJQUFLTyxFQUN4QyxHQUFJMkwsRUFBSzNMLEdBQUcydEIsT0FBU0EsRUFBTSxDQUN6QmhpQixFQUFLM0wsR0FBSyxHQUFNMkwsRUFBT0EsRUFBSzZZLE1BQU0sRUFBR3hrQixHQUFHckIsT0FBT2dOLEVBQUs2WSxNQUFNeGtCLEVBQUksSUFDOUQsTUFJSixPQURnQixNQUFabzJCLEdBQWtCenFCLEVBQUt0TixLQUFLLENBQUNzdkIsS0FBTUEsRUFBTTNMLE1BQU9vVSxJQUM3Q3pxQixFQXpEVHlyQixHQUFTeHJCLFVBQVksR0FBU0EsVUFBWSxDQUN4Q0MsWUFBYXVyQixHQUNiaEYsR0FBSSxTQUFTRCxFQUFVaUUsR0FDckIsSUFFSW52QixFQUZBK0osRUFBSTVSLEtBQUs0UixFQUNUc21CLEVBQUksR0FBZW5GLEVBQVcsR0FBSW5oQixHQUVsQ2hSLEdBQUssRUFDTFAsRUFBSTYzQixFQUFFNzRCLE9BR1YsS0FBSXdTLFVBQVV4UyxPQUFTLEdBQXZCLENBT0EsR0FBZ0IsTUFBWjIzQixHQUF3QyxtQkFBYkEsRUFBeUIsTUFBTSxJQUFJclAsTUFBTSxxQkFBdUJxUCxHQUMvRixPQUFTcDJCLEVBQUlQLEdBQ1gsR0FBSXdILEdBQUtrckIsRUFBV21GLEVBQUV0M0IsSUFBSTJMLEtBQU1xRixFQUFFL0osR0FBSzhsQixHQUFJL2IsRUFBRS9KLEdBQUlrckIsRUFBU3hFLEtBQU15SSxRQUMzRCxHQUFnQixNQUFaQSxFQUFrQixJQUFLbnZCLEtBQUsrSixFQUFHQSxFQUFFL0osR0FBSzhsQixHQUFJL2IsRUFBRS9KLEdBQUlrckIsRUFBU3hFLEtBQU0sTUFHMUUsT0FBT3Z1QixLQVpMLE9BQVNZLEVBQUlQLE9BQVF3SCxHQUFLa3JCLEVBQVdtRixFQUFFdDNCLElBQUkyTCxRQUFVMUUsRUFBSStsQixHQUFJaGMsRUFBRS9KLEdBQUlrckIsRUFBU3hFLE9BQVEsT0FBTzFtQixHQWMvRjJiLEtBQU0sV0FDSixJQUFJQSxFQUFPLEdBQUk1UixFQUFJNVIsS0FBSzRSLEVBQ3hCLElBQUssSUFBSS9KLEtBQUsrSixFQUFHNFIsRUFBSzNiLEdBQUsrSixFQUFFL0osR0FBR3VkLFFBQ2hDLE9BQU8sSUFBSTRTLEdBQVN4VSxJQUV0QmdILEtBQU0sU0FBU2plLEVBQU00ckIsR0FDbkIsSUFBSzkzQixFQUFJd1IsVUFBVXhTLE9BQVMsR0FBSyxFQUFHLElBQUssSUFBZ0NnQixFQUFHd0gsRUFBL0J1d0IsRUFBTyxJQUFJbDFCLE1BQU03QyxHQUFJTyxFQUFJLEVBQVNBLEVBQUlQLElBQUtPLEVBQUd3M0IsRUFBS3gzQixHQUFLaVIsVUFBVWpSLEVBQUksR0FDbkgsSUFBS1osS0FBSzRSLEVBQUV0RixlQUFlQyxHQUFPLE1BQU0sSUFBSW9iLE1BQU0saUJBQW1CcGIsR0FDckUsSUFBdUIzTCxFQUFJLEVBQUdQLEdBQXpCd0gsRUFBSTdILEtBQUs0UixFQUFFckYsSUFBb0JsTixPQUFRdUIsRUFBSVAsSUFBS08sRUFBR2lILEVBQUVqSCxHQUFHZ2lCLE1BQU1wUixNQUFNMm1CLEVBQU1DLElBRWpGNW1CLE1BQU8sU0FBU2pGLEVBQU00ckIsRUFBTUMsR0FDMUIsSUFBS3A0QixLQUFLNFIsRUFBRXRGLGVBQWVDLEdBQU8sTUFBTSxJQUFJb2IsTUFBTSxpQkFBbUJwYixHQUNyRSxJQUFLLElBQUkxRSxFQUFJN0gsS0FBSzRSLEVBQUVyRixHQUFPM0wsRUFBSSxFQUFHUCxFQUFJd0gsRUFBRXhJLE9BQVF1QixFQUFJUCxJQUFLTyxFQUFHaUgsRUFBRWpILEdBQUdnaUIsTUFBTXBSLE1BQU0ybUIsRUFBTUMsS0F1QnZGLFlDbkZBLElBSUlDLEdBQ0FDLEdBTEEsR0FBUSxFQUNSQyxHQUFVLEVBQ1ZDLEdBQVcsRUFJWEMsR0FBWSxFQUNaQyxHQUFXLEVBQ1hDLEdBQVksRUFDWkMsR0FBK0IsaUJBQWhCQyxhQUE0QkEsWUFBWUMsSUFBTUQsWUFBY3BVLEtBQzNFc1UsR0FBNkIsaUJBQVhwRixRQUF1QkEsT0FBT3FGLHNCQUF3QnJGLE9BQU9xRixzQkFBc0J2RCxLQUFLOUIsUUFBVSxTQUFTdGQsR0FBSzRpQixXQUFXNWlCLEVBQUcsS0FFN0ksU0FBU3lpQixLQUNkLE9BQU9KLEtBQWFLLEdBQVNHLElBQVdSLEdBQVdFLEdBQU1FLE1BQVFILElBR25FLFNBQVNPLEtBQ1BSLEdBQVcsRUFHTixTQUFTUyxLQUNkbjVCLEtBQUtvNUIsTUFDTHA1QixLQUFLcTVCLE1BQ0xyNUIsS0FBSzRzQixNQUFRLEtBMEJSLFNBQVMwTSxHQUFNdEMsRUFBVXVDLEVBQU9DLEdBQ3JDLElBQUkzeEIsRUFBSSxJQUFJc3hCLEdBRVosT0FEQXR4QixFQUFFNHhCLFFBQVF6QyxFQUFVdUMsRUFBT0MsR0FDcEIzeEIsRUFjVCxTQUFTNnhCLEtBQ1BoQixJQUFZRCxHQUFZRyxHQUFNRSxPQUFTSCxHQUN2QyxHQUFRSixHQUFVLEVBQ2xCLEtBZEssV0FDTE8sT0FDRSxHQUVGLElBREEsSUFBa0IzNEIsRUFBZDBILEVBQUl3d0IsR0FDRHh3QixJQUNBMUgsRUFBSXU0QixHQUFXN3dCLEVBQUV3eEIsUUFBVSxHQUFHeHhCLEVBQUV1eEIsTUFBTTVPLEtBQUssS0FBTXJxQixHQUN0RDBILEVBQUlBLEVBQUUra0IsUUFFTixHQU9BK00sR0FDQSxRQUNBLEdBQVEsRUFXWixXQUVFLElBREEsSUFBSW54QixFQUFtQlosRUFBZmEsRUFBSzR2QixHQUFjbUIsRUFBTzNyQixJQUMzQnBGLEdBQ0RBLEVBQUcyd0IsT0FDREksRUFBTy93QixFQUFHNHdCLFFBQU9HLEVBQU8vd0IsRUFBRzR3QixPQUMvQjd3QixFQUFLQyxFQUFJQSxFQUFLQSxFQUFHbWtCLFFBRWpCaGxCLEVBQUthLEVBQUdta0IsTUFBT25rQixFQUFHbWtCLE1BQVEsS0FDMUJua0IsRUFBS0QsRUFBS0EsRUFBR29rQixNQUFRaGxCLEVBQUt5d0IsR0FBV3p3QixHQUd6QzB3QixHQUFXOXZCLEVBQ1hveEIsR0FBTUosR0F0QkpLLEdBQ0FuQixHQUFXLEdBSWYsU0FBU29CLEtBQ1AsSUFBSWhCLEVBQU1GLEdBQU1FLE1BQU9TLEVBQVFULEVBQU1MLEdBQ2pDYyxFQTdFVSxNQTZFU1osSUFBYVksRUFBT2QsR0FBWUssR0FrQnpELFNBQVNjLEdBQU1KLEdBQ1QsS0FDQWpCLEtBQVNBLEdBQVV3QixhQUFheEIsS0FDeEJpQixFQUFPZCxHQUNQLElBQ05jLEVBQU8zckIsTUFBVTBxQixHQUFVVSxXQUFXUyxHQUFNRixFQUFPWixHQUFNRSxNQUFRSCxLQUNqRUgsS0FBVUEsR0FBV3dCLGNBQWN4QixPQUVsQ0EsS0FBVUMsR0FBWUcsR0FBTUUsTUFBT04sR0FBV3lCLFlBQVlILEdBdkduRCxNQXdHWixHQUFRLEVBQUdmLEdBQVNXLE1DekdULFlBQVMxQyxFQUFVdUMsRUFBT0MsR0FDdkMsSUFBSTN4QixFQUFJLElBQUlzeEIsR0FNWixPQUxBSSxFQUFpQixNQUFUQSxFQUFnQixHQUFLQSxFQUM3QjF4QixFQUFFNHhCLFNBQVFTLElBQ1JyeUIsRUFBRW1PLE9BQ0ZnaEIsRUFBU2tELEVBQVVYLEtBQ2xCQSxFQUFPQyxHQUNIM3hCLEVEaUJUc3hCLEdBQU0zc0IsVUFBWThzQixHQUFNOXNCLFVBQVksQ0FDbENDLFlBQWEwc0IsR0FDYk0sUUFBUyxTQUFTekMsRUFBVXVDLEVBQU9DLEdBQ2pDLEdBQXdCLG1CQUFieEMsRUFBeUIsTUFBTSxJQUFJbUQsVUFBVSw4QkFDeERYLEdBQWdCLE1BQVJBLEVBQWVWLE1BQVNVLElBQWtCLE1BQVRELEVBQWdCLEdBQUtBLEdBQ3pEdjVCLEtBQUs0c0IsT0FBUzBMLEtBQWF0NEIsT0FDMUJzNEIsR0FBVUEsR0FBUzFMLE1BQVE1c0IsS0FDMUJxNEIsR0FBV3I0QixLQUNoQnM0QixHQUFXdDRCLE1BRWJBLEtBQUtvNUIsTUFBUXBDLEVBQ2JoM0IsS0FBS3E1QixNQUFRRyxFQUNiSSxNQUVGNWpCLEtBQU0sV0FDQWhXLEtBQUtvNUIsUUFDUHA1QixLQUFLbzVCLE1BQVEsS0FDYnA1QixLQUFLcTVCLE1BQVF4ckIsSUFDYityQixRRXpDTixJQUFJUSxHQUFVLEdBQVMsUUFBUyxNQUFPLFNBQVUsYUFDN0NDLEdBQWEsR0FVRixZQUFTbFEsRUFBTW9FLEVBQU0rTCxFQUFJblYsRUFBT29GLEVBQU9nUSxHQUNwRCxJQUFJQyxFQUFZclEsRUFBS3NRLGFBQ3JCLEdBQUtELEdBQ0EsR0FBSUYsS0FBTUUsRUFBVyxZQURWclEsRUFBS3NRLGFBQWUsSUFtQ3RDLFNBQWdCdFEsRUFBTW1RLEVBQUlJLEdBQ3hCLElBQ0lDLEVBREFILEVBQVlyUSxFQUFLc1EsYUFnQnJCLFNBQVNwNUIsRUFBTTY0QixHQUNiLElBQUl0NUIsRUFBR2tCLEVBQUd6QixFQUFHSCxFQUdiLEdBakVtQixJQWlFZnc2QixFQUFLRSxNQUFxQixPQUFPNWtCLElBRXJDLElBQUtwVixLQUFLNDVCLEVBRVIsSUFEQXQ2QixFQUFJczZCLEVBQVU1NUIsSUFDUjJ0QixPQUFTbU0sRUFBS25NLEtBQXBCLENBS0EsR0F4RWUsSUF3RVhydUIsRUFBRTA2QixNQUFtQixPQUFPLEdBQVF2NUIsR0F2RXpCLElBMEVYbkIsRUFBRTA2QixPQUNKMTZCLEVBQUUwNkIsTUF6RVMsRUEwRVgxNkIsRUFBRW81QixNQUFNdGpCLE9BQ1I5VixFQUFFOHlCLEdBQUd4SSxLQUFLLFlBQWFMLEVBQU1BLEVBQUsyQyxTQUFVNXNCLEVBQUVpbEIsTUFBT2psQixFQUFFcXFCLGNBQ2hEaVEsRUFBVTU1QixLQUlUQSxFQUFJMDVCLElBQ1pwNkIsRUFBRTA2QixNQWpGUyxFQWtGWDE2QixFQUFFbzVCLE1BQU10akIsT0FDUjlWLEVBQUU4eUIsR0FBR3hJLEtBQUssU0FBVUwsRUFBTUEsRUFBSzJDLFNBQVU1c0IsRUFBRWlsQixNQUFPamxCLEVBQUVxcUIsY0FDN0NpUSxFQUFVNTVCLElBb0JyQixHQVpBLElBQVEsV0EvRlMsSUFnR1g4NUIsRUFBS0UsUUFDUEYsRUFBS0UsTUFoR1EsRUFpR2JGLEVBQUtwQixNQUFNRyxRQUFRb0IsRUFBTUgsRUFBS25CLE1BQU9tQixFQUFLbEIsTUFDMUNxQixFQUFLWCxPQU1UUSxFQUFLRSxNQTFHYSxFQTJHbEJGLEVBQUsxSCxHQUFHeEksS0FBSyxRQUFTTCxFQUFNQSxFQUFLMkMsU0FBVTROLEVBQUt2VixNQUFPdVYsRUFBS25RLE9BM0cxQyxJQTRHZG1RLEVBQUtFLE1BQVQsQ0FLQSxJQUpBRixFQUFLRSxNQTVHWSxFQStHakJELEVBQVEsSUFBSXozQixNQUFNN0MsRUFBSXE2QixFQUFLQyxNQUFNdDdCLFFBQzVCdUIsRUFBSSxFQUFHa0IsR0FBSyxFQUFHbEIsRUFBSVAsSUFBS08sR0FDdkJWLEVBQUl3NkIsRUFBS0MsTUFBTS81QixHQUFHZ2lCLE1BQU00SCxLQUFLTCxFQUFNQSxFQUFLMkMsU0FBVTROLEVBQUt2VixNQUFPdVYsRUFBS25RLFVBQ3JFb1EsSUFBUTc0QixHQUFLNUIsR0FHakJ5NkIsRUFBTXQ3QixPQUFTeUMsRUFBSSxHQUdyQixTQUFTKzRCLEVBQUtYLEdBS1osSUFKQSxJQUFJcnlCLEVBQUlxeUIsRUFBVVEsRUFBS0ksU0FBV0osRUFBS0ssS0FBS3ZRLEtBQUssS0FBTTBQLEVBQVVRLEVBQUtJLFdBQWFKLEVBQUtwQixNQUFNRyxRQUFRempCLEdBQU8wa0IsRUFBS0UsTUF2SGxHLEVBdUhrSCxHQUM5SGg2QixHQUFLLEVBQ0xQLEVBQUlzNkIsRUFBTXQ3QixTQUVMdUIsRUFBSVAsR0FDWHM2QixFQUFNLzVCLEdBQUc0cEIsS0FBS0wsRUFBTXRpQixHQTVITixJQWdJWjZ5QixFQUFLRSxRQUNQRixFQUFLMUgsR0FBR3hJLEtBQUssTUFBT0wsRUFBTUEsRUFBSzJDLFNBQVU0TixFQUFLdlYsTUFBT3VWLEVBQUtuUSxPQUMxRHZVLEtBSUosU0FBU0EsSUFJUCxJQUFLLElBQUlwVixLQUhUODVCLEVBQUtFLE1BdElVLEVBdUlmRixFQUFLcEIsTUFBTXRqQixjQUNKd2tCLEVBQVVGLEdBQ0hFLEVBQVcsY0FDbEJyUSxFQUFLc1EsYUE3RmRELEVBQVVGLEdBQU1JLEVBQ2hCQSxFQUFLcEIsTUFBUUEsSUFFYixTQUFrQlksR0FDaEJRLEVBQUtFLE1BdERjLEVBdURuQkYsRUFBS3BCLE1BQU1HLFFBQVFwNEIsRUFBT3E1QixFQUFLbkIsTUFBT21CLEVBQUtsQixNQUd2Q2tCLEVBQUtuQixPQUFTVyxHQUFTNzRCLEVBQU02NEIsRUFBVVEsRUFBS25CLFNBUHJCLEVBQUdtQixFQUFLbEIsTUF4Q3JDcGlCLENBQU8rUyxFQUFNbVEsRUFBSSxDQUNmL0wsS0FBTUEsRUFDTnBKLE1BQU9BLEVBQ1BvRixNQUFPQSxFQUNQeUksR0FBSW9ILEdBQ0pPLE1BQU9OLEdBQ1BiLEtBQU1lLEVBQU9mLEtBQ2JELE1BQU9nQixFQUFPaEIsTUFDZHVCLFNBQVVQLEVBQU9PLFNBQ2pCQyxLQUFNUixFQUFPUSxLQUNiekIsTUFBTyxLQUNQc0IsTUF2QmlCLElBMkJkLFNBQVNJLEdBQUs3USxFQUFNbVEsR0FDekIsSUFBSVcsRUFBVyxHQUFJOVEsRUFBTW1RLEdBQ3pCLEdBQUlXLEVBQVNMLE1BN0JNLEVBNkJXLE1BQU0sSUFBSWpULE1BQU0sK0JBQzlDLE9BQU9zVCxFQUdGLFNBQVMsR0FBSTlRLEVBQU1tUSxHQUN4QixJQUFJVyxFQUFXLEdBQUk5USxFQUFNbVEsR0FDekIsR0FBSVcsRUFBU0wsTUFoQ00sRUFnQ1csTUFBTSxJQUFJalQsTUFBTSw2QkFDOUMsT0FBT3NULEVBR0YsU0FBUyxHQUFJOVEsRUFBTW1RLEdBQ3hCLElBQUlXLEVBQVc5USxFQUFLc1EsYUFDcEIsSUFBS1EsS0FBY0EsRUFBV0EsRUFBU1gsSUFBTSxNQUFNLElBQUkzUyxNQUFNLHdCQUM3RCxPQUFPc1QsRUNoRFQsSUNFSUMsR0RGQSxHQUFVLElBQU0zOUIsS0FBS0MsR0FFZCxHQUFXLENBQ3BCMjlCLFdBQVksRUFDWkMsV0FBWSxFQUNaeHFCLE9BQVEsRUFDUnlxQixNQUFPLEVBQ1BDLE9BQVEsRUFDUkMsT0FBUSxHQUdLLFlBQVM3N0IsRUFBR0MsRUFBRzRJLEVBQUcxRixFQUFHMUMsRUFBR2tXLEdBQ3JDLElBQUlpbEIsRUFBUUMsRUFBUUYsRUFLcEIsT0FKSUMsRUFBUy85QixLQUFLa0IsS0FBS2lCLEVBQUlBLEVBQUlDLEVBQUlBLE1BQUlELEdBQUs0N0IsRUFBUTM3QixHQUFLMjdCLElBQ3JERCxFQUFRMzdCLEVBQUk2SSxFQUFJNUksRUFBSWtELEtBQUcwRixHQUFLN0ksRUFBSTI3QixFQUFPeDRCLEdBQUtsRCxFQUFJMDdCLElBQ2hERSxFQUFTaCtCLEtBQUtrQixLQUFLOEosRUFBSUEsRUFBSTFGLEVBQUlBLE1BQUkwRixHQUFLZ3pCLEVBQVExNEIsR0FBSzA0QixFQUFRRixHQUFTRSxHQUN0RTc3QixFQUFJbUQsRUFBSWxELEVBQUk0SSxJQUFHN0ksR0FBS0EsRUFBR0MsR0FBS0EsRUFBRzA3QixHQUFTQSxFQUFPQyxHQUFVQSxHQUN0RCxDQUNMSCxXQUFZaDdCLEVBQ1ppN0IsV0FBWS9rQixFQUNaekYsT0FBUXJULEtBQUtPLE1BQU02QixFQUFHRCxHQUFLLEdBQzNCMjdCLE1BQU85OUIsS0FBS00sS0FBS3c5QixHQUFTLEdBQzFCQyxPQUFRQSxFQUNSQyxPQUFRQSxHRXBCWixTQUFTQyxHQUFxQkMsRUFBT0MsRUFBU0MsRUFBU0MsR0FFckQsU0FBU3Q4QixFQUFJME0sR0FDWCxPQUFPQSxFQUFFM00sT0FBUzJNLEVBQUUxTSxNQUFRLElBQU0sR0FzQ3BDLE9BQU8sU0FBU0ksRUFBR0MsR0FDakIsSUFBSXFNLEVBQUksR0FDSmxFLEVBQUksR0FPUixPQU5BcEksRUFBSSs3QixFQUFNLzdCLEdBQUlDLEVBQUk4N0IsRUFBTTk3QixHQXRDMUIsU0FBbUJrOEIsRUFBSUMsRUFBSUMsRUFBSUMsRUFBSWh3QixFQUFHbEUsR0FDcEMsR0FBSSt6QixJQUFPRSxHQUFNRCxJQUFPRSxFQUFJLENBQzFCLElBQUlwN0IsRUFBSW9MLEVBQUUvTSxLQUFLLGFBQWMsS0FBTXk4QixFQUFTLEtBQU1DLEdBQ2xEN3pCLEVBQUU3SSxLQUFLLENBQUMyQixFQUFHQSxFQUFJLEVBQUdwQyxFQUFHLEdBQU9xOUIsRUFBSUUsSUFBTSxDQUFDbjdCLEVBQUdBLEVBQUksRUFBR3BDLEVBQUcsR0FBT3M5QixFQUFJRSxVQUN0REQsR0FBTUMsSUFDZmh3QixFQUFFL00sS0FBSyxhQUFlODhCLEVBQUtMLEVBQVVNLEVBQUtMLEdBa0M1Q3Z0QixDQUFVMU8sRUFBRXk3QixXQUFZejdCLEVBQUUwN0IsV0FBWXo3QixFQUFFdzdCLFdBQVl4N0IsRUFBRXk3QixXQUFZcHZCLEVBQUdsRSxHQTlCdkUsU0FBZ0JwSSxFQUFHQyxFQUFHcU0sRUFBR2xFLEdBQ25CcEksSUFBTUMsR0FDSkQsRUFBSUMsRUFBSSxJQUFLQSxHQUFLLElBQWNBLEVBQUlELEVBQUksTUFBS0EsR0FBSyxLQUN0RG9JLEVBQUU3SSxLQUFLLENBQUMyQixFQUFHb0wsRUFBRS9NLEtBQUtLLEVBQUkwTSxHQUFLLFVBQVcsS0FBTTR2QixHQUFZLEVBQUdwOUIsRUFBRyxHQUFPa0IsRUFBR0MsTUFDL0RBLEdBQ1RxTSxFQUFFL00sS0FBS0ssRUFBSTBNLEdBQUssVUFBWXJNLEVBQUlpOEIsR0EwQmxDaHJCLENBQU9sUixFQUFFa1IsT0FBUWpSLEVBQUVpUixPQUFRNUUsRUFBR2xFLEdBdEJoQyxTQUFlcEksRUFBR0MsRUFBR3FNLEVBQUdsRSxHQUNsQnBJLElBQU1DLEVBQ1JtSSxFQUFFN0ksS0FBSyxDQUFDMkIsRUFBR29MLEVBQUUvTSxLQUFLSyxFQUFJME0sR0FBSyxTQUFVLEtBQU00dkIsR0FBWSxFQUFHcDlCLEVBQUcsR0FBT2tCLEVBQUdDLEtBQzlEQSxHQUNUcU0sRUFBRS9NLEtBQUtLLEVBQUkwTSxHQUFLLFNBQVdyTSxFQUFJaThCLEdBbUJqQ1AsQ0FBTTM3QixFQUFFMjdCLE1BQU8xN0IsRUFBRTA3QixNQUFPcnZCLEVBQUdsRSxHQWY3QixTQUFlK3pCLEVBQUlDLEVBQUlDLEVBQUlDLEVBQUlod0IsRUFBR2xFLEdBQ2hDLEdBQUkrekIsSUFBT0UsR0FBTUQsSUFBT0UsRUFBSSxDQUMxQixJQUFJcDdCLEVBQUlvTCxFQUFFL00sS0FBS0ssRUFBSTBNLEdBQUssU0FBVSxLQUFNLElBQUssS0FBTSxLQUNuRGxFLEVBQUU3SSxLQUFLLENBQUMyQixFQUFHQSxFQUFJLEVBQUdwQyxFQUFHLEdBQU9xOUIsRUFBSUUsSUFBTSxDQUFDbjdCLEVBQUdBLEVBQUksRUFBR3BDLEVBQUcsR0FBT3M5QixFQUFJRSxVQUMvQyxJQUFQRCxHQUFtQixJQUFQQyxHQUNyQmh3QixFQUFFL00sS0FBS0ssRUFBSTBNLEdBQUssU0FBVyt2QixFQUFLLElBQU1DLEVBQUssS0FXN0M3dEIsQ0FBTXpPLEVBQUU0N0IsT0FBUTU3QixFQUFFNjdCLE9BQVE1N0IsRUFBRTI3QixPQUFRMzdCLEVBQUU0N0IsT0FBUXZ2QixFQUFHbEUsR0FDakRwSSxFQUFJQyxFQUFJLEtBQ0QsU0FBU2tJLEdBRWQsSUFEQSxJQUEwQjNILEVBQXRCVSxHQUFLLEVBQUdQLEVBQUl5SCxFQUFFekksU0FDVHVCLEVBQUlQLEdBQUcyTCxHQUFHOUwsRUFBSTRILEVBQUVsSCxJQUFJQSxHQUFLVixFQUFFMUIsRUFBRXFKLEdBQ3RDLE9BQU9tRSxFQUFFMkosS0FBSyxNQUtiLElBQUlzbUIsR0FBMEJULElEeEQ5QixTQUFrQjVZLEdBQ3ZCLE1BQU01akIsRUFBSSxJQUEwQixtQkFBZGs5QixVQUEyQkEsVUFBWUMsaUJBQWlCdlosRUFBUSxJQUN0RixPQUFPNWpCLEVBQUVvOUIsV0FBYSxHQUFXQyxHQUFVcjlCLEVBQUVVLEVBQUdWLEVBQUVXLEVBQUdYLEVBQUV1SixFQUFHdkosRUFBRTZELEVBQUc3RCxFQUFFbUIsRUFBR25CLEVBQUVxWCxLQ3NESixPQUFRLE1BQU8sUUFDeEVpbUIsR0FBMEJkLElEcEQ5QixTQUFrQjVZLEdBQ3ZCLE9BQWEsTUFBVEEsRUFBc0IsSUFDckJzWSxLQUFTQSxHQUFVbCtCLFNBQVNtMUIsZ0JBQWdCLDZCQUE4QixNQUMvRStJLEdBQVFqTSxhQUFhLFlBQWFyTSxJQUM1QkEsRUFBUXNZLEdBQVEvcUIsVUFBVW9zQixRQUFRQyxlQUVqQ0gsSUFEUHpaLEVBQVFBLEVBQU02WixRQUNTLzhCLEVBQUdrakIsRUFBTWpqQixFQUFHaWpCLEVBQU1yYSxFQUFHcWEsRUFBTS9mLEVBQUcrZixFQUFNemlCLEVBQUd5aUIsRUFBTXZNLEdBRkwsTUNnREcsS0FBTSxJQUFLLEtDNUQvRSxTQUFTcW1CLEdBQVlwQyxFQUFJL0wsR0FDdkIsSUFBSW9PLEVBQVFDLEVBQ1osT0FBTyxXQUNMLElBQUkzQixFQUFXLEdBQUlqN0IsS0FBTXM2QixHQUNyQkssRUFBUU0sRUFBU04sTUFLckIsR0FBSUEsSUFBVWdDLEVBRVosSUFBSyxJQUFJLzdCLEVBQUksRUFBR1AsR0FEaEJ1OEIsRUFBU0QsRUFBU2hDLEdBQ1N0N0IsT0FBUXVCLEVBQUlQLElBQUtPLEVBQzFDLEdBQUlnOEIsRUFBT2g4QixHQUFHMnRCLE9BQVNBLEVBQU0sRUFDM0JxTyxFQUFTQSxFQUFPeFgsU0FDVGdQLE9BQU94ekIsRUFBRyxHQUNqQixNQUtOcTZCLEVBQVNOLE1BQVFpQyxHQUlyQixTQUFTQyxHQUFjdkMsRUFBSS9MLEVBQU0zTCxHQUMvQixJQUFJK1osRUFBUUMsRUFDWixHQUFxQixtQkFBVmhhLEVBQXNCLE1BQU0sSUFBSStFLE1BQzNDLE9BQU8sV0FDTCxJQUFJc1QsRUFBVyxHQUFJajdCLEtBQU1zNkIsR0FDckJLLEVBQVFNLEVBQVNOLE1BS3JCLEdBQUlBLElBQVVnQyxFQUFRLENBQ3BCQyxHQUFVRCxFQUFTaEMsR0FBT3ZWLFFBQzFCLElBQUssSUFBSXZkLEVBQUksQ0FBQzBtQixLQUFNQSxFQUFNM0wsTUFBT0EsR0FBUWhpQixFQUFJLEVBQUdQLEVBQUl1OEIsRUFBT3Y5QixPQUFRdUIsRUFBSVAsSUFBS08sRUFDMUUsR0FBSWc4QixFQUFPaDhCLEdBQUcydEIsT0FBU0EsRUFBTSxDQUMzQnFPLEVBQU9oOEIsR0FBS2lILEVBQ1osTUFHQWpILElBQU1QLEdBQUd1OEIsRUFBTzM5QixLQUFLNEksR0FHM0JvekIsRUFBU04sTUFBUWlDLEdBc0JkLFNBQVNFLEdBQVdDLEVBQVl4TyxFQUFNM0wsR0FDM0MsSUFBSTBYLEVBQUt5QyxFQUFXQyxJQU9wQixPQUxBRCxFQUFXN0YsTUFBSyxXQUNkLElBQUkrRCxFQUFXLEdBQUlqN0IsS0FBTXM2QixJQUN4QlcsRUFBU3JZLFFBQVVxWSxFQUFTclksTUFBUSxLQUFLMkwsR0FBUTNMLEVBQU1wUixNQUFNeFIsS0FBTTZSLGNBRy9ELFNBQVNzWSxHQUNkLE9BQU8sR0FBSUEsRUFBTW1RLEdBQUkxWCxNQUFNMkwsSUMzRWhCLFlBQVM3dUIsRUFBR0MsR0FDekIsSUFBSTRJLEVBQ0osT0FBcUIsaUJBQU41SSxFQUFpQixHQUMxQkEsYUFBYWlpQixHQUFRLElBQ3BCclosRUFBSXFaLEdBQU1qaUIsS0FBT0EsRUFBSTRJLEVBQUcsSUFDekIsSUFBbUI3SSxFQUFHQyxHQ0g5QixTQUFTLEdBQVc0dUIsR0FDbEIsT0FBTyxXQUNMdnVCLEtBQUs0dUIsZ0JBQWdCTCxJQUl6QixTQUFTLEdBQWFPLEdBQ3BCLE9BQU8sV0FDTDl1QixLQUFLK3VCLGtCQUFrQkQsRUFBU0wsTUFBT0ssRUFBU0osUUFJcEQsU0FBUyxHQUFhSCxFQUFNN3RCLEVBQWF1OEIsR0FDdkMsSUFBSUMsRUFFQUMsRUFEQUMsRUFBVUgsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSUksRUFBVXI5QixLQUFLd3dCLGFBQWFqQyxHQUNoQyxPQUFPOE8sSUFBWUQsRUFBVSxLQUN2QkMsSUFBWUgsRUFBV0MsRUFDdkJBLEVBQWV6OEIsRUFBWXc4QixFQUFXRyxFQUFTSixJQUl6RCxTQUFTLEdBQWVuTyxFQUFVcHVCLEVBQWF1OEIsR0FDN0MsSUFBSUMsRUFFQUMsRUFEQUMsRUFBVUgsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSUksRUFBVXI5QixLQUFLbzNCLGVBQWV0SSxFQUFTTCxNQUFPSyxFQUFTSixPQUMzRCxPQUFPMk8sSUFBWUQsRUFBVSxLQUN2QkMsSUFBWUgsRUFBV0MsRUFDdkJBLEVBQWV6OEIsRUFBWXc4QixFQUFXRyxFQUFTSixJQUl6RCxTQUFTLEdBQWExTyxFQUFNN3RCLEVBQWFraUIsR0FDdkMsSUFBSXNhLEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQStCRCxFQUF0QkgsRUFBU3JhLEVBQU01aUIsTUFDNUIsR0FBYyxNQUFWaTlCLEVBR0osT0FGQUksRUFBVXI5QixLQUFLd3dCLGFBQWFqQyxPQUM1QjZPLEVBQVVILEVBQVMsSUFDVSxLQUN2QkksSUFBWUgsR0FBWUUsSUFBWUUsRUFBV0gsR0FDOUNHLEVBQVdGLEVBQVNELEVBQWV6OEIsRUFBWXc4QixFQUFXRyxFQUFTSixJQUwxQ2o5QixLQUFLNHVCLGdCQUFnQkwsSUFTekQsU0FBUyxHQUFlTyxFQUFVcHVCLEVBQWFraUIsR0FDN0MsSUFBSXNhLEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQStCRCxFQUF0QkgsRUFBU3JhLEVBQU01aUIsTUFDNUIsR0FBYyxNQUFWaTlCLEVBR0osT0FGQUksRUFBVXI5QixLQUFLbzNCLGVBQWV0SSxFQUFTTCxNQUFPSyxFQUFTSixXQUN2RDBPLEVBQVVILEVBQVMsSUFDVSxLQUN2QkksSUFBWUgsR0FBWUUsSUFBWUUsRUFBV0gsR0FDOUNHLEVBQVdGLEVBQVNELEVBQWV6OEIsRUFBWXc4QixFQUFXRyxFQUFTSixJQUwxQ2o5QixLQUFLK3VCLGtCQUFrQkQsRUFBU0wsTUFBT0ssRUFBU0osUUM1RHBGLFNBQVM2TyxHQUFnQmhQLEVBQU0zdEIsR0FDN0IsT0FBTyxTQUFTaUgsR0FDZDdILEtBQUtpdkIsYUFBYVYsRUFBTTN0QixFQUFFNHBCLEtBQUt4cUIsS0FBTTZILEtBSXpDLFNBQVMyMUIsR0FBa0IxTyxFQUFVbHVCLEdBQ25DLE9BQU8sU0FBU2lILEdBQ2Q3SCxLQUFLbXZCLGVBQWVMLEVBQVNMLE1BQU9LLEVBQVNKLE1BQU85dEIsRUFBRTRwQixLQUFLeHFCLEtBQU02SCxLQUlyRSxTQUFTNDFCLEdBQVkzTyxFQUFVbE0sR0FDN0IsSUFBSXBhLEVBQUlpaEIsRUFDUixTQUFTa1IsSUFDUCxJQUFJLzVCLEVBQUlnaUIsRUFBTXBSLE1BQU14UixLQUFNNlIsV0FFMUIsT0FESWpSLElBQU02b0IsSUFBSWpoQixHQUFNaWhCLEVBQUs3b0IsSUFBTTQ4QixHQUFrQjFPLEVBQVVsdUIsSUFDcEQ0SCxFQUdULE9BREFteUIsRUFBTStDLE9BQVM5YSxFQUNSK1gsRUFHVCxTQUFTZ0QsR0FBVXBQLEVBQU0zTCxHQUN2QixJQUFJcGEsRUFBSWloQixFQUNSLFNBQVNrUixJQUNQLElBQUkvNUIsRUFBSWdpQixFQUFNcFIsTUFBTXhSLEtBQU02UixXQUUxQixPQURJalIsSUFBTTZvQixJQUFJamhCLEdBQU1paEIsRUFBSzdvQixJQUFNMjhCLEdBQWdCaFAsRUFBTTN0QixJQUM5QzRILEVBR1QsT0FEQW15QixFQUFNK0MsT0FBUzlhLEVBQ1IrWCxFQy9CVCxTQUFTaUQsR0FBY3RELEVBQUkxWCxHQUN6QixPQUFPLFdBQ0xvWSxHQUFLaDdCLEtBQU1zNkIsR0FBSWYsT0FBUzNXLEVBQU1wUixNQUFNeFIsS0FBTTZSLFlBSTlDLFNBQVNnc0IsR0FBY3ZELEVBQUkxWCxHQUN6QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCb1ksR0FBS2g3QixLQUFNczZCLEdBQUlmLE1BQVEzVyxHQ1IzQixTQUFTa2IsR0FBaUJ4RCxFQUFJMVgsR0FDNUIsT0FBTyxXQUNMLEdBQUk1aUIsS0FBTXM2QixHQUFJUSxVQUFZbFksRUFBTXBSLE1BQU14UixLQUFNNlIsWUFJaEQsU0FBU2tzQixHQUFpQnpELEVBQUkxWCxHQUM1QixPQUFPQSxHQUFTQSxFQUFPLFdBQ3JCLEdBQUk1aUIsS0FBTXM2QixHQUFJUSxTQUFXbFksR0NSN0IsU0FBU29iLEdBQWExRCxFQUFJMVgsR0FDeEIsR0FBcUIsbUJBQVZBLEVBQXNCLE1BQU0sSUFBSStFLE1BQzNDLE9BQU8sV0FDTCxHQUFJM25CLEtBQU1zNkIsR0FBSVMsS0FBT25ZLEdDS3pCLFNBQVNxYixHQUFXM0QsRUFBSS9MLEVBQU00RSxHQUM1QixJQUFJK0ssRUFBS0MsRUFBS0MsRUFUaEIsU0FBZTdQLEdBQ2IsT0FBUUEsRUFBTyxJQUFJbnhCLE9BQU8reUIsTUFBTSxTQUFTa08sT0FBTSxTQUFTeDJCLEdBQ3RELElBQUlqSCxFQUFJaUgsRUFBRXNnQixRQUFRLEtBRWxCLE9BREl2bkIsR0FBSyxJQUFHaUgsRUFBSUEsRUFBRXVkLE1BQU0sRUFBR3hrQixLQUNuQmlILEdBQVcsVUFBTkEsS0FLS3hHLENBQU1rdEIsR0FBUXlNLEdBQU8sR0FDekMsT0FBTyxXQUNMLElBQUlDLEVBQVdtRCxFQUFJcCtCLEtBQU1zNkIsR0FDckJ0SCxFQUFLaUksRUFBU2pJLEdBS2RBLElBQU9rTCxJQUFNQyxHQUFPRCxFQUFNbEwsR0FBSXhQLFFBQVF3UCxHQUFHekUsRUFBTTRFLEdBRW5EOEgsRUFBU2pJLEdBQUttTCxHQ25CbEIsSUFBSSxHQUFZLHlCQ2lCaEIsU0FBUyxHQUFZNVAsR0FDbkIsT0FBTyxXQUNMdnVCLEtBQUt3dkIsTUFBTUMsZUFBZWxCLElDckI5QixTQUFTK1AsR0FBaUIvUCxFQUFNM3RCLEVBQUcrdUIsR0FDakMsT0FBTyxTQUFTOW5CLEdBQ2Q3SCxLQUFLd3ZCLE1BQU1JLFlBQVlyQixFQUFNM3RCLEVBQUU0cEIsS0FBS3hxQixLQUFNNkgsR0FBSThuQixJQUlsRCxTQUFTNE8sR0FBV2hRLEVBQU0zTCxFQUFPK00sR0FDL0IsSUFBSTluQixFQUFHNGhCLEVBQ1AsU0FBU2tSLElBQ1AsSUFBSS81QixFQUFJZ2lCLEVBQU1wUixNQUFNeFIsS0FBTTZSLFdBRTFCLE9BRElqUixJQUFNNm9CLElBQUk1aEIsR0FBSzRoQixFQUFLN29CLElBQU0wOUIsR0FBaUIvUCxFQUFNM3RCLEVBQUcrdUIsSUFDakQ5bkIsRUFHVCxPQURBOHlCLEVBQU0rQyxPQUFTOWEsRUFDUitYLEVDZFQsU0FBUzZELEdBQWdCNTlCLEdBQ3ZCLE9BQU8sU0FBU2lILEdBQ2Q3SCxLQUFLa3hCLFlBQWN0d0IsRUFBRTRwQixLQUFLeHFCLEtBQU02SCxJQUlwQyxTQUFTNDJCLEdBQVU3YixHQUNqQixJQUFJcGEsRUFBSWloQixFQUNSLFNBQVNrUixJQUNQLElBQUkvNUIsRUFBSWdpQixFQUFNcFIsTUFBTXhSLEtBQU02UixXQUUxQixPQURJalIsSUFBTTZvQixJQUFJamhCLEdBQU1paEIsRUFBSzdvQixJQUFNNDlCLEdBQWdCNTlCLElBQ3hDNEgsRUFHVCxPQURBbXlCLEVBQU0rQyxPQUFTOWEsRUFDUitYLEVDUVQsSUFBSUwsR0FBSyxFQUVGLFNBQVMsR0FBVzlGLEVBQVFDLEVBQVNsRyxFQUFNK0wsR0FDaER0NkIsS0FBSzAwQixRQUFVRixFQUNmeDBCLEtBQUsyMEIsU0FBV0YsRUFDaEJ6MEIsS0FBSzArQixNQUFRblEsRUFDYnZ1QixLQUFLZzlCLElBQU0xQyxFQU9OLFNBQVNxRSxLQUNkLFFBQVNyRSxHQUdYLElBQUlzRSxHQUFzQixhQUUxQixHQUFXcHlCLFVBVkksU0FBb0IraEIsR0FDakMsT0FBTyxLQUFZd08sV0FBV3hPLElBU0UvaEIsVUFBWSxDQUM1Q0MsWUFBYSxHQUNib29CLE9DdkNhLFNBQVNBLEdBQ3RCLElBQUl0RyxFQUFPdnVCLEtBQUswK0IsTUFDWnBFLEVBQUt0NkIsS0FBS2c5QixJQUVRLG1CQUFYbkksSUFBdUJBLEVBQVNoTCxHQUFTZ0wsSUFFcEQsSUFBSyxJQUFJTCxFQUFTeDBCLEtBQUswMEIsUUFBUzExQixFQUFJdzFCLEVBQU9uMUIsT0FBUXkxQixFQUFZLElBQUk1eEIsTUFBTWxFLEdBQUk4QyxFQUFJLEVBQUdBLEVBQUk5QyxJQUFLOEMsRUFDM0YsSUFBSyxJQUFpRnFvQixFQUFNNEssRUFBbkZ4SyxFQUFRaUssRUFBTzF5QixHQUFJekIsRUFBSWtxQixFQUFNbHJCLE9BQVEyMUIsRUFBV0YsRUFBVWh6QixHQUFLLElBQUlvQixNQUFNN0MsR0FBbUJPLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sR0FDOUd1cEIsRUFBT0ksRUFBTTNwQixNQUFRbTBCLEVBQVVGLEVBQU9ySyxLQUFLTCxFQUFNQSxFQUFLMkMsU0FBVWxzQixFQUFHMnBCLE1BQ2xFLGFBQWNKLElBQU00SyxFQUFRakksU0FBVzNDLEVBQUsyQyxVQUNoRGtJLEVBQVNwMEIsR0FBS20wQixFQUNka0csR0FBU2pHLEVBQVNwMEIsR0FBSTJ0QixFQUFNK0wsRUFBSTE1QixFQUFHbzBCLEVBQVUsR0FBSTdLLEVBQU1tUSxLQUs3RCxPQUFPLElBQUksR0FBV3hGLEVBQVc5MEIsS0FBSzIwQixTQUFVcEcsRUFBTStMLElEd0J0RHJGLFVFeENhLFNBQVNKLEdBQ3RCLElBQUl0RyxFQUFPdnVCLEtBQUswK0IsTUFDWnBFLEVBQUt0NkIsS0FBS2c5QixJQUVRLG1CQUFYbkksSUFBdUJBLEVBQVNNLEdBQVlOLElBRXZELElBQUssSUFBSUwsRUFBU3gwQixLQUFLMDBCLFFBQVMxMUIsRUFBSXcxQixFQUFPbjFCLE9BQVF5MUIsRUFBWSxHQUFJTCxFQUFVLEdBQUkzeUIsRUFBSSxFQUFHQSxFQUFJOUMsSUFBSzhDLEVBQy9GLElBQUssSUFBeUNxb0IsRUFBckNJLEVBQVFpSyxFQUFPMXlCLEdBQUl6QixFQUFJa3FCLEVBQU1sckIsT0FBY3VCLEVBQUksRUFBR0EsRUFBSVAsSUFBS08sRUFDbEUsR0FBSXVwQixFQUFPSSxFQUFNM3BCLEdBQUksQ0FDbkIsSUFBSyxJQUEyRG10QixFQUF2RHpCLEVBQVd1SSxFQUFPckssS0FBS0wsRUFBTUEsRUFBSzJDLFNBQVVsc0IsRUFBRzJwQixHQUFlc1UsRUFBVSxHQUFJMVUsRUFBTW1RLEdBQUszM0IsRUFBSSxFQUFHRyxFQUFJd3BCLEVBQVNqdEIsT0FBUXNELEVBQUlHLElBQUtILEdBQy9Ib3JCLEVBQVF6QixFQUFTM3BCLEtBQ25CczRCLEdBQVNsTixFQUFPUSxFQUFNK0wsRUFBSTMzQixFQUFHMnBCLEVBQVV1UyxHQUczQy9KLEVBQVU3MUIsS0FBS3F0QixHQUNmbUksRUFBUXgxQixLQUFLa3JCLEdBS25CLE9BQU8sSUFBSSxHQUFXMkssRUFBV0wsRUFBU2xHLEVBQU0rTCxJRnFCaER6MEIsT0cxQ2EsU0FBUzZoQixHQUNELG1CQUFWQSxJQUFzQkEsRUFBUThOLEdBQVE5TixJQUVqRCxJQUFLLElBQUk4TSxFQUFTeDBCLEtBQUswMEIsUUFBUzExQixFQUFJdzFCLEVBQU9uMUIsT0FBUXkxQixFQUFZLElBQUk1eEIsTUFBTWxFLEdBQUk4QyxFQUFJLEVBQUdBLEVBQUk5QyxJQUFLOEMsRUFDM0YsSUFBSyxJQUF1RXFvQixFQUFuRUksRUFBUWlLLEVBQU8xeUIsR0FBSXpCLEVBQUlrcUIsRUFBTWxyQixPQUFRMjFCLEVBQVdGLEVBQVVoekIsR0FBSyxHQUFVbEIsRUFBSSxFQUFHQSxFQUFJUCxJQUFLTyxHQUMzRnVwQixFQUFPSSxFQUFNM3BCLEtBQU84bUIsRUFBTThDLEtBQUtMLEVBQU1BLEVBQUsyQyxTQUFVbHNCLEVBQUcycEIsSUFDMUR5SyxFQUFTLzFCLEtBQUtrckIsR0FLcEIsT0FBTyxJQUFJLEdBQVcySyxFQUFXOTBCLEtBQUsyMEIsU0FBVTMwQixLQUFLMCtCLE1BQU8xK0IsS0FBS2c5QixNSGdDakVoNkIsTUk1Q2EsU0FBUys1QixHQUN0QixHQUFJQSxFQUFXQyxNQUFRaDlCLEtBQUtnOUIsSUFBSyxNQUFNLElBQUlyVixNQUUzQyxJQUFLLElBQUkyTyxFQUFVdDJCLEtBQUswMEIsUUFBUzZCLEVBQVV3RyxFQUFXckksUUFBUzhCLEVBQUtGLEVBQVFqM0IsT0FBUTRqQixFQUFLc1QsRUFBUWwzQixPQUFRTCxFQUFJekIsS0FBS21OLElBQUk4ckIsRUFBSXZULEdBQUt3VCxFQUFTLElBQUl2ekIsTUFBTXN6QixHQUFLMTBCLEVBQUksRUFBR0EsRUFBSTlDLElBQUs4QyxFQUNySyxJQUFLLElBQW1HcW9CLEVBQS9GdU0sRUFBU0osRUFBUXgwQixHQUFJNjBCLEVBQVNKLEVBQVF6MEIsR0FBSXpCLEVBQUlxMkIsRUFBT3IzQixPQUFRMkQsRUFBUXl6QixFQUFPMzBCLEdBQUssSUFBSW9CLE1BQU03QyxHQUFVTyxFQUFJLEVBQUdBLEVBQUlQLElBQUtPLEdBQ3hIdXBCLEVBQU91TSxFQUFPOTFCLElBQU0rMUIsRUFBTy8xQixNQUM3Qm9DLEVBQU1wQyxHQUFLdXBCLEdBS2pCLEtBQU9yb0IsRUFBSTAwQixJQUFNMTBCLEVBQ2YyMEIsRUFBTzMwQixHQUFLdzBCLEVBQVF4MEIsR0FHdEIsT0FBTyxJQUFJLEdBQVcyMEIsRUFBUXoyQixLQUFLMjBCLFNBQVUzMEIsS0FBSzArQixNQUFPMStCLEtBQUtnOUIsTUo4QjlEcEksVUozQ2EsV0FDYixPQUFPLElBQUksR0FBVTUwQixLQUFLMDBCLFFBQVMxMEIsS0FBSzIwQixXSTJDeENvSSxXSzdDYSxXQUtiLElBSkEsSUFBSXhPLEVBQU92dUIsS0FBSzArQixNQUNaSSxFQUFNOStCLEtBQUtnOUIsSUFDWCtCLEVBQU1KLEtBRURuSyxFQUFTeDBCLEtBQUswMEIsUUFBUzExQixFQUFJdzFCLEVBQU9uMUIsT0FBUXlDLEVBQUksRUFBR0EsRUFBSTlDLElBQUs4QyxFQUNqRSxJQUFLLElBQXlDcW9CLEVBQXJDSSxFQUFRaUssRUFBTzF5QixHQUFJekIsRUFBSWtxQixFQUFNbHJCLE9BQWN1QixFQUFJLEVBQUdBLEVBQUlQLElBQUtPLEVBQ2xFLEdBQUl1cEIsRUFBT0ksRUFBTTNwQixHQUFJLENBQ25CLElBQUlpK0IsRUFBVSxHQUFJMVUsRUFBTTJVLEdBQ3hCN0QsR0FBUzlRLEVBQU1vRSxFQUFNd1EsRUFBS24rQixFQUFHMnBCLEVBQU8sQ0FDbENpUCxLQUFNcUYsRUFBUXJGLEtBQU9xRixFQUFRdEYsTUFBUXNGLEVBQVEvRCxTQUM3Q3ZCLE1BQU8sRUFDUHVCLFNBQVUrRCxFQUFRL0QsU0FDbEJDLEtBQU04RCxFQUFROUQsT0FNdEIsT0FBTyxJQUFJLEdBQVd2RyxFQUFReDBCLEtBQUsyMEIsU0FBVXBHLEVBQU13USxJTDJCbkR2VSxLQUFNb1UsR0FBb0JwVSxLQUMxQnlNLE1BQU8ySCxHQUFvQjNILE1BQzNCOU0sS0FBTXlVLEdBQW9CelUsS0FDMUIvWCxLQUFNd3NCLEdBQW9CeHNCLEtBQzFCMlgsTUFBTzZVLEdBQW9CN1UsTUFDM0JtTixLQUFNMEgsR0FBb0IxSCxLQUMxQmxFLEdMOUJhLFNBQVN6RSxFQUFNNEUsR0FDNUIsSUFBSW1ILEVBQUt0NkIsS0FBS2c5QixJQUVkLE9BQU9uckIsVUFBVXhTLE9BQVMsRUFDcEIsR0FBSVcsS0FBS21xQixPQUFRbVEsR0FBSXRILEdBQUdBLEdBQUd6RSxHQUMzQnZ1QixLQUFLazNCLEtBQUsrRyxHQUFXM0QsRUFBSS9MLEVBQU00RSxLSzBCckNnRSxLVmVhLFNBQVM1SSxFQUFNM0wsR0FDNUIsSUFBSWtNLEVBQVd1RCxHQUFVOUQsR0FBTzN0QixFQUFpQixjQUFia3VCLEVBQTJCLEdBQXVCcHVCLEdBQ3RGLE9BQU9WLEtBQUsyOUIsVUFBVXBQLEVBQXVCLG1CQUFWM0wsR0FDNUJrTSxFQUFTSixNQUFRLEdBQWlCLElBQWNJLEVBQVVsdUIsRUFBR2s4QixHQUFXOThCLEtBQU0sUUFBVXV1QixFQUFNM0wsSUFDdEYsTUFBVEEsR0FBaUJrTSxFQUFTSixNQUFRLEdBQWUsSUFBWUksSUFDNURBLEVBQVNKLE1BQVEsR0FBaUIsSUFBY0ksRUFBVWx1QixFQUFHZ2lCLEtVbkJwRSthLFVUckJhLFNBQVNwUCxFQUFNM0wsR0FDNUIsSUFBSTFXLEVBQU0sUUFBVXFpQixFQUNwQixHQUFJMWMsVUFBVXhTLE9BQVMsRUFBRyxPQUFRNk0sRUFBTWxNLEtBQUsyNkIsTUFBTXp1QixLQUFTQSxFQUFJd3hCLE9BQ2hFLEdBQWEsTUFBVDlhLEVBQWUsT0FBTzVpQixLQUFLMjZCLE1BQU16dUIsRUFBSyxNQUMxQyxHQUFxQixtQkFBVjBXLEVBQXNCLE1BQU0sSUFBSStFLE1BQzNDLElBQUltSCxFQUFXdUQsR0FBVTlELEdBQ3pCLE9BQU92dUIsS0FBSzI2QixNQUFNenVCLEdBQU00aUIsRUFBU0osTUFBUStPLEdBQWNFLElBQVc3TyxFQUFVbE0sS1NnQjVFNE0sTUhVYSxTQUFTakIsRUFBTTNMLEVBQU8rTSxHQUNuQyxJQUFJL3VCLEVBQXFCLGNBQWhCMnRCLEdBQVEsSUFBc0IsR0FBdUI3dEIsR0FDOUQsT0FBZ0IsTUFBVGtpQixFQUFnQjVpQixLQUNsQnUrQixXQUFXaFEsRUFqRWxCLFNBQW1CQSxFQUFNN3RCLEdBQ3ZCLElBQUl3OEIsRUFDQUksRUFDQUgsRUFDSixPQUFPLFdBQ0wsSUFBSUUsRUFBVSxHQUFNcjlCLEtBQU11dUIsR0FDdEI2TyxHQUFXcDlCLEtBQUt3dkIsTUFBTUMsZUFBZWxCLEdBQU8sR0FBTXZ1QixLQUFNdXVCLElBQzVELE9BQU84TyxJQUFZRCxFQUFVLEtBQ3ZCQyxJQUFZSCxHQUFZRSxJQUFZRSxFQUFXSCxFQUMvQ0EsRUFBZXo4QixFQUFZdzhCLEVBQVdHLEVBQVNDLEVBQVdGLElBd0Q1QzRCLENBQVV6USxFQUFNM3RCLElBQ2pDb3lCLEdBQUcsYUFBZXpFLEVBQU0sR0FBWUEsSUFDcEIsbUJBQVYzTCxFQUF1QjVpQixLQUM3QnUrQixXQUFXaFEsRUFyQ2xCLFNBQXVCQSxFQUFNN3RCLEVBQWFraUIsR0FDeEMsSUFBSXNhLEVBQ0FJLEVBQ0FILEVBQ0osT0FBTyxXQUNMLElBQUlFLEVBQVUsR0FBTXI5QixLQUFNdXVCLEdBQ3RCME8sRUFBU3JhLEVBQU01aUIsTUFDZm85QixFQUFVSCxFQUFTLEdBRXZCLE9BRGMsTUFBVkEsSUFBb0NqOUIsS0FBS3d2QixNQUFNQyxlQUFlbEIsR0FBOUM2TyxFQUFVSCxFQUEyQyxHQUFNajlCLEtBQU11dUIsSUFDOUU4TyxJQUFZRCxFQUFVLEtBQ3ZCQyxJQUFZSCxHQUFZRSxJQUFZRSxFQUFXSCxHQUM5Q0csRUFBV0YsRUFBU0QsRUFBZXo4QixFQUFZdzhCLEVBQVdHLEVBQVNKLEtBMEJ0RCxDQUFjMU8sRUFBTTN0QixFQUFHazhCLEdBQVc5OEIsS0FBTSxTQUFXdXVCLEVBQU0zTCxLQUMxRXNVLEtBdkJQLFNBQTBCb0QsRUFBSS9MLEdBQzVCLElBQUkyUCxFQUFLQyxFQUFLYyxFQUF3RHBPLEVBQTdDM2tCLEVBQU0sU0FBV3FpQixFQUFNK0UsRUFBUSxPQUFTcG5CLEVBQ2pFLE9BQU8sV0FDTCxJQUFJK3VCLEVBQVcsR0FBSWo3QixLQUFNczZCLEdBQ3JCdEgsRUFBS2lJLEVBQVNqSSxHQUNkRyxFQUFrQyxNQUF2QjhILEVBQVNyWSxNQUFNMVcsR0FBZTJrQixJQUFXQSxFQUFTLEdBQVl0QyxTQUFTemMsRUFLbEZraEIsSUFBT2tMLEdBQU9lLElBQWM5TCxJQUFXZ0wsR0FBT0QsRUFBTWxMLEdBQUl4UCxRQUFRd1AsR0FBR00sRUFBTzJMLEVBQVk5TCxHQUUxRjhILEVBQVNqSSxHQUFLbUwsR0FXTmUsQ0FBaUJsL0IsS0FBS2c5QixJQUFLek8sSUFDakN2dUIsS0FDQ3UrQixXQUFXaFEsRUFwRGxCLFNBQXVCQSxFQUFNN3RCLEVBQWF1OEIsR0FDeEMsSUFBSUMsRUFFQUMsRUFEQUMsRUFBVUgsRUFBUyxHQUV2QixPQUFPLFdBQ0wsSUFBSUksRUFBVSxHQUFNcjlCLEtBQU11dUIsR0FDMUIsT0FBTzhPLElBQVlELEVBQVUsS0FDdkJDLElBQVlILEVBQVdDLEVBQ3ZCQSxFQUFlejhCLEVBQVl3OEIsRUFBV0csRUFBU0osSUE0Q2pDLENBQWMxTyxFQUFNM3RCLEVBQUdnaUIsR0FBUStNLEdBQ2hEcUQsR0FBRyxhQUFlekUsRUFBTSxPR25CN0JnUSxXRjFDYSxTQUFTaFEsRUFBTTNMLEVBQU8rTSxHQUNuQyxJQUFJempCLEVBQU0sVUFBWXFpQixHQUFRLElBQzlCLEdBQUkxYyxVQUFVeFMsT0FBUyxFQUFHLE9BQVE2TSxFQUFNbE0sS0FBSzI2QixNQUFNenVCLEtBQVNBLEVBQUl3eEIsT0FDaEUsR0FBYSxNQUFUOWEsRUFBZSxPQUFPNWlCLEtBQUsyNkIsTUFBTXp1QixFQUFLLE1BQzFDLEdBQXFCLG1CQUFWMFcsRUFBc0IsTUFBTSxJQUFJK0UsTUFDM0MsT0FBTzNuQixLQUFLMjZCLE1BQU16dUIsRUFBS3F5QixHQUFXaFEsRUFBTTNMLEVBQW1CLE1BQVorTSxFQUFtQixHQUFLQSxLRXNDdkU0SCxLTTdDYSxTQUFTM1UsR0FDdEIsT0FBTzVpQixLQUFLMjZCLE1BQU0sT0FBeUIsbUJBQVYvWCxFQVJuQyxTQUFzQkEsR0FDcEIsT0FBTyxXQUNMLElBQUlxYSxFQUFTcmEsRUFBTTVpQixNQUNuQkEsS0FBS2t4QixZQUF3QixNQUFWK0wsRUFBaUIsR0FBS0EsR0FNckMsQ0FBYUgsR0FBVzk4QixLQUFNLE9BQVE0aUIsSUFmOUMsU0FBc0JBLEdBQ3BCLE9BQU8sV0FDTDVpQixLQUFLa3hCLFlBQWN0TyxHQWNmLENBQXNCLE1BQVRBLEVBQWdCLEdBQUtBLEVBQVEsTU4yQ2hENmIsVUQ1Q2EsU0FBUzdiLEdBQ3RCLElBQUkxVyxFQUFNLE9BQ1YsR0FBSTJGLFVBQVV4UyxPQUFTLEVBQUcsT0FBUTZNLEVBQU1sTSxLQUFLMjZCLE1BQU16dUIsS0FBU0EsRUFBSXd4QixPQUNoRSxHQUFhLE1BQVQ5YSxFQUFlLE9BQU81aUIsS0FBSzI2QixNQUFNenVCLEVBQUssTUFDMUMsR0FBcUIsbUJBQVYwVyxFQUFzQixNQUFNLElBQUkrRSxNQUMzQyxPQUFPM25CLEtBQUsyNkIsTUFBTXp1QixFQUFLdXlCLEdBQVU3YixLQ3dDakNpTyxPT3REYSxXQUNiLE9BQU83d0IsS0FBS2d6QixHQUFHLGFBVGpCLFNBQXdCc0gsR0FDdEIsT0FBTyxXQUNMLElBQUlyakIsRUFBU2pYLEtBQUsyeEIsV0FDbEIsSUFBSyxJQUFJL3dCLEtBQUtaLEtBQUt5NkIsYUFBYyxJQUFLNzVCLElBQU0wNUIsRUFBSSxPQUM1Q3JqQixHQUFRQSxFQUFPc2IsWUFBWXZ5QixPQUtKbS9CLENBQWVuL0IsS0FBS2c5QixPUHNEakRyQyxNWlphLFNBQVNwTSxFQUFNM0wsR0FDNUIsSUFBSTBYLEVBQUt0NkIsS0FBS2c5QixJQUlkLEdBRkF6TyxHQUFRLEdBRUoxYyxVQUFVeFMsT0FBUyxFQUFHLENBRXhCLElBREEsSUFDa0N3SSxFQUQ5Qjh5QixFQUFRLEdBQUkzNkIsS0FBS21xQixPQUFRbVEsR0FBSUssTUFDeEIvNUIsRUFBSSxFQUFHUCxFQUFJczZCLEVBQU10N0IsT0FBV3VCLEVBQUlQLElBQUtPLEVBQzVDLElBQUtpSCxFQUFJOHlCLEVBQU0vNUIsSUFBSTJ0QixPQUFTQSxFQUMxQixPQUFPMW1CLEVBQUUrYSxNQUdiLE9BQU8sS0FHVCxPQUFPNWlCLEtBQUtrM0IsTUFBZSxNQUFUdFUsRUFBZ0I4WixHQUFjRyxJQUFldkMsRUFBSS9MLEVBQU0zTCxLWUZ6RTJXLE1SbERhLFNBQVMzVyxHQUN0QixJQUFJMFgsRUFBS3Q2QixLQUFLZzlCLElBRWQsT0FBT25yQixVQUFVeFMsT0FDWFcsS0FBS2szQixNQUF1QixtQkFBVnRVLEVBQ2RnYixHQUNBQyxJQUFldkQsRUFBSTFYLElBQ3ZCLEdBQUk1aUIsS0FBS21xQixPQUFRbVEsR0FBSWYsT1E0QzNCdUIsU1BuRGEsU0FBU2xZLEdBQ3RCLElBQUkwWCxFQUFLdDZCLEtBQUtnOUIsSUFFZCxPQUFPbnJCLFVBQVV4UyxPQUNYVyxLQUFLazNCLE1BQXVCLG1CQUFWdFUsRUFDZGtiLEdBQ0FDLElBQWtCekQsRUFBSTFYLElBQzFCLEdBQUk1aUIsS0FBS21xQixPQUFRbVEsR0FBSVEsVU82QzNCQyxLTnpEYSxTQUFTblksR0FDdEIsSUFBSTBYLEVBQUt0NkIsS0FBS2c5QixJQUVkLE9BQU9uckIsVUFBVXhTLE9BQ1hXLEtBQUtrM0IsS0FBSzhHLEdBQWExRCxFQUFJMVgsSUFDM0IsR0FBSTVpQixLQUFLbXFCLE9BQVFtUSxHQUFJUyxNTXFEM0JxRSxZUXpEYSxTQUFTeGMsR0FDdEIsR0FBcUIsbUJBQVZBLEVBQXNCLE1BQU0sSUFBSStFLE1BQzNDLE9BQU8zbkIsS0FBS2szQixLQVZkLFNBQXFCb0QsRUFBSTFYLEdBQ3ZCLE9BQU8sV0FDTCxJQUFJeGlCLEVBQUl3aUIsRUFBTXBSLE1BQU14UixLQUFNNlIsV0FDMUIsR0FBaUIsbUJBQU56UixFQUFrQixNQUFNLElBQUl1bkIsTUFDdkMsR0FBSTNuQixLQUFNczZCLEdBQUlTLEtBQU8zNkIsR0FNTmcvQixDQUFZcC9CLEtBQUtnOUIsSUFBS3BhLEtSd0R2Q3NCLElTbEVhLFdBQ2IsSUFBSWdhLEVBQUtDLEVBQUtoRyxFQUFPbjRCLEtBQU1zNkIsRUFBS25DLEVBQUs2RSxJQUFLNXFCLEVBQU8rbEIsRUFBSy9sQixPQUN0RCxPQUFPLElBQUlpdEIsU0FBUSxTQUFTQyxFQUFTQyxHQUNuQyxJQUFJQyxFQUFTLENBQUM1YyxNQUFPMmMsR0FDakJyYixFQUFNLENBQUN0QixNQUFPLFdBQTRCLEtBQVR4USxHQUFZa3RCLE1BRWpEbkgsRUFBS2pCLE1BQUssV0FDUixJQUFJK0QsRUFBVyxHQUFJajdCLEtBQU1zNkIsR0FDckJ0SCxFQUFLaUksRUFBU2pJLEdBS2RBLElBQU9rTCxLQUNUQyxHQUFPRCxFQUFNbEwsR0FBSXhQLFFBQ2I1UixFQUFFNHRCLE9BQU92Z0MsS0FBS3VnQyxHQUNsQnJCLEVBQUl2c0IsRUFBRTZ0QixVQUFVeGdDLEtBQUt1Z0MsR0FDckJyQixFQUFJdnNCLEVBQUVzUyxJQUFJamxCLEtBQUtpbEIsSUFHakIrVyxFQUFTakksR0FBS21MLEtBSUgsSUFBVC9yQixHQUFZa3RCLFFUMkNsQixDQUFDeEgsT0FBT0MsVUFBVzZHLEdBQW9COUcsT0FBT0MsV1VoRWhELElBQUkySCxHQUFnQixDQUNsQmxHLEtBQU0sS0FDTkQsTUFBTyxFQUNQdUIsU0FBVSxJQUNWQyxLQ0RLLFNBQW9CbHpCLEdBQ3pCLFFBQVNBLEdBQUssSUFBTSxFQUFJQSxFQUFJQSxFQUFJQSxHQUFLQSxHQUFLLEdBQUtBLEVBQUlBLEVBQUksR0FBSyxJREc5RCxTQUFTZzNCLEdBQVExVSxFQUFNbVEsR0FFckIsSUFEQSxJQUFJQyxJQUNLQSxFQUFTcFEsRUFBS3NRLGlCQUFtQkYsRUFBU0EsRUFBT0QsS0FDeEQsS0FBTW5RLEVBQU9BLEVBQUt3SCxZQUNoQixNQUFNLElBQUloSyxNQUFNLGNBQWMyUyxlQUdsQyxPQUFPQyxFRWZULHVCQ0ZlLFNBQVNoTSxHQUN0QixPQUFPdnVCLEtBQUtrM0IsTUFBSyxZQ0RKLFNBQVMvTSxFQUFNb0UsR0FDNUIsSUFDSTBNLEVBQ0EwRSxFQUVBLytCLEVBSkE0NUIsRUFBWXJRLEVBQUtzUSxhQUdqQjFRLEdBQVEsRUFHWixHQUFLeVEsRUFBTCxDQUlBLElBQUs1NUIsS0FGTDJ0QixFQUFlLE1BQVJBLEVBQWUsS0FBT0EsRUFBTyxHQUUxQmlNLEdBQ0hTLEVBQVdULEVBQVU1NUIsSUFBSTJ0QixPQUFTQSxHQUN2Q29SLEVBQVMxRSxFQUFTTCxNOUJQQSxHOEJPb0JLLEVBQVNMLE05QkovQixFOEJLaEJLLEVBQVNMLE05QkpNLEU4QktmSyxFQUFTM0IsTUFBTXRqQixPQUNmaWxCLEVBQVNqSSxHQUFHeEksS0FBS21WLEVBQVMsWUFBYyxTQUFVeFYsRUFBTUEsRUFBSzJDLFNBQVVtTyxFQUFTOVYsTUFBTzhWLEVBQVMxUSxjQUN6RmlRLEVBQVU1NUIsSUFMOEJtcEIsR0FBUSxFQVFyREEsVUFBY0ksRUFBS3NRLGNEbEJyQmdGLENBQVV6L0IsS0FBTXV1QixPRENwQix3QkZpQmUsU0FBU0EsR0FDdEIsSUFBSStMLEVBQ0FDLEVBRUFoTSxhQUFnQixJQUNsQitMLEVBQUsvTCxFQUFLeU8sSUFBS3pPLEVBQU9BLEVBQUttUSxRQUUzQnBFLEVBQUtxRSxNQUFVcEUsRUFBU21GLElBQWVsRyxLQUFPVixLQUFPdkssRUFBZSxNQUFSQSxFQUFlLEtBQU9BLEVBQU8sSUFHM0YsSUFBSyxJQUFJaUcsRUFBU3gwQixLQUFLMDBCLFFBQVMxMUIsRUFBSXcxQixFQUFPbjFCLE9BQVF5QyxFQUFJLEVBQUdBLEVBQUk5QyxJQUFLOEMsRUFDakUsSUFBSyxJQUF5Q3FvQixFQUFyQ0ksRUFBUWlLLEVBQU8xeUIsR0FBSXpCLEVBQUlrcUIsRUFBTWxyQixPQUFjdUIsRUFBSSxFQUFHQSxFQUFJUCxJQUFLTyxHQUM5RHVwQixFQUFPSSxFQUFNM3BCLEtBQ2ZxNkIsR0FBUzlRLEVBQU1vRSxFQUFNK0wsRUFBSTE1QixFQUFHMnBCLEVBQU9nUSxHQUFVc0UsR0FBUTFVLEVBQU1tUSxJQUtqRSxPQUFPLElBQUksR0FBVzlGLEVBQVF4MEIsS0FBSzIwQixTQUFVcEcsRUFBTStMLElLdENyRCxJQUFNc0YsR0FBWS9LLEdBQU8sWUNGVixZQUFTcjJCLEdBQ3RCLE9BQU9BLEVDU1QsU0FBUyxHQUFRcWhDLEVBQVUzL0IsR0FDekIsSUFBSW82QixFQUFLcDZCLEVBQUVvNkIsR0FDUHdGLEVBQU81L0IsRUFBRTQvQixLQUNUQyxFQUE2QixNQUFoQjcvQixFQUFFNi9CLFdBQXFCLEdBQUs3L0IsRUFBRTYvQixXQUMzQzN6QixFQU1DLFNBQWdCeXpCLEVBQVUzL0IsR0FDL0IsSUFBSTgvQixFQ25CUyxTQUFTN3ZCLEdBQ3RCLEdBQWlCLE1BQWJBLEVBQW1CLE9BQU8sR0FDOUIsSUFBSW5ILEVBQ0FDLEVBQ0FnM0IsRUFBSzl2QixFQUFVaEMsTUFBTSxHQUNyQit4QixFQUFLL3ZCLEVBQVVoQyxNQUFNLEdBQ3JCdEQsRUFBS3NGLEVBQVUvQixVQUFVLEdBQ3pCdEQsRUFBS3FGLEVBQVUvQixVQUFVLEdBQzdCLE9BQU8sU0FBUzZZLEVBQU9ybUIsR0FDaEJBLElBQUdvSSxFQUFLQyxFQUFLLEdBQ2xCLElBQUluSCxFQUFJLEVBQUd6QixFQUFJNG1CLEVBQU01bkIsT0FBUTJuQixFQUFTLElBQUk5akIsTUFBTTdDLEdBR2hELElBRkEybUIsRUFBTyxJQUFNaGUsR0FBTWllLEVBQU0sSUFBTWdaLEVBQUtwMUIsRUFDcENtYyxFQUFPLElBQU0vZCxHQUFNZ2UsRUFBTSxJQUFNaVosRUFBS3AxQixFQUM3QmhKLEVBQUl6QixHQUFHMm1CLEVBQU9sbEIsR0FBS21sQixFQUFNbmxCLEtBQU1BLEVBQ3RDLE9BQU9rbEIsR0RLWSxDQUFVNlksRUFBUzF2QixXQUNwQ2d3QixFQUFPTixFQUFTTSxLQUVwQixTQUFTOTZCLEVBQUl6RSxFQUFHZixHQUNWQSxFQUFPUixRQUFRUSxFQUFPUCxNQUMxQixJQUFLLElBQUlJLEVBQUl5Z0MsRUFBS3YvQixFQUFJLEdBQUtBLEVBQUlBLEdBQUkrQixFQUFJLEVBQUd0QyxFQUFJWCxFQUFFTCxPQUFRc0QsRUFBSXRDLElBQUtzQyxFQUMvRDlDLEVBQU9aLEtBQUsrZ0MsRUFBZXRnQyxFQUFFaUQsR0FBSUEsSUFFL0IvQixFQUFJLEdFN0JHLFNBQVNZLEVBQU9uQixHQUU3QixJQURBLElBQUl3SCxFQUFHL0YsRUFBSU4sRUFBTW5DLE9BQVF1QixFQUFJa0IsRUFBSXpCLEVBQzFCTyxJQUFNa0IsR0FBRytGLEVBQUlyRyxFQUFNWixHQUFJWSxFQUFNWixLQUFPWSxFQUFNTSxHQUFJTixFQUFNTSxHQUFLK0YsRUYyQm5EMmUsQ0FBUTNtQixFQUFRUSxHQUc3QixTQUFTdkIsRUFBTXdCLEdBQ2IsT0FBTzAvQixFQUFlMS9CLEdBR3hCLFNBQVMxQixFQUFLdWhDLEdBRVosSUFEQSxJQUFJdGdDLEVBQVMsR0FDSmUsRUFBSSxFQUFHUCxFQUFJOC9CLEVBQUs5Z0MsT0FBUXVCLEVBQUlQLElBQUtPLEVBQUd5RSxFQUFJODZCLEVBQUt2L0IsR0FBSWYsR0FFMUQsT0FESUEsRUFBT1IsT0FBUyxHQUFHUSxFQUFPWixLQUFLWSxFQUFPLElBQ25DQSxFQUdULFNBQVM0RCxFQUFLMDhCLEdBRVosSUFEQSxJQUFJdGdDLEVBQVNqQixFQUFLdWhDLEdBQ1h0Z0MsRUFBT1IsT0FBUyxHQUFHUSxFQUFPWixLQUFLWSxFQUFPLElBQzdDLE9BQU9BLEVBR1QsU0FBUzJELEVBQVEyOEIsR0FDZixPQUFPQSxFQUFLaFosSUFBSTFqQixHQWtCbEIsT0FmQSxTQUFTMkksRUFBU2xNLEdBQ2hCLElBQW1CK00sRUFBZlYsRUFBT3JNLEVBQUVxTSxLQUNiLE9BQVFBLEdBQ04sSUFBSyxxQkFBc0IsTUFBTyxDQUFDQSxLQUFNQSxFQUFNbUIsV0FBWXhOLEVBQUV3TixXQUFXeVosSUFBSS9hLElBQzVFLElBQUssUUFBU2EsRUFBY25PLEVBQU1vQixFQUFFK00sYUFBYyxNQUNsRCxJQUFLLGFBQWNBLEVBQWMvTSxFQUFFK00sWUFBWWthLElBQUlyb0IsR0FBUSxNQUMzRCxJQUFLLGFBQWNtTyxFQUFjck8sRUFBS3NCLEVBQUVpZ0MsTUFBTyxNQUMvQyxJQUFLLGtCQUFtQmx6QixFQUFjL00sRUFBRWlnQyxLQUFLaFosSUFBSXZvQixHQUFPLE1BQ3hELElBQUssVUFBV3FPLEVBQWN6SixFQUFRdEQsRUFBRWlnQyxNQUFPLE1BQy9DLElBQUssZUFBZ0JsekIsRUFBYy9NLEVBQUVpZ0MsS0FBS2haLElBQUkzakIsR0FBVSxNQUN4RCxRQUFTLE9BQU8sS0FFbEIsTUFBTyxDQUFDK0ksS0FBTUEsRUFBTVUsWUFBYUEsR0FHNUJiLENBQVNsTSxHQXRERCxDQUFPMi9CLEVBQVUzL0IsR0FDaEMsT0FBYSxNQUFObzZCLEdBQXNCLE1BQVJ3RixFQUFlLENBQUN2ekIsS0FBTSxVQUFXd3pCLFdBQVlBLEVBQVkzekIsU0FBVUEsR0FDMUUsTUFBUjB6QixFQUFlLENBQUN2ekIsS0FBTSxVQUFXK3RCLEdBQUlBLEVBQUl5RixXQUFZQSxFQUFZM3pCLFNBQVVBLEdBQzNFLENBQUNHLEtBQU0sVUFBVyt0QixHQUFJQSxFQUFJd0YsS0FBTUEsRUFBTUMsV0FBWUEsRUFBWTN6QixTQUFVQSxHR1hoRixJQUVJZzBCLEdBQ0FDLEdBQ0FDLEdBQ0FDLEdBTEVDLEdBYU4sV0FDRSxJQUFNQyxFQUFnQixHQUFoQkEsRUFBMkIsR0FBM0JBLEVBQXVDLEdBQXZDQSxFQUFpRCxHQUNqREMsRUFDRyxDQUNMbGlDLEVBQUcsQ0FDRGtNLEtBQU0sRUFDTkQsSUFBSyxHQUVQMUwsRUFBRyxDQUNEMkwsS0FBTSxLQUNORCxJQUFLLE9BUkxpMkIsRUFXRyxDQUNMbGlDLEVBQUcsQ0FDRGtNLEtBQU0sS0FDTkQsSUFBSyxNQUVQMUwsRUFBRyxDQUNEMkwsS0FBTSxLQUNORCxJQUFLLE9BS1B1RCxFQUFhMnlCLEtBQ2JDLEVDcENTLFNBQVM1eUIsRUFBWTBHLEdBQ2xDLElBQ0ltc0IsRUFDQUMsRUFGQWpzQixFQUFjLElBSWxCLFNBQVNrc0IsRUFBS24wQixHQUtaLE9BSklBLElBQ3lCLG1CQUFoQmlJLEdBQTRCaXNCLEVBQWNqc0IsYUFBYUEsRUFBWXJELE1BQU14UixLQUFNNlIsWUFDMUZsUixHQUFPaU0sRUFBUWkwQixFQUFpQkMsS0FFM0JBLEVBQWNyaEMsU0F3Q3ZCLE9BckNBc2hDLEVBQUs3dEIsS0FBTyxTQUFTdEcsR0FFbkIsT0FEQWpNLEdBQU9pTSxFQUFRaTBCLEVBQWlCLEtBQ3pCLGFBR1RFLEVBQUtDLFFBQVUsU0FBU3AwQixHQUV0QixPQURBak0sR0FBT2lNLEVBQVFpMEIsRUFBaUIsS0FDekIsYUFHVEUsRUFBS2p6QixPQUFTLFNBQVNsQixHQUVyQixPQURBak0sR0FBT2lNLEVBQVFpMEIsRUFBaUIsS0FDekIsYUFHVEUsRUFBSzNzQixTQUFXLFNBQVN4SCxHQUV2QixPQURBak0sR0FBT2lNLEVBQVFpMEIsRUFBaUIsS0FDekIsYUFHVEUsRUFBSy95QixXQUFhLFNBQVM0RCxHQUN6QixPQUFPQyxVQUFVeFMsUUFBVXdoQyxFQUF3QixNQUFManZCLEdBQWE1RCxFQUFhLEtBQU1xRCxJQUFhckQsRUFBYTRELEdBQUdqUixPQUFRb2dDLEdBQVEveUIsR0FHN0greUIsRUFBS3JzQixRQUFVLFNBQVM5QyxHQUN0QixPQUFLQyxVQUFVeFMsUUFDZnloQyxFQUFxQixNQUFMbHZCLEdBQWE4QyxFQUFVLEtBQU0sSUFBSWMsSUFBYyxJQUFJZixHQUFZQyxFQUFVOUMsR0FDOUQsbUJBQWhCaUQsR0FBNEJpc0IsRUFBY2pzQixZQUFZQSxHQUMxRGtzQixHQUh1QnJzQixHQU1oQ3FzQixFQUFLbHNCLFlBQWMsU0FBU2pELEdBQzFCLE9BQUtDLFVBQVV4UyxRQUNmd1YsRUFBMkIsbUJBQU5qRCxFQUFtQkEsR0FBS2t2QixFQUFjanNCLGFBQWFqRCxJQUFLQSxHQUN0RW12QixHQUZ1QmxzQixHQUt6QmtzQixFQUFLL3lCLFdBQVdBLEdBQVkwRyxRQUFRQSxHRGQzQnVzQixHQUVaM3VCLEVBQVEsRUFDUkUsRUFBUyxFQUVUMHVCLEVBQWEsRUFFYjVGLEVBQVM2RixLQUNUNUYsRUFBUzRGLEtBa0liLFNBQVNYLEVBQU1ZLEdBQ2IsSUFBTWxVLEVBQU9rVSxFQUFVM1UsU0FqSXpCLFlBQW9DLElBQVJTLEVBQVEsRUFBUkEsS0FHcEJtVSxFQUg0QixFQUFuQkQsVUFDT25NLFVBQVUsT0FBTy9ILEtBQUssQ0FBQ0EsSUFDeEJGLFFBQVFvSixPQUFPLE9BQ1pBLE9BQU8sS0FDL0JpTCxFQUNHakwsT0FBTyxLQUNQZSxLQUFLLFFBQVMsV0FDZGYsT0FBTyxRQUNQZSxLQUFLLE9BQVEsUUFDYkEsS0FBSyxTQUFVLFdBQ2ZBLEtBQUssZUFBZ0IsR0FFeEIsSUFBTW1LLEVBQVFELEVBQU9qTCxPQUFPLEtBQUtlLEtBQUssUUFBUyxXQUMvQ21LLEVBQ0dsTCxPQUFPLFVBQ1BlLEtBQUssUUFBUyxTQUNkQSxLQUFLLE9BQVEsV0FFaEJtSyxFQUNHbEwsT0FBTyxRQUNQZSxLQUFLLFFBQVMsUUFDZDNILE1BQU0sT0FBUSxXQUNkQSxNQUFNLFNBQVUsUUFDaEJBLE1BQU0sZUFBZ0IsU0FFekI2UixFQUFPakwsT0FBTyxLQUFLZSxLQUFLLFFBQVMsVUEwR2pDbkssQ0FBTSxDQUFFb1UsWUFBV2xVLFNBdEduQm9PLEVBQ0dyVixPQUFPLENBQUN5YSxFQUFvQmxpQyxFQUFFa00sSUFBS2cyQixFQUFvQmxpQyxFQUFFaU0sTUFDekR5YixNQUFNLENBQUMsRUFBRzVULElBQ2JpcEIsRUFDR3RWLE9BQU8sQ0FBQ3lhLEVBQW9CM2hDLEVBQUUyTCxJQUFLZzJCLEVBQW9CM2hDLEVBQUUwTCxNQUN6RHliLE1BQU0sQ0FBQzFULEVBQVEsSUFHcEIsWUFBd0MsSUh6RmxCcXRCLEVBQVUzL0IsRUd5RlhraEMsRUFBbUIsRUFBbkJBLFVBQVdsVSxFQUFRLEVBQVJBLEtBVzFCN0ssRUFWTStlLEVBQ1B2TSxPQUFPLE9BQ1BzQyxLQUNDLFVBQ0EsUUFDRzdrQixFQUFRbXVCLEVBQWNBLEdBQ3ZCLEtBQ0NqdUIsRUFBU2l1QixFQUFhQSxJQUkxQjVMLE9BQU8sS0FDUHNDLEtBQUssWUFBYSxhQUFlc0osRUFBYyxJQUFNQSxFQUFhLEtBR2pFYSxFQUFRamYsRUFBRXdTLE9BQU8sWUFFZjBNLEVBQWNoa0MsS0FBS0ssSUFBSTI5QixFQUFPbUYsRUFBb0IzaEMsRUFBRTBMLEtBQU84d0IsRUFBTyxJQUV4RXZ0QixFQUNHSSxVQUFVLENBQUNrdEIsRUFBTyxHQUFJQyxFQUFPLEtBQzdCcHRCLE1BQU1vekIsR0FDTjN3QixPQUFPMHZCLElBQ1ZNLEVBQVU1eUIsV0FBV0EsR0FFckJzekIsRUFDR3pNLE9BQU8sVUFDUHNDLEtBQUssS0FBTW1FLEVBQU8sSUFDbEJuRSxLQUFLLEtBQU1vRSxFQUFPLElBQ2xCcEUsS0FBSyxJQUFLbnBCLEVBQVdHLFNBRXhCbXpCLEVBQ0d6TSxPQUFPLFNBQ1BwSSxPSDNIaUJvVCxFRzJITVEsR0gzSEluZ0MsRUcySEdtZ0MsR0FBTW1CLFFBQVFDLFVIMUhoQyxpQkFBTnZoQyxJQUFnQkEsRUFBSTIvQixFQUFTMkIsUUFBUXRoQyxJQUM5Qix1QkFBWEEsRUFBRXFNLEtBQ0gsQ0FBQ0EsS0FBTSxvQkFBcUJPLFNBQVU1TSxFQUFFd04sV0FBV3laLEtBQUksU0FBU2puQixHQUFLLE9BQU8sR0FBUTIvQixFQUFVMy9CLE9BQzlGLEdBQVEyL0IsRUFBVTMvQixLR3dIbkJpM0IsS0FBSyxJQUFLeUosR0FHYixJQWlGRixFQUF1QmMsRUFBSUMsRUFBSUMsRUFBSUMsRUFqRjdCQyxFQUFRemYsRUFBRXdTLE9BQU8saUJBRWZrTixFQUFleGtDLEtBQUtLLElBQUkwOUIsRUFBT29GLEVBQW9CbGlDLEVBQUVpTSxLQUFPNndCLEVBQU8sSUFFbkUwRyxFQUFlemtDLEtBQUtLLElBQUkyOUIsRUFBT21GLEVBQW9CM2hDLEVBQUUwTCxLQUFPOHdCLEVBQU8sSUFFekV1RyxFQUFNM0ssS0FDSixLQTBFbUJ1SyxHQUF2QixFQXpFZ0IsQ0FDVkEsR0FBSXBHLEVBQU8sR0FDWHFHLEdBQUlwRyxFQUFPLEdBQ1hxRyxHQUFJRyxFQUNKRixHQUFJRyxJQXFFYU4sR0FBSUMsRUFBYyxFQUFkQSxHQUFJQyxFQUFVLEVBQVZBLEdBQUlDLEVBQU0sRUFBTkEsR0FDakNILEVBQUtPLFdBQVdQLEVBQUksSUFDcEJDLEVBQUtNLFdBQVdOLEVBQUksSUFDcEJDLEVBQUtLLFdBQVdMLEVBQUksSUFDcEJDLEVBQUtJLFdBQVdKLEVBQUksSUFFSixjQUFILE9BQ05ILEVBQUtFLEVBREMsYUFDTUQsRUFETixzQkFFTkMsRUFGTSxhQUVDQyxFQUZELG1CQUVtQixFQUFMRCxFQUZkLHlCQUdOQSxFQUhNLGFBR0NDLEVBSEQsb0JBR29CLEVBQU5ELEVBSGQsbUJBdEVJdmYsRUFDZHdTLE9BQU8sV0FDUEksVUFBVSxjQUNWL0gsS0FBS0EsR0FBTSxTQUFBcnFCLEdBQUMsT0FBSUEsRUFBRXEvQixZQUVWdnNCLE1BQ1QsU0FBQXFYLEdBQUssT0FDSEEsRUFDR29KLE9BQU8sVUFDUGUsS0FBSyxRQUFTLGFBQ2RHLFFBQVEsbUJBQW1CLFNBQUF6MEIsR0FBQyxPQUFJQSxFQUFFcy9CLFdBQ2xDN0ssUUFBUSxxQkFBcUIsU0FBQXowQixHQUFDLE9BQUlBLEVBQUV1L0IsYUFDcENqTCxLQUFLLElBQUsrSixHQUNWL0osS0FBSyxVQUFVLFNBQUF0MEIsR0FBQyxPQUFJQSxFQUFFdy9CLFdBQ3RCbEwsS0FBSyxVQUFVLFNBQUF0MEIsR0FBQyxPQUFJQSxFQUFFeS9CLFdBQ3RCbkwsS0FDQyxhQUNBLFNBQUF0MEIsR0FBQywwQkFBaUJ5NEIsRUFBT3o0QixFQUFFdy9CLFNBQTFCLGFBQXVDOUcsRUFBTzE0QixFQUFFeS9CLFNBQWhELFFBRUZ0UCxHQUFHLFlBQWF1UCxFQUFhQyxXQUM3QnhQLEdBQUcsYUFBY3VQLEVBQWFFLGVBQ25DLFNBQUFsVyxHQUFNLE9BQ0pBLEVBQ0c0SyxLQUFLLFVBQVUsU0FBQXQwQixHQUFDLE9BQUlBLEVBQUV3L0IsV0FDdEJsTCxLQUFLLFVBQVUsU0FBQXQwQixHQUFDLE9BQUlBLEVBQUV5L0IsV0FDdEI5WCxNQUFLLFNBQUErQixHQUFNLE9BQ1ZBLEVBQ0d3USxXQUFXd0QsSUFDWHBKLEtBQ0MsYUFDQSxTQUFBdDBCLEdBQUMsMEJBQWlCeTRCLEVBQU96NEIsRUFBRXcvQixTQUExQixhQUF1QzlHLEVBQU8xNEIsRUFBRXkvQixTQUFoRCxjQVdiSSxDQUFVLENBQUV0QixZQUFXbFUsU0FHekIsSUFBTXFWLEVBQWUsQ0FDbkJDLFVBRG1CLFNBQ1RsUCxFQUFPendCLEdBQ2YwL0IsRUFBYUksWUFBWXJQLEVBQU96d0IsR0FDaENneUIsR0FBTzcwQixNQUFNczNCLFFBQVEsYUFBYSxJQUVwQ21MLFdBTG1CLFdMaEtuQjdDLEdBQ0c3QyxhQUNBakMsU0FBUyxLQUNUdEwsTUFBTSxVQUFXLEdLb0tsQnFGLEdBQU83MEIsTUFBTXMzQixRQUFRLGFBQWEsSUFFcENxTCxZQVRtQixTQVNQclAsRUFBT3p3QixHQUNqQixJQUFJKy9CLEVBQWMsQ0FBQyxDQUFFbmUsS0FBTTVoQixFQUFFZ2dDLFdBQWEsQ0FBRUMsVUFBV2pnQyxFQUFFa2dDLGVMcE12RCxTQUFTelAsRUFBTzBQLEdBQ3BCLElBQUlDLEVBQU8zUCxFQUFNNFAsTUFBUSxJQUNyQkMsRUFBTzdQLEVBQU04UCxNQUNiRCxFQUFPLEdBQUtubUMsU0FBU0MsS0FBS29tQyxZQUFjLE1BQzFDRixFQUFPbm1DLFNBQVNDLEtBQUtvbUMsWUFBYyxFQUFJLEtBR3JDSixFQUFPLEtBQ1RBLEdBQWMsSUFHaEJyRCxHQUNHN0MsYUFDQWpDLFNBQVMsS0FDVHRMLE1BQU0sVUFBVyxJQUNqQndELEdBQUcsT0FBTyxXQUNUNE0sR0FBVXRJLFFBQVEsWUFBWSxHQUM5QnNJLEdBQVUvSyxPQUFPLGtCQUFrQjdCLEdBQUcsUUFBU2h6QixLQUFLc2pDLFNBRXhEMUQsR0FDR3BJLEtBQUt3TCxHQUNMeFQsTUFBTSxhQUFjLFdBQ3BCQSxNQUFNLE9BQVEyVCxFQUFPLE1BQ3JCM1QsTUFBTSxNQUFPeVQsRUFBTyxNS21MckJNLENBQWFqUSxFQUpRLGdEQUFILE9BRWR6d0IsRUFBRXEvQixTQUZZLHVCTHZLUCxTQUFTc0IsR0FBMkIsSUFBaEJDLEVBQWdCLHdEQUM3Q1QsRUFBVSxHQXdCZCxPQXZCSVMsSUFDRlQsRUFBVSw2QkFFWlEsRUFBVXppQyxTQUFRLFNBQVMyaUMsRUFBTXZlLEdBQy9CLElBQUl3ZSxFQUFXLEtBQ1hELEVBQUksUUFDTkMsRUFBV0QsRUFBSSxPQUVqQixJQUFJblksRUFBUyxHQUNURSxFQUFTLFNBQ1RnWSxJQUNGbFksRUFBUyxjQUFILE9BQWlCb1ksRUFBakIsTUFDTmxZLEVBQVMsU0FHWCxJQUFJbVksRUFBUXpzQixPQUFPMHNCLEtBQUtILEdBQU0sR0FDOUJWLEdBQVcsR0FBSixPQUFPelgsRUFBUCx1Q0FBNENxWSxFQUE1QyxvQkFDTEYsRUFBS0UsSUFEQSxPQUVKblksTUFFRGdZLElBQ0ZULEdBQVcsU0FFTkEsRUtpSkhPLENBQXNCWCxHQUFhLE9Ba0N6QyxPQWZBcEMsRUFBTWx1QixNQUFRLFdBQ1osT0FBSyxVQUFLalQsUUFDVmlULEdBQVEseUNBQVVtdUIsRUFBY0EsRUFDekJELEdBRmtCbHVCLEdBSzNCa3VCLEVBQU1odUIsT0FBUyxXQUNiLE9BQUssVUFBS25ULFFBQ1ZtVCxHQUFTLHlDQUFVaXVCLEVBQWFBLEVBQ2hDUyxFQUFhM2pDLEtBQUtrTixJQUFhLEtBQVQrSCxFQUFnQixHQUM3QmpWLEtBQUtrTixJQUFhLE1BQVQrSCxFQUFpQixHQUU1Qmd1QixHQUxrQmh1QixHQVFwQmd1QixFQTFPS3NELEdBeVBkLFNBWkEsU0FBYzFMLEdBdE9kLElBQ1EyTCxHQXNPTjNELEdBQUt2TCxHQUFPdUQsRUFBS2dKLFlBQ2QzVSxNQUFNMkwsRUFBS2xMLE1BQ2RxVCxHQUFxQm5JLEVBQUttSSxtQkF4T3BCd0QsRUFBS3htQyxLQUFLbU4sSUFBSTAxQixHQUFHalcsT0FBTzZaLFlBQWFyUSxPQUFPc1EsYUFDbER6RCxHQUFNbHVCLE1BQU15eEIsR0FBSXZ4QixPQUFPdXhCLEVBQUssR0FDNUIzRCxHQUFHNVYsS0FBS2dXLEtBK09WLEdBTEEsU0FBa0J0VCxFQUFNbGYsR0FDdEJxeUIsR0FBUW5ULEVBQ1JvVCxHQUFrQnR5QixHRTVPcEIsR0FoQnNCLENBQ3BCazJCLEtBQU1sbkMsU0FBU2d0QixpQkFBaUIsY0FDaENnUixLQUZvQixZQUVZLElBQXpCbUosRUFBeUIsRUFBekJBLGFBQWNDLEVBQVcsRUFBWEEsUUFDbkJwbkMsU0FDRzhzQixjQUFjLGVBQWlCcWEsR0FDL0IvVCxVQUFVaHJCLElBQUksYUFFakJsQyxNQUFNQyxLQUFLbkQsS0FBS2trQyxNQUFNbmpDLFNBQVEsU0FBQXEvQixHQUM1QkEsRUFBRzVNLGlCQUFpQixRQUFTNFEsT0FHakNDLGdCQVhvQixXQVlsQixPQUFPcm5DLFNBQVM4c0IsY0FBYyx3QkFBd0J3YSxRQUFRQyxRLHVDQ1Y1REMsR0FBVyxDQUNmcEUsR0FBSXBqQyxTQUFTOHNCLGNBQWMsaUJBQzNCMmEsWUFBYXpuQyxTQUFTOHNCLGNBQWMsaUJBQ3BDNGEsV0FBWTFuQyxTQUFTOHNCLGNBQWMsZ0JBQ25DNmEsY0FBZTNuQyxTQUFTOHNCLGNBQWMsMEJBQ3RDOGEsU0FBUyxFQUNUdEwsTUFBTyxLQUNQaUgsbUJBQW9CLEVBQ3BCc0UsUUFBUyxFQUNUQyxVQUFXLEVBQ1hDLGtCQVZlLFNBVUd2ZixHQUNoQnhsQixLQUFLMmtDLGNBQWNyVCxVQUFuQixVQUFrQ3R4QixLQUFLZ2xDLFdBQVd4ZixLQUVwRHdmLFdBYmUsU0FhSnhmLEdBVVQsT0FUQUEsRUFBTyxJQUFJZixLQUFLZSxHQUNoQkEsRUFBTyxJQUFJZixLQUNUZSxFQUFLeWYsaUJBQ0x6ZixFQUFLMGYsY0FDTDFmLEVBQUsyZixhQUNMLEVBQ0EsRUFDQSxHQUVGLFVBQVUzZixFQUFLNGYsV0FBYSxFQUE1QixZQUFpQzVmLEVBQUs2ZixVQUF0QyxZQUFtRDdmLEVBQUs4ZixnQkFFMURDLGVBekJlLFdBMEJiLE9BQU92bEMsS0FBS29nQyxHQUFHb0YsV0FBVzVYLE9BRTVCNlgsY0E1QmUsWUE0QmlDLElBQWhDWCxFQUFnQyxFQUFoQ0EsVUFBV0QsRUFBcUIsRUFBckJBLFFBQVNhLEVBQVksRUFBWkEsU0FDbEMxbEMsS0FBSzZrQyxRQUFVQSxFQUNmN2tDLEtBQUs4a0MsVUFBWUEsRUFFakJVLFVBQWtCeGxDLEtBQUtvZ0MsR0FBSSxDQUN6Qi8rQixNQUFPLENBQUN5akMsR0FDUmEsU0FBUyxFQUNUQyxVQUFXLFdBRVgxZixNQUFPLENBQ0x4YixJQUFLbzZCLEVBQ0xyNkIsSUFBS282QixHQUVQaGpCLE9BQVEsQ0FDTjFlLEtBQU0sU0FBQS9DLEdBQUMsT0FBSTRoQixTQUFTNWhCLElBQ3BCZ0csR0FBSSxTQUFBaEcsR0FBQyxPQUFJNGhCLFNBQVM1aEIsS0FFcEJ5bEMsS0FBTSxDQUNKQyxLQUFNLFFBQ05DLFFBQVMsTUFJYi9sQyxLQUFLb2dDLEdBQUdvRixXQUFXN1gsSUFBSW1YLEdBRXZCOWtDLEtBQUtnbUMsbUJBRUxobUMsS0FBS29nQyxHQUFHb0YsV0FBV3hTLEdBQUcsU0FBVTBTLEdBQ2hDMWxDLEtBQUtvZ0MsR0FBR29GLFdBQVd4UyxHQUFHLFNBQVMsU0FBU3JPLEVBQVFzaEIsR0FDOUMsSUFBSUMsRUFBVyxJQUFJemhCLEtBQUtFLEVBQU9zaEIsSUFDL0JDLEVBQVcsSUFBSXpoQixLQUNieWhCLEVBQVNqQixpQkFDVGlCLEVBQVNoQixjQUNUZ0IsRUFBU2YsY0FDVGdCLFVBQ0YzQixHQUFTcEUsR0FBR29GLFdBQVc3WCxJQUFJdVksTUFHN0JsbUMsS0FBS29nQyxHQUFHdFcsY0FBUix1QkFDa0JnYixFQURsQixPQUVFeFQsVUFBWXR4QixLQUFLZ2xDLFdBQVdGLEdBRTlCOWtDLEtBQUtvZ0MsR0FBR3RXLGNBQVIsdUJBQ2tCK2EsRUFEbEIsT0FFRXZULFVBQVl0eEIsS0FBS2dsQyxXQUFXSCxJQUVoQ21CLGlCQTFFZSxXQTJFYmhtQyxLQUFLeWtDLFlBQVlqUixpQkFBaUIsU0FBUyxXQUN2QmdSLEdBQVNlLGtCQUNSZixHQUFTSyxTQUMxQkwsR0FBU3BFLEdBQUdvRixXQUFXN1gsSUFBSTZXLEdBQVNNLFdBR2QsR0FBcEJOLEdBQVNJLFFBS2JKLEdBQVM0QixnQkFKUDVCLEdBQVM2QixtQkFPZkQsY0F6RmUsV0EwRmI1QixHQUFTbEwsTUFBUVcsYUFBWSxXQUMzQixJQUFJcU0sRUFBYzlCLEdBQVNlLGlCQUN2QmdCLEVBQWMsSUFBSTloQixLQUFLNmhCLEdBQ3ZCRSxFQUFVRCxFQUFZRSxRQUFRRixFQUFZbEIsVUFBWSxHQUMxRGIsR0FBU3BFLEdBQUdvRixXQUFXN1gsSUFBSTZZLEtBQzFCaEMsR0FBU2pFLG9CQUVaaUUsR0FBU0UsV0FBV3RVLFVBQVVTLE9BQU8sWUFDckMyVCxHQUFTRSxXQUFXdFUsVUFBVWhyQixJQUFJLGFBRWxDby9CLEdBQVNJLFNBQVUsR0FFckJ5QixhQXRHZSxXQXVHYnJNLGNBQWN3SyxHQUFTbEwsT0FDdkJrTCxHQUFTSSxTQUFVLEVBQ25CSixHQUFTQyxZQUFZclUsVUFBVVMsT0FBTyxhQUN0QzJULEdBQVNDLFlBQVlyVSxVQUFVaHJCLElBQUksY0FJdkMsWSwyR0NoSElzaEMsR0FBTSxHQUNOQyxHQUFNLEdBS1YsU0FBU0MsR0FBZ0JDLEdBQ3ZCLE9BQU8sSUFBSUMsU0FBUyxJQUFLLFdBQWFELEVBQVExZixLQUFJLFNBQVNvSCxFQUFNM3RCLEdBQy9ELE9BQU9tbUMsS0FBS0MsVUFBVXpZLEdBQVEsT0FBUzN0QixFQUFJLGFBQzFDK1UsS0FBSyxLQUFPLEtBV2pCLFNBQVNzeEIsR0FBYUMsR0FDcEIsSUFBSUMsRUFBWWh3QixPQUFPQyxPQUFPLE1BQzFCeXZCLEVBQVUsR0FVZCxPQVJBSyxFQUFLbm1DLFNBQVEsU0FBU3FtQyxHQUNwQixJQUFLLElBQUlDLEtBQVVELEVBQ1hDLEtBQVVGLEdBQ2ROLEVBQVE1bkMsS0FBS2tvQyxFQUFVRSxHQUFVQSxNQUtoQ1IsRUFHVCxTQUFTUyxHQUFJMWtCLEVBQU90USxHQUNsQixJQUFJdEcsRUFBSTRXLEVBQVEsR0FBSXZqQixFQUFTMk0sRUFBRTNNLE9BQy9CLE9BQU9BLEVBQVNpVCxFQUFRLElBQUlwUCxNQUFNb1AsRUFBUWpULEVBQVMsR0FBR3NXLEtBQUssR0FBSzNKLEVBQUlBLEVBc0J2RCxZQUFTdTdCLEdBQ3RCLElBQUlDLEVBQVcsSUFBSTN2QixPQUFPLEtBQVEwdkIsRUFBWSxTQUMxQ0UsRUFBWUYsRUFBVXRiLFdBQVcsR0FXckMsU0FBU3liLEVBQVVuUSxFQUFNbGhCLEdBQ3ZCLElBSUl4TyxFQUpBcS9CLEVBQU8sR0FDUFMsRUFBSXBRLEVBQUtsNEIsT0FDVHVvQyxFQUFJLEVBQ0p2bkMsRUFBSSxFQUVKd25DLEVBQU1GLEdBQUssRUFDWEcsR0FBTSxFQU1WLFNBQVNDLElBQ1AsR0FBSUYsRUFBSyxPQUFPbEIsR0FDaEIsR0FBSW1CLEVBQUssT0FBT0EsR0FBTSxFQUFPcEIsR0FHN0IsSUFBSTlsQyxFQUFVMkgsRUFBUHpHLEVBQUk4bEMsRUFDWCxHQXpGTSxLQXlGRnJRLEVBQUt0TCxXQUFXbnFCLEdBQWMsQ0FDaEMsS0FBTzhsQyxJQUFNRCxHQTFGVCxLQTBGY3BRLEVBQUt0TCxXQUFXMmIsSUExRjlCLEtBMEY4Q3JRLEVBQUt0TCxhQUFhMmIsS0FJcEUsT0FIS2huQyxFQUFJZ25DLElBQU1ELEVBQUdFLEdBQU0sRUExRmxCLE1BMkZJdC9CLEVBQUlndkIsRUFBS3RMLFdBQVcyYixNQUFtQkUsR0FBTSxFQTFGbEQsS0EyRkl2L0IsSUFBZ0J1L0IsR0FBTSxFQTVGekIsS0E0Rm1DdlEsRUFBS3RMLFdBQVcyYixNQUFrQkEsR0FDcEVyUSxFQUFLblMsTUFBTXRqQixFQUFJLEVBQUdsQixFQUFJLEdBQUd6RCxRQUFRLE1BQU8sS0FJakQsS0FBT3lxQyxFQUFJRCxHQUFHLENBQ1osR0FsR00sTUFrR0RwL0IsRUFBSWd2QixFQUFLdEwsV0FBV3JyQixFQUFJZ25DLE1BQW1CRSxHQUFNLE9BQ2pELEdBbEdBLEtBa0dJdi9CLEVBQWdCdS9CLEdBQU0sRUFuR3pCLEtBbUdtQ3ZRLEVBQUt0TCxXQUFXMmIsTUFBa0JBLE9BQ3RFLEdBQUlyL0IsSUFBTWsvQixFQUFXLFNBQzFCLE9BQU9sUSxFQUFLblMsTUFBTXRqQixFQUFHbEIsR0FJdkIsT0FBT2luQyxHQUFNLEVBQU10USxFQUFLblMsTUFBTXRqQixFQUFHNmxDLEdBR25DLElBNUdVLEtBK0VOcFEsRUFBS3RMLFdBQVcwYixFQUFJLE1BQWtCQSxFQTlFakMsS0ErRUxwUSxFQUFLdEwsV0FBVzBiLEVBQUksTUFBaUJBLEdBNEJqQzkvQixFQUFJa2dDLE9BQWFwQixJQUFLLENBRTVCLElBREEsSUFBSVMsRUFBTSxHQUNIdi9CLElBQU02K0IsSUFBTzcrQixJQUFNOCtCLElBQUtTLEVBQUlub0MsS0FBSzRJLEdBQUlBLEVBQUlrZ0MsSUFDNUMxeEIsR0FBNEIsT0FBdEIrd0IsRUFBTS93QixFQUFFK3dCLEVBQUsvbUMsT0FDdkI2bUMsRUFBS2pvQyxLQUFLbW9DLEdBR1osT0FBT0YsRUFHVCxTQUFTYyxFQUFjZCxFQUFNTCxHQUMzQixPQUFPSyxFQUFLL2YsS0FBSSxTQUFTaWdCLEdBQ3ZCLE9BQU9QLEVBQVExZixLQUFJLFNBQVNrZ0IsR0FDMUIsT0FBT1ksRUFBWWIsRUFBSUMsT0FDdEIxeEIsS0FBSzR4QixNQWtCWixTQUFTVyxFQUFVZCxHQUNqQixPQUFPQSxFQUFJamdCLElBQUk4Z0IsR0FBYXR5QixLQUFLNHhCLEdBR25DLFNBQVNVLEVBQVlybEIsR0FDbkIsT0FBZ0IsTUFBVEEsRUFBZ0IsR0FDakJBLGFBQWlCNkIsS0F2RzNCLFNBQW9CZSxHQUNsQixJQVBrQjJpQixFQU9kQyxFQUFRNWlCLEVBQUs2aUIsY0FDYkMsRUFBVTlpQixFQUFLK2lCLGdCQUNmQyxFQUFVaGpCLEVBQUtpakIsZ0JBQ2ZDLEVBQWVsakIsRUFBS21qQixxQkFDeEIsT0FBT2htQixNQUFNNkMsR0FBUSxpQkFYSDJpQixFQVlEM2lCLEVBQUt5ZixrQkFYUixFQUFJLElBQU1xQyxJQUFLYSxFQUFNLEdBQy9CQSxFQUFPLEtBQU8sSUFBTWIsR0FBSWEsRUFBTSxHQUM5QmIsR0FBSWEsRUFBTSxJQVMrQixJQUFNYixHQUFJOWhCLEVBQUswZixjQUFnQixFQUFHLEdBQUssSUFBTW9DLEdBQUk5aEIsRUFBSzJmLGFBQWMsSUFDMUd1RCxFQUFlLElBQU1wQixHQUFJYyxFQUFPLEdBQUssSUFBTWQsR0FBSWdCLEVBQVMsR0FBSyxJQUFNaEIsR0FBSWtCLEVBQVMsR0FBSyxJQUFNbEIsR0FBSW9CLEVBQWMsR0FBSyxJQUNuSEYsRUFBVSxJQUFNbEIsR0FBSWMsRUFBTyxHQUFLLElBQU1kLEdBQUlnQixFQUFTLEdBQUssSUFBTWhCLEdBQUlrQixFQUFTLEdBQUssSUFDaEZGLEdBQVdGLEVBQVEsSUFBTWQsR0FBSWMsRUFBTyxHQUFLLElBQU1kLEdBQUlnQixFQUFTLEdBQUssSUFDakUsSUE2RjBCdEQsQ0FBV3BpQixHQUNuQzRrQixFQUFTaGMsS0FBSzVJLEdBQVMsSUFBTSxJQUFPQSxFQUFNemxCLFFBQVEsS0FBTSxNQUFVLElBQ2xFeWxCLEVBR1IsTUFBTyxDQUNMNlksTUE1RkYsU0FBZWxFLEVBQU1saEIsR0FDbkIsSUFBSXV5QixFQUFTL0IsRUFBU0ssRUFBT1EsRUFBVW5RLEdBQU0sU0FBUzZQLEVBQUt4bUMsR0FDekQsR0FBSWdvQyxFQUFTLE9BQU9BLEVBQVF4QixFQUFLeG1DLEVBQUksR0FDckNpbUMsRUFBVU8sRUFBS3dCLEVBQVV2eUIsRUF0RC9CLFNBQXlCd3dCLEVBQVN4d0IsR0FDaEMsSUFBSXpKLEVBQVNnNkIsR0FBZ0JDLEdBQzdCLE9BQU8sU0FBU08sRUFBS3htQyxHQUNuQixPQUFPeVYsRUFBRXpKLEVBQU93NkIsR0FBTXhtQyxFQUFHaW1DLElBbURNZ0MsQ0FBZ0J6QixFQUFLL3dCLEdBQUt1d0IsR0FBZ0JRLE1BR3pFLE9BREFGLEVBQUtMLFFBQVVBLEdBQVcsR0FDbkJLLEdBdUZQUSxVQUFXQSxFQUNYN2xCLE9BNUJGLFNBQWdCcWxCLEVBQU1MLEdBRXBCLE9BRGUsTUFBWEEsSUFBaUJBLEVBQVVJLEdBQWFDLElBQ3JDLENBQUNMLEVBQVExZixJQUFJOGdCLEdBQWF0eUIsS0FBSzR4QixJQUFZaG9DLE9BQU95b0MsRUFBY2QsRUFBTUwsSUFBVWx4QixLQUFLLE9BMkI1Rm16QixXQXhCRixTQUFvQjVCLEVBQU1MLEdBRXhCLE9BRGUsTUFBWEEsSUFBaUJBLEVBQVVJLEdBQWFDLElBQ3JDYyxFQUFjZCxFQUFNTCxHQUFTbHhCLEtBQUssT0F1QnpDb3pCLFdBcEJGLFNBQW9CN0IsR0FDbEIsT0FBT0EsRUFBSy9mLElBQUkrZ0IsR0FBV3Z5QixLQUFLLE9Bb0JoQ3V5QixVQUFXQSxFQUNYRCxZQUFhQSxHQy9KakIsSUFBSWUsR0FBTUMsR0FBSSxLQUVIQyxHQUFXRixHQUFJdk4sTUNGdEIwTixJREdzQkgsR0FBSXRCLFVBQ1BzQixHQUFJbm5CLE9BQ0FtbkIsR0FBSUYsV0FDSkUsR0FBSUQsV0FDTEMsR0FBSWQsVUFDRmMsR0FBSWYsWUNSdEJnQixHQUFJLE9BRUhHLEdBQVdELEdBQUkxTixNQ0oxQixTQUFTNE4sR0FBYUMsR0FDcEIsSUFBS0EsRUFBU0MsR0FBSSxNQUFNLElBQUk1aEIsTUFBTTJoQixFQUFTRSxPQUFTLElBQU1GLEVBQVNHLFlBQ25FLE9BQU9ILEVBQVMvUixPQUdILFlBQVN0USxFQUFPK1QsR0FDN0IsT0FBTzBPLE1BQU16aUIsRUFBTytULEdBQU0yTyxLQUFLTixJQ0hqQyxTQUFTTyxHQUFTbk8sR0FDaEIsT0FBTyxTQUFTeFUsRUFBTytULEVBQU1vTSxHQUUzQixPQUR5QixJQUFyQnYxQixVQUFVeFMsUUFBZ0MsbUJBQVQyN0IsSUFBcUJvTSxFQUFNcE0sRUFBTUEsT0FBT2xwQixHQUN0RSxHQUFLbVYsRUFBTytULEdBQU0yTyxNQUFLLFNBQVNMLEdBQ3JDLE9BQU83TixFQUFNNk4sRUFBVWxDLE9GRkgrQixHQUFJekIsVUFDUHlCLEdBQUl0bkIsT0FDQXNuQixHQUFJTCxXQUNKSyxHQUFJSixXQUNMSSxHQUFJakIsVUFDRmlCLEdBQUlsQixZRVV6QixJQUFJLEdBQU0yQixHQUFTVixJQ3BCMUIsU0FBU1csR0FBYVAsR0FDcEIsSUFBS0EsRUFBU0MsR0FBSSxNQUFNLElBQUk1aEIsTUFBTTJoQixFQUFTRSxPQUFTLElBQU1GLEVBQVNHLFlBQ25FLEdBQXdCLE1BQXBCSCxFQUFTRSxRQUFzQyxNQUFwQkYsRUFBU0UsT0FDeEMsT0FBT0YsRUFBU1EsT0FHSCxZQUFTN2lCLEVBQU8rVCxHQUM3QixPQUFPME8sTUFBTXppQixFQUFPK1QsR0FBTTJPLEtBQUtFLEksc2xERGNoQkQsR0FBU1IsSUVuQjFCLElBQU1XLEdBQWlCLENBQUMsS0FBTSxRQUFTLFUsU0FFeEJDLEcsdUZBQWYsV0FBdUJDLEdBQXZCLCtGQUNRQyxFQUFtQkMsR0FBWUYsR0FFakMvYyxFQUFPbVMsUUFBUStLLElBQUksQ0FBQ0YsSUFBbUJQLE1BQUssU0FBQVUsR0FBTyxJQUdqREMsRUFBcUJDLEdBSDRCLEdBQzdCRixFQUQ2QixPQUlyREMsRUFBbUJ2cEMsU0FBUSxTQUFBOEIsR0FDekIybkMsR0FBb0IzbkMsR0FBRyxNQUd6QixJQUFNNG5DLEVBQWF2bkMsTUFBTUMsS0FDdkIsSUFBSXVuQyxJQUFKLEdBQVlKLEVBQW1CbmpCLEtBQUksU0FBQXRrQixHQUFDLE9BQUlBLEVBQUVnZ0MsZ0JBR3RDOEgsRUFBYXpuQyxNQUFNQyxLQUN2QixJQUFJdW5DLElBQUosR0FBWUosRUFBbUJuakIsS0FBSSxTQUFBdGtCLEdBQUMsT0FBSUEsRUFBRXEvQixlQUd4Q29DLEVBQVUsQ0FDWnNHLEtBQU0sSUFBSXBkLEtBOEJaLE9BM0JBaWQsRUFBVzFwQyxTQUFRLFNBQUM4aEMsRUFBV2ppQyxHQUM3QixJQUFJaXFDLEVBQVUsR0FDZEYsRUFBVzVwQyxTQUFRLFNBQUErcEMsR0FDakIsSUFBTXJyQyxFQUFTNnFDLEVBQW1CemtDLFFBQ2hDLFNBQUFoRCxHQUFDLE9BQUlBLEVBQUVnZ0MsWUFBY0EsR0FBYWhnQyxFQUFFcS9CLFdBQWE0SSxLQUc5Q3JyQyxFQUFPSixRQUlad3JDLEVBQVE1ckMsS0FBS1EsRUFBTyxPQUV0QixJQUFJeW1DLEVBQVcsSUFBSXpoQixLQUFLb2UsR0FDeEJxRCxFQUFXLElBQUl6aEIsS0FDYnloQixFQUFTakIsaUJBQ1RpQixFQUFTaEIsY0FDVGdCLEVBQVNmLGFBQ1QsRUFDQSxFQUNBLEVBQ0EsR0FDQWdCLFVBQ0Y3QixFQUFRc0csS0FBS2pkLElBQUl1WSxFQUFVMkUsTUFHN0J2RyxFQUFRc0csS0FBTyxJQUFJcGQsSUFBSXRxQixNQUFNQyxLQUFLbWhDLEVBQVFzRyxNQUFNeHBDLE1BQUssU0FBQzFCLEVBQUdDLEdBQUosT0FBVUQsRUFBRSxHQUFLQyxFQUFFLE9BQ2pFMmtDLEtBbERYLGtCQXFEU3BYLEdBckRULDRDLHNCQXdEQSxTQUFTcWQsR0FBaUJJLEdBQ3hCLE9BQU9BLEVBQVc5a0MsUUFBTyxTQUFBaEQsR0FBQyxNQUFrQixTQUFkQSxFQUFFa29DLFdBR2xDLFNBQVNQLEdBQW9CM25DLEVBQUdtb0MsR0FvQjlCLE9BbkJBbm9DLEVBQUUyaUIsS0FBTyxJQUFJZixLQUFLNWhCLEVBQUVnZ0MsV0FBV3NELFVBQy9CdGpDLEVBQUVrb0MsUUFBdUIsUUFBYmxvQyxFQUFFa29DLFFBQ2Rsb0MsRUFBRUUsV0FBYUYsRUFBRUUsVUFDakJGLEVBQUV3L0IsU0FBV3gvQixFQUFFdy9CLFFBQ2Z4L0IsRUFBRXkvQixTQUFXei9CLEVBQUV5L0IsUUFDZnovQixFQUFFb29DLFFBQVVwb0MsRUFBRXFvQyxhQUNkcm9DLEVBQUVrZ0MsWUFBY2xnQyxFQUFFa2dDLFlBQVk1bEMsUUFBUSxJQUFLLFVBRXZDMEYsRUFBRW9vQyxRQUFRRSxTQUFTLFVBQ3JCdG9DLEVBQUVvb0MsUUFBVSxNQUdUbEIsR0FBZW9CLFNBQVN0b0MsRUFBRW9vQyxXQUM3QnBvQyxFQUFFb29DLFFBQVUsU0FHZHBvQyxFQUFFcy9CLFFBQVU2SSxFQUNabm9DLEVBQUV1b0MsUUFBVUosRUFFTG5vQyxFLFNBR013b0MsSyxvRkFBZiwwR0FDTWhMLEVBQVE4SixHQUFhLDBCQUEwQlIsTUFBSyxTQUFBemMsR0FBSSxPQUFJQSxLQURsRSxrQkFHU21ULEdBSFQsNEMsc1ZDakZBLElBU0luVCxHQUNBbVQsR0FDQWlHLEdBQ0F4QixHQUNBRCxHQVhFeUcsR0FBUyxDQUNiQyxLQUFNQyxJQUNOLEtBSmdCLElBS2hCLEtBQU1BLEtBR0pDLEdBQWFDLElBTWJ2SCxHQUFlLEtBQ2Y1RCxHQUFxQitLLEdBQU9uSCxJLG9EQUVoQyxXQUNFd0gsRUFDQUMsRUFDQUMsRUFDQXZMLEdBSkYsc0dBTWUwSixHQUFRMkIsR0FOdkIsY0FNRXplLEdBTkYsZ0JBUWdCbWUsS0FSaEIsT0FRRWhMLEdBUkYsT0FTRXlMLEdBQWV6TCxHQUFPQyxHQUVsQnlMLEVBQVE3b0MsTUFBTUMsS0FBSytwQixHQUFLMGQsS0FBSy9HLFFBQ2pDaUIsR0FBWWlILEVBQU0sR0FDbEJsSCxHQUFVa0gsRUFBTUEsRUFBTTFzQyxPQUFTLEdBQy9CaW5DLEdBQWN4QixHQUVka0gsR0FBcUJKLEVBQWVDLEdBR3BDSSxLQUNBeEcsS0FDQXlHLEtBckJGLDZDLHNCQXdCQSxTQUFTcEksS0FDUHdDLEdBQWM5QixvQkFDZCxJQUFJRixFQUFVcFgsR0FBSzBkLEtBQUtoZCxJQUFJMFksSUFFdkJoQyxHQUlMd0gsR0FBVyxDQUNUNWUsS0FBTW9YLEVBQ04vRCxzQkFDQWEsVUFBVyxXQUlmLFNBQVM2SyxLQUNQRSxRQUFtQixDQUNqQmhJLGdCQUNBQyxRQUFTLFNBQVNqa0MsR0FDaEJxa0Msa0JBQ0F0aEMsTUFBTUMsS0FBS2dwQyxTQUFvQnByQyxTQUFRLFNBQUFxL0IsR0FBRSxPQUN2Q0EsRUFBR2hRLFVBQVVTLE9BQU8sZ0JBRXRCN3dCLEtBQUtvd0IsVUFBVWhyQixJQUFJLGFBQ25CKytCLEdBQWVnSSxxQkFDZjVMLEdBQXFCK0ssR0FBT25ILElBQzVCSyxzQkFBOEJqRSxHQUM5QmlFLHNCQUtOLFNBQVNpQixLQUNQakIsc0JBQThCakUsR0FFOUJpRSxpQkFBdUIsQ0FDckJNLFVBQVdBLEdBQ1hELFFBQVNBLEdBQ1R0RSxtQkFBb0JBLEdBQ3BCbUYsU0FBVSxTQUFTL2dCLEVBQVFzaEIsR0FDekJuQyxLQUNBVSxxQkFBMkI4QixJQUN2QkEsSUFBZXpCLElBQ2pCTCxxQkFNUixTQUFTd0gsR0FBcUJ6ZCxFQUFNMGMsR0FDbEMvbkMsTUFBTUMsS0FBS25HLFNBQVNndEIsaUJBQWlCLG9CQUFvQmpwQixTQUFRLFNBQUFxL0IsR0FDL0RBLEVBQUdsUCxZQUFjM0MsS0FHbkJyckIsTUFBTUMsS0FBS25HLFNBQVNndEIsaUJBQWlCLHVCQUF1QmpwQixTQUFRLFNBQUFxL0IsR0FDbEVBLEVBQUdsUCxZQUFjK1osS0FhckIsU0FBU2lCLEtBQ1BsdkMsU0FBUzhzQixjQUFjLHNCQUFzQjBGLE1BQU00YyxRQUFVLE9BQzdEcHZDLFNBQ0dndEIsaUJBQWlCLGlCQUNqQmpwQixTQUFRLFNBQUFxL0IsR0FBRSxPQUFJQSxFQUFHaFEsVUFBVVMsT0FBTyxtQkFHdkM4QyxPQUFPSCxpQkFBaUIsVUFoQnhCLFdBQ0UsSUFBSTZZLEVBQWdCWCxJQUVoQkQsSUFBY1ksSUFDaEJaLEdBQWFZLEVBQ2J2SSxTQzdHSixJQUlNeEQsR0FBa0IsRUFBRSxJQUFLLElBTS9CM00sT0FBT0gsaUJBQWlCLG9CQUp4QixZLDJDQUNFOFksQ0FMb0Isd0JBRkosUUFDTyxVQU04QmhNLFEsU0NUdkRpTSxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLEdBQWlCLG1CQUFOQSxFQUNULE1BQU10UyxVQUFVbFAsT0FBT3doQixHQUFNLHNCQUM3QixPQUFPQSxJLGVDSFgsSUFBSUMsRUFBVyxFQUFRLEtBRXZCSCxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLElBQUtDLEVBQVNELElBQWMsT0FBUEEsRUFDbkIsTUFBTXRTLFVBQVUsYUFBZWxQLE9BQU93aEIsR0FBTSxtQkFDNUMsT0FBT0EsSSxlQ0xYLElBQUlFLEVBQWtCLEVBQVEsTUFDMUJ2MUIsRUFBUyxFQUFRLElBQ2pCdzFCLEVBQXVCLEVBQVEsTUFFL0JDLEVBQWNGLEVBQWdCLGVBQzlCRyxFQUFpQjVwQyxNQUFNc0osVUFJUXNGLE1BQS9CZzdCLEVBQWVELElBQ2pCRCxFQUFxQnYyQixFQUFFeTJCLEVBQWdCRCxFQUFhLENBQ2xERSxjQUFjLEVBQ2RucUIsTUFBT3hMLEVBQU8sUUFLbEJtMUIsRUFBT0MsUUFBVSxTQUFVdGdDLEdBQ3pCNGdDLEVBQWVELEdBQWEzZ0MsSUFBTyxJLDRCQ2pCckMsSUFBSThnQyxFQUFTLGVBSWJULEVBQU9DLFFBQVUsU0FBVVMsRUFBRzluQixFQUFPK25CLEdBQ25DLE9BQU8vbkIsR0FBUytuQixFQUFVRixFQUFPQyxFQUFHOW5CLEdBQU85bEIsT0FBUyxLLFNDTnREa3RDLEVBQU9DLFFBQVUsU0FBVUMsRUFBSVUsRUFBYTVlLEdBQzFDLEtBQU1rZSxhQUFjVSxHQUNsQixNQUFNaFQsVUFBVSxjQUFnQjVMLEVBQU9BLEVBQU8sSUFBTSxJQUFNLGNBQzFELE9BQU9rZSxJLGVDSFgsSUFBSUMsRUFBVyxFQUFRLEtBRXZCSCxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLElBQUtDLEVBQVNELEdBQ1osTUFBTXRTLFVBQVVsUCxPQUFPd2hCLEdBQU0scUJBQzdCLE9BQU9BLEksNEJDSlgsSUFBSVcsRUFBVyxnQkFHWEMsRUFGc0IsRUFBUSxLQUVkQyxDQUFvQixXQUl4Q2YsRUFBT0MsUUFBV2EsRUFFZCxHQUFHdHNDLFFBRjJCLFNBQWlCd3NDLEdBQ2pELE9BQU9ILEVBQVNwdEMsS0FBTXV0QyxFQUFZMTdCLFVBQVV4UyxPQUFTLEVBQUl3UyxVQUFVLFFBQUtDLEssNEJDUjFFLElBQUkyakIsRUFBTyxFQUFRLE1BQ2YrWCxFQUFXLEVBQVEsTUFDbkJDLEVBQStCLEVBQVEsTUFDdkNDLEVBQXdCLEVBQVEsTUFDaENDLEVBQVcsRUFBUSxNQUNuQkMsRUFBaUIsRUFBUSxNQUN6QkMsRUFBb0IsRUFBUSxNQUloQ3RCLEVBQU9DLFFBQVUsU0FBY3NCLEdBQzdCLElBT0l6dUMsRUFBUUksRUFBUWtKLEVBQU1vdkIsRUFBVTlKLEVBQU1yTCxFQVB0Q21yQixFQUFJUCxFQUFTTSxHQUNiRSxFQUFtQixtQkFBUmh1QyxLQUFxQkEsS0FBT2tELE1BQ3ZDK3FDLEVBQWtCcDhCLFVBQVV4UyxPQUM1QjZ1QyxFQUFRRCxFQUFrQixFQUFJcDhCLFVBQVUsUUFBS0MsRUFDN0NxOEIsT0FBb0JyOEIsSUFBVm84QixFQUNWRSxFQUFpQlAsRUFBa0JFLEdBQ25DNW9CLEVBQVEsRUFJWixHQUZJZ3BCLElBQVNELEVBQVF6WSxFQUFLeVksRUFBT0QsRUFBa0IsRUFBSXA4QixVQUFVLFFBQUtDLEVBQVcsSUFFM0RBLE1BQWxCczhCLEdBQWlDSixHQUFLOXFDLE9BQVN3cUMsRUFBc0JVLEdBV3ZFLElBREEzdUMsRUFBUyxJQUFJdXVDLEVBRGIzdUMsRUFBU3N1QyxFQUFTSSxFQUFFMXVDLFNBRWRBLEVBQVM4bEIsRUFBT0EsSUFDcEJ2QyxFQUFRdXJCLEVBQVVELEVBQU1ILEVBQUU1b0IsR0FBUUEsR0FBUzRvQixFQUFFNW9CLEdBQzdDeW9CLEVBQWVudUMsRUFBUTBsQixFQUFPdkMsUUFUaEMsSUFGQXFMLEdBREE4SixFQUFXcVcsRUFBZTVqQixLQUFLdWpCLElBQ2Y5ZixLQUNoQnh1QixFQUFTLElBQUl1dUMsSUFDTHJsQyxFQUFPc2xCLEVBQUt6RCxLQUFLdU4sSUFBV3NXLEtBQU1scEIsSUFDeEN2QyxFQUFRdXJCLEVBQVVWLEVBQTZCMVYsRUFBVW1XLEVBQU8sQ0FBQ3ZsQyxFQUFLaWEsTUFBT3VDLElBQVEsR0FBUXhjLEVBQUtpYSxNQUNsR2dyQixFQUFlbnVDLEVBQVEwbEIsRUFBT3ZDLEdBV2xDLE9BREFuakIsRUFBT0osT0FBUzhsQixFQUNUMWxCLEksZUN2Q1QsSUFBSTZ1QyxFQUFrQixFQUFRLE1BQzFCWCxFQUFXLEVBQVEsTUFDbkJZLEVBQWtCLEVBQVEsTUFHMUJDLEVBQWUsU0FBVUMsR0FDM0IsT0FBTyxTQUFVQyxFQUFPdE8sRUFBSXVPLEdBQzFCLElBR0kvckIsRUFIQW1yQixFQUFJTyxFQUFnQkksR0FDcEJydkMsRUFBU3N1QyxFQUFTSSxFQUFFMXVDLFFBQ3BCOGxCLEVBQVFvcEIsRUFBZ0JJLEVBQVd0dkMsR0FJdkMsR0FBSW92QyxHQUFlck8sR0FBTUEsR0FBSSxLQUFPL2dDLEVBQVM4bEIsR0FHM0MsSUFGQXZDLEVBQVFtckIsRUFBRTVvQixPQUVHdkMsRUFBTyxPQUFPLE9BRXRCLEtBQU12akIsRUFBUzhsQixFQUFPQSxJQUMzQixJQUFLc3BCLEdBQWV0cEIsS0FBUzRvQixJQUFNQSxFQUFFNW9CLEtBQVdpYixFQUFJLE9BQU9xTyxHQUFldHBCLEdBQVMsRUFDbkYsT0FBUXNwQixJQUFnQixJQUk5QmxDLEVBQU9DLFFBQVUsQ0FHZnJCLFNBQVVxRCxHQUFhLEdBR3ZCcm1CLFFBQVNxbUIsR0FBYSxLLGVDOUJ4QixJQUFJL1ksRUFBTyxFQUFRLE1BQ2ZtWixFQUFnQixFQUFRLE1BQ3hCcEIsRUFBVyxFQUFRLE1BQ25CRyxFQUFXLEVBQVEsTUFDbkJrQixFQUFxQixFQUFRLE1BRTdCNXZDLEVBQU8sR0FBR0EsS0FHVnV2QyxFQUFlLFNBQVVNLEdBQzNCLElBQUlDLEVBQWlCLEdBQVJELEVBQ1RFLEVBQW9CLEdBQVJGLEVBQ1pHLEVBQWtCLEdBQVJILEVBQ1ZJLEVBQW1CLEdBQVJKLEVBQ1hLLEVBQXdCLEdBQVJMLEVBQ2hCTSxFQUF3QixHQUFSTixFQUNoQk8sRUFBbUIsR0FBUlAsR0FBYUssRUFDNUIsT0FBTyxTQUFVVCxFQUFPbkIsRUFBWXBWLEVBQU1tWCxHQVN4QyxJQVJBLElBT0kxc0IsRUFBT25qQixFQVBQc3VDLEVBQUlQLEVBQVNrQixHQUNiaFUsRUFBT2tVLEVBQWNiLEdBQ3JCd0IsRUFBZ0I5WixFQUFLOFgsRUFBWXBWLEVBQU0sR0FDdkM5NEIsRUFBU3N1QyxFQUFTalQsRUFBS3I3QixRQUN2QjhsQixFQUFRLEVBQ1IvTixFQUFTazRCLEdBQWtCVCxFQUMzQm5vQixFQUFTcW9CLEVBQVMzM0IsRUFBT3MzQixFQUFPcnZDLEdBQVUydkMsR0FBYUksRUFBZ0JoNEIsRUFBT3MzQixFQUFPLFFBQUs1OEIsRUFFeEZ6UyxFQUFTOGxCLEVBQU9BLElBQVMsSUFBSWtxQixHQUFZbHFCLEtBQVN1VixLQUV0RGo3QixFQUFTOHZDLEVBRFQzc0IsRUFBUThYLEVBQUt2VixHQUNpQkEsRUFBTzRvQixHQUNqQ2UsR0FDRixHQUFJQyxFQUFRcm9CLEVBQU92QixHQUFTMWxCLE9BQ3ZCLEdBQUlBLEVBQVEsT0FBUXF2QyxHQUN2QixLQUFLLEVBQUcsT0FBTyxFQUNmLEtBQUssRUFBRyxPQUFPbHNCLEVBQ2YsS0FBSyxFQUFHLE9BQU91QyxFQUNmLEtBQUssRUFBR2xtQixFQUFLdXJCLEtBQUs5RCxFQUFROUQsUUFDckIsT0FBUWtzQixHQUNiLEtBQUssRUFBRyxPQUFPLEVBQ2YsS0FBSyxFQUFHN3ZDLEVBQUt1ckIsS0FBSzlELEVBQVE5RCxHQUloQyxPQUFPdXNCLEdBQWlCLEVBQUlGLEdBQVdDLEVBQVdBLEVBQVd4b0IsSUFJakU2bEIsRUFBT0MsUUFBVSxDQUdmenJDLFFBQVN5dEMsRUFBYSxHQUd0QnJuQixJQUFLcW5CLEVBQWEsR0FHbEIzb0MsT0FBUTJvQyxFQUFhLEdBR3JCZ0IsS0FBTWhCLEVBQWEsR0FHbkJuUSxNQUFPbVEsRUFBYSxHQUdwQnJpQixLQUFNcWlCLEVBQWEsR0FHbkJpQixVQUFXakIsRUFBYSxHQUd4QmtCLFVBQVdsQixFQUFhLEssZUN0RTFCLElBQUltQixFQUFRLEVBQVEsTUFDaEJoRCxFQUFrQixFQUFRLE1BQzFCaUQsRUFBYSxFQUFRLE1BRXJCQyxFQUFVbEQsRUFBZ0IsV0FFOUJKLEVBQU9DLFFBQVUsU0FBVXNELEdBSXpCLE9BQU9GLEdBQWMsS0FBT0QsR0FBTSxXQUNoQyxJQUFJbnVDLEVBQVEsR0FLWixPQUprQkEsRUFBTWlMLFlBQWMsSUFDMUJvakMsR0FBVyxXQUNyQixNQUFPLENBQUVFLElBQUssSUFFMkIsSUFBcEN2dUMsRUFBTXN1QyxHQUFhRSxTQUFTRCxTLDRCQ2Z2QyxJQUFJSixFQUFRLEVBQVEsTUFFcEJwRCxFQUFPQyxRQUFVLFNBQVVzRCxFQUFhRyxHQUN0QyxJQUFJQyxFQUFTLEdBQUdKLEdBQ2hCLFFBQVNJLEdBQVVQLEdBQU0sV0FFdkJPLEVBQU8xbEIsS0FBSyxLQUFNeWxCLEdBQVksV0FBYyxNQUFNLEdBQU0sUSxlQ1A1RCxJQUFJdkQsRUFBVyxFQUFRLEtBQ25COW1CLEVBQVUsRUFBUSxNQUdsQmlxQixFQUZrQixFQUFRLEtBRWhCbEQsQ0FBZ0IsV0FJOUJKLEVBQU9DLFFBQVUsU0FBVTJELEVBQWU5d0MsR0FDeEMsSUFBSTJ1QyxFQVNGLE9BUkVwb0IsRUFBUXVxQixLQUdNLG1CQUZoQm5DLEVBQUltQyxFQUFjMWpDLGNBRWF1aEMsSUFBTTlxQyxRQUFTMGlCLEVBQVFvb0IsRUFBRXhoQyxXQUMvQ2tnQyxFQUFTc0IsSUFFTixRQURWQSxFQUFJQSxFQUFFNkIsTUFDVTdCLE9BQUlsOEIsR0FIK0NrOEIsT0FBSWw4QixHQUtsRSxTQUFXQSxJQUFOazhCLEVBQWtCOXFDLE1BQVE4cUMsR0FBYyxJQUFYM3VDLEVBQWUsRUFBSUEsSyxlQ2xCaEUsSUFBSSt3QyxFQUFXLEVBQVEsTUFDbkJDLEVBQWdCLEVBQVEsTUFHNUI5RCxFQUFPQyxRQUFVLFNBQVV6VSxFQUFVdVksRUFBSTF0QixFQUFPMnRCLEdBQzlDLElBQ0UsT0FBT0EsRUFBVUQsRUFBR0YsRUFBU3h0QixHQUFPLEdBQUlBLEVBQU0sSUFBTTB0QixFQUFHMXRCLEdBRXZELE1BQU94TSxHQUVQLE1BREFpNkIsRUFBY3RZLEdBQ1IzaEIsSyxlQ1ZWLElBRUlvNkIsRUFGa0IsRUFBUSxLQUVmN0QsQ0FBZ0IsWUFDM0I4RCxHQUFlLEVBRW5CLElBQ0UsSUFBSUMsRUFBUyxFQUNUQyxFQUFxQixDQUN2QjFpQixLQUFNLFdBQ0osTUFBTyxDQUFFb2dCLE9BQVFxQyxNQUVuQixPQUFVLFdBQ1JELEdBQWUsSUFHbkJFLEVBQW1CSCxHQUFZLFdBQzdCLE9BQU94d0MsTUFHVGtELE1BQU1DLEtBQUt3dEMsR0FBb0IsV0FBYyxNQUFNLEtBQ25ELE1BQU92NkIsSUFFVG0yQixFQUFPQyxRQUFVLFNBQVV6cUIsRUFBTTZ1QixHQUMvQixJQUFLQSxJQUFpQkgsRUFBYyxPQUFPLEVBQzNDLElBQUlJLEdBQW9CLEVBQ3hCLElBQ0UsSUFBSWprQyxFQUFTLEdBQ2JBLEVBQU80akMsR0FBWSxXQUNqQixNQUFPLENBQ0x2aUIsS0FBTSxXQUNKLE1BQU8sQ0FBRW9nQixLQUFNd0MsR0FBb0IsTUFJekM5dUIsRUFBS25WLEdBQ0wsTUFBT3dKLElBQ1QsT0FBT3k2QixJLFNDcENULElBQUlodUIsRUFBVyxHQUFHQSxTQUVsQjBwQixFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLE9BQU81cEIsRUFBUzJILEtBQUtpaUIsR0FBSXJuQixNQUFNLEdBQUksSyxjQ0hyQyxJQUFJMHJCLEVBQXdCLEVBQVEsTUFDaENDLEVBQWEsRUFBUSxNQUdyQkMsRUFGa0IsRUFBUSxLQUVWckUsQ0FBZ0IsZUFFaENzRSxFQUF1RSxhQUFuREYsRUFBVyxXQUFjLE9BQU9sL0IsVUFBckIsSUFVbkMwNkIsRUFBT0MsUUFBVXNFLEVBQXdCQyxFQUFhLFNBQVV0RSxHQUM5RCxJQUFJc0IsRUFBR21ELEVBQUt6eEMsRUFDWixZQUFjcVMsSUFBUDI2QixFQUFtQixZQUFxQixPQUFQQSxFQUFjLE9BRU0saUJBQWhEeUUsRUFYRCxTQUFVekUsRUFBSXZnQyxHQUN6QixJQUNFLE9BQU91Z0MsRUFBR3ZnQyxHQUNWLE1BQU9rSyxLQVFTKzZCLENBQU9wRCxFQUFJNTJCLE9BQU9zMUIsR0FBS3VFLElBQThCRSxFQUVuRUQsRUFBb0JGLEVBQVdoRCxHQUVILFdBQTNCdHVDLEVBQVNzeEMsRUFBV2hELEtBQXNDLG1CQUFaQSxFQUFFcUQsT0FBdUIsWUFBYzN4QyxJLDRCQ3ZCNUYsSUFBSTR4QyxFQUFpQixVQUNqQmo2QixFQUFTLEVBQVEsSUFDakJrNkIsRUFBYyxFQUFRLE1BQ3RCN2IsRUFBTyxFQUFRLE1BQ2Y4YixFQUFhLEVBQVEsTUFDckJDLEVBQVUsRUFBUSxLQUNsQkMsRUFBaUIsRUFBUSxLQUN6QkMsRUFBYSxFQUFRLE1BQ3JCQyxFQUFjLEVBQVEsTUFDdEJDLEVBQVUsZ0JBQ1ZDLEVBQXNCLEVBQVEsTUFFOUJDLEVBQW1CRCxFQUFvQmxrQixJQUN2Q29rQixFQUF5QkYsRUFBb0JHLFVBRWpEekYsRUFBT0MsUUFBVSxDQUNmeUYsZUFBZ0IsU0FBVUMsRUFBU0MsRUFBa0JwRCxFQUFRcUQsR0FDM0QsSUFBSXBFLEVBQUlrRSxHQUFRLFNBQVUvWixFQUFNa2EsR0FDOUJkLEVBQVdwWixFQUFNNlYsRUFBR21FLEdBQ3BCTCxFQUFpQjNaLEVBQU0sQ0FDckI1ckIsS0FBTTRsQyxFQUNOaHRCLE1BQU8vTixFQUFPLE1BQ2RyTixXQUFPK0gsRUFDUHdnQyxVQUFNeGdDLEVBQ05NLEtBQU0sSUFFSHUvQixJQUFheFosRUFBSy9sQixLQUFPLEdBQ2ROLE1BQVp1Z0MsR0FBdUJiLEVBQVFhLEVBQVVsYSxFQUFLaWEsR0FBUSxDQUFFamEsS0FBTUEsRUFBTW9hLFdBQVl4RCxPQUdsRnlELEVBQW1CVCxFQUF1QkksR0FFMUNNLEVBQVMsU0FBVXRhLEVBQU1qc0IsRUFBSzBXLEdBQ2hDLElBRUlpVCxFQUFVMVEsRUFGVnlWLEVBQVE0WCxFQUFpQnJhLEdBQ3pCcDRCLEVBQVEyeUMsRUFBU3ZhLEVBQU1qc0IsR0FxQnpCLE9BbEJFbk0sRUFDRkEsRUFBTTZpQixNQUFRQSxHQUdkZ1ksRUFBTTBYLEtBQU92eUMsRUFBUSxDQUNuQm9sQixNQUFPQSxFQUFReXNCLEVBQVExbEMsR0FBSyxHQUM1QkEsSUFBS0EsRUFDTDBXLE1BQU9BLEVBQ1BpVCxTQUFVQSxFQUFXK0UsRUFBTTBYLEtBQzNCcmtCLFVBQU1uYyxFQUNONmdDLFNBQVMsR0FFTi9YLEVBQU03d0IsUUFBTzZ3QixFQUFNN3dCLE1BQVFoSyxHQUM1QjgxQixJQUFVQSxFQUFTNUgsS0FBT2x1QixHQUMxQjR4QyxFQUFhL1csRUFBTXhvQixPQUNsQitsQixFQUFLL2xCLE9BRUksTUFBVitTLElBQWV5VixFQUFNelYsTUFBTUEsR0FBU3BsQixJQUNqQ280QixHQUdQdWEsRUFBVyxTQUFVdmEsRUFBTWpzQixHQUM3QixJQUdJbk0sRUFIQTY2QixFQUFRNFgsRUFBaUJyYSxHQUV6QmhULEVBQVF5c0IsRUFBUTFsQyxHQUVwQixHQUFjLE1BQVZpWixFQUFlLE9BQU95VixFQUFNelYsTUFBTUEsR0FFdEMsSUFBS3BsQixFQUFRNjZCLEVBQU03d0IsTUFBT2hLLEVBQU9BLEVBQVFBLEVBQU1rdUIsS0FDN0MsR0FBSWx1QixFQUFNbU0sS0FBT0EsRUFBSyxPQUFPbk0sR0FpRmpDLE9BN0VBdXhDLEVBQVl0RCxFQUFFeGhDLFVBQVcsQ0FHdkJvbUMsTUFBTyxXQUtMLElBSkEsSUFDSWhZLEVBQVE0WCxFQUREeHlDLE1BRVBrdEIsRUFBTzBOLEVBQU16VixNQUNicGxCLEVBQVE2NkIsRUFBTTd3QixNQUNYaEssR0FDTEEsRUFBTTR5QyxTQUFVLEVBQ1o1eUMsRUFBTTgxQixXQUFVOTFCLEVBQU04MUIsU0FBVzkxQixFQUFNODFCLFNBQVM1SCxVQUFPbmMsVUFDcERvYixFQUFLbnRCLEVBQU1vbEIsT0FDbEJwbEIsRUFBUUEsRUFBTWt1QixLQUVoQjJNLEVBQU03d0IsTUFBUTZ3QixFQUFNMFgsVUFBT3hnQyxFQUN2QjYvQixFQUFhL1csRUFBTXhvQixLQUFPLEVBWG5CcFMsS0FZRG9TLEtBQU8sR0FJbkIsT0FBVSxTQUFVbEcsR0FDbEIsSUFBSWlzQixFQUFPbjRCLEtBQ1A0NkIsRUFBUTRYLEVBQWlCcmEsR0FDekJwNEIsRUFBUTJ5QyxFQUFTdmEsRUFBTWpzQixHQUMzQixHQUFJbk0sRUFBTyxDQUNULElBQUlrdUIsRUFBT2x1QixFQUFNa3VCLEtBQ2I0a0IsRUFBTzl5QyxFQUFNODFCLGdCQUNWK0UsRUFBTXpWLE1BQU1wbEIsRUFBTW9sQixPQUN6QnBsQixFQUFNNHlDLFNBQVUsRUFDWkUsSUFBTUEsRUFBSzVrQixLQUFPQSxHQUNsQkEsSUFBTUEsRUFBSzRILFNBQVdnZCxHQUN0QmpZLEVBQU03d0IsT0FBU2hLLElBQU82NkIsRUFBTTd3QixNQUFRa2tCLEdBQ3BDMk0sRUFBTTBYLE1BQVF2eUMsSUFBTzY2QixFQUFNMFgsS0FBT08sR0FDbENsQixFQUFhL1csRUFBTXhvQixPQUNsQitsQixFQUFLL2xCLE9BQ1YsUUFBU3JTLEdBSWJnQixRQUFTLFNBQWlCd3NDLEdBSXhCLElBSEEsSUFFSXh0QyxFQUZBNjZCLEVBQVE0WCxFQUFpQnh5QyxNQUN6QnV2QyxFQUFnQjlaLEVBQUs4WCxFQUFZMTdCLFVBQVV4UyxPQUFTLEVBQUl3UyxVQUFVLFFBQUtDLEVBQVcsR0FFL0UvUixFQUFRQSxFQUFRQSxFQUFNa3VCLEtBQU8yTSxFQUFNN3dCLE9BR3hDLElBRkF3bEMsRUFBY3h2QyxFQUFNNmlCLE1BQU83aUIsRUFBTW1NLElBQUtsTSxNQUUvQkQsR0FBU0EsRUFBTTR5QyxTQUFTNXlDLEVBQVFBLEVBQU04MUIsVUFLakRuSSxJQUFLLFNBQWF4aEIsR0FDaEIsUUFBU3dtQyxFQUFTMXlDLEtBQU1rTSxNQUk1Qm9sQyxFQUFZdEQsRUFBRXhoQyxVQUFXdWlDLEVBQVMsQ0FFaENuaEIsSUFBSyxTQUFhMWhCLEdBQ2hCLElBQUluTSxFQUFRMnlDLEVBQVMxeUMsS0FBTWtNLEdBQzNCLE9BQU9uTSxHQUFTQSxFQUFNNmlCLE9BR3hCK0ssSUFBSyxTQUFhemhCLEVBQUswVyxHQUNyQixPQUFPNnZCLEVBQU96eUMsS0FBYyxJQUFSa00sRUFBWSxFQUFJQSxFQUFLMFcsS0FFekMsQ0FFRnhkLElBQUssU0FBYXdkLEdBQ2hCLE9BQU82dkIsRUFBT3p5QyxLQUFNNGlCLEVBQWtCLElBQVZBLEVBQWMsRUFBSUEsRUFBT0EsTUFHckQrdUIsR0FBYU4sRUFBZXJELEVBQUV4aEMsVUFBVyxPQUFRLENBQ25Eb2hCLElBQUssV0FDSCxPQUFPNGtCLEVBQWlCeHlDLE1BQU1vUyxRQUczQjQ3QixHQUVUOEUsVUFBVyxTQUFVOUUsRUFBR21FLEVBQWtCcEQsR0FDeEMsSUFBSWdFLEVBQWdCWixFQUFtQixZQUNuQ2EsRUFBNkJqQixFQUF1QkksR0FDcERjLEVBQTJCbEIsRUFBdUJnQixHQUd0RHRCLEVBQWV6RCxFQUFHbUUsR0FBa0IsU0FBVWUsRUFBVUMsR0FDdERyQixFQUFpQjl4QyxLQUFNLENBQ3JCdU0sS0FBTXdtQyxFQUNOcnNCLE9BQVF3c0IsRUFDUnRZLE1BQU9vWSxFQUEyQkUsR0FDbENDLEtBQU1BLEVBQ05iLFVBQU14Z0MsT0FFUCxXQUtELElBSkEsSUFBSThvQixFQUFRcVksRUFBeUJqekMsTUFDakNtekMsRUFBT3ZZLEVBQU11WSxLQUNicHpDLEVBQVE2NkIsRUFBTTBYLEtBRVh2eUMsR0FBU0EsRUFBTTR5QyxTQUFTNXlDLEVBQVFBLEVBQU04MUIsU0FFN0MsT0FBSytFLEVBQU1sVSxTQUFZa1UsRUFBTTBYLEtBQU92eUMsRUFBUUEsRUFBUUEsRUFBTWt1QixLQUFPMk0sRUFBTUEsTUFBTTd3QixPQU1qRSxRQUFSb3BDLEVBQXVCLENBQUV2d0IsTUFBTzdpQixFQUFNbU0sSUFBS21pQyxNQUFNLEdBQ3pDLFVBQVI4RSxFQUF5QixDQUFFdndCLE1BQU83aUIsRUFBTTZpQixNQUFPeXJCLE1BQU0sR0FDbEQsQ0FBRXpyQixNQUFPLENBQUM3aUIsRUFBTW1NLElBQUtuTSxFQUFNNmlCLE9BQVF5ckIsTUFBTSxJQU45Q3pULEVBQU1sVSxZQUFTNVUsRUFDUixDQUFFOFEsV0FBTzlRLEVBQVd1OEIsTUFBTSxNQU1sQ1UsRUFBUyxVQUFZLFVBQVdBLEdBQVEsR0FHM0MyQyxFQUFXUyxNLDRCQ3RMZixJQUFJaUIsRUFBSSxFQUFRLE1BQ1pDLEVBQVMsRUFBUSxNQUNqQkMsRUFBVyxFQUFRLE1BQ25CQyxFQUFXLEVBQVEsTUFDbkJDLEVBQXlCLEVBQVEsTUFDakNoQyxFQUFVLEVBQVEsS0FDbEJELEVBQWEsRUFBUSxNQUNyQjdFLEVBQVcsRUFBUSxLQUNuQmlELEVBQVEsRUFBUSxNQUNoQjhELEVBQThCLEVBQVEsTUFDdENDLEVBQWlCLEVBQVEsTUFDekJDLEVBQW9CLEVBQVEsTUFFaENwSCxFQUFPQyxRQUFVLFNBQVUyRixFQUFrQkQsRUFBUzBCLEdBQ3BELElBQUk3RSxHQUE4QyxJQUFyQ29ELEVBQWlCaHFCLFFBQVEsT0FDbEMwckIsR0FBZ0QsSUFBdEMxQixFQUFpQmhxQixRQUFRLFFBQ25DaXFCLEVBQVFyRCxFQUFTLE1BQVEsTUFDekIrRSxFQUFvQlQsRUFBT2xCLEdBQzNCNEIsRUFBa0JELEdBQXFCQSxFQUFrQnRuQyxVQUN6RDJnQyxFQUFjMkcsRUFDZEUsRUFBVyxHQUVYQyxFQUFZLFNBQVVDLEdBQ3hCLElBQUlDLEVBQWVKLEVBQWdCRyxHQUNuQ1gsRUFBU1EsRUFBaUJHLEVBQ2pCLE9BQVBBLEVBQWUsU0FBYXR4QixHQUUxQixPQURBdXhCLEVBQWEzcEIsS0FBS3hxQixLQUFnQixJQUFWNGlCLEVBQWMsRUFBSUEsR0FDbkM1aUIsTUFDRSxVQUFQazBDLEVBQWtCLFNBQVVob0MsR0FDOUIsUUFBTzJuQyxJQUFZbkgsRUFBU3hnQyxLQUFlaW9DLEVBQWEzcEIsS0FBS3hxQixLQUFjLElBQVJrTSxFQUFZLEVBQUlBLElBQzFFLE9BQVBnb0MsRUFBZSxTQUFhaG9DLEdBQzlCLE9BQU8ybkMsSUFBWW5ILEVBQVN4Z0MsUUFBTzRGLEVBQVlxaUMsRUFBYTNwQixLQUFLeHFCLEtBQWMsSUFBUmtNLEVBQVksRUFBSUEsSUFDOUUsT0FBUGdvQyxFQUFlLFNBQWFob0MsR0FDOUIsUUFBTzJuQyxJQUFZbkgsRUFBU3hnQyxLQUFlaW9DLEVBQWEzcEIsS0FBS3hxQixLQUFjLElBQVJrTSxFQUFZLEVBQUlBLElBQ2pGLFNBQWFBLEVBQUswVyxHQUVwQixPQURBdXhCLEVBQWEzcEIsS0FBS3hxQixLQUFjLElBQVJrTSxFQUFZLEVBQUlBLEVBQUswVyxHQUN0QzVpQixRQVliLEdBUGNzekMsRUFDWm5CLEVBQzRCLG1CQUFyQjJCLEtBQXFDRCxHQUFXRSxFQUFnQmh6QyxVQUFZNHVDLEdBQU0sWUFDdkYsSUFBSW1FLEdBQW9CakosVUFBVTVjLFlBTXBDa2YsRUFBY3lHLEVBQU8zQixlQUFlQyxFQUFTQyxFQUFrQnBELEVBQVFxRCxHQUN2RW9CLEVBQXVCWSxVQUFXLE9BQzdCLEdBQUlkLEVBQVNuQixHQUFrQixHQUFPLENBQzNDLElBQUlrQyxFQUFXLElBQUlsSCxFQUVmbUgsRUFBaUJELEVBQVNqQyxHQUFPeUIsRUFBVSxJQUFNLEVBQUcsSUFBTVEsRUFFMURFLEVBQXVCNUUsR0FBTSxXQUFjMEUsRUFBUzNtQixJQUFJLE1BR3hEOG1CLEVBQW1CZixHQUE0QixTQUFVcEIsR0FBWSxJQUFJeUIsRUFBa0J6QixNQUUzRm9DLEdBQWNaLEdBQVdsRSxHQUFNLFdBSWpDLElBRkEsSUFBSStFLEVBQVksSUFBSVosRUFDaEIzdUIsRUFBUSxFQUNMQSxLQUFTdXZCLEVBQVV0QyxHQUFPanRCLEVBQU9BLEdBQ3hDLE9BQVF1dkIsRUFBVWhuQixLQUFLLE1BR3BCOG1CLEtBQ0hySCxFQUFjK0UsR0FBUSxTQUFVeUMsRUFBT3RDLEdBQ3JDZCxFQUFXb0QsRUFBT3hILEVBQWFnRixHQUMvQixJQUFJaGEsRUFBT3diLEVBQWtCLElBQUlHLEVBQXFCYSxFQUFPeEgsR0FFN0QsT0FEZ0JyN0IsTUFBWnVnQyxHQUF1QmIsRUFBUWEsRUFBVWxhLEVBQUtpYSxHQUFRLENBQUVqYSxLQUFNQSxFQUFNb2EsV0FBWXhELElBQzdFNVcsTUFFRzNyQixVQUFZdW5DLEVBQ3hCQSxFQUFnQnRuQyxZQUFjMGdDLElBRzVCb0gsR0FBd0JFLEtBQzFCUixFQUFVLFVBQ1ZBLEVBQVUsT0FDVmxGLEdBQVVrRixFQUFVLFNBR2xCUSxHQUFjSCxJQUFnQkwsRUFBVTdCLEdBR3hDeUIsR0FBV0UsRUFBZ0JuQixjQUFjbUIsRUFBZ0JuQixNQVUvRCxPQVBBb0IsRUFBUzdCLEdBQW9CaEYsRUFDN0JpRyxFQUFFLENBQUVDLFFBQVEsRUFBTXVCLE9BQVF6SCxHQUFlMkcsR0FBcUJFLEdBRTlETixFQUFldkcsRUFBYWdGLEdBRXZCMEIsR0FBU0QsRUFBT2QsVUFBVTNGLEVBQWFnRixFQUFrQnBELEdBRXZENUIsSSxlQ3JHVCxJQUFJemYsRUFBTSxFQUFRLE1BQ2RtbkIsRUFBVSxFQUFRLE1BQ2xCQyxFQUFpQyxFQUFRLE1BQ3pDbEksRUFBdUIsRUFBUSxNQUVuQ0wsRUFBT0MsUUFBVSxTQUFVOWxCLEVBQVE1QixHQUlqQyxJQUhBLElBQUkrZSxFQUFPZ1IsRUFBUS92QixHQUNmdXNCLEVBQWlCekUsRUFBcUJ2MkIsRUFDdEMwK0IsRUFBMkJELEVBQStCeitCLEVBQ3JEelYsRUFBSSxFQUFHQSxFQUFJaWpDLEVBQUt4a0MsT0FBUXVCLElBQUssQ0FDcEMsSUFBSXNMLEVBQU0yM0IsRUFBS2pqQyxHQUNWOHNCLEVBQUloSCxFQUFReGEsSUFBTW1sQyxFQUFlM3FCLEVBQVF4YSxFQUFLNm9DLEVBQXlCandCLEVBQVE1WSxPLGVDWHhGLElBRUk4b0MsRUFGa0IsRUFBUSxLQUVsQnJJLENBQWdCLFNBRTVCSixFQUFPQyxRQUFVLFNBQVVzRCxHQUN6QixJQUFJbUYsRUFBUyxJQUNiLElBQ0UsTUFBTW5GLEdBQWFtRixHQUNuQixNQUFPQyxHQUNQLElBRUUsT0FEQUQsRUFBT0QsSUFBUyxFQUNULE1BQU1sRixHQUFhbUYsR0FDMUIsTUFBT0UsS0FDVCxPQUFPLEksZUNiWCxJQUFJeEYsRUFBUSxFQUFRLE1BRXBCcEQsRUFBT0MsU0FBV21ELEdBQU0sV0FDdEIsU0FBU3lGLEtBRVQsT0FEQUEsRUFBRTVvQyxVQUFVQyxZQUFjLEtBQ25CMEssT0FBT2srQixlQUFlLElBQUlELEtBQVNBLEVBQUU1b0MsYyw0QkNKOUMsSUFBSThvQyxFQUFvQiwwQkFDcEJsK0IsRUFBUyxFQUFRLElBQ2pCbStCLEVBQTJCLEVBQVEsTUFDbkM3QixFQUFpQixFQUFRLE1BQ3pCOEIsRUFBWSxFQUFRLE1BRXBCQyxFQUFhLFdBQWMsT0FBT3oxQyxNQUV0Q3VzQyxFQUFPQyxRQUFVLFNBQVVrSixFQUFxQkMsRUFBTTFuQixHQUNwRCxJQUFJK2lCLEVBQWdCMkUsRUFBTyxZQUkzQixPQUhBRCxFQUFvQmxwQyxVQUFZNEssRUFBT2srQixFQUFtQixDQUFFcm5CLEtBQU1zbkIsRUFBeUIsRUFBR3RuQixLQUM5RnlsQixFQUFlZ0MsRUFBcUIxRSxHQUFlLEdBQU8sR0FDMUR3RSxFQUFVeEUsR0FBaUJ5RSxFQUNwQkMsSSxlQ2RULElBQUkvRCxFQUFjLEVBQVEsTUFDdEIvRSxFQUF1QixFQUFRLE1BQy9CMkksRUFBMkIsRUFBUSxNQUV2Q2hKLEVBQU9DLFFBQVVtRixFQUFjLFNBQVUva0MsRUFBUVYsRUFBSzBXLEdBQ3BELE9BQU9ncUIsRUFBcUJ2MkIsRUFBRXpKLEVBQVFWLEVBQUtxcEMsRUFBeUIsRUFBRzN5QixLQUNyRSxTQUFVaFcsRUFBUVYsRUFBSzBXLEdBRXpCLE9BREFoVyxFQUFPVixHQUFPMFcsRUFDUGhXLEksU0NSVDIvQixFQUFPQyxRQUFVLFNBQVVvSixFQUFRaHpCLEdBQ2pDLE1BQU8sQ0FDTGl6QixhQUF1QixFQUFURCxHQUNkN0ksZUFBeUIsRUFBVDZJLEdBQ2hCRSxXQUFxQixFQUFURixHQUNaaHpCLE1BQU9BLEssNEJDSlgsSUFBSW16QixFQUFjLEVBQVEsTUFDdEJuSixFQUF1QixFQUFRLE1BQy9CMkksRUFBMkIsRUFBUSxNQUV2Q2hKLEVBQU9DLFFBQVUsU0FBVTUvQixFQUFRVixFQUFLMFcsR0FDdEMsSUFBSW96QixFQUFjRCxFQUFZN3BDLEdBQzFCOHBDLEtBQWVwcEMsRUFBUWdnQyxFQUFxQnYyQixFQUFFekosRUFBUW9wQyxFQUFhVCxFQUF5QixFQUFHM3lCLElBQzlGaFcsRUFBT29wQyxHQUFlcHpCLEksMkJDUDdCLElBQUl3d0IsRUFBSSxFQUFRLE1BQ1o2QyxFQUE0QixFQUFRLE1BQ3BDWixFQUFpQixFQUFRLE1BQ3pCYSxFQUFpQixFQUFRLE1BQ3pCeEMsRUFBaUIsRUFBUSxNQUN6QnlDLEVBQThCLEVBQVEsTUFDdEM1QyxFQUFXLEVBQVEsTUFDbkI1RyxFQUFrQixFQUFRLE1BQzFCeUosRUFBVSxFQUFRLE1BQ2xCWixFQUFZLEVBQVEsTUFDcEJhLEVBQWdCLEVBQVEsTUFFeEJmLEVBQW9CZSxFQUFjZixrQkFDbENnQixFQUF5QkQsRUFBY0MsdUJBQ3ZDOUYsRUFBVzdELEVBQWdCLFlBQzNCNEosRUFBTyxPQUNQQyxFQUFTLFNBQ1RqRyxFQUFVLFVBRVZrRixFQUFhLFdBQWMsT0FBT3oxQyxNQUV0Q3VzQyxFQUFPQyxRQUFVLFNBQVVpSyxFQUFVZCxFQUFNRCxFQUFxQnpuQixFQUFNeW9CLEVBQVNDLEVBQVFDLEdBQ3JGWCxFQUEwQlAsRUFBcUJDLEVBQU0xbkIsR0FFckQsSUFrQkk0b0IsRUFBMEI5cUMsRUFBU21vQyxFQWxCbkM0QyxFQUFxQixTQUFVQyxHQUNqQyxHQUFJQSxJQUFTTCxHQUFXTSxFQUFpQixPQUFPQSxFQUNoRCxJQUFLVixHQUEwQlMsS0FBUUUsRUFBbUIsT0FBT0EsRUFBa0JGLEdBQ25GLE9BQVFBLEdBQ04sS0FBS1IsRUFDTCxLQUFLQyxFQUNMLEtBQUtqRyxFQUFTLE9BQU8sV0FBcUIsT0FBTyxJQUFJbUYsRUFBb0IxMUMsS0FBTSsyQyxJQUMvRSxPQUFPLFdBQWMsT0FBTyxJQUFJckIsRUFBb0IxMUMsUUFHcERneEMsRUFBZ0IyRSxFQUFPLFlBQ3ZCdUIsR0FBd0IsRUFDeEJELEVBQW9CUixFQUFTanFDLFVBQzdCMnFDLEVBQWlCRixFQUFrQnpHLElBQ2xDeUcsRUFBa0IsZUFDbEJQLEdBQVdPLEVBQWtCUCxHQUM5Qk0sR0FBbUJWLEdBQTBCYSxHQUFrQkwsRUFBbUJKLEdBQ2xGVSxFQUE0QixTQUFSekIsR0FBa0JzQixFQUFrQnBNLFNBQTRCc00sRUFpQ3hGLEdBN0JJQyxJQUNGUCxFQUEyQnhCLEVBQWUrQixFQUFrQjVzQixLQUFLLElBQUlpc0IsSUFDakVuQixJQUFzQm4rQixPQUFPM0ssV0FBYXFxQyxFQUF5QjVvQixPQUNoRW1vQixHQUFXZixFQUFld0IsS0FBOEJ2QixJQUN2RFksRUFDRkEsRUFBZVcsRUFBMEJ2QixHQUNhLG1CQUF0Q3VCLEVBQXlCckcsSUFDekMyRixFQUE0QlUsRUFBMEJyRyxFQUFVaUYsSUFJcEUvQixFQUFlbUQsRUFBMEI3RixHQUFlLEdBQU0sR0FDMURvRixJQUFTWixFQUFVeEUsR0FBaUJ5RSxLQUt4Q2lCLEdBQVdGLEdBQVVXLEdBQWtCQSxFQUFlNW9CLE9BQVNpb0IsSUFDakVVLEdBQXdCLEVBQ3hCRixFQUFrQixXQUFvQixPQUFPRyxFQUFlM3NCLEtBQUt4cUIsUUFJN0RvMkMsSUFBV1EsR0FBV0ssRUFBa0J6RyxLQUFjd0csR0FDMURiLEVBQTRCYyxFQUFtQnpHLEVBQVV3RyxHQUUzRHhCLEVBQVVHLEdBQVFxQixFQUdkTixFQU1GLEdBTEEzcUMsRUFBVSxDQUNSNFksT0FBUW15QixFQUFtQk4sR0FDM0IzUyxLQUFNOFMsRUFBU0ssRUFBa0JGLEVBQW1CUCxHQUNwRDFMLFFBQVNpTSxFQUFtQnZHLElBRTFCcUcsRUFBUSxJQUFLMUMsS0FBT25vQyxHQUNsQnVxQyxHQUEwQlksS0FBMkJoRCxLQUFPK0MsS0FDOUQxRCxFQUFTMEQsRUFBbUIvQyxFQUFLbm9DLEVBQVFtb0MsU0FFdENkLEVBQUUsQ0FBRTFzQixPQUFRaXZCLEVBQU0wQixPQUFPLEVBQU16QyxPQUFRMEIsR0FBMEJZLEdBQXlCbnJDLEdBR25HLE9BQU9BLEksZUN4RlQsSUFBSWcxQixFQUFPLEVBQVEsS0FDZnJULEVBQU0sRUFBUSxNQUNkNHBCLEVBQStCLEVBQVEsTUFDdkNqRyxFQUFpQixVQUVyQjlFLEVBQU9DLFFBQVUsU0FBVW1KLEdBQ3pCLElBQUk3ZCxFQUFTaUosRUFBS2pKLFNBQVdpSixFQUFLakosT0FBUyxJQUN0Q3BLLEVBQUlvSyxFQUFRNmQsSUFBT3RFLEVBQWV2WixFQUFRNmQsRUFBTSxDQUNuRC95QixNQUFPMDBCLEVBQTZCamhDLEVBQUVzL0IsTyxlQ1IxQyxJQUFJaEcsRUFBUSxFQUFRLE1BR3BCcEQsRUFBT0MsU0FBV21ELEdBQU0sV0FDdEIsT0FBOEUsR0FBdkV4NEIsT0FBT2s2QixlQUFlLEdBQUksRUFBRyxDQUFFempCLElBQUssV0FBYyxPQUFPLEtBQVEsTyxjQ0oxRSxJQUFJeWxCLEVBQVMsRUFBUSxNQUNqQjNHLEVBQVcsRUFBUSxLQUVuQjF2QyxFQUFXcTJDLEVBQU9yMkMsU0FFbEJ1NkMsRUFBUzdLLEVBQVMxdkMsSUFBYTB2QyxFQUFTMXZDLEVBQVNrMUIsZUFFckRxYSxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLE9BQU84SyxFQUFTdjZDLEVBQVNrMUIsY0FBY3VhLEdBQU0sSyxTQ04vQ0YsRUFBT0MsUUFBVSxDQUNmZ0wsWUFBYSxFQUNiQyxvQkFBcUIsRUFDckJDLGFBQWMsRUFDZEMsZUFBZ0IsRUFDaEJDLFlBQWEsRUFDYkMsY0FBZSxFQUNmQyxhQUFjLEVBQ2RDLHFCQUFzQixFQUN0QkMsU0FBVSxFQUNWQyxrQkFBbUIsRUFDbkJDLGVBQWdCLEVBQ2hCQyxnQkFBaUIsRUFDakJDLGtCQUFtQixFQUNuQkMsVUFBVyxFQUNYQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMsU0FBVSxFQUNWQyxpQkFBa0IsRUFDbEJDLE9BQVEsRUFDUkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGNBQWUsRUFDZkMsZUFBZ0IsRUFDaEJDLGFBQWMsRUFDZEMsY0FBZSxFQUNmQyxpQkFBa0IsRUFDbEJDLGlCQUFrQixFQUNsQkMsZUFBZ0IsRUFDaEJDLGlCQUFrQixFQUNsQkMsY0FBZSxFQUNmQyxVQUFXLEksZUNqQ2IsSUFBSUMsRUFBWSxFQUFRLE1BRXhCaE4sRUFBT0MsUUFBVSxtQ0FBbUNoaEIsS0FBSyt0QixJLGVDRnpELElBQUlDLEVBQVUsRUFBUSxNQUNsQm5HLEVBQVMsRUFBUSxNQUVyQjlHLEVBQU9DLFFBQXFDLFdBQTNCZ04sRUFBUW5HLEVBQU9vRyxVLGVDSGhDLElBQUlGLEVBQVksRUFBUSxNQUV4QmhOLEVBQU9DLFFBQVUscUJBQXFCaGhCLEtBQUsrdEIsSSxlQ0YzQyxJQUFJRyxFQUFhLEVBQVEsTUFFekJuTixFQUFPQyxRQUFVa04sRUFBVyxZQUFhLGNBQWdCLEksZUNGekQsSUFNSWh5QixFQUFPaXlCLEVBTlB0RyxFQUFTLEVBQVEsTUFDakJrRyxFQUFZLEVBQVEsTUFFcEJFLEVBQVVwRyxFQUFPb0csUUFDakJHLEVBQVdILEdBQVdBLEVBQVFHLFNBQzlCQyxFQUFLRCxHQUFZQSxFQUFTQyxHQUcxQkEsRUFFRkYsR0FEQWp5QixFQUFRbXlCLEVBQUcxcEIsTUFBTSxNQUNELEdBQUt6SSxFQUFNLEdBQ2xCNnhCLE1BQ1Q3eEIsRUFBUTZ4QixFQUFVN3hCLE1BQU0saUJBQ1ZBLEVBQU0sSUFBTSxNQUN4QkEsRUFBUTZ4QixFQUFVN3hCLE1BQU0sb0JBQ2JpeUIsRUFBVWp5QixFQUFNLElBSS9CNmtCLEVBQU9DLFFBQVVtTixJQUFZQSxHLFFDbEI3QnBOLEVBQU9DLFFBQVUsQ0FDZixjQUNBLGlCQUNBLGdCQUNBLHVCQUNBLGlCQUNBLFdBQ0EsWSxlQ1JGLElBQUk2RyxFQUFTLEVBQVEsTUFDakIwQixFQUEyQixVQUMzQm9CLEVBQThCLEVBQVEsTUFDdEM1QyxFQUFXLEVBQVEsTUFDbkJ1RyxFQUFZLEVBQVEsTUFDcEJDLEVBQTRCLEVBQVEsTUFDcEN6RyxFQUFXLEVBQVEsTUFnQnZCL0csRUFBT0MsUUFBVSxTQUFVcFosRUFBU3RPLEdBQ2xDLElBR1k0QixFQUFReGEsRUFBSzh0QyxFQUFnQkMsRUFBZ0JDLEVBSHJEQyxFQUFTL21CLEVBQVExTSxPQUNqQjB6QixFQUFTaG5CLEVBQVFpZ0IsT0FDakJnSCxFQUFTam5CLEVBQVFrbkIsS0FTckIsR0FORTV6QixFQURFMHpCLEVBQ08vRyxFQUNBZ0gsRUFDQWhILEVBQU84RyxJQUFXTCxFQUFVSyxFQUFRLEtBRW5DOUcsRUFBTzhHLElBQVcsSUFBSTN0QyxVQUV0QixJQUFLTixLQUFPNFksRUFBUSxDQVE5QixHQVBBbTFCLEVBQWlCbjFCLEVBQU81WSxHQUd0Qjh0QyxFQUZFNW1CLEVBQVFtbkIsYUFDVkwsRUFBYW5GLEVBQXlCcnVCLEVBQVF4YSxLQUNmZ3VDLEVBQVd0M0IsTUFDcEI4RCxFQUFPeGEsSUFDdEJvbkMsRUFBUzhHLEVBQVNsdUMsRUFBTWl1QyxHQUFVRSxFQUFTLElBQU0sS0FBT251QyxFQUFLa25CLEVBQVF3aEIsY0FFNUM5aUMsSUFBbkJrb0MsRUFBOEIsQ0FDM0MsVUFBV0MsVUFBMEJELEVBQWdCLFNBQ3JERCxFQUEwQkUsRUFBZ0JELElBR3hDNW1CLEVBQVFvbkIsTUFBU1IsR0FBa0JBLEVBQWVRLE9BQ3BEckUsRUFBNEI4RCxFQUFnQixRQUFRLEdBR3REMUcsRUFBUzdzQixFQUFReGEsRUFBSyt0QyxFQUFnQjdtQixNLFNDbkQxQ21aLEVBQU9DLFFBQVUsU0FBVXpxQixHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBTzNMLEdBQ1AsT0FBTyxLLDRCQ0ZYLEVBQVEsTUFDUixJQUFJbTlCLEVBQVcsRUFBUSxNQUNuQjVELEVBQVEsRUFBUSxNQUNoQmhELEVBQWtCLEVBQVEsTUFDMUI4TixFQUFhLEVBQVEsTUFDckJ0RSxFQUE4QixFQUFRLE1BRXRDdEcsRUFBVWxELEVBQWdCLFdBRTFCK04sR0FBaUMvSyxHQUFNLFdBSXpDLElBQUlwb0IsRUFBSyxJQU1ULE9BTEFBLEVBQUd4RixLQUFPLFdBQ1IsSUFBSXRpQixFQUFTLEdBRWIsT0FEQUEsRUFBTyswQixPQUFTLENBQUU5MEIsRUFBRyxLQUNkRCxHQUV5QixNQUEzQixHQUFHdEMsUUFBUW9xQixFQUFJLFdBS3BCb3pCLEVBQ2dDLE9BQTNCLElBQUl4OUMsUUFBUSxJQUFLLE1BR3RCeTlDLEVBQVVqTyxFQUFnQixXQUUxQmtPLElBQ0UsSUFBSUQsSUFDNkIsS0FBNUIsSUFBSUEsR0FBUyxJQUFLLE1BT3pCRSxHQUFxQ25MLEdBQU0sV0FFN0MsSUFBSXBvQixFQUFLLE9BQ0x3ekIsRUFBZXh6QixFQUFHeEYsS0FDdEJ3RixFQUFHeEYsS0FBTyxXQUFjLE9BQU9nNUIsRUFBYXZwQyxNQUFNeFIsS0FBTTZSLFlBQ3hELElBQUlwUyxFQUFTLEtBQUswd0IsTUFBTTVJLEdBQ3hCLE9BQXlCLElBQWxCOW5CLEVBQU9KLFFBQThCLE1BQWRJLEVBQU8sSUFBNEIsTUFBZEEsRUFBTyxNQUc1RDhzQyxFQUFPQyxRQUFVLFNBQVUwSCxFQUFLNzBDLEVBQVEwaUIsRUFBTXk0QixHQUM1QyxJQUFJUSxFQUFTck8sRUFBZ0J1SCxHQUV6QitHLEdBQXVCdEwsR0FBTSxXQUUvQixJQUFJNUIsRUFBSSxHQUVSLE9BREFBLEVBQUVpTixHQUFVLFdBQWMsT0FBTyxHQUNaLEdBQWQsR0FBRzlHLEdBQUtuRyxNQUdibU4sRUFBb0JELElBQXdCdEwsR0FBTSxXQUVwRCxJQUFJd0wsR0FBYSxFQUNiNXpCLEVBQUssSUFrQlQsTUFoQlksVUFBUjJzQixLQUlGM3NCLEVBQUssSUFHRjlhLFlBQWMsR0FDakI4YSxFQUFHOWEsWUFBWW9qQyxHQUFXLFdBQWMsT0FBT3RvQixHQUMvQ0EsRUFBRzZ6QixNQUFRLEdBQ1g3ekIsRUFBR3l6QixHQUFVLElBQUlBLElBR25CenpCLEVBQUd4RixLQUFPLFdBQWlDLE9BQW5CbzVCLEdBQWEsRUFBYSxNQUVsRDV6QixFQUFHeXpCLEdBQVEsS0FDSEcsS0FHVixJQUNHRixJQUNBQyxHQUNRLFlBQVJoSCxLQUNDd0csSUFDQUMsR0FDQ0UsSUFFTSxVQUFSM0csSUFBb0I0RyxFQUNyQixDQUNBLElBQUlPLEVBQXFCLElBQUlMLEdBQ3pCanZDLEVBQVVnVyxFQUFLaTVCLEVBQVEsR0FBRzlHLElBQU0sU0FBVUMsRUFBY2MsRUFBUXFHLEVBQUtDLEVBQU1DLEdBQzdFLE9BQUl2RyxFQUFPbHpCLE9BQVMwNEIsRUFDZFEsSUFBd0JPLEVBSW5CLENBQUVuTixNQUFNLEVBQU16ckIsTUFBT3k0QixFQUFtQjd3QixLQUFLeXFCLEVBQVFxRyxFQUFLQyxJQUU1RCxDQUFFbE4sTUFBTSxFQUFNenJCLE1BQU91eEIsRUFBYTNwQixLQUFLOHdCLEVBQUtyRyxFQUFRc0csSUFFdEQsQ0FBRWxOLE1BQU0sS0FDZCxDQUNEc00saUJBQWtCQSxFQUNsQkUsNkNBQThDQSxJQUU1Q1ksRUFBZTF2QyxFQUFRLEdBQ3ZCMnZDLEVBQWMzdkMsRUFBUSxHQUUxQnduQyxFQUFTdG9CLE9BQU96ZSxVQUFXMG5DLEVBQUt1SCxHQUNoQ2xJLEVBQVMxN0IsT0FBT3JMLFVBQVd3dUMsRUFBa0IsR0FBVjM3QyxFQUcvQixTQUFVa21CLEVBQVFvMkIsR0FBTyxPQUFPRCxFQUFZbHhCLEtBQUtqRixFQUFRdmxCLEtBQU0yN0MsSUFHL0QsU0FBVXAyQixHQUFVLE9BQU9tMkIsRUFBWWx4QixLQUFLakYsRUFBUXZsQixRQUl0RHc2QyxHQUFNckUsRUFBNEJ0K0IsT0FBT3JMLFVBQVV3dUMsR0FBUyxRQUFRLEssZUM1SDFFLElBQUlyTCxFQUFRLEVBQVEsTUFFcEJwRCxFQUFPQyxTQUFXbUQsR0FBTSxXQUN0QixPQUFPeDRCLE9BQU95a0MsYUFBYXprQyxPQUFPMGtDLGtCQUFrQixTLGVDSHRELElBQUlDLEVBQVksRUFBUSxNQUd4QnZQLEVBQU9DLFFBQVUsU0FBVThELEVBQUluWSxFQUFNOTRCLEdBRW5DLEdBREF5OEMsRUFBVXhMLFFBQ0d4K0IsSUFBVHFtQixFQUFvQixPQUFPbVksRUFDL0IsT0FBUWp4QyxHQUNOLEtBQUssRUFBRyxPQUFPLFdBQ2IsT0FBT2l4QyxFQUFHOWxCLEtBQUsyTixJQUVqQixLQUFLLEVBQUcsT0FBTyxTQUFVejRCLEdBQ3ZCLE9BQU80d0MsRUFBRzlsQixLQUFLMk4sRUFBTXo0QixJQUV2QixLQUFLLEVBQUcsT0FBTyxTQUFVQSxFQUFHQyxHQUMxQixPQUFPMndDLEVBQUc5bEIsS0FBSzJOLEVBQU16NEIsRUFBR0MsSUFFMUIsS0FBSyxFQUFHLE9BQU8sU0FBVUQsRUFBR0MsRUFBRzRJLEdBQzdCLE9BQU8rbkMsRUFBRzlsQixLQUFLMk4sRUFBTXo0QixFQUFHQyxFQUFHNEksSUFHL0IsT0FBTyxXQUNMLE9BQU8rbkMsRUFBRzkrQixNQUFNMm1CLEVBQU10bUIsYyxlQ3JCMUIsSUFBSWt2QixFQUFPLEVBQVEsS0FDZnNTLEVBQVMsRUFBUSxNQUVqQnlJLEVBQVksU0FBVUMsR0FDeEIsTUFBMEIsbUJBQVpBLEVBQXlCQSxPQUFXanFDLEdBR3BEeTZCLEVBQU9DLFFBQVUsU0FBVW5hLEVBQVc2ZCxHQUNwQyxPQUFPcitCLFVBQVV4UyxPQUFTLEVBQUl5OEMsRUFBVS9hLEVBQUsxTyxLQUFleXBCLEVBQVV6SSxFQUFPaGhCLElBQ3pFME8sRUFBSzFPLElBQWMwTyxFQUFLMU8sR0FBVzZkLElBQVdtRCxFQUFPaGhCLElBQWNnaEIsRUFBT2hoQixHQUFXNmQsSyxlQ1QzRixJQUFJc0osRUFBVSxFQUFRLEtBQ2xCaEUsRUFBWSxFQUFRLE1BR3BCaEYsRUFGa0IsRUFBUSxLQUVmN0QsQ0FBZ0IsWUFFL0JKLEVBQU9DLFFBQVUsU0FBVUMsR0FDekIsR0FBVTM2QixNQUFOMjZCLEVBQWlCLE9BQU9BLEVBQUcrRCxJQUMxQi9ELEVBQUcsZUFDSCtJLEVBQVVnRSxFQUFRL00sTSxjQ1R6QixJQUFJZSxFQUFXLEVBQVEsTUFFbkJ0dkMsRUFBUVgsS0FBS1csTUFDYmYsRUFBVSxHQUFHQSxRQUNiNitDLEVBQXVCLDhCQUN2QkMsRUFBZ0Msc0JBR3BDMVAsRUFBT0MsUUFBVSxTQUFVMFAsRUFBU1osRUFBS2EsRUFBVUMsRUFBVUMsRUFBZUMsR0FDMUUsSUFBSUMsRUFBVUosRUFBV0QsRUFBUTc4QyxPQUM3QkwsRUFBSW85QyxFQUFTLzhDLE9BQ2JtOUMsRUFBVVAsRUFLZCxZQUpzQm5xQyxJQUFsQnVxQyxJQUNGQSxFQUFnQjdPLEVBQVM2TyxHQUN6QkcsRUFBVVIsR0FFTDcrQyxFQUFRcXRCLEtBQUs4eEIsRUFBYUUsR0FBUyxTQUFVOTBCLEVBQU8rMEIsR0FDekQsSUFBSUMsRUFDSixPQUFRRCxFQUFHelAsT0FBTyxJQUNoQixJQUFLLElBQUssTUFBTyxJQUNqQixJQUFLLElBQUssT0FBT2tQLEVBQ2pCLElBQUssSUFBSyxPQUFPWixFQUFJbDJCLE1BQU0sRUFBRysyQixHQUM5QixJQUFLLElBQUssT0FBT2IsRUFBSWwyQixNQUFNbTNCLEdBQzNCLElBQUssSUFDSEcsRUFBVUwsRUFBY0ksRUFBR3IzQixNQUFNLEdBQUksSUFDckMsTUFDRixRQUNFLElBQUkva0IsR0FBS284QyxFQUNULEdBQVUsSUFBTnA4QyxFQUFTLE9BQU9xbkIsRUFDcEIsR0FBSXJuQixFQUFJckIsRUFBRyxDQUNULElBQUlxWCxFQUFJblksRUFBTW1DLEVBQUksSUFDbEIsT0FBVSxJQUFOZ1csRUFBZ0JxUixFQUNoQnJSLEdBQUtyWCxPQUE4QjhTLElBQXBCc3FDLEVBQVMvbEMsRUFBSSxHQUFtQm9tQyxFQUFHelAsT0FBTyxHQUFLb1AsRUFBUy9sQyxFQUFJLEdBQUtvbUMsRUFBR3pQLE9BQU8sR0FDdkZ0bEIsRUFFVGcxQixFQUFVTixFQUFTLzdDLEVBQUksR0FFM0IsWUFBbUJ5UixJQUFaNHFDLEVBQXdCLEdBQUtBLE8sZUNyQ3hDLElBQUlDLEVBQVEsU0FBVWxRLEdBQ3BCLE9BQU9BLEdBQU1BLEVBQUdsdkMsTUFBUUEsTUFBUWt2QyxHQUlsQ0YsRUFBT0MsUUFFTG1RLEVBQTJCLGlCQUFkQyxZQUEwQkEsYUFDdkNELEVBQXVCLGlCQUFWaHBCLFFBQXNCQSxTQUNuQ2dwQixFQUFxQixpQkFBUmppQixNQUFvQkEsT0FDakNpaUIsRUFBdUIsaUJBQVYsRUFBQXQ2QixHQUFzQixFQUFBQSxJQUVuQyxXQUFlLE9BQU9yaUIsS0FBdEIsSUFBb0M4bUMsU0FBUyxjQUFUQSxJLFNDWnRDLElBQUl4NkIsRUFBaUIsR0FBR0EsZUFFeEJpZ0MsRUFBT0MsUUFBVSxTQUFVQyxFQUFJdmdDLEdBQzdCLE9BQU9JLEVBQWVrZSxLQUFLaWlCLEVBQUl2Z0MsSyxTQ0hqQ3FnQyxFQUFPQyxRQUFVLEksY0NBakIsSUFBSTZHLEVBQVMsRUFBUSxNQUVyQjlHLEVBQU9DLFFBQVUsU0FBVTlzQyxFQUFHQyxHQUM1QixJQUFJazlDLEVBQVV4SixFQUFPd0osUUFDakJBLEdBQVdBLEVBQVF6bUMsUUFDQSxJQUFyQnZFLFVBQVV4UyxPQUFldzlDLEVBQVF6bUMsTUFBTTFXLEdBQUttOUMsRUFBUXptQyxNQUFNMVcsRUFBR0MsTSxjQ0xqRSxJQUFJKzVDLEVBQWEsRUFBUSxNQUV6Qm5OLEVBQU9DLFFBQVVrTixFQUFXLFdBQVksb0IsZUNGeEMsSUFBSS9ILEVBQWMsRUFBUSxNQUN0QmhDLEVBQVEsRUFBUSxNQUNoQnpkLEVBQWdCLEVBQVEsS0FHNUJxYSxFQUFPQyxTQUFXbUYsSUFBZ0JoQyxHQUFNLFdBQ3RDLE9BRVEsR0FGRHg0QixPQUFPazZCLGVBQWVuZixFQUFjLE9BQVEsSUFBSyxDQUN0RHRFLElBQUssV0FBYyxPQUFPLEtBQ3pCbHVCLE0sZUNSTCxJQUFJaXdDLEVBQVEsRUFBUSxNQUNoQjZKLEVBQVUsRUFBUSxNQUVsQnJwQixFQUFRLEdBQUdBLE1BR2ZvYyxFQUFPQyxRQUFVbUQsR0FBTSxXQUdyQixPQUFReDRCLE9BQU8sS0FBSzJsQyxxQkFBcUIsTUFDdEMsU0FBVXJRLEdBQ2IsTUFBc0IsVUFBZitNLEVBQVEvTSxHQUFrQnRjLEVBQU0zRixLQUFLaWlCLEVBQUksSUFBTXQxQixPQUFPczFCLElBQzNEdDFCLFEsZUNaSixJQUFJdTFCLEVBQVcsRUFBUSxLQUNuQndKLEVBQWlCLEVBQVEsTUFHN0IzSixFQUFPQyxRQUFVLFNBQVVrQyxFQUFPaUcsRUFBT29JLEdBQ3ZDLElBQUlDLEVBQVdDLEVBVWYsT0FQRS9HLEdBRTBDLG1CQUFsQzhHLEVBQVlySSxFQUFNbG9DLGNBQzFCdXdDLElBQWNELEdBQ2RyUSxFQUFTdVEsRUFBcUJELEVBQVV4d0MsWUFDeEN5d0MsSUFBdUJGLEVBQVF2d0MsV0FDL0IwcEMsRUFBZXhILEVBQU91TyxHQUNqQnZPLEksZUNmVCxJQUFJd08sRUFBUSxFQUFRLE1BRWhCQyxFQUFtQnJXLFNBQVNqa0IsU0FHRSxtQkFBdkJxNkIsRUFBTUUsZ0JBQ2ZGLEVBQU1FLGNBQWdCLFNBQVUzUSxHQUM5QixPQUFPMFEsRUFBaUIzeUIsS0FBS2lpQixLQUlqQ0YsRUFBT0MsUUFBVTBRLEVBQU1FLGUsZUNYdkIsSUFBSUMsRUFBYSxFQUFRLE1BQ3JCM1EsRUFBVyxFQUFRLEtBQ25CaGYsRUFBTSxFQUFRLE1BQ2QyakIsRUFBaUIsVUFDakJpTSxFQUFNLEVBQVEsTUFDZEMsRUFBVyxFQUFRLE1BRW5CQyxFQUFXRixFQUFJLFFBQ2ZoakIsRUFBSyxFQUVMc2hCLEVBQWV6a0MsT0FBT3lrQyxjQUFnQixXQUN4QyxPQUFPLEdBR0w2QixFQUFjLFNBQVVoUixHQUMxQjRFLEVBQWU1RSxFQUFJK1EsRUFBVSxDQUFFNTZCLE1BQU8sQ0FDcEM4NkIsU0FBVSxPQUFRcGpCLEVBQ2xCcWpCLFNBQVUsT0FvQ1ZDLEVBQU9yUixFQUFPQyxRQUFVLENBQzFCNEgsVUFBVSxFQUNWeEMsUUFsQ1ksU0FBVW5GLEVBQUlyMUIsR0FFMUIsSUFBS3MxQixFQUFTRCxHQUFLLE1BQW9CLGlCQUFOQSxFQUFpQkEsR0FBbUIsaUJBQU5BLEVBQWlCLElBQU0sS0FBT0EsRUFDN0YsSUFBSy9lLEVBQUkrZSxFQUFJK1EsR0FBVyxDQUV0QixJQUFLNUIsRUFBYW5QLEdBQUssTUFBTyxJQUU5QixJQUFLcjFCLEVBQVEsTUFBTyxJQUVwQnFtQyxFQUFZaFIsR0FFWixPQUFPQSxFQUFHK1EsR0FBVUUsVUF3QnRCRyxZQXJCZ0IsU0FBVXBSLEVBQUlyMUIsR0FDOUIsSUFBS3NXLEVBQUkrZSxFQUFJK1EsR0FBVyxDQUV0QixJQUFLNUIsRUFBYW5QLEdBQUssT0FBTyxFQUU5QixJQUFLcjFCLEVBQVEsT0FBTyxFQUVwQnFtQyxFQUFZaFIsR0FFWixPQUFPQSxFQUFHK1EsR0FBVUcsVUFhdEJHLFNBVGEsU0FBVXJSLEdBRXZCLE9BREk4USxHQUFZSyxFQUFLeEosVUFBWXdILEVBQWFuUCxLQUFRL2UsRUFBSStlLEVBQUkrUSxJQUFXQyxFQUFZaFIsR0FDOUVBLElBVVQ0USxFQUFXRyxJQUFZLEcsZUM1RHZCLElBVUk3dkIsRUFBS0MsRUFBS0YsRUFWVnF3QixFQUFrQixFQUFRLE1BQzFCMUssRUFBUyxFQUFRLE1BQ2pCM0csRUFBVyxFQUFRLEtBQ25CeUosRUFBOEIsRUFBUSxNQUN0QzZILEVBQVksRUFBUSxNQUNwQkMsRUFBUyxFQUFRLE1BQ2pCQyxFQUFZLEVBQVEsTUFDcEJiLEVBQWEsRUFBUSxNQUVyQmMsRUFBVTlLLEVBQU84SyxRQWdCckIsR0FBSUosRUFBaUIsQ0FDbkIsSUFBSWIsRUFBUWUsRUFBT3JqQixRQUFVcWpCLEVBQU9yakIsTUFBUSxJQUFJdWpCLEdBQzVDQyxFQUFRbEIsRUFBTXR2QixJQUNkeXdCLEVBQVFuQixFQUFNeHZCLElBQ2Q0d0IsRUFBUXBCLEVBQU12dkIsSUFDbEJBLEVBQU0sU0FBVThlLEVBQUk4UixHQUdsQixPQUZBQSxFQUFTQyxPQUFTL1IsRUFDbEI2UixFQUFNOXpCLEtBQUsweUIsRUFBT3pRLEVBQUk4UixHQUNmQSxHQUVUM3dCLEVBQU0sU0FBVTZlLEdBQ2QsT0FBTzJSLEVBQU01ekIsS0FBSzB5QixFQUFPelEsSUFBTyxJQUVsQy9lLEVBQU0sU0FBVStlLEdBQ2QsT0FBTzRSLEVBQU03ekIsS0FBSzB5QixFQUFPelEsUUFFdEIsQ0FDTCxJQUFJZ1MsRUFBUVAsRUFBVSxTQUN0QmIsRUFBV29CLElBQVMsRUFDcEI5d0IsRUFBTSxTQUFVOGUsRUFBSThSLEdBR2xCLE9BRkFBLEVBQVNDLE9BQVMvUixFQUNsQjBKLEVBQTRCMUosRUFBSWdTLEVBQU9GLEdBQ2hDQSxHQUVUM3dCLEVBQU0sU0FBVTZlLEdBQ2QsT0FBT3VSLEVBQVV2UixFQUFJZ1MsR0FBU2hTLEVBQUdnUyxHQUFTLElBRTVDL3dCLEVBQU0sU0FBVStlLEdBQ2QsT0FBT3VSLEVBQVV2UixFQUFJZ1MsSUFJekJsUyxFQUFPQyxRQUFVLENBQ2Y3ZSxJQUFLQSxFQUNMQyxJQUFLQSxFQUNMRixJQUFLQSxFQUNMZ3hCLFFBakRZLFNBQVVqUyxHQUN0QixPQUFPL2UsRUFBSStlLEdBQU03ZSxFQUFJNmUsR0FBTTllLEVBQUk4ZSxFQUFJLEtBaURuQ3VGLFVBOUNjLFNBQVVsRCxHQUN4QixPQUFPLFNBQVVyQyxHQUNmLElBQUk3UixFQUNKLElBQUs4UixFQUFTRCxLQUFRN1IsRUFBUWhOLEVBQUk2ZSxJQUFLbGdDLE9BQVN1aUMsRUFDOUMsTUFBTTNVLFVBQVUsMEJBQTRCMlUsRUFBTyxhQUNuRCxPQUFPbFUsTSxlQ3JCYixJQUFJK1IsRUFBa0IsRUFBUSxNQUMxQjZJLEVBQVksRUFBUSxNQUVwQmhGLEVBQVc3RCxFQUFnQixZQUMzQkcsRUFBaUI1cEMsTUFBTXNKLFVBRzNCKy9CLEVBQU9DLFFBQVUsU0FBVUMsR0FDekIsWUFBYzM2QixJQUFQMjZCLElBQXFCK0ksRUFBVXR5QyxRQUFVdXBDLEdBQU1LLEVBQWUwRCxLQUFjL0QsSyxlQ1JyRixJQUFJK00sRUFBVSxFQUFRLE1BSXRCak4sRUFBT0MsUUFBVXRwQyxNQUFNMGlCLFNBQVcsU0FBaUIrMUIsR0FDakQsTUFBdUIsU0FBaEJuQyxFQUFRbUMsSyxlQ0xqQixJQUFJaE0sRUFBUSxFQUFRLE1BRWhCMk0sRUFBYyxrQkFFZGhKLEVBQVcsU0FBVXFMLEVBQVNDLEdBQ2hDLElBQUloOEIsRUFBUXNLLEVBQUtuSCxFQUFVNDRCLElBQzNCLE9BQU8vN0IsR0FBU2k4QixHQUNaajhCLEdBQVNrOEIsSUFDVyxtQkFBYkYsRUFBMEJqUCxFQUFNaVAsS0FDckNBLElBR0o3NEIsRUFBWXV0QixFQUFTdnRCLFVBQVksU0FBVVIsR0FDN0MsT0FBTzBGLE9BQU8xRixHQUFRcG9CLFFBQVFtL0MsRUFBYSxLQUFLeDZCLGVBRzlDb0wsRUFBT29tQixFQUFTcG1CLEtBQU8sR0FDdkI0eEIsRUFBU3hMLEVBQVN3TCxPQUFTLElBQzNCRCxFQUFXdkwsRUFBU3VMLFNBQVcsSUFFbkN0UyxFQUFPQyxRQUFVOEcsRyxRQ3BCakIvRyxFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLE1BQXFCLGlCQUFQQSxFQUF5QixPQUFQQSxFQUE0QixtQkFBUEEsSSxTQ0R2REYsRUFBT0MsU0FBVSxHLGVDQWpCLElBQUlFLEVBQVcsRUFBUSxLQUNuQjhNLEVBQVUsRUFBUSxNQUdsQnhFLEVBRmtCLEVBQVEsS0FFbEJySSxDQUFnQixTQUk1QkosRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixJQUFJc1MsRUFDSixPQUFPclMsRUFBU0QsVUFBbUMzNkIsS0FBMUJpdEMsRUFBV3RTLEVBQUd1SSxNQUEwQitKLEVBQTBCLFVBQWZ2RixFQUFRL00sTSxjQ1Z0RixJQUFJMkQsRUFBVyxFQUFRLE1BQ25CMUMsRUFBd0IsRUFBUSxNQUNoQ0MsRUFBVyxFQUFRLE1BQ25CbFksRUFBTyxFQUFRLE1BQ2ZvWSxFQUFvQixFQUFRLE1BQzVCd0MsRUFBZ0IsRUFBUSxNQUV4QjJPLEVBQVMsU0FBVUMsRUFBU3gvQyxHQUM5Qk8sS0FBS2kvQyxRQUFVQSxFQUNmai9DLEtBQUtQLE9BQVNBLEdBR2hCOHNDLEVBQU9DLFFBQVUsU0FBVTZGLEVBQVU2TSxFQUFpQjlyQixHQUNwRCxJQUtJMkUsRUFBVW9uQixFQUFRaDZCLEVBQU85bEIsRUFBUUksRUFBUXd1QixFQUFNdGxCLEVBTC9Dd3ZCLEVBQU8vRSxHQUFXQSxFQUFRK0UsS0FDMUJvYSxLQUFnQm5mLElBQVdBLEVBQVFtZixZQUNuQzZNLEtBQWlCaHNCLElBQVdBLEVBQVFnc0IsYUFDcENDLEtBQWlCanNCLElBQVdBLEVBQVFpc0IsYUFDcEMvTyxFQUFLN2EsRUFBS3lwQixFQUFpQi9tQixFQUFNLEVBQUlvYSxFQUFhOE0sR0FHbERycEMsRUFBTyxTQUFVc3BDLEdBRW5CLE9BREl2bkIsR0FBVXNZLEVBQWN0WSxHQUNyQixJQUFJaW5CLEdBQU8sRUFBTU0sSUFHdEJDLEVBQVMsU0FBVTM4QixHQUNyQixPQUFJMnZCLEdBQ0ZuQyxFQUFTeHRCLEdBQ0Z5OEIsRUFBYy9PLEVBQUcxdEIsRUFBTSxHQUFJQSxFQUFNLEdBQUk1TSxHQUFRczZCLEVBQUcxdEIsRUFBTSxHQUFJQSxFQUFNLEtBQ2hFeThCLEVBQWMvTyxFQUFHMXRCLEVBQU81TSxHQUFRczZCLEVBQUcxdEIsSUFHOUMsR0FBSXc4QixFQUNGcm5CLEVBQVdzYSxNQUNOLENBRUwsR0FBcUIsbUJBRHJCOE0sRUFBU3RSLEVBQWtCd0UsSUFDTSxNQUFNbFksVUFBVSwwQkFFakQsR0FBSXVULEVBQXNCeVIsR0FBUyxDQUNqQyxJQUFLaDZCLEVBQVEsRUFBRzlsQixFQUFTc3VDLEVBQVMwRSxFQUFTaHpDLFFBQVNBLEVBQVM4bEIsRUFBT0EsSUFFbEUsSUFEQTFsQixFQUFTOC9DLEVBQU9sTixFQUFTbHRCLE1BQ1gxbEIsYUFBa0J1L0MsRUFBUSxPQUFPdi9DLEVBQy9DLE9BQU8sSUFBSXUvQyxHQUFPLEdBRXRCam5CLEVBQVdvbkIsRUFBTzMwQixLQUFLNm5CLEdBSXpCLElBREFwa0IsRUFBTzhKLEVBQVM5SixPQUNQdGxCLEVBQU9zbEIsRUFBS3pELEtBQUt1TixJQUFXc1csTUFBTSxDQUN6QyxJQUNFNXVDLEVBQVM4L0MsRUFBTzUyQyxFQUFLaWEsT0FDckIsTUFBT3hNLEdBRVAsTUFEQWk2QixFQUFjdFksR0FDUjNoQixFQUVSLEdBQXFCLGlCQUFWM1csR0FBc0JBLEdBQVVBLGFBQWtCdS9DLEVBQVEsT0FBT3YvQyxFQUM1RSxPQUFPLElBQUl1L0MsR0FBTyxLLGVDeER0QixJQUFJNU8sRUFBVyxFQUFRLE1BRXZCN0QsRUFBT0MsUUFBVSxTQUFVelUsR0FDekIsSUFBSXluQixFQUFlem5CLEVBQWlCLE9BQ3BDLFFBQXFCam1CLElBQWpCMHRDLEVBQ0YsT0FBT3BQLEVBQVNvUCxFQUFhaDFCLEtBQUt1TixJQUFXblYsUSw0QkNKakQsSUFjSTB5QixFQUFtQm1LLEVBQW1DQyxFQWR0RC9QLEVBQVEsRUFBUSxNQUNoQjBGLEVBQWlCLEVBQVEsTUFDekJjLEVBQThCLEVBQVEsTUFDdEN6b0IsRUFBTSxFQUFRLE1BQ2RpZixFQUFrQixFQUFRLE1BQzFCeUosRUFBVSxFQUFRLE1BRWxCNUYsRUFBVzdELEVBQWdCLFlBQzNCMkosR0FBeUIsRUFRekIsR0FBR3pTLE9BR0MsU0FGTjZiLEVBQWdCLEdBQUc3YixTQUlqQjRiLEVBQW9DcEssRUFBZUEsRUFBZXFLLE9BQ3hCdm9DLE9BQU8zSyxZQUFXOG9DLEVBQW9CbUssR0FIbERuSixHQUF5QixHQU8zRCxJQUFJcUosRUFBOEM3dEMsTUFBckJ3akMsR0FBa0MzRixHQUFNLFdBQ25FLElBQUlua0IsRUFBTyxHQUVYLE9BQU84cEIsRUFBa0I5RSxHQUFVaG1CLEtBQUtnQixLQUFVQSxLQUdoRG0wQixJQUF3QnJLLEVBQW9CLElBRzFDYyxJQUFXdUosR0FBNEJqeUIsRUFBSTRuQixFQUFtQjlFLElBQ2xFMkYsRUFBNEJiLEVBQW1COUUsR0ExQmhDLFdBQWMsT0FBT3h3QyxRQTZCdEN1c0MsRUFBT0MsUUFBVSxDQUNmOEksa0JBQW1CQSxFQUNuQmdCLHVCQUF3QkEsSSxTQzFDMUIvSixFQUFPQyxRQUFVLEksZUNBakIsSUFlSW9ULEVBQU9DLEVBQU12TixFQUFNd04sRUFBUUMsRUFBUTUxQixFQUFNNjFCLEVBQVNyVyxFQWZsRDBKLEVBQVMsRUFBUSxNQUNqQjBCLEVBQTJCLFVBQzNCa0wsRUFBWSxXQUNaQyxFQUFTLEVBQVEsTUFDakJDLEVBQWtCLEVBQVEsTUFDMUJDLEVBQVUsRUFBUSxNQUVsQkMsRUFBbUJoTixFQUFPZ04sa0JBQW9CaE4sRUFBT2lOLHVCQUNyRHRqRCxFQUFXcTJDLEVBQU9yMkMsU0FDbEJ5OEMsRUFBVXBHLEVBQU9vRyxRQUNqQnBhLEVBQVVnVSxFQUFPaFUsUUFFakJraEIsRUFBMkJ4TCxFQUF5QjFCLEVBQVEsa0JBQzVEbU4sRUFBaUJELEdBQTRCQSxFQUF5QjM5QixNQUtyRTQ5QixJQUNIWixFQUFRLFdBQ04sSUFBSTNvQyxFQUFRcTVCLEVBRVosSUFESThQLElBQVlucEMsRUFBU3dpQyxFQUFReHpCLFNBQVNoUCxFQUFPZ1csT0FDMUM0eUIsR0FBTSxDQUNYdlAsRUFBS3VQLEVBQUt2UCxHQUNWdVAsRUFBT0EsRUFBSzV4QixLQUNaLElBQ0VxaUIsSUFDQSxNQUFPbDZCLEdBR1AsTUFGSXlwQyxFQUFNQyxJQUNMeE4sT0FBT3hnQyxFQUNOc0UsR0FFUms4QixPQUFPeGdDLEVBQ0xtRixHQUFRQSxFQUFPK1YsU0FLaEJrekIsR0FBV0UsR0FBWUQsSUFBbUJFLElBQW9CcmpELEVBUXhEcWlDLEdBQVdBLEVBQVFDLFNBRTVCMGdCLEVBQVUzZ0IsRUFBUUMsYUFBUXh0QixHQUMxQjYzQixFQUFPcVcsRUFBUXJXLEtBQ2ZtVyxFQUFTLFdBQ1BuVyxFQUFLbmYsS0FBS3cxQixFQUFTSixLQUlyQkUsRUFEU00sRUFDQSxXQUNQM0csRUFBUWdILFNBQVNiLElBU1YsV0FFUEssRUFBVXoxQixLQUFLNm9CLEVBQVF1TSxLQTVCekJHLEdBQVMsRUFDVDUxQixFQUFPbnRCLEVBQVMwakQsZUFBZSxJQUMvQixJQUFJTCxFQUFpQlQsR0FBT2UsUUFBUXgyQixFQUFNLENBQUV5MkIsZUFBZSxJQUMzRGQsRUFBUyxXQUNQMzFCLEVBQUsrQyxLQUFPNnlCLEdBQVVBLEtBNkI1QnhULEVBQU9DLFFBQVVnVSxHQUFrQixTQUFVbFEsR0FDM0MsSUFBSXVRLEVBQU8sQ0FBRXZRLEdBQUlBLEVBQUlyaUIsVUFBTW5jLEdBQ3ZCd2dDLElBQU1BLEVBQUtya0IsS0FBTzR5QixHQUNqQmhCLElBQ0hBLEVBQU9nQixFQUNQZixLQUNBeE4sRUFBT3VPLEksZUM5RVgsSUFBSXhOLEVBQVMsRUFBUSxNQUVyQjlHLEVBQU9DLFFBQVU2RyxFQUFPaFUsUyxjQ0Z4QixJQUFJK2dCLEVBQVUsRUFBUSxNQUNsQnhRLEVBQWEsRUFBUSxNQUNyQkQsRUFBUSxFQUFRLE1BRXBCcEQsRUFBT0MsVUFBWXIxQixPQUFPMnBDLHdCQUEwQm5SLEdBQU0sV0FFeEQsT0FBUTdYLE9BQU8waUIsT0FHWjRGLEVBQXlCLEtBQWZ4USxFQUFvQkEsRUFBYSxJQUFNQSxFQUFhLFEsZUNUbkUsSUFBSXlELEVBQVMsRUFBUSxNQUNqQitKLEVBQWdCLEVBQVEsTUFFeEJlLEVBQVU5SyxFQUFPOEssUUFFckI1UixFQUFPQyxRQUE2QixtQkFBWjJSLEdBQTBCLGNBQWMzeUIsS0FBSzR4QixFQUFjZSxLLDRCQ0puRixJQUFJckMsRUFBWSxFQUFRLE1BRXBCaUYsRUFBb0IsU0FBVS9TLEdBQ2hDLElBQUkxTyxFQUFTQyxFQUNidi9CLEtBQUtnZ0QsUUFBVSxJQUFJaFMsR0FBRSxTQUFVZ1QsRUFBV0MsR0FDeEMsUUFBZ0JudkMsSUFBWnd0QixRQUFvQ3h0QixJQUFYeXRCLEVBQXNCLE1BQU1wRixVQUFVLDJCQUNuRW1GLEVBQVUwaEIsRUFDVnpoQixFQUFTMGhCLEtBRVhqaEQsS0FBS3MvQixRQUFVd2MsRUFBVXhjLEdBQ3pCdC9CLEtBQUt1L0IsT0FBU3VjLEVBQVV2YyxJQUkxQmdOLEVBQU9DLFFBQVFuMkIsRUFBSSxTQUFVMjNCLEdBQzNCLE9BQU8sSUFBSStTLEVBQWtCL1MsSyxlQ2hCL0IsSUFBSStRLEVBQVcsRUFBUSxNQUV2QnhTLEVBQU9DLFFBQVUsU0FBVUMsR0FDekIsR0FBSXNTLEVBQVN0UyxHQUNYLE1BQU10UyxVQUFVLGlEQUNoQixPQUFPc1MsSSxlQ0xYLElBQUk0RyxFQUFTLEVBQVEsTUFDakJqMkMsRUFBTyxhQUNQOGpELEVBQWMsRUFBUSxNQUV0QkMsRUFBYzlOLEVBQU9wUixXQUNyQjJVLEVBQVMsRUFBSXVLLEVBQVlELEVBQWMsUUFBVSxJQUlyRDNVLEVBQU9DLFFBQVVvSyxFQUFTLFNBQW9CcnhCLEdBQzVDLElBQUk2N0IsRUFBZ0Joa0QsRUFBSzZ0QixPQUFPMUYsSUFDNUI5bEIsRUFBUzBoRCxFQUFZQyxHQUN6QixPQUFrQixJQUFYM2hELEdBQTJDLEtBQTNCMmhELEVBQWNwVSxPQUFPLElBQWEsRUFBSXZ0QyxHQUMzRDBoRCxHLGVDYkosSUFBSTlOLEVBQVMsRUFBUSxNQUNqQmoyQyxFQUFPLGFBQ1A4akQsRUFBYyxFQUFRLE1BRXRCRyxFQUFZaE8sRUFBT3J4QixTQUNuQlMsRUFBTSxjQUNObTBCLEVBQTJDLElBQWxDeUssRUFBVUgsRUFBYyxPQUFtRCxLQUFwQ0csRUFBVUgsRUFBYyxRQUk1RTNVLEVBQU9DLFFBQVVvSyxFQUFTLFNBQWtCcnhCLEVBQVErN0IsR0FDbEQsSUFBSXJVLEVBQUk3dkMsRUFBSzZ0QixPQUFPMUYsSUFDcEIsT0FBTzg3QixFQUFVcFUsRUFBSXFVLElBQVUsSUFBTzcrQixFQUFJK0ksS0FBS3loQixHQUFLLEdBQUssTUFDdkRvVSxHLGFDYkosSUFtRElFLEVBbkRBblIsRUFBVyxFQUFRLE1BQ25Cb1IsRUFBbUIsRUFBUSxNQUMzQkMsRUFBYyxFQUFRLEtBQ3RCcEUsRUFBYSxFQUFRLE1BQ3JCN2xCLEVBQU8sRUFBUSxLQUNma3FCLEVBQXdCLEVBQVEsS0FPaENDLEVBTlksRUFBUSxLQU1UekQsQ0FBVSxZQUVyQjBELEVBQW1CLGFBRW5CQyxFQUFZLFNBQVU3ZSxHQUN4QixNQUFPOGUsV0FBbUI5ZSxFQUFuQjhlLGNBbUNMQyxFQUFrQixXQUNwQixJQUVFUixFQUFrQnZrRCxTQUFTaXBCLFFBQVUsSUFBSSs3QixjQUFjLFlBQ3ZELE1BQU81ckMsSUExQm9CLElBSXpCNnJDLEVBRkFDLEVBeUJKSCxFQUFrQlIsRUFwQ1ksU0FBVUEsR0FDeENBLEVBQWdCWSxNQUFNTixFQUFVLEtBQ2hDTixFQUFnQmEsUUFDaEIsSUFBSUMsRUFBT2QsRUFBZ0JlLGFBQWFuckMsT0FFeEMsT0FEQW9xQyxFQUFrQixLQUNYYyxFQStCNkJFLENBQTBCaEIsS0F6QjFEVyxFQUFTUixFQUFzQixXQUc1Qmx5QixNQUFNNGMsUUFBVSxPQUN2QjVVLEVBQUsxSixZQUFZbzBCLEdBRWpCQSxFQUFPTSxJQUFNdjNCLE9BTEosZ0JBTVRnM0IsRUFBaUJDLEVBQU9PLGNBQWN6bEQsVUFDdkIwbEQsT0FDZlQsRUFBZUUsTUFBTU4sRUFBVSxzQkFDL0JJLEVBQWVHLFFBQ1JILEVBQWU3TSxHQWdCdEIsSUFEQSxJQUFJLzFDLEVBQVNvaUQsRUFBWXBpRCxPQUNsQkEsWUFBaUIwaUQsRUFBeUIsVUFBRU4sRUFBWXBpRCxJQUMvRCxPQUFPMGlELEtBR1QxRSxFQUFXc0UsSUFBWSxFQUl2QnBWLEVBQU9DLFFBQVVyMUIsT0FBT0MsUUFBVSxTQUFnQjIyQixFQUFHNFUsR0FDbkQsSUFBSWxqRCxFQVFKLE9BUFUsT0FBTnN1QyxHQUNGNlQsRUFBMEIsVUFBSXhSLEVBQVNyQyxHQUN2Q3R1QyxFQUFTLElBQUltaUQsRUFDYkEsRUFBMEIsVUFBSSxLQUU5Qm5pRCxFQUFPa2lELEdBQVk1VCxHQUNkdHVDLEVBQVNzaUQsU0FDTWp3QyxJQUFmNndDLEVBQTJCbGpELEVBQVMraEQsRUFBaUIvaEQsRUFBUWtqRCxLLGVDNUV0RSxJQUFJaFIsRUFBYyxFQUFRLE1BQ3RCL0UsRUFBdUIsRUFBUSxNQUMvQndELEVBQVcsRUFBUSxNQUNuQndTLEVBQWEsRUFBUSxNQUl6QnJXLEVBQU9DLFFBQVVtRixFQUFjeDZCLE9BQU9xcUMsaUJBQW1CLFNBQTBCelQsRUFBRzRVLEdBQ3BGdlMsRUFBU3JDLEdBS1QsSUFKQSxJQUdJN2hDLEVBSEEyM0IsRUFBTytlLEVBQVdELEdBQ2xCdGpELEVBQVN3a0MsRUFBS3hrQyxPQUNkOGxCLEVBQVEsRUFFTDlsQixFQUFTOGxCLEdBQU95bkIsRUFBcUJ2MkIsRUFBRTAzQixFQUFHN2hDLEVBQU0yM0IsRUFBSzFlLEtBQVV3OUIsRUFBV3oyQyxJQUNqRixPQUFPNmhDLEksZUNkVCxJQUFJNEQsRUFBYyxFQUFRLE1BQ3RCa1IsRUFBaUIsRUFBUSxNQUN6QnpTLEVBQVcsRUFBUSxNQUNuQjJGLEVBQWMsRUFBUSxNQUV0QitNLEVBQXVCM3JDLE9BQU9rNkIsZUFJbEM3RSxFQUFRbjJCLEVBQUlzN0IsRUFBY21SLEVBQXVCLFNBQXdCL1UsRUFBR2dWLEVBQUdDLEdBSTdFLEdBSEE1UyxFQUFTckMsR0FDVGdWLEVBQUloTixFQUFZZ04sR0FBRyxHQUNuQjNTLEVBQVM0UyxHQUNMSCxFQUFnQixJQUNsQixPQUFPQyxFQUFxQi9VLEVBQUdnVixFQUFHQyxHQUNsQyxNQUFPNXNDLElBQ1QsR0FBSSxRQUFTNHNDLEdBQWMsUUFBU0EsRUFBWSxNQUFNN29CLFVBQVUsMkJBRWhFLE1BREksVUFBVzZvQixJQUFZalYsRUFBRWdWLEdBQUtDLEVBQVdwZ0MsT0FDdENtckIsSSxlQ2xCVCxJQUFJNEQsRUFBYyxFQUFRLE1BQ3RCc1IsRUFBNkIsRUFBUSxNQUNyQzFOLEVBQTJCLEVBQVEsTUFDbkNqSCxFQUFrQixFQUFRLE1BQzFCeUgsRUFBYyxFQUFRLE1BQ3RCcm9CLEVBQU0sRUFBUSxNQUNkbTFCLEVBQWlCLEVBQVEsTUFFekJLLEVBQWlDL3JDLE9BQU80OUIseUJBSTVDdkksRUFBUW4yQixFQUFJczdCLEVBQWN1UixFQUFpQyxTQUFrQ25WLEVBQUdnVixHQUc5RixHQUZBaFYsRUFBSU8sRUFBZ0JQLEdBQ3BCZ1YsRUFBSWhOLEVBQVlnTixHQUFHLEdBQ2ZGLEVBQWdCLElBQ2xCLE9BQU9LLEVBQStCblYsRUFBR2dWLEdBQ3pDLE1BQU8zc0MsSUFDVCxHQUFJc1gsRUFBSXFnQixFQUFHZ1YsR0FBSSxPQUFPeE4sR0FBMEIwTixFQUEyQjVzQyxFQUFFbVUsS0FBS3VqQixFQUFHZ1YsR0FBSWhWLEVBQUVnVixNLGVDbEI3RixJQUFJelUsRUFBa0IsRUFBUSxNQUMxQjZVLEVBQTRCLFVBRTVCdGdDLEVBQVcsR0FBR0EsU0FFZHVnQyxFQUErQixpQkFBVnp2QixRQUFzQkEsUUFBVXhjLE9BQU9rc0Msb0JBQzVEbHNDLE9BQU9rc0Msb0JBQW9CMXZCLFFBQVUsR0FXekM0WSxFQUFPQyxRQUFRbjJCLEVBQUksU0FBNkJvMkIsR0FDOUMsT0FBTzJXLEdBQW9DLG1CQUFyQnZnQyxFQUFTMkgsS0FBS2lpQixHQVZqQixTQUFVQSxHQUM3QixJQUNFLE9BQU8wVyxFQUEwQjFXLEdBQ2pDLE1BQU9yMkIsR0FDUCxPQUFPZ3RDLEVBQVloK0IsU0FPakJrK0IsQ0FBZTdXLEdBQ2YwVyxFQUEwQjdVLEVBQWdCN0IsTSxlQ3BCaEQsSUFBSThXLEVBQXFCLEVBQVEsTUFHN0JsRyxFQUZjLEVBQVEsS0FFRzk5QyxPQUFPLFNBQVUsYUFJOUNpdEMsRUFBUW4yQixFQUFJYyxPQUFPa3NDLHFCQUF1QixTQUE2QnRWLEdBQ3JFLE9BQU93VixFQUFtQnhWLEVBQUdzUCxLLGFDUi9CN1EsRUFBUW4yQixFQUFJYyxPQUFPMnBDLHVCLGVDQW5CLElBQUlwekIsRUFBTSxFQUFRLE1BQ2Q4ZixFQUFXLEVBQVEsTUFDbkIwUSxFQUFZLEVBQVEsTUFDcEJzRixFQUEyQixFQUFRLE1BRW5DN0IsRUFBV3pELEVBQVUsWUFDckJ1RixFQUFrQnRzQyxPQUFPM0ssVUFJN0IrL0IsRUFBT0MsUUFBVWdYLEVBQTJCcnNDLE9BQU9rK0IsZUFBaUIsU0FBVXRILEdBRTVFLE9BREFBLEVBQUlQLEVBQVNPLEdBQ1RyZ0IsRUFBSXFnQixFQUFHNFQsR0FBa0I1VCxFQUFFNFQsR0FDSCxtQkFBakI1VCxFQUFFdGhDLGFBQTZCc2hDLGFBQWFBLEVBQUV0aEMsWUFDaERzaEMsRUFBRXRoQyxZQUFZRCxVQUNkdWhDLGFBQWE1MkIsT0FBU3NzQyxFQUFrQixPLGVDZm5ELElBQUkvMUIsRUFBTSxFQUFRLE1BQ2Q0Z0IsRUFBa0IsRUFBUSxNQUMxQm5tQixFQUFVLGdCQUNWazFCLEVBQWEsRUFBUSxNQUV6QjlRLEVBQU9DLFFBQVUsU0FBVTUvQixFQUFROGpCLEdBQ2pDLElBR0l4a0IsRUFIQTZoQyxFQUFJTyxFQUFnQjFoQyxHQUNwQmhNLEVBQUksRUFDSm5CLEVBQVMsR0FFYixJQUFLeU0sS0FBTzZoQyxHQUFJcmdCLEVBQUkydkIsRUFBWW54QyxJQUFRd2hCLEVBQUlxZ0IsRUFBRzdoQyxJQUFRek0sRUFBT1IsS0FBS2lOLEdBRW5FLEtBQU93a0IsRUFBTXJ4QixPQUFTdUIsR0FBTzhzQixFQUFJcWdCLEVBQUc3aEMsRUFBTXdrQixFQUFNOXZCLFNBQzdDdW5CLEVBQVExb0IsRUFBUXlNLElBQVF6TSxFQUFPUixLQUFLaU4sSUFFdkMsT0FBT3pNLEksZUNmVCxJQUFJOGpELEVBQXFCLEVBQVEsTUFDN0I5QixFQUFjLEVBQVEsS0FJMUJsVixFQUFPQyxRQUFVcjFCLE9BQU8wc0IsTUFBUSxTQUFja0ssR0FDNUMsT0FBT3dWLEVBQW1CeFYsRUFBRzBULEssMEJDTC9CLElBQUlpQyxFQUE2QixHQUFHNUcscUJBQ2hDL0gsRUFBMkI1OUIsT0FBTzQ5Qix5QkFHbEM0TyxFQUFjNU8sSUFBNkIyTyxFQUEyQmw1QixLQUFLLENBQUVvNUIsRUFBRyxHQUFLLEdBSXpGcFgsRUFBUW4yQixFQUFJc3RDLEVBQWMsU0FBOEJFLEdBQ3RELElBQUkzSixFQUFhbkYsRUFBeUIvMEMsS0FBTTZqRCxHQUNoRCxRQUFTM0osR0FBY0EsRUFBV3JFLFlBQ2hDNk4sRyxlQ1hKLElBQUl0VCxFQUFXLEVBQVEsTUFDbkIwVCxFQUFxQixFQUFRLE1BS2pDdlgsRUFBT0MsUUFBVXIxQixPQUFPKytCLGlCQUFtQixhQUFlLEdBQUssV0FDN0QsSUFFSTZOLEVBRkFDLEdBQWlCLEVBQ2pCeDRCLEVBQU8sR0FFWCxLQUNFdTRCLEVBQVM1c0MsT0FBTzQ5Qix5QkFBeUI1OUIsT0FBTzNLLFVBQVcsYUFBYW1oQixLQUNqRW5ELEtBQUtnQixFQUFNLElBQ2xCdzRCLEVBQWlCeDRCLGFBQWdCdG9CLE1BQ2pDLE1BQU9rVCxJQUNULE9BQU8sU0FBd0IyM0IsRUFBR3NKLEdBS2hDLE9BSkFqSCxFQUFTckMsR0FDVCtWLEVBQW1Cek0sR0FDZjJNLEVBQWdCRCxFQUFPdjVCLEtBQUt1akIsRUFBR3NKLEdBQzlCdEosRUFBRWtXLFVBQVk1TSxFQUNadEosR0Fkb0QsUUFnQnpEajhCLEksMkJDdEJOLElBQUlnL0IsRUFBd0IsRUFBUSxNQUNoQzBJLEVBQVUsRUFBUSxLQUl0QmpOLEVBQU9DLFFBQVVzRSxFQUF3QixHQUFHanVCLFNBQVcsV0FDckQsTUFBTyxXQUFhMjJCLEVBQVF4NUMsTUFBUSxNLGVDUHRDLElBQUkwNUMsRUFBYSxFQUFRLE1BQ3JCd0ssRUFBNEIsRUFBUSxNQUNwQ0MsRUFBOEIsRUFBUSxNQUN0Qy9ULEVBQVcsRUFBUSxNQUd2QjdELEVBQU9DLFFBQVVrTixFQUFXLFVBQVcsWUFBYyxTQUFpQmpOLEdBQ3BFLElBQUk1SSxFQUFPcWdCLEVBQTBCN3RDLEVBQUUrNUIsRUFBUzNELElBQzVDcVUsRUFBd0JxRCxFQUE0Qjl0QyxFQUN4RCxPQUFPeXFDLEVBQXdCamQsRUFBS3RrQyxPQUFPdWhELEVBQXNCclUsSUFBTzVJLEksY0NUMUUsSUFBSXdQLEVBQVMsRUFBUSxNQUVyQjlHLEVBQU9DLFFBQVU2RyxHLFNDRmpCOUcsRUFBT0MsUUFBVSxTQUFVenFCLEdBQ3pCLElBQ0UsTUFBTyxDQUFFM0wsT0FBTyxFQUFPd00sTUFBT2IsS0FDOUIsTUFBTzNMLEdBQ1AsTUFBTyxDQUFFQSxPQUFPLEVBQU13TSxNQUFPeE0sTSxlQ0pqQyxJQUFJZzZCLEVBQVcsRUFBUSxNQUNuQjFELEVBQVcsRUFBUSxLQUNuQjBYLEVBQXVCLEVBQVEsTUFFbkM3WCxFQUFPQyxRQUFVLFNBQVV3QixFQUFHeHZDLEdBRTVCLEdBREE0eEMsRUFBU3BDLEdBQ0x0QixFQUFTbHVDLElBQU1BLEVBQUVpTyxjQUFnQnVoQyxFQUFHLE9BQU94dkMsRUFDL0MsSUFBSTZsRCxFQUFvQkQsRUFBcUIvdEMsRUFBRTIzQixHQUcvQyxPQURBMU8sRUFEYytrQixFQUFrQi9rQixTQUN4QjlnQyxHQUNENmxELEVBQWtCckUsVSxlQ1YzQixJQUFJek0sRUFBVyxFQUFRLE1BRXZCaEgsRUFBT0MsUUFBVSxTQUFVOWxCLEVBQVE4N0IsRUFBS3B2QixHQUN0QyxJQUFLLElBQUlsbkIsS0FBT3MyQyxFQUFLalAsRUFBUzdzQixFQUFReGEsRUFBS3MyQyxFQUFJdDJDLEdBQU1rbkIsR0FDckQsT0FBTzFNLEksZUNKVCxJQUFJMnNCLEVBQVMsRUFBUSxNQUNqQjhDLEVBQThCLEVBQVEsTUFDdEN6b0IsRUFBTSxFQUFRLE1BQ2Rvc0IsRUFBWSxFQUFRLE1BQ3BCc0QsRUFBZ0IsRUFBUSxNQUN4QnZMLEVBQXNCLEVBQVEsTUFFOUJXLEVBQW1CWCxFQUFvQmprQixJQUN2QzAyQixFQUF1QnpTLEVBQW9CNk0sUUFDM0M2RixFQUFXdDVCLE9BQU9BLFFBQVFrRixNQUFNLFdBRW5Db2MsRUFBT0MsUUFBVSxTQUFVdUIsRUFBRzdoQyxFQUFLMFcsRUFBT3dRLEdBQ3pDLElBR0l3SCxFQUhBNHBCLElBQVNweEIsS0FBWUEsRUFBUW94QixPQUM3QkMsSUFBU3J4QixLQUFZQSxFQUFReWlCLFdBQzdCMEUsSUFBY25uQixLQUFZQSxFQUFRbW5CLFlBRWxCLG1CQUFUMzNCLElBQ1MsaUJBQVAxVyxHQUFvQndoQixFQUFJOUssRUFBTyxTQUN4Q3V6QixFQUE0QnZ6QixFQUFPLE9BQVExVyxJQUU3QzB1QixFQUFRMHBCLEVBQXFCMWhDLElBQ2xCa0MsU0FDVDhWLEVBQU05VixPQUFTeS9CLEVBQVM1dUMsS0FBbUIsaUJBQVB6SixFQUFrQkEsRUFBTSxNQUc1RDZoQyxJQUFNc0YsR0FJRW1SLEdBRUFqSyxHQUFleE0sRUFBRTdoQyxLQUMzQnU0QyxHQUFTLFVBRkYxVyxFQUFFN2hDLEdBSVB1NEMsRUFBUTFXLEVBQUU3aEMsR0FBTzBXLEVBQ2hCdXpCLEVBQTRCcEksRUFBRzdoQyxFQUFLMFcsSUFUbkM2aEMsRUFBUTFXLEVBQUU3aEMsR0FBTzBXLEVBQ2hCazNCLEVBQVU1dEMsRUFBSzBXLEtBVXJCa2tCLFNBQVN0NkIsVUFBVyxZQUFZLFdBQ2pDLE1BQXNCLG1CQUFSeE0sTUFBc0J3eUMsRUFBaUJ4eUMsTUFBTThrQixRQUFVczRCLEVBQWNwOUMsVSxlQ3RDckYsSUFBSXc1QyxFQUFVLEVBQVEsTUFDbEJpQixFQUFhLEVBQVEsTUFJekJsTyxFQUFPQyxRQUFVLFNBQVVrWSxFQUFHelgsR0FDNUIsSUFBSWxyQixFQUFPMmlDLEVBQUUzaUMsS0FDYixHQUFvQixtQkFBVEEsRUFBcUIsQ0FDOUIsSUFBSXRpQixFQUFTc2lCLEVBQUt5SSxLQUFLazZCLEVBQUd6WCxHQUMxQixHQUFzQixpQkFBWHh0QyxFQUNULE1BQU0wNkIsVUFBVSxzRUFFbEIsT0FBTzE2QixFQUdULEdBQW1CLFdBQWYrNUMsRUFBUWtMLEdBQ1YsTUFBTXZxQixVQUFVLCtDQUdsQixPQUFPc2dCLEVBQVdqd0IsS0FBS2s2QixFQUFHelgsSyw0QkNsQjVCLElBWU0wWCxFQUNBQyxFQWJGQyxFQUFjLEVBQVEsTUFDdEJDLEVBQWdCLEVBQVEsTUFFeEJDLEVBQWFsdEMsT0FBT3JMLFVBQVV1VixLQUk5QmlqQyxFQUFnQi81QixPQUFPemUsVUFBVXJQLFFBRWpDOG5ELEVBQWNGLEVBRWRHLEdBQ0VQLEVBQU0sSUFDTkMsRUFBTSxNQUNWRyxFQUFXdjZCLEtBQUttNkIsRUFBSyxLQUNyQkksRUFBV3Y2QixLQUFLbzZCLEVBQUssS0FDSSxJQUFsQkQsRUFBSXovQixXQUFxQyxJQUFsQjAvQixFQUFJMS9CLFdBR2hDaWdDLEVBQWdCTCxFQUFjSyxlQUFpQkwsRUFBY00sYUFJN0RDLE9BQXVDdnpDLElBQXZCLE9BQU9pUSxLQUFLLElBQUksSUFFeEJtakMsR0FBNEJHLEdBQWlCRixLQUd2REYsRUFBYyxTQUFjM0osR0FDMUIsSUFDSXAyQixFQUFXb2dDLEVBQVE1OUIsRUFBTzltQixFQUQxQjJtQixFQUFLdm5CLEtBRUx1bEQsRUFBU0osR0FBaUI1OUIsRUFBR2crQixPQUM3Qm5LLEVBQVF5SixFQUFZcjZCLEtBQUtqRCxHQUN6QnpDLEVBQVN5QyxFQUFHekMsT0FDWjBnQyxFQUFhLEVBQ2JDLEVBQVVuSyxFQStDZCxPQTdDSWlLLEtBRTBCLEtBRDVCbkssRUFBUUEsRUFBTWorQyxRQUFRLElBQUssS0FDakJnckIsUUFBUSxPQUNoQml6QixHQUFTLEtBR1hxSyxFQUFVeDZCLE9BQU9xd0IsR0FBS2wyQixNQUFNbUMsRUFBR3JDLFdBRTNCcUMsRUFBR3JDLFVBQVksS0FBT3FDLEVBQUdtK0IsV0FBYW4rQixFQUFHbStCLFdBQXVDLE9BQTFCcEssRUFBSS96QixFQUFHckMsVUFBWSxNQUMzRUosRUFBUyxPQUFTQSxFQUFTLElBQzNCMmdDLEVBQVUsSUFBTUEsRUFDaEJELEtBSUZGLEVBQVMsSUFBSXp0QyxPQUFPLE9BQVNpTixFQUFTLElBQUtzMkIsSUFHekNpSyxJQUNGQyxFQUFTLElBQUl6dEMsT0FBTyxJQUFNaU4sRUFBUyxXQUFZczJCLElBRTdDOEosSUFBMEJoZ0MsRUFBWXFDLEVBQUdyQyxXQUU3Q3dDLEVBQVFxOUIsRUFBV3Y2QixLQUFLKzZCLEVBQVNELEVBQVMvOUIsRUFBSWsrQixHQUUxQ0YsRUFDRTc5QixHQUNGQSxFQUFNVCxNQUFRUyxFQUFNVCxNQUFNN0IsTUFBTW9nQyxHQUNoQzk5QixFQUFNLEdBQUtBLEVBQU0sR0FBR3RDLE1BQU1vZ0MsR0FDMUI5OUIsRUFBTXZDLE1BQVFvQyxFQUFHckMsVUFDakJxQyxFQUFHckMsV0FBYXdDLEVBQU0sR0FBR3JvQixRQUNwQmtvQixFQUFHckMsVUFBWSxFQUNiZ2dDLEdBQTRCeDlCLElBQ3JDSCxFQUFHckMsVUFBWXFDLEVBQUc4ckIsT0FBUzNyQixFQUFNdkMsTUFBUXVDLEVBQU0sR0FBR3JvQixPQUFTNmxCLEdBRXpEbWdDLEdBQWlCMzlCLEdBQVNBLEVBQU1yb0IsT0FBUyxHQUczQzJsRCxFQUFjeDZCLEtBQUs5QyxFQUFNLEdBQUk0OUIsR0FBUSxXQUNuQyxJQUFLMWtELEVBQUksRUFBR0EsRUFBSWlSLFVBQVV4UyxPQUFTLEVBQUd1QixTQUNma1IsSUFBakJELFVBQVVqUixLQUFrQjhtQixFQUFNOW1CLFFBQUtrUixNQUsxQzRWLElBSVg2a0IsRUFBT0MsUUFBVXlZLEcsNEJDdEZqQixJQUFJN1UsRUFBVyxFQUFRLE1BSXZCN0QsRUFBT0MsUUFBVSxXQUNmLElBQUlyVSxFQUFPaVksRUFBU3B3QyxNQUNoQlAsRUFBUyxHQU9iLE9BTkkwNEIsRUFBS2tiLFNBQVE1ekMsR0FBVSxLQUN2QjA0QixFQUFLd3RCLGFBQVlsbUQsR0FBVSxLQUMzQjA0QixFQUFLdXRCLFlBQVdqbUQsR0FBVSxLQUMxQjA0QixFQUFLeXRCLFNBQVFubUQsR0FBVSxLQUN2QjA0QixFQUFLK1UsVUFBU3p0QyxHQUFVLEtBQ3hCMDRCLEVBQUtvdEIsU0FBUTlsRCxHQUFVLEtBQ3BCQSxJLDRCQ1pULElBQUlrd0MsRUFBUSxFQUFRLE1BSXBCLFNBQVNrVyxFQUFHNzVDLEVBQUdxSyxHQUNiLE9BQU93QixPQUFPN0wsRUFBR3FLLEdBR25CbTJCLEVBQVEyWSxjQUFnQnhWLEdBQU0sV0FFNUIsSUFBSXBvQixFQUFLcytCLEVBQUcsSUFBSyxLQUVqQixPQURBdCtCLEVBQUdyQyxVQUFZLEVBQ1csTUFBbkJxQyxFQUFHeEYsS0FBSyxXQUdqQnlxQixFQUFRNFksYUFBZXpWLEdBQU0sV0FFM0IsSUFBSXBvQixFQUFLcytCLEVBQUcsS0FBTSxNQUVsQixPQURBdCtCLEVBQUdyQyxVQUFZLEVBQ1UsTUFBbEJxQyxFQUFHeEYsS0FBSyxXLFNDbkJqQndxQixFQUFPQyxRQUFVLFNBQVVDLEdBQ3pCLEdBQVUzNkIsTUFBTjI2QixFQUFpQixNQUFNdFMsVUFBVSx3QkFBMEJzUyxHQUMvRCxPQUFPQSxJLGVDSlQsSUFBSTRHLEVBQVMsRUFBUSxNQUNqQjhDLEVBQThCLEVBQVEsTUFFMUM1SixFQUFPQyxRQUFVLFNBQVV0Z0MsRUFBSzBXLEdBQzlCLElBQ0V1ekIsRUFBNEI5QyxFQUFRbm5DLEVBQUswVyxHQUN6QyxNQUFPeE0sR0FDUGk5QixFQUFPbm5DLEdBQU8wVyxFQUNkLE9BQU9BLEksNEJDUFgsSUFBSTgyQixFQUFhLEVBQVEsTUFDckI5TSxFQUF1QixFQUFRLE1BQy9CRCxFQUFrQixFQUFRLE1BQzFCZ0YsRUFBYyxFQUFRLE1BRXRCOUIsRUFBVWxELEVBQWdCLFdBRTlCSixFQUFPQyxRQUFVLFNBQVUyRixHQUN6QixJQUFJaEYsRUFBY3VNLEVBQVd2SCxHQUN6QmQsRUFBaUJ6RSxFQUFxQnYyQixFQUV0Q3M3QixHQUFleEUsSUFBZ0JBLEVBQVkwQyxJQUM3Q3dCLEVBQWVsRSxFQUFhMEMsRUFBUyxDQUNuQzlDLGNBQWMsRUFDZG5mLElBQUssV0FBYyxPQUFPNXRCLFUsZUNmaEMsSUFBSXF4QyxFQUFpQixVQUNqQjNqQixFQUFNLEVBQVEsTUFHZHNqQixFQUZrQixFQUFRLEtBRVZyRSxDQUFnQixlQUVwQ0osRUFBT0MsUUFBVSxTQUFVQyxFQUFJcVosRUFBS3pMLEdBQzlCNU4sSUFBTy9lLEVBQUkrZSxFQUFLNE4sRUFBUzVOLEVBQUtBLEVBQUdqZ0MsVUFBV3drQyxJQUM5Q0ssRUFBZTVFLEVBQUl1RSxFQUFlLENBQUVqRSxjQUFjLEVBQU1ucUIsTUFBT2tqQyxNLGVDUm5FLElBQUk3SCxFQUFTLEVBQVEsTUFDakJYLEVBQU0sRUFBUSxNQUVkelosRUFBT29hLEVBQU8sUUFFbEIxUixFQUFPQyxRQUFVLFNBQVV0Z0MsR0FDekIsT0FBTzIzQixFQUFLMzNCLEtBQVMyM0IsRUFBSzMzQixHQUFPb3hDLEVBQUlweEMsTSxlQ052QyxJQUFJbW5DLEVBQVMsRUFBUSxNQUNqQnlHLEVBQVksRUFBUSxNQUVwQmlNLEVBQVMscUJBQ1Q3SSxFQUFRN0osRUFBTzBTLElBQVdqTSxFQUFVaU0sRUFBUSxJQUVoRHhaLEVBQU9DLFFBQVUwUSxHLGVDTmpCLElBQUk5RyxFQUFVLEVBQVEsTUFDbEI4RyxFQUFRLEVBQVEsT0FFbkIzUSxFQUFPQyxRQUFVLFNBQVV0Z0MsRUFBSzBXLEdBQy9CLE9BQU9zNkIsRUFBTWh4QyxLQUFTZ3hDLEVBQU1oeEMsUUFBaUI0RixJQUFWOFEsRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJM2pCLEtBQUssQ0FDdEIwNkMsUUFBUyxRQUNUN1QsS0FBTXNRLEVBQVUsT0FBUyxTQUN6QjRQLFVBQVcsMEMsZUNSYixJQUFJNVYsRUFBVyxFQUFRLE1BQ25CMEwsRUFBWSxFQUFRLE1BR3BCak0sRUFGa0IsRUFBUSxLQUVoQmxELENBQWdCLFdBSTlCSixFQUFPQyxRQUFVLFNBQVV1QixFQUFHa1ksR0FDNUIsSUFDSWhaLEVBREFlLEVBQUlvQyxFQUFTckMsR0FBR3RoQyxZQUVwQixZQUFhcUYsSUFBTms4QixHQUFpRGw4QixPQUE3Qm03QixFQUFJbUQsRUFBU3BDLEdBQUc2QixJQUF5Qm9XLEVBQXFCbkssRUFBVTdPLEssZUNYckcsSUFBSWlaLEVBQVksRUFBUSxNQUNwQkMsRUFBeUIsRUFBUSxNQUdqQzNYLEVBQWUsU0FBVTRYLEdBQzNCLE9BQU8sU0FBVTFYLEVBQU8yWCxHQUN0QixJQUdJdDhDLEVBQU91OEMsRUFIUHJaLEVBQUloaUIsT0FBT2s3QixFQUF1QnpYLElBQ2xDeU4sRUFBVytKLEVBQVVHLEdBQ3JCajBDLEVBQU82NkIsRUFBRTV0QyxPQUViLE9BQUk4OEMsRUFBVyxHQUFLQSxHQUFZL3BDLEVBQWFnMEMsRUFBb0IsUUFBS3QwQyxHQUN0RS9ILEVBQVFrakMsRUFBRWhoQixXQUFXa3dCLElBQ04sT0FBVXB5QyxFQUFRLE9BQVVveUMsRUFBVyxJQUFNL3BDLElBQ3REazBDLEVBQVNyWixFQUFFaGhCLFdBQVdrd0IsRUFBVyxJQUFNLE9BQVVtSyxFQUFTLE1BQzFERixFQUFvQm5aLEVBQUVELE9BQU9tUCxHQUFZcHlDLEVBQ3pDcThDLEVBQW9CblosRUFBRTduQixNQUFNKzJCLEVBQVVBLEVBQVcsR0FBK0JtSyxFQUFTLE9BQWxDdjhDLEVBQVEsT0FBVSxJQUEwQixRQUk3R3dpQyxFQUFPQyxRQUFVLENBR2YrWixPQUFRL1gsR0FBYSxHQUdyQnhCLE9BQVF3QixHQUFhLEssZUN6QnZCLElBQUltQixFQUFRLEVBQVEsTUFDaEJ1UixFQUFjLEVBQVEsTUFNMUIzVSxFQUFPQyxRQUFVLFNBQVVzRCxHQUN6QixPQUFPSCxHQUFNLFdBQ1gsUUFBU3VSLEVBQVlwUixNQU5mLGFBTXFDQSxNQUF5Qm9SLEVBQVlwUixHQUFhdmhCLE9BQVN1aEIsTyxlQ1QxRyxJQUFJcVcsRUFBeUIsRUFBUSxNQUdqQ0ssRUFBYSxJQUZDLEVBQVEsTUFFVyxJQUNqQ0MsRUFBUTV1QyxPQUFPLElBQU0ydUMsRUFBYUEsRUFBYSxLQUMvQ0UsRUFBUTd1QyxPQUFPMnVDLEVBQWFBLEVBQWEsTUFHekNoWSxFQUFlLFNBQVVNLEdBQzNCLE9BQU8sU0FBVUosR0FDZixJQUFJbnBCLEVBQVMwRixPQUFPazdCLEVBQXVCelgsSUFHM0MsT0FGVyxFQUFQSSxJQUFVdnBCLEVBQVNBLEVBQU9wb0IsUUFBUXNwRCxFQUFPLEtBQ2xDLEVBQVAzWCxJQUFVdnBCLEVBQVNBLEVBQU9wb0IsUUFBUXVwRCxFQUFPLEtBQ3RDbmhDLElBSVhnbkIsRUFBT0MsUUFBVSxDQUdmbnJDLE1BQU9tdEMsRUFBYSxHQUdwQnRxQixJQUFLc3FCLEVBQWEsR0FHbEJweEMsS0FBTW94QyxFQUFhLEssY0MxQnJCLElBaUJJbVksRUFBT0MsRUFBU0MsRUFqQmhCeFQsRUFBUyxFQUFRLE1BQ2pCMUQsRUFBUSxFQUFRLE1BQ2hCbGEsRUFBTyxFQUFRLE1BQ2YrQixFQUFPLEVBQVEsS0FDZnRGLEVBQWdCLEVBQVEsS0FDeEJndUIsRUFBUyxFQUFRLE1BQ2pCRSxFQUFVLEVBQVEsTUFFbEIwRyxFQUFXelQsRUFBT3lULFNBQ2xCbjVCLEVBQU0wbEIsRUFBTzBULGFBQ2JuVSxFQUFRUyxFQUFPMlQsZUFDZnZOLEVBQVVwRyxFQUFPb0csUUFDakJ3TixFQUFpQjVULEVBQU80VCxlQUN4Qmp2QixFQUFXcWIsRUFBT3JiLFNBQ2xCa3ZCLEVBQVUsRUFDVkMsRUFBUSxHQUlSQyxFQUFNLFNBQVU5c0IsR0FFbEIsR0FBSTZzQixFQUFNNzZDLGVBQWVndUIsR0FBSyxDQUM1QixJQUFJZ1csRUFBSzZXLEVBQU03c0IsVUFDUjZzQixFQUFNN3NCLEdBQ2JnVyxNQUlBK1csRUFBUyxTQUFVL3NCLEdBQ3JCLE9BQU8sV0FDTDhzQixFQUFJOXNCLEtBSUpuSCxFQUFXLFNBQVVHLEdBQ3ZCOHpCLEVBQUk5ekIsRUFBTXBHLE9BR1JvNkIsRUFBTyxTQUFVaHRCLEdBRW5CK1ksRUFBT2tVLFlBQVlqdEIsRUFBSyxHQUFJd3NCLEVBQVNVLFNBQVcsS0FBT1YsRUFBU1csT0FJN0Q5NUIsR0FBUWlsQixJQUNYamxCLEVBQU0sU0FBc0IyaUIsR0FHMUIsSUFGQSxJQUFJbFksRUFBTyxHQUNQeDNCLEVBQUksRUFDRGlSLFVBQVV4UyxPQUFTdUIsR0FBR3czQixFQUFLbjVCLEtBQUs0UyxVQUFValIsTUFNakQsT0FMQXVtRCxJQUFRRCxHQUFXLFlBRUgsbUJBQU41VyxFQUFtQkEsRUFBS3hKLFNBQVN3SixJQUFLOStCLFdBQU1NLEVBQVdzbUIsSUFFakV1dUIsRUFBTU8sR0FDQ0EsR0FFVHRVLEVBQVEsU0FBd0J0WSxVQUN2QjZzQixFQUFNN3NCLElBR1g4bEIsRUFDRnVHLEVBQVEsU0FBVXJzQixHQUNoQm1mLEVBQVFnSCxTQUFTNEcsRUFBTy9zQixLQUdqQnRDLEdBQVlBLEVBQVNjLElBQzlCNnRCLEVBQVEsU0FBVXJzQixHQUNoQnRDLEVBQVNjLElBQUl1dUIsRUFBTy9zQixLQUliMnNCLElBQW1CL0csR0FFNUIyRyxHQURBRCxFQUFVLElBQUlLLEdBQ0NTLE1BQ2ZkLEVBQVFlLE1BQU1DLFVBQVl6MEIsRUFDMUJ3ekIsRUFBUWx4QixFQUFLb3hCLEVBQUtVLFlBQWFWLEVBQU0sSUFJckN4VCxFQUFPN2Ysa0JBQ2UsbUJBQWYrekIsY0FDTmxVLEVBQU93VSxlQUNSZixHQUFrQyxVQUF0QkEsRUFBU1UsV0FDcEI3WCxFQUFNMlgsSUFFUFgsRUFBUVcsRUFDUmpVLEVBQU83ZixpQkFBaUIsVUFBV0wsR0FBVSxJQUc3Q3d6QixFQXpFcUIsdUJBd0VVejBCLEVBQWMsVUFDckMsU0FBVW9JLEdBQ2hCOUMsRUFBSzFKLFlBQVlvRSxFQUFjLFdBQTZCLG1CQUFJLFdBQzlEc0YsRUFBS2pGLFlBQVl2eUIsTUFDakJvbkQsRUFBSTlzQixLQUtBLFNBQVVBLEdBQ2hCckIsV0FBV291QixFQUFPL3NCLEdBQUssS0FLN0JpUyxFQUFPQyxRQUFVLENBQ2Y3ZSxJQUFLQSxFQUNMaWxCLE1BQU9BLEksZUN6R1QsSUFBSXNULEVBQVksRUFBUSxNQUVwQno3QyxFQUFNbE4sS0FBS2tOLElBQ1hDLEVBQU1uTixLQUFLbU4sSUFLZjZoQyxFQUFPQyxRQUFVLFNBQVVybkIsRUFBTzlsQixHQUNoQyxJQUFJeW9ELEVBQVU1QixFQUFVL2dDLEdBQ3hCLE9BQU8yaUMsRUFBVSxFQUFJcjlDLEVBQUlxOUMsRUFBVXpvRCxFQUFRLEdBQUtxTCxFQUFJbzlDLEVBQVN6b0QsSyxlQ1QvRCxJQUFJdXZDLEVBQWdCLEVBQVEsTUFDeEJ1WCxFQUF5QixFQUFRLE1BRXJDNVosRUFBT0MsUUFBVSxTQUFVQyxHQUN6QixPQUFPbUMsRUFBY3VYLEVBQXVCMVosTSxTQ0w5QyxJQUFJenVDLEVBQU9ULEtBQUtTLEtBQ1pFLEVBQVFYLEtBQUtXLE1BSWpCcXVDLEVBQU9DLFFBQVUsU0FBVXlELEdBQ3pCLE9BQU90dEIsTUFBTXN0QixHQUFZQSxHQUFZLEdBQUtBLEVBQVcsRUFBSS94QyxFQUFRRixHQUFNaXlDLEssZUNOekUsSUFBSWlXLEVBQVksRUFBUSxNQUVwQng3QyxFQUFNbk4sS0FBS21OLElBSWY2aEMsRUFBT0MsUUFBVSxTQUFVeUQsR0FDekIsT0FBT0EsRUFBVyxFQUFJdmxDLEVBQUl3N0MsRUFBVWpXLEdBQVcsa0JBQW9CLEksZUNQckUsSUFBSWtXLEVBQXlCLEVBQVEsTUFJckM1WixFQUFPQyxRQUFVLFNBQVV5RCxHQUN6QixPQUFPOTRCLE9BQU9ndkMsRUFBdUJsVyxNLGVDTHZDLElBQUl2RCxFQUFXLEVBQVEsS0FNdkJILEVBQU9DLFFBQVUsU0FBVXZsQixFQUFPOGdDLEdBQ2hDLElBQUtyYixFQUFTemxCLEdBQVEsT0FBT0EsRUFDN0IsSUFBSXFwQixFQUFJMFgsRUFDUixHQUFJRCxHQUFvRCxtQkFBeEJ6WCxFQUFLcnBCLEVBQU1wRSxZQUE0QjZwQixFQUFTc2IsRUFBTTFYLEVBQUc5bEIsS0FBS3ZELElBQVMsT0FBTytnQyxFQUM5RyxHQUFtQyxtQkFBdkIxWCxFQUFLcnBCLEVBQU1wQixXQUEyQjZtQixFQUFTc2IsRUFBTTFYLEVBQUc5bEIsS0FBS3ZELElBQVMsT0FBTytnQyxFQUN6RixJQUFLRCxHQUFvRCxtQkFBeEJ6WCxFQUFLcnBCLEVBQU1wRSxZQUE0QjZwQixFQUFTc2IsRUFBTTFYLEVBQUc5bEIsS0FBS3ZELElBQVMsT0FBTytnQyxFQUMvRyxNQUFNN3RCLFVBQVUsNkMsZUNabEIsSUFHSTNPLEVBQU8sR0FFWEEsRUFMc0IsRUFBUSxLQUVWbWhCLENBQWdCLGdCQUdkLElBRXRCSixFQUFPQyxRQUEyQixlQUFqQnZoQixPQUFPTyxJLFNDUHhCLElBQUk4TyxFQUFLLEVBQ0wydEIsRUFBVTFxRCxLQUFLMnFELFNBRW5CM2IsRUFBT0MsUUFBVSxTQUFVdGdDLEdBQ3pCLE1BQU8sVUFBWStlLFlBQWVuWixJQUFSNUYsRUFBb0IsR0FBS0EsR0FBTyxRQUFVb3VCLEVBQUsydEIsR0FBU3BsQyxTQUFTLE0sZUNKN0YsSUFBSXNsQyxFQUFnQixFQUFRLEtBRTVCNWIsRUFBT0MsUUFBVTJiLElBRVhyd0IsT0FBTzBpQixNQUNrQixpQkFBbkIxaUIsT0FBT0MsVSxlQ0xuQixJQUFJNFUsRUFBa0IsRUFBUSxNQUU5QkgsRUFBUW4yQixFQUFJczJCLEcsZUNGWixJQUFJMEcsRUFBUyxFQUFRLE1BQ2pCNEssRUFBUyxFQUFRLE1BQ2pCdndCLEVBQU0sRUFBUSxNQUNkNHZCLEVBQU0sRUFBUSxNQUNkNkssRUFBZ0IsRUFBUSxLQUN4QkMsRUFBb0IsRUFBUSxNQUU1QkMsRUFBd0JwSyxFQUFPLE9BQy9Cbm1CLEVBQVN1YixFQUFPdmIsT0FDaEJ3d0IsRUFBd0JGLEVBQW9CdHdCLEVBQVNBLEdBQVVBLEVBQU95d0IsZUFBaUJqTCxFQUUzRi9RLEVBQU9DLFFBQVUsU0FBVWplLEdBT3ZCLE9BTkdiLEVBQUkyNkIsRUFBdUI5NUIsS0FBVzQ1QixHQUF1RCxpQkFBL0JFLEVBQXNCOTVCLE1BQ25GNDVCLEdBQWlCejZCLEVBQUlvSyxFQUFRdkosR0FDL0I4NUIsRUFBc0I5NUIsR0FBUXVKLEVBQU92SixHQUVyQzg1QixFQUFzQjk1QixHQUFRKzVCLEVBQXNCLFVBQVkvNUIsSUFFM0Q4NUIsRUFBc0I5NUIsSyxTQ2pCakNnZSxFQUFPQyxRQUFVLGlELDRCQ0FqQixJQUFJNEcsRUFBSSxFQUFRLE1BQ1p6RCxFQUFRLEVBQVEsTUFDaEIvcEIsRUFBVSxFQUFRLE1BQ2xCOG1CLEVBQVcsRUFBUSxLQUNuQmMsRUFBVyxFQUFRLE1BQ25CRyxFQUFXLEVBQVEsTUFDbkJDLEVBQWlCLEVBQVEsTUFDekJpQixFQUFxQixFQUFRLE1BQzdCMlosRUFBK0IsRUFBUSxNQUN2QzdiLEVBQWtCLEVBQVEsTUFDMUJpRCxFQUFhLEVBQVEsTUFFckI2WSxFQUF1QjliLEVBQWdCLHNCQUN2QytiLEVBQW1CLGlCQUNuQkMsRUFBaUMsaUNBS2pDQyxFQUErQmhaLEdBQWMsS0FBT0QsR0FBTSxXQUM1RCxJQUFJbnVDLEVBQVEsR0FFWixPQURBQSxFQUFNaW5ELElBQXdCLEVBQ3ZCam5ELEVBQU1qQyxTQUFTLEtBQU9pQyxLQUczQnFuRCxFQUFrQkwsRUFBNkIsVUFFL0NNLEVBQXFCLFNBQVUvYSxHQUNqQyxJQUFLckIsRUFBU3FCLEdBQUksT0FBTyxFQUN6QixJQUFJZ2IsRUFBYWhiLEVBQUUwYSxHQUNuQixZQUFzQjMyQyxJQUFmaTNDLElBQTZCQSxFQUFhbmpDLEVBQVFtb0IsSUFRM0RxRixFQUFFLENBQUUxc0IsT0FBUSxRQUFTMndCLE9BQU8sRUFBTXpDLFFBTHBCZ1UsSUFBaUNDLEdBS0ssQ0FFbER0cEQsT0FBUSxTQUFnQm84QyxHQUN0QixJQUdJLzZDLEVBQUcrQixFQUFHdEQsRUFBUTJwRCxFQUFLQyxFQUhuQmxiLEVBQUlQLEVBQVN4dEMsTUFDYndILEVBQUlxbkMsRUFBbUJkLEVBQUcsR0FDMUIxdEMsRUFBSSxFQUVSLElBQUtPLEdBQUssRUFBR3ZCLEVBQVN3UyxVQUFVeFMsT0FBUXVCLEVBQUl2QixFQUFRdUIsSUFFbEQsR0FBSWtvRCxFQURKRyxHQUFXLElBQVByb0QsRUFBV210QyxFQUFJbDhCLFVBQVVqUixJQUNGLENBRXpCLEdBQUlQLEdBREoyb0QsRUFBTXJiLEVBQVNzYixFQUFFNXBELFNBQ0hxcEQsRUFBa0IsTUFBTXZ1QixVQUFVd3VCLEdBQ2hELElBQUtobUQsRUFBSSxFQUFHQSxFQUFJcW1ELEVBQUtybUQsSUFBS3RDLElBQVNzQyxLQUFLc21ELEdBQUdyYixFQUFlcG1DLEVBQUduSCxFQUFHNG9ELEVBQUV0bUQsUUFDN0QsQ0FDTCxHQUFJdEMsR0FBS3FvRCxFQUFrQixNQUFNdnVCLFVBQVV3dUIsR0FDM0MvYSxFQUFlcG1DLEVBQUduSCxJQUFLNG9ELEdBSTNCLE9BREF6aEQsRUFBRW5JLE9BQVNnQixFQUNKbUgsTSw0QkN6RFgsSUFBSTRyQyxFQUFJLEVBQVEsTUFDWjhWLEVBQVUsZUFRZDlWLEVBQUUsQ0FBRTFzQixPQUFRLFFBQVMyd0IsT0FBTyxFQUFNekMsUUFQQyxFQUFRLEtBRWpCNFQsQ0FBNkIsV0FLVyxDQUNoRTNpRCxPQUFRLFNBQWdCMG5DLEdBQ3RCLE9BQU8yYixFQUFRbHBELEtBQU11dEMsRUFBWTE3QixVQUFVeFMsT0FBUyxFQUFJd1MsVUFBVSxRQUFLQyxPLDRCQ1gzRSxJQUFJc2hDLEVBQUksRUFBUSxNQUNacnlDLEVBQVUsRUFBUSxNQUl0QnF5QyxFQUFFLENBQUUxc0IsT0FBUSxRQUFTMndCLE9BQU8sRUFBTXpDLE9BQVEsR0FBRzd6QyxTQUFXQSxHQUFXLENBQ2pFQSxRQUFTQSxLLGVDUFgsSUFBSXF5QyxFQUFJLEVBQVEsTUFDWmp3QyxFQUFPLEVBQVEsTUFTbkJpd0MsRUFBRSxDQUFFMXNCLE9BQVEsUUFBUzR6QixNQUFNLEVBQU0xRixRQVJDLEVBQVEsS0FFZm5CLEVBQTRCLFNBQVVwQixHQUMvRG52QyxNQUFNQyxLQUFLa3ZDLE9BS21ELENBQzlEbHZDLEtBQU1BLEssNEJDVlIsSUFBSWl3QyxFQUFJLEVBQVEsTUFDWitWLEVBQVksaUJBQ1pDLEVBQW1CLEVBQVEsTUFJL0JoVyxFQUFFLENBQUUxc0IsT0FBUSxRQUFTMndCLE9BQU8sR0FBUSxDQUNsQ2xNLFNBQVUsU0FBa0IvSyxHQUMxQixPQUFPK29CLEVBQVVucEQsS0FBTW9nQyxFQUFJdnVCLFVBQVV4UyxPQUFTLEVBQUl3UyxVQUFVLFFBQUtDLE1BS3JFczNDLEVBQWlCLGEsZUNkVCxFQUFRLEtBS2hCaFcsQ0FBRSxDQUFFMXNCLE9BQVEsUUFBUzR6QixNQUFNLEdBQVEsQ0FDakMxMEIsUUFMWSxFQUFRLFMsNEJDQXRCLElBQUkwb0IsRUFBa0IsRUFBUSxNQUMxQjhhLEVBQW1CLEVBQVEsTUFDM0I1VCxFQUFZLEVBQVEsTUFDcEIzRCxFQUFzQixFQUFRLE1BQzlCSixFQUFpQixFQUFRLEtBRXpCNFgsRUFBaUIsaUJBQ2pCdlgsRUFBbUJELEVBQW9CbGtCLElBQ3ZDNmtCLEVBQW1CWCxFQUFvQkcsVUFBVXFYLEdBWXJEOWMsRUFBT0MsUUFBVWlGLEVBQWV2dUMsTUFBTyxTQUFTLFNBQVVnd0MsRUFBVUMsR0FDbEVyQixFQUFpQjl4QyxLQUFNLENBQ3JCdU0sS0FBTTg4QyxFQUNOM2lDLE9BQVE0bkIsRUFBZ0I0RSxHQUN4Qi90QixNQUFPLEVBQ1BndUIsS0FBTUEsT0FJUCxXQUNELElBQUl2WSxFQUFRNFgsRUFBaUJ4eUMsTUFDekIwbUIsRUFBU2tVLEVBQU1sVSxPQUNmeXNCLEVBQU92WSxFQUFNdVksS0FDYmh1QixFQUFReVYsRUFBTXpWLFFBQ2xCLE9BQUt1QixHQUFVdkIsR0FBU3VCLEVBQU9ybkIsUUFDN0J1N0IsRUFBTWxVLFlBQVM1VSxFQUNSLENBQUU4USxXQUFPOVEsRUFBV3U4QixNQUFNLElBRXZCLFFBQVI4RSxFQUF1QixDQUFFdndCLE1BQU91QyxFQUFPa3BCLE1BQU0sR0FDckMsVUFBUjhFLEVBQXlCLENBQUV2d0IsTUFBTzhELEVBQU92QixHQUFRa3BCLE1BQU0sR0FDcEQsQ0FBRXpyQixNQUFPLENBQUN1QyxFQUFPdUIsRUFBT3ZCLElBQVNrcEIsTUFBTSxLQUM3QyxVQUtIbUgsRUFBVThULFVBQVk5VCxFQUFVdHlDLE1BR2hDa21ELEVBQWlCLFFBQ2pCQSxFQUFpQixVQUNqQkEsRUFBaUIsWSw0QkNuRGpCLElBQUloVyxFQUFJLEVBQVEsTUFDWnhFLEVBQWdCLEVBQVEsTUFDeEJOLEVBQWtCLEVBQVEsTUFDMUJoQixFQUFzQixFQUFRLE1BRTlCaWMsRUFBYSxHQUFHNXpDLEtBRWhCNnpDLEVBQWM1YSxHQUFpQnozQixPQUMvQmsyQixFQUFnQkMsRUFBb0IsT0FBUSxLQUloRDhGLEVBQUUsQ0FBRTFzQixPQUFRLFFBQVMyd0IsT0FBTyxFQUFNekMsT0FBUTRVLElBQWdCbmMsR0FBaUIsQ0FDekUxM0IsS0FBTSxTQUFjOHpDLEdBQ2xCLE9BQU9GLEVBQVcvK0IsS0FBSzhqQixFQUFnQnR1QyxXQUFxQjhSLElBQWQyM0MsRUFBMEIsSUFBTUEsTyw0QkNkbEYsSUFBSXJXLEVBQUksRUFBUSxNQUNac1csRUFBTyxZQVFYdFcsRUFBRSxDQUFFMXNCLE9BQVEsUUFBUzJ3QixPQUFPLEVBQU16QyxRQVBDLEVBQVEsS0FFakI0VCxDQUE2QixRQUtXLENBQ2hFcmhDLElBQUssU0FBYW9tQixHQUNoQixPQUFPbWMsRUFBSzFwRCxLQUFNdXRDLEVBQVkxN0IsVUFBVXhTLE9BQVMsRUFBSXdTLFVBQVUsUUFBS0MsTyw0QkNYeEUsSUFBSXNoQyxFQUFJLEVBQVEsTUFDWjFHLEVBQVcsRUFBUSxLQUNuQjltQixFQUFVLEVBQVEsTUFDbEIyb0IsRUFBa0IsRUFBUSxNQUMxQlosRUFBVyxFQUFRLE1BQ25CVyxFQUFrQixFQUFRLE1BQzFCVixFQUFpQixFQUFRLE1BQ3pCakIsRUFBa0IsRUFBUSxNQUcxQmdkLEVBRitCLEVBQVEsS0FFakJuQixDQUE2QixTQUVuRDNZLEVBQVVsRCxFQUFnQixXQUMxQmlkLEVBQWMsR0FBR3hrQyxNQUNqQjNhLEVBQU1sTixLQUFLa04sSUFLZjJvQyxFQUFFLENBQUUxc0IsT0FBUSxRQUFTMndCLE9BQU8sRUFBTXpDLFFBQVMrVSxHQUF1QixDQUNoRXZrQyxNQUFPLFNBQWUvakIsRUFBTzZpQixHQUMzQixJQUtJaXBCLEVBQWExdEMsRUFBUVksRUFMckIwdEMsRUFBSU8sRUFBZ0J0dUMsTUFDcEJYLEVBQVNzdUMsRUFBU0ksRUFBRTF1QyxRQUNwQnNELEVBQUk0ckMsRUFBZ0JsdEMsRUFBT2hDLEdBQzNCd3FELEVBQU10YixPQUF3Qno4QixJQUFSb1MsRUFBb0I3a0IsRUFBUzZrQixFQUFLN2tCLEdBRzVELEdBQUl1bUIsRUFBUW1vQixLQUdnQixtQkFGMUJaLEVBQWNZLEVBQUV0aEMsY0FFeUIwZ0MsSUFBZ0JqcUMsUUFBUzBpQixFQUFRdW5CLEVBQVkzZ0MsV0FFM0VrZ0MsRUFBU1MsSUFFRSxRQURwQkEsRUFBY0EsRUFBWTBDLE1BQ0ExQyxPQUFjcjdCLEdBSHhDcTdCLE9BQWNyN0IsRUFLWnE3QixJQUFnQmpxQyxZQUF5QjRPLElBQWhCcTdCLEdBQzNCLE9BQU95YyxFQUFZcC9CLEtBQUt1akIsRUFBR3ByQyxFQUFHa25ELEdBSWxDLElBREFwcUQsRUFBUyxTQUFxQnFTLElBQWhCcTdCLEVBQTRCanFDLE1BQVFpcUMsR0FBYTFpQyxFQUFJby9DLEVBQU1sbkQsRUFBRyxJQUN2RXRDLEVBQUksRUFBR3NDLEVBQUlrbkQsRUFBS2xuRCxJQUFLdEMsSUFBU3NDLEtBQUtvckMsR0FBR0gsRUFBZW51QyxFQUFRWSxFQUFHMHRDLEVBQUVwckMsSUFFdkUsT0FEQWxELEVBQU9KLE9BQVNnQixFQUNUWixNLDRCQzNDWCxJQUFJMnpDLEVBQUksRUFBUSxNQUNaMEksRUFBWSxFQUFRLE1BQ3BCdE8sRUFBVyxFQUFRLE1BQ25CbUMsRUFBUSxFQUFRLE1BQ2hCckMsRUFBc0IsRUFBUSxNQUU5QjloQixFQUFPLEdBQ1BzK0IsRUFBYXQrQixFQUFLcHFCLEtBR2xCMm9ELEVBQXFCcGEsR0FBTSxXQUM3Qm5rQixFQUFLcHFCLFVBQUswUSxNQUdSazRDLEVBQWdCcmEsR0FBTSxXQUN4Qm5rQixFQUFLcHFCLEtBQUssU0FHUmlzQyxFQUFnQkMsRUFBb0IsUUFNeEM4RixFQUFFLENBQUUxc0IsT0FBUSxRQUFTMndCLE9BQU8sRUFBTXpDLE9BSnJCbVYsSUFBdUJDLElBQWtCM2MsR0FJRixDQUNsRGpzQyxLQUFNLFNBQWM2b0QsR0FDbEIsWUFBcUJuNEMsSUFBZG00QyxFQUNISCxFQUFXdC9CLEtBQUtnakIsRUFBU3h0QyxPQUN6QjhwRCxFQUFXdC9CLEtBQUtnakIsRUFBU3h0QyxNQUFPODdDLEVBQVVtTyxRLGVDN0JsRCxJQUFJMVcsRUFBVyxFQUFRLE1BRW5CMlcsRUFBZ0J6bEMsS0FBS2pZLFVBQ3JCMjlDLEVBQWUsZUFFZkMsRUFBcUJGLEVBQXVCLFNBQzVDL2pCLEVBQVUrakIsRUFBYy9qQixRQUl4QixJQUFJMWhCLEtBQUsxZSxLQUFPLElBQU1va0QsR0FDeEI1VyxFQUFTMlcsRUFQSyxZQU9xQixXQUNqQyxJQUFJdG5DLEVBQVF1akIsRUFBUTNiLEtBQUt4cUIsTUFFekIsT0FBTzRpQixHQUFVQSxFQUFRd25DLEVBQW1CNS9CLEtBQUt4cUIsTUFBUW1xRCxNLGVDZDdELElBQUl4WSxFQUFjLEVBQVEsTUFDdEJOLEVBQWlCLFVBRWpCZ1osRUFBb0J2akIsU0FBU3Q2QixVQUM3Qjg5QyxFQUE0QkQsRUFBa0J4bkMsU0FDOUMwbkMsRUFBUyx3QkFDVDVVLEVBQU8sT0FJUGhFLEtBQWlCZ0UsS0FBUTBVLElBQzNCaFosRUFBZWdaLEVBQW1CMVUsRUFBTSxDQUN0QzVJLGNBQWMsRUFDZG5mLElBQUssV0FDSCxJQUNFLE9BQU8wOEIsRUFBMEI5L0IsS0FBS3hxQixNQUFNMG5CLE1BQU02aUMsR0FBUSxHQUMxRCxNQUFPbjBDLEdBQ1AsTUFBTyxRLDRCQ2hCZixJQUFJbzBDLEVBQWEsRUFBUSxNQUNyQkMsRUFBbUIsRUFBUSxNQUkvQmxlLEVBQU9DLFFBQVVnZSxFQUFXLE9BQU8sU0FBVXh2QixHQUMzQyxPQUFPLFdBQWlCLE9BQU9BLEVBQUtoN0IsS0FBTTZSLFVBQVV4UyxPQUFTd1MsVUFBVSxRQUFLQyxNQUMzRTI0QyxJLGVDUkgsSUFBSXJYLEVBQUksRUFBUSxNQUNaNUYsRUFBVyxFQUFRLE1BQ25Ca2QsRUFBYSxFQUFRLE1BT3pCdFgsRUFBRSxDQUFFMXNCLE9BQVEsU0FBVTR6QixNQUFNLEVBQU0xRixPQU50QixFQUFRLEtBRU1qRixFQUFNLFdBQWMrYSxFQUFXLE9BSVEsQ0FDL0Q3bUIsS0FBTSxTQUFjNEksR0FDbEIsT0FBT2llLEVBQVdsZCxFQUFTZixRLGVDWC9CLElBQUlxRSxFQUF3QixFQUFRLE1BQ2hDeUMsRUFBVyxFQUFRLE1BQ25CMXdCLEVBQVcsRUFBUSxLQUlsQml1QixHQUNIeUMsRUFBU3A4QixPQUFPM0ssVUFBVyxXQUFZcVcsRUFBVSxDQUFFMmhDLFFBQVEsSyxlQ1A3RCxJQUFJcFIsRUFBSSxFQUFRLE1BQ1p1WCxFQUEyQixFQUFRLE1BSXZDdlgsRUFBRSxDQUFFQyxRQUFRLEVBQU11QixPQUFRM1MsWUFBYzBvQixHQUE0QixDQUNsRTFvQixXQUFZMG9CLEssZUNOZCxJQUFJdlgsRUFBSSxFQUFRLE1BQ1p3WCxFQUF5QixFQUFRLE1BSXJDeFgsRUFBRSxDQUFFQyxRQUFRLEVBQU11QixPQUFRNXlCLFVBQVk0b0MsR0FBMEIsQ0FDOUQ1b0MsU0FBVTRvQyxLLDRCQ0xaLElBaURJQyxFQUFVQyxFQUFzQkMsRUFBZ0JDLEVBakRoRDVYLEVBQUksRUFBUSxNQUNaZ0QsRUFBVSxFQUFRLE1BQ2xCL0MsRUFBUyxFQUFRLE1BQ2pCcUcsRUFBYSxFQUFRLE1BQ3JCdVIsRUFBZ0IsRUFBUSxNQUN4QjFYLEVBQVcsRUFBUSxNQUNuQmpDLEVBQWMsRUFBUSxNQUN0Qm9DLEVBQWlCLEVBQVEsTUFDekJoQyxFQUFhLEVBQVEsTUFDckJoRixFQUFXLEVBQVEsS0FDbkJvUCxFQUFZLEVBQVEsTUFDcEJ2SyxFQUFhLEVBQVEsTUFDckI2TCxFQUFnQixFQUFRLE1BQ3hCNUwsRUFBVSxFQUFRLEtBQ2xCaUMsRUFBOEIsRUFBUSxNQUN0Q3lYLEVBQXFCLEVBQVEsTUFDN0JySyxFQUFPLFdBQ1BzSyxFQUFZLEVBQVEsTUFDcEJDLEVBQWlCLEVBQVEsTUFDekJDLEVBQW1CLEVBQVEsS0FDM0JDLEVBQTZCLEVBQVEsTUFDckNDLEVBQVUsRUFBUSxNQUNsQjFaLEVBQXNCLEVBQVEsTUFDOUJ5QixFQUFXLEVBQVEsTUFDbkIzRyxFQUFrQixFQUFRLE1BQzFCeVQsRUFBVSxFQUFRLE1BQ2xCeFEsRUFBYSxFQUFRLE1BRXJCQyxFQUFVbEQsRUFBZ0IsV0FDMUI2ZSxFQUFVLFVBQ1ZoWixFQUFtQlgsRUFBb0Jqa0IsSUFDdkNra0IsRUFBbUJELEVBQW9CbGtCLElBQ3ZDODlCLEVBQTBCNVosRUFBb0JHLFVBQVV3WixHQUN4REUsRUFBcUJULEVBQ3JCOXdCLEVBQVlrWixFQUFPbFosVUFDbkJuOUIsRUFBV3EyQyxFQUFPcjJDLFNBQ2xCeThDLEVBQVVwRyxFQUFPb0csUUFDakJrUyxFQUFTalMsRUFBVyxTQUNwQjBLLEVBQXVCa0gsRUFBMkJqMUMsRUFDbER1MUMsRUFBOEJ4SCxFQUM5QnlILEtBQW9CN3VELEdBQVlBLEVBQVM2MkIsYUFBZXdmLEVBQU81ZixlQUMvRHE0QixFQUF5RCxtQkFBekJDLHNCQUNoQ0MsRUFBc0IscUJBU3RCcFYsRUFBU3RELEVBQVNrWSxHQUFTLFdBRTdCLEdBRDZCcE8sRUFBY3NPLEtBQXdCemdDLE9BQU95Z0MsR0FDN0MsQ0FJM0IsR0FBbUIsS0FBZjliLEVBQW1CLE9BQU8sRUFFOUIsSUFBS3dRLElBQVkwTCxFQUF3QixPQUFPLEVBR2xELEdBQUkxVixJQUFZc1YsRUFBbUJsL0MsVUFBbUIsUUFBRyxPQUFPLEVBSWhFLEdBQUlvakMsR0FBYyxJQUFNLGNBQWNwa0IsS0FBS2tnQyxHQUFxQixPQUFPLEVBRXZFLElBQUkxTCxFQUFVMEwsRUFBbUJwc0IsUUFBUSxHQUNyQzJzQixFQUFjLFNBQVVscUMsR0FDMUJBLEdBQUssZUFBNkIsZ0JBSXBDLE9BRmtCaStCLEVBQVF2ekMsWUFBYyxJQUM1Qm9qQyxHQUFXb2MsSUFDZGpNLEVBQVFyVyxNQUFLLHlCQUF3Q3NpQixNQUc1REMsRUFBc0J0VixJQUFXbkQsR0FBNEIsU0FBVXBCLEdBQ3pFcVosRUFBbUJ0aEIsSUFBSWlJLEdBQWlCLE9BQUUsa0JBSXhDOFosRUFBYSxTQUFVMWYsR0FDekIsSUFBSTlDLEVBQ0osU0FBTytDLEVBQVNELElBQWtDLG1CQUFuQjlDLEVBQU84QyxFQUFHOUMsUUFBc0JBLEdBRzdEbVcsRUFBUyxTQUFVbGxCLEVBQU93eEIsR0FDNUIsSUFBSXh4QixFQUFNeXhCLFNBQVYsQ0FDQXp4QixFQUFNeXhCLFVBQVcsRUFDakIsSUFBSUMsRUFBUTF4QixFQUFNMnhCLFVBQ2xCcEIsR0FBVSxXQUtSLElBSkEsSUFBSXZvQyxFQUFRZ1ksRUFBTWhZLE1BQ2QybUIsRUFoRFEsR0FnREgzTyxFQUFNQSxNQUNYelYsRUFBUSxFQUVMbW5DLEVBQU1qdEQsT0FBUzhsQixHQUFPLENBQzNCLElBS0kxbEIsRUFBUWtxQyxFQUFNNmlCLEVBTGRDLEVBQVdILEVBQU1ubkMsS0FDakJ1bkMsRUFBVW5qQixFQUFLa2pCLEVBQVNsakIsR0FBS2tqQixFQUFTRSxLQUN0Q3J0QixFQUFVbXRCLEVBQVNudEIsUUFDbkJDLEVBQVNrdEIsRUFBU2x0QixPQUNsQnRaLEVBQVN3bUMsRUFBU3htQyxPQUV0QixJQUNNeW1DLEdBQ0duakIsSUF6REMsSUEwREEzTyxFQUFNZ3lCLFdBQXlCQyxHQUFrQmp5QixHQUNyREEsRUFBTWd5QixVQTVESixJQThEWSxJQUFaRixFQUFrQmp0RCxFQUFTbWpCLEdBRXpCcUQsR0FBUUEsRUFBTytHLFFBQ25CdnRCLEVBQVNpdEQsRUFBUTlwQyxHQUNicUQsSUFDRkEsRUFBT2dILE9BQ1B1L0IsR0FBUyxJQUdUL3NELElBQVdndEQsRUFBU3pNLFFBQ3RCemdCLEVBQU9wRixFQUFVLHlCQUNSd1AsRUFBT3dpQixFQUFXMXNELElBQzNCa3FDLEVBQUtuZixLQUFLL3FCLEVBQVE2L0IsRUFBU0MsR0FDdEJELEVBQVE3L0IsSUFDVjgvQixFQUFPM2MsR0FDZCxNQUFPeE0sR0FDSDZQLElBQVd1bUMsR0FBUXZtQyxFQUFPZ0gsT0FDOUJzUyxFQUFPbnBCLElBR1h3a0IsRUFBTTJ4QixVQUFZLEdBQ2xCM3hCLEVBQU15eEIsVUFBVyxFQUNiRCxJQUFheHhCLEVBQU1neUIsV0FBV0UsR0FBWWx5QixRQUk5Q25ILEVBQWdCLFNBQVVsRixFQUFNeXhCLEVBQVMrTSxHQUMzQyxJQUFJejVCLEVBQU9vNUIsRUFDUGIsSUFDRnY0QixFQUFRdDJCLEVBQVM2MkIsWUFBWSxVQUN2Qm1zQixRQUFVQSxFQUNoQjFzQixFQUFNeTVCLE9BQVNBLEVBQ2Z6NUIsRUFBTVEsVUFBVXZGLEdBQU0sR0FBTyxHQUM3QjhrQixFQUFPNWYsY0FBY0gsSUFDaEJBLEVBQVEsQ0FBRTBzQixRQUFTQSxFQUFTK00sT0FBUUEsSUFDdENqQixJQUEyQlksRUFBVXJaLEVBQU8sS0FBTzlrQixJQUFRbStCLEVBQVFwNUIsR0FDL0QvRSxJQUFTeTlCLEdBQXFCWCxFQUFpQiw4QkFBK0IwQixJQUdyRkQsR0FBYyxTQUFVbHlCLEdBQzFCaW1CLEVBQUtyMkIsS0FBSzZvQixHQUFRLFdBQ2hCLElBR0k1ekMsRUFIQXVnRCxFQUFVcGxCLEVBQU00akIsT0FDaEI1N0IsRUFBUWdZLEVBQU1oWSxNQUdsQixHQUZtQm9xQyxHQUFZcHlCLEtBRzdCbjdCLEVBQVM4ckQsR0FBUSxXQUNYbkwsRUFDRjNHLEVBQVF3VCxLQUFLLHFCQUFzQnJxQyxFQUFPbzlCLEdBQ3JDdnNCLEVBQWN1NEIsRUFBcUJoTSxFQUFTcDlCLE1BR3JEZ1ksRUFBTWd5QixVQUFZeE0sR0FBVzRNLEdBQVlweUIsR0FqSC9CLEVBREYsRUFtSEpuN0IsRUFBTzJXLE9BQU8sTUFBTTNXLEVBQU9takIsVUFLakNvcUMsR0FBYyxTQUFVcHlCLEdBQzFCLE9BekhZLElBeUhMQSxFQUFNZ3lCLFlBQTBCaHlCLEVBQU0zakIsUUFHM0M0MUMsR0FBb0IsU0FBVWp5QixHQUNoQ2ltQixFQUFLcjJCLEtBQUs2b0IsR0FBUSxXQUNoQixJQUFJMk0sRUFBVXBsQixFQUFNNGpCLE9BQ2hCNEIsRUFDRjNHLEVBQVF3VCxLQUFLLG1CQUFvQmpOLEdBQzVCdnNCLEVBcklhLG1CQXFJb0J1c0IsRUFBU3BsQixFQUFNaFksV0FJdkQ2UyxHQUFPLFNBQVU2YSxFQUFJMVYsRUFBT3N5QixHQUM5QixPQUFPLFNBQVV0cUMsR0FDZjB0QixFQUFHMVYsRUFBT2hZLEVBQU9zcUMsS0FJakJDLEdBQWlCLFNBQVV2eUIsRUFBT2hZLEVBQU9zcUMsR0FDdkN0eUIsRUFBTXlULE9BQ1Z6VCxFQUFNeVQsTUFBTyxFQUNUNmUsSUFBUXR5QixFQUFRc3lCLEdBQ3BCdHlCLEVBQU1oWSxNQUFRQSxFQUNkZ1ksRUFBTUEsTUFqSk8sRUFrSmJrbEIsRUFBT2xsQixHQUFPLEtBR1p3eUIsR0FBa0IsU0FBVXh5QixFQUFPaFksRUFBT3NxQyxHQUM1QyxJQUFJdHlCLEVBQU15VCxLQUFWLENBQ0F6VCxFQUFNeVQsTUFBTyxFQUNUNmUsSUFBUXR5QixFQUFRc3lCLEdBQ3BCLElBQ0UsR0FBSXR5QixFQUFNNGpCLFNBQVc1N0IsRUFBTyxNQUFNdVgsRUFBVSxvQ0FDNUMsSUFBSXdQLEVBQU93aUIsRUFBV3ZwQyxHQUNsQittQixFQUNGd2hCLEdBQVUsV0FDUixJQUFJalosRUFBVSxDQUFFN0QsTUFBTSxHQUN0QixJQUNFMUUsRUFBS25mLEtBQUs1SCxFQUNSNlMsR0FBSzIzQixHQUFpQmxiLEVBQVN0WCxHQUMvQm5GLEdBQUswM0IsR0FBZ0JqYixFQUFTdFgsSUFFaEMsTUFBT3hrQixHQUNQKzJDLEdBQWVqYixFQUFTOTdCLEVBQU93a0IsUUFJbkNBLEVBQU1oWSxNQUFRQSxFQUNkZ1ksRUFBTUEsTUEzS0ksRUE0S1ZrbEIsRUFBT2xsQixHQUFPLElBRWhCLE1BQU94a0IsR0FDUCsyQyxHQUFlLENBQUU5ZSxNQUFNLEdBQVNqNEIsRUFBT3drQixNQUt2Q2djLElBRUY4VSxFQUFxQixTQUFpQjJCLEdBQ3BDOWIsRUFBV3Z4QyxLQUFNMHJELEVBQW9CRixHQUNyQzFQLEVBQVV1UixHQUNWeEMsRUFBU3JnQyxLQUFLeHFCLE1BQ2QsSUFBSTQ2QixFQUFRNFgsRUFBaUJ4eUMsTUFDN0IsSUFDRXF0RCxFQUFTNTNCLEdBQUsyM0IsR0FBaUJ4eUIsR0FBUW5GLEdBQUswM0IsR0FBZ0J2eUIsSUFDNUQsTUFBT3hrQixHQUNQKzJDLEdBQWV2eUIsRUFBT3hrQixNQUkxQnkwQyxFQUFXLFNBQWlCd0MsR0FDMUJ2YixFQUFpQjl4QyxLQUFNLENBQ3JCdU0sS0FBTWkvQyxFQUNObmQsTUFBTSxFQUNOZ2UsVUFBVSxFQUNWcDFDLFFBQVEsRUFDUnMxQyxVQUFXLEdBQ1hLLFdBQVcsRUFDWGh5QixNQTNNUSxFQTRNUmhZLFdBQU85USxNQUdGdEYsVUFBWThrQyxFQUFZb2EsRUFBbUJsL0MsVUFBVyxDQUc3RG05QixLQUFNLFNBQWMyakIsRUFBYUMsR0FDL0IsSUFBSTN5QixFQUFRNndCLEVBQXdCenJELE1BQ2hDeXNELEVBQVdySSxFQUFxQjhHLEVBQW1CbHJELEtBQU0wckQsSUFPN0QsT0FOQWUsRUFBU2xqQixHQUEyQixtQkFBZitqQixHQUE0QkEsRUFDakRiLEVBQVNFLEtBQTRCLG1CQUFkWSxHQUE0QkEsRUFDbkRkLEVBQVN4bUMsT0FBU202QixFQUFVM0csRUFBUXh6QixZQUFTblUsRUFDN0M4b0IsRUFBTTNqQixRQUFTLEVBQ2YyakIsRUFBTTJ4QixVQUFVdHRELEtBQUt3dEQsR0F6TmIsR0EwTko3eEIsRUFBTUEsT0FBa0JrbEIsRUFBT2xsQixHQUFPLEdBQ25DNnhCLEVBQVN6TSxTQUlsQixNQUFTLFNBQVV1TixHQUNqQixPQUFPdnRELEtBQUsycEMsVUFBSzczQixFQUFXeTdDLE1BR2hDekMsRUFBdUIsV0FDckIsSUFBSTlLLEVBQVUsSUFBSTZLLEVBQ2Rqd0IsRUFBUTRYLEVBQWlCd04sR0FDN0JoZ0QsS0FBS2dnRCxRQUFVQSxFQUNmaGdELEtBQUtzL0IsUUFBVTdKLEdBQUsyM0IsR0FBaUJ4eUIsR0FDckM1NkIsS0FBS3UvQixPQUFTOUosR0FBSzAzQixHQUFnQnZ5QixJQUVyQzB3QixFQUEyQmoxQyxFQUFJK3RDLEVBQXVCLFNBQVVwVyxHQUM5RCxPQUFPQSxJQUFNMGQsR0FBc0IxZCxJQUFNK2MsRUFDckMsSUFBSUQsRUFBcUI5YyxHQUN6QjRkLEVBQTRCNWQsSUFHN0JvSSxHQUFtQyxtQkFBakI2VSxJQUNyQkQsRUFBYUMsRUFBY3orQyxVQUFVbTlCLEtBR3JDNEosRUFBUzBYLEVBQWN6K0MsVUFBVyxRQUFRLFNBQWM4Z0QsRUFBYUMsR0FDbkUsSUFBSXAxQixFQUFPbjRCLEtBQ1gsT0FBTyxJQUFJMHJELEdBQW1CLFNBQVVwc0IsRUFBU0MsR0FDL0N5ckIsRUFBV3hnQyxLQUFLMk4sRUFBTW1ILEVBQVNDLE1BQzlCb0ssS0FBSzJqQixFQUFhQyxLQUVwQixDQUFFL0ksUUFBUSxJQUdRLG1CQUFWbUgsR0FBc0J2WSxFQUFFLENBQUVDLFFBQVEsRUFBTXdDLFlBQVksRUFBTWpCLFFBQVEsR0FBUSxDQUVuRmxMLE1BQU8sU0FBZXppQixHQUNwQixPQUFPbWtDLEVBQWVNLEVBQW9CQyxFQUFPbjZDLE1BQU02aEMsRUFBUXhoQyxpQkFNdkV1aEMsRUFBRSxDQUFFQyxRQUFRLEVBQU1tYSxNQUFNLEVBQU01WSxPQUFRZ0MsR0FBVSxDQUM5Q3ZYLFFBQVNxc0IsSUFHWGhZLEVBQWVnWSxFQUFvQkYsR0FBUyxHQUFPLEdBQ25EOVosRUFBVzhaLEdBRVhULEVBQWlCclIsRUFBVzhSLEdBRzVCcFksRUFBRSxDQUFFMXNCLE9BQVE4a0MsRUFBU2xSLE1BQU0sRUFBTTFGLE9BQVFnQyxHQUFVLENBR2pEclgsT0FBUSxTQUFnQnIzQixHQUN0QixJQUFJdWxELEVBQWFySixFQUFxQnBrRCxNQUV0QyxPQURBeXRELEVBQVdsdUIsT0FBTy9VLFVBQUsxWSxFQUFXNUosR0FDM0J1bEQsRUFBV3pOLFdBSXRCNU0sRUFBRSxDQUFFMXNCLE9BQVE4a0MsRUFBU2xSLE1BQU0sRUFBTTFGLE9BQVF3QixHQUFXUSxHQUFVLENBRzVEdFgsUUFBUyxTQUFpQjlnQyxHQUN4QixPQUFPNHNELEVBQWVoVixHQUFXcDJDLE9BQVMrcUQsRUFBaUJXLEVBQXFCMXJELEtBQU14QixNQUkxRjQwQyxFQUFFLENBQUUxc0IsT0FBUThrQyxFQUFTbFIsTUFBTSxFQUFNMUYsT0FBUXNYLEdBQXVCLENBRzlEOWhCLElBQUssU0FBYWlJLEdBQ2hCLElBQUlyRSxFQUFJaHVDLEtBQ0p5dEQsRUFBYXJKLEVBQXFCcFcsR0FDbEMxTyxFQUFVbXVCLEVBQVdudUIsUUFDckJDLEVBQVNrdUIsRUFBV2x1QixPQUNwQjkvQixFQUFTOHJELEdBQVEsV0FDbkIsSUFBSW1DLEVBQWtCNVIsRUFBVTlOLEVBQUUxTyxTQUM5QjNhLEVBQVMsR0FDVHVpQyxFQUFVLEVBQ1Z5RyxFQUFZLEVBQ2hCbmMsRUFBUWEsR0FBVSxTQUFVMk4sR0FDMUIsSUFBSTc2QixFQUFRK2hDLElBQ1IwRyxHQUFnQixFQUNwQmpwQyxFQUFPMWxCLFVBQUs2UyxHQUNaNjdDLElBQ0FELEVBQWdCbGpDLEtBQUt3akIsRUFBR2dTLEdBQVNyVyxNQUFLLFNBQVUvbUIsR0FDMUNnckMsSUFDSkEsR0FBZ0IsRUFDaEJqcEMsRUFBT1EsR0FBU3ZDLElBQ2QrcUMsR0FBYXJ1QixFQUFRM2EsTUFDdEI0YSxRQUVIb3VCLEdBQWFydUIsRUFBUTNhLE1BR3pCLE9BRElsbEIsRUFBTzJXLE9BQU9tcEIsRUFBTzkvQixFQUFPbWpCLE9BQ3pCNnFDLEVBQVd6TixTQUlwQjZOLEtBQU0sU0FBY3hiLEdBQ2xCLElBQUlyRSxFQUFJaHVDLEtBQ0p5dEQsRUFBYXJKLEVBQXFCcFcsR0FDbEN6TyxFQUFTa3VCLEVBQVdsdUIsT0FDcEI5L0IsRUFBUzhyRCxHQUFRLFdBQ25CLElBQUltQyxFQUFrQjVSLEVBQVU5TixFQUFFMU8sU0FDbENrUyxFQUFRYSxHQUFVLFNBQVUyTixHQUMxQjBOLEVBQWdCbGpDLEtBQUt3akIsRUFBR2dTLEdBQVNyVyxLQUFLOGpCLEVBQVdudUIsUUFBU0MsU0FJOUQsT0FESTkvQixFQUFPMlcsT0FBT21wQixFQUFPOS9CLEVBQU9takIsT0FDekI2cUMsRUFBV3pOLFksNEJDelh0QixJQUFJNU0sRUFBSSxFQUFRLE1BQ1pyeEIsRUFBTyxFQUFRLE1BSW5CcXhCLEVBQUUsQ0FBRTFzQixPQUFRLFNBQVUyd0IsT0FBTyxFQUFNekMsT0FBUSxJQUFJN3lCLE9BQVNBLEdBQVEsQ0FDOURBLEtBQU1BLEssMkJDTlIsSUFBSXlvQyxFQUFhLEVBQVEsTUFDckJDLEVBQW1CLEVBQVEsTUFJL0JsZSxFQUFPQyxRQUFVZ2UsRUFBVyxPQUFPLFNBQVV4dkIsR0FDM0MsT0FBTyxXQUFpQixPQUFPQSxFQUFLaDdCLEtBQU02UixVQUFVeFMsT0FBU3dTLFVBQVUsUUFBS0MsTUFDM0UyNEMsSSw0QkNQSCxJQUFJclgsRUFBSSxFQUFRLE1BQ1owYSxFQUFhLEVBQVEsTUFDckIzSCxFQUF5QixFQUFRLE1BS3JDL1MsRUFBRSxDQUFFMXNCLE9BQVEsU0FBVTJ3QixPQUFPLEVBQU16QyxRQUpSLEVBQVEsS0FJU21aLENBQXFCLGFBQWUsQ0FDOUU1aUIsU0FBVSxTQUFrQjZpQixHQUMxQixTQUFVL2lDLE9BQU9rN0IsRUFBdUJubUQsT0FDckNtb0IsUUFBUTJsQyxFQUFXRSxHQUFlbjhDLFVBQVV4UyxPQUFTLEVBQUl3UyxVQUFVLFFBQUtDLE8sNEJDVi9FLElBQUlrN0IsRUFBUyxlQUNUNkUsRUFBc0IsRUFBUSxNQUM5QkosRUFBaUIsRUFBUSxLQUV6QndjLEVBQWtCLGtCQUNsQm5jLEVBQW1CRCxFQUFvQmxrQixJQUN2QzZrQixFQUFtQlgsRUFBb0JHLFVBQVVpYyxHQUlyRHhjLEVBQWV4bUIsT0FBUSxVQUFVLFNBQVVpb0IsR0FDekNwQixFQUFpQjl4QyxLQUFNLENBQ3JCdU0sS0FBTTBoRCxFQUNOMW9DLE9BQVEwRixPQUFPaW9CLEdBQ2YvdEIsTUFBTyxPQUlSLFdBQ0QsSUFHSXJtQixFQUhBODdCLEVBQVE0WCxFQUFpQnh5QyxNQUN6QnVsQixFQUFTcVYsRUFBTXJWLE9BQ2ZKLEVBQVF5VixFQUFNelYsTUFFbEIsT0FBSUEsR0FBU0ksRUFBT2xtQixPQUFlLENBQUV1akIsV0FBTzlRLEVBQVd1OEIsTUFBTSxJQUM3RHZ2QyxFQUFRa3VDLEVBQU96bkIsRUFBUUosR0FDdkJ5VixFQUFNelYsT0FBU3JtQixFQUFNTyxPQUNkLENBQUV1akIsTUFBTzlqQixFQUFPdXZDLE1BQU0sUSw0QkMxQi9CLElBQUk2ZixFQUFnQyxFQUFRLE1BQ3hDOWQsRUFBVyxFQUFRLE1BQ25CekMsRUFBVyxFQUFRLE1BQ25CdVksRUFBWSxFQUFRLE1BQ3BCQyxFQUF5QixFQUFRLE1BQ2pDZ0ksRUFBcUIsRUFBUSxNQUM3QkMsRUFBa0IsRUFBUSxLQUMxQkMsRUFBYSxFQUFRLE1BRXJCNWpELEVBQU1sTixLQUFLa04sSUFDWEMsRUFBTW5OLEtBQUttTixJQU9md2pELEVBQThCLFVBQVcsR0FBRyxTQUFVdFQsRUFBU29LLEVBQWVzSixFQUFpQnZCLEdBQzdGLElBQUlsUyxFQUErQ2tTLEVBQU9sUyw2Q0FDdERGLEVBQW1Cb1MsRUFBT3BTLGlCQUMxQjRULEVBQW9CMVQsRUFBK0MsSUFBTSxLQUU3RSxNQUFPLENBR0wsU0FBaUIyVCxFQUFhQyxHQUM1QixJQUFJMWdCLEVBQUlvWSxFQUF1Qm5tRCxNQUMzQjB1RCxFQUEwQjU4QyxNQUFmMDhDLE9BQTJCMThDLEVBQVkwOEMsRUFBWTVULEdBQ2xFLFlBQW9COW9DLElBQWI0OEMsRUFDSEEsRUFBU2xrQyxLQUFLZ2tDLEVBQWF6Z0IsRUFBRzBnQixHQUM5QnpKLEVBQWN4NkIsS0FBS1MsT0FBTzhpQixHQUFJeWdCLEVBQWFDLElBSWpELFNBQVV4WixFQUFRd1osR0FDaEIsSUFDSTVULEdBQWdERixHQUN6QixpQkFBakI4VCxJQUEwRSxJQUE3Q0EsRUFBYXRtQyxRQUFRb21DLEdBQzFELENBQ0EsSUFBSWxrQixFQUFNaWtCLEVBQWdCdEosRUFBZS9QLEVBQVFqMUMsS0FBTXl1RCxHQUN2RCxHQUFJcGtCLEVBQUlnRSxLQUFNLE9BQU9oRSxFQUFJem5CLE1BRzNCLElBQUlnZixFQUFLd08sRUFBUzZFLEdBQ2RoSSxFQUFJaGlCLE9BQU9qckIsTUFFWDJ1RCxFQUE0QyxtQkFBakJGLEVBQzFCRSxJQUFtQkYsRUFBZXhqQyxPQUFPd2pDLElBRTlDLElBQUlwYixFQUFTelIsRUFBR3lSLE9BQ2hCLEdBQUlBLEVBQVEsQ0FDVixJQUFJdWIsRUFBY2h0QixFQUFHc0wsUUFDckJ0TCxFQUFHMWMsVUFBWSxFQUdqQixJQURBLElBQUkycEMsRUFBVSxLQUNELENBQ1gsSUFBSXB2RCxFQUFTNHVELEVBQVd6c0IsRUFBSXFMLEdBQzVCLEdBQWUsT0FBWHh0QyxFQUFpQixNQUdyQixHQURBb3ZELEVBQVE1dkQsS0FBS1EsSUFDUjR6QyxFQUFRLE1BR0ksS0FERnBvQixPQUFPeHJCLEVBQU8sTUFDUm1pQyxFQUFHMWMsVUFBWWlwQyxFQUFtQmxoQixFQUFHVSxFQUFTL0wsRUFBRzFjLFdBQVkwcEMsSUFLcEYsSUFGQSxJQXREd0JuaUIsRUFzRHBCcWlCLEVBQW9CLEdBQ3BCQyxFQUFxQixFQUNoQm51RCxFQUFJLEVBQUdBLEVBQUlpdUQsRUFBUXh2RCxPQUFRdUIsSUFBSyxDQUN2Q25CLEVBQVNvdkQsRUFBUWp1RCxHQVVqQixJQVJBLElBQUlzN0MsRUFBVWp4QixPQUFPeHJCLEVBQU8sSUFDeEIwOEMsRUFBVzF4QyxFQUFJQyxFQUFJdzdDLEVBQVV6bUQsRUFBTzBsQixPQUFROG5CLEVBQUU1dEMsUUFBUyxHQUN2RCs4QyxFQUFXLEdBTU50NkMsRUFBSSxFQUFHQSxFQUFJckMsRUFBT0osT0FBUXlDLElBQUtzNkMsRUFBU245QyxVQWxFekM2UyxLQURjMjZCLEVBbUU4Q2h0QyxFQUFPcUMsSUFsRXZEMnFDLEVBQUt4aEIsT0FBT3doQixJQW1FaEMsSUFBSTRQLEVBQWdCNThDLEVBQU8rMEIsT0FDM0IsR0FBSW02QixFQUFtQixDQUNyQixJQUFJSyxFQUFlLENBQUM5UyxHQUFTMzhDLE9BQU82OEMsRUFBVUQsRUFBVWxQLFFBQ2xDbjdCLElBQWxCdXFDLEdBQTZCMlMsRUFBYS92RCxLQUFLbzlDLEdBQ25ELElBQUlDLEVBQWNyeEIsT0FBT3dqQyxFQUFhajlDLFdBQU1NLEVBQVdrOUMsU0FFdkQxUyxFQUFjOFIsRUFBZ0JsUyxFQUFTalAsRUFBR2tQLEVBQVVDLEVBQVVDLEVBQWVvUyxHQUUzRXRTLEdBQVk0UyxJQUNkRCxHQUFxQjdoQixFQUFFN25CLE1BQU0ycEMsRUFBb0I1UyxHQUFZRyxFQUM3RHlTLEVBQXFCNVMsRUFBV0QsRUFBUTc4QyxRQUc1QyxPQUFPeXZELEVBQW9CN2hCLEVBQUU3bkIsTUFBTTJwQyxTLDRCQzdGekMsSUFBSTNiLEVBQUksRUFBUSxNQUNaNmIsRUFBUSxhQUtaN2IsRUFBRSxDQUFFMXNCLE9BQVEsU0FBVTJ3QixPQUFPLEVBQU16QyxPQUpOLEVBQVEsS0FJTXNhLENBQXVCLFNBQVcsQ0FDM0U5eEQsS0FBTSxXQUNKLE9BQU82eEQsRUFBTWp2RCxVLDRCQ05qQixJQUFJb3pDLEVBQUksRUFBUSxNQUNaekIsRUFBYyxFQUFRLE1BQ3RCMEIsRUFBUyxFQUFRLE1BQ2pCM2xCLEVBQU0sRUFBUSxNQUNkZ2YsRUFBVyxFQUFRLEtBQ25CMkUsRUFBaUIsVUFDakIwSSxFQUE0QixFQUFRLE1BRXBDb1YsRUFBZTliLEVBQU92YixPQUUxQixHQUFJNlosR0FBc0MsbUJBQWhCd2QsTUFBaUMsZ0JBQWlCQSxFQUFhM2lELGlCQUV4RHNGLElBQS9CcTlDLElBQWVDLGFBQ2QsQ0FDRCxJQUFJQyxFQUE4QixHQUU5QkMsRUFBZ0IsV0FDbEIsSUFBSUYsRUFBY3Y5QyxVQUFVeFMsT0FBUyxRQUFzQnlTLElBQWpCRCxVQUFVLFFBQW1CQyxFQUFZbVosT0FBT3BaLFVBQVUsSUFDaEdwUyxFQUFTTyxnQkFBZ0JzdkQsRUFDekIsSUFBSUgsRUFBYUMsUUFFRHQ5QyxJQUFoQnM5QyxFQUE0QkQsSUFBaUJBLEVBQWFDLEdBRTlELE1BRG9CLEtBQWhCQSxJQUFvQkMsRUFBNEI1dkQsSUFBVSxHQUN2REEsR0FFVHM2QyxFQUEwQnVWLEVBQWVILEdBQ3pDLElBQUlJLEVBQWtCRCxFQUFjOWlELFVBQVkyaUQsRUFBYTNpRCxVQUM3RCtpRCxFQUFnQjlpRCxZQUFjNmlELEVBRTlCLElBQUlFLEVBQWlCRCxFQUFnQjFzQyxTQUNqQzRzQyxFQUF5QyxnQkFBaEN4a0MsT0FBT2trQyxFQUFhLFNBQzdCbGEsRUFBUyx3QkFDYjVELEVBQWVrZSxFQUFpQixjQUFlLENBQzdDeGlCLGNBQWMsRUFDZG5mLElBQUssV0FDSCxJQUFJN0YsRUFBUzJrQixFQUFTMXNDLE1BQVFBLEtBQUs2bEIsVUFBWTdsQixLQUMzQ3VsQixFQUFTaXFDLEVBQWVobEMsS0FBS3pDLEdBQ2pDLEdBQUkyRixFQUFJMmhDLEVBQTZCdG5DLEdBQVMsTUFBTyxHQUNyRCxJQUFJMm5DLEVBQU9ELEVBQVNscUMsRUFBT0gsTUFBTSxHQUFJLEdBQUtHLEVBQU9wb0IsUUFBUTgzQyxFQUFRLE1BQ2pFLE1BQWdCLEtBQVR5YSxPQUFjNTlDLEVBQVk0OUMsS0FJckN0YyxFQUFFLENBQUVDLFFBQVEsRUFBTXVCLFFBQVEsR0FBUSxDQUNoQzljLE9BQVF3M0IsTSxlQy9DZ0IsRUFBUSxLQUlwQ0ssQ0FBc0IsYSw0QkNIdEIsSUFBSXZjLEVBQUksRUFBUSxNQUNaQyxFQUFTLEVBQVEsTUFDakJxRyxFQUFhLEVBQVEsTUFDckJ0RCxFQUFVLEVBQVEsTUFDbEJ6RSxFQUFjLEVBQVEsTUFDdEJ3VyxFQUFnQixFQUFRLEtBQ3hCQyxFQUFvQixFQUFRLE1BQzVCelksRUFBUSxFQUFRLE1BQ2hCamlCLEVBQU0sRUFBUSxNQUNkOUgsRUFBVSxFQUFRLE1BQ2xCOG1CLEVBQVcsRUFBUSxLQUNuQjBELEVBQVcsRUFBUSxNQUNuQjVDLEVBQVcsRUFBUSxNQUNuQmMsRUFBa0IsRUFBUSxNQUMxQnlILEVBQWMsRUFBUSxNQUN0QlIsRUFBMkIsRUFBUSxNQUNuQ3FhLEVBQXFCLEVBQVEsSUFDN0JoTixFQUFhLEVBQVEsTUFDckJzQixFQUE0QixFQUFRLE1BQ3BDMkwsRUFBOEIsRUFBUSxNQUN0QzFMLEVBQThCLEVBQVEsTUFDdENyUCxFQUFpQyxFQUFRLE1BQ3pDbEksRUFBdUIsRUFBUSxNQUMvQnFXLEVBQTZCLEVBQVEsTUFDckM5TSxFQUE4QixFQUFRLE1BQ3RDNUMsRUFBVyxFQUFRLE1BQ25CMEssRUFBUyxFQUFRLE1BQ2pCQyxFQUFZLEVBQVEsTUFDcEJiLEVBQWEsRUFBUSxNQUNyQkMsRUFBTSxFQUFRLE1BQ2QzUSxFQUFrQixFQUFRLE1BQzFCMkssRUFBK0IsRUFBUSxNQUN2Q3FZLEVBQXdCLEVBQVEsTUFDaENqYyxFQUFpQixFQUFRLE1BQ3pCN0IsRUFBc0IsRUFBUSxNQUM5QnpFLEVBQVcsZ0JBRVgwaUIsRUFBUzVSLEVBQVUsVUFDbkJsRCxFQUFTLFNBRVQrVSxFQUFlcGpCLEVBQWdCLGVBQy9CbUYsRUFBbUJELEVBQW9CbGtCLElBQ3ZDNmtCLEVBQW1CWCxFQUFvQkcsVUFBVWdKLEdBQ2pEeUksRUFBa0J0c0MsT0FBZ0IsVUFDbEM2NEMsRUFBVTNjLEVBQU92YixPQUNqQm00QixFQUFhdlcsRUFBVyxPQUFRLGFBQ2hDd0osRUFBaUNwTyxFQUErQnorQixFQUNoRXlzQyxFQUF1QmxXLEVBQXFCdjJCLEVBQzVDOHNDLEVBQTRCME0sRUFBNEJ4NUMsRUFDeERxdEMsRUFBNkJULEVBQTJCNXNDLEVBQ3hENjVDLEVBQWFqUyxFQUFPLFdBQ3BCa1MsRUFBeUJsUyxFQUFPLGNBQ2hDbVMsRUFBeUJuUyxFQUFPLDZCQUNoQ29TLEdBQXlCcFMsRUFBTyw2QkFDaENvSyxHQUF3QnBLLEVBQU8sT0FDL0JxUyxHQUFVamQsRUFBT2lkLFFBRWpCQyxJQUFjRCxLQUFZQSxHQUFpQixZQUFNQSxHQUFpQixVQUFFRSxVQUdwRUMsR0FBc0I5ZSxHQUFlaEMsR0FBTSxXQUM3QyxPQUVTLEdBRkZpZ0IsRUFBbUI5TSxFQUFxQixHQUFJLElBQUssQ0FDdERsMUIsSUFBSyxXQUFjLE9BQU9rMUIsRUFBcUI5aUQsS0FBTSxJQUFLLENBQUU0aUIsTUFBTyxJQUFLbGpCLE1BQ3RFQSxLQUNELFNBQVVxdUMsRUFBR2dWLEVBQUdDLEdBQ25CLElBQUkwTixFQUE0QnhOLEVBQStCTyxFQUFpQlYsR0FDNUUyTixVQUFrQ2pOLEVBQWdCVixHQUN0REQsRUFBcUIvVSxFQUFHZ1YsRUFBR0MsR0FDdkIwTixHQUE2QjNpQixJQUFNMFYsR0FDckNYLEVBQXFCVyxFQUFpQlYsRUFBRzJOLElBRXpDNU4sRUFFQTBLLEdBQU8sU0FBVXRjLEVBQUtrZSxHQUN4QixJQUFJcm5DLEVBQVNtb0MsRUFBV2hmLEdBQU8wZSxFQUFtQkksRUFBaUIsV0FPbkUsT0FOQWxlLEVBQWlCL3BCLEVBQVEsQ0FDdkJ4YixLQUFNeXVDLEVBQ045SixJQUFLQSxFQUNMa2UsWUFBYUEsSUFFVnpkLElBQWE1cEIsRUFBT3FuQyxZQUFjQSxHQUNoQ3JuQyxHQUdMNG9DLEdBQVd2SSxFQUFvQixTQUFVM2IsR0FDM0MsTUFBb0IsaUJBQU5BLEdBQ1osU0FBVUEsR0FDWixPQUFPdDFCLE9BQU9zMUIsYUFBZXVqQixHQUczQlksR0FBa0IsU0FBd0I3aUIsRUFBR2dWLEVBQUdDLEdBQzlDalYsSUFBTTBWLEdBQWlCbU4sR0FBZ0JULEVBQXdCcE4sRUFBR0MsR0FDdEU1UyxFQUFTckMsR0FDVCxJQUFJN2hDLEVBQU02cEMsRUFBWWdOLEdBQUcsR0FFekIsT0FEQTNTLEVBQVM0UyxHQUNMdDFCLEVBQUl3aUMsRUFBWWhrRCxJQUNiODJDLEVBQVduTixZQUlWbm9CLEVBQUlxZ0IsRUFBRytoQixJQUFXL2hCLEVBQUUraEIsR0FBUTVqRCxLQUFNNmhDLEVBQUUraEIsR0FBUTVqRCxJQUFPLEdBQ3ZEODJDLEVBQWE0TSxFQUFtQjVNLEVBQVksQ0FBRW5OLFdBQVlOLEVBQXlCLEdBQUcsT0FKakY3bkIsRUFBSXFnQixFQUFHK2hCLElBQVNoTixFQUFxQi9VLEVBQUcraEIsRUFBUXZhLEVBQXlCLEVBQUcsS0FDakZ4SCxFQUFFK2hCLEdBQVE1akQsSUFBTyxHQUlWdWtELEdBQW9CMWlCLEVBQUc3aEMsRUFBSzgyQyxJQUM5QkYsRUFBcUIvVSxFQUFHN2hDLEVBQUs4MkMsSUFHcEM2TixHQUFvQixTQUEwQjlpQixFQUFHNFUsR0FDbkR2UyxFQUFTckMsR0FDVCxJQUFJaE8sRUFBYXVPLEVBQWdCcVUsR0FDN0I5ZSxFQUFPK2UsRUFBVzdpQixHQUFZeGdDLE9BQU91eEQsR0FBdUIvd0IsSUFJaEUsT0FIQXFOLEVBQVN2SixHQUFNLFNBQVUzM0IsR0FDbEJ5bEMsSUFBZW9mLEdBQXNCdm1DLEtBQUt1VixFQUFZN3pCLElBQU0wa0QsR0FBZ0I3aUIsRUFBRzdoQyxFQUFLNnpCLEVBQVc3ekIsT0FFL0Y2aEMsR0FPTGdqQixHQUF3QixTQUE4QmxOLEdBQ3hELElBQUlkLEVBQUloTixFQUFZOE4sR0FBRyxHQUNuQmhPLEVBQWE2TixFQUEyQmw1QixLQUFLeHFCLEtBQU0raUQsR0FDdkQsUUFBSS9pRCxPQUFTeWpELEdBQW1CLzFCLEVBQUl3aUMsRUFBWW5OLEtBQU9yMUIsRUFBSXlpQyxFQUF3QnBOLFFBQzVFbE4sSUFBZW5vQixFQUFJMXRCLEtBQU0raUQsS0FBT3IxQixFQUFJd2lDLEVBQVluTixJQUFNcjFCLEVBQUkxdEIsS0FBTTh2RCxJQUFXOXZELEtBQUs4dkQsR0FBUS9NLEtBQUtsTixJQUdsR21iLEdBQTRCLFNBQWtDampCLEVBQUdnVixHQUNuRSxJQUFJdFcsRUFBSzZCLEVBQWdCUCxHQUNyQjdoQyxFQUFNNnBDLEVBQVlnTixHQUFHLEdBQ3pCLEdBQUl0VyxJQUFPZ1gsSUFBbUIvMUIsRUFBSXdpQyxFQUFZaGtELElBQVN3aEIsRUFBSXlpQyxFQUF3QmprRCxHQUFuRixDQUNBLElBQUlndUMsRUFBYWdKLEVBQStCelcsRUFBSXZnQyxHQUlwRCxPQUhJZ3VDLElBQWN4c0IsRUFBSXdpQyxFQUFZaGtELElBQVV3aEIsRUFBSStlLEVBQUlxakIsSUFBV3JqQixFQUFHcWpCLEdBQVE1akQsS0FDeEVndUMsRUFBV3JFLFlBQWEsR0FFbkJxRSxJQUdMK1csR0FBdUIsU0FBNkJsakIsR0FDdEQsSUFBSXJkLEVBQVF5eUIsRUFBMEI3VSxFQUFnQlAsSUFDbER0dUMsRUFBUyxHQUliLE9BSEEydEMsRUFBUzFjLEdBQU8sU0FBVXhrQixHQUNuQndoQixFQUFJd2lDLEVBQVloa0QsSUFBU3doQixFQUFJMnZCLEVBQVlueEMsSUFBTXpNLEVBQU9SLEtBQUtpTixNQUUzRHpNLEdBR0xxeEQsR0FBeUIsU0FBK0IvaUIsR0FDMUQsSUFBSW1qQixFQUFzQm5qQixJQUFNMFYsRUFDNUIveUIsRUFBUXl5QixFQUEwQitOLEVBQXNCZixFQUF5QjdoQixFQUFnQlAsSUFDakd0dUMsRUFBUyxHQU1iLE9BTEEydEMsRUFBUzFjLEdBQU8sU0FBVXhrQixJQUNwQndoQixFQUFJd2lDLEVBQVloa0QsSUFBVWdsRCxJQUF1QnhqQyxFQUFJKzFCLEVBQWlCdjNDLElBQ3hFek0sRUFBT1IsS0FBS2l4RCxFQUFXaGtELE9BR3BCek0sR0FLSjBvRCxJQWNINVUsR0FiQXljLEVBQVUsV0FDUixHQUFJaHdELGdCQUFnQmd3RCxFQUFTLE1BQU03MUIsVUFBVSwrQkFDN0MsSUFBSWkxQixFQUFldjlDLFVBQVV4UyxhQUEyQnlTLElBQWpCRCxVQUFVLEdBQStCb1osT0FBT3BaLFVBQVUsU0FBN0JDLEVBQ2hFby9CLEVBQU1vTSxFQUFJOFIsR0FDVnJMLEVBQVMsU0FBVW5oQyxHQUNqQjVpQixPQUFTeWpELEdBQWlCTSxFQUFPdjVCLEtBQUsybEMsRUFBd0J2dEMsR0FDOUQ4SyxFQUFJMXRCLEtBQU04dkQsSUFBV3BpQyxFQUFJMXRCLEtBQUs4dkQsR0FBUzVlLEtBQU1seEMsS0FBSzh2RCxHQUFRNWUsSUFBTyxHQUNyRXVmLEdBQW9CendELEtBQU1reEMsRUFBS3FFLEVBQXlCLEVBQUczeUIsS0FHN0QsT0FESSt1QixHQUFlNGUsSUFBWUUsR0FBb0JoTixFQUFpQnZTLEVBQUssQ0FBRW5FLGNBQWMsRUFBTXBmLElBQUtvMkIsSUFDN0Z5SixHQUFLdGMsRUFBS2tlLEtBR08sVUFBRyxZQUFZLFdBQ3ZDLE9BQU81YyxFQUFpQnh5QyxNQUFNa3hDLE9BR2hDcUMsRUFBU3ljLEVBQVMsaUJBQWlCLFNBQVVaLEdBQzNDLE9BQU81QixHQUFLbFEsRUFBSThSLEdBQWNBLE1BR2hDbk0sRUFBMkI1c0MsRUFBSTA2QyxHQUMvQm5rQixFQUFxQnYyQixFQUFJdTZDLEdBQ3pCOWIsRUFBK0J6K0IsRUFBSTI2QyxHQUNuQzlNLEVBQTBCN3RDLEVBQUl3NUMsRUFBNEJ4NUMsRUFBSTQ2QyxHQUM5RDlNLEVBQTRCOXRDLEVBQUl5NkMsR0FFaEN4WixFQUE2QmpoQyxFQUFJLFNBQVVrWSxHQUN6QyxPQUFPaS9CLEdBQUs3Z0IsRUFBZ0JwZSxHQUFPQSxJQUdqQ29qQixJQUVGbVIsRUFBcUJrTixFQUFpQixVQUFHLGNBQWUsQ0FDdERqakIsY0FBYyxFQUNkbmYsSUFBSyxXQUNILE9BQU80a0IsRUFBaUJ4eUMsTUFBTW92RCxlQUc3QmhaLEdBQ0g3QyxFQUFTa1EsRUFBaUIsdUJBQXdCc04sR0FBdUIsQ0FBRXZNLFFBQVEsTUFLekZwUixFQUFFLENBQUVDLFFBQVEsRUFBTW1hLE1BQU0sRUFBTTVZLFFBQVN1VCxFQUFlM04sTUFBTzJOLEdBQWlCLENBQzVFcndCLE9BQVFrNEIsSUFHVjVpQixFQUFTd1YsRUFBV3lGLEtBQXdCLFNBQVU5NUIsR0FDcERvaEMsRUFBc0JwaEMsTUFHeEI2a0IsRUFBRSxDQUFFMXNCLE9BQVFzMEIsRUFBUVYsTUFBTSxFQUFNMUYsUUFBU3VULEdBQWlCLENBR3hELElBQU8sU0FBVWo4QyxHQUNmLElBQUlxWixFQUFTMEYsT0FBTy9lLEdBQ3BCLEdBQUl3aEIsRUFBSTBpQyxFQUF3QjdxQyxHQUFTLE9BQU82cUMsRUFBdUI3cUMsR0FDdkUsSUFBSXdDLEVBQVNpb0MsRUFBUXpxQyxHQUdyQixPQUZBNnFDLEVBQXVCN3FDLEdBQVV3QyxFQUNqQ3NvQyxHQUF1QnRvQyxHQUFVeEMsRUFDMUJ3QyxHQUlUb3BDLE9BQVEsU0FBZ0JDLEdBQ3RCLElBQUtULEdBQVNTLEdBQU0sTUFBTWozQixVQUFVaTNCLEVBQU0sb0JBQzFDLEdBQUkxakMsRUFBSTJpQyxHQUF3QmUsR0FBTSxPQUFPZixHQUF1QmUsSUFFdEVDLFVBQVcsV0FBY2QsSUFBYSxHQUN0Q2UsVUFBVyxXQUFjZixJQUFhLEtBR3hDbmQsRUFBRSxDQUFFMXNCLE9BQVEsU0FBVTR6QixNQUFNLEVBQU0xRixRQUFTdVQsRUFBZTNOLE1BQU83SSxHQUFlLENBRzlFdjZCLE9BM0hZLFNBQWdCMjJCLEVBQUc0VSxHQUMvQixZQUFzQjd3QyxJQUFmNndDLEVBQTJCaU4sRUFBbUI3aEIsR0FBSzhpQixHQUFrQmpCLEVBQW1CN2hCLEdBQUk0VSxJQTZIbkd0UixlQUFnQnVmLEdBR2hCcFAsaUJBQWtCcVAsR0FHbEI5Yix5QkFBMEJpYyxLQUc1QjVkLEVBQUUsQ0FBRTFzQixPQUFRLFNBQVU0ekIsTUFBTSxFQUFNMUYsUUFBU3VULEdBQWlCLENBRzFEOUUsb0JBQXFCNE4sR0FHckJuUSxzQkFBdUJnUSxLQUt6QjFkLEVBQUUsQ0FBRTFzQixPQUFRLFNBQVU0ekIsTUFBTSxFQUFNMUYsT0FBUWpGLEdBQU0sV0FBY3dVLEVBQTRCOXRDLEVBQUUsT0FBVSxDQUNwR3lxQyxzQkFBdUIsU0FBK0JyVSxHQUNwRCxPQUFPMFgsRUFBNEI5dEMsRUFBRW0zQixFQUFTZixPQU05Q3dqQixHQVdGN2MsRUFBRSxDQUFFMXNCLE9BQVEsT0FBUTR6QixNQUFNLEVBQU0xRixRQVZIdVQsR0FBaUJ4WSxHQUFNLFdBQ2xELElBQUk1bkIsRUFBU2lvQyxJQUViLE1BQStCLFVBQXhCQyxFQUFXLENBQUNsb0MsS0FFZSxNQUE3QmtvQyxFQUFXLENBQUV2d0QsRUFBR3FvQixLQUVjLE1BQTlCa29DLEVBQVc5NEMsT0FBTzRRLFFBR3dDLENBRS9EaWYsVUFBVyxTQUFtQnlGLEVBQUlpaUIsRUFBVWpnQyxHQUkxQyxJQUhBLElBRUk4aUMsRUFGQW41QixFQUFPLENBQUNxVSxHQUNSdG5CLEVBQVEsRUFFTHRULFVBQVV4UyxPQUFTOGxCLEdBQU9pVCxFQUFLbjVCLEtBQUs0UyxVQUFVc1QsTUFFckQsR0FEQW9zQyxFQUFZN0MsR0FDUGhpQixFQUFTZ2lCLFNBQW9CNThDLElBQVAyNkIsS0FBb0Jra0IsR0FBU2xrQixHQU14RCxPQUxLN21CLEVBQVE4b0MsS0FBV0EsRUFBVyxTQUFVeGlELEVBQUswVyxHQUVoRCxHQUR3QixtQkFBYjJ1QyxJQUF5QjN1QyxFQUFRMnVDLEVBQVUvbUMsS0FBS3hxQixLQUFNa00sRUFBSzBXLEtBQ2pFK3RDLEdBQVMvdEMsR0FBUSxPQUFPQSxJQUUvQndWLEVBQUssR0FBS3MyQixFQUNIdUIsRUFBV3orQyxNQUFNLEtBQU00bUIsTUFPL0I0M0IsRUFBaUIsVUFBRUQsSUFDdEI1WixFQUE0QjZaLEVBQWlCLFVBQUdELEVBQWNDLEVBQWlCLFVBQUVucUMsU0FJbkY2dEIsRUFBZXNjLEVBQVNoVixHQUV4QnFDLEVBQVd5UyxJQUFVLEcsZUN0VHJCLElBQUl6YyxFQUFTLEVBQVEsTUFDakJtZSxFQUFlLEVBQVEsTUFDdkJ6d0QsRUFBVSxFQUFRLE1BQ2xCbzFDLEVBQThCLEVBQVEsTUFFMUMsSUFBSyxJQUFJc2IsS0FBbUJELEVBQWMsQ0FDeEMsSUFBSUUsRUFBYXJlLEVBQU9vZSxHQUNwQkUsRUFBc0JELEdBQWNBLEVBQVdsbEQsVUFFbkQsR0FBSW1sRCxHQUF1QkEsRUFBb0I1d0QsVUFBWUEsRUFBUyxJQUNsRW8xQyxFQUE0QndiLEVBQXFCLFVBQVc1d0QsR0FDNUQsTUFBT3FWLEdBQ1B1N0MsRUFBb0I1d0QsUUFBVUEsSyxlQ1psQyxJQUFJc3lDLEVBQVMsRUFBUSxNQUNqQm1lLEVBQWUsRUFBUSxNQUN2QkksRUFBdUIsRUFBUSxNQUMvQnpiLEVBQThCLEVBQVEsTUFDdEN4SixFQUFrQixFQUFRLE1BRTFCNkQsRUFBVzdELEVBQWdCLFlBQzNCcUUsRUFBZ0JyRSxFQUFnQixlQUNoQ2tsQixFQUFjRCxFQUFxQmp0QyxPQUV2QyxJQUFLLElBQUk4c0MsS0FBbUJELEVBQWMsQ0FDeEMsSUFBSUUsRUFBYXJlLEVBQU9vZSxHQUNwQkUsRUFBc0JELEdBQWNBLEVBQVdsbEQsVUFDbkQsR0FBSW1sRCxFQUFxQixDQUV2QixHQUFJQSxFQUFvQm5oQixLQUFjcWhCLEVBQWEsSUFDakQxYixFQUE0QndiLEVBQXFCbmhCLEVBQVVxaEIsR0FDM0QsTUFBT3o3QyxHQUNQdTdDLEVBQW9CbmhCLEdBQVlxaEIsRUFLbEMsR0FIS0YsRUFBb0IzZ0IsSUFDdkJtRixFQUE0QndiLEVBQXFCM2dCLEVBQWV5Z0IsR0FFOURELEVBQWFDLEdBQWtCLElBQUssSUFBSTNoQixLQUFlOGhCLEVBRXpELEdBQUlELEVBQW9CN2hCLEtBQWlCOGhCLEVBQXFCOWhCLEdBQWMsSUFDMUVxRyxFQUE0QndiLEVBQXFCN2hCLEVBQWE4aEIsRUFBcUI5aEIsSUFDbkYsTUFBTzE1QixHQUNQdTdDLEVBQW9CN2hCLEdBQWU4aEIsRUFBcUI5aEIsTyxlQzVCaEUsSUFBSXNELEVBQUksRUFBUSxNQUNaQyxFQUFTLEVBQVEsTUFDakJrRyxFQUFZLEVBQVEsTUFFcEJuMEIsRUFBUSxHQUFHQSxNQUdYb29DLEVBQU8sU0FBVXNFLEdBQ25CLE9BQU8sU0FBVXBGLEVBQVNuMEIsR0FDeEIsSUFBSXc1QixFQUFZbGdELFVBQVV4UyxPQUFTLEVBQy9CKzRCLEVBQU8yNUIsRUFBWTNzQyxFQUFNb0YsS0FBSzNZLFVBQVcsUUFBS0MsRUFDbEQsT0FBT2dnRCxFQUFVQyxFQUFZLFlBRVIsbUJBQVhyRixFQUF3QkEsRUFBVTVsQixTQUFTNGxCLElBQVVsN0MsTUFBTXhSLEtBQU1vNEIsSUFDdkVzMEIsRUFBU24wQixLQU1qQjZhLEVBQUUsQ0FBRUMsUUFBUSxFQUFNNWQsTUFBTSxFQUFNbWYsT0FmbkIsV0FBV3BwQixLQUFLK3RCLElBZW1CLENBRzVDdGdCLFdBQVl1MEIsRUFBS25hLEVBQU9wYSxZQUd4QmdCLFlBQWF1ekIsRUFBS25hLEVBQU9wWixnQixhQzFCM0IsYUFJMEIsMEJBQVAsRUFRaEIsV0FDQyxhQUVBLElBQUkrM0IsRUFBVSxTQVFkLFNBQVNDLEVBQWM3eEIsR0FDbkJBLEVBQUc4eEIsY0FBYzMvQixZQUFZNk4sR0FHakMsU0FBUyt4QixFQUFNdnZDLEdBQ1gsT0FBT0EsUUFJWCxTQUFTd3ZDLEVBQWVqeUQsR0FDcEJBLEVBQUVpeUQsaUJBbUNOLFNBQVNDLEVBQVUzeUQsR0FDZixNQUFvQixpQkFBTkEsSUFBbUJpakIsTUFBTWpqQixJQUFNcXBCLFNBQVNycEIsR0FJMUQsU0FBUzR5RCxFQUFZQyxFQUFTQyxFQUFXMTNCLEdBQ2pDQSxFQUFXLElBQ1gyM0IsRUFBU0YsRUFBU0MsR0FDbEJ2NUIsWUFBVyxXQUNQeTVCLEVBQVlILEVBQVNDLEtBQ3RCMTNCLElBS1gsU0FBUzYzQixFQUFNanpELEdBQ1gsT0FBT25DLEtBQUtrTixJQUFJbE4sS0FBS21OLElBQUloTCxFQUFHLEtBQU0sR0FLdEMsU0FBU2t6RCxFQUFRbHpELEdBQ2IsT0FBT3dELE1BQU0waUIsUUFBUWxtQixHQUFLQSxFQUFJLENBQUNBLEdBSW5DLFNBQVNtekQsRUFBY0MsR0FFbkIsSUFBSUMsR0FESkQsRUFBUzduQyxPQUFPNm5DLElBQ0kzaUMsTUFBTSxLQUMxQixPQUFPNGlDLEVBQU8xekQsT0FBUyxFQUFJMHpELEVBQU8sR0FBRzF6RCxPQUFTLEVBSWxELFNBQVNvekQsRUFBU3J5QixFQUFJb3lCLEdBQ2RweUIsRUFBR2hRLFlBQWMsS0FBSzVFLEtBQUtnbkMsR0FDM0JweUIsRUFBR2hRLFVBQVVockIsSUFBSW90RCxHQUVqQnB5QixFQUFHb3lCLFdBQWEsSUFBTUEsRUFLOUIsU0FBU0UsRUFBWXR5QixFQUFJb3lCLEdBQ2pCcHlCLEVBQUdoUSxZQUFjLEtBQUs1RSxLQUFLZ25DLEdBQzNCcHlCLEVBQUdoUSxVQUFVUyxPQUFPMmhDLEdBRXBCcHlCLEVBQUdveUIsVUFBWXB5QixFQUFHb3lCLFVBQVVyMUQsUUFDeEIsSUFBSTBhLE9BQU8sVUFBWTI2QyxFQUFVcmlDLE1BQU0sS0FBS3hhLEtBQUssS0FBTyxVQUFXLE1BQ25FLEtBYVosU0FBU3E5QyxFQUFjQyxHQUNuQixJQUFJQyxPQUEyQ3BoRCxJQUF2QjZoQixPQUFPdy9CLFlBQzNCQyxFQUEwQyxnQkFBMUJILEVBQUlJLFlBQWMsSUFZdEMsTUFBTyxDQUNINzBELEVBWkkwMEQsRUFDRnYvQixPQUFPdy9CLFlBQ1BDLEVBQ0lILEVBQUloaEMsZ0JBQWdCcWhDLFdBQ3BCTCxFQUFJaDJELEtBQUtxMkQsV0FTZnYwRCxFQVJJbTBELEVBQ0Z2L0IsT0FBTzQvQixZQUNQSCxFQUNJSCxFQUFJaGhDLGdCQUFnQnVoQyxVQUNwQlAsRUFBSWgyRCxLQUFLdTJELFdBOER2QixTQUFTQyxFQUFjQyxFQUFJQyxHQUN2QixPQUFPLEtBQU9BLEVBQUtELEdBSXZCLFNBQVNFLEVBQWUxdEMsRUFBT3RELEVBQU9peEMsR0FDbEMsT0FBZ0IsSUFBUmp4QyxHQUFnQnNELEVBQU0ydEMsRUFBYSxHQUFLM3RDLEVBQU0ydEMsSUFhMUQsU0FBU0MsRUFBS2x4QyxFQUFPbXhDLEdBR2pCLElBRkEsSUFBSWp5RCxFQUFJLEVBRUQ4Z0IsR0FBU214QyxFQUFJanlELElBQ2hCQSxHQUFLLEVBR1QsT0FBT0EsRUFJWCxTQUFTa3lELEVBQVdDLEVBQU1DLEVBQU10eEMsR0FDNUIsR0FBSUEsR0FBU3F4QyxFQUFLN3VDLE9BQU8sR0FBRyxHQUN4QixPQUFPLElBR1gsSUFBSXRqQixFQUFJZ3lELEVBQUtseEMsRUFBT3F4QyxHQUNoQkUsRUFBS0YsRUFBS255RCxFQUFJLEdBQ2RzeUQsRUFBS0gsRUFBS255RCxHQUNWNHhELEVBQUtRLEVBQUtweUQsRUFBSSxHQUNkNnhELEVBQUtPLEVBQUtweUQsR0FFZCxPQUFPNHhELEVBL0JYLFNBQXNCeHRDLEVBQU90RCxHQUN6QixPQUFPZ3hDLEVBQWUxdEMsRUFBT0EsRUFBTSxHQUFLLEVBQUl0RCxFQUFRcmxCLEtBQUtLLElBQUlzb0IsRUFBTSxJQUFNdEQsRUFBUXNELEVBQU0sR0FBSSxHQThCL0VtdUMsQ0FBYSxDQUFDRixFQUFJQyxHQUFLeHhDLEdBQVM2d0MsRUFBY0MsRUFBSUMsR0FvQmxFLFNBQVNXLEVBQVFKLEVBQU1LLEVBQVFDLEVBQU01eEMsR0FDakMsR0FBYyxNQUFWQSxFQUNBLE9BQU9BLEVBR1gsSUFBSTlnQixFQUFJZ3lELEVBQUtseEMsRUFBT3N4QyxHQUNoQngwRCxFQUFJdzBELEVBQUtweUQsRUFBSSxHQUNibkMsRUFBSXUwRCxFQUFLcHlELEdBR2IsT0FBSTB5RCxFQUVJNXhDLEVBQVFsakIsR0FBS0MsRUFBSUQsR0FBSyxFQUNmQyxFQUdKRCxFQUdONjBELEVBQU96eUQsRUFBSSxHQUlUb3lELEVBQUtweUQsRUFBSSxHQW5QcEIsU0FBaUI4Z0IsRUFBT3hjLEdBQ3BCLE9BQU83SSxLQUFLMk4sTUFBTTBYLEVBQVF4YyxHQUFNQSxFQWtQWHF1RCxDQUFRN3hDLEVBQVFzeEMsRUFBS3B5RCxFQUFJLEdBQUl5eUQsRUFBT3p5RCxFQUFJLElBSGxEOGdCLEVBTWYsU0FBUzh4QyxFQUFpQnZ2QyxFQUFPdkMsRUFBT3VWLEdBQ3BDLElBQUl3OEIsRUFRSixHQUxxQixpQkFBVi94QyxJQUNQQSxFQUFRLENBQUNBLEtBSVIxZixNQUFNMGlCLFFBQVFoRCxHQUNmLE1BQU0sSUFBSStFLE1BQU0sd0RBYXBCLElBQUswcUMsRUFSRHNDLEVBRFUsUUFBVnh2QyxFQUNhLEVBQ0ksUUFBVkEsRUFDTSxJQUVBOGMsV0FBVzljLE1BSUdrdEMsRUFBVXp2QyxFQUFNLElBQzNDLE1BQU0sSUFBSStFLE1BQU0scURBSXBCd1EsRUFBSys3QixLQUFLajFELEtBQUswMUQsR0FDZng4QixFQUFLODdCLEtBQUtoMUQsS0FBSzJqQixFQUFNLElBS2hCK3hDLEVBS0R4OEIsRUFBS284QixPQUFPdDFELE1BQUswakIsTUFBTUMsRUFBTSxLQUFjQSxFQUFNLElBSjVDRCxNQUFNQyxFQUFNLE1BQ2J1VixFQUFLbzhCLE9BQU8sR0FBSzN4QyxFQUFNLElBTS9CdVYsRUFBS3k4QixxQkFBcUIzMUQsS0FBSyxHQUduQyxTQUFTNDFELEVBQWdCajBELEVBQUdQLEVBQUc4M0IsR0FFM0IsR0FBSzkzQixFQUtMLEdBQUk4M0IsRUFBSzg3QixLQUFLcnpELEtBQU91M0IsRUFBSzg3QixLQUFLcnpELEVBQUksR0FBbkMsQ0FPQXUzQixFQUFLbzhCLE9BQU8zekQsR0FDUmd6RCxFQUFlLENBQUN6N0IsRUFBSzg3QixLQUFLcnpELEdBQUl1M0IsRUFBSzg3QixLQUFLcnpELEVBQUksSUFBS1AsRUFBRyxHQUFLb3pELEVBQWN0N0IsRUFBSys3QixLQUFLdHpELEdBQUl1M0IsRUFBSys3QixLQUFLdHpELEVBQUksSUFFdkcsSUFBSWswRCxHQUFjMzhCLEVBQUs4N0IsS0FBS3J6RCxFQUFJLEdBQUt1M0IsRUFBSzg3QixLQUFLcnpELElBQU11M0IsRUFBSzQ4QixVQUFVbjBELEdBQ2hFbzBELEVBQWN6M0QsS0FBS1MsS0FBS3lzQixPQUFPcXFDLEVBQVd4c0MsUUFBUSxJQUFNLEdBQ3hEM2YsRUFBT3d2QixFQUFLODdCLEtBQUtyekQsR0FBS3UzQixFQUFLNDhCLFVBQVVuMEQsR0FBS28wRCxFQUU5Qzc4QixFQUFLeThCLHFCQUFxQmgwRCxHQUFLK0gsT0FiM0J3dkIsRUFBS284QixPQUFPM3pELEdBQUt1M0IsRUFBS3k4QixxQkFBcUJoMEQsR0FBS3UzQixFQUFLODdCLEtBQUtyekQsR0FvQmxFLFNBQVNxMEQsRUFBU2wxRCxFQUFPeTBELEVBQU1VLEdBUzNCLElBQUkvdkMsRUFSSm5sQixLQUFLazBELEtBQU8sR0FDWmwwRCxLQUFLaTBELEtBQU8sR0FDWmowRCxLQUFLdTBELE9BQVMsQ0FBQ1csSUFBYyxHQUM3QmwxRCxLQUFLKzBELFVBQVksRUFBQyxHQUNsQi8wRCxLQUFLNDBELHFCQUF1QixHQUU1QjUwRCxLQUFLdzBELEtBQU9BLEVBR1osSUFBSVcsRUFBVSxHQUdkLElBQUtod0MsS0FBU3BsQixFQUNOQSxFQUFNdU0sZUFBZTZZLElBQ3JCZ3dDLEVBQVFsMkQsS0FBSyxDQUFDYyxFQUFNb2xCLEdBQVFBLElBZ0JwQyxJQVhJZ3dDLEVBQVE5MUQsUUFBbUMsaUJBQWxCODFELEVBQVEsR0FBRyxHQUNwQ0EsRUFBUS96RCxNQUFLLFNBQVMxQixFQUFHQyxHQUNyQixPQUFPRCxFQUFFLEdBQUcsR0FBS0MsRUFBRSxHQUFHLE1BRzFCdzFELEVBQVEvekQsTUFBSyxTQUFTMUIsRUFBR0MsR0FDckIsT0FBT0QsRUFBRSxHQUFLQyxFQUFFLE1BS25Cd2xCLEVBQVEsRUFBR0EsRUFBUWd3QyxFQUFROTFELE9BQVE4bEIsSUFDcEN1dkMsRUFBaUJTLEVBQVFod0MsR0FBTyxHQUFJZ3dDLEVBQVFod0MsR0FBTyxHQUFJbmxCLE1BUTNELElBSEFBLEtBQUsrMEQsVUFBWS8wRCxLQUFLdTBELE9BQU9udkMsTUFBTSxHQUc5QkQsRUFBUSxFQUFHQSxFQUFRbmxCLEtBQUsrMEQsVUFBVTExRCxPQUFROGxCLElBQzNDMHZDLEVBQWdCMXZDLEVBQU9ubEIsS0FBSyswRCxVQUFVNXZDLEdBQVFubEIsTUFJdERpMUQsRUFBU3pvRCxVQUFVNG9ELFlBQWMsU0FBU3h5QyxHQUN0QyxJQUFJdUMsRUFDQWt3QyxFQUFZLEdBRWhCLElBQUtsd0MsRUFBUSxFQUFHQSxFQUFRbmxCLEtBQUsrMEQsVUFBVTExRCxPQUFTLEVBQUc4bEIsSUFBUyxDQUV4RCxJQUFJeGMsRUFBTzNJLEtBQUsrMEQsVUFBVTV2QyxHQUUxQixHQUFJeGMsR0FBU2lhLEVBQVFqYSxFQUFRLEdBQU0sRUFDL0IsTUFBTSxJQUFJZ2YsTUFDTiwyREFHSTNuQixLQUFLazBELEtBQUsvdUMsR0FDVixzQ0FLWmt3QyxFQUFVbHdDLEdBQVN5dUMsRUFBZTV6RCxLQUFLaTBELEtBQU1yeEMsRUFBT3VDLEdBR3hELE9BQU9rd0MsR0FLWEosRUFBU3pvRCxVQUFVOG9ELG9CQUFzQixTQUFTMXlDLEVBQU95eUMsRUFBV2h2RCxHQUNoRSxJQWdCSWt2RCxFQWhCQUMsRUFBYSxFQUdqQixHQUFJNXlDLEVBQVE1aUIsS0FBS2swRCxLQUFLbDBELEtBQUtrMEQsS0FBSzcwRCxPQUFTLEdBQ3JDLEtBQU91akIsRUFBUTVpQixLQUFLazBELEtBQUtzQixFQUFhLElBQ2xDQSxTQUVHNXlDLElBQVU1aUIsS0FBS2swRCxLQUFLbDBELEtBQUtrMEQsS0FBSzcwRCxPQUFTLEtBQzlDbTJELEVBQWF4MUQsS0FBS2swRCxLQUFLNzBELE9BQVMsR0FJL0JnSCxHQUFhdWMsSUFBVTVpQixLQUFLazBELEtBQUtzQixFQUFhLElBQy9DQSxJQUlKLElBQUlDLEVBQWMsRUFFZEMsRUFBb0JMLEVBQVVHLEdBRTlCRyxFQUFZLEVBRVpDLEVBQXFCLEVBQ3JCQyxFQUF1QixFQUN2QkMsRUFBZ0IsRUFVcEIsSUFOSVAsRUFEQWx2RCxHQUNnQnVjLEVBQVE1aUIsS0FBS2swRCxLQUFLc0IsS0FBZ0J4MUQsS0FBS2swRCxLQUFLc0IsRUFBYSxHQUFLeDFELEtBQUtrMEQsS0FBS3NCLEtBRXhFeDFELEtBQUtrMEQsS0FBS3NCLEVBQWEsR0FBSzV5QyxJQUFVNWlCLEtBQUtrMEQsS0FBS3NCLEVBQWEsR0FBS3gxRCxLQUFLazBELEtBQUtzQixJQUl6RkUsRUFBb0IsR0FFdkJDLEVBQVkzMUQsS0FBS2swRCxLQUFLc0IsRUFBYSxFQUFJTSxHQUFpQjkxRCxLQUFLazBELEtBQUtzQixFQUFhTSxHQUczRVQsRUFBVUcsRUFBYU0sR0FBaUJMLEVBQWMsSUFBcUIsSUFBZkYsRUFBcUIsS0FFakZLLEVBQXFCRCxFQUFZSixFQUVqQ0UsR0FBZUMsRUFBb0IsSUFBTUgsR0FBZ0JGLEVBQVVHLEVBQWFNLEdBRWhGUCxFQUFlLElBR2ZLLEVBQXVCUCxFQUFVRyxFQUFhTSxHQUFpQkgsRUFBYSxJQUFPRixFQUVuRkEsRUFBYyxHQUdkcHZELEdBQ0F3dkQsR0FBOENELEVBRTFDNTFELEtBQUtrMEQsS0FBSzcwRCxPQUFTeTJELEdBQWlCLEdBQ3BDQSxNQUdKRCxHQUE4Q0QsRUFFMUM1MUQsS0FBS2swRCxLQUFLNzBELE9BQVN5MkQsR0FBaUIsR0FDcENBLEtBS1JKLEVBQW9CTCxFQUFVRyxFQUFhTSxHQUFpQkwsRUFHaEUsT0FBTzd5QyxFQUFRaXpDLEdBR25CWixFQUFTem9ELFVBQVV3bkQsV0FBYSxTQUFTcHhDLEdBR3JDLE9BRlFveEMsRUFBV2gwRCxLQUFLaTBELEtBQU1qMEQsS0FBS2swRCxLQUFNdHhDLElBSzdDcXlDLEVBQVN6b0QsVUFBVXVwRCxhQUFlLFNBQVNuekMsR0FDdkMsT0E5UUosU0FBc0JxeEMsRUFBTUMsRUFBTXR4QyxHQUU5QixHQUFJQSxHQUFTLElBQ1QsT0FBT3F4QyxFQUFLN3VDLE9BQU8sR0FBRyxHQUcxQixJQUFJdGpCLEVBQUlneUQsRUFBS2x4QyxFQUFPc3hDLEdBQ2hCQyxFQUFLRixFQUFLbnlELEVBQUksR0FDZHN5RCxFQUFLSCxFQUFLbnlELEdBQ1Y0eEQsRUFBS1EsRUFBS3B5RCxFQUFJLEdBR2xCLE9BMUNKLFNBQXNCb2tCLEVBQU90RCxHQUN6QixPQUFRQSxHQUFTc0QsRUFBTSxHQUFLQSxFQUFNLElBQU8sSUFBTUEsRUFBTSxHQXlDOUM4dkMsQ0FBYSxDQUFDN0IsRUFBSUMsSUFBTXh4QyxFQUFROHdDLEdBQU1ELEVBQWNDLEVBRmxEUSxFQUFLcHlELEtBb1FQaTBELENBQWEvMUQsS0FBS2kwRCxLQUFNajBELEtBQUtrMEQsS0FBTXR4QyxJQUc5Q3F5QyxFQUFTem9ELFVBQVU4bkQsUUFBVSxTQUFTMXhDLEdBR2xDLE9BRlEweEMsRUFBUXQwRCxLQUFLazBELEtBQU1sMEQsS0FBS3UwRCxPQUFRdjBELEtBQUt3MEQsS0FBTTV4QyxJQUt2RHF5QyxFQUFTem9ELFVBQVV5cEQsZUFBaUIsU0FBU3J6QyxFQUFPc3pDLEVBQVE5akQsR0FDeEQsSUFBSXRRLEVBQUlneUQsRUFBS2x4QyxFQUFPNWlCLEtBQUtrMEQsTUFPekIsT0FKYyxNQUFWdHhDLEdBQWtCc3pDLEdBQVV0ekMsSUFBVTVpQixLQUFLazBELEtBQUtweUQsRUFBSSxNQUNwREEsRUFBSXZFLEtBQUtrTixJQUFJM0ksRUFBSSxFQUFHLEtBR2hCOUIsS0FBS2kwRCxLQUFLbnlELEdBQUs5QixLQUFLaTBELEtBQUtueUQsRUFBSSxJQUFNc1EsR0FHL0M2aUQsRUFBU3pvRCxVQUFVMnBELGVBQWlCLFNBQVN2ekMsR0FDekMsSUFBSTlnQixFQUFJZ3lELEVBQUtseEMsRUFBTzVpQixLQUFLazBELE1BRXpCLE1BQU8sQ0FDSGtDLFdBQVksQ0FDUkMsV0FBWXIyRCxLQUFLaTBELEtBQUtueUQsRUFBSSxHQUMxQjZHLEtBQU0zSSxLQUFLKzBELFVBQVVqekQsRUFBSSxHQUN6Qmt6RCxZQUFhaDFELEtBQUs0MEQscUJBQXFCOXlELEVBQUksSUFFL0N3MEQsU0FBVSxDQUNORCxXQUFZcjJELEtBQUtpMEQsS0FBS255RCxFQUFJLEdBQzFCNkcsS0FBTTNJLEtBQUsrMEQsVUFBVWp6RCxFQUFJLEdBQ3pCa3pELFlBQWFoMUQsS0FBSzQwRCxxQkFBcUI5eUQsRUFBSSxJQUUvQ3kwRCxVQUFXLENBQ1BGLFdBQVlyMkQsS0FBS2kwRCxLQUFLbnlELEdBQ3RCNkcsS0FBTTNJLEtBQUsrMEQsVUFBVWp6RCxHQUNyQmt6RCxZQUFhaDFELEtBQUs0MEQscUJBQXFCOXlELE1BS25EbXpELEVBQVN6b0QsVUFBVWdxRCxrQkFBb0IsV0FDbkMsSUFBSUMsRUFBZXoyRCxLQUFLKzBELFVBQVU1dEMsSUFBSTByQyxHQUN0QyxPQUFPdDFELEtBQUtrTixJQUFJK0csTUFBTSxLQUFNaWxELElBSWhDeEIsRUFBU3pvRCxVQUFVbzhCLFFBQVUsU0FBU2htQixHQUNsQyxPQUFPNWlCLEtBQUtzMEQsUUFBUXQwRCxLQUFLZzBELFdBQVdweEMsS0FzQnhDLElBQUk4ekMsRUFBbUIsQ0FDbkJ0d0QsR0FBSSxTQUFTd2MsR0FDVCxZQUFpQjlRLElBQVY4USxHQUF1QkEsRUFBTTBGLFFBQVEsSUFFaERubEIsS0FBTXNuQixRQUdOa3NDLEVBQWEsQ0FDYmp3QyxPQUFRLFNBQ1Jrd0MsS0FBTSxPQUNOQyxPQUFRLFNBQ1I1d0IsT0FBUSxTQUNSNndCLFlBQWEsZUFDYkMsWUFBYSxlQUNiQyxVQUFXLGFBQ1hDLFdBQVksYUFDWkMsU0FBVSxXQUNWQyxXQUFZLGFBQ1p4eEIsUUFBUyxVQUNUeXhCLFNBQVUsV0FDVkMsSUFBSyxNQUNMQyxJQUFLLE1BQ0xDLGlCQUFrQixjQUNsQkMsaUJBQWtCLGNBQ2xCQyxVQUFXLFlBQ1hDLEtBQU0sYUFDTkMsSUFBSyxZQUNMaDRCLE9BQVEsU0FDUjRELFFBQVMsVUFDVHNDLEtBQU0sT0FDTit4QixlQUFnQixrQkFDaEJDLGFBQWMsZ0JBQ2RDLE9BQVEsU0FDUkMsaUJBQWtCLG9CQUNsQkMsZUFBZ0Isa0JBQ2hCQyxhQUFjLGdCQUNkQyxZQUFhLGVBQ2JDLFVBQVcsYUFDWHYxQyxNQUFPLFFBQ1B3MUMsZ0JBQWlCLG1CQUNqQkMsY0FBZSxpQkFDZkMsWUFBYSxlQUNiQyxXQUFZLGNBQ1pDLFNBQVUsYUFJVkMsRUFDVSxjQURWQSxFQUVNLFVBS1YsU0FBU0MsRUFBZTM0RCxHQUVwQixHQWxuQkosU0FBMEJBLEdBQ3RCLE1BQXdCLGlCQUFWQSxHQUEwQyxtQkFBYkEsRUFBTXFHLElBQTJDLG1CQUFmckcsRUFBTW9ELEtBaW5CL0V3MUQsQ0FBaUI1NEQsR0FDakIsT0FBTyxFQUdYLE1BQU0sSUFBSTRuQixNQUFNLG1FQUdwQixTQUFTaXhDLEVBQVNDLEVBQVE5NEQsR0FDdEIsSUFBS3N5RCxFQUFVdHlELEdBQ1gsTUFBTSxJQUFJNG5CLE1BQU0sK0NBS3BCa3hDLEVBQU8zRCxXQUFhbjFELEVBR3hCLFNBQVMrNEQsRUFBMkJELEVBQVE5NEQsR0FDeEMsSUFBS3N5RCxFQUFVdHlELEdBQ1gsTUFBTSxJQUFJNG5CLE1BQU0saUVBR3BCa3hDLEVBQU9FLHVCQUF5Qmg1RCxFQUdwQyxTQUFTaTVELEVBQXdCSCxFQUFROTRELEdBQ3JDLElBQUtzeUQsRUFBVXR5RCxHQUNYLE1BQU0sSUFBSTRuQixNQUFNLDhEQUdwQmt4QyxFQUFPSSxvQkFBc0JsNUQsRUFHakMsU0FBU201RCxFQUFVTCxFQUFROTRELEdBRXZCLEdBQXFCLGlCQUFWQSxHQUFzQm1ELE1BQU0waUIsUUFBUTdsQixHQUMzQyxNQUFNLElBQUk0bkIsTUFBTSxrREFJcEIsUUFBa0I3VixJQUFkL1IsRUFBTTJLLFVBQW1Db0gsSUFBZC9SLEVBQU0wSyxJQUNqQyxNQUFNLElBQUlrZCxNQUFNLDJEQUlwQixHQUFJNW5CLEVBQU0ySyxNQUFRM0ssRUFBTTBLLElBQ3BCLE1BQU0sSUFBSWtkLE1BQU0saUVBR3BCa3hDLEVBQU9NLFNBQVcsSUFBSWxFLEVBQVNsMUQsRUFBTzg0RCxFQUFPckUsS0FBTXFFLEVBQU8zRCxZQUc5RCxTQUFTa0UsRUFBVVAsRUFBUTk0RCxHQUt2QixHQUpBQSxFQUFRNnlELEVBQVE3eUQsSUFJWG1ELE1BQU0waUIsUUFBUTdsQixLQUFXQSxFQUFNVixPQUNoQyxNQUFNLElBQUlzb0IsTUFBTSxxREFJcEJreEMsRUFBT1EsUUFBVXQ1RCxFQUFNVixPQUl2Qnc1RCxFQUFPeDNELE1BQVF0QixFQUduQixTQUFTdTVELEVBQVNULEVBQVE5NEQsR0FJdEIsR0FGQTg0RCxFQUFPckUsS0FBT3owRCxFQUVPLGtCQUFWQSxFQUNQLE1BQU0sSUFBSTRuQixNQUFNLHlEQUl4QixTQUFTNHhDLEVBQVlWLEVBQVE5NEQsR0FJekIsR0FGQTg0RCxFQUFPVyxRQUFVejVELEVBRUksa0JBQVZBLEVBQ1AsTUFBTSxJQUFJNG5CLE1BQU0sNERBSXhCLFNBQVM4eEMsRUFBc0JaLEVBQVE5NEQsR0FHbkMsR0FGQTg0RCxFQUFPYSxrQkFBb0IzNUQsRUFFTixpQkFBVkEsRUFDUCxNQUFNLElBQUk0bkIsTUFBTSxxRUFJeEIsU0FBU2d5QyxFQUFZZCxFQUFROTRELEdBQ3pCLElBQ0lhLEVBREEra0MsRUFBVSxFQUFDLEdBV2YsR0FQYyxVQUFWNWxDLEVBQ0FBLEVBQVEsRUFBQyxHQUFNLEdBQ0UsVUFBVkEsSUFDUEEsRUFBUSxFQUFDLEdBQU8sS0FJTixJQUFWQSxJQUE0QixJQUFWQSxFQUFpQixDQUNuQyxJQUFLYSxFQUFJLEVBQUdBLEVBQUlpNEQsRUFBT1EsUUFBU3o0RCxJQUM1QitrQyxFQUFRMW1DLEtBQUtjLEdBR2pCNGxDLEVBQVExbUMsTUFBSyxPQUlaLEtBQUtpRSxNQUFNMGlCLFFBQVE3bEIsS0FBV0EsRUFBTVYsUUFBVVUsRUFBTVYsU0FBV3c1RCxFQUFPUSxRQUFVLEVBQ2pGLE1BQU0sSUFBSTF4QyxNQUFNLHFFQUVoQmdlLEVBQVU1bEMsRUFHZDg0RCxFQUFPbHpCLFFBQVVBLEVBR3JCLFNBQVNpMEIsRUFBZ0JmLEVBQVE5NEQsR0FHN0IsT0FBUUEsR0FDSixJQUFLLGFBQ0Q4NEQsRUFBT2dCLElBQU0sRUFDYixNQUNKLElBQUssV0FDRGhCLEVBQU9nQixJQUFNLEVBQ2IsTUFDSixRQUNJLE1BQU0sSUFBSWx5QyxNQUFNLDBEQUk1QixTQUFTbXlDLEVBQVdqQixFQUFROTRELEdBQ3hCLElBQUtzeUQsRUFBVXR5RCxHQUNYLE1BQU0sSUFBSTRuQixNQUFNLHlEQUlOLElBQVY1bkIsSUFJSjg0RCxFQUFPcDRCLE9BQVNvNEIsRUFBT00sU0FBUy9ELFlBQVlyMUQsSUFHaEQsU0FBU2c2RCxFQUFVbEIsRUFBUTk0RCxHQUN2QixJQUFLc3lELEVBQVV0eUQsR0FDWCxNQUFNLElBQUk0bkIsTUFBTSx3REFLcEIsR0FGQWt4QyxFQUFPbEcsTUFBUWtHLEVBQU9NLFNBQVMvRCxZQUFZcjFELElBRXRDODRELEVBQU9sRyxPQUFTa0csRUFBT1EsUUFBVSxFQUNsQyxNQUFNLElBQUkxeEMsTUFDTixtR0FPWixTQUFTcXlDLEVBQVluQixFQUFROTRELEdBQ3pCLElBQUlvbEIsRUFFSixJQUFLa3RDLEVBQVV0eUQsS0FBV21ELE1BQU0waUIsUUFBUTdsQixHQUNwQyxNQUFNLElBQUk0bkIsTUFDTix3RkFJUixHQUFJemtCLE1BQU0waUIsUUFBUTdsQixJQUE2QixJQUFqQkEsRUFBTVYsU0FBZ0JnekQsRUFBVXR5RCxFQUFNLE1BQU9zeUQsRUFBVXR5RCxFQUFNLElBQ3ZGLE1BQU0sSUFBSTRuQixNQUNOLHdGQUlSLEdBQWMsSUFBVjVuQixFQUFKLENBV0EsSUFQS21ELE1BQU0waUIsUUFBUTdsQixLQUNmQSxFQUFRLENBQUNBLEVBQU9BLElBSXBCODRELEVBQU8zc0MsUUFBVSxDQUFDMnNDLEVBQU9NLFNBQVMvRCxZQUFZcjFELEVBQU0sSUFBSzg0RCxFQUFPTSxTQUFTL0QsWUFBWXIxRCxFQUFNLEtBRXRGb2xCLEVBQVEsRUFBR0EsRUFBUTB6QyxFQUFPTSxTQUFTcEUsVUFBVTExRCxPQUFTLEVBQUc4bEIsSUFFMUQsR0FBSTB6QyxFQUFPM3NDLFFBQVEsR0FBRy9HLEdBQVMsR0FBSzB6QyxFQUFPM3NDLFFBQVEsR0FBRy9HLEdBQVMsRUFDM0QsTUFBTSxJQUFJd0MsTUFBTSx1RUFJeEIsSUFBSXN5QyxFQUFlbDZELEVBQU0sR0FBS0EsRUFBTSxHQUNoQ202RCxFQUFhckIsRUFBT00sU0FBU2xGLEtBQUssR0FHdEMsR0FBSWdHLEdBRllwQixFQUFPTSxTQUFTbEYsS0FBSzRFLEVBQU9NLFNBQVNsRixLQUFLNTBELE9BQVMsR0FFbkM2NkQsR0FBYyxFQUMxQyxNQUFNLElBQUl2eUMsTUFBTSw2RUFJeEIsU0FBU3d5QyxFQUFjdEIsRUFBUTk0RCxHQUkzQixPQUFRQSxHQUNKLElBQUssTUFDRDg0RCxFQUFPdUIsSUFBTSxFQUNiLE1BQ0osSUFBSyxNQUNEdkIsRUFBT3VCLElBQU0sRUFDYixNQUNKLFFBQ0ksTUFBTSxJQUFJenlDLE1BQU0sZ0VBSTVCLFNBQVMweUMsRUFBY3hCLEVBQVE5NEQsR0FFM0IsR0FBcUIsaUJBQVZBLEVBQ1AsTUFBTSxJQUFJNG5CLE1BQU0seUVBS3BCLElBQUlnd0MsRUFBTTUzRCxFQUFNb29CLFFBQVEsUUFBVSxFQUM5QnV2QyxFQUFPMzNELEVBQU1vb0IsUUFBUSxTQUFXLEVBQ2hDbXlDLEVBQVF2NkQsRUFBTW9vQixRQUFRLFVBQVksRUFDbENxc0MsRUFBT3owRCxFQUFNb29CLFFBQVEsU0FBVyxFQUNoQ295QyxFQUFReDZELEVBQU1vb0IsUUFBUSxVQUFZLEVBQ2xDcXlDLEVBQWdCejZELEVBQU1vb0IsUUFBUSxrQkFBb0IsRUFFdEQsR0FBSW15QyxFQUFPLENBQ1AsR0FBdUIsSUFBbkJ6QixFQUFPUSxRQUNQLE1BQU0sSUFBSTF4QyxNQUFNLHNFQUlwQm15QyxFQUFXakIsRUFBUUEsRUFBT3gzRCxNQUFNLEdBQUt3M0QsRUFBT3gzRCxNQUFNLElBR3RELEdBQUltNUQsSUFBa0IzQixFQUFPcDRCLFFBQVVvNEIsRUFBT2xHLE9BQzFDLE1BQU0sSUFBSWhyQyxNQUNOLHNGQUlSa3hDLEVBQU80QixPQUFTLENBQ1o5QyxJQUFLQSxHQUFPbkQsRUFDWmtELEtBQU1BLEVBQ040QyxNQUFPQSxFQUNQOUYsS0FBTUEsRUFDTitGLE1BQU9BLEVBQ1BDLGNBQWVBLEdBSXZCLFNBQVNFLEVBQWE3QixFQUFROTRELEdBQzFCLElBQWMsSUFBVkEsRUFJSixJQUFjLElBQVZBLEVBQWdCLENBQ2hCODRELEVBQU84QixTQUFXLEdBRWxCLElBQUssSUFBSS81RCxFQUFJLEVBQUdBLEVBQUlpNEQsRUFBT1EsUUFBU3o0RCxJQUNoQ2k0RCxFQUFPOEIsU0FBUzE3RCxNQUFLLE9BRXRCLENBR0gsR0FGQTQ1RCxFQUFPOEIsU0FBVy9ILEVBQVE3eUQsR0FFdEI4NEQsRUFBTzhCLFNBQVN0N0QsU0FBV3c1RCxFQUFPUSxRQUNsQyxNQUFNLElBQUkxeEMsTUFBTSwrREFHcEJreEMsRUFBTzhCLFNBQVM1NUQsU0FBUSxTQUFTNjVELEdBQzdCLEdBQ3lCLGtCQUFkQSxJQUNlLGlCQUFkQSxHQUFrRCxtQkFBakJBLEVBQVV4MEQsSUFFbkQsTUFBTSxJQUFJdWhCLE1BQU0sOEVBTWhDLFNBQVNrekMsRUFBZWhDLEVBQVE5NEQsR0FDNUI4NEQsRUFBT2lDLFdBQWEvNkQsRUFDcEIyNEQsRUFBZTM0RCxHQUduQixTQUFTZzdELEVBQVdsQyxFQUFROTRELEdBQ3hCODRELEVBQU9oM0MsT0FBUzloQixFQUNoQjI0RCxFQUFlMzRELEdBR25CLFNBQVNpN0QsRUFBb0JuQyxFQUFROTRELEdBR2pDLEdBRkE4NEQsRUFBT29DLGdCQUFrQmw3RCxFQUVKLGtCQUFWQSxFQUNQLE1BQU0sSUFBSTRuQixNQUFNLG9FQUl4QixTQUFTdXpDLEVBQW9CckMsRUFBUTk0RCxHQUVqQzg0RCxFQUFPNW1DLGdCQUFrQmx5QixFQUc3QixTQUFTbzdELEVBQWN0QyxFQUFROTRELEdBQzNCLEdBQXFCLGlCQUFWQSxJQUFnQyxJQUFWQSxFQUM3QixNQUFNLElBQUk0bkIsTUFBTSxpRUFHcEJreEMsRUFBT3VDLFVBQVlyN0QsRUFHdkIsU0FBU3M3RCxFQUFleEMsRUFBUTk0RCxHQUM1QixHQUFxQixpQkFBVkEsRUFDUCxNQUFNLElBQUk0bkIsTUFBTSx3REFHcEIsR0FBZ0MsaUJBQXJCa3hDLEVBQU91QyxVQUdkLElBQUssSUFBSWx2RCxLQUZUMnNELEVBQU9sQyxXQUFhLEdBRUo1MkQsRUFDUEEsRUFBTXVNLGVBQWVKLEtBSTFCMnNELEVBQU9sQyxXQUFXenFELEdBQU8yc0QsRUFBT3VDLFVBQVlyN0QsRUFBTW1NLFNBR3REMnNELEVBQU9sQyxXQUFhNTJELEVBSzVCLFNBQVN1N0QsRUFBWWxvQyxHQUtqQixJQUFJeWxDLEVBQVMsQ0FDVHA0QixPQUFRLEVBQ1JreUIsTUFBTyxFQUNQem1DLFFBQVMsRUFDVHN0QyxTQUFTLEVBQ1RFLGtCQUFtQixJQUNuQm9CLFdBQVlwRSxFQUNaNzBDLE9BQVE2MEMsR0FJUjZFLEVBQVEsQ0FDUjV5RCxLQUFNLENBQUVULEdBQUcsRUFBT0wsRUFBRyt3RCxHQUNyQkcsdUJBQXdCLENBQUU3d0QsR0FBRyxFQUFPTCxFQUFHaXhELEdBQ3ZDRyxvQkFBcUIsQ0FBRS93RCxHQUFHLEVBQU9MLEVBQUdteEQsR0FDcEMzM0QsTUFBTyxDQUFFNkcsR0FBRyxFQUFNTCxFQUFHdXhELEdBQ3JCenpCLFFBQVMsQ0FBRXo5QixHQUFHLEVBQU1MLEVBQUc4eEQsR0FDdkJ0ekQsVUFBVyxDQUFFNkIsR0FBRyxFQUFNTCxFQUFHc3lELEdBQ3pCM0YsS0FBTSxDQUFFdHNELEdBQUcsRUFBT0wsRUFBR3l4RCxHQUNyQkUsUUFBUyxDQUFFdHhELEdBQUcsRUFBT0wsRUFBRzB4RCxHQUN4Qkcsa0JBQW1CLENBQUV4eEQsR0FBRyxFQUFPTCxFQUFHNHhELEdBQ2xDdnpDLE1BQU8sQ0FBRWhlLEdBQUcsRUFBTUwsRUFBR3F4RCxHQUNyQnNDLFlBQWEsQ0FBRXR6RCxHQUFHLEVBQU9MLEVBQUcreEQsR0FDNUJuNUIsT0FBUSxDQUFFdjRCLEdBQUcsRUFBT0wsRUFBR2l5RCxHQUN2Qm5ILE1BQU8sQ0FBRXpxRCxHQUFHLEVBQU9MLEVBQUdreUQsR0FDdEI3dEMsUUFBUyxDQUFFaGtCLEdBQUcsRUFBT0wsRUFBR215RCxHQUN4QnAwQixVQUFXLENBQUUxOUIsR0FBRyxFQUFNTCxFQUFHd3lELEdBQ3pCUyxXQUFZLENBQUU1eUQsR0FBRyxFQUFPTCxFQUFHZ3pELEdBQzNCaDVDLE9BQVEsQ0FBRTNaLEdBQUcsRUFBT0wsRUFBR2t6RCxHQUN2QkosU0FBVSxDQUFFenlELEdBQUcsRUFBT0wsRUFBRzZ5RCxHQUN6Qk8sZ0JBQWlCLENBQUUveUQsR0FBRyxFQUFNTCxFQUFHbXpELEdBQy9CL29DLGdCQUFpQixDQUFFL3BCLEdBQUcsRUFBT0wsRUFBR3F6RCxHQUNoQ0UsVUFBVyxDQUFFbHpELEdBQUcsRUFBTUwsRUFBR3N6RCxHQUN6QnhFLFdBQVksQ0FBRXp1RCxHQUFHLEVBQU1MLEVBQUd3ekQsSUFHMUJJLEVBQVcsQ0FDWDkxQixTQUFTLEVBQ1R0L0IsVUFBVyxNQUNYdS9CLFVBQVcsTUFDWDQxQixZQUFhLGFBQ2JQLGlCQUFpQixFQUNqQkcsVUFBVyxRQUNYekUsV0FBWUEsRUFDWm9DLHVCQUF3QixFQUN4QkUsb0JBQXFCLElBSXJCN2xDLEVBQVF2UixTQUFXdVIsRUFBUTBuQyxhQUMzQjFuQyxFQUFRMG5DLFdBQWExbkMsRUFBUXZSLFFBTWpDMUssT0FBTzBzQixLQUFLMDNCLEdBQU94NkQsU0FBUSxTQUFTd3RCLEdBRWhDLElBQUs0akMsRUFBTS8rQixFQUFRN0UsVUFBNkJ6YyxJQUFuQjJwRCxFQUFTbHRDLEdBQXFCLENBQ3ZELEdBQUlndEMsRUFBTWh0QyxHQUFNcm1CLEVBQ1osTUFBTSxJQUFJeWYsTUFBTSx5QkFBb0M0RyxFQUFPLGtCQUcvRCxPQUFPLEVBR1hndEMsRUFBTWh0QyxHQUFNMW1CLEVBQUVneEQsRUFBUzFHLEVBQU0vK0IsRUFBUTdFLElBQTBCNkUsRUFBUTdFLEdBQXpCa3RDLEVBQVNsdEMsT0FJM0RzcUMsRUFBT2h6QixLQUFPelMsRUFBUXlTLEtBTXRCLElBQUloakMsRUFBSTdGLFNBQVNrMUIsY0FBYyxPQUMzQndwQyxPQUFtQzVwRCxJQUF4QmpQLEVBQUUyc0IsTUFBTW1zQyxZQUNuQkMsT0FBaUM5cEQsSUFBdEJqUCxFQUFFMnNCLE1BQU1yZixVQUV2QjBvRCxFQUFPZ0QsY0FBZ0JELEVBQVcsWUFBY0YsRUFBVyxjQUFnQixrQkFPM0UsT0FGQTdDLEVBQU9ycEMsTUFGTSxDQUFDLENBQUMsT0FBUSxPQUFRLENBQUMsUUFBUyxXQUVuQnFwQyxFQUFPdUIsS0FBS3ZCLEVBQU9nQixLQUVsQ2hCLEVBS1gsU0FBU2lELEVBQU1wMUMsRUFBUTBNLEVBQVMyb0MsR0FDNUIsSUFRSUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFXQUMsRUFzNUJzQnoyQixFQTV6QlAwMkIsRUFqSGZDLEVBeDZCRzVvQyxPQUFPNm9DLFVBQVVDLGVBQ2xCLENBQ0lwN0QsTUFBTyxjQUNQcTdELEtBQU0sY0FDTng0QyxJQUFLLGFBRVR5UCxPQUFPNm9DLFVBQVVHLGlCQUNiLENBQ0l0N0QsTUFBTyxnQkFDUHE3RCxLQUFNLGdCQUNOeDRDLElBQUssZUFFVCxDQUNJN2lCLE1BQU8sdUJBQ1BxN0QsS0FBTSxzQkFDTng0QyxJQUFLLG9CQTI1QmYwNEMsRUFsNEJHanBDLE9BQU9rcEMsS0FBT0EsSUFBSUMsVUFBWUQsSUFBSUMsU0FBUyxlQUFnQixTQW5CdEUsV0FDSSxJQUFJRixHQUFrQixFQUd0QixJQUNJLElBQUlHLEVBQU81bEQsT0FBT2s2QixlQUFlLEdBQUksVUFBVyxDQUM1Q3pqQixJQUFLLFdBQ0RndkMsR0FBa0IsS0FJMUJqcEMsT0FBT0gsaUJBQWlCLE9BQVEsS0FBTXVwQyxHQUN4QyxNQUFPNThELElBR1QsT0FBT3k4RCxFQXM0QjBDSSxHQUs3Q0MsRUFBZXYyQyxFQVFmdzJDLEVBQWlCOXBDLEVBQVErbEMsU0FDekJnRSxFQUFlLEdBQ2ZDLEVBQWtCLEdBQ2xCQyxFQUFzQixHQUN0QkMsRUFBMkIsRUFDM0JDLEVBQWUsR0FNZkMsRUFBaUI5MkMsRUFBT2dHLGNBQ3hCK3dDLEVBQXdCcnFDLEVBQVFuQixpQkFBbUJ1ckMsRUFBZXZyQyxnQkFDbEV5ckMsRUFBYUYsRUFBZXZnRSxLQVU1QjBnRSxFQUF5QyxRQUF2QkgsRUFBZXBELEtBQWlDLElBQWhCaG5DLEVBQVF5bUMsSUFBWSxFQUFJLElBRzlFLFNBQVMrRCxFQUFVdEIsRUFBVzlKLEdBQzFCLElBQUlxTCxFQUFNTCxFQUFldHJDLGNBQWMsT0FRdkMsT0FOSXNnQyxHQUNBQyxFQUFTb0wsRUFBS3JMLEdBR2xCOEosRUFBVXh1QyxZQUFZK3ZDLEdBRWZBLEVBSVgsU0FBU0MsRUFBVWxILEVBQU1tSCxHQUNyQixJQUFJbEgsRUFBUytHLEVBQVVoSCxFQUFNeGpDLEVBQVF1akMsV0FBV0UsUUFDNUM1d0IsRUFBUzIzQixFQUFVL0csRUFBUXpqQyxFQUFRdWpDLFdBQVcxd0IsUUF3QmxELE9BdEJBMjNCLEVBQVUzM0IsRUFBUTdTLEVBQVF1akMsV0FBV0ssV0FFckMvd0IsRUFBT2hYLGFBQWEsY0FBZTh1QyxHQUUvQjNxQyxFQUFRNm5DLGtCQUdSaDFCLEVBQU9oWCxhQUFhLFdBQVksS0FDaENnWCxFQUFPelMsaUJBQWlCLFdBQVcsU0FBU0YsR0FDeEMsT0FteEJaLFNBQXNCQSxFQUFPeXFDLEdBQ3pCLEdBQUlDLEtBQXNCQyxFQUFpQkYsR0FDdkMsT0FBTyxFQUdYLElBQUlHLEVBQWlCLENBQUMsT0FBUSxTQUMxQkMsRUFBZSxDQUFDLE9BQVEsTUFDeEJDLEVBQWdCLENBQUMsV0FBWSxVQUM3QkMsRUFBVyxDQUFDLE9BQVEsT0FFcEJqckMsRUFBUWduQyxNQUFRaG5DLEVBQVF5bUMsSUFFeEJxRSxFQUFlMTNDLFVBQ1I0TSxFQUFReW1DLE1BQVF6bUMsRUFBUWduQyxNQUUvQitELEVBQWEzM0MsVUFDYjQzQyxFQUFjNTNDLFdBSWxCLElBZUlwZ0IsRUFmQThGLEVBQU1vbkIsRUFBTXBuQixJQUFJL08sUUFBUSxRQUFTLElBRWpDbWhFLEVBQWNweUQsSUFBUWt5RCxFQUFjLEdBQ3BDRyxFQUFZcnlELElBQVFreUQsRUFBYyxHQUNsQ2xJLEVBQVNocUQsSUFBUWl5RCxFQUFhLElBQU1qeUQsSUFBUWd5RCxFQUFlLElBQU1JLEVBQ2pFRSxFQUFPdHlELElBQVFpeUQsRUFBYSxJQUFNanlELElBQVFneUQsRUFBZSxJQUFNSyxFQUMvREUsRUFBUXZ5RCxJQUFRbXlELEVBQVMsR0FDekJLLEVBQVF4eUQsSUFBUW15RCxFQUFTLEdBRTdCLEtBQUtuSSxHQUFXc0ksR0FBU0MsR0FBVUMsR0FDL0IsT0FBTyxFQU9YLEdBSkFwckMsRUFBTTgrQixpQkFJRm9NLEdBQVF0SSxFQUFRLENBQ2hCLElBQUl5SSxFQUFhdnJDLEVBQVEybEMsdUJBQ3JCMXlELEVBQVk2dkQsRUFBUyxFQUFJLEVBRXpCdnRELEVBRFFpMkQsR0FBc0JiLEdBQ2pCMTNELEdBR2pCLEdBQWEsT0FBVHNDLEVBQ0EsT0FBTyxHQUlFLElBQVRBLElBQ0FBLEVBQU91MEQsRUFBZWpILGVBQ2xCbUgsRUFBZ0JXLEdBQ2hCN0gsRUFDQTlpQyxFQUFRNmxDLHVCQUlac0YsR0FBYUQsS0FDYjMxRCxHQUFRZzJELEdBSVpoMkQsRUFBT3BMLEtBQUtrTixJQUFJOUIsRUFBTSxNQUd0QkEsR0FBUXV0RCxHQUFVLEVBQUksRUFFdEI5dkQsRUFBSysyRCxFQUFhWSxHQUFnQnAxRCxPQUdsQ3ZDLEVBRk9zNEQsRUFFRnRyQyxFQUFRK2xDLFNBQVNsRixLQUFLN2dDLEVBQVErbEMsU0FBU2xGLEtBQUs1MEQsT0FBUyxHQUdyRCt6QixFQUFRK2xDLFNBQVNsRixLQUFLLEdBVS9CLE9BUEE0SyxHQUFVZCxFQUFjYixFQUFlbEosV0FBVzV0RCxJQUFLLEdBQU0sR0FFN0QwNEQsR0FBVSxRQUFTZixHQUNuQmUsR0FBVSxTQUFVZixHQUNwQmUsR0FBVSxTQUFVZixHQUNwQmUsR0FBVSxNQUFPZixJQUVWLEVBdDJCUWdCLENBQWF6ckMsRUFBT3lxQyxPQUluQzkzQixFQUFPaFgsYUFBYSxPQUFRLFVBQzVCZ1gsRUFBT2hYLGFBQWEsbUJBQW9CbUUsRUFBUXltQyxJQUFNLFdBQWEsY0FFOUMsSUFBakJrRSxFQUNBdEwsRUFBU3hzQixFQUFRN1MsRUFBUXVqQyxXQUFXRyxhQUM3QmlILElBQWlCM3FDLEVBQVFpbUMsUUFBVSxHQUMxQzVHLEVBQVN4c0IsRUFBUTdTLEVBQVF1akMsV0FBV0ksYUFHakNGLEVBSVgsU0FBU21JLEVBQVdwSSxFQUFNeHhELEdBQ3RCLFFBQUtBLEdBSUV3NEQsRUFBVWhILEVBQU14akMsRUFBUXVqQyxXQUFXaHhCLFNBbUQ5QyxTQUFTczVCLEVBQVdoNUIsRUFBUTgzQixHQUN4QixRQUFLM3FDLEVBQVF1bkMsU0FBU29ELElBSWZILEVBQVUzM0IsRUFBT25VLFdBQVlzQixFQUFRdWpDLFdBQVdwekIsU0FHM0QsU0FBU3k2QixJQUNMLE9BQU9mLEVBQWFpQyxhQUFhLFlBSXJDLFNBQVNqQixFQUFpQkYsR0FFdEIsT0FEbUI5QixFQUFjOEIsR0FDYm1CLGFBQWEsWUFHckMsU0FBU0MsSUFDRC9DLElBQ0FnRCxHQUFZLFNBQVczRyxHQUN2QjJELEVBQWVyN0QsU0FBUSxTQUFTd2lDLEdBQ3hCQSxHQUNBMHVCLEVBQWMxdUIsTUFHdEI2NEIsRUFBaUIsTUFLekIsU0FBU3pCLElBQ0x3RSxJQUdBL0MsRUFBaUJILEVBQWM5MEMsSUFBSTgzQyxHQUVuQ0ksR0FBVSxTQUFXNUcsR0FBNEIsU0FBUzl6QyxFQUFRbzVDLEVBQWN1QixHQUM1RSxHQUFLbEQsRUFBZTJCLEdBQXBCLENBSUEsSUFBSXdCLEVBQWlCNTZDLEVBQU9vNUMsSUFFVyxJQUFuQzNxQyxFQUFRdW5DLFNBQVNvRCxLQUNqQndCLEVBQWlCbnNDLEVBQVF1bkMsU0FBU29ELEdBQWMzM0QsR0FBR2s1RCxFQUFVdkIsS0FHakUzQixFQUFlMkIsR0FBY3pzQyxVQUFZaXVDLE1Bd01qRCxTQUFTQyxFQUFXQyxFQUFRQyxFQUFZOUUsR0FDcEMsSUFBSXJJLEVBQVVpTCxFQUFldHJDLGNBQWMsT0FFdkN5dEMsRUFBbUIsR0FDdkJBLEVBeFdnQixHQXdXa0J2c0MsRUFBUXVqQyxXQUFXMkIsWUFDckRxSCxFQXhXbUIsR0F3V2tCdnNDLEVBQVF1akMsV0FBVzRCLFdBQ3hEb0gsRUF4V21CLEdBd1drQnZzQyxFQUFRdWpDLFdBQVc2QixTQUV4RCxJQUFJb0gsRUFBb0IsR0FDeEJBLEVBN1dnQixHQTZXbUJ4c0MsRUFBUXVqQyxXQUFXc0IsYUFDdEQySCxFQTdXbUIsR0E2V21CeHNDLEVBQVF1akMsV0FBV3VCLFlBQ3pEMEgsRUE3V21CLEdBNldtQnhzQyxFQUFRdWpDLFdBQVd3QixVQUV6RCxJQUFJMEgsRUFBMEIsQ0FBQ3pzQyxFQUFRdWpDLFdBQVd5QixnQkFBaUJobEMsRUFBUXVqQyxXQUFXMEIsZUFDbEZ5SCxFQUEyQixDQUFDMXNDLEVBQVF1akMsV0FBV29CLGlCQUFrQjNrQyxFQUFRdWpDLFdBQVdxQixnQkFLeEYsU0FBUytILEVBQVd4ekQsRUFBTXVZLEdBQ3RCLElBQUlwbEIsRUFBSW9sQixJQUFXc08sRUFBUXVqQyxXQUFXL3pDLE1BRWxDbzlDLEVBQWN0Z0UsRUFBSWlnRSxFQUFtQkMsRUFFekMsT0FBTzk2QyxFQUFTLEtBSFNwbEIsRUFBSW1nRSxFQUEwQkMsR0FHZDFzQyxFQUFReW1DLEtBQU8sSUFBTW1HLEVBQVl6ekQsR0ErQjlFLE9BdkNBa21ELEVBQVNGLEVBQVNuL0IsRUFBUXVqQyxXQUFXOXdCLE1BQ3JDNHNCLEVBQVNGLEVBQXlCLElBQWhCbi9CLEVBQVF5bUMsSUFBWXptQyxFQUFRdWpDLFdBQVdpQixlQUFpQnhrQyxFQUFRdWpDLFdBQVdrQixjQWtDN0YxZ0QsT0FBTzBzQixLQUFLNDdCLEdBQVExK0QsU0FBUSxTQUFTay9ELElBeEJyQyxTQUFtQkEsRUFBUXI5QyxFQUFPclcsR0FJOUIsSUFwWVEsS0FrWVJBLEVBQU9tekQsRUFBYUEsRUFBVzk4QyxFQUFPclcsR0FBUUEsR0FFOUMsQ0FLQSxJQUFJNGQsRUFBT3l6QyxFQUFVckwsR0FBUyxHQUM5QnBvQyxFQUFLcW9DLFVBQVl1TixFQUFXeHpELEVBQU02bUIsRUFBUXVqQyxXQUFXbUIsUUFDckQzdEMsRUFBS3FGLE1BQU00RCxFQUFRNUQsT0FBU3l3QyxFQUFTLElBR2pDMXpELEVBN1lRLEtBOFlSNGQsRUFBT3l6QyxFQUFVckwsR0FBUyxJQUNyQkMsVUFBWXVOLEVBQVd4ekQsRUFBTTZtQixFQUFRdWpDLFdBQVcvekMsT0FDckR1SCxFQUFLOEUsYUFBYSxhQUFjck0sR0FDaEN1SCxFQUFLcUYsTUFBTTRELEVBQVE1RCxPQUFTeXdDLEVBQVMsSUFDckM5MUMsRUFBS21ILFVBQVlzcEMsRUFBVXgwRCxHQUFHd2MsS0FNbENzOUMsQ0FBVUQsRUFBUVIsRUFBT1EsR0FBUSxHQUFJUixFQUFPUSxHQUFRLE9BR2pEMU4sRUFHWCxTQUFTNE4sSUFDRGhFLElBQ0FsSyxFQUFja0ssR0FDZEEsRUFBYSxNQUlyQixTQUFTdDJCLEVBQUt1NkIsR0FFVkQsSUFFQSxJQUFJcjZCLEVBQU9zNkIsRUFBS3Q2QixLQUNaQyxFQUFVcTZCLEVBQUtyNkIsU0FBVyxFQUMxQmxnQyxFQUFTdTZELEVBQUt2NkQsU0FBVSxFQUl4QjQ1RCxFQW5NUixTQUF3QjE1QixFQUFTRCxFQUFNdmIsR0FNbkMsSUFoekNRL29CLEVBZ3pDSjYrRCxFQUFVLEdBQ1ZDLEVBQWVwRCxFQUFlakosS0FBSyxHQUNuQ3NNLEVBQWNyRCxFQUFlakosS0FBS2lKLEVBQWVqSixLQUFLNTBELE9BQVMsR0FDL0RtaEUsR0FBYyxFQUNkQyxHQUFhLEVBQ2JDLEVBQVUsRUEwR2QsT0EvNUNRbC9ELEVBeXpDSitvQixFQUFNbkYsUUFBUWhrQixNQUFLLFNBQVMxQixFQUFHQyxHQUMzQixPQUFPRCxFQUFJQyxLQUZuQjRxQixFQXZ6Q0cvb0IsRUFBTXFFLFFBQU8sU0FBU25HLEdBQ3pCLE9BQVFNLEtBQUtOLEtBQU1NLEtBQUtOLElBQUssS0FDOUIsS0E0ekNXLEtBQU80Z0UsSUFDYi8xQyxFQUFNbzJDLFFBQVFMLEdBQ2RFLEdBQWMsR0FJZGoyQyxFQUFNQSxFQUFNbHJCLE9BQVMsS0FBT2toRSxJQUM1QmgyQyxFQUFNdHJCLEtBQUtzaEUsR0FDWEUsR0FBYSxHQUdqQmwyQyxFQUFNeHBCLFNBQVEsU0FBU08sRUFBUzZqQixHQUU1QixJQUFJeGMsRUFDQS9ILEVBQ0FrSCxFQUdBODRELEVBQ0FDLEVBQ0FDLEVBQ0F2MEQsRUFDQXcwRCxFQUNBQyxFQUNBQyxFQVJBQyxFQUFNNS9ELEVBQ042L0QsRUFBTzUyQyxFQUFNcEYsRUFBUSxHQVFyQmk4QyxFQUFtQixVQUFUdDdCLEVBY2QsR0FWSXM3QixJQUNBejRELEVBQU91MEQsRUFBZW5JLFVBQVU1dkMsSUFJL0J4YyxJQUNEQSxFQUFPdzRELEVBQU9ELElBSU4sSUFBUkEsRUFhSixTQVJhcHZELElBQVRxdkQsSUFDQUEsRUFBT0QsR0FJWHY0RCxFQUFPcEwsS0FBS2tOLElBQUk5QixFQUFNLE1BR2pCL0gsRUFBSXNnRSxFQUFLdGdFLEdBQUt1Z0UsRUFBTXZnRSxHQUFrQkEsRUFBRytILEdBdEVuQjJmLFFBQVEsR0FBSyxFQXNFYSxDQWlCakQsSUFYQXk0QyxHQUZBRixHQURBRCxFQUFTMUQsRUFBZWxKLFdBQVdwekQsSUFDVjgvRCxHQUVEMzZCLEVBT3hCazdCLEVBQVdKLEdBTlhHLEVBQVl6akUsS0FBSzJOLE1BQU02MUQsSUFVbEJqNUQsRUFBSSxFQUFHQSxHQUFLazVELEVBQVdsNUQsR0FBSyxFQU03QnU0RCxHQURBUyxFQUFTSixFQUFVNTRELEVBQUltNUQsR0FDUjM0QyxRQUFRLElBQU0sQ0FBQzQwQyxFQUFlbkgsYUFBYStLLEdBQVMsR0FJdkV2MEQsRUFBT2dlLEVBQU1wQyxRQUFRdm5CLElBQU0sRUEvVWhCLEVBK1V1Q3dnRSxFQTlVdkMsRUFGSCxHQW1WSGo4QyxHQUFTcTdDLEdBQWU1L0QsSUFBTXVnRSxJQUMvQjUwRCxFQUFPLEdBR0wzTCxJQUFNdWdFLEdBQVFWLElBRWhCSixFQUFRTyxFQUFPdDRDLFFBQVEsSUFBTSxDQUFDMW5CLEVBQUcyTCxJQUlyQ20wRCxFQUFVRSxNQUlYUCxFQThFTWdCLENBQWV0N0IsRUFBU0QsRUFuUHpDLFNBQWtCQSxFQUFNbmhCLEVBQVEyOEMsR0FFNUIsR0FBYSxVQUFUeDdCLEdBQTZCLFVBQVRBLEVBQ3BCLE9BQU9vM0IsRUFBZWpKLEtBRzFCLEdBQWEsVUFBVG51QixFQUFrQixDQUNsQixHQUFJbmhCLEVBQVMsRUFDVCxNQUFNLElBQUlnRCxNQUFNLG1FQUlwQixJQUFJNlEsRUFBVzdULEVBQVMsRUFDcEI4NkMsRUFBUyxJQUFNam5DLEVBS25CLElBSEE3VCxFQUFTLEdBR0Y2VCxLQUNIN1QsRUFBTzZULEdBQVlBLEVBQVdpbkMsRUFHbEM5NkMsRUFBTzFsQixLQUFLLEtBRVo2bUMsRUFBTyxZQUdYLE1BQWEsY0FBVEEsRUFFT25oQixFQUFPd0MsS0FBSSxTQUFTdkUsR0FDdkIsT0FBT3M2QyxFQUFlbkgsYUFBYXVMLEVBQVVwRSxFQUFlNUksUUFBUTF4QyxHQUFTQSxNQUl4RSxXQUFUa2pCLEVBRUl3N0IsRUFDTzM4QyxFQUFPd0MsS0FBSSxTQUFTdkUsR0FFdkIsT0FBT3M2QyxFQUFlbkgsYUFBYW1ILEVBQWU1SSxRQUFRNEksRUFBZWxKLFdBQVdweEMsUUFLckYrQixPQVZYLEVBZ05ZNDhDLENBQVN6N0IsRUFGUnM2QixFQUFLejdDLFNBQVUsRUFDZHk3QyxFQUFLa0IsVUFBVyxJQUcxQnovQyxFQUFTdStDLEVBQUt2K0MsUUFBVSxDQUN4QnpiLEdBQUk3SSxLQUFLMk4sT0FLYixPQUZBaXhELEVBQWFjLEVBQWFudkMsWUFBWTB4QyxFQUFXQyxFQUFRNTVELEVBQVFnYyxJQU1yRSxTQUFTMi9DLElBQ0wsSUFBSUMsRUFBT3pGLEVBQVcwRix3QkFDbEJDLEVBQU0sU0FBVyxDQUFDLFFBQVMsVUFBVXZ1QyxFQUFReW1DLEtBQ2pELE9BQXVCLElBQWhCem1DLEVBQVF5bUMsSUFBWTRILEVBQUtudkQsT0FBUzBwRCxFQUFXMkYsR0FBT0YsRUFBS2p2RCxRQUFVd3BELEVBQVcyRixHQUl6RixTQUFTQyxFQUFZbkgsRUFBUWxJLEVBQVN2N0IsRUFBVTlKLEdBSTVDLElBQUlnakIsRUFBUyxTQUFTL3ZDLEdBS2xCLFNBSkFBLEVBd0RSLFNBQWtCQSxFQUFHMGhFLEVBQVlDLEdBSTdCLElBSUl0akUsRUFDQU8sRUFMQWdqRSxFQUFvQyxJQUE1QjVoRSxFQUFFb00sS0FBSzRiLFFBQVEsU0FDdkI2NUMsRUFBb0MsSUFBNUI3aEUsRUFBRW9NLEtBQUs0YixRQUFRLFNBQ3ZCODVDLEVBQXdDLElBQTlCOWhFLEVBQUVvTSxLQUFLNGIsUUFBUSxXQWE3QixHQVBvQyxJQUFoQ2hvQixFQUFFb00sS0FBSzRiLFFBQVEsZUFDZjg1QyxHQUFVLEdBTUMsY0FBWDloRSxFQUFFb00sT0FBeUJwTSxFQUFFK2hFLFVBQVkvaEUsRUFBRWdpRSxRQUMzQyxPQUFPLEVBSVgsR0FBSUosRUFBTyxDQUVQLElBQUlLLEVBQWtCLFNBQVNDLEdBQzNCLE9BQ0lBLEVBQVczN0MsU0FBV283QyxHQUN0QkEsRUFBWXp0QyxTQUFTZ3VDLEVBQVczN0MsU0FDL0IyN0MsRUFBVzM3QyxPQUFPNDdDLFlBQWNELEVBQVczN0MsT0FBTzQ3QyxXQUFXanVDLFNBQVN5dEMsSUFNL0UsR0FBZSxlQUFYM2hFLEVBQUVvTSxLQUF1QixDQUN6QixJQUFJZzJELEVBQWdCci9ELE1BQU1zSixVQUFVM0csT0FBTzJrQixLQUFLcnFCLEVBQUVnaUUsUUFBU0MsR0FHM0QsR0FBSUcsRUFBY2xqRSxPQUFTLEVBQ3ZCLE9BQU8sRUFHWGIsRUFBSStqRSxFQUFjLEdBQUduL0IsTUFDckJya0MsRUFBSXdqRSxFQUFjLEdBQUdyL0IsVUFDbEIsQ0FFSCxJQUFJcy9CLEVBQWN0L0QsTUFBTXNKLFVBQVUyZixLQUFLM0IsS0FBS3JxQixFQUFFc2lFLGVBQWdCTCxHQUc5RCxJQUFLSSxFQUNELE9BQU8sRUFHWGhrRSxFQUFJZ2tFLEVBQVlwL0IsTUFDaEJya0MsRUFBSXlqRSxFQUFZdC9CLE9BZXhCLE9BWEEyK0IsRUFBYUEsR0FBYzdPLEVBQWN3SyxJQUVyQ3dFLEdBQVNDLEtBQ1R6akUsRUFBSTJCLEVBQUV1aUUsUUFBVWIsRUFBV3JqRSxFQUMzQk8sRUFBSW9CLEVBQUV3aUUsUUFBVWQsRUFBVzlpRSxHQUcvQm9CLEVBQUUwaEUsV0FBYUEsRUFDZjFoRSxFQUFFTixPQUFTLENBQUNyQixFQUFHTyxHQUNmb0IsRUFBRXlpRSxPQUFTWixHQUFTQyxFQUViOWhFLEVBL0hDMGlFLENBQVMxaUUsRUFBRytzQixFQUFLMjBDLFdBQVkzMEMsRUFBS3hHLFFBQVU2ckMsT0FVNUN5TCxNQUF1Qjl3QyxFQUFLNDFDLGVBejdDMUIxaUMsRUE4N0NPNjhCLEVBOTdDSHpLLEVBODdDaUJwL0IsRUFBUXVqQyxXQUFXZ0IsT0E3N0MvQ3YzQixFQUFHaFEsVUFDSmdRLEVBQUdoUSxVQUFVaUUsU0FBU20rQixHQUN0QixJQUFJMzZDLE9BQU8sTUFBUTI2QyxFQUFZLE9BQU9obkMsS0FBSzRVLEVBQUdveUIsY0EyN0NXdGxDLEVBQUs0MUMsaUJBS3hEckksSUFBVzhCLEVBQVFsN0QsWUFBdUJ5USxJQUFkM1IsRUFBRStoRSxTQUF5Qi9oRSxFQUFFK2hFLFFBQVUsTUFLbkVoMUMsRUFBS3F0QyxRQUFTcDZELEVBQUUraEUsV0FTZnRGLEdBQ0R6OEQsRUFBRWl5RCxpQkFHTmp5RCxFQUFFNGlFLFVBQVk1aUUsRUFBRU4sT0FBT3V6QixFQUFReW1DLFVBRy9CN2lDLEVBQVM3MkIsRUFBRytzQixJQXg5Q3hCLElBQWtCa1QsRUFBSW95QixHQTI5Q1Z6bUQsRUFBVSxHQVFkLE9BTEEwdUQsRUFBT3RxQyxNQUFNLEtBQUtwdkIsU0FBUSxTQUFTaWlFLEdBQy9CelEsRUFBUS8rQixpQkFBaUJ3dkMsRUFBVzl5QixJQUFRMHNCLEdBQWtCLENBQUVxRyxTQUFTLElBQ3pFbDNELEVBQVE5TSxLQUFLLENBQUMrakUsRUFBVzl5QixPQUd0Qm5rQyxFQStFWCxTQUFTbTNELEVBQXNCSCxHQUMzQixJQTVuRFFJLEVBQU0zSCxFQUNkaUcsRUFDQXhPLEVBQ0FtUSxFQUNBdkIsRUF5bkRJd0IsRUFBdUIsS0FEWk4sR0E1bkRQSSxFQTRuRDBCbkgsRUE1bkRwQlIsRUE0bkRnQ3BvQyxFQUFReW1DLElBM25EdEQ0SCxFQUFPMEIsRUFBS3pCLHdCQUNaek8sRUFBTWtRLEVBQUt6MkMsY0FDWDAyQyxFQUFVblEsRUFBSWhoQyxnQkFDZDR2QyxFQUFhN08sRUFBY0MsR0FLM0IsMEJBQTBCem5DLEtBQUtneEMsVUFBVWpqQixhQUN6Q3NvQixFQUFXcmpFLEVBQUksR0FHWmc5RCxFQUNEaUcsRUFBSzZCLElBQU16QixFQUFXOWlFLEVBQUlxa0UsRUFBUUcsVUFDbEM5QixFQUFLbHJELEtBQU9zckQsRUFBV3JqRSxFQUFJNGtFLEVBQVFJLGFBOG1ESGhDLElBT2xDLE9BRkE2QixFQUFXMVEsRUFBTTBRLEdBRVZqd0MsRUFBUWduQyxJQUFNLElBQU1pSixFQUFXQSxFQWtDMUMsU0FBU0ksRUFBY253QyxFQUFPcEcsR0FDUCxhQUFmb0csRUFBTS9tQixNQUFpRCxTQUExQittQixFQUFNNU0sT0FBT2c5QyxVQUErQyxPQUF4QnB3QyxFQUFNcXdDLGVBQ3ZFQyxFQUFTdHdDLEVBQU9wRyxHQUt4QixTQUFTMjJDLEVBQVV2d0MsRUFBT3BHLEdBTXRCLElBQWdELElBQTVDc3ZDLFVBQVVzSCxXQUFXMzdDLFFBQVEsV0FBc0MsSUFBbEJtTCxFQUFNNHVDLFNBQTBDLElBQXpCaDFDLEVBQUs2MkMsZ0JBQzdFLE9BQU9ILEVBQVN0d0MsRUFBT3BHLEdBSTNCLElBQUk4MkMsR0FBWTV3QyxFQUFRZ25DLEtBQU8sRUFBSSxJQUFNOW1DLEVBQU15dkMsVUFBWTcxQyxFQUFLKzJDLGdCQUtoRUMsR0FBWUYsRUFBVyxFQUZJLElBQVhBLEVBQWtCOTJDLEVBQUtzMEMsU0FFSHQwQyxFQUFLaTNDLFVBQVdqM0MsRUFBS2szQyxlQUk3RCxTQUFTUixFQUFTdHdDLEVBQU9wRyxHQUVqQkEsRUFBSytZLFNBQ0x5c0IsRUFBWXhsQyxFQUFLK1ksT0FBUTdTLEVBQVF1akMsV0FBV2gzQixRQUM1QzI5QixHQUE0QixHQUloQ3B3QyxFQUFLbTNDLFVBQVV0akUsU0FBUSxTQUFTd0gsR0FDNUJrMUQsRUFBc0J2cUMsb0JBQW9CM3FCLEVBQUUsR0FBSUEsRUFBRSxPQUdyQixJQUE3QiswRCxJQUVBNUssRUFBWXVLLEVBQWM3cEMsRUFBUXVqQyxXQUFXZSxNQUM3QzRNLEtBR0loeEMsRUFBTXN2QyxTQUNObEYsRUFBV2x1QyxNQUFNb3pDLE9BQVMsR0FDMUJsRixFQUFXeHFDLG9CQUFvQixjQUFlay9CLEtBSXREbGxDLEVBQUtrM0MsY0FBY3JqRSxTQUFRLFNBQVNnOUQsR0FDaENlLEdBQVUsU0FBVWYsR0FDcEJlLEdBQVUsTUFBT2YsR0FDakJlLEdBQVUsTUFBT2YsTUFLekIsU0FBU3dHLEVBQVdqeEMsRUFBT3BHLEdBRXZCLEdBQUlBLEVBQUtrM0MsY0FBYzUwQixLQUFLeXVCLEdBQ3hCLE9BQU8sRUFHWCxJQUFJaDRCLEVBRThCLElBQTlCL1ksRUFBS2szQyxjQUFjL2tFLFNBR25CNG1DLEVBRm1CZzJCLEVBQWMvdUMsRUFBS2szQyxjQUFjLElBRTlCOTNDLFNBQVMsR0FDL0JneEMsR0FBNEIsRUFHNUI3SyxFQUFTeHNCLEVBQVE3UyxFQUFRdWpDLFdBQVdoM0IsU0FJeENyTSxFQUFNa3hDLGtCQUdOLElBQUlILEVBQVksR0FHWkksRUFBWTdDLEVBQVlyRixFQUFRRyxLQUFNZSxFQUF1Qm9HLEVBQVcsQ0FHeEVuOUMsT0FBUTRNLEVBQU01TSxPQUNkdWYsT0FBUUEsRUFDUm8rQixVQUFXQSxFQUNYSixlQUFnQjN3QyxFQUFNeXZDLFVBQ3RCdkIsU0FBVUEsSUFDVkssV0FBWXZ1QyxFQUFNdXVDLFdBQ2xCdUMsY0FBZWwzQyxFQUFLazNDLGNBQ3BCTCxnQkFBaUJ6d0MsRUFBTTR1QyxRQUN2QmlDLFVBQVcvRyxFQUFnQmg0QyxVQUczQnMvQyxFQUFXOUMsRUFBWXJGLEVBQVFyNEMsSUFBS3U1QyxFQUF1Qm1HLEVBQVUsQ0FDckVsOUMsT0FBUTRNLEVBQU01TSxPQUNkdWYsT0FBUUEsRUFDUm8rQixVQUFXQSxFQUNYdkIsYUFBYSxFQUNic0IsY0FBZWwzQyxFQUFLazNDLGdCQUdwQk8sRUFBVy9DLEVBQVksV0FBWW5FLEVBQXVCZ0csRUFBZSxDQUN6RS84QyxPQUFRNE0sRUFBTTVNLE9BQ2R1ZixPQUFRQSxFQUNSbytCLFVBQVdBLEVBQ1h2QixhQUFhLEVBQ2JzQixjQUFlbDNDLEVBQUtrM0MsZ0JBS3hCQyxFQUFVcGxFLEtBQUt1UyxNQUFNNnlELEVBQVdJLEVBQVVsbEUsT0FBT21sRSxFQUFVQyxJQUl2RHJ4QyxFQUFNc3ZDLFNBRU5sRixFQUFXbHVDLE1BQU1vekMsT0FBUzdsRSxpQkFBaUJ1MkIsRUFBTTVNLFFBQVFrOEMsT0FHckQzRyxFQUFjNThELE9BQVMsR0FDdkJvekQsRUFBU3dLLEVBQWM3cEMsRUFBUXVqQyxXQUFXZSxNQVM5Q2dHLEVBQVdscUMsaUJBQWlCLGNBQWU0K0IsR0FBZ0IsSUFHL0RsbEMsRUFBS2szQyxjQUFjcmpFLFNBQVEsU0FBU2c5RCxHQUNoQ2UsR0FBVSxRQUFTZixNQUszQixTQUFTNkcsRUFBU3R4QyxHQUVkQSxFQUFNa3hDLGtCQUVOLElBQUluQixFQUFXSCxFQUFzQjV2QyxFQUFNeXZDLFdBQ3ZDaEYsRUFuTFIsU0FBMEI4RyxHQUN0QixJQUFJQyxFQUFxQixJQUNyQi9HLEdBQWUsRUF3Qm5CLE9BdEJBOUIsRUFBY2w3RCxTQUFRLFNBQVNrbEMsRUFBUTlnQixHQUVuQyxJQUFJODRDLEVBQWlCOTRDLEdBQXJCLENBSUEsSUFBSTQvQyxFQUFpQjNILEVBQWdCajRDLEdBQ2pDNi9DLEVBQTJCem5FLEtBQUtLLElBQUltbkUsRUFBaUJGLElBTTFDRyxFQUEyQkYsR0FDdEJFLEdBQTRCRixHQUFzQkQsRUFBa0JFLEdBSnpDLE1BQTdCQyxHQUEyRCxNQUF2QkYsS0FPbEQvRyxFQUFlNTRDLEVBQ2YyL0MsRUFBcUJFLE9BSXRCakgsRUF5SllrSCxDQUFpQjVCLEdBR3BDLElBQXFCLElBQWpCdEYsRUFDQSxPQUFPLEVBS04zcUMsRUFBUXFuQyxPQUFPakcsTUFDaEJsQyxFQUFZMkssRUFBYzdwQyxFQUFRdWpDLFdBQVdnQixJQUFLdmtDLEVBQVFzbUMsbUJBRzlEbUYsR0FBVWQsRUFBY3NGLEdBQVUsR0FBTSxHQUV4Q2lCLEtBRUF4RixHQUFVLFFBQVNmLEdBQWMsR0FDakNlLEdBQVUsU0FBVWYsR0FBYyxHQUNsQ2UsR0FBVSxTQUFVZixHQUFjLEdBQ2xDZSxHQUFVLE1BQU9mLEdBQWMsR0FFM0IzcUMsRUFBUXFuQyxPQUFPakcsTUFDZitQLEVBQVdqeEMsRUFBTyxDQUFFOHdDLGNBQWUsQ0FBQ3JHLEtBSzVDLFNBQVNtSCxHQUFXNXhDLEdBQ2hCLElBQUkrdkMsRUFBV0gsRUFBc0I1dkMsRUFBTXl2QyxXQUV2QzM4RCxFQUFLODJELEVBQWU1SSxRQUFRK08sR0FDNUJ6Z0QsRUFBUXM2QyxFQUFlbkgsYUFBYTN2RCxHQUV4QytRLE9BQU8wc0IsS0FBSzA1QixHQUFjeDhELFNBQVEsU0FBU29rRSxHQUNuQyxVQUFZQSxFQUFZaDFDLE1BQU0sS0FBSyxJQUNuQ290QyxFQUFhNEgsR0FBYXBrRSxTQUFRLFNBQVNpMkIsR0FDdkNBLEVBQVN4TSxLQUFLNnhDLEVBQVl6NUMsU0F3SjFDLFNBQVN5OEMsR0FBVStGLEVBQWlCcHVDLEdBQ2hDdW1DLEVBQWE2SCxHQUFtQjdILEVBQWE2SCxJQUFvQixHQUNqRTdILEVBQWE2SCxHQUFpQm5tRSxLQUFLKzNCLEdBR0csV0FBbENvdUMsRUFBZ0JqMUMsTUFBTSxLQUFLLElBQzNCOHJDLEVBQWNsN0QsU0FBUSxTQUFTckIsRUFBR3lsQixHQUM5QjI1QyxHQUFVLFNBQVUzNUMsTUFVaEMsU0FBU2k2QyxHQUFZZ0csR0FDakIsSUFBSTl4QyxFQUFROHhDLEdBQW1CQSxFQUFnQmoxQyxNQUFNLEtBQUssR0FDdERrQyxFQUFZaUIsRUFBUTh4QyxFQUFnQjE2QyxVQUFVNEksRUFBTWowQixRQUFVK2xFLEVBRWxFanVELE9BQU8wc0IsS0FBSzA1QixHQUFjeDhELFNBQVEsU0FBUzAwQixHQUN2QyxJQUFJNHZDLEVBQVM1dkMsRUFBS3RGLE1BQU0sS0FBSyxHQUN6Qm0xQyxFQUFhN3ZDLEVBQUsvSyxVQUFVMjZDLEVBQU9obUUsUUFDakNpMEIsR0FBU0EsSUFBVSt4QyxHQUFhaHpDLEdBQWFBLElBQWNpekMsR0FaekUsU0FBNkJqekMsR0FDekIsT0FBT0EsSUFBY29tQyxHQUEwQnBtQyxJQUFjb21DLEVBYWhEOE0sQ0FBb0JELElBQWVqekMsSUFBY2l6QyxVQUMzQy9ILEVBQWE5bkMsTUFPcEMsU0FBU3FwQyxHQUFVa0UsRUFBV2pGLEVBQWNwRyxHQUN4Q3hnRCxPQUFPMHNCLEtBQUswNUIsR0FBY3g4RCxTQUFRLFNBQVNva0UsR0FDdkMsSUFBSUssRUFBWUwsRUFBWWgxQyxNQUFNLEtBQUssR0FFbkM2eUMsSUFBY3dDLEdBQ2RqSSxFQUFhNEgsR0FBYXBrRSxTQUFRLFNBQVNpMkIsR0FDdkNBLEVBQVN4TSxLQUVMNnhDLEVBRUFjLEVBQWFoMkMsSUFBSWlNLEVBQVF2UixPQUFPemIsSUFFaEMyM0QsRUFFQVosRUFBYS8zQyxRQUVidXlDLElBQU8sRUFFUHlGLEVBQWdCaDRDLFFBRWhCaTNDLFNBUXBCLFNBQVNvSixHQUFvQkMsRUFBVzNILEVBQWMzM0QsRUFBSXUvRCxFQUFjQyxFQUFhQyxHQUNqRixJQUFJQyxFQW1ESixPQS9DSTdKLEVBQWM1OEQsT0FBUyxJQUFNK3pCLEVBQVFxbkMsT0FBT0QsZ0JBQ3hDbUwsR0FBZ0I1SCxFQUFlLElBQy9CK0gsRUFBVzVJLEVBQWU1SCxvQkFBb0JvUSxFQUFVM0gsRUFBZSxHQUFJM3FDLEVBQVFxTixPQUFRLEdBQzNGcjZCLEVBQUs3SSxLQUFLa04sSUFBSXJFLEVBQUkwL0QsSUFHbEJGLEdBQWU3SCxFQUFlOUIsRUFBYzU4RCxPQUFTLElBQ3JEeW1FLEVBQVc1SSxFQUFlNUgsb0JBQW9Cb1EsRUFBVTNILEVBQWUsR0FBSTNxQyxFQUFRcU4sT0FBUSxHQUMzRnI2QixFQUFLN0ksS0FBS21OLElBQUl0RSxFQUFJMC9ELEtBT3RCN0osRUFBYzU4RCxPQUFTLEdBQUsrekIsRUFBUXUvQixRQUNoQ2dULEdBQWdCNUgsRUFBZSxJQUMvQitILEVBQVc1SSxFQUFlNUgsb0JBQW9Cb1EsRUFBVTNILEVBQWUsR0FBSTNxQyxFQUFRdS9CLE1BQU8sR0FDMUZ2c0QsRUFBSzdJLEtBQUttTixJQUFJdEUsRUFBSTAvRCxJQUdsQkYsR0FBZTdILEVBQWU5QixFQUFjNThELE9BQVMsSUFDckR5bUUsRUFBVzVJLEVBQWU1SCxvQkFBb0JvUSxFQUFVM0gsRUFBZSxHQUFJM3FDLEVBQVF1L0IsTUFBTyxHQUMxRnZzRCxFQUFLN0ksS0FBS2tOLElBQUlyRSxFQUFJMC9ELEtBTXRCMXlDLEVBQVFsSCxVQUNhLElBQWpCNnhDLElBQ0ErSCxFQUFXNUksRUFBZTVILG9CQUFvQixFQUFHbGlDLEVBQVFsSCxRQUFRLEdBQUksR0FDckU5bEIsRUFBSzdJLEtBQUtrTixJQUFJckUsRUFBSTAvRCxJQUdsQi9ILElBQWlCOUIsRUFBYzU4RCxPQUFTLElBQ3hDeW1FLEVBQVc1SSxFQUFlNUgsb0JBQW9CLElBQUtsaUMsRUFBUWxILFFBQVEsR0FBSSxHQUN2RTlsQixFQUFLN0ksS0FBS21OLElBQUl0RSxFQUFJMC9ELFFBTzFCMS9ELEVBQUt1c0QsRUFITHZzRCxFQUFLODJELEVBQWU1SSxRQUFRbHVELE9BTWpCcy9ELEVBQVUzSCxLQUFrQjhILElBSWhDei9ELEVBSVgsU0FBUzIvRCxHQUFZM2xFLEVBQUdWLEdBQ3BCLElBQUlRLEVBQUlrekIsRUFBUXltQyxJQUNoQixPQUFRMzVELEVBQUlSLEVBQUlVLEdBQUssTUFBUUYsRUFBSUUsRUFBSVYsR0FLekMsU0FBU3drRSxHQUFZOEIsRUFBUTNDLEVBQVVjLEVBQVdDLEdBQzlDLElBQUk2QixFQUFZOUIsRUFBVS8rQyxRQUV0QnpsQixFQUFJLEVBQUVxbUUsRUFBUUEsR0FDZDN2RCxFQUFJLENBQUMydkQsR0FBU0EsR0FHbEI1QixFQUFnQkEsRUFBY2gvQyxRQUkxQjRnRCxHQUNBNUIsRUFBYzU5QyxVQUlkNDlDLEVBQWMva0UsT0FBUyxFQUN2QitrRSxFQUFjcmpFLFNBQVEsU0FBU2c5RCxFQUFjNzlELEdBQ3pDLElBQUlrRyxFQUFLcS9ELEdBQ0xRLEVBQ0FsSSxFQUNBa0ksRUFBVWxJLEdBQWdCc0YsRUFDMUIxakUsRUFBRU8sR0FDRm1XLEVBQUVuVyxJQUNGLElBSU8sSUFBUGtHLEVBQ0FpOUQsRUFBVyxHQUVYQSxFQUFXajlELEVBQUs2L0QsRUFBVWxJLEdBQzFCa0ksRUFBVWxJLEdBQWdCMzNELE1BT2xDekcsRUFBSTBXLEVBQUksRUFBQyxHQUdiLElBQUl1a0IsR0FBUSxFQUdad3BDLEVBQWNyakUsU0FBUSxTQUFTZzlELEVBQWM3OUQsR0FDekMwNkIsRUFBUWlrQyxHQUFVZCxFQUFjb0csRUFBVXBHLEdBQWdCc0YsRUFBVTFqRSxFQUFFTyxHQUFJbVcsRUFBRW5XLEtBQU8wNkIsS0FJbkZBLEdBQ0F3cEMsRUFBY3JqRSxTQUFRLFNBQVNnOUQsR0FDM0JlLEdBQVUsU0FBVWYsR0FDcEJlLEdBQVUsUUFBU2YsTUFTL0IsU0FBU21JLEdBQW1CeG1FLEVBQUdDLEdBQzNCLE9BQU95ekIsRUFBUWduQyxJQUFNLElBQU0xNkQsRUFBSUMsRUFBSUQsRUF1QnZDLFNBQVM0a0UsS0FDTGpILEVBQW9CdDhELFNBQVEsU0FBU2c5RCxHQUNqQyxJQUFJM0QsRUFBTWdELEVBQWdCVyxHQUFnQixJQUFNLEVBQUksRUFDaERvSSxFQUFTLEdBQUtsSyxFQUFjNThELE9BQVMrNkQsRUFBTTJELEdBQy9DOUIsRUFBYzhCLEdBQWN2dUMsTUFBTTIyQyxPQUFTQSxLQU1uRCxTQUFTdEgsR0FBVWQsRUFBYzMzRCxFQUFJdS9ELEVBQWNDLEVBQWFRLEdBSzVELE9BSktBLElBQ0RoZ0UsRUFBS3EvRCxHQUFvQnJJLEVBQWlCVyxFQUFjMzNELEVBQUl1L0QsRUFBY0MsR0FBYSxLQUdoRixJQUFQeC9ELElBbENSLFNBQThCMjNELEVBQWMzM0QsR0FFeENnM0QsRUFBZ0JXLEdBQWdCMzNELEVBR2hDKzJELEVBQWFZLEdBQWdCYixFQUFlbkgsYUFBYTN2RCxHQUV6RCxJQUNJaWdFLEVBQWdCLGFBQWVOLEdBRGpCLElBQU1HLEdBQW1COS9ELEVBQUksR0FBS3UzRCxHQUNTLElBQUssS0FBTyxJQUV6RTFCLEVBQWM4QixHQUFjdnVDLE1BQU00RCxFQUFReW9DLGVBQWlCd0ssRUFFM0RDLEdBQWN2SSxHQUNkdUksR0FBY3ZJLEVBQWUsR0F5QjdCd0ksQ0FBcUJ4SSxFQUFjMzNELElBRTVCLEdBSVgsU0FBU2tnRSxHQUFjbmhELEdBRW5CLEdBQUsrMkMsRUFBZS8yQyxHQUFwQixDQUlBLElBQUlyaUIsRUFBSSxFQUNKeUwsRUFBSSxJQUVNLElBQVY0VyxJQUNBcmlCLEVBQUlzNkQsRUFBZ0JqNEMsRUFBUSxJQUc1QkEsSUFBVSsyQyxFQUFlNzhELE9BQVMsSUFDbENrUCxFQUFJNnVELEVBQWdCajRDLElBT3hCLElBQUlxaEQsRUFBZWo0RCxFQUFJekwsRUFDbkJ1akUsRUFBZ0IsYUFBZU4sR0FBWUcsR0FBbUJwakUsRUFBRzBqRSxHQUFnQixJQUFLLEtBQU8sSUFDN0ZDLEVBQVksU0FBV1YsR0FBWVMsRUFBZSxJQUFLLEtBQU8sSUFFbEV0SyxFQUFlLzJDLEdBQU9xSyxNQUFNNEQsRUFBUXlvQyxlQUFpQndLLEVBQWdCLElBQU1JLEdBSS9FLFNBQVNDLEdBQWV0Z0UsRUFBSTIzRCxHQUd4QixPQUFXLE9BQVAzM0QsSUFBc0IsSUFBUEEsUUFBdUIwTCxJQUFQMUwsRUFDeEJnM0QsRUFBZ0JXLElBSVQsaUJBQVAzM0QsSUFDUEEsRUFBSzZrQixPQUFPN2tCLElBR2hCQSxFQUFLZ3RCLEVBQVF2UixPQUFPMWUsS0FBS2lELElBSWQsS0FIWEEsRUFBSzgyRCxFQUFlbEosV0FBVzV0RCxLQUdYdWMsTUFBTXZjLEdBQ2ZnM0QsRUFBZ0JXLEdBR3BCMzNELEdBSVgsU0FBU3VnRSxHQUFTMS9DLEVBQU8yL0MsRUFBY1IsR0FDbkMsSUFBSXpoRCxFQUFTaXVDLEVBQVEzckMsR0FDakI0L0MsT0FBZ0MvMEQsSUFBdkJzckQsRUFBZ0IsR0FHN0J3SixPQUFnQzkwRCxJQUFqQjgwRCxLQUFzQ0EsRUFJakR4ekMsRUFBUW9tQyxVQUFZcU4sR0FDcEJ2VSxFQUFZMkssRUFBYzdwQyxFQUFRdWpDLFdBQVdnQixJQUFLdmtDLEVBQVFzbUMsbUJBSTlEMkQsRUFBb0J0OEQsU0FBUSxTQUFTZzlELEdBQ2pDYyxHQUFVZCxFQUFjMkksR0FBZS9oRCxFQUFPbzVDLEdBQWVBLElBQWUsR0FBTSxFQUFPcUksTUFPN0YsSUFKQSxJQUFJeGxFLEVBQW1DLElBQS9CeThELEVBQW9CaCtELE9BQWUsRUFBSSxFQUl4Q3VCLEVBQUl5OEQsRUFBb0JoK0QsU0FBVXVCLEVBQ3JDeThELEVBQW9CdDhELFNBQVEsU0FBU2c5RCxHQUNqQ2MsR0FBVWQsRUFBY1gsRUFBZ0JXLElBQWUsR0FBTSxFQUFNcUksTUFJM0U5QixLQUVBakgsRUFBb0J0OEQsU0FBUSxTQUFTZzlELEdBQ2pDZSxHQUFVLFNBQVVmLEdBR1MsT0FBekJwNUMsRUFBT281QyxJQUEwQjZJLEdBQ2pDOUgsR0FBVSxNQUFPZixNQStCN0IsU0FBUytJLEtBQ0wsSUFBSW5pRCxFQUFTdzRDLEVBQWFoMkMsSUFBSWlNLEVBQVF2UixPQUFPemIsSUFHN0MsT0FBc0IsSUFBbEJ1ZSxFQUFPdGxCLE9BQ0FzbEIsRUFBTyxHQUdYQSxFQXVCWCxTQUFTaTZDLEdBQXNCYixHQUMzQixJQUFJalgsRUFBV3NXLEVBQWdCVyxHQUMzQmdKLEVBQWM3SixFQUFlL0csZUFBZXJQLEdBQzVDbGtDLEVBQVF1NkMsRUFBYVksR0FDckJpSixFQUFZRCxFQUFZelEsU0FBUzN0RCxLQUNqQ3MrRCxFQUFZLEtBR2hCLEdBQUk3ekMsRUFBUW9oQyxLQUNSLE1BQU8sQ0FDSDV4QyxFQUFRbWtELEVBQVkzUSxXQUFXQyxZQUFjLEtBQzdDMFEsRUFBWXhRLFVBQVVGLFdBQWF6ekMsR0FBUyxPQU1sQyxJQUFkb2tELEdBQ0lwa0QsRUFBUW9rRCxFQUFZRCxFQUFZeFEsVUFBVUYsYUFDMUMyUSxFQUFZRCxFQUFZeFEsVUFBVUYsV0FBYXp6QyxHQU1uRHFrRCxFQURBcmtELEVBQVFta0QsRUFBWXpRLFNBQVNELFdBQ2pCMFEsRUFBWXpRLFNBQVMzdEQsTUFDTSxJQUFoQ28rRCxFQUFZM1EsV0FBV3p0RCxNQU1sQmlhLEVBQVFta0QsRUFBWTNRLFdBQVdwQixZQUk5QixNQUFibE8sRUFDQWtnQixFQUFZLEtBQ1EsSUFBYmxnQixJQUNQbWdCLEVBQVksTUFJaEIsSUFBSXhRLEVBQWV5RyxFQUFlMUcsb0JBV2xDLE9BUmtCLE9BQWR3USxJQUFvQyxJQUFkQSxJQUN0QkEsRUFBWXY4QyxPQUFPdThDLEVBQVUxK0MsUUFBUW11QyxLQUd2QixPQUFkd1EsSUFBb0MsSUFBZEEsSUFDdEJBLEVBQVl4OEMsT0FBT3c4QyxFQUFVMytDLFFBQVFtdUMsS0FHbEMsQ0FBQ3dRLEVBQVdELEdBOEh2QixPQTc2Q0l2VSxFQUZlNkosRUE0M0NRVyxFQTEzQ0g3cEMsRUFBUXVqQyxXQUFXandDLFFBRW5CLElBQWhCME0sRUFBUWduQyxJQUNSM0gsRUFBUzZKLEVBQVdscEMsRUFBUXVqQyxXQUFXVSxLQUV2QzVFLEVBQVM2SixFQUFXbHBDLEVBQVF1akMsV0FBV1csS0FHdkIsSUFBaEJsa0MsRUFBUXltQyxJQUNScEgsRUFBUzZKLEVBQVdscEMsRUFBUXVqQyxXQUFXTSxZQUV2Q3hFLEVBQVM2SixFQUFXbHBDLEVBQVF1akMsV0FBV08sVUFNdkN6RSxFQUFTNkosRUFEUyxRQUZGdi9ELGlCQUFpQnUvRCxHQUFXajJELFVBR3hCK3NCLEVBQVF1akMsV0FBV2EsaUJBRW5CcGtDLEVBQVF1akMsV0FBV1ksa0JBdTJDM0N5RSxFQXAyQ080QixFQUFVdEIsRUFBV2xwQyxFQUFRdWpDLFdBQVdDLE1BNUNuRCxTQUFxQnNRLEVBQWdCdFEsR0FDakMsSUFBSXVRLEVBQWN2SixFQUFVaEgsRUFBTXhqQyxFQUFRdWpDLFdBQVdTLFVBRXJENkUsRUFBZ0IsSUFDaEJDLEVBQWlCLElBRUZqOUQsS0FBSysvRCxFQUFXbUksRUFBYUQsRUFBZSxLQUszRCxJQUFLLElBQUl0bUUsRUFBSSxFQUFHQSxFQUFJd3lCLEVBQVFpbUMsUUFBU3o0RCxJQUVqQ3E3RCxFQUFjaDlELEtBQUs2K0QsRUFBVWxILEVBQU1oMkQsSUFDbkN5OEQsRUFBb0J6OEQsR0FBS0EsRUFDekJzN0QsRUFBZWo5RCxLQUFLKy9ELEVBQVdtSSxFQUFhRCxFQUFldG1FLEVBQUksS0FtNENuRXdtRSxDQUFZaDBDLEVBQVF1UyxRQUFTcTJCLElBbGtCUHAyQixFQXFrQkx4UyxFQUFRcW5DLFFBbmtCVkgsT0FDWDJCLEVBQWNsN0QsU0FBUSxTQUFTa2xDLEVBQVE5Z0IsR0FHbkN5OEMsRUFBWXJGLEVBQVFsN0QsTUFBTzRrQyxFQUFPM1osU0FBUyxHQUFJaTRDLEVBQVksQ0FDdkRILGNBQWUsQ0FBQ2ovQyxRQU14QnlnQixFQUFVK3hCLEtBQ1ZpSyxFQUFZckYsRUFBUWw3RCxNQUFPMjZELEVBQVk0SSxFQUFVLElBSWpEaC9CLEVBQVUyMEIsT0FDVnFILEVBQVlyRixFQUFRRyxLQUFNVixFQUFZa0osR0FBWSxDQUM5QzNLLE9BQU8sSUFLWDMwQixFQUFVOHhCLE1BQ1Z3RSxFQUFlbjdELFNBQVEsU0FBUzRrQyxFQUFTeGdCLEdBQ3JDLElBQWdCLElBQVp3Z0IsR0FBK0IsSUFBVnhnQixHQUFlQSxJQUFVKzJDLEVBQWU3OEQsT0FBUyxFQUExRSxDQUlBLElBQUlnb0UsRUFBZXBMLEVBQWM5MkMsRUFBUSxHQUNyQ21pRCxFQUFjckwsRUFBYzkyQyxHQUM1Qm9pRCxFQUFlLENBQUM1aEMsR0FFcEI4c0IsRUFBUzlzQixFQUFTdlMsRUFBUXVqQyxXQUFXYyxXQU1qQzd4QixFQUFVMDBCLFFBQ1ZpTixFQUFhdG9FLEtBQUtvb0UsRUFBYS82QyxTQUFTLElBQ3hDaTdDLEVBQWF0b0UsS0FBS3FvRSxFQUFZaDdDLFNBQVMsS0FHM0NpN0MsRUFBYXhtRSxTQUFRLFNBQVN5bUUsR0FDMUI1RixFQUFZckYsRUFBUWw3RCxNQUFPbW1FLEVBQWFqRCxFQUFZLENBQ2hEbEwsUUFBUyxDQUFDZ08sRUFBY0MsR0FDeEJsRCxjQUFlLENBQUNqL0MsRUFBUSxFQUFHQSxZQXVoQjNDd2hELEdBQVN2ekMsRUFBUS94QixPQUViK3hCLEVBQVF5UyxNQUNSQSxFQUFLelMsRUFBUXlTLE1BR2J6UyxFQUFRdW5DLFVBQ1JBLElBM3pDSnlFLEdBQVksU0FBVzNHLEdBQ3ZCNEcsR0FBVSxTQUFXNUcsR0FBd0IsU0FBUzl6QyxFQUFRbzVDLEVBQWN1QixFQUFXM0gsRUFBSzhQLEdBRXhGcEssRUFBb0J0OEQsU0FBUSxTQUFTb2tCLEdBQ2pDLElBQUk4Z0IsRUFBU2cyQixFQUFjOTJDLEdBRXZCemEsRUFBTSs2RCxHQUFvQnJJLEVBQWlCajRDLEVBQU8sR0FBRyxHQUFNLEdBQU0sR0FDakUxYSxFQUFNZzdELEdBQW9CckksRUFBaUJqNEMsRUFBTyxLQUFLLEdBQU0sR0FBTSxHQUVuRTJULEVBQU0ydUMsRUFBVXRpRCxHQUdoQm9TLEVBQU9uRSxFQUFRMG5DLFdBQVcxMEQsR0FBR2s1RCxFQUFVbjZDLElBRzNDemEsRUFBTXd5RCxFQUFlbkgsYUFBYXJyRCxHQUFLNGQsUUFBUSxHQUMvQzdkLEVBQU15eUQsRUFBZW5ILGFBQWF0ckQsR0FBSzZkLFFBQVEsR0FDL0N3USxFQUFNb2tDLEVBQWVuSCxhQUFhajlCLEdBQUt4USxRQUFRLEdBRS9DMmQsRUFBTzNaLFNBQVMsR0FBRzJDLGFBQWEsZ0JBQWlCdmtCLEdBQ2pEdTdCLEVBQU8zWixTQUFTLEdBQUcyQyxhQUFhLGdCQUFpQnhrQixHQUNqRHc3QixFQUFPM1osU0FBUyxHQUFHMkMsYUFBYSxnQkFBaUI2SixHQUNqRG1OLEVBQU8zWixTQUFTLEdBQUcyQyxhQUFhLGlCQUFrQnNJLFNBOHlDOUQ4a0MsRUFBYSxDQUNUcUwsUUE3S0osV0FLSSxJQUFLLElBQUl4N0QsS0FIVGt6RCxHQUFZM0csR0FDWjJHLEdBQVkzRyxHQUVJcmxDLEVBQVF1akMsV0FDZnZqQyxFQUFRdWpDLFdBQVdycUQsZUFBZUosSUFHdkN3bUQsRUFBWXVLLEVBQWM3cEMsRUFBUXVqQyxXQUFXenFELElBR2pELEtBQU8rd0QsRUFBYW5yQyxZQUNoQm1yQyxFQUFhMXFDLFlBQVkwcUMsRUFBYW5yQyxtQkFHbkNtckMsRUFBYXozQixZQThKcEJ1N0IsTUFqR0osV0FDSSxPQUFPMUQsRUFBb0JsMkMsSUFBSXkzQyxLQWlHL0I1ckMsR0FBSXFzQyxHQUNKc0ksSUFBS3ZJLEdBQ0x4eEMsSUFBS2s1QyxHQUNMbjVDLElBQUtnNUMsR0FDTDlILFVBbk5KLFNBQXdCZCxFQUFjbjdDLEVBQU9na0QsRUFBY1IsR0FJdkQsTUFGQXJJLEVBQWV0ekMsT0FBT3N6QyxLQUVBLEdBQUtBLEVBQWVWLEVBQW9CaCtELFFBQzFELE1BQU0sSUFBSXNvQixNQUFNLG9EQUErRG8yQyxHQUtuRmMsR0FBVWQsRUFBYzJJLEdBQWU5akQsRUFBT203QyxJQUFlLEdBQU0sRUFBTXFJLEdBRXpFdEgsR0FBVSxTQUFVZixHQUVoQjZJLEdBQ0E5SCxHQUFVLE1BQU9mLElBcU1yQnJzRCxNQXpOSixTQUFvQmsxRCxHQUNoQkQsR0FBU3Z6QyxFQUFRL3hCLE1BQU91bEUsSUEwTnhCZ0IsY0FBZSxTQUFTbG9FLEVBQUdDLEVBQUc0SSxHQUMxQjI3RCxHQUFZeGtFLEVBQUdDLEVBQUd5OUQsRUFBaUI3MEQsSUFFdkM2cUIsUUFBUzJvQyxFQUNUOEwsY0F4R0osU0FBdUJDLEVBQWlCbEIsR0FJcEMsSUFBSXhtRSxFQUFJMG1FLEtBRUppQixFQUFhLENBQ2IsU0FDQSxRQUNBLFVBQ0EsUUFDQSxVQUNBLE9BQ0EsT0FDQSxTQUNBLE9BQ0EsWUFJSkEsRUFBV2huRSxTQUFRLFNBQVN3dEIsUUFFTXpjLElBQTFCZzJELEVBQWdCdjVDLEtBQ2hCd3RDLEVBQWdCeHRDLEdBQVF1NUMsRUFBZ0J2NUMsT0FJaEQsSUFBSXk1QyxFQUFhMU0sRUFBWVMsR0FHN0JnTSxFQUFXaG5FLFNBQVEsU0FBU3d0QixRQUNNemMsSUFBMUJnMkQsRUFBZ0J2NUMsS0FDaEI2RSxFQUFRN0UsR0FBUXk1QyxFQUFXejVDLE9BSW5DMnVDLEVBQWlCOEssRUFBVzdPLFNBRzVCL2xDLEVBQVFxTixPQUFTdW5DLEVBQVd2bkMsT0FDNUJyTixFQUFRdS9CLE1BQVFxVixFQUFXclYsTUFDM0J2L0IsRUFBUWxILFFBQVU4N0MsRUFBVzk3QyxRQUd6QmtILEVBQVF5UyxLQUNSQSxFQUFLelMsRUFBUXlTLE1BRWJzNkIsSUFJQS9zQyxFQUFRdW5DLFNBQ1JBLElBRUF3RSxJQUlKL0IsRUFBa0IsR0FDbEJ1SixHQUFTbUIsRUFBZ0J6bUUsT0FBU2pCLEVBQUd3bUUsSUE4Q3JDbGdELE9BQVF1MkMsRUFDUmtELFdBQVlBLEVBQ1poQixlQUFnQkEsRUFDaEI4SSxZQUFhLFdBQ1QsT0FBTzdMLEdBRVg4TCxXQUFZLFdBQ1IsT0FBT2pNLEdBRVhwMkIsS0FBTUEsR0EyQmQsTUFBTyxDQUVIc2lDLFdBQVlsVCxFQUNadGIsUUFBU3FZLEVBR1QyRSxXQUFZQSxFQUNadi9DLE9BM0JKLFNBQW9Cc1AsRUFBUXExQyxHQUN4QixJQUFLcjFDLElBQVdBLEVBQU9nOUMsU0FDbkIsTUFBTSxJQUFJLzdDLE1BQU0sK0RBQTBFakIsR0FJOUYsR0FBSUEsRUFBTzhlLFdBQ1AsTUFBTSxJQUFJN2QsTUFBTSx3REFJcEIsSUFDSXlnRCxFQUFNdE0sRUFBTXAxQyxFQURGNDBDLEVBQVlTLEdBQ09BLEdBSWpDLE9BRkFyMUMsRUFBTzhlLFdBQWE0aUMsRUFFYkEsTUFubkZXLFVBQVgsSUFBVyxtQixTQ0cxQixJQUFJQyxFQUFXLFNBQVU3N0IsR0FDdkIsYUFFQSxJQUVJMTZCLEVBRkF3MkQsRUFBS254RCxPQUFPM0ssVUFDWis3RCxFQUFTRCxFQUFHaDhELGVBRVowakQsRUFBNEIsbUJBQVhsNEIsT0FBd0JBLE9BQVMsR0FDbEQwd0MsRUFBaUJ4WSxFQUFRajRCLFVBQVksYUFDckMwd0MsRUFBc0J6WSxFQUFRMFksZUFBaUIsa0JBQy9DQyxFQUFvQjNZLEVBQVE0WSxhQUFlLGdCQUUvQyxTQUFTbjJCLEVBQU9vMkIsRUFBSzM4RCxFQUFLMFcsR0FPeEIsT0FOQXpMLE9BQU9rNkIsZUFBZXczQixFQUFLMzhELEVBQUssQ0FDOUIwVyxNQUFPQSxFQUNQaXpCLFlBQVksRUFDWjlJLGNBQWMsRUFDZCtJLFVBQVUsSUFFTCt5QixFQUFJMzhELEdBRWIsSUFFRXVtQyxFQUFPLEdBQUksSUFDWCxNQUFPcTJCLEdBQ1ByMkIsRUFBUyxTQUFTbzJCLEVBQUszOEQsRUFBSzBXLEdBQzFCLE9BQU9pbUQsRUFBSTM4RCxHQUFPMFcsR0FJdEIsU0FBUzRxQyxFQUFLdWIsRUFBU0MsRUFBU3R1QyxFQUFNdXVDLEdBRXBDLElBQUlDLEVBQWlCRixHQUFXQSxFQUFReDhELHFCQUFxQjI4RCxFQUFZSCxFQUFVRyxFQUMvRUMsRUFBWWp5RCxPQUFPQyxPQUFPOHhELEVBQWUxOEQsV0FDekNrSSxFQUFVLElBQUkyMEQsRUFBUUosR0FBZSxJQU16QyxPQUZBRyxFQUFVRSxRQXNNWixTQUEwQlAsRUFBU3J1QyxFQUFNaG1CLEdBQ3ZDLElBQUlrbUIsRUFBUTJ1QyxFQUVaLE9BQU8sU0FBZ0JyNUIsRUFBUXlMLEdBQzdCLEdBQUkvZ0IsSUFBVTR1QyxFQUNaLE1BQU0sSUFBSTdoRCxNQUFNLGdDQUdsQixHQUFJaVQsSUFBVTZ1QyxFQUFtQixDQUMvQixHQUFlLFVBQVh2NUIsRUFDRixNQUFNeUwsRUFLUixPQUFPK3RCLElBTVQsSUFIQWgxRCxFQUFRdzdCLE9BQVNBLEVBQ2pCeDdCLEVBQVFpbkMsSUFBTUEsSUFFRCxDQUNYLElBQUlndUIsRUFBV2oxRCxFQUFRaTFELFNBQ3ZCLEdBQUlBLEVBQVUsQ0FDWixJQUFJQyxFQUFpQkMsRUFBb0JGLEVBQVVqMUQsR0FDbkQsR0FBSWsxRCxFQUFnQixDQUNsQixHQUFJQSxJQUFtQkUsRUFBa0IsU0FDekMsT0FBT0YsR0FJWCxHQUF1QixTQUFuQmwxRCxFQUFRdzdCLE9BR1Z4N0IsRUFBUXExRCxLQUFPcjFELEVBQVFzMUQsTUFBUXQxRCxFQUFRaW5DLFNBRWxDLEdBQXVCLFVBQW5Cam5DLEVBQVF3N0IsT0FBb0IsQ0FDckMsR0FBSXRWLElBQVUydUMsRUFFWixNQURBM3VDLEVBQVE2dUMsRUFDRi8wRCxFQUFRaW5DLElBR2hCam5DLEVBQVF1MUQsa0JBQWtCdjFELEVBQVFpbkMsU0FFTixXQUFuQmpuQyxFQUFRdzdCLFFBQ2pCeDdCLEVBQVF3MUQsT0FBTyxTQUFVeDFELEVBQVFpbkMsS0FHbkMvZ0IsRUFBUTR1QyxFQUVSLElBQUlXLEVBQVNDLEVBQVNyQixFQUFTcnVDLEVBQU1obUIsR0FDckMsR0FBb0IsV0FBaEJ5MUQsRUFBTzU5RCxLQUFtQixDQU81QixHQUpBcXVCLEVBQVFsbUIsRUFBUTI1QixLQUNabzdCLEVBQ0FZLEVBRUFGLEVBQU94dUIsTUFBUW11QixFQUNqQixTQUdGLE1BQU8sQ0FDTGxuRCxNQUFPdW5ELEVBQU94dUIsSUFDZHROLEtBQU0zNUIsRUFBUTI1QixNQUdTLFVBQWhCODdCLEVBQU81OUQsT0FDaEJxdUIsRUFBUTZ1QyxFQUdSLzBELEVBQVF3N0IsT0FBUyxRQUNqQng3QixFQUFRaW5DLElBQU13dUIsRUFBT3h1QixPQTlRUDJ1QixDQUFpQnZCLEVBQVNydUMsRUFBTWhtQixHQUU3QzAwRCxFQWNULFNBQVNnQixFQUFTOTVCLEVBQUl1NEIsRUFBS2x0QixHQUN6QixJQUNFLE1BQU8sQ0FBRXB2QyxLQUFNLFNBQVVvdkMsSUFBS3JMLEVBQUc5bEIsS0FBS3ErQyxFQUFLbHRCLElBQzNDLE1BQU9tdEIsR0FDUCxNQUFPLENBQUV2OEQsS0FBTSxRQUFTb3ZDLElBQUttdEIsSUFoQmpDdDhCLEVBQVFnaEIsS0FBT0EsRUFvQmYsSUFBSStiLEVBQXlCLGlCQUN6QmMsRUFBeUIsaUJBQ3pCYixFQUFvQixZQUNwQkMsRUFBb0IsWUFJcEJLLEVBQW1CLEdBTXZCLFNBQVNYLEtBQ1QsU0FBU29CLEtBQ1QsU0FBU0MsS0FJVCxJQUFJbDFCLEVBQW9CLEdBQ3hCQSxFQUFrQmt6QixHQUFrQixXQUNsQyxPQUFPeG9FLE1BR1QsSUFBSXlxRSxFQUFXdHpELE9BQU9rK0IsZUFDbEJxMUIsRUFBMEJELEdBQVlBLEVBQVNBLEVBQVM5bEQsRUFBTyxNQUMvRCtsRCxHQUNBQSxJQUE0QnBDLEdBQzVCQyxFQUFPLzlDLEtBQUtrZ0QsRUFBeUJsQyxLQUd2Q2x6QixFQUFvQm8xQixHQUd0QixJQUFJQyxFQUFLSCxFQUEyQmgrRCxVQUNsQzI4RCxFQUFVMzhELFVBQVkySyxPQUFPQyxPQUFPaytCLEdBV3RDLFNBQVNzMUIsRUFBc0JwK0QsR0FDN0IsQ0FBQyxPQUFRLFFBQVMsVUFBVXpMLFNBQVEsU0FBU212QyxHQUMzQ3VDLEVBQU9qbUMsRUFBVzBqQyxHQUFRLFNBQVN5TCxHQUNqQyxPQUFPMzdDLEtBQUtzcEUsUUFBUXA1QixFQUFReUwsU0FrQ2xDLFNBQVNrdkIsRUFBY3pCLEVBQVcwQixHQUNoQyxTQUFTQyxFQUFPNzZCLEVBQVF5TCxFQUFLcmMsRUFBU0MsR0FDcEMsSUFBSTRxQyxFQUFTQyxFQUFTaEIsRUFBVWw1QixHQUFTazVCLEVBQVd6dEIsR0FDcEQsR0FBb0IsVUFBaEJ3dUIsRUFBTzU5RCxLQUVKLENBQ0wsSUFBSTlNLEVBQVMwcUUsRUFBT3h1QixJQUNoQi80QixFQUFRbmpCLEVBQU9takIsTUFDbkIsT0FBSUEsR0FDaUIsaUJBQVZBLEdBQ1AybEQsRUFBTy85QyxLQUFLNUgsRUFBTyxXQUNka29ELEVBQVl4ckMsUUFBUTFjLEVBQU1vb0QsU0FBU3JoQyxNQUFLLFNBQVMvbUIsR0FDdERtb0QsRUFBTyxPQUFRbm9ELEVBQU8wYyxFQUFTQyxNQUM5QixTQUFTdXBDLEdBQ1ZpQyxFQUFPLFFBQVNqQyxFQUFLeHBDLEVBQVNDLE1BSTNCdXJDLEVBQVl4ckMsUUFBUTFjLEdBQU8rbUIsTUFBSyxTQUFTc2hDLEdBSTlDeHJFLEVBQU9takIsTUFBUXFvRCxFQUNmM3JDLEVBQVE3L0IsTUFDUCxTQUFTMlcsR0FHVixPQUFPMjBELEVBQU8sUUFBUzMwRCxFQUFPa3BCLEVBQVNDLE1BdkJ6Q0EsRUFBTzRxQyxFQUFPeHVCLEtBNEJsQixJQUFJdXZCLEVBZ0NKbHJFLEtBQUtzcEUsUUE5QkwsU0FBaUJwNUIsRUFBUXlMLEdBQ3ZCLFNBQVN3dkIsSUFDUCxPQUFPLElBQUlMLEdBQVksU0FBU3hyQyxFQUFTQyxHQUN2Q3dyQyxFQUFPNzZCLEVBQVF5TCxFQUFLcmMsRUFBU0MsTUFJakMsT0FBTzJyQyxFQWFMQSxFQUFrQkEsRUFBZ0J2aEMsS0FDaEN3aEMsRUFHQUEsR0FDRUEsS0FrSFYsU0FBU3RCLEVBQW9CRixFQUFVajFELEdBQ3JDLElBQUl3N0IsRUFBU3k1QixFQUFTNXhDLFNBQVNyakIsRUFBUXc3QixRQUN2QyxHQUFJQSxJQUFXcCtCLEVBQVcsQ0FLeEIsR0FGQTRDLEVBQVFpMUQsU0FBVyxLQUVJLFVBQW5CajFELEVBQVF3N0IsT0FBb0IsQ0FFOUIsR0FBSXk1QixFQUFTNXhDLFNBQWlCLFNBRzVCcmpCLEVBQVF3N0IsT0FBUyxTQUNqQng3QixFQUFRaW5DLElBQU03cEMsRUFDZCszRCxFQUFvQkYsRUFBVWoxRCxHQUVQLFVBQW5CQSxFQUFRdzdCLFFBR1YsT0FBTzQ1QixFQUlYcDFELEVBQVF3N0IsT0FBUyxRQUNqQng3QixFQUFRaW5DLElBQU0sSUFBSXhoQixVQUNoQixrREFHSixPQUFPMnZDLEVBR1QsSUFBSUssRUFBU0MsRUFBU2w2QixFQUFReTVCLEVBQVM1eEMsU0FBVXJqQixFQUFRaW5DLEtBRXpELEdBQW9CLFVBQWhCd3VCLEVBQU81OUQsS0FJVCxPQUhBbUksRUFBUXc3QixPQUFTLFFBQ2pCeDdCLEVBQVFpbkMsSUFBTXd1QixFQUFPeHVCLElBQ3JCam5DLEVBQVFpMUQsU0FBVyxLQUNaRyxFQUdULElBQUlzQixFQUFPakIsRUFBT3h1QixJQUVsQixPQUFNeXZCLEVBT0ZBLEVBQUsvOEIsTUFHUDM1QixFQUFRaTFELEVBQVMwQixZQUFjRCxFQUFLeG9ELE1BR3BDbE8sRUFBUXVaLEtBQU8wN0MsRUFBUzJCLFFBUUQsV0FBbkI1MkQsRUFBUXc3QixTQUNWeDdCLEVBQVF3N0IsT0FBUyxPQUNqQng3QixFQUFRaW5DLElBQU03cEMsR0FVbEI0QyxFQUFRaTFELFNBQVcsS0FDWkcsR0FORXNCLEdBM0JQMTJELEVBQVF3N0IsT0FBUyxRQUNqQng3QixFQUFRaW5DLElBQU0sSUFBSXhoQixVQUFVLG9DQUM1QnpsQixFQUFRaTFELFNBQVcsS0FDWkcsR0FvRFgsU0FBU3lCLEVBQWFDLEdBQ3BCLElBQUl6ckUsRUFBUSxDQUFFMHJFLE9BQVFELEVBQUssSUFFdkIsS0FBS0EsSUFDUHpyRSxFQUFNMnJFLFNBQVdGLEVBQUssSUFHcEIsS0FBS0EsSUFDUHpyRSxFQUFNNHJFLFdBQWFILEVBQUssR0FDeEJ6ckUsRUFBTTZyRSxTQUFXSixFQUFLLElBR3hCeHJFLEtBQUs2ckUsV0FBVzVzRSxLQUFLYyxHQUd2QixTQUFTK3JFLEVBQWMvckUsR0FDckIsSUFBSW9xRSxFQUFTcHFFLEVBQU1nc0UsWUFBYyxHQUNqQzVCLEVBQU81OUQsS0FBTyxnQkFDUDQ5RCxFQUFPeHVCLElBQ2Q1N0MsRUFBTWdzRSxXQUFhNUIsRUFHckIsU0FBU2QsRUFBUUosR0FJZmpwRSxLQUFLNnJFLFdBQWEsQ0FBQyxDQUFFSixPQUFRLFNBQzdCeEMsRUFBWWxvRSxRQUFRd3FFLEVBQWN2ckUsTUFDbENBLEtBQUswUixPQUFNLEdBOEJiLFNBQVNpVCxFQUFPMHRCLEdBQ2QsR0FBSUEsRUFBVSxDQUNaLElBQUlqRSxFQUFpQmlFLEVBQVNtMkIsR0FDOUIsR0FBSXA2QixFQUNGLE9BQU9BLEVBQWU1akIsS0FBSzZuQixHQUc3QixHQUE2QixtQkFBbEJBLEVBQVNwa0IsS0FDbEIsT0FBT29rQixFQUdULElBQUsxdkIsTUFBTTB2QixFQUFTaHpDLFFBQVMsQ0FDM0IsSUFBSXVCLEdBQUssRUFBR3F0QixFQUFPLFNBQVNBLElBQzFCLE9BQVNydEIsRUFBSXl4QyxFQUFTaHpDLFFBQ3BCLEdBQUlrcEUsRUFBTy85QyxLQUFLNm5CLEVBQVV6eEMsR0FHeEIsT0FGQXF0QixFQUFLckwsTUFBUXl2QixFQUFTenhDLEdBQ3RCcXRCLEVBQUtvZ0IsTUFBTyxFQUNMcGdCLEVBT1gsT0FIQUEsRUFBS3JMLE1BQVE5USxFQUNibWMsRUFBS29nQixNQUFPLEVBRUxwZ0IsR0FHVCxPQUFPQSxFQUFLQSxLQUFPQSxHQUt2QixNQUFPLENBQUVBLEtBQU15N0MsR0FJakIsU0FBU0EsSUFDUCxNQUFPLENBQUU5bUQsTUFBTzlRLEVBQVd1OEIsTUFBTSxHQStNbkMsT0E1bUJBazhCLEVBQWtCLzlELFVBQVltK0QsRUFBR2wrRCxZQUFjKzlELEVBQy9DQSxFQUEyQi85RCxZQUFjODlELEVBQ3pDQSxFQUFrQnlCLFlBQWN2NUIsRUFDOUIrM0IsRUFDQTdCLEVBQ0EscUJBYUZuOEIsRUFBUXkvQixvQkFBc0IsU0FBU0MsR0FDckMsSUFBSUMsRUFBeUIsbUJBQVhELEdBQXlCQSxFQUFPei9ELFlBQ2xELFFBQU8wL0QsSUFDSEEsSUFBUzVCLEdBRzJCLHVCQUFuQzRCLEVBQUtILGFBQWVHLEVBQUs1OUMsUUFJaENpZSxFQUFRNC9CLEtBQU8sU0FBU0YsR0FRdEIsT0FQSS8wRCxPQUFPKytCLGVBQ1QvK0IsT0FBTysrQixlQUFlZzJCLEVBQVExQixJQUU5QjBCLEVBQU9qb0IsVUFBWXVtQixFQUNuQi8zQixFQUFPeTVCLEVBQVF2RCxFQUFtQixzQkFFcEN1RCxFQUFPMS9ELFVBQVkySyxPQUFPQyxPQUFPdXpELEdBQzFCdUIsR0FPVDEvQixFQUFRNi9CLE1BQVEsU0FBUzF3QixHQUN2QixNQUFPLENBQUVxdkIsUUFBU3J2QixJQXNFcEJpdkIsRUFBc0JDLEVBQWNyK0QsV0FDcENxK0QsRUFBY3IrRCxVQUFVaThELEdBQXVCLFdBQzdDLE9BQU96b0UsTUFFVHdzQyxFQUFRcStCLGNBQWdCQSxFQUt4QnIrQixFQUFROC9CLE1BQVEsU0FBU3ZELEVBQVNDLEVBQVN0dUMsRUFBTXV1QyxFQUFhNkIsUUFDeEMsSUFBaEJBLElBQXdCQSxFQUFjenJDLFNBRTFDLElBQUlrdEMsRUFBTyxJQUFJMUIsRUFDYnJkLEVBQUt1YixFQUFTQyxFQUFTdHVDLEVBQU11dUMsR0FDN0I2QixHQUdGLE9BQU90K0IsRUFBUXkvQixvQkFBb0JqRCxHQUMvQnVELEVBQ0FBLEVBQUt0K0MsT0FBTzBiLE1BQUssU0FBU2xxQyxHQUN4QixPQUFPQSxFQUFPNHVDLEtBQU81dUMsRUFBT21qQixNQUFRMnBELEVBQUt0K0MsV0F1S2pEMjhDLEVBQXNCRCxHQUV0Qmw0QixFQUFPazRCLEVBQUloQyxFQUFtQixhQU85QmdDLEVBQUduQyxHQUFrQixXQUNuQixPQUFPeG9FLE1BR1QycUUsRUFBRzluRCxTQUFXLFdBQ1osTUFBTyxzQkFrQ1QycEIsRUFBUTNJLEtBQU8sU0FBU2ozQixHQUN0QixJQUFJaTNCLEVBQU8sR0FDWCxJQUFLLElBQUkzM0IsS0FBT1UsRUFDZGkzQixFQUFLNWtDLEtBQUtpTixHQU1aLE9BSkEyM0IsRUFBS3JkLFVBSUUsU0FBU3lILElBQ2QsS0FBTzRWLEVBQUt4a0MsUUFBUSxDQUNsQixJQUFJNk0sRUFBTTIzQixFQUFLdmtDLE1BQ2YsR0FBSTRNLEtBQU9VLEVBR1QsT0FGQXFoQixFQUFLckwsTUFBUTFXLEVBQ2IraEIsRUFBS29nQixNQUFPLEVBQ0xwZ0IsRUFRWCxPQURBQSxFQUFLb2dCLE1BQU8sRUFDTHBnQixJQXNDWHVlLEVBQVE3bkIsT0FBU0EsRUFNakIwa0QsRUFBUTc4RCxVQUFZLENBQ2xCQyxZQUFhNDhELEVBRWIzM0QsTUFBTyxTQUFTODZELEdBY2QsR0FiQXhzRSxLQUFLNnlDLEtBQU8sRUFDWjd5QyxLQUFLaXVCLEtBQU8sRUFHWmp1QixLQUFLK3BFLEtBQU8vcEUsS0FBS2dxRSxNQUFRbDRELEVBQ3pCOVIsS0FBS3F1QyxNQUFPLEVBQ1pydUMsS0FBSzJwRSxTQUFXLEtBRWhCM3BFLEtBQUtrd0MsT0FBUyxPQUNkbHdDLEtBQUsyN0MsSUFBTTdwQyxFQUVYOVIsS0FBSzZyRSxXQUFXOXFFLFFBQVErcUUsSUFFbkJVLEVBQ0gsSUFBSyxJQUFJaitDLEtBQVF2dUIsS0FFUSxNQUFuQnV1QixFQUFLeWUsT0FBTyxJQUNadTdCLEVBQU8vOUMsS0FBS3hxQixLQUFNdXVCLEtBQ2pCNUwsT0FBTzRMLEVBQUtuSixNQUFNLE1BQ3JCcGxCLEtBQUt1dUIsR0FBUXpjLElBTXJCa0UsS0FBTSxXQUNKaFcsS0FBS3F1QyxNQUFPLEVBRVosSUFDSW8rQixFQURZenNFLEtBQUs2ckUsV0FBVyxHQUNMRSxXQUMzQixHQUF3QixVQUFwQlUsRUFBV2xnRSxLQUNiLE1BQU1rZ0UsRUFBVzl3QixJQUduQixPQUFPMzdDLEtBQUswc0UsTUFHZHpDLGtCQUFtQixTQUFTMEMsR0FDMUIsR0FBSTNzRSxLQUFLcXVDLEtBQ1AsTUFBTXMrQixFQUdSLElBQUlqNEQsRUFBVTFVLEtBQ2QsU0FBU2ltQyxFQUFPMm1DLEVBQUtDLEdBWW5CLE9BWEExQyxFQUFPNTlELEtBQU8sUUFDZDQ5RCxFQUFPeHVCLElBQU1neEIsRUFDYmo0RCxFQUFRdVosS0FBTzIrQyxFQUVYQyxJQUdGbjRELEVBQVF3N0IsT0FBUyxPQUNqQng3QixFQUFRaW5DLElBQU03cEMsS0FHTis2RCxFQUdaLElBQUssSUFBSWpzRSxFQUFJWixLQUFLNnJFLFdBQVd4c0UsT0FBUyxFQUFHdUIsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUliLEVBQVFDLEtBQUs2ckUsV0FBV2pyRSxHQUN4QnVwRSxFQUFTcHFFLEVBQU1nc0UsV0FFbkIsR0FBcUIsU0FBakJoc0UsRUFBTTByRSxPQUlSLE9BQU94bEMsRUFBTyxPQUdoQixHQUFJbG1DLEVBQU0wckUsUUFBVXpyRSxLQUFLNnlDLEtBQU0sQ0FDN0IsSUFBSWk2QixFQUFXdkUsRUFBTy85QyxLQUFLenFCLEVBQU8sWUFDOUJndEUsRUFBYXhFLEVBQU8vOUMsS0FBS3pxQixFQUFPLGNBRXBDLEdBQUkrc0UsR0FBWUMsRUFBWSxDQUMxQixHQUFJL3NFLEtBQUs2eUMsS0FBTzl5QyxFQUFNMnJFLFNBQ3BCLE9BQU96bEMsRUFBT2xtQyxFQUFNMnJFLFVBQVUsR0FDekIsR0FBSTFyRSxLQUFLNnlDLEtBQU85eUMsRUFBTTRyRSxXQUMzQixPQUFPMWxDLEVBQU9sbUMsRUFBTTRyRSxpQkFHakIsR0FBSW1CLEdBQ1QsR0FBSTlzRSxLQUFLNnlDLEtBQU85eUMsRUFBTTJyRSxTQUNwQixPQUFPemxDLEVBQU9sbUMsRUFBTTJyRSxVQUFVLE9BRzNCLEtBQUlxQixFQU1ULE1BQU0sSUFBSXBsRCxNQUFNLDBDQUxoQixHQUFJM25CLEtBQUs2eUMsS0FBTzl5QyxFQUFNNHJFLFdBQ3BCLE9BQU8xbEMsRUFBT2xtQyxFQUFNNHJFLGdCQVU5QnpCLE9BQVEsU0FBUzM5RCxFQUFNb3ZDLEdBQ3JCLElBQUssSUFBSS82QyxFQUFJWixLQUFLNnJFLFdBQVd4c0UsT0FBUyxFQUFHdUIsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUliLEVBQVFDLEtBQUs2ckUsV0FBV2pyRSxHQUM1QixHQUFJYixFQUFNMHJFLFFBQVV6ckUsS0FBSzZ5QyxNQUNyQjAxQixFQUFPLzlDLEtBQUt6cUIsRUFBTyxlQUNuQkMsS0FBSzZ5QyxLQUFPOXlDLEVBQU00ckUsV0FBWSxDQUNoQyxJQUFJcUIsRUFBZWp0RSxFQUNuQixPQUlBaXRFLElBQ1UsVUFBVHpnRSxHQUNTLGFBQVRBLElBQ0R5Z0UsRUFBYXZCLFFBQVU5dkIsR0FDdkJBLEdBQU9xeEIsRUFBYXJCLGFBR3RCcUIsRUFBZSxNQUdqQixJQUFJN0MsRUFBUzZDLEVBQWVBLEVBQWFqQixXQUFhLEdBSXRELE9BSEE1QixFQUFPNTlELEtBQU9BLEVBQ2Q0OUQsRUFBT3h1QixJQUFNQSxFQUVUcXhCLEdBQ0ZodEUsS0FBS2t3QyxPQUFTLE9BQ2Rsd0MsS0FBS2l1QixLQUFPKytDLEVBQWFyQixXQUNsQjdCLEdBR0Y5cEUsS0FBS2l0RSxTQUFTOUMsSUFHdkI4QyxTQUFVLFNBQVM5QyxFQUFReUIsR0FDekIsR0FBb0IsVUFBaEJ6QixFQUFPNTlELEtBQ1QsTUFBTTQ5RCxFQUFPeHVCLElBY2YsTUFYb0IsVUFBaEJ3dUIsRUFBTzU5RCxNQUNTLGFBQWhCNDlELEVBQU81OUQsS0FDVHZNLEtBQUtpdUIsS0FBT2s4QyxFQUFPeHVCLElBQ00sV0FBaEJ3dUIsRUFBTzU5RCxNQUNoQnZNLEtBQUswc0UsS0FBTzFzRSxLQUFLMjdDLElBQU13dUIsRUFBT3h1QixJQUM5QjM3QyxLQUFLa3dDLE9BQVMsU0FDZGx3QyxLQUFLaXVCLEtBQU8sT0FDYSxXQUFoQms4QyxFQUFPNTlELE1BQXFCcS9ELElBQ3JDNXJFLEtBQUtpdUIsS0FBTzI5QyxHQUdQOUIsR0FHVG9ELE9BQVEsU0FBU3ZCLEdBQ2YsSUFBSyxJQUFJL3FFLEVBQUlaLEtBQUs2ckUsV0FBV3hzRSxPQUFTLEVBQUd1QixHQUFLLElBQUtBLEVBQUcsQ0FDcEQsSUFBSWIsRUFBUUMsS0FBSzZyRSxXQUFXanJFLEdBQzVCLEdBQUliLEVBQU00ckUsYUFBZUEsRUFHdkIsT0FGQTNyRSxLQUFLaXRFLFNBQVNsdEUsRUFBTWdzRSxXQUFZaHNFLEVBQU02ckUsVUFDdENFLEVBQWMvckUsR0FDUCtwRSxJQUtiLE1BQVMsU0FBUzJCLEdBQ2hCLElBQUssSUFBSTdxRSxFQUFJWixLQUFLNnJFLFdBQVd4c0UsT0FBUyxFQUFHdUIsR0FBSyxJQUFLQSxFQUFHLENBQ3BELElBQUliLEVBQVFDLEtBQUs2ckUsV0FBV2pyRSxHQUM1QixHQUFJYixFQUFNMHJFLFNBQVdBLEVBQVEsQ0FDM0IsSUFBSXRCLEVBQVNwcUUsRUFBTWdzRSxXQUNuQixHQUFvQixVQUFoQjVCLEVBQU81OUQsS0FBa0IsQ0FDM0IsSUFBSTRnRSxFQUFTaEQsRUFBT3h1QixJQUNwQm13QixFQUFjL3JFLEdBRWhCLE9BQU9vdEUsR0FNWCxNQUFNLElBQUl4bEQsTUFBTSwwQkFHbEJ5bEQsY0FBZSxTQUFTLzZCLEVBQVVnNUIsRUFBWUMsR0FhNUMsT0FaQXRyRSxLQUFLMnBFLFNBQVcsQ0FDZDV4QyxTQUFVcFQsRUFBTzB0QixHQUNqQmc1QixXQUFZQSxFQUNaQyxRQUFTQSxHQUdTLFNBQWhCdHJFLEtBQUtrd0MsU0FHUGx3QyxLQUFLMjdDLElBQU03cEMsR0FHTmc0RCxJQVFKdDlCLEVBN3NCSyxDQW90QmlCRCxFQUFPQyxTQUd0QyxJQUNFNmdDLG1CQUFxQmhGLEVBQ3JCLE1BQU9pRixHQVVQeG1DLFNBQVMsSUFBSyx5QkFBZEEsQ0FBd0N1aEMsTUN6dUJ0Q2tGLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUIzN0QsSUFBakI0N0QsRUFBNEIsQ0FDL0IsUUFBMkI1N0QsSUFBdkI0N0QsRUFBYXQzRCxNQUFxQixNQUFNczNELEVBQWF0M0QsTUFDekQsT0FBT3MzRCxFQUFhbGhDLFFBR3JCLElBQUlELEVBQVNnaEMsRUFBeUJFLEdBQVksQ0FHakRqaEMsUUFBUyxJQUlWLElBQ0MsSUFBSW1oQyxFQUFjLENBQUVyekMsR0FBSW16QyxFQUFVbGhDLE9BQVFBLEVBQVF4MUIsUUFBUzYyRCxFQUFvQkgsR0FBV0ksUUFBU0wsR0FDbkdBLEVBQW9CNXNFLEVBQUVHLFNBQVEsU0FBUzJyRCxHQUFXQSxFQUFRaWhCLE1BQzFEcGhDLEVBQVNvaEMsRUFBWXBoQyxPQUNyQm9oQyxFQUFZNTJELFFBQVF5VCxLQUFLK2hCLEVBQU9DLFFBQVNELEVBQVFBLEVBQU9DLFFBQVNtaEMsRUFBWUUsU0FDNUUsTUFBTTF0RSxHQUVQLE1BREFvc0MsRUFBT24yQixNQUFRalcsRUFDVEEsRUFJUCxPQUFPb3NDLEVBQU9DLFFBSWZnaEMsRUFBb0J4dUUsRUFBSTR1RSxFQUd4QkosRUFBb0JqbEUsRUFBSWdsRSxFQUd4QkMsRUFBb0I1c0UsRUFBSSxHQ3ZDeEI0c0UsRUFBb0JNLEdBQU1DLEdBRWJBLEVBQVUsSUFBTVAsRUFBb0JqL0QsSUFBTSxpQkNGdkRpL0QsRUFBb0JRLFNBQVlELE1DRGhDUCxFQUFvQlMsS0FBTyxJQUFPLFNBQVdULEVBQW9Cai9ELElBQU0sbUJDQXZFaS9ELEVBQW9Cai9ELEVBQUksSUFBTSx1QkNBOUJpL0QsRUFBb0JuckQsRUFBSSxXQUN2QixHQUEwQixpQkFBZnU2QixXQUF5QixPQUFPQSxXQUMzQyxJQUNDLE9BQU81OEMsTUFBUSxJQUFJOG1DLFNBQVMsY0FBYixHQUNkLE1BQU8zbUMsR0FDUixHQUFzQixpQkFBWHd6QixPQUFxQixPQUFPQSxRQUxqQixHQ0F4QjY1QyxFQUFvQnR0RSxFQUFJLENBQUMyb0UsRUFBS3FGLElBQVUvMkQsT0FBTzNLLFVBQVVGLGVBQWVrZSxLQUFLcStDLEVBQUtxRixHN1VBOUUxeEUsRUFBYSxHQUNiQyxFQUFvQixrQkFFeEIrd0UsRUFBb0IxcUUsRUFBSSxDQUFDcXJFLEVBQUs5L0IsRUFBTW5pQyxFQUFLNmhFLEtBQ3hDLEdBQUd2eEUsRUFBVzJ4RSxHQUFRM3hFLEVBQVcyeEUsR0FBS2x2RSxLQUFLb3ZDLE9BQTNDLENBQ0EsSUFBSSsvQixFQUFRQyxFQUNaLFFBQVd2OEQsSUFBUjVGLEVBRUYsSUFEQSxJQUFJb2lFLEVBQVV0eEUsU0FBU3V4RSxxQkFBcUIsVUFDcEMzdEUsRUFBSSxFQUFHQSxFQUFJMHRFLEVBQVFqdkUsT0FBUXVCLElBQUssQ0FDdkMsSUFBSW9MLEVBQUlzaUUsRUFBUTF0RSxHQUNoQixHQUFHb0wsRUFBRXdrQixhQUFhLFFBQVUyOUMsR0FBT25pRSxFQUFFd2tCLGFBQWEsaUJBQW1CL3pCLEVBQW9CeVAsRUFBSyxDQUFFa2lFLEVBQVNwaUUsRUFBRyxPQUcxR29pRSxJQUNIQyxHQUFhLEdBQ2JELEVBQVNweEUsU0FBU2sxQixjQUFjLFdBRXpCczhDLFFBQVUsUUFDakJKLEVBQU83MUMsUUFBVSxJQUNiaTFDLEVBQW9CaUIsSUFDdkJMLEVBQU9uL0MsYUFBYSxRQUFTdStDLEVBQW9CaUIsSUFFbERMLEVBQU9uL0MsYUFBYSxlQUFnQnh5QixFQUFvQnlQLEdBQ3hEa2lFLEVBQU81ckIsSUFBTTJyQixHQUVkM3hFLEVBQVcyeEUsR0FBTyxDQUFDOS9CLEdBQ25CLElBQUlxZ0MsRUFBbUIsQ0FBQzc3QixFQUFNdmYsS0FFN0I4NkMsRUFBT08sUUFBVVAsRUFBT1EsT0FBUyxLQUNqQzcwQyxhQUFheEIsR0FDYixJQUFJczJDLEVBQVVyeUUsRUFBVzJ4RSxHQUl6QixVQUhPM3hFLEVBQVcyeEUsR0FDbEJDLEVBQU96OEMsWUFBY3k4QyxFQUFPejhDLFdBQVdZLFlBQVk2N0MsR0FDbkRTLEdBQVdBLEVBQVE5dEUsU0FBU3V2QyxHQUFRQSxFQUFHaGQsS0FDcEN1ZixFQUFNLE9BQU9BLEVBQUt2ZixJQUdsQmlGLEVBQVVVLFdBQVd5MUMsRUFBaUJqNUMsS0FBSyxVQUFNM2pCLEVBQVcsQ0FBRXZGLEtBQU0sVUFBV21hLE9BQVEwbkQsSUFBVyxNQUN0R0EsRUFBT08sUUFBVUQsRUFBaUJqNUMsS0FBSyxLQUFNMjRDLEVBQU9PLFNBQ3BEUCxFQUFPUSxPQUFTRixFQUFpQmo1QyxLQUFLLEtBQU0yNEMsRUFBT1EsUUFDbkRQLEdBQWNyeEUsU0FBUzZpRCxLQUFLL3hCLFlBQVlzZ0QsSyxNOFV4Q3pDLElBSUlVLEVBUUFDLEVBR0FDLEVBQ0FDLEVBaEJBQyxFQUFvQixHQUNwQkMsRUFBbUIzQixFQUFvQmpsRSxFQUl2QzZtRSxFQUFpQixHQUdqQkMsRUFBMkIsR0FDM0JDLEVBQWdCLE9Bc0xwQixTQUFTQyxFQUFVQyxHQUNsQkYsRUFBZ0JFLEVBQ2hCLElBQUssSUFBSTV1RSxFQUFJLEVBQUdBLEVBQUl5dUUsRUFBeUJod0UsT0FBUXVCLElBQ3BEeXVFLEVBQXlCenVFLEdBQUc0cEIsS0FBSyxLQUFNZ2xELEdBb0J6QyxTQUFTQyxFQUF3Qm4vQixHQUNoQyxHQUFnQyxJQUE1QnkrQixFQUFpQjF2RSxPQUFjLE9BQU9peEMsSUFDMUMsSUFBSW8vQixFQUFVWCxFQUVkLE9BREFBLEVBQW1CLEdBQ1oxdkMsUUFBUStLLElBQUlzbEMsR0FBUy9sQyxNQUFLLFdBQ2hDLE9BQU84bEMsRUFBd0JuL0IsTUFJakMsU0FBU3EvQixFQUFTQyxHQUNqQixHQUFzQixTQUFsQk4sRUFDSCxNQUFNLElBQUkzbkQsTUFBTSwwQ0FHakIsT0FEQTRuRCxFQUFVLFNBQ0gvQixFQUFvQnFDLE9BQU9sbUMsTUFBSyxTQUFVcGQsR0FDaEQsSUFBS0EsRUFFSixPQURBZ2pELEVBQVVPLElBQTRCLFFBQVUsUUFDekMsS0FHUlAsRUFBVSxXQUVWLElBQUlRLEVBQWlCLEdBSXJCLE9BSEFoQixFQUFtQixHQUNuQkMsRUFBNkIsR0FFdEIzdkMsUUFBUStLLElBQ2RqekIsT0FBTzBzQixLQUFLMnBDLEVBQW9Cd0MsTUFBTUMsUUFBTyxTQUM1Q0MsRUFDQWhrRSxHQVVBLE9BUkFzaEUsRUFBb0J3QyxLQUFLOWpFLEdBQ3hCcWdCLEVBQU9oa0IsRUFDUGdrQixFQUFPcmtCLEVBQ1Bxa0IsRUFBT3Z0QixFQUNQa3hFLEVBQ0FsQixFQUNBZSxHQUVNRyxJQUVSLEtBQ0N2bUMsTUFBSyxXQUNOLE9BQU84bEMsR0FBd0IsV0FDOUIsT0FBSUcsRUFDSU8sRUFBY1AsSUFFckJMLEVBQVUsU0FFSFEsWUFPWixTQUFTSyxFQUFTaDlDLEdBQ2pCLE1BQXNCLFVBQWxCazhDLEVBQ0lqd0MsUUFBUUMsVUFBVXFLLE1BQUssV0FDN0IsTUFBTSxJQUFJaGlCLE1BQU0sOENBR1h3b0QsRUFBYy84QyxHQUd0QixTQUFTKzhDLEVBQWMvOEMsR0FDdEJBLEVBQVVBLEdBQVcsR0FFckIwOEMsSUFFQSxJQUFJamhCLEVBQVVtZ0IsRUFBMkI3bkQsS0FBSSxTQUFVdWxDLEdBQ3RELE9BQU9BLEVBQVF0NUIsTUFFaEI0N0MsT0FBNkJsOUQsRUFFN0IsSUF1QklzRSxFQXZCQWk2RCxFQUFTeGhCLEVBQ1gxbkMsS0FBSSxTQUFVamYsR0FDZCxPQUFPQSxFQUFFa08sU0FFVHZRLE9BQU9tcUMsU0FFVCxHQUFJcWdDLEVBQU9oeEUsT0FBUyxFQUVuQixPQURBa3dFLEVBQVUsU0FDSGx3QyxRQUFRQyxVQUFVcUssTUFBSyxXQUM3QixNQUFNMG1DLEVBQU8sTUFLZmQsRUFBVSxXQUVWMWdCLEVBQVE5dEQsU0FBUSxTQUFVdEIsR0FDckJBLEVBQU82d0UsU0FBUzd3RSxFQUFPNndFLGFBSTVCZixFQUFVLFNBR1YsSUFBSWdCLEVBQWMsU0FBVXpILEdBQ3RCMXlELElBQU9BLEVBQVEweUQsSUFHakIwSCxFQUFrQixHQWF0QixPQVpBM2hCLEVBQVE5dEQsU0FBUSxTQUFVdEIsR0FDekIsR0FBSUEsRUFBTytSLE1BQU8sQ0FDakIsSUFBSWkvRCxFQUFVaHhFLEVBQU8rUixNQUFNKytELEdBQzNCLEdBQUlFLEVBQ0gsSUFBSyxJQUFJN3ZFLEVBQUksRUFBR0EsRUFBSTZ2RSxFQUFRcHhFLE9BQVF1QixJQUNuQzR2RSxFQUFnQnZ4RSxLQUFLd3hFLEVBQVE3dkUsUUFPN0J3VixHQUNIbTVELEVBQVUsUUFDSGx3QyxRQUFRQyxVQUFVcUssTUFBSyxXQUM3QixNQUFNdnpCLE1BSUo2NEQsRUFDSWtCLEVBQWMvOEMsR0FBU3VXLE1BQUssU0FBVWhaLEdBSTVDLE9BSEE2L0MsRUFBZ0J6dkUsU0FBUSxTQUFVMHNFLEdBQzdCOThDLEVBQUt4SSxRQUFRc2xELEdBQVksR0FBRzk4QyxFQUFLMXhCLEtBQUt3dUUsTUFFcEM5OEMsTUFJVDQrQyxFQUFVLFFBQ0hsd0MsUUFBUUMsUUFBUWt4QyxJQUd4QixTQUFTVixJQUNSLEdBQUliLEVBV0gsT0FWS0QsSUFBNEJBLEVBQTZCLElBQzlENzNELE9BQU8wc0IsS0FBSzJwQyxFQUFvQmtELE1BQU0zdkUsU0FBUSxTQUFVbUwsR0FDdkQraUUsRUFBeUJsdUUsU0FBUSxTQUFVMHNFLEdBQzFDRCxFQUFvQmtELEtBQUt4a0UsR0FDeEJ1aEUsRUFDQXVCLFNBSUhDLE9BQTJCbjlELEdBQ3BCLEVBdlZUMDdELEVBQW9CbUQsS0FBT3pCLEVBRTNCMUIsRUFBb0I1c0UsRUFBRTNCLE1BQUssU0FBVW0wQixHQUNwQyxJQStEOEJxNkMsRUFBVW1ELEVBQ3BDQyxFQWhFQXRrQyxFQUFTblosRUFBUW1aLE9BQ2pCc2hDLEVBV0wsU0FBdUJBLEVBQVNKLEdBQy9CLElBQUltRCxFQUFLekIsRUFBaUIxQixHQUMxQixJQUFLbUQsRUFBSSxPQUFPL0MsRUFDaEIsSUFBSXY5QixFQUFLLFNBQVV3Z0MsR0FDbEIsR0FBSUYsRUFBR0MsSUFBSWx4QyxPQUFRLENBQ2xCLEdBQUl3dkMsRUFBaUIyQixHQUFVLENBQzlCLElBQUlyOEMsRUFBVTA2QyxFQUFpQjJCLEdBQVNyOEMsU0FDTCxJQUEvQkEsRUFBUXRNLFFBQVFzbEQsSUFDbkJoNUMsRUFBUXgxQixLQUFLd3VFLFFBR2QyQixFQUFpQixDQUFDM0IsR0FDbEJxQixFQUFxQmdDLEdBRWdCLElBQWxDRixFQUFHdGtELFNBQVNuRSxRQUFRMm9ELElBQ3ZCRixFQUFHdGtELFNBQVNydEIsS0FBSzZ4RSxRQUdsQmowQixRQUFRazBCLEtBQ1AsNEJBQ0NELEVBQ0EsMEJBQ0FyRCxHQUVGMkIsRUFBaUIsR0FFbEIsT0FBT3ZCLEVBQVFpRCxJQUVadjdCLEVBQTJCLFNBQVVobkIsR0FDeEMsTUFBTyxDQUNOd2UsY0FBYyxFQUNkOEksWUFBWSxFQUNaam9CLElBQUssV0FDSixPQUFPaWdELEVBQVF0L0MsSUFFaEJaLElBQUssU0FBVS9LLEdBQ2RpckQsRUFBUXQvQyxHQUFRM0wsS0FJbkIsSUFBSyxJQUFJMkwsS0FBUXMvQyxFQUNaMTJELE9BQU8zSyxVQUFVRixlQUFla2UsS0FBS3FqRCxFQUFTdC9DLElBQWtCLE1BQVRBLEdBQzFEcFgsT0FBT2s2QixlQUFlZixFQUFJL2hCLEVBQU1nbkIsRUFBeUJobkIsSUFNM0QsT0FIQStoQixFQUFHbndDLEVBQUksU0FBVTR0RSxHQUNoQixPQXFIRixTQUE4Qi90QixHQUM3QixPQUFRc3ZCLEdBQ1AsSUFBSyxRQU1KLE9BTEFDLEVBQVUsV0FDVlIsRUFBaUI5dkUsS0FBSytnRCxHQUN0Qnl2QixHQUF3QixXQUN2QkYsRUFBVSxZQUVKdnZCLEVBQ1IsSUFBSyxVQUVKLE9BREErdUIsRUFBaUI5dkUsS0FBSytnRCxHQUNmQSxFQUNSLFFBQ0MsT0FBT0EsR0FsSURneEIsQ0FBcUJuRCxFQUFRMXRFLEVBQUU0dEUsS0FFaEN6OUIsRUEzRE8yZ0MsQ0FBYzc5QyxFQUFReTZDLFFBQVN6NkMsRUFBUWtILElBQ3JEaVMsRUFBT3NrQyxLQTZEdUJwRCxFQTdES3I2QyxFQUFRa0gsR0E2REhzMkMsRUE3RE9ya0MsRUE4RDNDc2tDLEVBQU0sQ0FFVEssc0JBQXVCLEdBQ3ZCQyx1QkFBd0IsR0FDeEJDLHNCQUF1QixHQUN2QkMsZUFBZSxFQUNmQyxlQUFlLEVBQ2ZDLGtCQUFrQixFQUNsQkMsaUJBQWtCLEdBQ2xCQyxNQUFPM0MsSUFBdUJyQixFQUM5QmlFLGFBQWMsV0FDYnRDLEVBQWlCd0IsRUFBR244QyxRQUFRclAsUUFDNUIwcEQsRUFBcUJyQixFQUNyQkQsRUFBb0JDLElBSXJCOXRDLFFBQVEsRUFDUmd5QyxPQUFRLFNBQVVDLEVBQUs1NkMsRUFBVTY2QyxHQUNoQyxRQUFZLy9ELElBQVI4L0QsRUFBbUJmLEVBQUlRLGVBQWdCLE9BQ3RDLEdBQW1CLG1CQUFSTyxFQUFvQmYsRUFBSVEsY0FBZ0JPLE9BQ25ELEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUNuQyxJQUFLLElBQUloeEUsRUFBSSxFQUFHQSxFQUFJZ3hFLEVBQUl2eUUsT0FBUXVCLElBQy9CaXdFLEVBQUlLLHNCQUFzQlUsRUFBSWh4RSxJQUFNbzJCLEdBQVksYUFDaEQ2NUMsRUFBSU0sdUJBQXVCUyxFQUFJaHhFLElBQU1peEUsT0FHdENoQixFQUFJSyxzQkFBc0JVLEdBQU81NkMsR0FBWSxhQUM3QzY1QyxFQUFJTSx1QkFBdUJTLEdBQU9DLEdBR3BDQyxRQUFTLFNBQVVGLEdBQ2xCLFFBQVk5L0QsSUFBUjgvRCxFQUFtQmYsRUFBSVMsZUFBZ0IsT0FDdEMsR0FBbUIsaUJBQVJNLEdBQTRCLE9BQVJBLEVBQ25DLElBQUssSUFBSWh4RSxFQUFJLEVBQUdBLEVBQUlneEUsRUFBSXZ5RSxPQUFRdUIsSUFDL0Jpd0UsRUFBSU8sc0JBQXNCUSxFQUFJaHhFLEtBQU0sT0FDakNpd0UsRUFBSU8sc0JBQXNCUSxJQUFPLEdBRXZDdEIsUUFBUyxTQUFVdDVDLEdBQ2xCNjVDLEVBQUlXLGlCQUFpQnZ5RSxLQUFLKzNCLElBRTNCKzZDLGtCQUFtQixTQUFVLzZDLEdBQzVCNjVDLEVBQUlXLGlCQUFpQnZ5RSxLQUFLKzNCLElBRTNCZzdDLHFCQUFzQixTQUFVaDdDLEdBQy9CLElBQUlpN0MsRUFBTXBCLEVBQUlXLGlCQUFpQnJwRCxRQUFRNk8sR0FDbkNpN0MsR0FBTyxHQUFHcEIsRUFBSVcsaUJBQWlCcDlDLE9BQU82OUMsRUFBSyxJQUVoREMsV0FBWSxXQUVYLE9BREFseUUsS0FBS3V4RSxrQkFBbUIsRUFDaEJqQyxHQUNQLElBQUssT0FDSk4sRUFBNkIsR0FDN0I3M0QsT0FBTzBzQixLQUFLMnBDLEVBQW9Ca0QsTUFBTTN2RSxTQUFRLFNBQVVtTCxHQUN2RHNoRSxFQUFvQmtELEtBQUt4a0UsR0FDeEJ1aEUsRUFDQXVCLE1BR0ZPLEVBQVUsU0FDVixNQUNELElBQUssUUFDSnA0RCxPQUFPMHNCLEtBQUsycEMsRUFBb0JrRCxNQUFNM3ZFLFNBQVEsU0FBVW1MLEdBQ3ZEc2hFLEVBQW9Ca0QsS0FBS3hrRSxHQUN4QnVoRSxFQUNBdUIsTUFHRixNQUNELElBQUssVUFDTCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssU0FDSEMsRUFBMkJBLEdBQTRCLElBQUlod0UsS0FDM0R3dUUsS0FVSjl3QixNQUFPZ3pCLEVBQ1BuK0QsTUFBTzQrRCxFQUNQNW1DLE9BQVEsU0FBVTFtQyxHQUNqQixJQUFLQSxFQUFHLE9BQU93c0UsRUFDZkQsRUFBeUJwd0UsS0FBSzZELElBRS9CcXZFLGlCQUFrQixTQUFVcnZFLEdBQzNCdXNFLEVBQXlCcHdFLEtBQUs2RCxJQUUvQnN2RSxvQkFBcUIsU0FBVXR2RSxHQUM5QixJQUFJbXZFLEVBQU01QyxFQUF5QmxuRCxRQUFRcmxCLEdBQ3ZDbXZFLEdBQU8sR0FBRzVDLEVBQXlCajdDLE9BQU82OUMsRUFBSyxJQUlwRC9rRCxLQUFNZ2lELEVBQWtCekIsSUFFekJxQixPQUFxQmg5RCxFQUNkKytELEdBbktQdGtDLEVBQU85WCxRQUFVMjZDLEVBQ2pCN2lDLEVBQU9qZ0IsU0FBVyxHQUNsQjhpRCxFQUFpQixHQUNqQmg4QyxFQUFReTZDLFFBQVVBLEtBR25CTCxFQUFvQndDLEtBQU8sR0FDM0J4QyxFQUFvQmtELEtBQU8sSSxTQ2hDM0IsSUFBSTJCLEVBQ0E3RSxFQUFvQm5yRCxFQUFFd2xDLGdCQUFld3FCLEVBQVk3RSxFQUFvQm5yRCxFQUFFeWtDLFNBQVcsSUFDdEYsSUFBSTlwRCxFQUFXd3dFLEVBQW9CbnJELEVBQUVybEIsU0FDckMsSUFBS3ExRSxHQUFhcjFFLElBQ2JBLEVBQVNzMUUsZ0JBQ1pELEVBQVlyMUUsRUFBU3MxRSxjQUFjOXZCLE1BQy9CNnZCLEdBQVcsQ0FDZixJQUFJL0QsRUFBVXR4RSxFQUFTdXhFLHFCQUFxQixVQUN6Q0QsRUFBUWp2RSxTQUFRZ3pFLEVBQVkvRCxFQUFRQSxFQUFRanZFLE9BQVMsR0FBR21qRCxLQUs3RCxJQUFLNnZCLEVBQVcsTUFBTSxJQUFJMXFELE1BQU0seURBQ2hDMHFELEVBQVlBLEVBQVVsMUUsUUFBUSxPQUFRLElBQUlBLFFBQVEsUUFBUyxJQUFJQSxRQUFRLFlBQWEsS0FDcEZxd0UsRUFBb0JsdEUsRUFBSSt4RSxHLEc5VWZwQjMxRSxFQUFtQixDQUFDcXhFLEVBQVN3RSxFQUFVanpDLEVBQVNDLEtBQ25ELElBQUlpekMsRUFBVXgxRSxTQUFTazFCLGNBQWMsUUF3QnJDLE9BdEJBc2dELEVBQVFDLElBQU0sYUFDZEQsRUFBUWptRSxLQUFPLFdBaUJmaW1FLEVBQVE3RCxRQUFVNkQsRUFBUTVELE9BaEJKdDdDLElBR3JCLEdBREFrL0MsRUFBUTdELFFBQVU2RCxFQUFRNUQsT0FBUyxLQUNoQixTQUFmdDdDLEVBQU0vbUIsS0FDVCt5QixRQUNNLENBQ04sSUFBSW96QyxFQUFZcC9DLElBQXlCLFNBQWZBLEVBQU0vbUIsS0FBa0IsVUFBWSttQixFQUFNL21CLE1BQ2hFb21FLEVBQVdyL0MsR0FBU0EsRUFBTTVNLFFBQVU0TSxFQUFNNU0sT0FBT2tzRCxNQUFRTCxFQUN6RHpKLEVBQU0sSUFBSW5oRCxNQUFNLHFCQUF1Qm9tRCxFQUFVLGNBQWdCNEUsRUFBVyxLQUNoRjdKLEVBQUk3Z0UsS0FBTyx3QkFDWDZnRSxFQUFJdjhELEtBQU9tbUUsRUFDWDVKLEVBQUlnSSxRQUFVNkIsRUFDZEgsRUFBUTdnRCxXQUFXWSxZQUFZaWdELEdBQy9CanpDLEVBQU91cEMsS0FJVDBKLEVBQVFJLEtBQU9MLEVBRWZ2MUUsU0FBUzZpRCxLQUFLL3hCLFlBQVkwa0QsR0FDbkJBLEdBRUo3MUUsRUFBaUIsQ0FBQ2kyRSxFQUFNTCxLQUUzQixJQURBLElBQUlNLEVBQW1CNzFFLFNBQVN1eEUscUJBQXFCLFFBQzdDM3RFLEVBQUksRUFBR0EsRUFBSWl5RSxFQUFpQnh6RSxPQUFRdUIsSUFBSyxDQUNoRCxJQUNJa3lFLEdBREE1aEMsRUFBTTJoQyxFQUFpQmp5RSxJQUNSNHZCLGFBQWEsY0FBZ0IwZ0IsRUFBSTFnQixhQUFhLFFBQ2pFLEdBQWUsZUFBWjBnQixFQUFJdWhDLE1BQXlCSyxJQUFhRixHQUFRRSxJQUFhUCxHQUFXLE9BQU9yaEMsRUFFckYsSUFBSTZoQyxFQUFvQi8xRSxTQUFTdXhFLHFCQUFxQixTQUN0RCxJQUFRM3RFLEVBQUksRUFBR0EsRUFBSW15RSxFQUFrQjF6RSxPQUFRdUIsSUFBSyxDQUNqRCxJQUFJc3dDLEVBRUosSUFESTRoQyxHQURBNWhDLEVBQU02aEMsRUFBa0JueUUsSUFDVDR2QixhQUFhLGdCQUNoQm9pRCxHQUFRRSxJQUFhUCxFQUFVLE9BQU9yaEMsSUFhcER0MEMsRUFBVSxHQUNWQyxFQUFVLEdBQ1ZDLEVBQWdCczJCLElBQ1osQ0FBRWs5QyxRQUFTLEtBQ2pCLElBQUksSUFBSTF2RSxFQUFJLEVBQUdBLEVBQUloRSxFQUFReUMsT0FBUXVCLElBQUssQ0FDdkMsSUFBSW95RSxFQUFTcDJFLEVBQVFnRSxHQUNsQm95RSxFQUFPcmhELFlBQVlxaEQsRUFBT3JoRCxXQUFXWSxZQUFZeWdELEdBRXJEcDJFLEVBQVF5QyxPQUFTLEdBQ2ZtUyxNQUFPLEtBQ1QsSUFBSSxJQUFJNVEsRUFBSSxFQUFHQSxFQUFJL0QsRUFBUXdDLE9BQVF1QixJQUFLL0QsRUFBUStELEdBQUc2eEUsSUFBTSxhQUN6RDUxRSxFQUFRd0MsT0FBUyxLQUduQm11RSxFQUFvQndDLEtBQUtpRCxRQUFVLENBQUNDLEVBQVVDLEVBQWVDLEVBQWdCbEQsRUFBVW1ELEVBQWVDLEtBQ3JHRCxFQUFjcDBFLEtBQUtuQyxHQUNuQm8yRSxFQUFTbnlFLFNBQVNndEUsSUFDakIsSUFBSTZFLEVBQU9wRixFQUFvQlEsU0FBU0QsR0FDcEN3RSxFQUFXL0UsRUFBb0JsdEUsRUFBSXN5RSxFQUN2QyxNQUFNSSxFQUFTcjJFLEVBQWVpMkUsRUFBTUwsR0FDaENTLEdBQ0o5QyxFQUFTanhFLEtBQUssSUFBSW9nQyxTQUFRLENBQUNDLEVBQVNDLEtBQ25DLElBQUkyUixFQUFNeDBDLEVBQWlCcXhFLEVBQVN3RSxHQUFVLEtBQzdDcmhDLEVBQUlxaUMsR0FBSyxRQUNUcmlDLEVBQUl1aEMsSUFBTSxVQUNWbnpDLE1BQ0VDLEdBQ0gzaUMsRUFBUXFDLEtBQUsrekUsR0FDYm4yRSxFQUFRb0MsS0FBS2l5QyxXLE0rVTFFaEIsSUFpRElzaUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFwREFDLEVBQWtCLENBQ3JCQyxJQUFLLEdBVUZDLEVBQXdCLEdBQzVCLFNBQVNDLEVBQWdCaEcsR0FDeEIsT0FBTyxJQUFJMXVDLFNBQVEsQ0FBQ0MsRUFBU0MsS0FDNUJ1MEMsRUFBc0IvRixHQUFXenVDLEVBRWpDLElBQUk2dUMsRUFBTVgsRUFBb0JsdEUsRUFBSWt0RSxFQUFvQk0sR0FBR0MsR0FFckQzM0QsRUFBUSxJQUFJdVIsTUFhaEI2bEQsRUFBb0IxcUUsRUFBRXFyRSxHQVpGNzZDLElBQ25CLEdBQUd3Z0QsRUFBc0IvRixHQUFVLENBQ2xDK0YsRUFBc0IvRixRQUFXajhELEVBQ2pDLElBQUk0Z0UsRUFBWXAvQyxJQUF5QixTQUFmQSxFQUFNL21CLEtBQWtCLFVBQVkrbUIsRUFBTS9tQixNQUNoRXluRSxFQUFVMWdELEdBQVNBLEVBQU01TSxRQUFVNE0sRUFBTTVNLE9BQU84N0IsSUFDcERwc0MsRUFBTTY5RCxRQUFVLDRCQUE4QmxHLEVBQVUsY0FBZ0IyRSxFQUFZLEtBQU9zQixFQUFVLElBQ3JHNTlELEVBQU1tWSxLQUFPLGlCQUNiblksRUFBTTdKLEtBQU9tbUUsRUFDYnQ4RCxFQUFNMDZELFFBQVVrRCxFQUNoQnowQyxFQUFPbnBCLFVBeUJYLFNBQVN0WixFQUFhczJCLEdBR3JCLFNBQVM4Z0QsRUFBeUJDLEdBVWpDLElBVEEsSUFBSTNELEVBQWtCLENBQUMyRCxHQUNuQkMsRUFBdUIsR0FFdkJqdEIsRUFBUXFwQixFQUFnQnJwRCxLQUFJLFNBQVVtVCxHQUN6QyxNQUFPLENBQ05neUIsTUFBTyxDQUFDaHlCLEdBQ1JBLEdBQUlBLE1BR0M2c0IsRUFBTTluRCxPQUFTLEdBQUcsQ0FDeEIsSUFBSWcxRSxFQUFZbHRCLEVBQU03bkQsTUFDbEJtdUUsRUFBVzRHLEVBQVUvNUMsR0FDckJneUIsRUFBUStuQixFQUFVL25CLE1BQ2xCL2YsRUFBU2loQyxFQUFvQmpsRSxFQUFFa2xFLEdBQ25DLEdBQ0VsaEMsS0FDQUEsRUFBT3NrQyxJQUFJUSxlQUFrQjlrQyxFQUFPc2tDLElBQUlVLGtCQUYxQyxDQUtBLEdBQUlobEMsRUFBT3NrQyxJQUFJUyxjQUNkLE1BQU8sQ0FDTi9rRSxLQUFNLGdCQUNOKy9DLE1BQU9BLEVBQ1BtaEIsU0FBVUEsR0FHWixHQUFJbGhDLEVBQU9za0MsSUFBSVksTUFDZCxNQUFPLENBQ05sbEUsS0FBTSxhQUNOKy9DLE1BQU9BLEVBQ1BtaEIsU0FBVUEsR0FHWixJQUFLLElBQUk3c0UsRUFBSSxFQUFHQSxFQUFJMnJDLEVBQU85WCxRQUFRcDFCLE9BQVF1QixJQUFLLENBQy9DLElBQUkwekUsRUFBVy9uQyxFQUFPOVgsUUFBUTd6QixHQUMxQnFXLEVBQVN1MkQsRUFBb0JqbEUsRUFBRStyRSxHQUNuQyxHQUFLcjlELEVBQUwsQ0FDQSxHQUFJQSxFQUFPNDVELElBQUlPLHNCQUFzQjNELEdBQ3BDLE1BQU8sQ0FDTmxoRSxLQUFNLFdBQ04rL0MsTUFBT0EsRUFBTS9zRCxPQUFPLENBQUMrMEUsSUFDckI3RyxTQUFVQSxFQUNWNkcsU0FBVUEsSUFHK0IsSUFBdkM5RCxFQUFnQnJvRCxRQUFRbXNELEtBQ3hCcjlELEVBQU80NUQsSUFBSUssc0JBQXNCekQsSUFDL0IyRyxFQUFxQkUsS0FDekJGLEVBQXFCRSxHQUFZLElBQ2xDQyxFQUFZSCxFQUFxQkUsR0FBVyxDQUFDN0csYUFHdkMyRyxFQUFxQkUsR0FDNUI5RCxFQUFnQnZ4RSxLQUFLcTFFLEdBQ3JCbnRCLEVBQU1sb0QsS0FBSyxDQUNWcXRELE1BQU9BLEVBQU0vc0QsT0FBTyxDQUFDKzBFLElBQ3JCaDZDLEdBQUlnNkMsU0FLUCxNQUFPLENBQ04vbkUsS0FBTSxXQUNOa2hFLFNBQVUwRyxFQUNWM0QsZ0JBQWlCQSxFQUNqQjRELHFCQUFzQkEsR0FJeEIsU0FBU0csRUFBWTcwRSxFQUFHQyxHQUN2QixJQUFLLElBQUlpQixFQUFJLEVBQUdBLEVBQUlqQixFQUFFTixPQUFRdUIsSUFBSyxDQUNsQyxJQUFJOGlDLEVBQU8vakMsRUFBRWlCLElBQ1ksSUFBckJsQixFQUFFeW9CLFFBQVF1YixJQUFjaGtDLEVBQUVULEtBQUt5a0MsSUEzRWpDOHBDLEVBQW9CbjNELFVBQVVtM0QsRUFBb0JuM0QsRUFBRW0rRCxTQUN4RGhCLE9BQXNCMWhFLEVBZ0Z0QixJQUFJc2lFLEVBQXVCLEdBQ3ZCNUQsRUFBa0IsR0FDbEJpRSxFQUFnQixHQUVoQkMsRUFBd0IsU0FBK0Jub0MsR0FDMURzUSxRQUFRazBCLEtBQ1AsNEJBQThCeGtDLEVBQU9qUyxHQUFLLHlCQUk1QyxJQUFLLElBQUltekMsS0FBWWdHLEVBQ3BCLEdBQUlqRyxFQUFvQnR0RSxFQUFFdXpFLEVBQWVoRyxHQUFXLENBQ25ELElBRUlodUUsRUFGQWsxRSxFQUFtQmxCLEVBQWNoRyxHQVlqQ21ILEdBQWEsRUFDYkMsR0FBVSxFQUNWQyxHQUFZLEVBQ1pDLEVBQVksR0FJaEIsUUFmQ3QxRSxFQURHazFFLEVBQ01ULEVBQXlCekcsR0FFekIsQ0FDUmxoRSxLQUFNLFdBQ05raEUsU0FBVUEsSUFRRG5oQixRQUNWeW9CLEVBQVkseUJBQTJCdDFFLEVBQU82c0QsTUFBTTMyQyxLQUFLLFNBRWxEbFcsRUFBTzhNLE1BQ2QsSUFBSyxnQkFDQTZtQixFQUFRNGhELFlBQVk1aEQsRUFBUTRoRCxXQUFXdjFFLEdBQ3RDMnpCLEVBQVE2aEQsaUJBQ1pMLEVBQWEsSUFBSWp0RCxNQUNoQixvQ0FDQ2xvQixFQUFPZ3VFLFNBQ1BzSCxJQUVILE1BQ0QsSUFBSyxXQUNBM2hELEVBQVE0aEQsWUFBWTVoRCxFQUFRNGhELFdBQVd2MUUsR0FDdEMyekIsRUFBUTZoRCxpQkFDWkwsRUFBYSxJQUFJanRELE1BQ2hCLDJDQUNDbG9CLEVBQU9ndUUsU0FDUCxPQUNBaHVFLEVBQU82MEUsU0FDUFMsSUFFSCxNQUNELElBQUssYUFDQTNoRCxFQUFROGhELGNBQWM5aEQsRUFBUThoRCxhQUFhejFFLEdBQzFDMnpCLEVBQVEraEQsbUJBQ1pQLEVBQWEsSUFBSWp0RCxNQUNoQixtQkFBcUI4bEQsRUFBVyxtQkFBcUJzSCxJQUV2RCxNQUNELElBQUssV0FDQTNoRCxFQUFRZ2lELFlBQVloaUQsRUFBUWdpRCxXQUFXMzFFLEdBQzNDbzFFLEdBQVUsRUFDVixNQUNELElBQUssV0FDQXpoRCxFQUFRaWlELFlBQVlqaUQsRUFBUWlpRCxXQUFXNTFFLEdBQzNDcTFFLEdBQVksRUFDWixNQUNELFFBQ0MsTUFBTSxJQUFJbnRELE1BQU0sb0JBQXNCbG9CLEVBQU84TSxNQUUvQyxHQUFJcW9FLEVBQ0gsTUFBTyxDQUNOeCtELE1BQU93K0QsR0FHVCxHQUFJQyxFQUdILElBQUtwSCxLQUZMZ0gsRUFBY2hILEdBQVlrSCxFQUMxQkosRUFBWS9ELEVBQWlCL3dFLEVBQU8rd0UsaUJBQ25CL3dFLEVBQU8yMEUscUJBQ25CNUcsRUFBb0J0dEUsRUFBRVQsRUFBTzIwRSxxQkFBc0IzRyxLQUNqRDJHLEVBQXFCM0csS0FDekIyRyxFQUFxQjNHLEdBQVksSUFDbEM4RyxFQUNDSCxFQUFxQjNHLEdBQ3JCaHVFLEVBQU8yMEUscUJBQXFCM0csS0FLNUJxSCxJQUNIUCxFQUFZL0QsRUFBaUIsQ0FBQy93RSxFQUFPZ3VFLFdBQ3JDZ0gsRUFBY2hILEdBQVlpSCxHQUk3QmpCLE9BQWdCM2hFLEVBSWhCLElBREEsSUFvQkl3akUsRUFwQkFDLEVBQThCLEdBQ3pCenpFLEVBQUksRUFBR0EsRUFBSTB1RSxFQUFnQm54RSxPQUFReUMsSUFBSyxDQUNoRCxJQUFJMHpFLEVBQW1CaEYsRUFBZ0IxdUUsR0FDbkN5cUMsRUFBU2loQyxFQUFvQmpsRSxFQUFFaXRFLEdBRWxDanBDLEdBQ0FBLEVBQU9za0MsSUFBSVEsZUFFWG9ELEVBQWNlLEtBQXNCZCxJQUVuQ25vQyxFQUFPc2tDLElBQUlVLGtCQUVaZ0UsRUFBNEJ0MkUsS0FBSyxDQUNoQ3N0QyxPQUFRaXBDLEVBQ1IzSCxRQUFTdGhDLEVBQU9za0MsSUFBSWEsYUFDcEJHLGFBQWN0bEMsRUFBT3NrQyxJQUFJUSxnQkFPNUIsTUFBTyxDQUNOZixRQUFTLFdBTVIsSUFBSTJCLEVBTEp5QixFQUEyQjN5RSxTQUFRLFNBQVVndEUsVUFDckM2RixFQUFnQjdGLE1BRXhCMkYsT0FBNkI1aEUsRUFJN0IsSUFEQSxJQW9DSTJqRSxFQXBDQXR1QixFQUFRcXBCLEVBQWdCcHJELFFBQ3JCK2hDLEVBQU05bkQsT0FBUyxHQUFHLENBQ3hCLElBQUlvdUUsRUFBV3RtQixFQUFNN25ELE1BQ2pCaXRDLEVBQVNpaEMsRUFBb0JqbEUsRUFBRWtsRSxHQUNuQyxHQUFLbGhDLEVBQUwsQ0FFQSxJQUFJcmYsRUFBTyxHQUdQd29ELEVBQWtCbnBDLEVBQU9za0MsSUFBSVcsaUJBQ2pDLElBQUsxdkUsRUFBSSxFQUFHQSxFQUFJNHpFLEVBQWdCcjJFLE9BQVF5QyxJQUN2QzR6RSxFQUFnQjV6RSxHQUFHMG9CLEtBQUssS0FBTTBDLEdBYy9CLElBWkFzZ0QsRUFBb0JtRCxLQUFLbEQsR0FBWXZnRCxFQUdyQ3FmLEVBQU9za0MsSUFBSWx4QyxRQUFTLFNBR2I2dEMsRUFBb0JqbEUsRUFBRWtsRSxVQUd0QjJHLEVBQXFCM0csR0FHdkIzckUsRUFBSSxFQUFHQSxFQUFJeXFDLEVBQU9qZ0IsU0FBU2p0QixPQUFReUMsSUFBSyxDQUM1QyxJQUFJaXNCLEVBQVF5L0MsRUFBb0JqbEUsRUFBRWdrQyxFQUFPamdCLFNBQVN4cUIsSUFDN0Npc0IsSUFDTGtrRCxFQUFNbGtELEVBQU0wRyxRQUFRdE0sUUFBUXNsRCxLQUNqQixHQUNWMS9DLEVBQU0wRyxRQUFRTCxPQUFPNjlDLEVBQUssS0FPN0IsSUFBSyxJQUFJdUQsS0FBb0JwQixFQUM1QixHQUFJNUcsRUFBb0J0dEUsRUFBRWswRSxFQUFzQm9CLEtBQy9DanBDLEVBQVNpaEMsRUFBb0JqbEUsRUFBRWl0RSxJQUk5QixJQUZBRixFQUNDbEIsRUFBcUJvQixHQUNqQjF6RSxFQUFJLEVBQUdBLEVBQUl3ekUsRUFBMkJqMkUsT0FBUXlDLElBQ2xEMnpFLEVBQWFILEVBQTJCeHpFLElBQ3hDbXdFLEVBQU0xbEMsRUFBT2pnQixTQUFTbkUsUUFBUXN0RCxLQUNuQixHQUFHbHBDLEVBQU9qZ0IsU0FBUzhILE9BQU82OUMsRUFBSyxJQU0vQ3pnRSxNQUFPLFNBQVUrK0QsR0FFaEIsSUFBSyxJQUFJNEQsS0FBa0JNLEVBQ3RCakgsRUFBb0J0dEUsRUFBRXUwRSxFQUFlTixLQUN4QzNHLEVBQW9CeHVFLEVBQUVtMUUsR0FBa0JNLEVBQWNOLElBS3hELElBQUssSUFBSXZ6RSxFQUFJLEVBQUdBLEVBQUkreUUsRUFBcUJ0MEUsT0FBUXVCLElBQ2hEK3lFLEVBQXFCL3lFLEdBQUc0c0UsR0FJekIsSUFBSyxJQUFJZ0ksS0FBb0JwQixFQUM1QixHQUFJNUcsRUFBb0J0dEUsRUFBRWswRSxFQUFzQm9CLEdBQW1CLENBQ2xFLElBQUlqcEMsRUFBU2loQyxFQUFvQmpsRSxFQUFFaXRFLEdBQ25DLEdBQUlqcEMsRUFBUSxDQUNYK29DLEVBQ0NsQixFQUFxQm9CLEdBSXRCLElBSEEsSUFBSUcsRUFBWSxHQUNaQyxFQUFnQixHQUNoQkMsRUFBMkIsR0FDdEIvekUsRUFBSSxFQUFHQSxFQUFJd3pFLEVBQTJCajJFLE9BQVF5QyxJQUFLLENBQzNELElBQUkyekUsRUFBYUgsRUFBMkJ4ekUsR0FDeENnMEUsRUFDSHZwQyxFQUFPc2tDLElBQUlLLHNCQUFzQnVFLEdBQzlCNUQsRUFDSHRsQyxFQUFPc2tDLElBQUlNLHVCQUF1QnNFLEdBQ25DLEdBQUlLLEVBQWdCLENBQ25CLElBQTJDLElBQXZDSCxFQUFVeHRELFFBQVEydEQsR0FBd0IsU0FDOUNILEVBQVUxMkUsS0FBSzYyRSxHQUNmRixFQUFjMzJFLEtBQUs0eUUsR0FDbkJnRSxFQUF5QjUyRSxLQUFLdzJFLElBR2hDLElBQUssSUFBSTl5RSxFQUFJLEVBQUdBLEVBQUlnekUsRUFBVXQyRSxPQUFRc0QsSUFDckMsSUFDQ2d6RSxFQUFVaHpFLEdBQUc2bkIsS0FBSyxLQUFNOHFELEdBQ3ZCLE1BQU94TSxHQUNSLEdBQWdDLG1CQUFyQjhNLEVBQWNqekUsR0FDeEIsSUFDQ2l6RSxFQUFjanpFLEdBQUdtbUUsRUFBSyxDQUNyQjJFLFNBQVUrSCxFQUNWTyxhQUFjRixFQUF5Qmx6RSxLQUV2QyxNQUFPcXpFLEdBQ0o1aUQsRUFBUTZpRCxXQUNYN2lELEVBQVE2aUQsVUFBVSxDQUNqQjFwRSxLQUFNLCtCQUNOa2hFLFNBQVUrSCxFQUNWTyxhQUFjRixFQUF5Qmx6RSxHQUN2Q3lULE1BQU80L0QsRUFDUEUsY0FBZXBOLElBR1oxMUMsRUFBUStpRCxnQkFDWjVGLEVBQVl5RixHQUNaekYsRUFBWXpILFNBSVYxMUMsRUFBUTZpRCxXQUNYN2lELEVBQVE2aUQsVUFBVSxDQUNqQjFwRSxLQUFNLGlCQUNOa2hFLFNBQVUrSCxFQUNWTyxhQUFjRixFQUF5Qmx6RSxHQUN2Q3lULE1BQU8weUQsSUFHSjExQyxFQUFRK2lELGVBQ1o1RixFQUFZekgsS0FVbkIsSUFBSyxJQUFJNW9FLEVBQUksRUFBR0EsRUFBSXExRSxFQUE0QmwyRSxPQUFRYSxJQUFLLENBQzVELElBQUl3akMsRUFBTzZ4QyxFQUE0QnIxRSxHQUNuQ3V0RSxFQUFXL3BDLEVBQUs2SSxPQUNwQixJQUNDN0ksRUFBS21xQyxRQUFRSixHQUNaLE1BQU8zRSxHQUNSLEdBQWlDLG1CQUF0QnBsQyxFQUFLbXVDLGFBQ2YsSUFDQ251QyxFQUFLbXVDLGFBQWEvSSxFQUFLLENBQ3RCMkUsU0FBVUEsRUFDVmxoQyxPQUFRaWhDLEVBQW9CamxFLEVBQUVrbEUsS0FFOUIsTUFBT3VJLEdBQ0o1aUQsRUFBUTZpRCxXQUNYN2lELEVBQVE2aUQsVUFBVSxDQUNqQjFwRSxLQUFNLG9DQUNOa2hFLFNBQVVBLEVBQ1ZyM0QsTUFBTzQvRCxFQUNQRSxjQUFlcE4sSUFHWjExQyxFQUFRK2lELGdCQUNaNUYsRUFBWXlGLEdBQ1p6RixFQUFZekgsU0FJVjExQyxFQUFRNmlELFdBQ1g3aUQsRUFBUTZpRCxVQUFVLENBQ2pCMXBFLEtBQU0sc0JBQ05raEUsU0FBVUEsRUFDVnIzRCxNQUFPMHlELElBR0oxMUMsRUFBUStpRCxlQUNaNUYsRUFBWXpILElBTWhCLE9BQU8wSCxJQWxaVjkxQyxLQUFxQywrQkFBSSxDQUFDcXpDLEVBQVNxSSxFQUFhL04sS0FDL0QsSUFBSSxJQUFJb0YsS0FBWTJJLEVBQ2hCNUksRUFBb0J0dEUsRUFBRWsyRSxFQUFhM0ksS0FDckNnRyxFQUFjaEcsR0FBWTJJLEVBQVkzSSxJQUlyQ3BGLEdBQVNzTCxFQUFxQjEwRSxLQUFLb3BFLEdBQ25DeUwsRUFBc0IvRixLQUN4QitGLEVBQXNCL0YsS0FDdEIrRixFQUFzQi9GLFFBQVdqOEQsSUE0WW5DMDdELEVBQW9Ca0QsS0FBSzJGLE1BQVEsU0FBVTVJLEVBQVU0RixHQUMvQ0ksSUFDSkEsRUFBZ0IsR0FDaEJFLEVBQXVCLEdBQ3ZCRCxFQUE2QixHQUM3QkwsRUFBY3AwRSxLQUFLbkMsSUFFZjB3RSxFQUFvQnR0RSxFQUFFdXpFLEVBQWVoRyxLQUN6Q2dHLEVBQWNoRyxHQUFZRCxFQUFvQnh1RSxFQUFFeXVFLEtBR2xERCxFQUFvQndDLEtBQUtxRyxNQUFRLFNBQ2hDbkQsRUFDQUMsRUFDQUMsRUFDQWxELEVBQ0FtRCxFQUNBQyxHQUVBRCxFQUFjcDBFLEtBQUtuQyxHQUNuQjAyRSxFQUFzQixHQUN0QkUsRUFBNkJQLEVBQzdCTSxFQUFnQkwsRUFBZW5ELFFBQU8sU0FBVXBILEVBQUszOEQsR0FFcEQsT0FEQTI4RCxFQUFJMzhELElBQU8sRUFDSjI4RCxJQUNMLElBQ0g4SyxFQUF1QixHQUN2QlQsRUFBU255RSxTQUFRLFNBQVVndEUsR0FFekJQLEVBQW9CdHRFLEVBQUUwekUsRUFBaUI3RixTQUNWajhELElBQTdCOGhFLEVBQWdCN0YsS0FFaEJtQyxFQUFTanhFLEtBQUs4MEUsRUFBZ0JoRyxJQUM5QnlGLEVBQW9CekYsSUFBVyxNQUc3QlAsRUFBb0JuM0QsSUFDdkJtM0QsRUFBb0JuM0QsRUFBRW0rRCxTQUFXLFNBQVV6RyxFQUFTbUMsR0FFbERzRCxJQUNDaEcsRUFBb0J0dEUsRUFBRXN6RSxFQUFxQnpGLElBQzVDUCxFQUFvQnR0RSxFQUFFMHpFLEVBQWlCN0YsU0FDVmo4RCxJQUE3QjhoRSxFQUFnQjdGLEtBRWhCbUMsRUFBU2p4RSxLQUFLODBFLEVBQWdCaEcsSUFDOUJ5RixFQUFvQnpGLElBQVcsTUFNbkNQLEVBQW9CcUMsS0FBTyxLQUMxQixHQUFxQixvQkFBVm5tQyxNQUF1QixNQUFNLElBQUkvaEIsTUFBTSxzQ0FDbEQsT0FBTytoQixNQUFNOGpDLEVBQW9CbHRFLEVBQUlrdEUsRUFBb0JTLFFBQVF0a0MsTUFBTUwsSUFDdEUsR0FBdUIsTUFBcEJBLEVBQVNFLE9BQVosQ0FDQSxJQUFJRixFQUFTQyxHQUFJLE1BQU0sSUFBSTVoQixNQUFNLG1DQUFxQzJoQixFQUFTRyxZQUMvRSxPQUFPSCxFQUFTUSxhLEdDbmZRMGpDLEVBQW9CLE8iLCJmaWxlIjoiY2hpbmEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgaW5Qcm9ncmVzcyA9IHt9O1xudmFyIGRhdGFXZWJwYWNrUHJlZml4ID0gXCJnZW8tc2F0ZWxsaXRlczpcIjtcbi8vIGxvYWRTY3JpcHQgZnVuY3Rpb24gdG8gbG9hZCBhIHNjcmlwdCB2aWEgc2NyaXB0IHRhZ1xuX193ZWJwYWNrX3JlcXVpcmVfXy5sID0gKHVybCwgZG9uZSwga2V5LCBjaHVua0lkKSA9PiB7XG5cdGlmKGluUHJvZ3Jlc3NbdXJsXSkgeyBpblByb2dyZXNzW3VybF0ucHVzaChkb25lKTsgcmV0dXJuOyB9XG5cdHZhciBzY3JpcHQsIG5lZWRBdHRhY2g7XG5cdGlmKGtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgc2NyaXB0cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIHMgPSBzY3JpcHRzW2ldO1xuXHRcdFx0aWYocy5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgPT0gdXJsIHx8IHMuZ2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIpID09IGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KSB7IHNjcmlwdCA9IHM7IGJyZWFrOyB9XG5cdFx0fVxuXHR9XG5cdGlmKCFzY3JpcHQpIHtcblx0XHRuZWVkQXR0YWNoID0gdHJ1ZTtcblx0XHRzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblxuXHRcdHNjcmlwdC5jaGFyc2V0ID0gJ3V0Zi04Jztcblx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcblx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuXHRcdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIF9fd2VicGFja19yZXF1aXJlX18ubmMpO1xuXHRcdH1cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwiZGF0YS13ZWJwYWNrXCIsIGRhdGFXZWJwYWNrUHJlZml4ICsga2V5KTtcblx0XHRzY3JpcHQuc3JjID0gdXJsO1xuXHR9XG5cdGluUHJvZ3Jlc3NbdXJsXSA9IFtkb25lXTtcblx0dmFyIG9uU2NyaXB0Q29tcGxldGUgPSAocHJldiwgZXZlbnQpID0+IHtcblx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gbnVsbDtcblx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG5cdFx0dmFyIGRvbmVGbnMgPSBpblByb2dyZXNzW3VybF07XG5cdFx0ZGVsZXRlIGluUHJvZ3Jlc3NbdXJsXTtcblx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdGRvbmVGbnMgJiYgZG9uZUZucy5mb3JFYWNoKChmbikgPT4gKGZuKGV2ZW50KSkpO1xuXHRcdGlmKHByZXYpIHJldHVybiBwcmV2KGV2ZW50KTtcblx0fVxuXHQ7XG5cdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChvblNjcmlwdENvbXBsZXRlLmJpbmQobnVsbCwgdW5kZWZpbmVkLCB7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSksIDEyMDAwMCk7XG5cdHNjcmlwdC5vbmVycm9yID0gb25TY3JpcHRDb21wbGV0ZS5iaW5kKG51bGwsIHNjcmlwdC5vbmVycm9yKTtcblx0c2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGUuYmluZChudWxsLCBzY3JpcHQub25sb2FkKTtcblx0bmVlZEF0dGFjaCAmJiBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG59OyIsInZhciBjcmVhdGVTdHlsZXNoZWV0ID0gKGNodW5rSWQsIGZ1bGxocmVmLCByZXNvbHZlLCByZWplY3QpID0+IHtcblx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuXHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdHZhciBvbkxpbmtDb21wbGV0ZSA9IChldmVudCkgPT4ge1xuXHRcdC8vIGF2b2lkIG1lbSBsZWFrcy5cblx0XHRsaW5rVGFnLm9uZXJyb3IgPSBsaW5rVGFnLm9ubG9hZCA9IG51bGw7XG5cdFx0aWYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJykge1xuXHRcdFx0cmVzb2x2ZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuXHRcdFx0dmFyIHJlYWxIcmVmID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5ocmVmIHx8IGZ1bGxocmVmO1xuXHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZWFsSHJlZiArIFwiKVwiKTtcblx0XHRcdGVyci5jb2RlID0gXCJDU1NfQ0hVTktfTE9BRF9GQUlMRURcIjtcblx0XHRcdGVyci50eXBlID0gZXJyb3JUeXBlO1xuXHRcdFx0ZXJyLnJlcXVlc3QgPSByZWFsSHJlZjtcblx0XHRcdGxpbmtUYWcucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsaW5rVGFnKVxuXHRcdFx0cmVqZWN0KGVycik7XG5cdFx0fVxuXHR9XG5cdGxpbmtUYWcub25lcnJvciA9IGxpbmtUYWcub25sb2FkID0gb25MaW5rQ29tcGxldGU7XG5cdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG5cdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG5cdHJldHVybiBsaW5rVGFnO1xufTtcbnZhciBmaW5kU3R5bGVzaGVldCA9IChocmVmLCBmdWxsaHJlZikgPT4ge1xuXHR2YXIgZXhpc3RpbmdMaW5rVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGlua1wiKTtcblx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpIHx8IHRhZy5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuXHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gdGFnO1xuXHR9XG5cdHZhciBleGlzdGluZ1N0eWxlVGFncyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3R5bGVcIik7XG5cdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcblx0XHR2YXIgZGF0YUhyZWYgPSB0YWcuZ2V0QXR0cmlidXRlKFwiZGF0YS1ocmVmXCIpO1xuXHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHRhZztcblx0fVxufTtcbnZhciBsb2FkU3R5bGVzaGVldCA9IChjaHVua0lkKSA9PiB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0dmFyIGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLm1pbmlDc3NGKGNodW5rSWQpO1xuXHRcdHZhciBmdWxsaHJlZiA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIGhyZWY7XG5cdFx0aWYoZmluZFN0eWxlc2hlZXQoaHJlZiwgZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuXHRcdGNyZWF0ZVN0eWxlc2hlZXQoY2h1bmtJZCwgZnVsbGhyZWYsIHJlc29sdmUsIHJlamVjdCk7XG5cdH0pO1xufVxuLy8gbm8gY2h1bmsgbG9hZGluZ1xuXG52YXIgb2xkVGFncyA9IFtdO1xudmFyIG5ld1RhZ3MgPSBbXTtcbnZhciBhcHBseUhhbmRsZXIgPSAob3B0aW9ucykgPT4ge1xuXHRyZXR1cm4geyBkaXNwb3NlOiAoKSA9PiB7XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IG9sZFRhZ3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBvbGRUYWcgPSBvbGRUYWdzW2ldO1xuXHRcdFx0aWYob2xkVGFnLnBhcmVudE5vZGUpIG9sZFRhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG9sZFRhZyk7XG5cdFx0fVxuXHRcdG9sZFRhZ3MubGVuZ3RoID0gMDtcblx0fSwgYXBwbHk6ICgpID0+IHtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbmV3VGFncy5sZW5ndGg7IGkrKykgbmV3VGFnc1tpXS5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblx0XHRuZXdUYWdzLmxlbmd0aCA9IDA7XG5cdH0gfTtcbn1cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQy5taW5pQ3NzID0gKGNodW5rSWRzLCByZW1vdmVkQ2h1bmtzLCByZW1vdmVkTW9kdWxlcywgcHJvbWlzZXMsIGFwcGx5SGFuZGxlcnMsIHVwZGF0ZWRNb2R1bGVzTGlzdCkgPT4ge1xuXHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0Y2h1bmtJZHMuZm9yRWFjaCgoY2h1bmtJZCkgPT4ge1xuXHRcdHZhciBocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5taW5pQ3NzRihjaHVua0lkKTtcblx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuXHRcdGNvbnN0IG9sZFRhZyA9IGZpbmRTdHlsZXNoZWV0KGhyZWYsIGZ1bGxocmVmKTtcblx0XHRpZighb2xkVGFnKSByZXR1cm47XG5cdFx0cHJvbWlzZXMucHVzaChuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0XHR2YXIgdGFnID0gY3JlYXRlU3R5bGVzaGVldChjaHVua0lkLCBmdWxsaHJlZiwgKCkgPT4ge1xuXHRcdFx0XHR0YWcuYXMgPSBcInN0eWxlXCI7XG5cdFx0XHRcdHRhZy5yZWwgPSBcInByZWxvYWRcIjtcblx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0fSwgcmVqZWN0KTtcblx0XHRcdG9sZFRhZ3MucHVzaChvbGRUYWcpO1xuXHRcdFx0bmV3VGFncy5wdXNoKHRhZyk7XG5cdFx0fSkpO1xuXHR9KTtcbn0iLCJjb25zdCBicmVha3BvaW50cyA9IHtcbiAgY2FsY3VsYXRlOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5ib2R5KVxuICAgICAgLmdldFByb3BlcnR5VmFsdWUoJy0tYnJlYWtwb2ludCcpXG4gICAgICAucmVwbGFjZSgvXFxcIi9nLCAnJylcbiAgICAgIC50cmltKClcbiAgfSxcbiAgaXNNb2JpbGU6IGZ1bmN0aW9uKCkge1xuICAgIGxldCBicmVha3BvaW50ID0gdGhpcy5jYWxjdWxhdGUoKVxuICAgIGlmIChicmVha3BvaW50ID09ICd4c21hbGwnIHx8IGJyZWFrcG9pbnQgPT0gJ3NtYWxsJykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYnJlYWtwb2ludHNcbiIsImV4cG9ydCB2YXIgZXBzaWxvbiA9IDFlLTY7XG5leHBvcnQgdmFyIGVwc2lsb24yID0gMWUtMTI7XG5leHBvcnQgdmFyIHBpID0gTWF0aC5QSTtcbmV4cG9ydCB2YXIgaGFsZlBpID0gcGkgLyAyO1xuZXhwb3J0IHZhciBxdWFydGVyUGkgPSBwaSAvIDQ7XG5leHBvcnQgdmFyIHRhdSA9IHBpICogMjtcblxuZXhwb3J0IHZhciBkZWdyZWVzID0gMTgwIC8gcGk7XG5leHBvcnQgdmFyIHJhZGlhbnMgPSBwaSAvIDE4MDtcblxuZXhwb3J0IHZhciBhYnMgPSBNYXRoLmFicztcbmV4cG9ydCB2YXIgYXRhbiA9IE1hdGguYXRhbjtcbmV4cG9ydCB2YXIgYXRhbjIgPSBNYXRoLmF0YW4yO1xuZXhwb3J0IHZhciBjb3MgPSBNYXRoLmNvcztcbmV4cG9ydCB2YXIgY2VpbCA9IE1hdGguY2VpbDtcbmV4cG9ydCB2YXIgZXhwID0gTWF0aC5leHA7XG5leHBvcnQgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbmV4cG9ydCB2YXIgaHlwb3QgPSBNYXRoLmh5cG90O1xuZXhwb3J0IHZhciBsb2cgPSBNYXRoLmxvZztcbmV4cG9ydCB2YXIgcG93ID0gTWF0aC5wb3c7XG5leHBvcnQgdmFyIHNpbiA9IE1hdGguc2luO1xuZXhwb3J0IHZhciBzaWduID0gTWF0aC5zaWduIHx8IGZ1bmN0aW9uKHgpIHsgcmV0dXJuIHggPiAwID8gMSA6IHggPCAwID8gLTEgOiAwOyB9O1xuZXhwb3J0IHZhciBzcXJ0ID0gTWF0aC5zcXJ0O1xuZXhwb3J0IHZhciB0YW4gPSBNYXRoLnRhbjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFjb3MoeCkge1xuICByZXR1cm4geCA+IDEgPyAwIDogeCA8IC0xID8gcGkgOiBNYXRoLmFjb3MoeCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc2luKHgpIHtcbiAgcmV0dXJuIHggPiAxID8gaGFsZlBpIDogeCA8IC0xID8gLWhhbGZQaSA6IE1hdGguYXNpbih4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhdmVyc2luKHgpIHtcbiAgcmV0dXJuICh4ID0gc2luKHggLyAyKSkgKiB4O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9vcCgpIHt9XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGxpbmVzID0gW10sXG4gICAgICBsaW5lO1xuICByZXR1cm4ge1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5LCBtKSB7XG4gICAgICBsaW5lLnB1c2goW3gsIHksIG1dKTtcbiAgICB9LFxuICAgIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICBsaW5lcy5wdXNoKGxpbmUgPSBbXSk7XG4gICAgfSxcbiAgICBsaW5lRW5kOiBub29wLFxuICAgIHJlam9pbjogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAobGluZXMubGVuZ3RoID4gMSkgbGluZXMucHVzaChsaW5lcy5wb3AoKS5jb25jYXQobGluZXMuc2hpZnQoKSkpO1xuICAgIH0sXG4gICAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXN1bHQgPSBsaW5lcztcbiAgICAgIGxpbmVzID0gW107XG4gICAgICBsaW5lID0gbnVsbDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9O1xufVxuIiwiaW1wb3J0IHthYnMsIGVwc2lsb259IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYWJzKGFbMF0gLSBiWzBdKSA8IGVwc2lsb24gJiYgYWJzKGFbMV0gLSBiWzFdKSA8IGVwc2lsb247XG59XG4iLCJpbXBvcnQgcG9pbnRFcXVhbCBmcm9tIFwiLi4vcG9pbnRFcXVhbC5qc1wiO1xuaW1wb3J0IHtlcHNpbG9ufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBJbnRlcnNlY3Rpb24ocG9pbnQsIHBvaW50cywgb3RoZXIsIGVudHJ5KSB7XG4gIHRoaXMueCA9IHBvaW50O1xuICB0aGlzLnogPSBwb2ludHM7XG4gIHRoaXMubyA9IG90aGVyOyAvLyBhbm90aGVyIGludGVyc2VjdGlvblxuICB0aGlzLmUgPSBlbnRyeTsgLy8gaXMgYW4gZW50cnk/XG4gIHRoaXMudiA9IGZhbHNlOyAvLyB2aXNpdGVkXG4gIHRoaXMubiA9IHRoaXMucCA9IG51bGw7IC8vIG5leHQgJiBwcmV2aW91c1xufVxuXG4vLyBBIGdlbmVyYWxpemVkIHBvbHlnb24gY2xpcHBpbmcgYWxnb3JpdGhtOiBnaXZlbiBhIHBvbHlnb24gdGhhdCBoYXMgYmVlbiBjdXRcbi8vIGludG8gaXRzIHZpc2libGUgbGluZSBzZWdtZW50cywgYW5kIHJlam9pbnMgdGhlIHNlZ21lbnRzIGJ5IGludGVycG9sYXRpbmdcbi8vIGFsb25nIHRoZSBjbGlwIGVkZ2UuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWdtZW50cywgY29tcGFyZUludGVyc2VjdGlvbiwgc3RhcnRJbnNpZGUsIGludGVycG9sYXRlLCBzdHJlYW0pIHtcbiAgdmFyIHN1YmplY3QgPSBbXSxcbiAgICAgIGNsaXAgPSBbXSxcbiAgICAgIGksXG4gICAgICBuO1xuXG4gIHNlZ21lbnRzLmZvckVhY2goZnVuY3Rpb24oc2VnbWVudCkge1xuICAgIGlmICgobiA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPD0gMCkgcmV0dXJuO1xuICAgIHZhciBuLCBwMCA9IHNlZ21lbnRbMF0sIHAxID0gc2VnbWVudFtuXSwgeDtcblxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIGlmICghcDBbMl0gJiYgIXAxWzJdKSB7XG4gICAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47ICsraSkgc3RyZWFtLnBvaW50KChwMCA9IHNlZ21lbnRbaV0pWzBdLCBwMFsxXSk7XG4gICAgICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIC8vIGhhbmRsZSBkZWdlbmVyYXRlIGNhc2VzIGJ5IG1vdmluZyB0aGUgcG9pbnRcbiAgICAgIHAxWzBdICs9IDIgKiBlcHNpbG9uO1xuICAgIH1cblxuICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMCwgc2VnbWVudCwgbnVsbCwgdHJ1ZSkpO1xuICAgIGNsaXAucHVzaCh4Lm8gPSBuZXcgSW50ZXJzZWN0aW9uKHAwLCBudWxsLCB4LCBmYWxzZSkpO1xuICAgIHN1YmplY3QucHVzaCh4ID0gbmV3IEludGVyc2VjdGlvbihwMSwgc2VnbWVudCwgbnVsbCwgZmFsc2UpKTtcbiAgICBjbGlwLnB1c2goeC5vID0gbmV3IEludGVyc2VjdGlvbihwMSwgbnVsbCwgeCwgdHJ1ZSkpO1xuICB9KTtcblxuICBpZiAoIXN1YmplY3QubGVuZ3RoKSByZXR1cm47XG5cbiAgY2xpcC5zb3J0KGNvbXBhcmVJbnRlcnNlY3Rpb24pO1xuICBsaW5rKHN1YmplY3QpO1xuICBsaW5rKGNsaXApO1xuXG4gIGZvciAoaSA9IDAsIG4gPSBjbGlwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGNsaXBbaV0uZSA9IHN0YXJ0SW5zaWRlID0gIXN0YXJ0SW5zaWRlO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gc3ViamVjdFswXSxcbiAgICAgIHBvaW50cyxcbiAgICAgIHBvaW50O1xuXG4gIHdoaWxlICgxKSB7XG4gICAgLy8gRmluZCBmaXJzdCB1bnZpc2l0ZWQgaW50ZXJzZWN0aW9uLlxuICAgIHZhciBjdXJyZW50ID0gc3RhcnQsXG4gICAgICAgIGlzU3ViamVjdCA9IHRydWU7XG4gICAgd2hpbGUgKGN1cnJlbnQudikgaWYgKChjdXJyZW50ID0gY3VycmVudC5uKSA9PT0gc3RhcnQpIHJldHVybjtcbiAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIGRvIHtcbiAgICAgIGN1cnJlbnQudiA9IGN1cnJlbnQuby52ID0gdHJ1ZTtcbiAgICAgIGlmIChjdXJyZW50LmUpIHtcbiAgICAgICAgaWYgKGlzU3ViamVjdCkge1xuICAgICAgICAgIGZvciAoaSA9IDAsIG4gPSBwb2ludHMubGVuZ3RoOyBpIDwgbjsgKytpKSBzdHJlYW0ucG9pbnQoKHBvaW50ID0gcG9pbnRzW2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGludGVycG9sYXRlKGN1cnJlbnQueCwgY3VycmVudC5uLngsIDEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQubjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1N1YmplY3QpIHtcbiAgICAgICAgICBwb2ludHMgPSBjdXJyZW50LnAuejtcbiAgICAgICAgICBmb3IgKGkgPSBwb2ludHMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHN0cmVhbS5wb2ludCgocG9pbnQgPSBwb2ludHNbaV0pWzBdLCBwb2ludFsxXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJwb2xhdGUoY3VycmVudC54LCBjdXJyZW50LnAueCwgLTEsIHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucDtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm87XG4gICAgICBwb2ludHMgPSBjdXJyZW50Lno7XG4gICAgICBpc1N1YmplY3QgPSAhaXNTdWJqZWN0O1xuICAgIH0gd2hpbGUgKCFjdXJyZW50LnYpO1xuICAgIHN0cmVhbS5saW5lRW5kKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGluayhhcnJheSkge1xuICBpZiAoIShuID0gYXJyYXkubGVuZ3RoKSkgcmV0dXJuO1xuICB2YXIgbixcbiAgICAgIGkgPSAwLFxuICAgICAgYSA9IGFycmF5WzBdLFxuICAgICAgYjtcbiAgd2hpbGUgKCsraSA8IG4pIHtcbiAgICBhLm4gPSBiID0gYXJyYXlbaV07XG4gICAgYi5wID0gYTtcbiAgICBhID0gYjtcbiAgfVxuICBhLm4gPSBiID0gYXJyYXlbMF07XG4gIGIucCA9IGE7XG59XG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcHl0aG9uL2NweXRob24vYmxvYi9hNzRlZWEyMzhmNWJhYmExNTc5N2UyZThiNTcwZDE1M2JjODY5MGE3L01vZHVsZXMvbWF0aG1vZHVsZS5jI0wxNDIzXG5leHBvcnQgY2xhc3MgQWRkZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLl9wYXJ0aWFscyA9IG5ldyBGbG9hdDY0QXJyYXkoMzIpO1xuICAgIHRoaXMuX24gPSAwO1xuICB9XG4gIGFkZCh4KSB7XG4gICAgY29uc3QgcCA9IHRoaXMuX3BhcnRpYWxzO1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuX24gJiYgaiA8IDMyOyBqKyspIHtcbiAgICAgIGNvbnN0IHkgPSBwW2pdLFxuICAgICAgICBoaSA9IHggKyB5LFxuICAgICAgICBsbyA9IE1hdGguYWJzKHgpIDwgTWF0aC5hYnMoeSkgPyB4IC0gKGhpIC0geSkgOiB5IC0gKGhpIC0geCk7XG4gICAgICBpZiAobG8pIHBbaSsrXSA9IGxvO1xuICAgICAgeCA9IGhpO1xuICAgIH1cbiAgICBwW2ldID0geDtcbiAgICB0aGlzLl9uID0gaSArIDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgdmFsdWVPZigpIHtcbiAgICBjb25zdCBwID0gdGhpcy5fcGFydGlhbHM7XG4gICAgbGV0IG4gPSB0aGlzLl9uLCB4LCB5LCBsbywgaGkgPSAwO1xuICAgIGlmIChuID4gMCkge1xuICAgICAgaGkgPSBwWy0tbl07XG4gICAgICB3aGlsZSAobiA+IDApIHtcbiAgICAgICAgeCA9IGhpO1xuICAgICAgICB5ID0gcFstLW5dO1xuICAgICAgICBoaSA9IHggKyB5O1xuICAgICAgICBsbyA9IHkgLSAoaGkgLSB4KTtcbiAgICAgICAgaWYgKGxvKSBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChuID4gMCAmJiAoKGxvIDwgMCAmJiBwW24gLSAxXSA8IDApIHx8IChsbyA+IDAgJiYgcFtuIC0gMV0gPiAwKSkpIHtcbiAgICAgICAgeSA9IGxvICogMjtcbiAgICAgICAgeCA9IGhpICsgeTtcbiAgICAgICAgaWYgKHkgPT0geCAtIGhpKSBoaSA9IHg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoaTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZnN1bSh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgY29uc3QgYWRkZXIgPSBuZXcgQWRkZXIoKTtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlKSB7XG4gICAgICAgIGFkZGVyLmFkZCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlID0gK3ZhbHVlb2YodmFsdWUsICsraW5kZXgsIHZhbHVlcykpIHtcbiAgICAgICAgYWRkZXIuYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuICthZGRlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZjdW1zdW0odmFsdWVzLCB2YWx1ZW9mKSB7XG4gIGNvbnN0IGFkZGVyID0gbmV3IEFkZGVyKCk7XG4gIGxldCBpbmRleCA9IC0xO1xuICByZXR1cm4gRmxvYXQ2NEFycmF5LmZyb20odmFsdWVzLCB2YWx1ZW9mID09PSB1bmRlZmluZWRcbiAgICAgID8gdiA9PiBhZGRlci5hZGQoK3YgfHwgMClcbiAgICAgIDogdiA9PiBhZGRlci5hZGQoK3ZhbHVlb2YodiwgKytpbmRleCwgdmFsdWVzKSB8fCAwKVxuICApO1xufVxuIiwiaW1wb3J0IHthc2luLCBhdGFuMiwgY29zLCBzaW4sIHNxcnR9IGZyb20gXCIuL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHNwaGVyaWNhbChjYXJ0ZXNpYW4pIHtcbiAgcmV0dXJuIFthdGFuMihjYXJ0ZXNpYW5bMV0sIGNhcnRlc2lhblswXSksIGFzaW4oY2FydGVzaWFuWzJdKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW4oc3BoZXJpY2FsKSB7XG4gIHZhciBsYW1iZGEgPSBzcGhlcmljYWxbMF0sIHBoaSA9IHNwaGVyaWNhbFsxXSwgY29zUGhpID0gY29zKHBoaSk7XG4gIHJldHVybiBbY29zUGhpICogY29zKGxhbWJkYSksIGNvc1BoaSAqIHNpbihsYW1iZGEpLCBzaW4ocGhpKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5Eb3QoYSwgYikge1xuICByZXR1cm4gYVswXSAqIGJbMF0gKyBhWzFdICogYlsxXSArIGFbMl0gKiBiWzJdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQ3Jvc3MoYSwgYikge1xuICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xufVxuXG4vLyBUT0RPIHJldHVybiBhXG5leHBvcnQgZnVuY3Rpb24gY2FydGVzaWFuQWRkSW5QbGFjZShhLCBiKSB7XG4gIGFbMF0gKz0gYlswXSwgYVsxXSArPSBiWzFdLCBhWzJdICs9IGJbMl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYXJ0ZXNpYW5TY2FsZSh2ZWN0b3IsIGspIHtcbiAgcmV0dXJuIFt2ZWN0b3JbMF0gKiBrLCB2ZWN0b3JbMV0gKiBrLCB2ZWN0b3JbMl0gKiBrXTtcbn1cblxuLy8gVE9ETyByZXR1cm4gZFxuZXhwb3J0IGZ1bmN0aW9uIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoZCkge1xuICB2YXIgbCA9IHNxcnQoZFswXSAqIGRbMF0gKyBkWzFdICogZFsxXSArIGRbMl0gKiBkWzJdKTtcbiAgZFswXSAvPSBsLCBkWzFdIC89IGwsIGRbMl0gLz0gbDtcbn1cbiIsImltcG9ydCB7QWRkZXJ9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtjYXJ0ZXNpYW4sIGNhcnRlc2lhbkNyb3NzLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlfSBmcm9tIFwiLi9jYXJ0ZXNpYW4uanNcIjtcbmltcG9ydCB7YWJzLCBhc2luLCBhdGFuMiwgY29zLCBlcHNpbG9uLCBlcHNpbG9uMiwgaGFsZlBpLCBwaSwgcXVhcnRlclBpLCBzaWduLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBsb25naXR1ZGUocG9pbnQpIHtcbiAgaWYgKGFicyhwb2ludFswXSkgPD0gcGkpXG4gICAgcmV0dXJuIHBvaW50WzBdO1xuICBlbHNlXG4gICAgcmV0dXJuIHNpZ24ocG9pbnRbMF0pICogKChhYnMocG9pbnRbMF0pICsgcGkpICUgdGF1IC0gcGkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwb2x5Z29uLCBwb2ludCkge1xuICB2YXIgbGFtYmRhID0gbG9uZ2l0dWRlKHBvaW50KSxcbiAgICAgIHBoaSA9IHBvaW50WzFdLFxuICAgICAgc2luUGhpID0gc2luKHBoaSksXG4gICAgICBub3JtYWwgPSBbc2luKGxhbWJkYSksIC1jb3MobGFtYmRhKSwgMF0sXG4gICAgICBhbmdsZSA9IDAsXG4gICAgICB3aW5kaW5nID0gMDtcblxuICB2YXIgc3VtID0gbmV3IEFkZGVyKCk7XG5cbiAgaWYgKHNpblBoaSA9PT0gMSkgcGhpID0gaGFsZlBpICsgZXBzaWxvbjtcbiAgZWxzZSBpZiAoc2luUGhpID09PSAtMSkgcGhpID0gLWhhbGZQaSAtIGVwc2lsb247XG5cbiAgZm9yICh2YXIgaSA9IDAsIG4gPSBwb2x5Z29uLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICghKG0gPSAocmluZyA9IHBvbHlnb25baV0pLmxlbmd0aCkpIGNvbnRpbnVlO1xuICAgIHZhciByaW5nLFxuICAgICAgICBtLFxuICAgICAgICBwb2ludDAgPSByaW5nW20gLSAxXSxcbiAgICAgICAgbGFtYmRhMCA9IGxvbmdpdHVkZShwb2ludDApLFxuICAgICAgICBwaGkwID0gcG9pbnQwWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgc2luUGhpMCA9IHNpbihwaGkwKSxcbiAgICAgICAgY29zUGhpMCA9IGNvcyhwaGkwKTtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbTsgKytqLCBsYW1iZGEwID0gbGFtYmRhMSwgc2luUGhpMCA9IHNpblBoaTEsIGNvc1BoaTAgPSBjb3NQaGkxLCBwb2ludDAgPSBwb2ludDEpIHtcbiAgICAgIHZhciBwb2ludDEgPSByaW5nW2pdLFxuICAgICAgICAgIGxhbWJkYTEgPSBsb25naXR1ZGUocG9pbnQxKSxcbiAgICAgICAgICBwaGkxID0gcG9pbnQxWzFdIC8gMiArIHF1YXJ0ZXJQaSxcbiAgICAgICAgICBzaW5QaGkxID0gc2luKHBoaTEpLFxuICAgICAgICAgIGNvc1BoaTEgPSBjb3MocGhpMSksXG4gICAgICAgICAgZGVsdGEgPSBsYW1iZGExIC0gbGFtYmRhMCxcbiAgICAgICAgICBzaWduID0gZGVsdGEgPj0gMCA/IDEgOiAtMSxcbiAgICAgICAgICBhYnNEZWx0YSA9IHNpZ24gKiBkZWx0YSxcbiAgICAgICAgICBhbnRpbWVyaWRpYW4gPSBhYnNEZWx0YSA+IHBpLFxuICAgICAgICAgIGsgPSBzaW5QaGkwICogc2luUGhpMTtcblxuICAgICAgc3VtLmFkZChhdGFuMihrICogc2lnbiAqIHNpbihhYnNEZWx0YSksIGNvc1BoaTAgKiBjb3NQaGkxICsgayAqIGNvcyhhYnNEZWx0YSkpKTtcbiAgICAgIGFuZ2xlICs9IGFudGltZXJpZGlhbiA/IGRlbHRhICsgc2lnbiAqIHRhdSA6IGRlbHRhO1xuXG4gICAgICAvLyBBcmUgdGhlIGxvbmdpdHVkZXMgZWl0aGVyIHNpZGUgb2YgdGhlIHBvaW504oCZcyBtZXJpZGlhbiAobGFtYmRhKSxcbiAgICAgIC8vIGFuZCBhcmUgdGhlIGxhdGl0dWRlcyBzbWFsbGVyIHRoYW4gdGhlIHBhcmFsbGVsIChwaGkpP1xuICAgICAgaWYgKGFudGltZXJpZGlhbiBeIGxhbWJkYTAgPj0gbGFtYmRhIF4gbGFtYmRhMSA+PSBsYW1iZGEpIHtcbiAgICAgICAgdmFyIGFyYyA9IGNhcnRlc2lhbkNyb3NzKGNhcnRlc2lhbihwb2ludDApLCBjYXJ0ZXNpYW4ocG9pbnQxKSk7XG4gICAgICAgIGNhcnRlc2lhbk5vcm1hbGl6ZUluUGxhY2UoYXJjKTtcbiAgICAgICAgdmFyIGludGVyc2VjdGlvbiA9IGNhcnRlc2lhbkNyb3NzKG5vcm1hbCwgYXJjKTtcbiAgICAgICAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShpbnRlcnNlY3Rpb24pO1xuICAgICAgICB2YXIgcGhpQXJjID0gKGFudGltZXJpZGlhbiBeIGRlbHRhID49IDAgPyAtMSA6IDEpICogYXNpbihpbnRlcnNlY3Rpb25bMl0pO1xuICAgICAgICBpZiAocGhpID4gcGhpQXJjIHx8IHBoaSA9PT0gcGhpQXJjICYmIChhcmNbMF0gfHwgYXJjWzFdKSkge1xuICAgICAgICAgIHdpbmRpbmcgKz0gYW50aW1lcmlkaWFuIF4gZGVsdGEgPj0gMCA/IDEgOiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0LCBkZXRlcm1pbmUgd2hldGhlciB0aGUgU291dGggcG9sZSBpcyBpbnNpZGUgb3Igb3V0c2lkZTpcbiAgLy9cbiAgLy8gSXQgaXMgaW5zaWRlIGlmOlxuICAvLyAqIHRoZSBwb2x5Z29uIHdpbmRzIGFyb3VuZCBpdCBpbiBhIGNsb2Nrd2lzZSBkaXJlY3Rpb24uXG4gIC8vICogdGhlIHBvbHlnb24gZG9lcyBub3QgKGN1bXVsYXRpdmVseSkgd2luZCBhcm91bmQgaXQsIGJ1dCBoYXMgYSBuZWdhdGl2ZVxuICAvLyAgIChjb3VudGVyLWNsb2Nrd2lzZSkgYXJlYS5cbiAgLy9cbiAgLy8gU2Vjb25kLCBjb3VudCB0aGUgKHNpZ25lZCkgbnVtYmVyIG9mIHRpbWVzIGEgc2VnbWVudCBjcm9zc2VzIGEgbGFtYmRhXG4gIC8vIGZyb20gdGhlIHBvaW50IHRvIHRoZSBTb3V0aCBwb2xlLiAgSWYgaXQgaXMgemVybywgdGhlbiB0aGUgcG9pbnQgaXMgdGhlXG4gIC8vIHNhbWUgc2lkZSBhcyB0aGUgU291dGggcG9sZS5cblxuICByZXR1cm4gKGFuZ2xlIDwgLWVwc2lsb24gfHwgYW5nbGUgPCBlcHNpbG9uICYmIHN1bSA8IC1lcHNpbG9uMikgXiAod2luZGluZyAmIDEpO1xufVxuIiwiZnVuY3Rpb24qIGZsYXR0ZW4oYXJyYXlzKSB7XG4gIGZvciAoY29uc3QgYXJyYXkgb2YgYXJyYXlzKSB7XG4gICAgeWllbGQqIGFycmF5O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlKGFycmF5cykge1xuICByZXR1cm4gQXJyYXkuZnJvbShmbGF0dGVuKGFycmF5cykpO1xufVxuIiwiaW1wb3J0IGNsaXBCdWZmZXIgZnJvbSBcIi4vYnVmZmVyLmpzXCI7XG5pbXBvcnQgY2xpcFJlam9pbiBmcm9tIFwiLi9yZWpvaW4uanNcIjtcbmltcG9ydCB7ZXBzaWxvbiwgaGFsZlBpfSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHBvbHlnb25Db250YWlucyBmcm9tIFwiLi4vcG9seWdvbkNvbnRhaW5zLmpzXCI7XG5pbXBvcnQge21lcmdlfSBmcm9tIFwiZDMtYXJyYXlcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocG9pbnRWaXNpYmxlLCBjbGlwTGluZSwgaW50ZXJwb2xhdGUsIHN0YXJ0KSB7XG4gIHJldHVybiBmdW5jdGlvbihzaW5rKSB7XG4gICAgdmFyIGxpbmUgPSBjbGlwTGluZShzaW5rKSxcbiAgICAgICAgcmluZ0J1ZmZlciA9IGNsaXBCdWZmZXIoKSxcbiAgICAgICAgcmluZ1NpbmsgPSBjbGlwTGluZShyaW5nQnVmZmVyKSxcbiAgICAgICAgcG9seWdvblN0YXJ0ZWQgPSBmYWxzZSxcbiAgICAgICAgcG9seWdvbixcbiAgICAgICAgc2VnbWVudHMsXG4gICAgICAgIHJpbmc7XG5cbiAgICB2YXIgY2xpcCA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludFJpbmc7XG4gICAgICAgIGNsaXAubGluZVN0YXJ0ID0gcmluZ1N0YXJ0O1xuICAgICAgICBjbGlwLmxpbmVFbmQgPSByaW5nRW5kO1xuICAgICAgICBzZWdtZW50cyA9IFtdO1xuICAgICAgICBwb2x5Z29uID0gW107XG4gICAgICB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsaXAucG9pbnQgPSBwb2ludDtcbiAgICAgICAgY2xpcC5saW5lU3RhcnQgPSBsaW5lU3RhcnQ7XG4gICAgICAgIGNsaXAubGluZUVuZCA9IGxpbmVFbmQ7XG4gICAgICAgIHNlZ21lbnRzID0gbWVyZ2Uoc2VnbWVudHMpO1xuICAgICAgICB2YXIgc3RhcnRJbnNpZGUgPSBwb2x5Z29uQ29udGFpbnMocG9seWdvbiwgc3RhcnQpO1xuICAgICAgICBpZiAoc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc2luayk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3RhcnRJbnNpZGUpIHtcbiAgICAgICAgICBpZiAoIXBvbHlnb25TdGFydGVkKSBzaW5rLnBvbHlnb25TdGFydCgpLCBwb2x5Z29uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgc2luay5saW5lU3RhcnQoKTtcbiAgICAgICAgICBpbnRlcnBvbGF0ZShudWxsLCBudWxsLCAxLCBzaW5rKTtcbiAgICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9seWdvblN0YXJ0ZWQpIHNpbmsucG9seWdvbkVuZCgpLCBwb2x5Z29uU3RhcnRlZCA9IGZhbHNlO1xuICAgICAgICBzZWdtZW50cyA9IHBvbHlnb24gPSBudWxsO1xuICAgICAgfSxcbiAgICAgIHNwaGVyZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHNpbmsucG9seWdvblN0YXJ0KCk7XG4gICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHNpbmspO1xuICAgICAgICBzaW5rLmxpbmVFbmQoKTtcbiAgICAgICAgc2luay5wb2x5Z29uRW5kKCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHBvaW50KGxhbWJkYSwgcGhpKSB7XG4gICAgICBpZiAocG9pbnRWaXNpYmxlKGxhbWJkYSwgcGhpKSkgc2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRMaW5lKGxhbWJkYSwgcGhpKSB7XG4gICAgICBsaW5lLnBvaW50KGxhbWJkYSwgcGhpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwLnBvaW50ID0gcG9pbnRMaW5lO1xuICAgICAgbGluZS5saW5lU3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lRW5kKCkge1xuICAgICAgY2xpcC5wb2ludCA9IHBvaW50O1xuICAgICAgbGluZS5saW5lRW5kKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRSaW5nKGxhbWJkYSwgcGhpKSB7XG4gICAgICByaW5nLnB1c2goW2xhbWJkYSwgcGhpXSk7XG4gICAgICByaW5nU2luay5wb2ludChsYW1iZGEsIHBoaSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ1N0YXJ0KCkge1xuICAgICAgcmluZ1NpbmsubGluZVN0YXJ0KCk7XG4gICAgICByaW5nID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHBvaW50UmluZyhyaW5nWzBdWzBdLCByaW5nWzBdWzFdKTtcbiAgICAgIHJpbmdTaW5rLmxpbmVFbmQoKTtcblxuICAgICAgdmFyIGNsZWFuID0gcmluZ1NpbmsuY2xlYW4oKSxcbiAgICAgICAgICByaW5nU2VnbWVudHMgPSByaW5nQnVmZmVyLnJlc3VsdCgpLFxuICAgICAgICAgIGksIG4gPSByaW5nU2VnbWVudHMubGVuZ3RoLCBtLFxuICAgICAgICAgIHNlZ21lbnQsXG4gICAgICAgICAgcG9pbnQ7XG5cbiAgICAgIHJpbmcucG9wKCk7XG4gICAgICBwb2x5Z29uLnB1c2gocmluZyk7XG4gICAgICByaW5nID0gbnVsbDtcblxuICAgICAgaWYgKCFuKSByZXR1cm47XG5cbiAgICAgIC8vIE5vIGludGVyc2VjdGlvbnMuXG4gICAgICBpZiAoY2xlYW4gJiAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSByaW5nU2VnbWVudHNbMF07XG4gICAgICAgIGlmICgobSA9IHNlZ21lbnQubGVuZ3RoIC0gMSkgPiAwKSB7XG4gICAgICAgICAgaWYgKCFwb2x5Z29uU3RhcnRlZCkgc2luay5wb2x5Z29uU3RhcnQoKSwgcG9seWdvblN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgIHNpbmsubGluZVN0YXJ0KCk7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IG07ICsraSkgc2luay5wb2ludCgocG9pbnQgPSBzZWdtZW50W2ldKVswXSwgcG9pbnRbMV0pO1xuICAgICAgICAgIHNpbmsubGluZUVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gUmVqb2luIGNvbm5lY3RlZCBzZWdtZW50cy5cbiAgICAgIC8vIFRPRE8gcmV1c2UgcmluZ0J1ZmZlci5yZWpvaW4oKT9cbiAgICAgIGlmIChuID4gMSAmJiBjbGVhbiAmIDIpIHJpbmdTZWdtZW50cy5wdXNoKHJpbmdTZWdtZW50cy5wb3AoKS5jb25jYXQocmluZ1NlZ21lbnRzLnNoaWZ0KCkpKTtcblxuICAgICAgc2VnbWVudHMucHVzaChyaW5nU2VnbWVudHMuZmlsdGVyKHZhbGlkU2VnbWVudCkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbGlwO1xuICB9O1xufVxuXG5mdW5jdGlvbiB2YWxpZFNlZ21lbnQoc2VnbWVudCkge1xuICByZXR1cm4gc2VnbWVudC5sZW5ndGggPiAxO1xufVxuXG4vLyBJbnRlcnNlY3Rpb25zIGFyZSBzb3J0ZWQgYWxvbmcgdGhlIGNsaXAgZWRnZS4gRm9yIGJvdGggYW50aW1lcmlkaWFuIGN1dHRpbmdcbi8vIGFuZCBjaXJjbGUgY2xpcHBpbmcsIHRoZSBzYW1lIGNvbXBhcmlzb24gaXMgdXNlZC5cbmZ1bmN0aW9uIGNvbXBhcmVJbnRlcnNlY3Rpb24oYSwgYikge1xuICByZXR1cm4gKChhID0gYS54KVswXSA8IDAgPyBhWzFdIC0gaGFsZlBpIC0gZXBzaWxvbiA6IGhhbGZQaSAtIGFbMV0pXG4gICAgICAgLSAoKGIgPSBiLngpWzBdIDwgMCA/IGJbMV0gLSBoYWxmUGkgLSBlcHNpbG9uIDogaGFsZlBpIC0gYlsxXSk7XG59XG4iLCJpbXBvcnQgY2xpcCBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHthYnMsIGF0YW4sIGNvcywgZXBzaWxvbiwgaGFsZlBpLCBwaSwgc2lufSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGlwKFxuICBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0sXG4gIGNsaXBBbnRpbWVyaWRpYW5MaW5lLFxuICBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUsXG4gIFstcGksIC1oYWxmUGldXG4pO1xuXG4vLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzOiAwIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucyBvciB0aGUgbGluZSB3YXMgZW1wdHk7IDEgLSBubyBpbnRlcnNlY3Rpb25zOyAyIC0gdGhlcmUgd2VyZVxuLy8gaW50ZXJzZWN0aW9ucywgYW5kIHRoZSBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBzaG91bGQgYmUgcmVqb2luZWQuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuTGluZShzdHJlYW0pIHtcbiAgdmFyIGxhbWJkYTAgPSBOYU4sXG4gICAgICBwaGkwID0gTmFOLFxuICAgICAgc2lnbjAgPSBOYU4sXG4gICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuXG4gIHJldHVybiB7XG4gICAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICAgIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgIGNsZWFuID0gMTtcbiAgICB9LFxuICAgIHBvaW50OiBmdW5jdGlvbihsYW1iZGExLCBwaGkxKSB7XG4gICAgICB2YXIgc2lnbjEgPSBsYW1iZGExID4gMCA/IHBpIDogLXBpLFxuICAgICAgICAgIGRlbHRhID0gYWJzKGxhbWJkYTEgLSBsYW1iZGEwKTtcbiAgICAgIGlmIChhYnMoZGVsdGEgLSBwaSkgPCBlcHNpbG9uKSB7IC8vIGxpbmUgY3Jvc3NlcyBhIHBvbGVcbiAgICAgICAgc3RyZWFtLnBvaW50KGxhbWJkYTAsIHBoaTAgPSAocGhpMCArIHBoaTEpIC8gMiA+IDAgPyBoYWxmUGkgOiAtaGFsZlBpKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHNpZ24wLCBwaGkwKTtcbiAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjEsIHBoaTApO1xuICAgICAgICBzdHJlYW0ucG9pbnQobGFtYmRhMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc2lnbjAgIT09IHNpZ24xICYmIGRlbHRhID49IHBpKSB7IC8vIGxpbmUgY3Jvc3NlcyBhbnRpbWVyaWRpYW5cbiAgICAgICAgaWYgKGFicyhsYW1iZGEwIC0gc2lnbjApIDwgZXBzaWxvbikgbGFtYmRhMCAtPSBzaWduMCAqIGVwc2lsb247IC8vIGhhbmRsZSBkZWdlbmVyYWNpZXNcbiAgICAgICAgaWYgKGFicyhsYW1iZGExIC0gc2lnbjEpIDwgZXBzaWxvbikgbGFtYmRhMSAtPSBzaWduMSAqIGVwc2lsb247XG4gICAgICAgIHBoaTAgPSBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpO1xuICAgICAgICBzdHJlYW0ucG9pbnQoc2lnbjAsIHBoaTApO1xuICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgIHN0cmVhbS5wb2ludChzaWduMSwgcGhpMCk7XG4gICAgICAgIGNsZWFuID0gMDtcbiAgICAgIH1cbiAgICAgIHN0cmVhbS5wb2ludChsYW1iZGEwID0gbGFtYmRhMSwgcGhpMCA9IHBoaTEpO1xuICAgICAgc2lnbjAgPSBzaWduMTtcbiAgICB9LFxuICAgIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgIGxhbWJkYTAgPSBwaGkwID0gTmFOO1xuICAgIH0sXG4gICAgY2xlYW46IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIDIgLSBjbGVhbjsgLy8gaWYgaW50ZXJzZWN0aW9ucywgcmVqb2luIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJzZWN0KGxhbWJkYTAsIHBoaTAsIGxhbWJkYTEsIHBoaTEpIHtcbiAgdmFyIGNvc1BoaTAsXG4gICAgICBjb3NQaGkxLFxuICAgICAgc2luTGFtYmRhMExhbWJkYTEgPSBzaW4obGFtYmRhMCAtIGxhbWJkYTEpO1xuICByZXR1cm4gYWJzKHNpbkxhbWJkYTBMYW1iZGExKSA+IGVwc2lsb25cbiAgICAgID8gYXRhbigoc2luKHBoaTApICogKGNvc1BoaTEgPSBjb3MocGhpMSkpICogc2luKGxhbWJkYTEpXG4gICAgICAgICAgLSBzaW4ocGhpMSkgKiAoY29zUGhpMCA9IGNvcyhwaGkwKSkgKiBzaW4obGFtYmRhMCkpXG4gICAgICAgICAgLyAoY29zUGhpMCAqIGNvc1BoaTEgKiBzaW5MYW1iZGEwTGFtYmRhMSkpXG4gICAgICA6IChwaGkwICsgcGhpMSkgLyAyO1xufVxuXG5mdW5jdGlvbiBjbGlwQW50aW1lcmlkaWFuSW50ZXJwb2xhdGUoZnJvbSwgdG8sIGRpcmVjdGlvbiwgc3RyZWFtKSB7XG4gIHZhciBwaGk7XG4gIGlmIChmcm9tID09IG51bGwpIHtcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBoYWxmUGk7XG4gICAgc3RyZWFtLnBvaW50KC1waSwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoMCwgcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIHBoaSk7XG4gICAgc3RyZWFtLnBvaW50KHBpLCAwKTtcbiAgICBzdHJlYW0ucG9pbnQocGksIC1waGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCAtcGhpKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCAwKTtcbiAgICBzdHJlYW0ucG9pbnQoLXBpLCBwaGkpO1xuICB9IGVsc2UgaWYgKGFicyhmcm9tWzBdIC0gdG9bMF0pID4gZXBzaWxvbikge1xuICAgIHZhciBsYW1iZGEgPSBmcm9tWzBdIDwgdG9bMF0gPyBwaSA6IC1waTtcbiAgICBwaGkgPSBkaXJlY3Rpb24gKiBsYW1iZGEgLyAyO1xuICAgIHN0cmVhbS5wb2ludCgtbGFtYmRhLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludCgwLCBwaGkpO1xuICAgIHN0cmVhbS5wb2ludChsYW1iZGEsIHBoaSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gIH1cbn1cbiIsImltcG9ydCB7Y2FydGVzaWFuLCBjYXJ0ZXNpYW5Ob3JtYWxpemVJblBsYWNlLCBzcGhlcmljYWx9IGZyb20gXCIuL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuL2NvbnN0YW50LmpzXCI7XG5pbXBvcnQge2Fjb3MsIGNvcywgZGVncmVlcywgZXBzaWxvbiwgcmFkaWFucywgc2luLCB0YXV9IGZyb20gXCIuL21hdGguanNcIjtcbmltcG9ydCB7cm90YXRlUmFkaWFuc30gZnJvbSBcIi4vcm90YXRpb24uanNcIjtcblxuLy8gR2VuZXJhdGVzIGEgY2lyY2xlIGNlbnRlcmVkIGF0IFswwrAsIDDCsF0sIHdpdGggYSBnaXZlbiByYWRpdXMgYW5kIHByZWNpc2lvbi5cbmV4cG9ydCBmdW5jdGlvbiBjaXJjbGVTdHJlYW0oc3RyZWFtLCByYWRpdXMsIGRlbHRhLCBkaXJlY3Rpb24sIHQwLCB0MSkge1xuICBpZiAoIWRlbHRhKSByZXR1cm47XG4gIHZhciBjb3NSYWRpdXMgPSBjb3MocmFkaXVzKSxcbiAgICAgIHNpblJhZGl1cyA9IHNpbihyYWRpdXMpLFxuICAgICAgc3RlcCA9IGRpcmVjdGlvbiAqIGRlbHRhO1xuICBpZiAodDAgPT0gbnVsbCkge1xuICAgIHQwID0gcmFkaXVzICsgZGlyZWN0aW9uICogdGF1O1xuICAgIHQxID0gcmFkaXVzIC0gc3RlcCAvIDI7XG4gIH0gZWxzZSB7XG4gICAgdDAgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MCk7XG4gICAgdDEgPSBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCB0MSk7XG4gICAgaWYgKGRpcmVjdGlvbiA+IDAgPyB0MCA8IHQxIDogdDAgPiB0MSkgdDAgKz0gZGlyZWN0aW9uICogdGF1O1xuICB9XG4gIGZvciAodmFyIHBvaW50LCB0ID0gdDA7IGRpcmVjdGlvbiA+IDAgPyB0ID4gdDEgOiB0IDwgdDE7IHQgLT0gc3RlcCkge1xuICAgIHBvaW50ID0gc3BoZXJpY2FsKFtjb3NSYWRpdXMsIC1zaW5SYWRpdXMgKiBjb3ModCksIC1zaW5SYWRpdXMgKiBzaW4odCldKTtcbiAgICBzdHJlYW0ucG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKTtcbiAgfVxufVxuXG4vLyBSZXR1cm5zIHRoZSBzaWduZWQgYW5nbGUgb2YgYSBjYXJ0ZXNpYW4gcG9pbnQgcmVsYXRpdmUgdG8gW2Nvc1JhZGl1cywgMCwgMF0uXG5mdW5jdGlvbiBjaXJjbGVSYWRpdXMoY29zUmFkaXVzLCBwb2ludCkge1xuICBwb2ludCA9IGNhcnRlc2lhbihwb2ludCksIHBvaW50WzBdIC09IGNvc1JhZGl1cztcbiAgY2FydGVzaWFuTm9ybWFsaXplSW5QbGFjZShwb2ludCk7XG4gIHZhciByYWRpdXMgPSBhY29zKC1wb2ludFsxXSk7XG4gIHJldHVybiAoKC1wb2ludFsyXSA8IDAgPyAtcmFkaXVzIDogcmFkaXVzKSArIHRhdSAtIGVwc2lsb24pICUgdGF1O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIGNlbnRlciA9IGNvbnN0YW50KFswLCAwXSksXG4gICAgICByYWRpdXMgPSBjb25zdGFudCg5MCksXG4gICAgICBwcmVjaXNpb24gPSBjb25zdGFudCg2KSxcbiAgICAgIHJpbmcsXG4gICAgICByb3RhdGUsXG4gICAgICBzdHJlYW0gPSB7cG9pbnQ6IHBvaW50fTtcblxuICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgcmluZy5wdXNoKHggPSByb3RhdGUoeCwgeSkpO1xuICAgIHhbMF0gKj0gZGVncmVlcywgeFsxXSAqPSBkZWdyZWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gY2lyY2xlKCkge1xuICAgIHZhciBjID0gY2VudGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHIgPSByYWRpdXMuYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnMsXG4gICAgICAgIHAgPSBwcmVjaXNpb24uYXBwbHkodGhpcywgYXJndW1lbnRzKSAqIHJhZGlhbnM7XG4gICAgcmluZyA9IFtdO1xuICAgIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMoLWNbMF0gKiByYWRpYW5zLCAtY1sxXSAqIHJhZGlhbnMsIDApLmludmVydDtcbiAgICBjaXJjbGVTdHJlYW0oc3RyZWFtLCByLCBwLCAxKTtcbiAgICBjID0ge3R5cGU6IFwiUG9seWdvblwiLCBjb29yZGluYXRlczogW3JpbmddfTtcbiAgICByaW5nID0gcm90YXRlID0gbnVsbDtcbiAgICByZXR1cm4gYztcbiAgfVxuXG4gIGNpcmNsZS5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoY2VudGVyID0gdHlwZW9mIF8gPT09IFwiZnVuY3Rpb25cIiA/IF8gOiBjb25zdGFudChbK19bMF0sICtfWzFdXSksIGNpcmNsZSkgOiBjZW50ZXI7XG4gIH07XG5cbiAgY2lyY2xlLnJhZGl1cyA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChyYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IGNvbnN0YW50KCtfKSwgY2lyY2xlKSA6IHJhZGl1cztcbiAgfTtcblxuICBjaXJjbGUucHJlY2lzaW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNpc2lvbiA9IHR5cGVvZiBfID09PSBcImZ1bmN0aW9uXCIgPyBfIDogY29uc3RhbnQoK18pLCBjaXJjbGUpIDogcHJlY2lzaW9uO1xuICB9O1xuXG4gIHJldHVybiBjaXJjbGU7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbiwgY2FydGVzaWFuQWRkSW5QbGFjZSwgY2FydGVzaWFuQ3Jvc3MsIGNhcnRlc2lhbkRvdCwgY2FydGVzaWFuU2NhbGUsIHNwaGVyaWNhbH0gZnJvbSBcIi4uL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IHtjaXJjbGVTdHJlYW19IGZyb20gXCIuLi9jaXJjbGUuanNcIjtcbmltcG9ydCB7YWJzLCBjb3MsIGVwc2lsb24sIHBpLCByYWRpYW5zLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHBvaW50RXF1YWwgZnJvbSBcIi4uL3BvaW50RXF1YWwuanNcIjtcbmltcG9ydCBjbGlwIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHJhZGl1cykge1xuICB2YXIgY3IgPSBjb3MocmFkaXVzKSxcbiAgICAgIGRlbHRhID0gNiAqIHJhZGlhbnMsXG4gICAgICBzbWFsbFJhZGl1cyA9IGNyID4gMCxcbiAgICAgIG5vdEhlbWlzcGhlcmUgPSBhYnMoY3IpID4gZXBzaWxvbjsgLy8gVE9ETyBvcHRpbWlzZSBmb3IgdGhpcyBjb21tb24gY2FzZVxuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlKGZyb20sIHRvLCBkaXJlY3Rpb24sIHN0cmVhbSkge1xuICAgIGNpcmNsZVN0cmVhbShzdHJlYW0sIHJhZGl1cywgZGVsdGEsIGRpcmVjdGlvbiwgZnJvbSwgdG8pO1xuICB9XG5cbiAgZnVuY3Rpb24gdmlzaWJsZShsYW1iZGEsIHBoaSkge1xuICAgIHJldHVybiBjb3MobGFtYmRhKSAqIGNvcyhwaGkpID4gY3I7XG4gIH1cblxuICAvLyBUYWtlcyBhIGxpbmUgYW5kIGN1dHMgaW50byB2aXNpYmxlIHNlZ21lbnRzLiBSZXR1cm4gdmFsdWVzIHVzZWQgZm9yIHBvbHlnb25cbiAgLy8gY2xpcHBpbmc6IDAgLSB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgb3IgdGhlIGxpbmUgd2FzIGVtcHR5OyAxIC0gbm9cbiAgLy8gaW50ZXJzZWN0aW9ucyAyIC0gdGhlcmUgd2VyZSBpbnRlcnNlY3Rpb25zLCBhbmQgdGhlIGZpcnN0IGFuZCBsYXN0IHNlZ21lbnRzXG4gIC8vIHNob3VsZCBiZSByZWpvaW5lZC5cbiAgZnVuY3Rpb24gY2xpcExpbmUoc3RyZWFtKSB7XG4gICAgdmFyIHBvaW50MCwgLy8gcHJldmlvdXMgcG9pbnRcbiAgICAgICAgYzAsIC8vIGNvZGUgZm9yIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwLCAvLyB2aXNpYmlsaXR5IG9mIHByZXZpb3VzIHBvaW50XG4gICAgICAgIHYwMCwgLy8gdmlzaWJpbGl0eSBvZiBmaXJzdCBwb2ludFxuICAgICAgICBjbGVhbjsgLy8gbm8gaW50ZXJzZWN0aW9uc1xuICAgIHJldHVybiB7XG4gICAgICBsaW5lU3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2MDAgPSB2MCA9IGZhbHNlO1xuICAgICAgICBjbGVhbiA9IDE7XG4gICAgICB9LFxuICAgICAgcG9pbnQ6IGZ1bmN0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgICAgIHZhciBwb2ludDEgPSBbbGFtYmRhLCBwaGldLFxuICAgICAgICAgICAgcG9pbnQyLFxuICAgICAgICAgICAgdiA9IHZpc2libGUobGFtYmRhLCBwaGkpLFxuICAgICAgICAgICAgYyA9IHNtYWxsUmFkaXVzXG4gICAgICAgICAgICAgID8gdiA/IDAgOiBjb2RlKGxhbWJkYSwgcGhpKVxuICAgICAgICAgICAgICA6IHYgPyBjb2RlKGxhbWJkYSArIChsYW1iZGEgPCAwID8gcGkgOiAtcGkpLCBwaGkpIDogMDtcbiAgICAgICAgaWYgKCFwb2ludDAgJiYgKHYwMCA9IHYwID0gdikpIHN0cmVhbS5saW5lU3RhcnQoKTtcbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICBpZiAoIXBvaW50MiB8fCBwb2ludEVxdWFsKHBvaW50MCwgcG9pbnQyKSB8fCBwb2ludEVxdWFsKHBvaW50MSwgcG9pbnQyKSlcbiAgICAgICAgICAgIHBvaW50MVsyXSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgIT09IHYwKSB7XG4gICAgICAgICAgY2xlYW4gPSAwO1xuICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAvLyBvdXRzaWRlIGdvaW5nIGluXG4gICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBwb2ludDIgPSBpbnRlcnNlY3QocG9pbnQxLCBwb2ludDApO1xuICAgICAgICAgICAgc3RyZWFtLnBvaW50KHBvaW50MlswXSwgcG9pbnQyWzFdKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gaW5zaWRlIGdvaW5nIG91dFxuICAgICAgICAgICAgcG9pbnQyID0gaW50ZXJzZWN0KHBvaW50MCwgcG9pbnQxKTtcbiAgICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDJbMF0sIHBvaW50MlsxXSwgMik7XG4gICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb2ludDAgPSBwb2ludDI7XG4gICAgICAgIH0gZWxzZSBpZiAobm90SGVtaXNwaGVyZSAmJiBwb2ludDAgJiYgc21hbGxSYWRpdXMgXiB2KSB7XG4gICAgICAgICAgdmFyIHQ7XG4gICAgICAgICAgLy8gSWYgdGhlIGNvZGVzIGZvciB0d28gcG9pbnRzIGFyZSBkaWZmZXJlbnQsIG9yIGFyZSBib3RoIHplcm8sXG4gICAgICAgICAgLy8gYW5kIHRoZXJlIHRoaXMgc2VnbWVudCBpbnRlcnNlY3RzIHdpdGggdGhlIHNtYWxsIGNpcmNsZS5cbiAgICAgICAgICBpZiAoIShjICYgYzApICYmICh0ID0gaW50ZXJzZWN0KHBvaW50MSwgcG9pbnQwLCB0cnVlKSkpIHtcbiAgICAgICAgICAgIGNsZWFuID0gMDtcbiAgICAgICAgICAgIGlmIChzbWFsbFJhZGl1cykge1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdKTtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3RyZWFtLnBvaW50KHRbMV1bMF0sIHRbMV1bMV0pO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICAgICAgICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gICAgICAgICAgICAgIHN0cmVhbS5wb2ludCh0WzBdWzBdLCB0WzBdWzFdLCAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHYgJiYgKCFwb2ludDAgfHwgIXBvaW50RXF1YWwocG9pbnQwLCBwb2ludDEpKSkge1xuICAgICAgICAgIHN0cmVhbS5wb2ludChwb2ludDFbMF0sIHBvaW50MVsxXSk7XG4gICAgICAgIH1cbiAgICAgICAgcG9pbnQwID0gcG9pbnQxLCB2MCA9IHYsIGMwID0gYztcbiAgICAgIH0sXG4gICAgICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHYwKSBzdHJlYW0ubGluZUVuZCgpO1xuICAgICAgICBwb2ludDAgPSBudWxsO1xuICAgICAgfSxcbiAgICAgIC8vIFJlam9pbiBmaXJzdCBhbmQgbGFzdCBzZWdtZW50cyBpZiB0aGVyZSB3ZXJlIGludGVyc2VjdGlvbnMgYW5kIHRoZSBmaXJzdFxuICAgICAgLy8gYW5kIGxhc3QgcG9pbnRzIHdlcmUgdmlzaWJsZS5cbiAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNsZWFuIHwgKCh2MDAgJiYgdjApIDw8IDEpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBJbnRlcnNlY3RzIHRoZSBncmVhdCBjaXJjbGUgYmV0d2VlbiBhIGFuZCBiIHdpdGggdGhlIGNsaXAgY2lyY2xlLlxuICBmdW5jdGlvbiBpbnRlcnNlY3QoYSwgYiwgdHdvKSB7XG4gICAgdmFyIHBhID0gY2FydGVzaWFuKGEpLFxuICAgICAgICBwYiA9IGNhcnRlc2lhbihiKTtcblxuICAgIC8vIFdlIGhhdmUgdHdvIHBsYW5lcywgbjEucCA9IGQxIGFuZCBuMi5wID0gZDIuXG4gICAgLy8gRmluZCBpbnRlcnNlY3Rpb24gbGluZSBwKHQpID0gYzEgbjEgKyBjMiBuMiArIHQgKG4xIOKoryBuMikuXG4gICAgdmFyIG4xID0gWzEsIDAsIDBdLCAvLyBub3JtYWxcbiAgICAgICAgbjIgPSBjYXJ0ZXNpYW5Dcm9zcyhwYSwgcGIpLFxuICAgICAgICBuMm4yID0gY2FydGVzaWFuRG90KG4yLCBuMiksXG4gICAgICAgIG4xbjIgPSBuMlswXSwgLy8gY2FydGVzaWFuRG90KG4xLCBuMiksXG4gICAgICAgIGRldGVybWluYW50ID0gbjJuMiAtIG4xbjIgKiBuMW4yO1xuXG4gICAgLy8gVHdvIHBvbGFyIHBvaW50cy5cbiAgICBpZiAoIWRldGVybWluYW50KSByZXR1cm4gIXR3byAmJiBhO1xuXG4gICAgdmFyIGMxID0gIGNyICogbjJuMiAvIGRldGVybWluYW50LFxuICAgICAgICBjMiA9IC1jciAqIG4xbjIgLyBkZXRlcm1pbmFudCxcbiAgICAgICAgbjF4bjIgPSBjYXJ0ZXNpYW5Dcm9zcyhuMSwgbjIpLFxuICAgICAgICBBID0gY2FydGVzaWFuU2NhbGUobjEsIGMxKSxcbiAgICAgICAgQiA9IGNhcnRlc2lhblNjYWxlKG4yLCBjMik7XG4gICAgY2FydGVzaWFuQWRkSW5QbGFjZShBLCBCKTtcblxuICAgIC8vIFNvbHZlIHxwKHQpfF4yID0gMS5cbiAgICB2YXIgdSA9IG4xeG4yLFxuICAgICAgICB3ID0gY2FydGVzaWFuRG90KEEsIHUpLFxuICAgICAgICB1dSA9IGNhcnRlc2lhbkRvdCh1LCB1KSxcbiAgICAgICAgdDIgPSB3ICogdyAtIHV1ICogKGNhcnRlc2lhbkRvdChBLCBBKSAtIDEpO1xuXG4gICAgaWYgKHQyIDwgMCkgcmV0dXJuO1xuXG4gICAgdmFyIHQgPSBzcXJ0KHQyKSxcbiAgICAgICAgcSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyAtIHQpIC8gdXUpO1xuICAgIGNhcnRlc2lhbkFkZEluUGxhY2UocSwgQSk7XG4gICAgcSA9IHNwaGVyaWNhbChxKTtcblxuICAgIGlmICghdHdvKSByZXR1cm4gcTtcblxuICAgIC8vIFR3byBpbnRlcnNlY3Rpb24gcG9pbnRzLlxuICAgIHZhciBsYW1iZGEwID0gYVswXSxcbiAgICAgICAgbGFtYmRhMSA9IGJbMF0sXG4gICAgICAgIHBoaTAgPSBhWzFdLFxuICAgICAgICBwaGkxID0gYlsxXSxcbiAgICAgICAgejtcblxuICAgIGlmIChsYW1iZGExIDwgbGFtYmRhMCkgeiA9IGxhbWJkYTAsIGxhbWJkYTAgPSBsYW1iZGExLCBsYW1iZGExID0gejtcblxuICAgIHZhciBkZWx0YSA9IGxhbWJkYTEgLSBsYW1iZGEwLFxuICAgICAgICBwb2xhciA9IGFicyhkZWx0YSAtIHBpKSA8IGVwc2lsb24sXG4gICAgICAgIG1lcmlkaWFuID0gcG9sYXIgfHwgZGVsdGEgPCBlcHNpbG9uO1xuXG4gICAgaWYgKCFwb2xhciAmJiBwaGkxIDwgcGhpMCkgeiA9IHBoaTAsIHBoaTAgPSBwaGkxLCBwaGkxID0gejtcblxuICAgIC8vIENoZWNrIHRoYXQgdGhlIGZpcnN0IHBvaW50IGlzIGJldHdlZW4gYSBhbmQgYi5cbiAgICBpZiAobWVyaWRpYW5cbiAgICAgICAgPyBwb2xhclxuICAgICAgICAgID8gcGhpMCArIHBoaTEgPiAwIF4gcVsxXSA8IChhYnMocVswXSAtIGxhbWJkYTApIDwgZXBzaWxvbiA/IHBoaTAgOiBwaGkxKVxuICAgICAgICAgIDogcGhpMCA8PSBxWzFdICYmIHFbMV0gPD0gcGhpMVxuICAgICAgICA6IGRlbHRhID4gcGkgXiAobGFtYmRhMCA8PSBxWzBdICYmIHFbMF0gPD0gbGFtYmRhMSkpIHtcbiAgICAgIHZhciBxMSA9IGNhcnRlc2lhblNjYWxlKHUsICgtdyArIHQpIC8gdXUpO1xuICAgICAgY2FydGVzaWFuQWRkSW5QbGFjZShxMSwgQSk7XG4gICAgICByZXR1cm4gW3EsIHNwaGVyaWNhbChxMSldO1xuICAgIH1cbiAgfVxuXG4gIC8vIEdlbmVyYXRlcyBhIDQtYml0IHZlY3RvciByZXByZXNlbnRpbmcgdGhlIGxvY2F0aW9uIG9mIGEgcG9pbnQgcmVsYXRpdmUgdG9cbiAgLy8gdGhlIHNtYWxsIGNpcmNsZSdzIGJvdW5kaW5nIGJveC5cbiAgZnVuY3Rpb24gY29kZShsYW1iZGEsIHBoaSkge1xuICAgIHZhciByID0gc21hbGxSYWRpdXMgPyByYWRpdXMgOiBwaSAtIHJhZGl1cyxcbiAgICAgICAgY29kZSA9IDA7XG4gICAgaWYgKGxhbWJkYSA8IC1yKSBjb2RlIHw9IDE7IC8vIGxlZnRcbiAgICBlbHNlIGlmIChsYW1iZGEgPiByKSBjb2RlIHw9IDI7IC8vIHJpZ2h0XG4gICAgaWYgKHBoaSA8IC1yKSBjb2RlIHw9IDQ7IC8vIGJlbG93XG4gICAgZWxzZSBpZiAocGhpID4gcikgY29kZSB8PSA4OyAvLyBhYm92ZVxuICAgIHJldHVybiBjb2RlO1xuICB9XG5cbiAgcmV0dXJuIGNsaXAodmlzaWJsZSwgY2xpcExpbmUsIGludGVycG9sYXRlLCBzbWFsbFJhZGl1cyA/IFswLCAtcmFkaXVzXSA6IFstcGksIHJhZGl1cyAtIHBpXSk7XG59XG4iLCJpbXBvcnQge2FicywgZXBzaWxvbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCBjbGlwQnVmZmVyIGZyb20gXCIuL2J1ZmZlci5qc1wiO1xuaW1wb3J0IGNsaXBMaW5lIGZyb20gXCIuL2xpbmUuanNcIjtcbmltcG9ydCBjbGlwUmVqb2luIGZyb20gXCIuL3Jlam9pbi5qc1wiO1xuaW1wb3J0IHttZXJnZX0gZnJvbSBcImQzLWFycmF5XCI7XG5cbnZhciBjbGlwTWF4ID0gMWU5LCBjbGlwTWluID0gLWNsaXBNYXg7XG5cbi8vIFRPRE8gVXNlIGQzLXBvbHlnb27igJlzIHBvbHlnb25Db250YWlucyBoZXJlIGZvciB0aGUgcmluZyBjaGVjaz9cbi8vIFRPRE8gRWxpbWluYXRlIGR1cGxpY2F0ZSBidWZmZXJpbmcgaW4gY2xpcEJ1ZmZlciBhbmQgcG9seWdvbi5wdXNoP1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbGlwUmVjdGFuZ2xlKHgwLCB5MCwgeDEsIHkxKSB7XG5cbiAgZnVuY3Rpb24gdmlzaWJsZSh4LCB5KSB7XG4gICAgcmV0dXJuIHgwIDw9IHggJiYgeCA8PSB4MSAmJiB5MCA8PSB5ICYmIHkgPD0geTE7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZShmcm9tLCB0bywgZGlyZWN0aW9uLCBzdHJlYW0pIHtcbiAgICB2YXIgYSA9IDAsIGExID0gMDtcbiAgICBpZiAoZnJvbSA9PSBudWxsXG4gICAgICAgIHx8IChhID0gY29ybmVyKGZyb20sIGRpcmVjdGlvbikpICE9PSAoYTEgPSBjb3JuZXIodG8sIGRpcmVjdGlvbikpXG4gICAgICAgIHx8IGNvbXBhcmVQb2ludChmcm9tLCB0bykgPCAwIF4gZGlyZWN0aW9uID4gMCkge1xuICAgICAgZG8gc3RyZWFtLnBvaW50KGEgPT09IDAgfHwgYSA9PT0gMyA/IHgwIDogeDEsIGEgPiAxID8geTEgOiB5MCk7XG4gICAgICB3aGlsZSAoKGEgPSAoYSArIGRpcmVjdGlvbiArIDQpICUgNCkgIT09IGExKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyZWFtLnBvaW50KHRvWzBdLCB0b1sxXSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY29ybmVyKHAsIGRpcmVjdGlvbikge1xuICAgIHJldHVybiBhYnMocFswXSAtIHgwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMCA6IDNcbiAgICAgICAgOiBhYnMocFswXSAtIHgxKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMiA6IDFcbiAgICAgICAgOiBhYnMocFsxXSAtIHkwKSA8IGVwc2lsb24gPyBkaXJlY3Rpb24gPiAwID8gMSA6IDBcbiAgICAgICAgOiBkaXJlY3Rpb24gPiAwID8gMyA6IDI7IC8vIGFicyhwWzFdIC0geTEpIDwgZXBzaWxvblxuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZUludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVQb2ludChhLngsIGIueCk7XG4gIH1cblxuICBmdW5jdGlvbiBjb21wYXJlUG9pbnQoYSwgYikge1xuICAgIHZhciBjYSA9IGNvcm5lcihhLCAxKSxcbiAgICAgICAgY2IgPSBjb3JuZXIoYiwgMSk7XG4gICAgcmV0dXJuIGNhICE9PSBjYiA/IGNhIC0gY2JcbiAgICAgICAgOiBjYSA9PT0gMCA/IGJbMV0gLSBhWzFdXG4gICAgICAgIDogY2EgPT09IDEgPyBhWzBdIC0gYlswXVxuICAgICAgICA6IGNhID09PSAyID8gYVsxXSAtIGJbMV1cbiAgICAgICAgOiBiWzBdIC0gYVswXTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICB2YXIgYWN0aXZlU3RyZWFtID0gc3RyZWFtLFxuICAgICAgICBidWZmZXJTdHJlYW0gPSBjbGlwQnVmZmVyKCksXG4gICAgICAgIHNlZ21lbnRzLFxuICAgICAgICBwb2x5Z29uLFxuICAgICAgICByaW5nLFxuICAgICAgICB4X18sIHlfXywgdl9fLCAvLyBmaXJzdCBwb2ludFxuICAgICAgICB4XywgeV8sIHZfLCAvLyBwcmV2aW91cyBwb2ludFxuICAgICAgICBmaXJzdCxcbiAgICAgICAgY2xlYW47XG5cbiAgICB2YXIgY2xpcFN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogcG9seWdvblN0YXJ0LFxuICAgICAgcG9seWdvbkVuZDogcG9seWdvbkVuZFxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICBpZiAodmlzaWJsZSh4LCB5KSkgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvbHlnb25JbnNpZGUoKSB7XG4gICAgICB2YXIgd2luZGluZyA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gcG9seWdvbi5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgZm9yICh2YXIgcmluZyA9IHBvbHlnb25baV0sIGogPSAxLCBtID0gcmluZy5sZW5ndGgsIHBvaW50ID0gcmluZ1swXSwgYTAsIGExLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdOyBqIDwgbTsgKytqKSB7XG4gICAgICAgICAgYTAgPSBiMCwgYTEgPSBiMSwgcG9pbnQgPSByaW5nW2pdLCBiMCA9IHBvaW50WzBdLCBiMSA9IHBvaW50WzFdO1xuICAgICAgICAgIGlmIChhMSA8PSB5MSkgeyBpZiAoYjEgPiB5MSAmJiAoYjAgLSBhMCkgKiAoeTEgLSBhMSkgPiAoYjEgLSBhMSkgKiAoeDAgLSBhMCkpICsrd2luZGluZzsgfVxuICAgICAgICAgIGVsc2UgeyBpZiAoYjEgPD0geTEgJiYgKGIwIC0gYTApICogKHkxIC0gYTEpIDwgKGIxIC0gYTEpICogKHgwIC0gYTApKSAtLXdpbmRpbmc7IH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gd2luZGluZztcbiAgICB9XG5cbiAgICAvLyBCdWZmZXIgZ2VvbWV0cnkgd2l0aGluIGEgcG9seWdvbiBhbmQgdGhlbiBjbGlwIGl0IGVuIG1hc3NlLlxuICAgIGZ1bmN0aW9uIHBvbHlnb25TdGFydCgpIHtcbiAgICAgIGFjdGl2ZVN0cmVhbSA9IGJ1ZmZlclN0cmVhbSwgc2VnbWVudHMgPSBbXSwgcG9seWdvbiA9IFtdLCBjbGVhbiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9seWdvbkVuZCgpIHtcbiAgICAgIHZhciBzdGFydEluc2lkZSA9IHBvbHlnb25JbnNpZGUoKSxcbiAgICAgICAgICBjbGVhbkluc2lkZSA9IGNsZWFuICYmIHN0YXJ0SW5zaWRlLFxuICAgICAgICAgIHZpc2libGUgPSAoc2VnbWVudHMgPSBtZXJnZShzZWdtZW50cykpLmxlbmd0aDtcbiAgICAgIGlmIChjbGVhbkluc2lkZSB8fCB2aXNpYmxlKSB7XG4gICAgICAgIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgICAgICAgaWYgKGNsZWFuSW5zaWRlKSB7XG4gICAgICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGludGVycG9sYXRlKG51bGwsIG51bGwsIDEsIHN0cmVhbSk7XG4gICAgICAgICAgc3RyZWFtLmxpbmVFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodmlzaWJsZSkge1xuICAgICAgICAgIGNsaXBSZWpvaW4oc2VnbWVudHMsIGNvbXBhcmVJbnRlcnNlY3Rpb24sIHN0YXJ0SW5zaWRlLCBpbnRlcnBvbGF0ZSwgc3RyZWFtKTtcbiAgICAgICAgfVxuICAgICAgICBzdHJlYW0ucG9seWdvbkVuZCgpO1xuICAgICAgfVxuICAgICAgYWN0aXZlU3RyZWFtID0gc3RyZWFtLCBzZWdtZW50cyA9IHBvbHlnb24gPSByaW5nID0gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICBjbGlwU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgaWYgKHBvbHlnb24pIHBvbHlnb24ucHVzaChyaW5nID0gW10pO1xuICAgICAgZmlyc3QgPSB0cnVlO1xuICAgICAgdl8gPSBmYWxzZTtcbiAgICAgIHhfID0geV8gPSBOYU47XG4gICAgfVxuXG4gICAgLy8gVE9ETyByYXRoZXIgdGhhbiBzcGVjaWFsLWNhc2UgcG9seWdvbnMsIHNpbXBseSBoYW5kbGUgdGhlbSBzZXBhcmF0ZWx5LlxuICAgIC8vIElkZWFsbHksIGNvaW5jaWRlbnQgaW50ZXJzZWN0aW9uIHBvaW50cyBzaG91bGQgYmUgaml0dGVyZWQgdG8gYXZvaWRcbiAgICAvLyBjbGlwcGluZyBpc3N1ZXMuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIGlmIChzZWdtZW50cykge1xuICAgICAgICBsaW5lUG9pbnQoeF9fLCB5X18pO1xuICAgICAgICBpZiAodl9fICYmIHZfKSBidWZmZXJTdHJlYW0ucmVqb2luKCk7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goYnVmZmVyU3RyZWFtLnJlc3VsdCgpKTtcbiAgICAgIH1cbiAgICAgIGNsaXBTdHJlYW0ucG9pbnQgPSBwb2ludDtcbiAgICAgIGlmICh2XykgYWN0aXZlU3RyZWFtLmxpbmVFbmQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lUG9pbnQoeCwgeSkge1xuICAgICAgdmFyIHYgPSB2aXNpYmxlKHgsIHkpO1xuICAgICAgaWYgKHBvbHlnb24pIHJpbmcucHVzaChbeCwgeV0pO1xuICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgIHhfXyA9IHgsIHlfXyA9IHksIHZfXyA9IHY7XG4gICAgICAgIGZpcnN0ID0gZmFsc2U7XG4gICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHYgJiYgdl8pIGFjdGl2ZVN0cmVhbS5wb2ludCh4LCB5KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdmFyIGEgPSBbeF8gPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4XykpLCB5XyA9IE1hdGgubWF4KGNsaXBNaW4sIE1hdGgubWluKGNsaXBNYXgsIHlfKSldLFxuICAgICAgICAgICAgICBiID0gW3ggPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB4KSksIHkgPSBNYXRoLm1heChjbGlwTWluLCBNYXRoLm1pbihjbGlwTWF4LCB5KSldO1xuICAgICAgICAgIGlmIChjbGlwTGluZShhLCBiLCB4MCwgeTAsIHgxLCB5MSkpIHtcbiAgICAgICAgICAgIGlmICghdl8pIHtcbiAgICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYVswXSwgYVsxXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3RpdmVTdHJlYW0ucG9pbnQoYlswXSwgYlsxXSk7XG4gICAgICAgICAgICBpZiAoIXYpIGFjdGl2ZVN0cmVhbS5saW5lRW5kKCk7XG4gICAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodikge1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLmxpbmVTdGFydCgpO1xuICAgICAgICAgICAgYWN0aXZlU3RyZWFtLnBvaW50KHgsIHkpO1xuICAgICAgICAgICAgY2xlYW4gPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHhfID0geCwgeV8gPSB5LCB2XyA9IHY7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBTdHJlYW07XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiLCB4MCwgeTAsIHgxLCB5MSkge1xuICB2YXIgYXggPSBhWzBdLFxuICAgICAgYXkgPSBhWzFdLFxuICAgICAgYnggPSBiWzBdLFxuICAgICAgYnkgPSBiWzFdLFxuICAgICAgdDAgPSAwLFxuICAgICAgdDEgPSAxLFxuICAgICAgZHggPSBieCAtIGF4LFxuICAgICAgZHkgPSBieSAtIGF5LFxuICAgICAgcjtcblxuICByID0geDAgLSBheDtcbiAgaWYgKCFkeCAmJiByID4gMCkgcmV0dXJuO1xuICByIC89IGR4O1xuICBpZiAoZHggPCAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfSBlbHNlIGlmIChkeCA+IDApIHtcbiAgICBpZiAociA+IHQxKSByZXR1cm47XG4gICAgaWYgKHIgPiB0MCkgdDAgPSByO1xuICB9XG5cbiAgciA9IHgxIC0gYXg7XG4gIGlmICghZHggJiYgciA8IDApIHJldHVybjtcbiAgciAvPSBkeDtcbiAgaWYgKGR4IDwgMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH0gZWxzZSBpZiAoZHggPiAwKSB7XG4gICAgaWYgKHIgPCB0MCkgcmV0dXJuO1xuICAgIGlmIChyIDwgdDEpIHQxID0gcjtcbiAgfVxuXG4gIHIgPSB5MCAtIGF5O1xuICBpZiAoIWR5ICYmIHIgPiAwKSByZXR1cm47XG4gIHIgLz0gZHk7XG4gIGlmIChkeSA8IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9IGVsc2UgaWYgKGR5ID4gMCkge1xuICAgIGlmIChyID4gdDEpIHJldHVybjtcbiAgICBpZiAociA+IHQwKSB0MCA9IHI7XG4gIH1cblxuICByID0geTEgLSBheTtcbiAgaWYgKCFkeSAmJiByIDwgMCkgcmV0dXJuO1xuICByIC89IGR5O1xuICBpZiAoZHkgPCAwKSB7XG4gICAgaWYgKHIgPiB0MSkgcmV0dXJuO1xuICAgIGlmIChyID4gdDApIHQwID0gcjtcbiAgfSBlbHNlIGlmIChkeSA+IDApIHtcbiAgICBpZiAociA8IHQwKSByZXR1cm47XG4gICAgaWYgKHIgPCB0MSkgdDEgPSByO1xuICB9XG5cbiAgaWYgKHQwID4gMCkgYVswXSA9IGF4ICsgdDAgKiBkeCwgYVsxXSA9IGF5ICsgdDAgKiBkeTtcbiAgaWYgKHQxIDwgMSkgYlswXSA9IGF4ICsgdDEgKiBkeCwgYlsxXSA9IGF5ICsgdDEgKiBkeTtcbiAgcmV0dXJuIHRydWU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG5cbiAgZnVuY3Rpb24gY29tcG9zZSh4LCB5KSB7XG4gICAgcmV0dXJuIHggPSBhKHgsIHkpLCBiKHhbMF0sIHhbMV0pO1xuICB9XG5cbiAgaWYgKGEuaW52ZXJ0ICYmIGIuaW52ZXJ0KSBjb21wb3NlLmludmVydCA9IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICByZXR1cm4geCA9IGIuaW52ZXJ0KHgsIHkpLCB4ICYmIGEuaW52ZXJ0KHhbMF0sIHhbMV0pO1xuICB9O1xuXG4gIHJldHVybiBjb21wb3NlO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgeCA9PiB4O1xuIiwiaW1wb3J0IGNvbXBvc2UgZnJvbSBcIi4vY29tcG9zZS5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGRlZ3JlZXMsIHBpLCByYWRpYW5zLCBzaW4sIHRhdX0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiByb3RhdGlvbklkZW50aXR5KGxhbWJkYSwgcGhpKSB7XG4gIHJldHVybiBbYWJzKGxhbWJkYSkgPiBwaSA/IGxhbWJkYSArIE1hdGgucm91bmQoLWxhbWJkYSAvIHRhdSkgKiB0YXUgOiBsYW1iZGEsIHBoaV07XG59XG5cbnJvdGF0aW9uSWRlbnRpdHkuaW52ZXJ0ID0gcm90YXRpb25JZGVudGl0eTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZVJhZGlhbnMoZGVsdGFMYW1iZGEsIGRlbHRhUGhpLCBkZWx0YUdhbW1hKSB7XG4gIHJldHVybiAoZGVsdGFMYW1iZGEgJT0gdGF1KSA/IChkZWx0YVBoaSB8fCBkZWx0YUdhbW1hID8gY29tcG9zZShyb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSksIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpKVxuICAgIDogcm90YXRpb25MYW1iZGEoZGVsdGFMYW1iZGEpKVxuICAgIDogKGRlbHRhUGhpIHx8IGRlbHRhR2FtbWEgPyByb3RhdGlvblBoaUdhbW1hKGRlbHRhUGhpLCBkZWx0YUdhbW1hKVxuICAgIDogcm90YXRpb25JZGVudGl0eSk7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSkge1xuICByZXR1cm4gZnVuY3Rpb24obGFtYmRhLCBwaGkpIHtcbiAgICByZXR1cm4gbGFtYmRhICs9IGRlbHRhTGFtYmRhLCBbbGFtYmRhID4gcGkgPyBsYW1iZGEgLSB0YXUgOiBsYW1iZGEgPCAtcGkgPyBsYW1iZGEgKyB0YXUgOiBsYW1iZGEsIHBoaV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uTGFtYmRhKGRlbHRhTGFtYmRhKSB7XG4gIHZhciByb3RhdGlvbiA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYShkZWx0YUxhbWJkYSk7XG4gIHJvdGF0aW9uLmludmVydCA9IGZvcndhcmRSb3RhdGlvbkxhbWJkYSgtZGVsdGFMYW1iZGEpO1xuICByZXR1cm4gcm90YXRpb247XG59XG5cbmZ1bmN0aW9uIHJvdGF0aW9uUGhpR2FtbWEoZGVsdGFQaGksIGRlbHRhR2FtbWEpIHtcbiAgdmFyIGNvc0RlbHRhUGhpID0gY29zKGRlbHRhUGhpKSxcbiAgICAgIHNpbkRlbHRhUGhpID0gc2luKGRlbHRhUGhpKSxcbiAgICAgIGNvc0RlbHRhR2FtbWEgPSBjb3MoZGVsdGFHYW1tYSksXG4gICAgICBzaW5EZWx0YUdhbW1hID0gc2luKGRlbHRhR2FtbWEpO1xuXG4gIGZ1bmN0aW9uIHJvdGF0aW9uKGxhbWJkYSwgcGhpKSB7XG4gICAgdmFyIGNvc1BoaSA9IGNvcyhwaGkpLFxuICAgICAgICB4ID0gY29zKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHkgPSBzaW4obGFtYmRhKSAqIGNvc1BoaSxcbiAgICAgICAgeiA9IHNpbihwaGkpLFxuICAgICAgICBrID0geiAqIGNvc0RlbHRhUGhpICsgeCAqIHNpbkRlbHRhUGhpO1xuICAgIHJldHVybiBbXG4gICAgICBhdGFuMih5ICogY29zRGVsdGFHYW1tYSAtIGsgKiBzaW5EZWx0YUdhbW1hLCB4ICogY29zRGVsdGFQaGkgLSB6ICogc2luRGVsdGFQaGkpLFxuICAgICAgYXNpbihrICogY29zRGVsdGFHYW1tYSArIHkgKiBzaW5EZWx0YUdhbW1hKVxuICAgIF07XG4gIH1cblxuICByb3RhdGlvbi5pbnZlcnQgPSBmdW5jdGlvbihsYW1iZGEsIHBoaSkge1xuICAgIHZhciBjb3NQaGkgPSBjb3MocGhpKSxcbiAgICAgICAgeCA9IGNvcyhsYW1iZGEpICogY29zUGhpLFxuICAgICAgICB5ID0gc2luKGxhbWJkYSkgKiBjb3NQaGksXG4gICAgICAgIHogPSBzaW4ocGhpKSxcbiAgICAgICAgayA9IHogKiBjb3NEZWx0YUdhbW1hIC0geSAqIHNpbkRlbHRhR2FtbWE7XG4gICAgcmV0dXJuIFtcbiAgICAgIGF0YW4yKHkgKiBjb3NEZWx0YUdhbW1hICsgeiAqIHNpbkRlbHRhR2FtbWEsIHggKiBjb3NEZWx0YVBoaSArIGsgKiBzaW5EZWx0YVBoaSksXG4gICAgICBhc2luKGsgKiBjb3NEZWx0YVBoaSAtIHggKiBzaW5EZWx0YVBoaSlcbiAgICBdO1xuICB9O1xuXG4gIHJldHVybiByb3RhdGlvbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocm90YXRlKSB7XG4gIHJvdGF0ZSA9IHJvdGF0ZVJhZGlhbnMocm90YXRlWzBdICogcmFkaWFucywgcm90YXRlWzFdICogcmFkaWFucywgcm90YXRlLmxlbmd0aCA+IDIgPyByb3RhdGVbMl0gKiByYWRpYW5zIDogMCk7XG5cbiAgZnVuY3Rpb24gZm9yd2FyZChjb29yZGluYXRlcykge1xuICAgIGNvb3JkaW5hdGVzID0gcm90YXRlKGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH1cblxuICBmb3J3YXJkLmludmVydCA9IGZ1bmN0aW9uKGNvb3JkaW5hdGVzKSB7XG4gICAgY29vcmRpbmF0ZXMgPSByb3RhdGUuaW52ZXJ0KGNvb3JkaW5hdGVzWzBdICogcmFkaWFucywgY29vcmRpbmF0ZXNbMV0gKiByYWRpYW5zKTtcbiAgICByZXR1cm4gY29vcmRpbmF0ZXNbMF0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXNbMV0gKj0gZGVncmVlcywgY29vcmRpbmF0ZXM7XG4gIH07XG5cbiAgcmV0dXJuIGZvcndhcmQ7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtZXRob2RzKSB7XG4gIHJldHVybiB7XG4gICAgc3RyZWFtOiB0cmFuc2Zvcm1lcihtZXRob2RzKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIobWV0aG9kcykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtKSB7XG4gICAgdmFyIHMgPSBuZXcgVHJhbnNmb3JtU3RyZWFtO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSBzW2tleV0gPSBtZXRob2RzW2tleV07XG4gICAgcy5zdHJlYW0gPSBzdHJlYW07XG4gICAgcmV0dXJuIHM7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSgpIHt9XG5cblRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2Zvcm1TdHJlYW0sXG4gIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7IHRoaXMuc3RyZWFtLnBvaW50KHgsIHkpOyB9LFxuICBzcGhlcmU6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5zcGhlcmUoKTsgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ubGluZVN0YXJ0KCk7IH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkgeyB0aGlzLnN0cmVhbS5saW5lRW5kKCk7IH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHRoaXMuc3RyZWFtLnBvbHlnb25TdGFydCgpOyB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHsgdGhpcy5zdHJlYW0ucG9seWdvbkVuZCgpOyB9XG59O1xuIiwiZnVuY3Rpb24gc3RyZWFtR2VvbWV0cnkoZ2VvbWV0cnksIHN0cmVhbSkge1xuICBpZiAoZ2VvbWV0cnkgJiYgc3RyZWFtR2VvbWV0cnlUeXBlLmhhc093blByb3BlcnR5KGdlb21ldHJ5LnR5cGUpKSB7XG4gICAgc3RyZWFtR2VvbWV0cnlUeXBlW2dlb21ldHJ5LnR5cGVdKGdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59XG5cbnZhciBzdHJlYW1PYmplY3RUeXBlID0ge1xuICBGZWF0dXJlOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUdlb21ldHJ5KG9iamVjdC5nZW9tZXRyeSwgc3RyZWFtKTtcbiAgfSxcbiAgRmVhdHVyZUNvbGxlY3Rpb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGZlYXR1cmVzID0gb2JqZWN0LmZlYXR1cmVzLCBpID0gLTEsIG4gPSBmZWF0dXJlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUdlb21ldHJ5KGZlYXR1cmVzW2ldLmdlb21ldHJ5LCBzdHJlYW0pO1xuICB9XG59O1xuXG52YXIgc3RyZWFtR2VvbWV0cnlUeXBlID0ge1xuICBTcGhlcmU6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtLnNwaGVyZSgpO1xuICB9LFxuICBQb2ludDogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICBvYmplY3QgPSBvYmplY3QuY29vcmRpbmF0ZXM7XG4gICAgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBNdWx0aVBvaW50OiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBjb29yZGluYXRlcyA9IG9iamVjdC5jb29yZGluYXRlcywgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBvYmplY3QgPSBjb29yZGluYXRlc1tpXSwgc3RyZWFtLnBvaW50KG9iamVjdFswXSwgb2JqZWN0WzFdLCBvYmplY3RbMl0pO1xuICB9LFxuICBMaW5lU3RyaW5nOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHN0cmVhbUxpbmUob2JqZWN0LmNvb3JkaW5hdGVzLCBzdHJlYW0sIDApO1xuICB9LFxuICBNdWx0aUxpbmVTdHJpbmc6IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgdmFyIGNvb3JkaW5hdGVzID0gb2JqZWN0LmNvb3JkaW5hdGVzLCBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gICAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMCk7XG4gIH0sXG4gIFBvbHlnb246IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gICAgc3RyZWFtUG9seWdvbihvYmplY3QuY29vcmRpbmF0ZXMsIHN0cmVhbSk7XG4gIH0sXG4gIE11bHRpUG9seWdvbjogZnVuY3Rpb24ob2JqZWN0LCBzdHJlYW0pIHtcbiAgICB2YXIgY29vcmRpbmF0ZXMgPSBvYmplY3QuY29vcmRpbmF0ZXMsIGkgPSAtMSwgbiA9IGNvb3JkaW5hdGVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgc3RyZWFtUG9seWdvbihjb29yZGluYXRlc1tpXSwgc3RyZWFtKTtcbiAgfSxcbiAgR2VvbWV0cnlDb2xsZWN0aW9uOiBmdW5jdGlvbihvYmplY3QsIHN0cmVhbSkge1xuICAgIHZhciBnZW9tZXRyaWVzID0gb2JqZWN0Lmdlb21ldHJpZXMsIGkgPSAtMSwgbiA9IGdlb21ldHJpZXMubGVuZ3RoO1xuICAgIHdoaWxlICgrK2kgPCBuKSBzdHJlYW1HZW9tZXRyeShnZW9tZXRyaWVzW2ldLCBzdHJlYW0pO1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdHJlYW1MaW5lKGNvb3JkaW5hdGVzLCBzdHJlYW0sIGNsb3NlZCkge1xuICB2YXIgaSA9IC0xLCBuID0gY29vcmRpbmF0ZXMubGVuZ3RoIC0gY2xvc2VkLCBjb29yZGluYXRlO1xuICBzdHJlYW0ubGluZVN0YXJ0KCk7XG4gIHdoaWxlICgrK2kgPCBuKSBjb29yZGluYXRlID0gY29vcmRpbmF0ZXNbaV0sIHN0cmVhbS5wb2ludChjb29yZGluYXRlWzBdLCBjb29yZGluYXRlWzFdLCBjb29yZGluYXRlWzJdKTtcbiAgc3RyZWFtLmxpbmVFbmQoKTtcbn1cblxuZnVuY3Rpb24gc3RyZWFtUG9seWdvbihjb29yZGluYXRlcywgc3RyZWFtKSB7XG4gIHZhciBpID0gLTEsIG4gPSBjb29yZGluYXRlcy5sZW5ndGg7XG4gIHN0cmVhbS5wb2x5Z29uU3RhcnQoKTtcbiAgd2hpbGUgKCsraSA8IG4pIHN0cmVhbUxpbmUoY29vcmRpbmF0ZXNbaV0sIHN0cmVhbSwgMSk7XG4gIHN0cmVhbS5wb2x5Z29uRW5kKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9iamVjdCwgc3RyZWFtKSB7XG4gIGlmIChvYmplY3QgJiYgc3RyZWFtT2JqZWN0VHlwZS5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICBzdHJlYW1PYmplY3RUeXBlW29iamVjdC50eXBlXShvYmplY3QsIHN0cmVhbSk7XG4gIH0gZWxzZSB7XG4gICAgc3RyZWFtR2VvbWV0cnkob2JqZWN0LCBzdHJlYW0pO1xuICB9XG59XG4iLCJpbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG52YXIgeDAgPSBJbmZpbml0eSxcbiAgICB5MCA9IHgwLFxuICAgIHgxID0gLXgwLFxuICAgIHkxID0geDE7XG5cbnZhciBib3VuZHNTdHJlYW0gPSB7XG4gIHBvaW50OiBib3VuZHNQb2ludCxcbiAgbGluZVN0YXJ0OiBub29wLFxuICBsaW5lRW5kOiBub29wLFxuICBwb2x5Z29uU3RhcnQ6IG5vb3AsXG4gIHBvbHlnb25FbmQ6IG5vb3AsXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbeDAsIHkwXSwgW3gxLCB5MV1dO1xuICAgIHgxID0geTEgPSAtKHkwID0geDAgPSBJbmZpbml0eSk7XG4gICAgcmV0dXJuIGJvdW5kcztcbiAgfVxufTtcblxuZnVuY3Rpb24gYm91bmRzUG9pbnQoeCwgeSkge1xuICBpZiAoeCA8IHgwKSB4MCA9IHg7XG4gIGlmICh4ID4geDEpIHgxID0geDtcbiAgaWYgKHkgPCB5MCkgeTAgPSB5O1xuICBpZiAoeSA+IHkxKSB5MSA9IHk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJvdW5kc1N0cmVhbTtcbiIsImltcG9ydCB7ZGVmYXVsdCBhcyBnZW9TdHJlYW19IGZyb20gXCIuLi9zdHJlYW0uanNcIjtcbmltcG9ydCBib3VuZHNTdHJlYW0gZnJvbSBcIi4uL3BhdGgvYm91bmRzLmpzXCI7XG5cbmZ1bmN0aW9uIGZpdChwcm9qZWN0aW9uLCBmaXRCb3VuZHMsIG9iamVjdCkge1xuICB2YXIgY2xpcCA9IHByb2plY3Rpb24uY2xpcEV4dGVudCAmJiBwcm9qZWN0aW9uLmNsaXBFeHRlbnQoKTtcbiAgcHJvamVjdGlvbi5zY2FsZSgxNTApLnRyYW5zbGF0ZShbMCwgMF0pO1xuICBpZiAoY2xpcCAhPSBudWxsKSBwcm9qZWN0aW9uLmNsaXBFeHRlbnQobnVsbCk7XG4gIGdlb1N0cmVhbShvYmplY3QsIHByb2plY3Rpb24uc3RyZWFtKGJvdW5kc1N0cmVhbSkpO1xuICBmaXRCb3VuZHMoYm91bmRzU3RyZWFtLnJlc3VsdCgpKTtcbiAgaWYgKGNsaXAgIT0gbnVsbCkgcHJvamVjdGlvbi5jbGlwRXh0ZW50KGNsaXApO1xuICByZXR1cm4gcHJvamVjdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdEV4dGVudChwcm9qZWN0aW9uLCBleHRlbnQsIG9iamVjdCkge1xuICByZXR1cm4gZml0KHByb2plY3Rpb24sIGZ1bmN0aW9uKGIpIHtcbiAgICB2YXIgdyA9IGV4dGVudFsxXVswXSAtIGV4dGVudFswXVswXSxcbiAgICAgICAgaCA9IGV4dGVudFsxXVsxXSAtIGV4dGVudFswXVsxXSxcbiAgICAgICAgayA9IE1hdGgubWluKHcgLyAoYlsxXVswXSAtIGJbMF1bMF0pLCBoIC8gKGJbMV1bMV0gLSBiWzBdWzFdKSksXG4gICAgICAgIHggPSArZXh0ZW50WzBdWzBdICsgKHcgLSBrICogKGJbMV1bMF0gKyBiWzBdWzBdKSkgLyAyLFxuICAgICAgICB5ID0gK2V4dGVudFswXVsxXSArIChoIC0gayAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMjtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdEV4dGVudChwcm9qZWN0aW9uLCBbWzAsIDBdLCBzaXplXSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpIHtcbiAgcmV0dXJuIGZpdChwcm9qZWN0aW9uLCBmdW5jdGlvbihiKSB7XG4gICAgdmFyIHcgPSArd2lkdGgsXG4gICAgICAgIGsgPSB3IC8gKGJbMV1bMF0gLSBiWzBdWzBdKSxcbiAgICAgICAgeCA9ICh3IC0gayAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMixcbiAgICAgICAgeSA9IC1rICogYlswXVsxXTtcbiAgICBwcm9qZWN0aW9uLnNjYWxlKDE1MCAqIGspLnRyYW5zbGF0ZShbeCwgeV0pO1xuICB9LCBvYmplY3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KSB7XG4gIHJldHVybiBmaXQocHJvamVjdGlvbiwgZnVuY3Rpb24oYikge1xuICAgIHZhciBoID0gK2hlaWdodCxcbiAgICAgICAgayA9IGggLyAoYlsxXVsxXSAtIGJbMF1bMV0pLFxuICAgICAgICB4ID0gLWsgKiBiWzBdWzBdLFxuICAgICAgICB5ID0gKGggLSBrICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyO1xuICAgIHByb2plY3Rpb24uc2NhbGUoMTUwICogaykudHJhbnNsYXRlKFt4LCB5XSk7XG4gIH0sIG9iamVjdCk7XG59XG4iLCJpbXBvcnQge2NhcnRlc2lhbn0gZnJvbSBcIi4uL2NhcnRlc2lhbi5qc1wiO1xuaW1wb3J0IHthYnMsIGFzaW4sIGF0YW4yLCBjb3MsIGVwc2lsb24sIHJhZGlhbnMsIHNxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQge3RyYW5zZm9ybWVyfSBmcm9tIFwiLi4vdHJhbnNmb3JtLmpzXCI7XG5cbnZhciBtYXhEZXB0aCA9IDE2LCAvLyBtYXhpbXVtIGRlcHRoIG9mIHN1YmRpdmlzaW9uXG4gICAgY29zTWluRGlzdGFuY2UgPSBjb3MoMzAgKiByYWRpYW5zKTsgLy8gY29zKG1pbmltdW0gYW5ndWxhciBkaXN0YW5jZSlcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocHJvamVjdCwgZGVsdGEyKSB7XG4gIHJldHVybiArZGVsdGEyID8gcmVzYW1wbGUocHJvamVjdCwgZGVsdGEyKSA6IHJlc2FtcGxlTm9uZShwcm9qZWN0KTtcbn1cblxuZnVuY3Rpb24gcmVzYW1wbGVOb25lKHByb2plY3QpIHtcbiAgcmV0dXJuIHRyYW5zZm9ybWVyKHtcbiAgICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgICAgeCA9IHByb2plY3QoeCwgeSk7XG4gICAgICB0aGlzLnN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiByZXNhbXBsZShwcm9qZWN0LCBkZWx0YTIpIHtcblxuICBmdW5jdGlvbiByZXNhbXBsZUxpbmVUbyh4MCwgeTAsIGxhbWJkYTAsIGEwLCBiMCwgYzAsIHgxLCB5MSwgbGFtYmRhMSwgYTEsIGIxLCBjMSwgZGVwdGgsIHN0cmVhbSkge1xuICAgIHZhciBkeCA9IHgxIC0geDAsXG4gICAgICAgIGR5ID0geTEgLSB5MCxcbiAgICAgICAgZDIgPSBkeCAqIGR4ICsgZHkgKiBkeTtcbiAgICBpZiAoZDIgPiA0ICogZGVsdGEyICYmIGRlcHRoLS0pIHtcbiAgICAgIHZhciBhID0gYTAgKyBhMSxcbiAgICAgICAgICBiID0gYjAgKyBiMSxcbiAgICAgICAgICBjID0gYzAgKyBjMSxcbiAgICAgICAgICBtID0gc3FydChhICogYSArIGIgKiBiICsgYyAqIGMpLFxuICAgICAgICAgIHBoaTIgPSBhc2luKGMgLz0gbSksXG4gICAgICAgICAgbGFtYmRhMiA9IGFicyhhYnMoYykgLSAxKSA8IGVwc2lsb24gfHwgYWJzKGxhbWJkYTAgLSBsYW1iZGExKSA8IGVwc2lsb24gPyAobGFtYmRhMCArIGxhbWJkYTEpIC8gMiA6IGF0YW4yKGIsIGEpLFxuICAgICAgICAgIHAgPSBwcm9qZWN0KGxhbWJkYTIsIHBoaTIpLFxuICAgICAgICAgIHgyID0gcFswXSxcbiAgICAgICAgICB5MiA9IHBbMV0sXG4gICAgICAgICAgZHgyID0geDIgLSB4MCxcbiAgICAgICAgICBkeTIgPSB5MiAtIHkwLFxuICAgICAgICAgIGR6ID0gZHkgKiBkeDIgLSBkeCAqIGR5MjtcbiAgICAgIGlmIChkeiAqIGR6IC8gZDIgPiBkZWx0YTIgLy8gcGVycGVuZGljdWxhciBwcm9qZWN0ZWQgZGlzdGFuY2VcbiAgICAgICAgICB8fCBhYnMoKGR4ICogZHgyICsgZHkgKiBkeTIpIC8gZDIgLSAwLjUpID4gMC4zIC8vIG1pZHBvaW50IGNsb3NlIHRvIGFuIGVuZFxuICAgICAgICAgIHx8IGEwICogYTEgKyBiMCAqIGIxICsgYzAgKiBjMSA8IGNvc01pbkRpc3RhbmNlKSB7IC8vIGFuZ3VsYXIgZGlzdGFuY2VcbiAgICAgICAgcmVzYW1wbGVMaW5lVG8oeDAsIHkwLCBsYW1iZGEwLCBhMCwgYjAsIGMwLCB4MiwgeTIsIGxhbWJkYTIsIGEgLz0gbSwgYiAvPSBtLCBjLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgICAgc3RyZWFtLnBvaW50KHgyLCB5Mik7XG4gICAgICAgIHJlc2FtcGxlTGluZVRvKHgyLCB5MiwgbGFtYmRhMiwgYSwgYiwgYywgeDEsIHkxLCBsYW1iZGExLCBhMSwgYjEsIGMxLCBkZXB0aCwgc3RyZWFtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmVhbSkge1xuICAgIHZhciBsYW1iZGEwMCwgeDAwLCB5MDAsIGEwMCwgYjAwLCBjMDAsIC8vIGZpcnN0IHBvaW50XG4gICAgICAgIGxhbWJkYTAsIHgwLCB5MCwgYTAsIGIwLCBjMDsgLy8gcHJldmlvdXMgcG9pbnRcblxuICAgIHZhciByZXNhbXBsZVN0cmVhbSA9IHtcbiAgICAgIHBvaW50OiBwb2ludCxcbiAgICAgIGxpbmVTdGFydDogbGluZVN0YXJ0LFxuICAgICAgbGluZUVuZDogbGluZUVuZCxcbiAgICAgIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uU3RhcnQoKTsgcmVzYW1wbGVTdHJlYW0ubGluZVN0YXJ0ID0gcmluZ1N0YXJ0OyB9LFxuICAgICAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7IHN0cmVhbS5wb2x5Z29uRW5kKCk7IHJlc2FtcGxlU3RyZWFtLmxpbmVTdGFydCA9IGxpbmVTdGFydDsgfVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBwb2ludCh4LCB5KSB7XG4gICAgICB4ID0gcHJvamVjdCh4LCB5KTtcbiAgICAgIHN0cmVhbS5wb2ludCh4WzBdLCB4WzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lU3RhcnQoKSB7XG4gICAgICB4MCA9IE5hTjtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gbGluZVBvaW50O1xuICAgICAgc3RyZWFtLmxpbmVTdGFydCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpbmVQb2ludChsYW1iZGEsIHBoaSkge1xuICAgICAgdmFyIGMgPSBjYXJ0ZXNpYW4oW2xhbWJkYSwgcGhpXSksIHAgPSBwcm9qZWN0KGxhbWJkYSwgcGhpKTtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAgPSBwWzBdLCB5MCA9IHBbMV0sIGxhbWJkYTAgPSBsYW1iZGEsIGEwID0gY1swXSwgYjAgPSBjWzFdLCBjMCA9IGNbMl0sIG1heERlcHRoLCBzdHJlYW0pO1xuICAgICAgc3RyZWFtLnBvaW50KHgwLCB5MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZUVuZCgpIHtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLnBvaW50ID0gcG9pbnQ7XG4gICAgICBzdHJlYW0ubGluZUVuZCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJpbmdTdGFydCgpIHtcbiAgICAgIGxpbmVTdGFydCgpO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSByaW5nUG9pbnQ7XG4gICAgICByZXNhbXBsZVN0cmVhbS5saW5lRW5kID0gcmluZ0VuZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByaW5nUG9pbnQobGFtYmRhLCBwaGkpIHtcbiAgICAgIGxpbmVQb2ludChsYW1iZGEwMCA9IGxhbWJkYSwgcGhpKSwgeDAwID0geDAsIHkwMCA9IHkwLCBhMDAgPSBhMCwgYjAwID0gYjAsIGMwMCA9IGMwO1xuICAgICAgcmVzYW1wbGVTdHJlYW0ucG9pbnQgPSBsaW5lUG9pbnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmluZ0VuZCgpIHtcbiAgICAgIHJlc2FtcGxlTGluZVRvKHgwLCB5MCwgbGFtYmRhMCwgYTAsIGIwLCBjMCwgeDAwLCB5MDAsIGxhbWJkYTAwLCBhMDAsIGIwMCwgYzAwLCBtYXhEZXB0aCwgc3RyZWFtKTtcbiAgICAgIHJlc2FtcGxlU3RyZWFtLmxpbmVFbmQgPSBsaW5lRW5kO1xuICAgICAgbGluZUVuZCgpO1xuICAgIH1cblxuICAgIHJldHVybiByZXNhbXBsZVN0cmVhbTtcbiAgfTtcbn1cbiIsImltcG9ydCBjbGlwQW50aW1lcmlkaWFuIGZyb20gXCIuLi9jbGlwL2FudGltZXJpZGlhbi5qc1wiO1xuaW1wb3J0IGNsaXBDaXJjbGUgZnJvbSBcIi4uL2NsaXAvY2lyY2xlLmpzXCI7XG5pbXBvcnQgY2xpcFJlY3RhbmdsZSBmcm9tIFwiLi4vY2xpcC9yZWN0YW5nbGUuanNcIjtcbmltcG9ydCBjb21wb3NlIGZyb20gXCIuLi9jb21wb3NlLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4uL2lkZW50aXR5LmpzXCI7XG5pbXBvcnQge2NvcywgZGVncmVlcywgcmFkaWFucywgc2luLCBzcXJ0fSBmcm9tIFwiLi4vbWF0aC5qc1wiO1xuaW1wb3J0IHtyb3RhdGVSYWRpYW5zfSBmcm9tIFwiLi4vcm90YXRpb24uanNcIjtcbmltcG9ydCB7dHJhbnNmb3JtZXJ9IGZyb20gXCIuLi90cmFuc2Zvcm0uanNcIjtcbmltcG9ydCB7Zml0RXh0ZW50LCBmaXRTaXplLCBmaXRXaWR0aCwgZml0SGVpZ2h0fSBmcm9tIFwiLi9maXQuanNcIjtcbmltcG9ydCByZXNhbXBsZSBmcm9tIFwiLi9yZXNhbXBsZS5qc1wiO1xuXG52YXIgdHJhbnNmb3JtUmFkaWFucyA9IHRyYW5zZm9ybWVyKHtcbiAgcG9pbnQ6IGZ1bmN0aW9uKHgsIHkpIHtcbiAgICB0aGlzLnN0cmVhbS5wb2ludCh4ICogcmFkaWFucywgeSAqIHJhZGlhbnMpO1xuICB9XG59KTtcblxuZnVuY3Rpb24gdHJhbnNmb3JtUm90YXRlKHJvdGF0ZSkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoe1xuICAgIHBvaW50OiBmdW5jdGlvbih4LCB5KSB7XG4gICAgICB2YXIgciA9IHJvdGF0ZSh4LCB5KTtcbiAgICAgIHJldHVybiB0aGlzLnN0cmVhbS5wb2ludChyWzBdLCByWzFdKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHksIHN4LCBzeSkge1xuICBmdW5jdGlvbiB0cmFuc2Zvcm0oeCwgeSkge1xuICAgIHggKj0gc3g7IHkgKj0gc3k7XG4gICAgcmV0dXJuIFtkeCArIGsgKiB4LCBkeSAtIGsgKiB5XTtcbiAgfVxuICB0cmFuc2Zvcm0uaW52ZXJ0ID0gZnVuY3Rpb24oeCwgeSkge1xuICAgIHJldHVybiBbKHggLSBkeCkgLyBrICogc3gsIChkeSAtIHkpIC8gayAqIHN5XTtcbiAgfTtcbiAgcmV0dXJuIHRyYW5zZm9ybTtcbn1cblxuZnVuY3Rpb24gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgZHgsIGR5LCBzeCwgc3ksIGFscGhhKSB7XG4gIGlmICghYWxwaGEpIHJldHVybiBzY2FsZVRyYW5zbGF0ZShrLCBkeCwgZHksIHN4LCBzeSk7XG4gIHZhciBjb3NBbHBoYSA9IGNvcyhhbHBoYSksXG4gICAgICBzaW5BbHBoYSA9IHNpbihhbHBoYSksXG4gICAgICBhID0gY29zQWxwaGEgKiBrLFxuICAgICAgYiA9IHNpbkFscGhhICogayxcbiAgICAgIGFpID0gY29zQWxwaGEgLyBrLFxuICAgICAgYmkgPSBzaW5BbHBoYSAvIGssXG4gICAgICBjaSA9IChzaW5BbHBoYSAqIGR5IC0gY29zQWxwaGEgKiBkeCkgLyBrLFxuICAgICAgZmkgPSAoc2luQWxwaGEgKiBkeCArIGNvc0FscGhhICogZHkpIC8gaztcbiAgZnVuY3Rpb24gdHJhbnNmb3JtKHgsIHkpIHtcbiAgICB4ICo9IHN4OyB5ICo9IHN5O1xuICAgIHJldHVybiBbYSAqIHggLSBiICogeSArIGR4LCBkeSAtIGIgKiB4IC0gYSAqIHldO1xuICB9XG4gIHRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgcmV0dXJuIFtzeCAqIChhaSAqIHggLSBiaSAqIHkgKyBjaSksIHN5ICogKGZpIC0gYmkgKiB4IC0gYWkgKiB5KV07XG4gIH07XG4gIHJldHVybiB0cmFuc2Zvcm07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByb2plY3Rpb24ocHJvamVjdCkge1xuICByZXR1cm4gcHJvamVjdGlvbk11dGF0b3IoZnVuY3Rpb24oKSB7IHJldHVybiBwcm9qZWN0OyB9KSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvamVjdGlvbk11dGF0b3IocHJvamVjdEF0KSB7XG4gIHZhciBwcm9qZWN0LFxuICAgICAgayA9IDE1MCwgLy8gc2NhbGVcbiAgICAgIHggPSA0ODAsIHkgPSAyNTAsIC8vIHRyYW5zbGF0ZVxuICAgICAgbGFtYmRhID0gMCwgcGhpID0gMCwgLy8gY2VudGVyXG4gICAgICBkZWx0YUxhbWJkYSA9IDAsIGRlbHRhUGhpID0gMCwgZGVsdGFHYW1tYSA9IDAsIHJvdGF0ZSwgLy8gcHJlLXJvdGF0ZVxuICAgICAgYWxwaGEgPSAwLCAvLyBwb3N0LXJvdGF0ZSBhbmdsZVxuICAgICAgc3ggPSAxLCAvLyByZWZsZWN0WFxuICAgICAgc3kgPSAxLCAvLyByZWZsZWN0WFxuICAgICAgdGhldGEgPSBudWxsLCBwcmVjbGlwID0gY2xpcEFudGltZXJpZGlhbiwgLy8gcHJlLWNsaXAgYW5nbGVcbiAgICAgIHgwID0gbnVsbCwgeTAsIHgxLCB5MSwgcG9zdGNsaXAgPSBpZGVudGl0eSwgLy8gcG9zdC1jbGlwIGV4dGVudFxuICAgICAgZGVsdGEyID0gMC41LCAvLyBwcmVjaXNpb25cbiAgICAgIHByb2plY3RSZXNhbXBsZSxcbiAgICAgIHByb2plY3RUcmFuc2Zvcm0sXG4gICAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLFxuICAgICAgY2FjaGUsXG4gICAgICBjYWNoZVN0cmVhbTtcblxuICBmdW5jdGlvbiBwcm9qZWN0aW9uKHBvaW50KSB7XG4gICAgcmV0dXJuIHByb2plY3RSb3RhdGVUcmFuc2Zvcm0ocG9pbnRbMF0gKiByYWRpYW5zLCBwb2ludFsxXSAqIHJhZGlhbnMpO1xuICB9XG5cbiAgZnVuY3Rpb24gaW52ZXJ0KHBvaW50KSB7XG4gICAgcG9pbnQgPSBwcm9qZWN0Um90YXRlVHJhbnNmb3JtLmludmVydChwb2ludFswXSwgcG9pbnRbMV0pO1xuICAgIHJldHVybiBwb2ludCAmJiBbcG9pbnRbMF0gKiBkZWdyZWVzLCBwb2ludFsxXSAqIGRlZ3JlZXNdO1xuICB9XG5cbiAgcHJvamVjdGlvbi5zdHJlYW0gPSBmdW5jdGlvbihzdHJlYW0pIHtcbiAgICByZXR1cm4gY2FjaGUgJiYgY2FjaGVTdHJlYW0gPT09IHN0cmVhbSA/IGNhY2hlIDogY2FjaGUgPSB0cmFuc2Zvcm1SYWRpYW5zKHRyYW5zZm9ybVJvdGF0ZShyb3RhdGUpKHByZWNsaXAocHJvamVjdFJlc2FtcGxlKHBvc3RjbGlwKGNhY2hlU3RyZWFtID0gc3RyZWFtKSkpKSk7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5wcmVjbGlwID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByZWNsaXAgPSBfLCB0aGV0YSA9IHVuZGVmaW5lZCwgcmVzZXQoKSkgOiBwcmVjbGlwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucG9zdGNsaXAgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfLCB4MCA9IHkwID0geDEgPSB5MSA9IG51bGwsIHJlc2V0KCkpIDogcG9zdGNsaXA7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jbGlwQW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocHJlY2xpcCA9ICtfID8gY2xpcENpcmNsZSh0aGV0YSA9IF8gKiByYWRpYW5zKSA6ICh0aGV0YSA9IG51bGwsIGNsaXBBbnRpbWVyaWRpYW4pLCByZXNldCgpKSA6IHRoZXRhICogZGVncmVlcztcbiAgfTtcblxuICBwcm9qZWN0aW9uLmNsaXBFeHRlbnQgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAocG9zdGNsaXAgPSBfID09IG51bGwgPyAoeDAgPSB5MCA9IHgxID0geTEgPSBudWxsLCBpZGVudGl0eSkgOiBjbGlwUmVjdGFuZ2xlKHgwID0gK19bMF1bMF0sIHkwID0gK19bMF1bMV0sIHgxID0gK19bMV1bMF0sIHkxID0gK19bMV1bMV0pLCByZXNldCgpKSA6IHgwID09IG51bGwgPyBudWxsIDogW1t4MCwgeTBdLCBbeDEsIHkxXV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5zY2FsZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChrID0gK18sIHJlY2VudGVyKCkpIDogaztcbiAgfTtcblxuICBwcm9qZWN0aW9uLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh4ID0gK19bMF0sIHkgPSArX1sxXSwgcmVjZW50ZXIoKSkgOiBbeCwgeV07XG4gIH07XG5cbiAgcHJvamVjdGlvbi5jZW50ZXIgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAobGFtYmRhID0gX1swXSAlIDM2MCAqIHJhZGlhbnMsIHBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCByZWNlbnRlcigpKSA6IFtsYW1iZGEgKiBkZWdyZWVzLCBwaGkgKiBkZWdyZWVzXTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnJvdGF0ZSA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChkZWx0YUxhbWJkYSA9IF9bMF0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YVBoaSA9IF9bMV0gJSAzNjAgKiByYWRpYW5zLCBkZWx0YUdhbW1hID0gXy5sZW5ndGggPiAyID8gX1syXSAlIDM2MCAqIHJhZGlhbnMgOiAwLCByZWNlbnRlcigpKSA6IFtkZWx0YUxhbWJkYSAqIGRlZ3JlZXMsIGRlbHRhUGhpICogZGVncmVlcywgZGVsdGFHYW1tYSAqIGRlZ3JlZXNdO1xuICB9O1xuXG4gIHByb2plY3Rpb24uYW5nbGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoYWxwaGEgPSBfICUgMzYwICogcmFkaWFucywgcmVjZW50ZXIoKSkgOiBhbHBoYSAqIGRlZ3JlZXM7XG4gIH07XG5cbiAgcHJvamVjdGlvbi5yZWZsZWN0WCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChzeCA9IF8gPyAtMSA6IDEsIHJlY2VudGVyKCkpIDogc3ggPCAwO1xuICB9O1xuXG4gIHByb2plY3Rpb24ucmVmbGVjdFkgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoc3kgPSBfID8gLTEgOiAxLCByZWNlbnRlcigpKSA6IHN5IDwgMDtcbiAgfTtcblxuICBwcm9qZWN0aW9uLnByZWNpc2lvbiA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChwcm9qZWN0UmVzYW1wbGUgPSByZXNhbXBsZShwcm9qZWN0VHJhbnNmb3JtLCBkZWx0YTIgPSBfICogXyksIHJlc2V0KCkpIDogc3FydChkZWx0YTIpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0RXh0ZW50ID0gZnVuY3Rpb24oZXh0ZW50LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0RXh0ZW50KHByb2plY3Rpb24sIGV4dGVudCwgb2JqZWN0KTtcbiAgfTtcblxuICBwcm9qZWN0aW9uLmZpdFNpemUgPSBmdW5jdGlvbihzaXplLCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0U2l6ZShwcm9qZWN0aW9uLCBzaXplLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0V2lkdGggPSBmdW5jdGlvbih3aWR0aCwgb2JqZWN0KSB7XG4gICAgcmV0dXJuIGZpdFdpZHRoKHByb2plY3Rpb24sIHdpZHRoLCBvYmplY3QpO1xuICB9O1xuXG4gIHByb2plY3Rpb24uZml0SGVpZ2h0ID0gZnVuY3Rpb24oaGVpZ2h0LCBvYmplY3QpIHtcbiAgICByZXR1cm4gZml0SGVpZ2h0KHByb2plY3Rpb24sIGhlaWdodCwgb2JqZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiByZWNlbnRlcigpIHtcbiAgICB2YXIgY2VudGVyID0gc2NhbGVUcmFuc2xhdGVSb3RhdGUoaywgMCwgMCwgc3gsIHN5LCBhbHBoYSkuYXBwbHkobnVsbCwgcHJvamVjdChsYW1iZGEsIHBoaSkpLFxuICAgICAgICB0cmFuc2Zvcm0gPSBzY2FsZVRyYW5zbGF0ZVJvdGF0ZShrLCB4IC0gY2VudGVyWzBdLCB5IC0gY2VudGVyWzFdLCBzeCwgc3ksIGFscGhhKTtcbiAgICByb3RhdGUgPSByb3RhdGVSYWRpYW5zKGRlbHRhTGFtYmRhLCBkZWx0YVBoaSwgZGVsdGFHYW1tYSk7XG4gICAgcHJvamVjdFRyYW5zZm9ybSA9IGNvbXBvc2UocHJvamVjdCwgdHJhbnNmb3JtKTtcbiAgICBwcm9qZWN0Um90YXRlVHJhbnNmb3JtID0gY29tcG9zZShyb3RhdGUsIHByb2plY3RUcmFuc2Zvcm0pO1xuICAgIHByb2plY3RSZXNhbXBsZSA9IHJlc2FtcGxlKHByb2plY3RUcmFuc2Zvcm0sIGRlbHRhMik7XG4gICAgcmV0dXJuIHJlc2V0KCk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBjYWNoZSA9IGNhY2hlU3RyZWFtID0gbnVsbDtcbiAgICByZXR1cm4gcHJvamVjdGlvbjtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBwcm9qZWN0ID0gcHJvamVjdEF0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgcHJvamVjdGlvbi5pbnZlcnQgPSBwcm9qZWN0LmludmVydCAmJiBpbnZlcnQ7XG4gICAgcmV0dXJuIHJlY2VudGVyKCk7XG4gIH07XG59XG4iLCJpbXBvcnQge2FzaW4sIGF0YW4yLCBjb3MsIHNpbiwgc3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGF6aW11dGhhbFJhdyhzY2FsZSkge1xuICByZXR1cm4gZnVuY3Rpb24oeCwgeSkge1xuICAgIHZhciBjeCA9IGNvcyh4KSxcbiAgICAgICAgY3kgPSBjb3MoeSksXG4gICAgICAgIGsgPSBzY2FsZShjeCAqIGN5KTtcbiAgICAgICAgaWYgKGsgPT09IEluZmluaXR5KSByZXR1cm4gWzIsIDBdO1xuICAgIHJldHVybiBbXG4gICAgICBrICogY3kgKiBzaW4oeCksXG4gICAgICBrICogc2luKHkpXG4gICAgXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXppbXV0aGFsSW52ZXJ0KGFuZ2xlKSB7XG4gIHJldHVybiBmdW5jdGlvbih4LCB5KSB7XG4gICAgdmFyIHogPSBzcXJ0KHggKiB4ICsgeSAqIHkpLFxuICAgICAgICBjID0gYW5nbGUoeiksXG4gICAgICAgIHNjID0gc2luKGMpLFxuICAgICAgICBjYyA9IGNvcyhjKTtcbiAgICByZXR1cm4gW1xuICAgICAgYXRhbjIoeCAqIHNjLCB6ICogY2MpLFxuICAgICAgYXNpbih6ICYmIHkgKiBzYyAvIHopXG4gICAgXTtcbiAgfVxufVxuIiwiaW1wb3J0IHthc2luLCBjb3MsIGVwc2lsb24sIHNpbn0gZnJvbSBcIi4uL21hdGguanNcIjtcbmltcG9ydCB7YXppbXV0aGFsSW52ZXJ0fSBmcm9tIFwiLi9hemltdXRoYWwuanNcIjtcbmltcG9ydCBwcm9qZWN0aW9uIGZyb20gXCIuL2luZGV4LmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcnRob2dyYXBoaWNSYXcoeCwgeSkge1xuICByZXR1cm4gW2Nvcyh5KSAqIHNpbih4KSwgc2luKHkpXTtcbn1cblxub3J0aG9ncmFwaGljUmF3LmludmVydCA9IGF6aW11dGhhbEludmVydChhc2luKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBwcm9qZWN0aW9uKG9ydGhvZ3JhcGhpY1JhdylcbiAgICAgIC5zY2FsZSgyNDkuNSlcbiAgICAgIC5jbGlwQW5nbGUoOTAgKyBlcHNpbG9uKTtcbn1cbiIsImltcG9ydCB7QWRkZXJ9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHthYnN9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG52YXIgYXJlYVN1bSA9IG5ldyBBZGRlcigpLFxuICAgIGFyZWFSaW5nU3VtID0gbmV3IEFkZGVyKCksXG4gICAgeDAwLFxuICAgIHkwMCxcbiAgICB4MCxcbiAgICB5MDtcblxudmFyIGFyZWFTdHJlYW0gPSB7XG4gIHBvaW50OiBub29wLFxuICBsaW5lU3RhcnQ6IG5vb3AsXG4gIGxpbmVFbmQ6IG5vb3AsXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgYXJlYVN0cmVhbS5saW5lU3RhcnQgPSBhcmVhUmluZ1N0YXJ0O1xuICAgIGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBhcmVhU3RyZWFtLmxpbmVTdGFydCA9IGFyZWFTdHJlYW0ubGluZUVuZCA9IGFyZWFTdHJlYW0ucG9pbnQgPSBub29wO1xuICAgIGFyZWFTdW0uYWRkKGFicyhhcmVhUmluZ1N1bSkpO1xuICAgIGFyZWFSaW5nU3VtID0gbmV3IEFkZGVyKCk7XG4gIH0sXG4gIHJlc3VsdDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGFyZWEgPSBhcmVhU3VtIC8gMjtcbiAgICBhcmVhU3VtID0gbmV3IEFkZGVyKCk7XG4gICAgcmV0dXJuIGFyZWE7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGFyZWFSaW5nU3RhcnQoKSB7XG4gIGFyZWFTdHJlYW0ucG9pbnQgPSBhcmVhUG9pbnRGaXJzdDtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50Rmlyc3QoeCwgeSkge1xuICBhcmVhU3RyZWFtLnBvaW50ID0gYXJlYVBvaW50O1xuICB4MDAgPSB4MCA9IHgsIHkwMCA9IHkwID0geTtcbn1cblxuZnVuY3Rpb24gYXJlYVBvaW50KHgsIHkpIHtcbiAgYXJlYVJpbmdTdW0uYWRkKHkwICogeCAtIHgwICogeSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5mdW5jdGlvbiBhcmVhUmluZ0VuZCgpIHtcbiAgYXJlYVBvaW50KHgwMCwgeTAwKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJlYVN0cmVhbTtcbiIsImltcG9ydCB7c3FydH0gZnJvbSBcIi4uL21hdGguanNcIjtcblxuLy8gVE9ETyBFbmZvcmNlIHBvc2l0aXZlIGFyZWEgZm9yIGV4dGVyaW9yLCBuZWdhdGl2ZSBhcmVhIGZvciBpbnRlcmlvcj9cblxudmFyIFgwID0gMCxcbiAgICBZMCA9IDAsXG4gICAgWjAgPSAwLFxuICAgIFgxID0gMCxcbiAgICBZMSA9IDAsXG4gICAgWjEgPSAwLFxuICAgIFgyID0gMCxcbiAgICBZMiA9IDAsXG4gICAgWjIgPSAwLFxuICAgIHgwMCxcbiAgICB5MDAsXG4gICAgeDAsXG4gICAgeTA7XG5cbnZhciBjZW50cm9pZFN0cmVhbSA9IHtcbiAgcG9pbnQ6IGNlbnRyb2lkUG9pbnQsXG4gIGxpbmVTdGFydDogY2VudHJvaWRMaW5lU3RhcnQsXG4gIGxpbmVFbmQ6IGNlbnRyb2lkTGluZUVuZCxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lU3RhcnQgPSBjZW50cm9pZFJpbmdTdGFydDtcbiAgICBjZW50cm9pZFN0cmVhbS5saW5lRW5kID0gY2VudHJvaWRSaW5nRW5kO1xuICB9LFxuICBwb2x5Z29uRW5kOiBmdW5jdGlvbigpIHtcbiAgICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZVN0YXJ0ID0gY2VudHJvaWRMaW5lU3RhcnQ7XG4gICAgY2VudHJvaWRTdHJlYW0ubGluZUVuZCA9IGNlbnRyb2lkTGluZUVuZDtcbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY2VudHJvaWQgPSBaMiA/IFtYMiAvIFoyLCBZMiAvIFoyXVxuICAgICAgICA6IFoxID8gW1gxIC8gWjEsIFkxIC8gWjFdXG4gICAgICAgIDogWjAgPyBbWDAgLyBaMCwgWTAgLyBaMF1cbiAgICAgICAgOiBbTmFOLCBOYU5dO1xuICAgIFgwID0gWTAgPSBaMCA9XG4gICAgWDEgPSBZMSA9IFoxID1cbiAgICBYMiA9IFkyID0gWjIgPSAwO1xuICAgIHJldHVybiBjZW50cm9pZDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludCh4LCB5KSB7XG4gIFgwICs9IHg7XG4gIFkwICs9IHk7XG4gICsrWjA7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkTGluZVN0YXJ0KCkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRGaXJzdExpbmU7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdExpbmUoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRMaW5lO1xuICBjZW50cm9pZFBvaW50KHgwID0geCwgeTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludExpbmUoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsIGR5ID0geSAtIHkwLCB6ID0gc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gIFgxICs9IHogKiAoeDAgKyB4KSAvIDI7XG4gIFkxICs9IHogKiAoeTAgKyB5KSAvIDI7XG4gIFoxICs9IHo7XG4gIGNlbnRyb2lkUG9pbnQoeDAgPSB4LCB5MCA9IHkpO1xufVxuXG5mdW5jdGlvbiBjZW50cm9pZExpbmVFbmQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludDtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nU3RhcnQoKSB7XG4gIGNlbnRyb2lkU3RyZWFtLnBvaW50ID0gY2VudHJvaWRQb2ludEZpcnN0UmluZztcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRSaW5nRW5kKCkge1xuICBjZW50cm9pZFBvaW50UmluZyh4MDAsIHkwMCk7XG59XG5cbmZ1bmN0aW9uIGNlbnRyb2lkUG9pbnRGaXJzdFJpbmcoeCwgeSkge1xuICBjZW50cm9pZFN0cmVhbS5wb2ludCA9IGNlbnRyb2lkUG9pbnRSaW5nO1xuICBjZW50cm9pZFBvaW50KHgwMCA9IHgwID0geCwgeTAwID0geTAgPSB5KTtcbn1cblxuZnVuY3Rpb24gY2VudHJvaWRQb2ludFJpbmcoeCwgeSkge1xuICB2YXIgZHggPSB4IC0geDAsXG4gICAgICBkeSA9IHkgLSB5MCxcbiAgICAgIHogPSBzcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcblxuICBYMSArPSB6ICogKHgwICsgeCkgLyAyO1xuICBZMSArPSB6ICogKHkwICsgeSkgLyAyO1xuICBaMSArPSB6O1xuXG4gIHogPSB5MCAqIHggLSB4MCAqIHk7XG4gIFgyICs9IHogKiAoeDAgKyB4KTtcbiAgWTIgKz0geiAqICh5MCArIHkpO1xuICBaMiArPSB6ICogMztcbiAgY2VudHJvaWRQb2ludCh4MCA9IHgsIHkwID0geSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNlbnRyb2lkU3RyZWFtO1xuIiwiaW1wb3J0IHt0YXV9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoQ29udGV4dChjb250ZXh0KSB7XG4gIHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xufVxuXG5QYXRoQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgcG9pbnRSYWRpdXM6IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gdGhpcy5fcmFkaXVzID0gXywgdGhpcztcbiAgfSxcbiAgcG9seWdvblN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9saW5lID0gMDtcbiAgfSxcbiAgcG9seWdvbkVuZDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IE5hTjtcbiAgfSxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wb2ludCA9IDA7XG4gIH0sXG4gIGxpbmVFbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9saW5lID09PSAwKSB0aGlzLl9jb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9jb250ZXh0Lm1vdmVUbyh4LCB5KTtcbiAgICAgICAgdGhpcy5fcG9pbnQgPSAxO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNhc2UgMToge1xuICAgICAgICB0aGlzLl9jb250ZXh0LmxpbmVUbyh4LCB5KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OiB7XG4gICAgICAgIHRoaXMuX2NvbnRleHQubW92ZVRvKHggKyB0aGlzLl9yYWRpdXMsIHkpO1xuICAgICAgICB0aGlzLl9jb250ZXh0LmFyYyh4LCB5LCB0aGlzLl9yYWRpdXMsIDAsIHRhdSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBub29wXG59O1xuIiwiaW1wb3J0IHtBZGRlcn0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge3NxcnR9IGZyb20gXCIuLi9tYXRoLmpzXCI7XG5pbXBvcnQgbm9vcCBmcm9tIFwiLi4vbm9vcC5qc1wiO1xuXG52YXIgbGVuZ3RoU3VtID0gbmV3IEFkZGVyKCksXG4gICAgbGVuZ3RoUmluZyxcbiAgICB4MDAsXG4gICAgeTAwLFxuICAgIHgwLFxuICAgIHkwO1xuXG52YXIgbGVuZ3RoU3RyZWFtID0ge1xuICBwb2ludDogbm9vcCxcbiAgbGluZVN0YXJ0OiBmdW5jdGlvbigpIHtcbiAgICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludEZpcnN0O1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAobGVuZ3RoUmluZykgbGVuZ3RoUG9pbnQoeDAwLCB5MDApO1xuICAgIGxlbmd0aFN0cmVhbS5wb2ludCA9IG5vb3A7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgbGVuZ3RoUmluZyA9IHRydWU7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIGxlbmd0aFJpbmcgPSBudWxsO1xuICB9LFxuICByZXN1bHQ6IGZ1bmN0aW9uKCkge1xuICAgIHZhciBsZW5ndGggPSArbGVuZ3RoU3VtO1xuICAgIGxlbmd0aFN1bSA9IG5ldyBBZGRlcigpO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50Rmlyc3QoeCwgeSkge1xuICBsZW5ndGhTdHJlYW0ucG9pbnQgPSBsZW5ndGhQb2ludDtcbiAgeDAwID0geDAgPSB4LCB5MDAgPSB5MCA9IHk7XG59XG5cbmZ1bmN0aW9uIGxlbmd0aFBvaW50KHgsIHkpIHtcbiAgeDAgLT0geCwgeTAgLT0geTtcbiAgbGVuZ3RoU3VtLmFkZChzcXJ0KHgwICogeDAgKyB5MCAqIHkwKSk7XG4gIHgwID0geCwgeTAgPSB5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBsZW5ndGhTdHJlYW07XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBQYXRoU3RyaW5nKCkge1xuICB0aGlzLl9zdHJpbmcgPSBbXTtcbn1cblxuUGF0aFN0cmluZy5wcm90b3R5cGUgPSB7XG4gIF9yYWRpdXM6IDQuNSxcbiAgX2NpcmNsZTogY2lyY2xlKDQuNSksXG4gIHBvaW50UmFkaXVzOiBmdW5jdGlvbihfKSB7XG4gICAgaWYgKChfID0gK18pICE9PSB0aGlzLl9yYWRpdXMpIHRoaXMuX3JhZGl1cyA9IF8sIHRoaXMuX2NpcmNsZSA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG4gIHBvbHlnb25TdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fbGluZSA9IDA7XG4gIH0sXG4gIHBvbHlnb25FbmQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2xpbmUgPSBOYU47XG4gIH0sXG4gIGxpbmVTdGFydDogZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcG9pbnQgPSAwO1xuICB9LFxuICBsaW5lRW5kOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fbGluZSA9PT0gMCkgdGhpcy5fc3RyaW5nLnB1c2goXCJaXCIpO1xuICAgIHRoaXMuX3BvaW50ID0gTmFOO1xuICB9LFxuICBwb2ludDogZnVuY3Rpb24oeCwgeSkge1xuICAgIHN3aXRjaCAodGhpcy5fcG9pbnQpIHtcbiAgICAgIGNhc2UgMDoge1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHkpO1xuICAgICAgICB0aGlzLl9wb2ludCA9IDE7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSAxOiB7XG4gICAgICAgIHRoaXMuX3N0cmluZy5wdXNoKFwiTFwiLCB4LCBcIixcIiwgeSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDoge1xuICAgICAgICBpZiAodGhpcy5fY2lyY2xlID09IG51bGwpIHRoaXMuX2NpcmNsZSA9IGNpcmNsZSh0aGlzLl9yYWRpdXMpO1xuICAgICAgICB0aGlzLl9zdHJpbmcucHVzaChcIk1cIiwgeCwgXCIsXCIsIHksIHRoaXMuX2NpcmNsZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcmVzdWx0OiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fc3RyaW5nLmxlbmd0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3N0cmluZy5qb2luKFwiXCIpO1xuICAgICAgdGhpcy5fc3RyaW5nID0gW107XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNpcmNsZShyYWRpdXMpIHtcbiAgcmV0dXJuIFwibTAsXCIgKyByYWRpdXNcbiAgICAgICsgXCJhXCIgKyByYWRpdXMgKyBcIixcIiArIHJhZGl1cyArIFwiIDAgMSwxIDAsXCIgKyAtMiAqIHJhZGl1c1xuICAgICAgKyBcImFcIiArIHJhZGl1cyArIFwiLFwiICsgcmFkaXVzICsgXCIgMCAxLDEgMCxcIiArIDIgKiByYWRpdXNcbiAgICAgICsgXCJ6XCI7XG59XG4iLCJ2YXIgZTEwID0gTWF0aC5zcXJ0KDUwKSxcbiAgICBlNSA9IE1hdGguc3FydCgxMCksXG4gICAgZTIgPSBNYXRoLnNxcnQoMik7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgcmV2ZXJzZSxcbiAgICAgIGkgPSAtMSxcbiAgICAgIG4sXG4gICAgICB0aWNrcyxcbiAgICAgIHN0ZXA7XG5cbiAgc3RvcCA9ICtzdG9wLCBzdGFydCA9ICtzdGFydCwgY291bnQgPSArY291bnQ7XG4gIGlmIChzdGFydCA9PT0gc3RvcCAmJiBjb3VudCA+IDApIHJldHVybiBbc3RhcnRdO1xuICBpZiAocmV2ZXJzZSA9IHN0b3AgPCBzdGFydCkgbiA9IHN0YXJ0LCBzdGFydCA9IHN0b3AsIHN0b3AgPSBuO1xuICBpZiAoKHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkpID09PSAwIHx8ICFpc0Zpbml0ZShzdGVwKSkgcmV0dXJuIFtdO1xuXG4gIGlmIChzdGVwID4gMCkge1xuICAgIHN0YXJ0ID0gTWF0aC5jZWlsKHN0YXJ0IC8gc3RlcCk7XG4gICAgc3RvcCA9IE1hdGguZmxvb3Ioc3RvcCAvIHN0ZXApO1xuICAgIHRpY2tzID0gbmV3IEFycmF5KG4gPSBNYXRoLmNlaWwoc3RvcCAtIHN0YXJ0ICsgMSkpO1xuICAgIHdoaWxlICgrK2kgPCBuKSB0aWNrc1tpXSA9IChzdGFydCArIGkpICogc3RlcDtcbiAgfSBlbHNlIHtcbiAgICBzdGVwID0gLXN0ZXA7XG4gICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKTtcbiAgICBzdG9wID0gTWF0aC5mbG9vcihzdG9wICogc3RlcCk7XG4gICAgdGlja3MgPSBuZXcgQXJyYXkobiA9IE1hdGguY2VpbChzdG9wIC0gc3RhcnQgKyAxKSk7XG4gICAgd2hpbGUgKCsraSA8IG4pIHRpY2tzW2ldID0gKHN0YXJ0ICsgaSkgLyBzdGVwO1xuICB9XG5cbiAgaWYgKHJldmVyc2UpIHRpY2tzLnJldmVyc2UoKTtcblxuICByZXR1cm4gdGlja3M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcCA9IChzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgcG93ZXIgPSBNYXRoLmZsb29yKE1hdGgubG9nKHN0ZXApIC8gTWF0aC5MTjEwKSxcbiAgICAgIGVycm9yID0gc3RlcCAvIE1hdGgucG93KDEwLCBwb3dlcik7XG4gIHJldHVybiBwb3dlciA+PSAwXG4gICAgICA/IChlcnJvciA+PSBlMTAgPyAxMCA6IGVycm9yID49IGU1ID8gNSA6IGVycm9yID49IGUyID8gMiA6IDEpICogTWF0aC5wb3coMTAsIHBvd2VyKVxuICAgICAgOiAtTWF0aC5wb3coMTAsIC1wb3dlcikgLyAoZXJyb3IgPj0gZTEwID8gMTAgOiBlcnJvciA+PSBlNSA/IDUgOiBlcnJvciA+PSBlMiA/IDIgOiAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpY2tTdGVwKHN0YXJ0LCBzdG9wLCBjb3VudCkge1xuICB2YXIgc3RlcDAgPSBNYXRoLmFicyhzdG9wIC0gc3RhcnQpIC8gTWF0aC5tYXgoMCwgY291bnQpLFxuICAgICAgc3RlcDEgPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihNYXRoLmxvZyhzdGVwMCkgLyBNYXRoLkxOMTApKSxcbiAgICAgIGVycm9yID0gc3RlcDAgLyBzdGVwMTtcbiAgaWYgKGVycm9yID49IGUxMCkgc3RlcDEgKj0gMTA7XG4gIGVsc2UgaWYgKGVycm9yID49IGU1KSBzdGVwMSAqPSA1O1xuICBlbHNlIGlmIChlcnJvciA+PSBlMikgc3RlcDEgKj0gMjtcbiAgcmV0dXJuIHN0b3AgPCBzdGFydCA/IC1zdGVwMSA6IHN0ZXAxO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IGEgPj0gYiA/IDAgOiBOYU47XG59XG4iLCJpbXBvcnQgYXNjZW5kaW5nIGZyb20gXCIuL2FzY2VuZGluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihmKSB7XG4gIGxldCBkZWx0YSA9IGY7XG4gIGxldCBjb21wYXJlID0gZjtcblxuICBpZiAoZi5sZW5ndGggPT09IDEpIHtcbiAgICBkZWx0YSA9IChkLCB4KSA9PiBmKGQpIC0geDtcbiAgICBjb21wYXJlID0gYXNjZW5kaW5nQ29tcGFyYXRvcihmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxlZnQoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICB3aGlsZSAobG8gPCBoaSkge1xuICAgICAgY29uc3QgbWlkID0gKGxvICsgaGkpID4+PiAxO1xuICAgICAgaWYgKGNvbXBhcmUoYVttaWRdLCB4KSA8IDApIGxvID0gbWlkICsgMTtcbiAgICAgIGVsc2UgaGkgPSBtaWQ7XG4gICAgfVxuICAgIHJldHVybiBsbztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJpZ2h0KGEsIHgsIGxvLCBoaSkge1xuICAgIGlmIChsbyA9PSBudWxsKSBsbyA9IDA7XG4gICAgaWYgKGhpID09IG51bGwpIGhpID0gYS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvIDwgaGkpIHtcbiAgICAgIGNvbnN0IG1pZCA9IChsbyArIGhpKSA+Pj4gMTtcbiAgICAgIGlmIChjb21wYXJlKGFbbWlkXSwgeCkgPiAwKSBoaSA9IG1pZDtcbiAgICAgIGVsc2UgbG8gPSBtaWQgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gbG87XG4gIH1cblxuICBmdW5jdGlvbiBjZW50ZXIoYSwgeCwgbG8sIGhpKSB7XG4gICAgaWYgKGxvID09IG51bGwpIGxvID0gMDtcbiAgICBpZiAoaGkgPT0gbnVsbCkgaGkgPSBhLmxlbmd0aDtcbiAgICBjb25zdCBpID0gbGVmdChhLCB4LCBsbywgaGkgLSAxKTtcbiAgICByZXR1cm4gaSA+IGxvICYmIGRlbHRhKGFbaSAtIDFdLCB4KSA+IC1kZWx0YShhW2ldLCB4KSA/IGkgLSAxIDogaTtcbiAgfVxuXG4gIHJldHVybiB7bGVmdCwgY2VudGVyLCByaWdodH07XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZ0NvbXBhcmF0b3IoZikge1xuICByZXR1cm4gKGQsIHgpID0+IGFzY2VuZGluZyhmKGQpLCB4KTtcbn1cbiIsImltcG9ydCBhc2NlbmRpbmcgZnJvbSBcIi4vYXNjZW5kaW5nLmpzXCI7XG5pbXBvcnQgYmlzZWN0b3IgZnJvbSBcIi4vYmlzZWN0b3IuanNcIjtcbmltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbmNvbnN0IGFzY2VuZGluZ0Jpc2VjdCA9IGJpc2VjdG9yKGFzY2VuZGluZyk7XG5leHBvcnQgY29uc3QgYmlzZWN0UmlnaHQgPSBhc2NlbmRpbmdCaXNlY3QucmlnaHQ7XG5leHBvcnQgY29uc3QgYmlzZWN0TGVmdCA9IGFzY2VuZGluZ0Jpc2VjdC5sZWZ0O1xuZXhwb3J0IGNvbnN0IGJpc2VjdENlbnRlciA9IGJpc2VjdG9yKG51bWJlcikuY2VudGVyO1xuZXhwb3J0IGRlZmF1bHQgYmlzZWN0UmlnaHQ7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4ID09PSBudWxsID8gTmFOIDogK3g7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiogbnVtYmVycyh2YWx1ZXMsIHZhbHVlb2YpIHtcbiAgaWYgKHZhbHVlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IHZhbHVlIG9mIHZhbHVlcykge1xuICAgICAgaWYgKHZhbHVlICE9IG51bGwgJiYgKHZhbHVlID0gK3ZhbHVlKSA+PSB2YWx1ZSkge1xuICAgICAgICB5aWVsZCB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbGV0IGluZGV4ID0gLTE7XG4gICAgZm9yIChsZXQgdmFsdWUgb2YgdmFsdWVzKSB7XG4gICAgICBpZiAoKHZhbHVlID0gdmFsdWVvZih2YWx1ZSwgKytpbmRleCwgdmFsdWVzKSkgIT0gbnVsbCAmJiAodmFsdWUgPSArdmFsdWUpID49IHZhbHVlKSB7XG4gICAgICAgIHlpZWxkIHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29uc3RydWN0b3IsIGZhY3RvcnksIHByb3RvdHlwZSkge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBmYWN0b3J5LnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgcHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmQocGFyZW50LCBkZWZpbml0aW9uKSB7XG4gIHZhciBwcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHBhcmVudC5wcm90b3R5cGUpO1xuICBmb3IgKHZhciBrZXkgaW4gZGVmaW5pdGlvbikgcHJvdG90eXBlW2tleV0gPSBkZWZpbml0aW9uW2tleV07XG4gIHJldHVybiBwcm90b3R5cGU7XG59XG4iLCJpbXBvcnQgZGVmaW5lLCB7ZXh0ZW5kfSBmcm9tIFwiLi9kZWZpbmUuanNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIENvbG9yKCkge31cblxuZXhwb3J0IHZhciBkYXJrZXIgPSAwLjc7XG5leHBvcnQgdmFyIGJyaWdodGVyID0gMSAvIGRhcmtlcjtcblxudmFyIHJlSSA9IFwiXFxcXHMqKFsrLV0/XFxcXGQrKVxcXFxzKlwiLFxuICAgIHJlTiA9IFwiXFxcXHMqKFsrLV0/XFxcXGQqXFxcXC4/XFxcXGQrKD86W2VFXVsrLV0/XFxcXGQrKT8pXFxcXHMqXCIsXG4gICAgcmVQID0gXCJcXFxccyooWystXT9cXFxcZCpcXFxcLj9cXFxcZCsoPzpbZUVdWystXT9cXFxcZCspPyklXFxcXHMqXCIsXG4gICAgcmVIZXggPSAvXiMoWzAtOWEtZl17Myw4fSkkLyxcbiAgICByZVJnYkludGVnZXIgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVJLCByZUksIHJlSV0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYlBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXnJnYlxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUF0gKyBcIlxcXFwpJFwiKSxcbiAgICByZVJnYmFJbnRlZ2VyID0gbmV3IFJlZ0V4cChcIl5yZ2JhXFxcXChcIiArIFtyZUksIHJlSSwgcmVJLCByZU5dICsgXCJcXFxcKSRcIiksXG4gICAgcmVSZ2JhUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJecmdiYVxcXFwoXCIgKyBbcmVQLCByZVAsIHJlUCwgcmVOXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsUGVyY2VudCA9IG5ldyBSZWdFeHAoXCJeaHNsXFxcXChcIiArIFtyZU4sIHJlUCwgcmVQXSArIFwiXFxcXCkkXCIpLFxuICAgIHJlSHNsYVBlcmNlbnQgPSBuZXcgUmVnRXhwKFwiXmhzbGFcXFxcKFwiICsgW3JlTiwgcmVQLCByZVAsIHJlTl0gKyBcIlxcXFwpJFwiKTtcblxudmFyIG5hbWVkID0ge1xuICBhbGljZWJsdWU6IDB4ZjBmOGZmLFxuICBhbnRpcXVld2hpdGU6IDB4ZmFlYmQ3LFxuICBhcXVhOiAweDAwZmZmZixcbiAgYXF1YW1hcmluZTogMHg3ZmZmZDQsXG4gIGF6dXJlOiAweGYwZmZmZixcbiAgYmVpZ2U6IDB4ZjVmNWRjLFxuICBiaXNxdWU6IDB4ZmZlNGM0LFxuICBibGFjazogMHgwMDAwMDAsXG4gIGJsYW5jaGVkYWxtb25kOiAweGZmZWJjZCxcbiAgYmx1ZTogMHgwMDAwZmYsXG4gIGJsdWV2aW9sZXQ6IDB4OGEyYmUyLFxuICBicm93bjogMHhhNTJhMmEsXG4gIGJ1cmx5d29vZDogMHhkZWI4ODcsXG4gIGNhZGV0Ymx1ZTogMHg1ZjllYTAsXG4gIGNoYXJ0cmV1c2U6IDB4N2ZmZjAwLFxuICBjaG9jb2xhdGU6IDB4ZDI2OTFlLFxuICBjb3JhbDogMHhmZjdmNTAsXG4gIGNvcm5mbG93ZXJibHVlOiAweDY0OTVlZCxcbiAgY29ybnNpbGs6IDB4ZmZmOGRjLFxuICBjcmltc29uOiAweGRjMTQzYyxcbiAgY3lhbjogMHgwMGZmZmYsXG4gIGRhcmtibHVlOiAweDAwMDA4YixcbiAgZGFya2N5YW46IDB4MDA4YjhiLFxuICBkYXJrZ29sZGVucm9kOiAweGI4ODYwYixcbiAgZGFya2dyYXk6IDB4YTlhOWE5LFxuICBkYXJrZ3JlZW46IDB4MDA2NDAwLFxuICBkYXJrZ3JleTogMHhhOWE5YTksXG4gIGRhcmtraGFraTogMHhiZGI3NmIsXG4gIGRhcmttYWdlbnRhOiAweDhiMDA4YixcbiAgZGFya29saXZlZ3JlZW46IDB4NTU2YjJmLFxuICBkYXJrb3JhbmdlOiAweGZmOGMwMCxcbiAgZGFya29yY2hpZDogMHg5OTMyY2MsXG4gIGRhcmtyZWQ6IDB4OGIwMDAwLFxuICBkYXJrc2FsbW9uOiAweGU5OTY3YSxcbiAgZGFya3NlYWdyZWVuOiAweDhmYmM4ZixcbiAgZGFya3NsYXRlYmx1ZTogMHg0ODNkOGIsXG4gIGRhcmtzbGF0ZWdyYXk6IDB4MmY0ZjRmLFxuICBkYXJrc2xhdGVncmV5OiAweDJmNGY0ZixcbiAgZGFya3R1cnF1b2lzZTogMHgwMGNlZDEsXG4gIGRhcmt2aW9sZXQ6IDB4OTQwMGQzLFxuICBkZWVwcGluazogMHhmZjE0OTMsXG4gIGRlZXBza3libHVlOiAweDAwYmZmZixcbiAgZGltZ3JheTogMHg2OTY5NjksXG4gIGRpbWdyZXk6IDB4Njk2OTY5LFxuICBkb2RnZXJibHVlOiAweDFlOTBmZixcbiAgZmlyZWJyaWNrOiAweGIyMjIyMixcbiAgZmxvcmFsd2hpdGU6IDB4ZmZmYWYwLFxuICBmb3Jlc3RncmVlbjogMHgyMjhiMjIsXG4gIGZ1Y2hzaWE6IDB4ZmYwMGZmLFxuICBnYWluc2Jvcm86IDB4ZGNkY2RjLFxuICBnaG9zdHdoaXRlOiAweGY4ZjhmZixcbiAgZ29sZDogMHhmZmQ3MDAsXG4gIGdvbGRlbnJvZDogMHhkYWE1MjAsXG4gIGdyYXk6IDB4ODA4MDgwLFxuICBncmVlbjogMHgwMDgwMDAsXG4gIGdyZWVueWVsbG93OiAweGFkZmYyZixcbiAgZ3JleTogMHg4MDgwODAsXG4gIGhvbmV5ZGV3OiAweGYwZmZmMCxcbiAgaG90cGluazogMHhmZjY5YjQsXG4gIGluZGlhbnJlZDogMHhjZDVjNWMsXG4gIGluZGlnbzogMHg0YjAwODIsXG4gIGl2b3J5OiAweGZmZmZmMCxcbiAga2hha2k6IDB4ZjBlNjhjLFxuICBsYXZlbmRlcjogMHhlNmU2ZmEsXG4gIGxhdmVuZGVyYmx1c2g6IDB4ZmZmMGY1LFxuICBsYXduZ3JlZW46IDB4N2NmYzAwLFxuICBsZW1vbmNoaWZmb246IDB4ZmZmYWNkLFxuICBsaWdodGJsdWU6IDB4YWRkOGU2LFxuICBsaWdodGNvcmFsOiAweGYwODA4MCxcbiAgbGlnaHRjeWFuOiAweGUwZmZmZixcbiAgbGlnaHRnb2xkZW5yb2R5ZWxsb3c6IDB4ZmFmYWQyLFxuICBsaWdodGdyYXk6IDB4ZDNkM2QzLFxuICBsaWdodGdyZWVuOiAweDkwZWU5MCxcbiAgbGlnaHRncmV5OiAweGQzZDNkMyxcbiAgbGlnaHRwaW5rOiAweGZmYjZjMSxcbiAgbGlnaHRzYWxtb246IDB4ZmZhMDdhLFxuICBsaWdodHNlYWdyZWVuOiAweDIwYjJhYSxcbiAgbGlnaHRza3libHVlOiAweDg3Y2VmYSxcbiAgbGlnaHRzbGF0ZWdyYXk6IDB4Nzc4ODk5LFxuICBsaWdodHNsYXRlZ3JleTogMHg3Nzg4OTksXG4gIGxpZ2h0c3RlZWxibHVlOiAweGIwYzRkZSxcbiAgbGlnaHR5ZWxsb3c6IDB4ZmZmZmUwLFxuICBsaW1lOiAweDAwZmYwMCxcbiAgbGltZWdyZWVuOiAweDMyY2QzMixcbiAgbGluZW46IDB4ZmFmMGU2LFxuICBtYWdlbnRhOiAweGZmMDBmZixcbiAgbWFyb29uOiAweDgwMDAwMCxcbiAgbWVkaXVtYXF1YW1hcmluZTogMHg2NmNkYWEsXG4gIG1lZGl1bWJsdWU6IDB4MDAwMGNkLFxuICBtZWRpdW1vcmNoaWQ6IDB4YmE1NWQzLFxuICBtZWRpdW1wdXJwbGU6IDB4OTM3MGRiLFxuICBtZWRpdW1zZWFncmVlbjogMHgzY2IzNzEsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMHg3YjY4ZWUsXG4gIG1lZGl1bXNwcmluZ2dyZWVuOiAweDAwZmE5YSxcbiAgbWVkaXVtdHVycXVvaXNlOiAweDQ4ZDFjYyxcbiAgbWVkaXVtdmlvbGV0cmVkOiAweGM3MTU4NSxcbiAgbWlkbmlnaHRibHVlOiAweDE5MTk3MCxcbiAgbWludGNyZWFtOiAweGY1ZmZmYSxcbiAgbWlzdHlyb3NlOiAweGZmZTRlMSxcbiAgbW9jY2FzaW46IDB4ZmZlNGI1LFxuICBuYXZham93aGl0ZTogMHhmZmRlYWQsXG4gIG5hdnk6IDB4MDAwMDgwLFxuICBvbGRsYWNlOiAweGZkZjVlNixcbiAgb2xpdmU6IDB4ODA4MDAwLFxuICBvbGl2ZWRyYWI6IDB4NmI4ZTIzLFxuICBvcmFuZ2U6IDB4ZmZhNTAwLFxuICBvcmFuZ2VyZWQ6IDB4ZmY0NTAwLFxuICBvcmNoaWQ6IDB4ZGE3MGQ2LFxuICBwYWxlZ29sZGVucm9kOiAweGVlZThhYSxcbiAgcGFsZWdyZWVuOiAweDk4ZmI5OCxcbiAgcGFsZXR1cnF1b2lzZTogMHhhZmVlZWUsXG4gIHBhbGV2aW9sZXRyZWQ6IDB4ZGI3MDkzLFxuICBwYXBheWF3aGlwOiAweGZmZWZkNSxcbiAgcGVhY2hwdWZmOiAweGZmZGFiOSxcbiAgcGVydTogMHhjZDg1M2YsXG4gIHBpbms6IDB4ZmZjMGNiLFxuICBwbHVtOiAweGRkYTBkZCxcbiAgcG93ZGVyYmx1ZTogMHhiMGUwZTYsXG4gIHB1cnBsZTogMHg4MDAwODAsXG4gIHJlYmVjY2FwdXJwbGU6IDB4NjYzMzk5LFxuICByZWQ6IDB4ZmYwMDAwLFxuICByb3N5YnJvd246IDB4YmM4ZjhmLFxuICByb3lhbGJsdWU6IDB4NDE2OWUxLFxuICBzYWRkbGVicm93bjogMHg4YjQ1MTMsXG4gIHNhbG1vbjogMHhmYTgwNzIsXG4gIHNhbmR5YnJvd246IDB4ZjRhNDYwLFxuICBzZWFncmVlbjogMHgyZThiNTcsXG4gIHNlYXNoZWxsOiAweGZmZjVlZSxcbiAgc2llbm5hOiAweGEwNTIyZCxcbiAgc2lsdmVyOiAweGMwYzBjMCxcbiAgc2t5Ymx1ZTogMHg4N2NlZWIsXG4gIHNsYXRlYmx1ZTogMHg2YTVhY2QsXG4gIHNsYXRlZ3JheTogMHg3MDgwOTAsXG4gIHNsYXRlZ3JleTogMHg3MDgwOTAsXG4gIHNub3c6IDB4ZmZmYWZhLFxuICBzcHJpbmdncmVlbjogMHgwMGZmN2YsXG4gIHN0ZWVsYmx1ZTogMHg0NjgyYjQsXG4gIHRhbjogMHhkMmI0OGMsXG4gIHRlYWw6IDB4MDA4MDgwLFxuICB0aGlzdGxlOiAweGQ4YmZkOCxcbiAgdG9tYXRvOiAweGZmNjM0NyxcbiAgdHVycXVvaXNlOiAweDQwZTBkMCxcbiAgdmlvbGV0OiAweGVlODJlZSxcbiAgd2hlYXQ6IDB4ZjVkZWIzLFxuICB3aGl0ZTogMHhmZmZmZmYsXG4gIHdoaXRlc21va2U6IDB4ZjVmNWY1LFxuICB5ZWxsb3c6IDB4ZmZmZjAwLFxuICB5ZWxsb3dncmVlbjogMHg5YWNkMzJcbn07XG5cbmRlZmluZShDb2xvciwgY29sb3IsIHtcbiAgY29weTogZnVuY3Rpb24oY2hhbm5lbHMpIHtcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXcgdGhpcy5jb25zdHJ1Y3RvciwgdGhpcywgY2hhbm5lbHMpO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucmdiKCkuZGlzcGxheWFibGUoKTtcbiAgfSxcbiAgaGV4OiBjb2xvcl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogY29sb3JfZm9ybWF0SGV4LFxuICBmb3JtYXRIc2w6IGNvbG9yX2Zvcm1hdEhzbCxcbiAgZm9ybWF0UmdiOiBjb2xvcl9mb3JtYXRSZ2IsXG4gIHRvU3RyaW5nOiBjb2xvcl9mb3JtYXRSZ2Jcbn0pO1xuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIZXgoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdEhleCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRIc2woKSB7XG4gIHJldHVybiBoc2xDb252ZXJ0KHRoaXMpLmZvcm1hdEhzbCgpO1xufVxuXG5mdW5jdGlvbiBjb2xvcl9mb3JtYXRSZ2IoKSB7XG4gIHJldHVybiB0aGlzLnJnYigpLmZvcm1hdFJnYigpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb2xvcihmb3JtYXQpIHtcbiAgdmFyIG0sIGw7XG4gIGZvcm1hdCA9IChmb3JtYXQgKyBcIlwiKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIChtID0gcmVIZXguZXhlYyhmb3JtYXQpKSA/IChsID0gbVsxXS5sZW5ndGgsIG0gPSBwYXJzZUludChtWzFdLCAxNiksIGwgPT09IDYgPyByZ2JuKG0pIC8vICNmZjAwMDBcbiAgICAgIDogbCA9PT0gMyA/IG5ldyBSZ2IoKG0gPj4gOCAmIDB4ZikgfCAobSA+PiA0ICYgMHhmMCksIChtID4+IDQgJiAweGYpIHwgKG0gJiAweGYwKSwgKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSwgMSkgLy8gI2YwMFxuICAgICAgOiBsID09PSA4ID8gcmdiYShtID4+IDI0ICYgMHhmZiwgbSA+PiAxNiAmIDB4ZmYsIG0gPj4gOCAmIDB4ZmYsIChtICYgMHhmZikgLyAweGZmKSAvLyAjZmYwMDAwMDBcbiAgICAgIDogbCA9PT0gNCA/IHJnYmEoKG0gPj4gMTIgJiAweGYpIHwgKG0gPj4gOCAmIDB4ZjApLCAobSA+PiA4ICYgMHhmKSB8IChtID4+IDQgJiAweGYwKSwgKG0gPj4gNCAmIDB4ZikgfCAobSAmIDB4ZjApLCAoKChtICYgMHhmKSA8PCA0KSB8IChtICYgMHhmKSkgLyAweGZmKSAvLyAjZjAwMFxuICAgICAgOiBudWxsKSAvLyBpbnZhbGlkIGhleFxuICAgICAgOiAobSA9IHJlUmdiSW50ZWdlci5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdLCBtWzJdLCBtWzNdLCAxKSAvLyByZ2IoMjU1LCAwLCAwKVxuICAgICAgOiAobSA9IHJlUmdiUGVyY2VudC5leGVjKGZvcm1hdCkpID8gbmV3IFJnYihtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCAxKSAvLyByZ2IoMTAwJSwgMCUsIDAlKVxuICAgICAgOiAobSA9IHJlUmdiYUludGVnZXIuZXhlYyhmb3JtYXQpKSA/IHJnYmEobVsxXSwgbVsyXSwgbVszXSwgbVs0XSkgLy8gcmdiYSgyNTUsIDAsIDAsIDEpXG4gICAgICA6IChtID0gcmVSZ2JhUGVyY2VudC5leGVjKGZvcm1hdCkpID8gcmdiYShtWzFdICogMjU1IC8gMTAwLCBtWzJdICogMjU1IC8gMTAwLCBtWzNdICogMjU1IC8gMTAwLCBtWzRdKSAvLyByZ2IoMTAwJSwgMCUsIDAlLCAxKVxuICAgICAgOiAobSA9IHJlSHNsUGVyY2VudC5leGVjKGZvcm1hdCkpID8gaHNsYShtWzFdLCBtWzJdIC8gMTAwLCBtWzNdIC8gMTAwLCAxKSAvLyBoc2woMTIwLCA1MCUsIDUwJSlcbiAgICAgIDogKG0gPSByZUhzbGFQZXJjZW50LmV4ZWMoZm9ybWF0KSkgPyBoc2xhKG1bMV0sIG1bMl0gLyAxMDAsIG1bM10gLyAxMDAsIG1bNF0pIC8vIGhzbGEoMTIwLCA1MCUsIDUwJSwgMSlcbiAgICAgIDogbmFtZWQuaGFzT3duUHJvcGVydHkoZm9ybWF0KSA/IHJnYm4obmFtZWRbZm9ybWF0XSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgICAgIDogZm9ybWF0ID09PSBcInRyYW5zcGFyZW50XCIgPyBuZXcgUmdiKE5hTiwgTmFOLCBOYU4sIDApXG4gICAgICA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIHJnYm4obikge1xuICByZXR1cm4gbmV3IFJnYihuID4+IDE2ICYgMHhmZiwgbiA+PiA4ICYgMHhmZiwgbiAmIDB4ZmYsIDEpO1xufVxuXG5mdW5jdGlvbiByZ2JhKHIsIGcsIGIsIGEpIHtcbiAgaWYgKGEgPD0gMCkgciA9IGcgPSBiID0gTmFOO1xuICByZXR1cm4gbmV3IFJnYihyLCBnLCBiLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJnYkNvbnZlcnQobykge1xuICBpZiAoIShvIGluc3RhbmNlb2YgQ29sb3IpKSBvID0gY29sb3Iobyk7XG4gIGlmICghbykgcmV0dXJuIG5ldyBSZ2I7XG4gIG8gPSBvLnJnYigpO1xuICByZXR1cm4gbmV3IFJnYihvLnIsIG8uZywgby5iLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmdiKHIsIGcsIGIsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyByZ2JDb252ZXJ0KHIpIDogbmV3IFJnYihyLCBnLCBiLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBSZ2IociwgZywgYiwgb3BhY2l0eSkge1xuICB0aGlzLnIgPSArcjtcbiAgdGhpcy5nID0gK2c7XG4gIHRoaXMuYiA9ICtiO1xuICB0aGlzLm9wYWNpdHkgPSArb3BhY2l0eTtcbn1cblxuZGVmaW5lKFJnYiwgcmdiLCBleHRlbmQoQ29sb3IsIHtcbiAgYnJpZ2h0ZXI6IGZ1bmN0aW9uKGspIHtcbiAgICBrID0gayA9PSBudWxsID8gYnJpZ2h0ZXIgOiBNYXRoLnBvdyhicmlnaHRlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBSZ2IodGhpcy5yICogaywgdGhpcy5nICogaywgdGhpcy5iICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgcmdiOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgZGlzcGxheWFibGU6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAoLTAuNSA8PSB0aGlzLnIgJiYgdGhpcy5yIDwgMjU1LjUpXG4gICAgICAgICYmICgtMC41IDw9IHRoaXMuZyAmJiB0aGlzLmcgPCAyNTUuNSlcbiAgICAgICAgJiYgKC0wLjUgPD0gdGhpcy5iICYmIHRoaXMuYiA8IDI1NS41KVxuICAgICAgICAmJiAoMCA8PSB0aGlzLm9wYWNpdHkgJiYgdGhpcy5vcGFjaXR5IDw9IDEpO1xuICB9LFxuICBoZXg6IHJnYl9mb3JtYXRIZXgsIC8vIERlcHJlY2F0ZWQhIFVzZSBjb2xvci5mb3JtYXRIZXguXG4gIGZvcm1hdEhleDogcmdiX2Zvcm1hdEhleCxcbiAgZm9ybWF0UmdiOiByZ2JfZm9ybWF0UmdiLFxuICB0b1N0cmluZzogcmdiX2Zvcm1hdFJnYlxufSkpO1xuXG5mdW5jdGlvbiByZ2JfZm9ybWF0SGV4KCkge1xuICByZXR1cm4gXCIjXCIgKyBoZXgodGhpcy5yKSArIGhleCh0aGlzLmcpICsgaGV4KHRoaXMuYik7XG59XG5cbmZ1bmN0aW9uIHJnYl9mb3JtYXRSZ2IoKSB7XG4gIHZhciBhID0gdGhpcy5vcGFjaXR5OyBhID0gaXNOYU4oYSkgPyAxIDogTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgYSkpO1xuICByZXR1cm4gKGEgPT09IDEgPyBcInJnYihcIiA6IFwicmdiYShcIilcbiAgICAgICsgTWF0aC5tYXgoMCwgTWF0aC5taW4oMjU1LCBNYXRoLnJvdW5kKHRoaXMucikgfHwgMCkpICsgXCIsIFwiXG4gICAgICArIE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh0aGlzLmcpIHx8IDApKSArIFwiLCBcIlxuICAgICAgKyBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQodGhpcy5iKSB8fCAwKSlcbiAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG59XG5cbmZ1bmN0aW9uIGhleCh2YWx1ZSkge1xuICB2YWx1ZSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgTWF0aC5yb3VuZCh2YWx1ZSkgfHwgMCkpO1xuICByZXR1cm4gKHZhbHVlIDwgMTYgPyBcIjBcIiA6IFwiXCIpICsgdmFsdWUudG9TdHJpbmcoMTYpO1xufVxuXG5mdW5jdGlvbiBoc2xhKGgsIHMsIGwsIGEpIHtcbiAgaWYgKGEgPD0gMCkgaCA9IHMgPSBsID0gTmFOO1xuICBlbHNlIGlmIChsIDw9IDAgfHwgbCA+PSAxKSBoID0gcyA9IE5hTjtcbiAgZWxzZSBpZiAocyA8PSAwKSBoID0gTmFOO1xuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhzbENvbnZlcnQobykge1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG5ldyBIc2woby5oLCBvLnMsIG8ubCwgby5vcGFjaXR5KTtcbiAgaWYgKCEobyBpbnN0YW5jZW9mIENvbG9yKSkgbyA9IGNvbG9yKG8pO1xuICBpZiAoIW8pIHJldHVybiBuZXcgSHNsO1xuICBpZiAobyBpbnN0YW5jZW9mIEhzbCkgcmV0dXJuIG87XG4gIG8gPSBvLnJnYigpO1xuICB2YXIgciA9IG8uciAvIDI1NSxcbiAgICAgIGcgPSBvLmcgLyAyNTUsXG4gICAgICBiID0gby5iIC8gMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGggPSBOYU4sXG4gICAgICBzID0gbWF4IC0gbWluLFxuICAgICAgbCA9IChtYXggKyBtaW4pIC8gMjtcbiAgaWYgKHMpIHtcbiAgICBpZiAociA9PT0gbWF4KSBoID0gKGcgLSBiKSAvIHMgKyAoZyA8IGIpICogNjtcbiAgICBlbHNlIGlmIChnID09PSBtYXgpIGggPSAoYiAtIHIpIC8gcyArIDI7XG4gICAgZWxzZSBoID0gKHIgLSBnKSAvIHMgKyA0O1xuICAgIHMgLz0gbCA8IDAuNSA/IG1heCArIG1pbiA6IDIgLSBtYXggLSBtaW47XG4gICAgaCAqPSA2MDtcbiAgfSBlbHNlIHtcbiAgICBzID0gbCA+IDAgJiYgbCA8IDEgPyAwIDogaDtcbiAgfVxuICByZXR1cm4gbmV3IEhzbChoLCBzLCBsLCBvLm9wYWNpdHkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaHNsKGgsIHMsIGwsIG9wYWNpdHkpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBoc2xDb252ZXJ0KGgpIDogbmV3IEhzbChoLCBzLCBsLCBvcGFjaXR5ID09IG51bGwgPyAxIDogb3BhY2l0eSk7XG59XG5cbmZ1bmN0aW9uIEhzbChoLCBzLCBsLCBvcGFjaXR5KSB7XG4gIHRoaXMuaCA9ICtoO1xuICB0aGlzLnMgPSArcztcbiAgdGhpcy5sID0gK2w7XG4gIHRoaXMub3BhY2l0eSA9ICtvcGFjaXR5O1xufVxuXG5kZWZpbmUoSHNsLCBoc2wsIGV4dGVuZChDb2xvciwge1xuICBicmlnaHRlcjogZnVuY3Rpb24oaykge1xuICAgIGsgPSBrID09IG51bGwgPyBicmlnaHRlciA6IE1hdGgucG93KGJyaWdodGVyLCBrKTtcbiAgICByZXR1cm4gbmV3IEhzbCh0aGlzLmgsIHRoaXMucywgdGhpcy5sICogaywgdGhpcy5vcGFjaXR5KTtcbiAgfSxcbiAgZGFya2VyOiBmdW5jdGlvbihrKSB7XG4gICAgayA9IGsgPT0gbnVsbCA/IGRhcmtlciA6IE1hdGgucG93KGRhcmtlciwgayk7XG4gICAgcmV0dXJuIG5ldyBIc2wodGhpcy5oLCB0aGlzLnMsIHRoaXMubCAqIGssIHRoaXMub3BhY2l0eSk7XG4gIH0sXG4gIHJnYjogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGggPSB0aGlzLmggJSAzNjAgKyAodGhpcy5oIDwgMCkgKiAzNjAsXG4gICAgICAgIHMgPSBpc05hTihoKSB8fCBpc05hTih0aGlzLnMpID8gMCA6IHRoaXMucyxcbiAgICAgICAgbCA9IHRoaXMubCxcbiAgICAgICAgbTIgPSBsICsgKGwgPCAwLjUgPyBsIDogMSAtIGwpICogcyxcbiAgICAgICAgbTEgPSAyICogbCAtIG0yO1xuICAgIHJldHVybiBuZXcgUmdiKFxuICAgICAgaHNsMnJnYihoID49IDI0MCA/IGggLSAyNDAgOiBoICsgMTIwLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoLCBtMSwgbTIpLFxuICAgICAgaHNsMnJnYihoIDwgMTIwID8gaCArIDI0MCA6IGggLSAxMjAsIG0xLCBtMiksXG4gICAgICB0aGlzLm9wYWNpdHlcbiAgICApO1xuICB9LFxuICBkaXNwbGF5YWJsZTogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuICgwIDw9IHRoaXMucyAmJiB0aGlzLnMgPD0gMSB8fCBpc05hTih0aGlzLnMpKVxuICAgICAgICAmJiAoMCA8PSB0aGlzLmwgJiYgdGhpcy5sIDw9IDEpXG4gICAgICAgICYmICgwIDw9IHRoaXMub3BhY2l0eSAmJiB0aGlzLm9wYWNpdHkgPD0gMSk7XG4gIH0sXG4gIGZvcm1hdEhzbDogZnVuY3Rpb24oKSB7XG4gICAgdmFyIGEgPSB0aGlzLm9wYWNpdHk7IGEgPSBpc05hTihhKSA/IDEgOiBNYXRoLm1heCgwLCBNYXRoLm1pbigxLCBhKSk7XG4gICAgcmV0dXJuIChhID09PSAxID8gXCJoc2woXCIgOiBcImhzbGEoXCIpXG4gICAgICAgICsgKHRoaXMuaCB8fCAwKSArIFwiLCBcIlxuICAgICAgICArICh0aGlzLnMgfHwgMCkgKiAxMDAgKyBcIiUsIFwiXG4gICAgICAgICsgKHRoaXMubCB8fCAwKSAqIDEwMCArIFwiJVwiXG4gICAgICAgICsgKGEgPT09IDEgPyBcIilcIiA6IFwiLCBcIiArIGEgKyBcIilcIik7XG4gIH1cbn0pKTtcblxuLyogRnJvbSBGdkQgMTMuMzcsIENTUyBDb2xvciBNb2R1bGUgTGV2ZWwgMyAqL1xuZnVuY3Rpb24gaHNsMnJnYihoLCBtMSwgbTIpIHtcbiAgcmV0dXJuIChoIDwgNjAgPyBtMSArIChtMiAtIG0xKSAqIGggLyA2MFxuICAgICAgOiBoIDwgMTgwID8gbTJcbiAgICAgIDogaCA8IDI0MCA/IG0xICsgKG0yIC0gbTEpICogKDI0MCAtIGgpIC8gNjBcbiAgICAgIDogbTEpICogMjU1O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGJhc2lzKHQxLCB2MCwgdjEsIHYyLCB2Mykge1xuICB2YXIgdDIgPSB0MSAqIHQxLCB0MyA9IHQyICogdDE7XG4gIHJldHVybiAoKDEgLSAzICogdDEgKyAzICogdDIgLSB0MykgKiB2MFxuICAgICAgKyAoNCAtIDYgKiB0MiArIDMgKiB0MykgKiB2MVxuICAgICAgKyAoMSArIDMgKiB0MSArIDMgKiB0MiAtIDMgKiB0MykgKiB2MlxuICAgICAgKyB0MyAqIHYzKSAvIDY7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGggLSAxO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdCA8PSAwID8gKHQgPSAwKSA6IHQgPj0gMSA/ICh0ID0gMSwgbiAtIDEpIDogTWF0aC5mbG9vcih0ICogbiksXG4gICAgICAgIHYxID0gdmFsdWVzW2ldLFxuICAgICAgICB2MiA9IHZhbHVlc1tpICsgMV0sXG4gICAgICAgIHYwID0gaSA+IDAgPyB2YWx1ZXNbaSAtIDFdIDogMiAqIHYxIC0gdjIsXG4gICAgICAgIHYzID0gaSA8IG4gLSAxID8gdmFsdWVzW2kgKyAyXSA6IDIgKiB2MiAtIHYxO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IHggPT4gKCkgPT4geDtcbiIsImltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBsaW5lYXIoYSwgZCkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHJldHVybiBhICsgdCAqIGQ7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGV4cG9uZW50aWFsKGEsIGIsIHkpIHtcbiAgcmV0dXJuIGEgPSBNYXRoLnBvdyhhLCB5KSwgYiA9IE1hdGgucG93KGIsIHkpIC0gYSwgeSA9IDEgLyB5LCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucG93KGEgKyB0ICogYiwgeSk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBodWUoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkID4gMTgwIHx8IGQgPCAtMTgwID8gZCAtIDM2MCAqIE1hdGgucm91bmQoZCAvIDM2MCkgOiBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2FtbWEoeSkge1xuICByZXR1cm4gKHkgPSAreSkgPT09IDEgPyBub2dhbW1hIDogZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiIC0gYSA/IGV4cG9uZW50aWFsKGEsIGIsIHkpIDogY29uc3RhbnQoaXNOYU4oYSkgPyBiIDogYSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vZ2FtbWEoYSwgYikge1xuICB2YXIgZCA9IGIgLSBhO1xuICByZXR1cm4gZCA/IGxpbmVhcihhLCBkKSA6IGNvbnN0YW50KGlzTmFOKGEpID8gYiA6IGEpO1xufVxuIiwiaW1wb3J0IHtyZ2IgYXMgY29sb3JSZ2J9IGZyb20gXCJkMy1jb2xvclwiO1xuaW1wb3J0IGJhc2lzIGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5pbXBvcnQgYmFzaXNDbG9zZWQgZnJvbSBcIi4vYmFzaXNDbG9zZWQuanNcIjtcbmltcG9ydCBub2dhbW1hLCB7Z2FtbWF9IGZyb20gXCIuL2NvbG9yLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiByZ2JHYW1tYSh5KSB7XG4gIHZhciBjb2xvciA9IGdhbW1hKHkpO1xuXG4gIGZ1bmN0aW9uIHJnYihzdGFydCwgZW5kKSB7XG4gICAgdmFyIHIgPSBjb2xvcigoc3RhcnQgPSBjb2xvclJnYihzdGFydCkpLnIsIChlbmQgPSBjb2xvclJnYihlbmQpKS5yKSxcbiAgICAgICAgZyA9IGNvbG9yKHN0YXJ0LmcsIGVuZC5nKSxcbiAgICAgICAgYiA9IGNvbG9yKHN0YXJ0LmIsIGVuZC5iKSxcbiAgICAgICAgb3BhY2l0eSA9IG5vZ2FtbWEoc3RhcnQub3BhY2l0eSwgZW5kLm9wYWNpdHkpO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBzdGFydC5yID0gcih0KTtcbiAgICAgIHN0YXJ0LmcgPSBnKHQpO1xuICAgICAgc3RhcnQuYiA9IGIodCk7XG4gICAgICBzdGFydC5vcGFjaXR5ID0gb3BhY2l0eSh0KTtcbiAgICAgIHJldHVybiBzdGFydCArIFwiXCI7XG4gICAgfTtcbiAgfVxuXG4gIHJnYi5nYW1tYSA9IHJnYkdhbW1hO1xuXG4gIHJldHVybiByZ2I7XG59KSgxKTtcblxuZnVuY3Rpb24gcmdiU3BsaW5lKHNwbGluZSkge1xuICByZXR1cm4gZnVuY3Rpb24oY29sb3JzKSB7XG4gICAgdmFyIG4gPSBjb2xvcnMubGVuZ3RoLFxuICAgICAgICByID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBnID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBiID0gbmV3IEFycmF5KG4pLFxuICAgICAgICBpLCBjb2xvcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBjb2xvciA9IGNvbG9yUmdiKGNvbG9yc1tpXSk7XG4gICAgICByW2ldID0gY29sb3IuciB8fCAwO1xuICAgICAgZ1tpXSA9IGNvbG9yLmcgfHwgMDtcbiAgICAgIGJbaV0gPSBjb2xvci5iIHx8IDA7XG4gICAgfVxuICAgIHIgPSBzcGxpbmUocik7XG4gICAgZyA9IHNwbGluZShnKTtcbiAgICBiID0gc3BsaW5lKGIpO1xuICAgIGNvbG9yLm9wYWNpdHkgPSAxO1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICBjb2xvci5yID0gcih0KTtcbiAgICAgIGNvbG9yLmcgPSBnKHQpO1xuICAgICAgY29sb3IuYiA9IGIodCk7XG4gICAgICByZXR1cm4gY29sb3IgKyBcIlwiO1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydCB2YXIgcmdiQmFzaXMgPSByZ2JTcGxpbmUoYmFzaXMpO1xuZXhwb3J0IHZhciByZ2JCYXNpc0Nsb3NlZCA9IHJnYlNwbGluZShiYXNpc0Nsb3NlZCk7XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIChpc051bWJlckFycmF5KGIpID8gbnVtYmVyQXJyYXkgOiBnZW5lcmljQXJyYXkpKGEsIGIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJpY0FycmF5KGEsIGIpIHtcbiAgdmFyIG5iID0gYiA/IGIubGVuZ3RoIDogMCxcbiAgICAgIG5hID0gYSA/IE1hdGgubWluKG5iLCBhLmxlbmd0aCkgOiAwLFxuICAgICAgeCA9IG5ldyBBcnJheShuYSksXG4gICAgICBjID0gbmV3IEFycmF5KG5iKSxcbiAgICAgIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5hOyArK2kpIHhbaV0gPSB2YWx1ZShhW2ldLCBiW2ldKTtcbiAgZm9yICg7IGkgPCBuYjsgKytpKSBjW2ldID0gYltpXTtcblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuYTsgKytpKSBjW2ldID0geFtpXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZTtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGQuc2V0VGltZShhICogKDEgLSB0KSArIGIgKiB0KSwgZDtcbiAgfTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGEgKiAoMSAtIHQpICsgYiAqIHQ7XG4gIH07XG59XG4iLCJpbXBvcnQgdmFsdWUgZnJvbSBcIi4vdmFsdWUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYSwgYikge1xuICB2YXIgaSA9IHt9LFxuICAgICAgYyA9IHt9LFxuICAgICAgaztcblxuICBpZiAoYSA9PT0gbnVsbCB8fCB0eXBlb2YgYSAhPT0gXCJvYmplY3RcIikgYSA9IHt9O1xuICBpZiAoYiA9PT0gbnVsbCB8fCB0eXBlb2YgYiAhPT0gXCJvYmplY3RcIikgYiA9IHt9O1xuXG4gIGZvciAoayBpbiBiKSB7XG4gICAgaWYgKGsgaW4gYSkge1xuICAgICAgaVtrXSA9IHZhbHVlKGFba10sIGJba10pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjW2tdID0gYltrXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoayBpbiBpKSBjW2tdID0gaVtrXSh0KTtcbiAgICByZXR1cm4gYztcbiAgfTtcbn1cbiIsImltcG9ydCB7YmFzaXN9IGZyb20gXCIuL2Jhc2lzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlcykge1xuICB2YXIgbiA9IHZhbHVlcy5sZW5ndGg7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdmFyIGkgPSBNYXRoLmZsb29yKCgodCAlPSAxKSA8IDAgPyArK3QgOiB0KSAqIG4pLFxuICAgICAgICB2MCA9IHZhbHVlc1soaSArIG4gLSAxKSAlIG5dLFxuICAgICAgICB2MSA9IHZhbHVlc1tpICUgbl0sXG4gICAgICAgIHYyID0gdmFsdWVzWyhpICsgMSkgJSBuXSxcbiAgICAgICAgdjMgPSB2YWx1ZXNbKGkgKyAyKSAlIG5dO1xuICAgIHJldHVybiBiYXNpcygodCAtIGkgLyBuKSAqIG4sIHYwLCB2MSwgdjIsIHYzKTtcbiAgfTtcbn1cbiIsImltcG9ydCBudW1iZXIgZnJvbSBcIi4vbnVtYmVyLmpzXCI7XG5cbnZhciByZUEgPSAvWy0rXT8oPzpcXGQrXFwuP1xcZCp8XFwuP1xcZCspKD86W2VFXVstK10/XFxkKyk/L2csXG4gICAgcmVCID0gbmV3IFJlZ0V4cChyZUEuc291cmNlLCBcImdcIik7XG5cbmZ1bmN0aW9uIHplcm8oYikge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGI7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9uZShiKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIGIodCkgKyBcIlwiO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIHZhciBiaSA9IHJlQS5sYXN0SW5kZXggPSByZUIubGFzdEluZGV4ID0gMCwgLy8gc2NhbiBpbmRleCBmb3IgbmV4dCBudW1iZXIgaW4gYlxuICAgICAgYW0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYVxuICAgICAgYm0sIC8vIGN1cnJlbnQgbWF0Y2ggaW4gYlxuICAgICAgYnMsIC8vIHN0cmluZyBwcmVjZWRpbmcgY3VycmVudCBudW1iZXIgaW4gYiwgaWYgYW55XG4gICAgICBpID0gLTEsIC8vIGluZGV4IGluIHNcbiAgICAgIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICBxID0gW107IC8vIG51bWJlciBpbnRlcnBvbGF0b3JzXG5cbiAgLy8gQ29lcmNlIGlucHV0cyB0byBzdHJpbmdzLlxuICBhID0gYSArIFwiXCIsIGIgPSBiICsgXCJcIjtcblxuICAvLyBJbnRlcnBvbGF0ZSBwYWlycyBvZiBudW1iZXJzIGluIGEgJiBiLlxuICB3aGlsZSAoKGFtID0gcmVBLmV4ZWMoYSkpXG4gICAgICAmJiAoYm0gPSByZUIuZXhlYyhiKSkpIHtcbiAgICBpZiAoKGJzID0gYm0uaW5kZXgpID4gYmkpIHsgLy8gYSBzdHJpbmcgcHJlY2VkZXMgdGhlIG5leHQgbnVtYmVyIGluIGJcbiAgICAgIGJzID0gYi5zbGljZShiaSwgYnMpO1xuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJzO1xuICAgIH1cbiAgICBpZiAoKGFtID0gYW1bMF0pID09PSAoYm0gPSBibVswXSkpIHsgLy8gbnVtYmVycyBpbiBhICYgYiBtYXRjaFxuICAgICAgaWYgKHNbaV0pIHNbaV0gKz0gYm07IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgICBlbHNlIHNbKytpXSA9IGJtO1xuICAgIH0gZWxzZSB7IC8vIGludGVycG9sYXRlIG5vbi1tYXRjaGluZyBudW1iZXJzXG4gICAgICBzWysraV0gPSBudWxsO1xuICAgICAgcS5wdXNoKHtpOiBpLCB4OiBudW1iZXIoYW0sIGJtKX0pO1xuICAgIH1cbiAgICBiaSA9IHJlQi5sYXN0SW5kZXg7XG4gIH1cblxuICAvLyBBZGQgcmVtYWlucyBvZiBiLlxuICBpZiAoYmkgPCBiLmxlbmd0aCkge1xuICAgIGJzID0gYi5zbGljZShiaSk7XG4gICAgaWYgKHNbaV0pIHNbaV0gKz0gYnM7IC8vIGNvYWxlc2NlIHdpdGggcHJldmlvdXMgc3RyaW5nXG4gICAgZWxzZSBzWysraV0gPSBicztcbiAgfVxuXG4gIC8vIFNwZWNpYWwgb3B0aW1pemF0aW9uIGZvciBvbmx5IGEgc2luZ2xlIG1hdGNoLlxuICAvLyBPdGhlcndpc2UsIGludGVycG9sYXRlIGVhY2ggb2YgdGhlIG51bWJlcnMgYW5kIHJlam9pbiB0aGUgc3RyaW5nLlxuICByZXR1cm4gcy5sZW5ndGggPCAyID8gKHFbMF1cbiAgICAgID8gb25lKHFbMF0ueClcbiAgICAgIDogemVybyhiKSlcbiAgICAgIDogKGIgPSBxLmxlbmd0aCwgZnVuY3Rpb24odCkge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBvOyBpIDwgYjsgKytpKSBzWyhvID0gcVtpXSkuaV0gPSBvLngodCk7XG4gICAgICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICAgICAgfSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihhLCBiKSB7XG4gIGlmICghYikgYiA9IFtdO1xuICB2YXIgbiA9IGEgPyBNYXRoLm1pbihiLmxlbmd0aCwgYS5sZW5ndGgpIDogMCxcbiAgICAgIGMgPSBiLnNsaWNlKCksXG4gICAgICBpO1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIGNbaV0gPSBhW2ldICogKDEgLSB0KSArIGJbaV0gKiB0O1xuICAgIHJldHVybiBjO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJBcnJheSh4KSB7XG4gIHJldHVybiBBcnJheUJ1ZmZlci5pc1ZpZXcoeCkgJiYgISh4IGluc3RhbmNlb2YgRGF0YVZpZXcpO1xufVxuIiwiaW1wb3J0IHtjb2xvcn0gZnJvbSBcImQzLWNvbG9yXCI7XG5pbXBvcnQgcmdiIGZyb20gXCIuL3JnYi5qc1wiO1xuaW1wb3J0IHtnZW5lcmljQXJyYXl9IGZyb20gXCIuL2FycmF5LmpzXCI7XG5pbXBvcnQgZGF0ZSBmcm9tIFwiLi9kYXRlLmpzXCI7XG5pbXBvcnQgbnVtYmVyIGZyb20gXCIuL251bWJlci5qc1wiO1xuaW1wb3J0IG9iamVjdCBmcm9tIFwiLi9vYmplY3QuanNcIjtcbmltcG9ydCBzdHJpbmcgZnJvbSBcIi4vc3RyaW5nLmpzXCI7XG5pbXBvcnQgY29uc3RhbnQgZnJvbSBcIi4vY29uc3RhbnQuanNcIjtcbmltcG9ydCBudW1iZXJBcnJheSwge2lzTnVtYmVyQXJyYXl9IGZyb20gXCIuL251bWJlckFycmF5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIHQgPSB0eXBlb2YgYiwgYztcbiAgcmV0dXJuIGIgPT0gbnVsbCB8fCB0ID09PSBcImJvb2xlYW5cIiA/IGNvbnN0YW50KGIpXG4gICAgICA6ICh0ID09PSBcIm51bWJlclwiID8gbnVtYmVyXG4gICAgICA6IHQgPT09IFwic3RyaW5nXCIgPyAoKGMgPSBjb2xvcihiKSkgPyAoYiA9IGMsIHJnYikgOiBzdHJpbmcpXG4gICAgICA6IGIgaW5zdGFuY2VvZiBjb2xvciA/IHJnYlxuICAgICAgOiBiIGluc3RhbmNlb2YgRGF0ZSA/IGRhdGVcbiAgICAgIDogaXNOdW1iZXJBcnJheShiKSA/IG51bWJlckFycmF5XG4gICAgICA6IEFycmF5LmlzQXJyYXkoYikgPyBnZW5lcmljQXJyYXlcbiAgICAgIDogdHlwZW9mIGIudmFsdWVPZiAhPT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBiLnRvU3RyaW5nICE9PSBcImZ1bmN0aW9uXCIgfHwgaXNOYU4oYikgPyBvYmplY3RcbiAgICAgIDogbnVtYmVyKShhLCBiKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgcmV0dXJuIGEgPSArYSwgYiA9ICtiLCBmdW5jdGlvbih0KSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoYSAqICgxIC0gdCkgKyBiICogdCk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBudW1iZXIoeCkge1xuICByZXR1cm4gK3g7XG59XG4iLCJpbXBvcnQge2Jpc2VjdH0gZnJvbSBcImQzLWFycmF5XCI7XG5pbXBvcnQge2ludGVycG9sYXRlIGFzIGludGVycG9sYXRlVmFsdWUsIGludGVycG9sYXRlTnVtYmVyLCBpbnRlcnBvbGF0ZVJvdW5kfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCBjb25zdGFudCBmcm9tIFwiLi9jb25zdGFudC5qc1wiO1xuaW1wb3J0IG51bWJlciBmcm9tIFwiLi9udW1iZXIuanNcIjtcblxudmFyIHVuaXQgPSBbMCwgMV07XG5cbmV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gIHJldHVybiB4O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemUoYSwgYikge1xuICByZXR1cm4gKGIgLT0gKGEgPSArYSkpXG4gICAgICA/IGZ1bmN0aW9uKHgpIHsgcmV0dXJuICh4IC0gYSkgLyBiOyB9XG4gICAgICA6IGNvbnN0YW50KGlzTmFOKGIpID8gTmFOIDogMC41KTtcbn1cblxuZnVuY3Rpb24gY2xhbXBlcihhLCBiKSB7XG4gIHZhciB0O1xuICBpZiAoYSA+IGIpIHQgPSBhLCBhID0gYiwgYiA9IHQ7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiBNYXRoLm1heChhLCBNYXRoLm1pbihiLCB4KSk7IH07XG59XG5cbi8vIG5vcm1hbGl6ZShhLCBiKSh4KSB0YWtlcyBhIGRvbWFpbiB2YWx1ZSB4IGluIFthLGJdIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHBhcmFtZXRlciB0IGluIFswLDFdLlxuLy8gaW50ZXJwb2xhdGUoYSwgYikodCkgdGFrZXMgYSBwYXJhbWV0ZXIgdCBpbiBbMCwxXSBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByYW5nZSB2YWx1ZSB4IGluIFthLGJdLlxuZnVuY3Rpb24gYmltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGQwID0gZG9tYWluWzBdLCBkMSA9IGRvbWFpblsxXSwgcjAgPSByYW5nZVswXSwgcjEgPSByYW5nZVsxXTtcbiAgaWYgKGQxIDwgZDApIGQwID0gbm9ybWFsaXplKGQxLCBkMCksIHIwID0gaW50ZXJwb2xhdGUocjEsIHIwKTtcbiAgZWxzZSBkMCA9IG5vcm1hbGl6ZShkMCwgZDEpLCByMCA9IGludGVycG9sYXRlKHIwLCByMSk7XG4gIHJldHVybiBmdW5jdGlvbih4KSB7IHJldHVybiByMChkMCh4KSk7IH07XG59XG5cbmZ1bmN0aW9uIHBvbHltYXAoZG9tYWluLCByYW5nZSwgaW50ZXJwb2xhdGUpIHtcbiAgdmFyIGogPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpIC0gMSxcbiAgICAgIGQgPSBuZXcgQXJyYXkoaiksXG4gICAgICByID0gbmV3IEFycmF5KGopLFxuICAgICAgaSA9IC0xO1xuXG4gIC8vIFJldmVyc2UgZGVzY2VuZGluZyBkb21haW5zLlxuICBpZiAoZG9tYWluW2pdIDwgZG9tYWluWzBdKSB7XG4gICAgZG9tYWluID0gZG9tYWluLnNsaWNlKCkucmV2ZXJzZSgpO1xuICAgIHJhbmdlID0gcmFuZ2Uuc2xpY2UoKS5yZXZlcnNlKCk7XG4gIH1cblxuICB3aGlsZSAoKytpIDwgaikge1xuICAgIGRbaV0gPSBub3JtYWxpemUoZG9tYWluW2ldLCBkb21haW5baSArIDFdKTtcbiAgICByW2ldID0gaW50ZXJwb2xhdGUocmFuZ2VbaV0sIHJhbmdlW2kgKyAxXSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24oeCkge1xuICAgIHZhciBpID0gYmlzZWN0KGRvbWFpbiwgeCwgMSwgaikgLSAxO1xuICAgIHJldHVybiByW2ldKGRbaV0oeCkpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShzb3VyY2UsIHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0XG4gICAgICAuZG9tYWluKHNvdXJjZS5kb21haW4oKSlcbiAgICAgIC5yYW5nZShzb3VyY2UucmFuZ2UoKSlcbiAgICAgIC5pbnRlcnBvbGF0ZShzb3VyY2UuaW50ZXJwb2xhdGUoKSlcbiAgICAgIC5jbGFtcChzb3VyY2UuY2xhbXAoKSlcbiAgICAgIC51bmtub3duKHNvdXJjZS51bmtub3duKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtZXIoKSB7XG4gIHZhciBkb21haW4gPSB1bml0LFxuICAgICAgcmFuZ2UgPSB1bml0LFxuICAgICAgaW50ZXJwb2xhdGUgPSBpbnRlcnBvbGF0ZVZhbHVlLFxuICAgICAgdHJhbnNmb3JtLFxuICAgICAgdW50cmFuc2Zvcm0sXG4gICAgICB1bmtub3duLFxuICAgICAgY2xhbXAgPSBpZGVudGl0eSxcbiAgICAgIHBpZWNld2lzZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGlucHV0O1xuXG4gIGZ1bmN0aW9uIHJlc2NhbGUoKSB7XG4gICAgdmFyIG4gPSBNYXRoLm1pbihkb21haW4ubGVuZ3RoLCByYW5nZS5sZW5ndGgpO1xuICAgIGlmIChjbGFtcCAhPT0gaWRlbnRpdHkpIGNsYW1wID0gY2xhbXBlcihkb21haW5bMF0sIGRvbWFpbltuIC0gMV0pO1xuICAgIHBpZWNld2lzZSA9IG4gPiAyID8gcG9seW1hcCA6IGJpbWFwO1xuICAgIG91dHB1dCA9IGlucHV0ID0gbnVsbDtcbiAgICByZXR1cm4gc2NhbGU7XG4gIH1cblxuICBmdW5jdGlvbiBzY2FsZSh4KSB7XG4gICAgcmV0dXJuIGlzTmFOKHggPSAreCkgPyB1bmtub3duIDogKG91dHB1dCB8fCAob3V0cHV0ID0gcGllY2V3aXNlKGRvbWFpbi5tYXAodHJhbnNmb3JtKSwgcmFuZ2UsIGludGVycG9sYXRlKSkpKHRyYW5zZm9ybShjbGFtcCh4KSkpO1xuICB9XG5cbiAgc2NhbGUuaW52ZXJ0ID0gZnVuY3Rpb24oeSkge1xuICAgIHJldHVybiBjbGFtcCh1bnRyYW5zZm9ybSgoaW5wdXQgfHwgKGlucHV0ID0gcGllY2V3aXNlKHJhbmdlLCBkb21haW4ubWFwKHRyYW5zZm9ybSksIGludGVycG9sYXRlTnVtYmVyKSkpKHkpKSk7XG4gIH07XG5cbiAgc2NhbGUuZG9tYWluID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKGRvbWFpbiA9IEFycmF5LmZyb20oXywgbnVtYmVyKSwgcmVzY2FsZSgpKSA6IGRvbWFpbi5zbGljZSgpO1xuICB9O1xuXG4gIHNjYWxlLnJhbmdlID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHJhbmdlID0gQXJyYXkuZnJvbShfKSwgcmVzY2FsZSgpKSA6IHJhbmdlLnNsaWNlKCk7XG4gIH07XG5cbiAgc2NhbGUucmFuZ2VSb3VuZCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gcmFuZ2UgPSBBcnJheS5mcm9tKF8pLCBpbnRlcnBvbGF0ZSA9IGludGVycG9sYXRlUm91bmQsIHJlc2NhbGUoKTtcbiAgfTtcblxuICBzY2FsZS5jbGFtcCA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IChjbGFtcCA9IF8gPyB0cnVlIDogaWRlbnRpdHksIHJlc2NhbGUoKSkgOiBjbGFtcCAhPT0gaWRlbnRpdHk7XG4gIH07XG5cbiAgc2NhbGUuaW50ZXJwb2xhdGUgPSBmdW5jdGlvbihfKSB7XG4gICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPyAoaW50ZXJwb2xhdGUgPSBfLCByZXNjYWxlKCkpIDogaW50ZXJwb2xhdGU7XG4gIH07XG5cbiAgc2NhbGUudW5rbm93biA9IGZ1bmN0aW9uKF8pIHtcbiAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/ICh1bmtub3duID0gXywgc2NhbGUpIDogdW5rbm93bjtcbiAgfTtcblxuICByZXR1cm4gZnVuY3Rpb24odCwgdSkge1xuICAgIHRyYW5zZm9ybSA9IHQsIHVudHJhbnNmb3JtID0gdTtcbiAgICByZXR1cm4gcmVzY2FsZSgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250aW51b3VzKCkge1xuICByZXR1cm4gdHJhbnNmb3JtZXIoKShpZGVudGl0eSwgaWRlbnRpdHkpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29uc3RhbnRzKHgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB4O1xuICB9O1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluaXRSYW5nZShkb21haW4sIHJhbmdlKSB7XG4gIHN3aXRjaCAoYXJndW1lbnRzLmxlbmd0aCkge1xuICAgIGNhc2UgMDogYnJlYWs7XG4gICAgY2FzZSAxOiB0aGlzLnJhbmdlKGRvbWFpbik7IGJyZWFrO1xuICAgIGRlZmF1bHQ6IHRoaXMucmFuZ2UocmFuZ2UpLmRvbWFpbihkb21haW4pOyBicmVhaztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluaXRJbnRlcnBvbGF0b3IoZG9tYWluLCBpbnRlcnBvbGF0b3IpIHtcbiAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiBicmVhaztcbiAgICBjYXNlIDE6IHtcbiAgICAgIGlmICh0eXBlb2YgZG9tYWluID09PSBcImZ1bmN0aW9uXCIpIHRoaXMuaW50ZXJwb2xhdG9yKGRvbWFpbik7XG4gICAgICBlbHNlIHRoaXMucmFuZ2UoZG9tYWluKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBkZWZhdWx0OiB7XG4gICAgICB0aGlzLmRvbWFpbihkb21haW4pO1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcnBvbGF0b3IgPT09IFwiZnVuY3Rpb25cIikgdGhpcy5pbnRlcnBvbGF0b3IoaW50ZXJwb2xhdG9yKTtcbiAgICAgIGVsc2UgdGhpcy5yYW5nZShpbnRlcnBvbGF0b3IpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuIiwiLy8gW1tmaWxsXWFsaWduXVtzaWduXVtzeW1ib2xdWzBdW3dpZHRoXVssXVsucHJlY2lzaW9uXVt+XVt0eXBlXVxudmFyIHJlID0gL14oPzooLik/KFs8Pj1eXSkpPyhbK1xcLSggXSk/KFskI10pPygwKT8oXFxkKyk/KCwpPyhcXC5cXGQrKT8ofik/KFthLXolXSk/JC9pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSB7XG4gIGlmICghKG1hdGNoID0gcmUuZXhlYyhzcGVjaWZpZXIpKSkgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBmb3JtYXQ6IFwiICsgc3BlY2lmaWVyKTtcbiAgdmFyIG1hdGNoO1xuICByZXR1cm4gbmV3IEZvcm1hdFNwZWNpZmllcih7XG4gICAgZmlsbDogbWF0Y2hbMV0sXG4gICAgYWxpZ246IG1hdGNoWzJdLFxuICAgIHNpZ246IG1hdGNoWzNdLFxuICAgIHN5bWJvbDogbWF0Y2hbNF0sXG4gICAgemVybzogbWF0Y2hbNV0sXG4gICAgd2lkdGg6IG1hdGNoWzZdLFxuICAgIGNvbW1hOiBtYXRjaFs3XSxcbiAgICBwcmVjaXNpb246IG1hdGNoWzhdICYmIG1hdGNoWzhdLnNsaWNlKDEpLFxuICAgIHRyaW06IG1hdGNoWzldLFxuICAgIHR5cGU6IG1hdGNoWzEwXVxuICB9KTtcbn1cblxuZm9ybWF0U3BlY2lmaWVyLnByb3RvdHlwZSA9IEZvcm1hdFNwZWNpZmllci5wcm90b3R5cGU7IC8vIGluc3RhbmNlb2ZcblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1hdFNwZWNpZmllcihzcGVjaWZpZXIpIHtcbiAgdGhpcy5maWxsID0gc3BlY2lmaWVyLmZpbGwgPT09IHVuZGVmaW5lZCA/IFwiIFwiIDogc3BlY2lmaWVyLmZpbGwgKyBcIlwiO1xuICB0aGlzLmFsaWduID0gc3BlY2lmaWVyLmFsaWduID09PSB1bmRlZmluZWQgPyBcIj5cIiA6IHNwZWNpZmllci5hbGlnbiArIFwiXCI7XG4gIHRoaXMuc2lnbiA9IHNwZWNpZmllci5zaWduID09PSB1bmRlZmluZWQgPyBcIi1cIiA6IHNwZWNpZmllci5zaWduICsgXCJcIjtcbiAgdGhpcy5zeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sID09PSB1bmRlZmluZWQgPyBcIlwiIDogc3BlY2lmaWVyLnN5bWJvbCArIFwiXCI7XG4gIHRoaXMuemVybyA9ICEhc3BlY2lmaWVyLnplcm87XG4gIHRoaXMud2lkdGggPSBzcGVjaWZpZXIud2lkdGggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6ICtzcGVjaWZpZXIud2lkdGg7XG4gIHRoaXMuY29tbWEgPSAhIXNwZWNpZmllci5jb21tYTtcbiAgdGhpcy5wcmVjaXNpb24gPSBzcGVjaWZpZXIucHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiArc3BlY2lmaWVyLnByZWNpc2lvbjtcbiAgdGhpcy50cmltID0gISFzcGVjaWZpZXIudHJpbTtcbiAgdGhpcy50eXBlID0gc3BlY2lmaWVyLnR5cGUgPT09IHVuZGVmaW5lZCA/IFwiXCIgOiBzcGVjaWZpZXIudHlwZSArIFwiXCI7XG59XG5cbkZvcm1hdFNwZWNpZmllci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZmlsbFxuICAgICAgKyB0aGlzLmFsaWduXG4gICAgICArIHRoaXMuc2lnblxuICAgICAgKyB0aGlzLnN5bWJvbFxuICAgICAgKyAodGhpcy56ZXJvID8gXCIwXCIgOiBcIlwiKVxuICAgICAgKyAodGhpcy53aWR0aCA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IE1hdGgubWF4KDEsIHRoaXMud2lkdGggfCAwKSlcbiAgICAgICsgKHRoaXMuY29tbWEgPyBcIixcIiA6IFwiXCIpXG4gICAgICArICh0aGlzLnByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gXCJcIiA6IFwiLlwiICsgTWF0aC5tYXgoMCwgdGhpcy5wcmVjaXNpb24gfCAwKSlcbiAgICAgICsgKHRoaXMudHJpbSA/IFwiflwiIDogXCJcIilcbiAgICAgICsgdGhpcy50eXBlO1xufTtcbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCB2YXIgcHJlZml4RXhwb25lbnQ7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdLFxuICAgICAgaSA9IGV4cG9uZW50IC0gKHByZWZpeEV4cG9uZW50ID0gTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQgLyAzKSkpICogMykgKyAxLFxuICAgICAgbiA9IGNvZWZmaWNpZW50Lmxlbmd0aDtcbiAgcmV0dXJuIGkgPT09IG4gPyBjb2VmZmljaWVudFxuICAgICAgOiBpID4gbiA/IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGkgLSBuICsgMSkuam9pbihcIjBcIilcbiAgICAgIDogaSA+IDAgPyBjb2VmZmljaWVudC5zbGljZSgwLCBpKSArIFwiLlwiICsgY29lZmZpY2llbnQuc2xpY2UoaSlcbiAgICAgIDogXCIwLlwiICsgbmV3IEFycmF5KDEgLSBpKS5qb2luKFwiMFwiKSArIGZvcm1hdERlY2ltYWxQYXJ0cyh4LCBNYXRoLm1heCgwLCBwICsgaSAtIDEpKVswXTsgLy8gbGVzcyB0aGFuIDF5IVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gTWF0aC5hYnMoeCA9IE1hdGgucm91bmQoeCkpID49IDFlMjFcbiAgICAgID8geC50b0xvY2FsZVN0cmluZyhcImVuXCIpLnJlcGxhY2UoLywvZywgXCJcIilcbiAgICAgIDogeC50b1N0cmluZygxMCk7XG59XG5cbi8vIENvbXB1dGVzIHRoZSBkZWNpbWFsIGNvZWZmaWNpZW50IGFuZCBleHBvbmVudCBvZiB0aGUgc3BlY2lmaWVkIG51bWJlciB4IHdpdGhcbi8vIHNpZ25pZmljYW50IGRpZ2l0cyBwLCB3aGVyZSB4IGlzIHBvc2l0aXZlIGFuZCBwIGlzIGluIFsxLCAyMV0gb3IgdW5kZWZpbmVkLlxuLy8gRm9yIGV4YW1wbGUsIGZvcm1hdERlY2ltYWxQYXJ0cygxLjIzKSByZXR1cm5zIFtcIjEyM1wiLCAwXS5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCkge1xuICBpZiAoKGkgPSAoeCA9IHAgPyB4LnRvRXhwb25lbnRpYWwocCAtIDEpIDogeC50b0V4cG9uZW50aWFsKCkpLmluZGV4T2YoXCJlXCIpKSA8IDApIHJldHVybiBudWxsOyAvLyBOYU4sIMKxSW5maW5pdHlcbiAgdmFyIGksIGNvZWZmaWNpZW50ID0geC5zbGljZSgwLCBpKTtcblxuICAvLyBUaGUgc3RyaW5nIHJldHVybmVkIGJ5IHRvRXhwb25lbnRpYWwgZWl0aGVyIGhhcyB0aGUgZm9ybSBcXGRcXC5cXGQrZVstK11cXGQrXG4gIC8vIChlLmcuLCAxLjJlKzMpIG9yIHRoZSBmb3JtIFxcZGVbLStdXFxkKyAoZS5nLiwgMWUrMykuXG4gIHJldHVybiBbXG4gICAgY29lZmZpY2llbnQubGVuZ3RoID4gMSA/IGNvZWZmaWNpZW50WzBdICsgY29lZmZpY2llbnQuc2xpY2UoMikgOiBjb2VmZmljaWVudCxcbiAgICAreC5zbGljZShpICsgMSlcbiAgXTtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHggPSBmb3JtYXREZWNpbWFsUGFydHMoTWF0aC5hYnMoeCkpLCB4ID8geFsxXSA6IE5hTjtcbn1cbiIsImltcG9ydCB7Zm9ybWF0RGVjaW1hbFBhcnRzfSBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgsIHApIHtcbiAgdmFyIGQgPSBmb3JtYXREZWNpbWFsUGFydHMoeCwgcCk7XG4gIGlmICghZCkgcmV0dXJuIHggKyBcIlwiO1xuICB2YXIgY29lZmZpY2llbnQgPSBkWzBdLFxuICAgICAgZXhwb25lbnQgPSBkWzFdO1xuICByZXR1cm4gZXhwb25lbnQgPCAwID8gXCIwLlwiICsgbmV3IEFycmF5KC1leHBvbmVudCkuam9pbihcIjBcIikgKyBjb2VmZmljaWVudFxuICAgICAgOiBjb2VmZmljaWVudC5sZW5ndGggPiBleHBvbmVudCArIDEgPyBjb2VmZmljaWVudC5zbGljZSgwLCBleHBvbmVudCArIDEpICsgXCIuXCIgKyBjb2VmZmljaWVudC5zbGljZShleHBvbmVudCArIDEpXG4gICAgICA6IGNvZWZmaWNpZW50ICsgbmV3IEFycmF5KGV4cG9uZW50IC0gY29lZmZpY2llbnQubGVuZ3RoICsgMikuam9pbihcIjBcIik7XG59XG4iLCJpbXBvcnQgZm9ybWF0RGVjaW1hbCBmcm9tIFwiLi9mb3JtYXREZWNpbWFsLmpzXCI7XG5pbXBvcnQgZm9ybWF0UHJlZml4QXV0byBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgZm9ybWF0Um91bmRlZCBmcm9tIFwiLi9mb3JtYXRSb3VuZGVkLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgXCIlXCI6ICh4LCBwKSA9PiAoeCAqIDEwMCkudG9GaXhlZChwKSxcbiAgXCJiXCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDIpLFxuICBcImNcIjogKHgpID0+IHggKyBcIlwiLFxuICBcImRcIjogZm9ybWF0RGVjaW1hbCxcbiAgXCJlXCI6ICh4LCBwKSA9PiB4LnRvRXhwb25lbnRpYWwocCksXG4gIFwiZlwiOiAoeCwgcCkgPT4geC50b0ZpeGVkKHApLFxuICBcImdcIjogKHgsIHApID0+IHgudG9QcmVjaXNpb24ocCksXG4gIFwib1wiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZyg4KSxcbiAgXCJwXCI6ICh4LCBwKSA9PiBmb3JtYXRSb3VuZGVkKHggKiAxMDAsIHApLFxuICBcInJcIjogZm9ybWF0Um91bmRlZCxcbiAgXCJzXCI6IGZvcm1hdFByZWZpeEF1dG8sXG4gIFwiWFwiOiAoeCkgPT4gTWF0aC5yb3VuZCh4KS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSxcbiAgXCJ4XCI6ICh4KSA9PiBNYXRoLnJvdW5kKHgpLnRvU3RyaW5nKDE2KVxufTtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHgpIHtcbiAgcmV0dXJuIHg7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcbmltcG9ydCBmb3JtYXRHcm91cCBmcm9tIFwiLi9mb3JtYXRHcm91cC5qc1wiO1xuaW1wb3J0IGZvcm1hdE51bWVyYWxzIGZyb20gXCIuL2Zvcm1hdE51bWVyYWxzLmpzXCI7XG5pbXBvcnQgZm9ybWF0U3BlY2lmaWVyIGZyb20gXCIuL2Zvcm1hdFNwZWNpZmllci5qc1wiO1xuaW1wb3J0IGZvcm1hdFRyaW0gZnJvbSBcIi4vZm9ybWF0VHJpbS5qc1wiO1xuaW1wb3J0IGZvcm1hdFR5cGVzIGZyb20gXCIuL2Zvcm1hdFR5cGVzLmpzXCI7XG5pbXBvcnQge3ByZWZpeEV4cG9uZW50fSBmcm9tIFwiLi9mb3JtYXRQcmVmaXhBdXRvLmpzXCI7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSBcIi4vaWRlbnRpdHkuanNcIjtcblxudmFyIG1hcCA9IEFycmF5LnByb3RvdHlwZS5tYXAsXG4gICAgcHJlZml4ZXMgPSBbXCJ5XCIsXCJ6XCIsXCJhXCIsXCJmXCIsXCJwXCIsXCJuXCIsXCLCtVwiLFwibVwiLFwiXCIsXCJrXCIsXCJNXCIsXCJHXCIsXCJUXCIsXCJQXCIsXCJFXCIsXCJaXCIsXCJZXCJdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihsb2NhbGUpIHtcbiAgdmFyIGdyb3VwID0gbG9jYWxlLmdyb3VwaW5nID09PSB1bmRlZmluZWQgfHwgbG9jYWxlLnRob3VzYW5kcyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXRHcm91cChtYXAuY2FsbChsb2NhbGUuZ3JvdXBpbmcsIE51bWJlciksIGxvY2FsZS50aG91c2FuZHMgKyBcIlwiKSxcbiAgICAgIGN1cnJlbmN5UHJlZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzBdICsgXCJcIixcbiAgICAgIGN1cnJlbmN5U3VmZml4ID0gbG9jYWxlLmN1cnJlbmN5ID09PSB1bmRlZmluZWQgPyBcIlwiIDogbG9jYWxlLmN1cnJlbmN5WzFdICsgXCJcIixcbiAgICAgIGRlY2ltYWwgPSBsb2NhbGUuZGVjaW1hbCA9PT0gdW5kZWZpbmVkID8gXCIuXCIgOiBsb2NhbGUuZGVjaW1hbCArIFwiXCIsXG4gICAgICBudW1lcmFscyA9IGxvY2FsZS5udW1lcmFscyA9PT0gdW5kZWZpbmVkID8gaWRlbnRpdHkgOiBmb3JtYXROdW1lcmFscyhtYXAuY2FsbChsb2NhbGUubnVtZXJhbHMsIFN0cmluZykpLFxuICAgICAgcGVyY2VudCA9IGxvY2FsZS5wZXJjZW50ID09PSB1bmRlZmluZWQgPyBcIiVcIiA6IGxvY2FsZS5wZXJjZW50ICsgXCJcIixcbiAgICAgIG1pbnVzID0gbG9jYWxlLm1pbnVzID09PSB1bmRlZmluZWQgPyBcIuKIklwiIDogbG9jYWxlLm1pbnVzICsgXCJcIixcbiAgICAgIG5hbiA9IGxvY2FsZS5uYW4gPT09IHVuZGVmaW5lZCA/IFwiTmFOXCIgOiBsb2NhbGUubmFuICsgXCJcIjtcblxuICBmdW5jdGlvbiBuZXdGb3JtYXQoc3BlY2lmaWVyKSB7XG4gICAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllcik7XG5cbiAgICB2YXIgZmlsbCA9IHNwZWNpZmllci5maWxsLFxuICAgICAgICBhbGlnbiA9IHNwZWNpZmllci5hbGlnbixcbiAgICAgICAgc2lnbiA9IHNwZWNpZmllci5zaWduLFxuICAgICAgICBzeW1ib2wgPSBzcGVjaWZpZXIuc3ltYm9sLFxuICAgICAgICB6ZXJvID0gc3BlY2lmaWVyLnplcm8sXG4gICAgICAgIHdpZHRoID0gc3BlY2lmaWVyLndpZHRoLFxuICAgICAgICBjb21tYSA9IHNwZWNpZmllci5jb21tYSxcbiAgICAgICAgcHJlY2lzaW9uID0gc3BlY2lmaWVyLnByZWNpc2lvbixcbiAgICAgICAgdHJpbSA9IHNwZWNpZmllci50cmltLFxuICAgICAgICB0eXBlID0gc3BlY2lmaWVyLnR5cGU7XG5cbiAgICAvLyBUaGUgXCJuXCIgdHlwZSBpcyBhbiBhbGlhcyBmb3IgXCIsZ1wiLlxuICAgIGlmICh0eXBlID09PSBcIm5cIikgY29tbWEgPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBUaGUgXCJcIiB0eXBlLCBhbmQgYW55IGludmFsaWQgdHlwZSwgaXMgYW4gYWxpYXMgZm9yIFwiLjEyfmdcIi5cbiAgICBlbHNlIGlmICghZm9ybWF0VHlwZXNbdHlwZV0pIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkICYmIChwcmVjaXNpb24gPSAxMiksIHRyaW0gPSB0cnVlLCB0eXBlID0gXCJnXCI7XG5cbiAgICAvLyBJZiB6ZXJvIGZpbGwgaXMgc3BlY2lmaWVkLCBwYWRkaW5nIGdvZXMgYWZ0ZXIgc2lnbiBhbmQgYmVmb3JlIGRpZ2l0cy5cbiAgICBpZiAoemVybyB8fCAoZmlsbCA9PT0gXCIwXCIgJiYgYWxpZ24gPT09IFwiPVwiKSkgemVybyA9IHRydWUsIGZpbGwgPSBcIjBcIiwgYWxpZ24gPSBcIj1cIjtcblxuICAgIC8vIENvbXB1dGUgdGhlIHByZWZpeCBhbmQgc3VmZml4LlxuICAgIC8vIEZvciBTSS1wcmVmaXgsIHRoZSBzdWZmaXggaXMgbGF6aWx5IGNvbXB1dGVkLlxuICAgIHZhciBwcmVmaXggPSBzeW1ib2wgPT09IFwiJFwiID8gY3VycmVuY3lQcmVmaXggOiBzeW1ib2wgPT09IFwiI1wiICYmIC9bYm94WF0vLnRlc3QodHlwZSkgPyBcIjBcIiArIHR5cGUudG9Mb3dlckNhc2UoKSA6IFwiXCIsXG4gICAgICAgIHN1ZmZpeCA9IHN5bWJvbCA9PT0gXCIkXCIgPyBjdXJyZW5jeVN1ZmZpeCA6IC9bJXBdLy50ZXN0KHR5cGUpID8gcGVyY2VudCA6IFwiXCI7XG5cbiAgICAvLyBXaGF0IGZvcm1hdCBmdW5jdGlvbiBzaG91bGQgd2UgdXNlP1xuICAgIC8vIElzIHRoaXMgYW4gaW50ZWdlciB0eXBlP1xuICAgIC8vIENhbiB0aGlzIHR5cGUgZ2VuZXJhdGUgZXhwb25lbnRpYWwgbm90YXRpb24/XG4gICAgdmFyIGZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlc1t0eXBlXSxcbiAgICAgICAgbWF5YmVTdWZmaXggPSAvW2RlZmdwcnMlXS8udGVzdCh0eXBlKTtcblxuICAgIC8vIFNldCB0aGUgZGVmYXVsdCBwcmVjaXNpb24gaWYgbm90IHNwZWNpZmllZCxcbiAgICAvLyBvciBjbGFtcCB0aGUgc3BlY2lmaWVkIHByZWNpc2lvbiB0byB0aGUgc3VwcG9ydGVkIHJhbmdlLlxuICAgIC8vIEZvciBzaWduaWZpY2FudCBwcmVjaXNpb24sIGl0IG11c3QgYmUgaW4gWzEsIDIxXS5cbiAgICAvLyBGb3IgZml4ZWQgcHJlY2lzaW9uLCBpdCBtdXN0IGJlIGluIFswLCAyMF0uXG4gICAgcHJlY2lzaW9uID0gcHJlY2lzaW9uID09PSB1bmRlZmluZWQgPyA2XG4gICAgICAgIDogL1tncHJzXS8udGVzdCh0eXBlKSA/IE1hdGgubWF4KDEsIE1hdGgubWluKDIxLCBwcmVjaXNpb24pKVxuICAgICAgICA6IE1hdGgubWF4KDAsIE1hdGgubWluKDIwLCBwcmVjaXNpb24pKTtcblxuICAgIGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSkge1xuICAgICAgdmFyIHZhbHVlUHJlZml4ID0gcHJlZml4LFxuICAgICAgICAgIHZhbHVlU3VmZml4ID0gc3VmZml4LFxuICAgICAgICAgIGksIG4sIGM7XG5cbiAgICAgIGlmICh0eXBlID09PSBcImNcIikge1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9IGZvcm1hdFR5cGUodmFsdWUpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgIHZhbHVlID0gXCJcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gK3ZhbHVlO1xuXG4gICAgICAgIC8vIERldGVybWluZSB0aGUgc2lnbi4gLTAgaXMgbm90IGxlc3MgdGhhbiAwLCBidXQgMSAvIC0wIGlzIVxuICAgICAgICB2YXIgdmFsdWVOZWdhdGl2ZSA9IHZhbHVlIDwgMCB8fCAxIC8gdmFsdWUgPCAwO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gdGhlIGluaXRpYWwgZm9ybWF0dGluZy5cbiAgICAgICAgdmFsdWUgPSBpc05hTih2YWx1ZSkgPyBuYW4gOiBmb3JtYXRUeXBlKE1hdGguYWJzKHZhbHVlKSwgcHJlY2lzaW9uKTtcblxuICAgICAgICAvLyBUcmltIGluc2lnbmlmaWNhbnQgemVyb3MuXG4gICAgICAgIGlmICh0cmltKSB2YWx1ZSA9IGZvcm1hdFRyaW0odmFsdWUpO1xuXG4gICAgICAgIC8vIElmIGEgbmVnYXRpdmUgdmFsdWUgcm91bmRzIHRvIHplcm8gYWZ0ZXIgZm9ybWF0dGluZywgYW5kIG5vIGV4cGxpY2l0IHBvc2l0aXZlIHNpZ24gaXMgcmVxdWVzdGVkLCBoaWRlIHRoZSBzaWduLlxuICAgICAgICBpZiAodmFsdWVOZWdhdGl2ZSAmJiArdmFsdWUgPT09IDAgJiYgc2lnbiAhPT0gXCIrXCIpIHZhbHVlTmVnYXRpdmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBwcmVmaXggYW5kIHN1ZmZpeC5cbiAgICAgICAgdmFsdWVQcmVmaXggPSAodmFsdWVOZWdhdGl2ZSA/IChzaWduID09PSBcIihcIiA/IHNpZ24gOiBtaW51cykgOiBzaWduID09PSBcIi1cIiB8fCBzaWduID09PSBcIihcIiA/IFwiXCIgOiBzaWduKSArIHZhbHVlUHJlZml4O1xuICAgICAgICB2YWx1ZVN1ZmZpeCA9ICh0eXBlID09PSBcInNcIiA/IHByZWZpeGVzWzggKyBwcmVmaXhFeHBvbmVudCAvIDNdIDogXCJcIikgKyB2YWx1ZVN1ZmZpeCArICh2YWx1ZU5lZ2F0aXZlICYmIHNpZ24gPT09IFwiKFwiID8gXCIpXCIgOiBcIlwiKTtcblxuICAgICAgICAvLyBCcmVhayB0aGUgZm9ybWF0dGVkIHZhbHVlIGludG8gdGhlIGludGVnZXIg4oCcdmFsdWXigJ0gcGFydCB0aGF0IGNhbiBiZVxuICAgICAgICAvLyBncm91cGVkLCBhbmQgZnJhY3Rpb25hbCBvciBleHBvbmVudGlhbCDigJxzdWZmaXjigJ0gcGFydCB0aGF0IGlzIG5vdC5cbiAgICAgICAgaWYgKG1heWJlU3VmZml4KSB7XG4gICAgICAgICAgaSA9IC0xLCBuID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICAgICAgICBpZiAoYyA9IHZhbHVlLmNoYXJDb2RlQXQoaSksIDQ4ID4gYyB8fCBjID4gNTcpIHtcbiAgICAgICAgICAgICAgdmFsdWVTdWZmaXggPSAoYyA9PT0gNDYgPyBkZWNpbWFsICsgdmFsdWUuc2xpY2UoaSArIDEpIDogdmFsdWUuc2xpY2UoaSkpICsgdmFsdWVTdWZmaXg7XG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgaSk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgbm90IFwiMFwiLCBncm91cGluZyBpcyBhcHBsaWVkIGJlZm9yZSBwYWRkaW5nLlxuICAgICAgaWYgKGNvbW1hICYmICF6ZXJvKSB2YWx1ZSA9IGdyb3VwKHZhbHVlLCBJbmZpbml0eSk7XG5cbiAgICAgIC8vIENvbXB1dGUgdGhlIHBhZGRpbmcuXG4gICAgICB2YXIgbGVuZ3RoID0gdmFsdWVQcmVmaXgubGVuZ3RoICsgdmFsdWUubGVuZ3RoICsgdmFsdWVTdWZmaXgubGVuZ3RoLFxuICAgICAgICAgIHBhZGRpbmcgPSBsZW5ndGggPCB3aWR0aCA/IG5ldyBBcnJheSh3aWR0aCAtIGxlbmd0aCArIDEpLmpvaW4oZmlsbCkgOiBcIlwiO1xuXG4gICAgICAvLyBJZiB0aGUgZmlsbCBjaGFyYWN0ZXIgaXMgXCIwXCIsIGdyb3VwaW5nIGlzIGFwcGxpZWQgYWZ0ZXIgcGFkZGluZy5cbiAgICAgIGlmIChjb21tYSAmJiB6ZXJvKSB2YWx1ZSA9IGdyb3VwKHBhZGRpbmcgKyB2YWx1ZSwgcGFkZGluZy5sZW5ndGggPyB3aWR0aCAtIHZhbHVlU3VmZml4Lmxlbmd0aCA6IEluZmluaXR5KSwgcGFkZGluZyA9IFwiXCI7XG5cbiAgICAgIC8vIFJlY29uc3RydWN0IHRoZSBmaW5hbCBvdXRwdXQgYmFzZWQgb24gdGhlIGRlc2lyZWQgYWxpZ25tZW50LlxuICAgICAgc3dpdGNoIChhbGlnbikge1xuICAgICAgICBjYXNlIFwiPFwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgdmFsdWUgKyB2YWx1ZVN1ZmZpeCArIHBhZGRpbmc7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiPVwiOiB2YWx1ZSA9IHZhbHVlUHJlZml4ICsgcGFkZGluZyArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgICBjYXNlIFwiXlwiOiB2YWx1ZSA9IHBhZGRpbmcuc2xpY2UoMCwgbGVuZ3RoID0gcGFkZGluZy5sZW5ndGggPj4gMSkgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXggKyBwYWRkaW5nLnNsaWNlKGxlbmd0aCk7IGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB2YWx1ZSA9IHBhZGRpbmcgKyB2YWx1ZVByZWZpeCArIHZhbHVlICsgdmFsdWVTdWZmaXg7IGJyZWFrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVtZXJhbHModmFsdWUpO1xuICAgIH1cblxuICAgIGZvcm1hdC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHNwZWNpZmllciArIFwiXCI7XG4gICAgfTtcblxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRQcmVmaXgoc3BlY2lmaWVyLCB2YWx1ZSkge1xuICAgIHZhciBmID0gbmV3Rm9ybWF0KChzcGVjaWZpZXIgPSBmb3JtYXRTcGVjaWZpZXIoc3BlY2lmaWVyKSwgc3BlY2lmaWVyLnR5cGUgPSBcImZcIiwgc3BlY2lmaWVyKSksXG4gICAgICAgIGUgPSBNYXRoLm1heCgtOCwgTWF0aC5taW4oOCwgTWF0aC5mbG9vcihleHBvbmVudCh2YWx1ZSkgLyAzKSkpICogMyxcbiAgICAgICAgayA9IE1hdGgucG93KDEwLCAtZSksXG4gICAgICAgIHByZWZpeCA9IHByZWZpeGVzWzggKyBlIC8gM107XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZihrICogdmFsdWUpICsgcHJlZml4O1xuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGZvcm1hdDogbmV3Rm9ybWF0LFxuICAgIGZvcm1hdFByZWZpeDogZm9ybWF0UHJlZml4XG4gIH07XG59XG4iLCJpbXBvcnQgZm9ybWF0TG9jYWxlIGZyb20gXCIuL2xvY2FsZS5qc1wiO1xuXG52YXIgbG9jYWxlO1xuZXhwb3J0IHZhciBmb3JtYXQ7XG5leHBvcnQgdmFyIGZvcm1hdFByZWZpeDtcblxuZGVmYXVsdExvY2FsZSh7XG4gIHRob3VzYW5kczogXCIsXCIsXG4gIGdyb3VwaW5nOiBbM10sXG4gIGN1cnJlbmN5OiBbXCIkXCIsIFwiXCJdXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVmYXVsdExvY2FsZShkZWZpbml0aW9uKSB7XG4gIGxvY2FsZSA9IGZvcm1hdExvY2FsZShkZWZpbml0aW9uKTtcbiAgZm9ybWF0ID0gbG9jYWxlLmZvcm1hdDtcbiAgZm9ybWF0UHJlZml4ID0gbG9jYWxlLmZvcm1hdFByZWZpeDtcbiAgcmV0dXJuIGxvY2FsZTtcbn1cbiIsImltcG9ydCB7dGlja3MsIHRpY2tJbmNyZW1lbnR9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IGNvbnRpbnVvdXMsIHtjb3B5fSBmcm9tIFwiLi9jb250aW51b3VzLmpzXCI7XG5pbXBvcnQge2luaXRSYW5nZX0gZnJvbSBcIi4vaW5pdC5qc1wiO1xuaW1wb3J0IHRpY2tGb3JtYXQgZnJvbSBcIi4vdGlja0Zvcm1hdC5qc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gbGluZWFyaXNoKHNjYWxlKSB7XG4gIHZhciBkb21haW4gPSBzY2FsZS5kb21haW47XG5cbiAgc2NhbGUudGlja3MgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIHZhciBkID0gZG9tYWluKCk7XG4gICAgcmV0dXJuIHRpY2tzKGRbMF0sIGRbZC5sZW5ndGggLSAxXSwgY291bnQgPT0gbnVsbCA/IDEwIDogY291bnQpO1xuICB9O1xuXG4gIHNjYWxlLnRpY2tGb3JtYXQgPSBmdW5jdGlvbihjb3VudCwgc3BlY2lmaWVyKSB7XG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICByZXR1cm4gdGlja0Zvcm1hdChkWzBdLCBkW2QubGVuZ3RoIC0gMV0sIGNvdW50ID09IG51bGwgPyAxMCA6IGNvdW50LCBzcGVjaWZpZXIpO1xuICB9O1xuXG4gIHNjYWxlLm5pY2UgPSBmdW5jdGlvbihjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSBudWxsKSBjb3VudCA9IDEwO1xuXG4gICAgdmFyIGQgPSBkb21haW4oKTtcbiAgICB2YXIgaTAgPSAwO1xuICAgIHZhciBpMSA9IGQubGVuZ3RoIC0gMTtcbiAgICB2YXIgc3RhcnQgPSBkW2kwXTtcbiAgICB2YXIgc3RvcCA9IGRbaTFdO1xuICAgIHZhciBwcmVzdGVwO1xuICAgIHZhciBzdGVwO1xuICAgIHZhciBtYXhJdGVyID0gMTA7XG5cbiAgICBpZiAoc3RvcCA8IHN0YXJ0KSB7XG4gICAgICBzdGVwID0gc3RhcnQsIHN0YXJ0ID0gc3RvcCwgc3RvcCA9IHN0ZXA7XG4gICAgICBzdGVwID0gaTAsIGkwID0gaTEsIGkxID0gc3RlcDtcbiAgICB9XG4gICAgXG4gICAgd2hpbGUgKG1heEl0ZXItLSA+IDApIHtcbiAgICAgIHN0ZXAgPSB0aWNrSW5jcmVtZW50KHN0YXJ0LCBzdG9wLCBjb3VudCk7XG4gICAgICBpZiAoc3RlcCA9PT0gcHJlc3RlcCkge1xuICAgICAgICBkW2kwXSA9IHN0YXJ0XG4gICAgICAgIGRbaTFdID0gc3RvcFxuICAgICAgICByZXR1cm4gZG9tYWluKGQpO1xuICAgICAgfSBlbHNlIGlmIChzdGVwID4gMCkge1xuICAgICAgICBzdGFydCA9IE1hdGguZmxvb3Ioc3RhcnQgLyBzdGVwKSAqIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmNlaWwoc3RvcCAvIHN0ZXApICogc3RlcDtcbiAgICAgIH0gZWxzZSBpZiAoc3RlcCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSBNYXRoLmNlaWwoc3RhcnQgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICAgIHN0b3AgPSBNYXRoLmZsb29yKHN0b3AgKiBzdGVwKSAvIHN0ZXA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHByZXN0ZXAgPSBzdGVwO1xuICAgIH1cblxuICAgIHJldHVybiBzY2FsZTtcbiAgfTtcblxuICByZXR1cm4gc2NhbGU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxpbmVhcigpIHtcbiAgdmFyIHNjYWxlID0gY29udGludW91cygpO1xuXG4gIHNjYWxlLmNvcHkgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gY29weShzY2FsZSwgbGluZWFyKCkpO1xuICB9O1xuXG4gIGluaXRSYW5nZS5hcHBseShzY2FsZSwgYXJndW1lbnRzKTtcblxuICByZXR1cm4gbGluZWFyaXNoKHNjYWxlKTtcbn1cbiIsImltcG9ydCB7dGlja1N0ZXB9IGZyb20gXCJkMy1hcnJheVwiO1xuaW1wb3J0IHtmb3JtYXQsIGZvcm1hdFByZWZpeCwgZm9ybWF0U3BlY2lmaWVyLCBwcmVjaXNpb25GaXhlZCwgcHJlY2lzaW9uUHJlZml4LCBwcmVjaXNpb25Sb3VuZH0gZnJvbSBcImQzLWZvcm1hdFwiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0aWNrRm9ybWF0KHN0YXJ0LCBzdG9wLCBjb3VudCwgc3BlY2lmaWVyKSB7XG4gIHZhciBzdGVwID0gdGlja1N0ZXAoc3RhcnQsIHN0b3AsIGNvdW50KSxcbiAgICAgIHByZWNpc2lvbjtcbiAgc3BlY2lmaWVyID0gZm9ybWF0U3BlY2lmaWVyKHNwZWNpZmllciA9PSBudWxsID8gXCIsZlwiIDogc3BlY2lmaWVyKTtcbiAgc3dpdGNoIChzcGVjaWZpZXIudHlwZSkge1xuICAgIGNhc2UgXCJzXCI6IHtcbiAgICAgIHZhciB2YWx1ZSA9IE1hdGgubWF4KE1hdGguYWJzKHN0YXJ0KSwgTWF0aC5hYnMoc3RvcCkpO1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUHJlZml4KHN0ZXAsIHZhbHVlKSkpIHNwZWNpZmllci5wcmVjaXNpb24gPSBwcmVjaXNpb247XG4gICAgICByZXR1cm4gZm9ybWF0UHJlZml4KHNwZWNpZmllciwgdmFsdWUpO1xuICAgIH1cbiAgICBjYXNlIFwiXCI6XG4gICAgY2FzZSBcImVcIjpcbiAgICBjYXNlIFwiZ1wiOlxuICAgIGNhc2UgXCJwXCI6XG4gICAgY2FzZSBcInJcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uUm91bmQoc3RlcCwgTWF0aC5tYXgoTWF0aC5hYnMoc3RhcnQpLCBNYXRoLmFicyhzdG9wKSkpKSkgc3BlY2lmaWVyLnByZWNpc2lvbiA9IHByZWNpc2lvbiAtIChzcGVjaWZpZXIudHlwZSA9PT0gXCJlXCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgXCJmXCI6XG4gICAgY2FzZSBcIiVcIjoge1xuICAgICAgaWYgKHNwZWNpZmllci5wcmVjaXNpb24gPT0gbnVsbCAmJiAhaXNOYU4ocHJlY2lzaW9uID0gcHJlY2lzaW9uRml4ZWQoc3RlcCkpKSBzcGVjaWZpZXIucHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gKHNwZWNpZmllci50eXBlID09PSBcIiVcIikgKiAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBmb3JtYXQoc3BlY2lmaWVyKTtcbn1cbiIsImltcG9ydCBleHBvbmVudCBmcm9tIFwiLi9leHBvbmVudC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzdGVwLCB2YWx1ZSkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgTWF0aC5tYXgoLTgsIE1hdGgubWluKDgsIE1hdGguZmxvb3IoZXhwb25lbnQodmFsdWUpIC8gMykpKSAqIDMgLSBleHBvbmVudChNYXRoLmFicyhzdGVwKSkpO1xufVxuIiwiaW1wb3J0IGV4cG9uZW50IGZyb20gXCIuL2V4cG9uZW50LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHN0ZXAsIG1heCkge1xuICBzdGVwID0gTWF0aC5hYnMoc3RlcCksIG1heCA9IE1hdGguYWJzKG1heCkgLSBzdGVwO1xuICByZXR1cm4gTWF0aC5tYXgoMCwgZXhwb25lbnQobWF4KSAtIGV4cG9uZW50KHN0ZXApKSArIDE7XG59XG4iLCJpbXBvcnQgZXhwb25lbnQgZnJvbSBcIi4vZXhwb25lbnQuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RlcCkge1xuICByZXR1cm4gTWF0aC5tYXgoMCwgLWV4cG9uZW50KE1hdGguYWJzKHN0ZXApKSk7XG59XG4iLCJmdW5jdGlvbiBub25lKCkge31cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBub25lIDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBcImxlbmd0aFwiIGluIHhcbiAgICA/IHggLy8gQXJyYXksIFR5cGVkQXJyYXksIE5vZGVMaXN0LCBhcnJheS1saWtlXG4gICAgOiBBcnJheS5mcm9tKHgpOyAvLyBNYXAsIFNldCwgaXRlcmFibGUsIHN0cmluZywgb3IgYW55dGhpbmcgZWxzZVxufVxuIiwiZnVuY3Rpb24gZW1wdHkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIHNlbGVjdG9yID09IG51bGwgPyBlbXB0eSA6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXMoc2VsZWN0b3IpO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hpbGRNYXRjaGVyKHNlbGVjdG9yKSB7XG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUubWF0Y2hlcyhzZWxlY3Rvcik7XG4gIH07XG59XG5cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGdyb3VwaW5nLCB0aG91c2FuZHMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlLCB3aWR0aCkge1xuICAgIHZhciBpID0gdmFsdWUubGVuZ3RoLFxuICAgICAgICB0ID0gW10sXG4gICAgICAgIGogPSAwLFxuICAgICAgICBnID0gZ3JvdXBpbmdbMF0sXG4gICAgICAgIGxlbmd0aCA9IDA7XG5cbiAgICB3aGlsZSAoaSA+IDAgJiYgZyA+IDApIHtcbiAgICAgIGlmIChsZW5ndGggKyBnICsgMSA+IHdpZHRoKSBnID0gTWF0aC5tYXgoMSwgd2lkdGggLSBsZW5ndGgpO1xuICAgICAgdC5wdXNoKHZhbHVlLnN1YnN0cmluZyhpIC09IGcsIGkgKyBnKSk7XG4gICAgICBpZiAoKGxlbmd0aCArPSBnICsgMSkgPiB3aWR0aCkgYnJlYWs7XG4gICAgICBnID0gZ3JvdXBpbmdbaiA9IChqICsgMSkgJSBncm91cGluZy5sZW5ndGhdO1xuICAgIH1cblxuICAgIHJldHVybiB0LnJldmVyc2UoKS5qb2luKHRob3VzYW5kcyk7XG4gIH07XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbihudW1lcmFscykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvWzAtOV0vZywgZnVuY3Rpb24oaSkge1xuICAgICAgcmV0dXJuIG51bWVyYWxzWytpXTtcbiAgICB9KTtcbiAgfTtcbn1cbiIsIi8vIFRyaW1zIGluc2lnbmlmaWNhbnQgemVyb3MsIGUuZy4sIHJlcGxhY2VzIDEuMjAwMGsgd2l0aCAxLjJrLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocykge1xuICBvdXQ6IGZvciAodmFyIG4gPSBzLmxlbmd0aCwgaSA9IDEsIGkwID0gLTEsIGkxOyBpIDwgbjsgKytpKSB7XG4gICAgc3dpdGNoIChzW2ldKSB7XG4gICAgICBjYXNlIFwiLlwiOiBpMCA9IGkxID0gaTsgYnJlYWs7XG4gICAgICBjYXNlIFwiMFwiOiBpZiAoaTAgPT09IDApIGkwID0gaTsgaTEgPSBpOyBicmVhaztcbiAgICAgIGRlZmF1bHQ6IGlmICghK3NbaV0pIGJyZWFrIG91dDsgaWYgKGkwID4gMCkgaTAgPSAwOyBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGkwID4gMCA/IHMuc2xpY2UoMCwgaTApICsgcy5zbGljZShpMSArIDEpIDogcztcbn1cbiIsImltcG9ydCB7Y2hpbGRNYXRjaGVyfSBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG52YXIgZmluZCA9IEFycmF5LnByb3RvdHlwZS5maW5kO1xuXG5mdW5jdGlvbiBjaGlsZEZpbmQobWF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmaW5kLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBjaGlsZEZpcnN0KCkge1xuICByZXR1cm4gdGhpcy5maXJzdEVsZW1lbnRDaGlsZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KG1hdGNoID09IG51bGwgPyBjaGlsZEZpcnN0XG4gICAgICA6IGNoaWxkRmluZCh0eXBlb2YgbWF0Y2ggPT09IFwiZnVuY3Rpb25cIiA/IG1hdGNoIDogY2hpbGRNYXRjaGVyKG1hdGNoKSkpO1xufVxuIiwiaW1wb3J0IHtjaGlsZE1hdGNoZXJ9IGZyb20gXCIuLi9tYXRjaGVyLmpzXCI7XG5cbnZhciBmaWx0ZXIgPSBBcnJheS5wcm90b3R5cGUuZmlsdGVyO1xuXG5mdW5jdGlvbiBjaGlsZHJlbigpIHtcbiAgcmV0dXJuIHRoaXMuY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNoaWxkcmVuRmlsdGVyKG1hdGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZmlsdGVyLmNhbGwodGhpcy5jaGlsZHJlbiwgbWF0Y2gpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICByZXR1cm4gdGhpcy5zZWxlY3RBbGwobWF0Y2ggPT0gbnVsbCA/IGNoaWxkcmVuXG4gICAgICA6IGNoaWxkcmVuRmlsdGVyKHR5cGVvZiBtYXRjaCA9PT0gXCJmdW5jdGlvblwiID8gbWF0Y2ggOiBjaGlsZE1hdGNoZXIobWF0Y2gpKSk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih1cGRhdGUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheSh1cGRhdGUubGVuZ3RoKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2VudGVyIHx8IHRoaXMuX2dyb3Vwcy5tYXAoc3BhcnNlKSwgdGhpcy5fcGFyZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBFbnRlck5vZGUocGFyZW50LCBkYXR1bSkge1xuICB0aGlzLm93bmVyRG9jdW1lbnQgPSBwYXJlbnQub3duZXJEb2N1bWVudDtcbiAgdGhpcy5uYW1lc3BhY2VVUkkgPSBwYXJlbnQubmFtZXNwYWNlVVJJO1xuICB0aGlzLl9uZXh0ID0gbnVsbDtcbiAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICB0aGlzLl9fZGF0YV9fID0gZGF0dW07XG59XG5cbkVudGVyTm9kZS5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBFbnRlck5vZGUsXG4gIGFwcGVuZENoaWxkOiBmdW5jdGlvbihjaGlsZCkgeyByZXR1cm4gdGhpcy5fcGFyZW50Lmluc2VydEJlZm9yZShjaGlsZCwgdGhpcy5fbmV4dCk7IH0sXG4gIGluc2VydEJlZm9yZTogZnVuY3Rpb24oY2hpbGQsIG5leHQpIHsgcmV0dXJuIHRoaXMuX3BhcmVudC5pbnNlcnRCZWZvcmUoY2hpbGQsIG5leHQpOyB9LFxuICBxdWVyeVNlbGVjdG9yOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpOyB9LFxuICBxdWVyeVNlbGVjdG9yQWxsOiBmdW5jdGlvbihzZWxlY3RvcikgeyByZXR1cm4gdGhpcy5fcGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpOyB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oeCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHg7XG4gIH07XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7RW50ZXJOb2RlfSBmcm9tIFwiLi9lbnRlci5qc1wiO1xuaW1wb3J0IGFycmF5IGZyb20gXCIuLi9hcnJheS5qc1wiO1xuaW1wb3J0IGNvbnN0YW50IGZyb20gXCIuLi9jb25zdGFudC5qc1wiO1xuXG5mdW5jdGlvbiBiaW5kSW5kZXgocGFyZW50LCBncm91cCwgZW50ZXIsIHVwZGF0ZSwgZXhpdCwgZGF0YSkge1xuICB2YXIgaSA9IDAsXG4gICAgICBub2RlLFxuICAgICAgZ3JvdXBMZW5ndGggPSBncm91cC5sZW5ndGgsXG4gICAgICBkYXRhTGVuZ3RoID0gZGF0YS5sZW5ndGg7XG5cbiAgLy8gUHV0IGFueSBub24tbnVsbCBub2RlcyB0aGF0IGZpdCBpbnRvIHVwZGF0ZS5cbiAgLy8gUHV0IGFueSBudWxsIG5vZGVzIGludG8gZW50ZXIuXG4gIC8vIFB1dCBhbnkgcmVtYWluaW5nIGRhdGEgaW50byBlbnRlci5cbiAgZm9yICg7IGkgPCBkYXRhTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICBub2RlLl9fZGF0YV9fID0gZGF0YVtpXTtcbiAgICAgIHVwZGF0ZVtpXSA9IG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVudGVyW2ldID0gbmV3IEVudGVyTm9kZShwYXJlbnQsIGRhdGFbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFB1dCBhbnkgbm9uLW51bGwgbm9kZXMgdGhhdCBkb27igJl0IGZpdCBpbnRvIGV4aXQuXG4gIGZvciAoOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiaW5kS2V5KHBhcmVudCwgZ3JvdXAsIGVudGVyLCB1cGRhdGUsIGV4aXQsIGRhdGEsIGtleSkge1xuICB2YXIgaSxcbiAgICAgIG5vZGUsXG4gICAgICBub2RlQnlLZXlWYWx1ZSA9IG5ldyBNYXAsXG4gICAgICBncm91cExlbmd0aCA9IGdyb3VwLmxlbmd0aCxcbiAgICAgIGRhdGFMZW5ndGggPSBkYXRhLmxlbmd0aCxcbiAgICAgIGtleVZhbHVlcyA9IG5ldyBBcnJheShncm91cExlbmd0aCksXG4gICAgICBrZXlWYWx1ZTtcblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggbm9kZS5cbiAgLy8gSWYgbXVsdGlwbGUgbm9kZXMgaGF2ZSB0aGUgc2FtZSBrZXksIHRoZSBkdXBsaWNhdGVzIGFyZSBhZGRlZCB0byBleGl0LlxuICBmb3IgKGkgPSAwOyBpIDwgZ3JvdXBMZW5ndGg7ICsraSkge1xuICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgIGtleVZhbHVlc1tpXSA9IGtleVZhbHVlID0ga2V5LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApICsgXCJcIjtcbiAgICAgIGlmIChub2RlQnlLZXlWYWx1ZS5oYXMoa2V5VmFsdWUpKSB7XG4gICAgICAgIGV4aXRbaV0gPSBub2RlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZUJ5S2V5VmFsdWUuc2V0KGtleVZhbHVlLCBub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDb21wdXRlIHRoZSBrZXkgZm9yIGVhY2ggZGF0dW0uXG4gIC8vIElmIHRoZXJlIGEgbm9kZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBrZXksIGpvaW4gYW5kIGFkZCBpdCB0byB1cGRhdGUuXG4gIC8vIElmIHRoZXJlIGlzIG5vdCAob3IgdGhlIGtleSBpcyBhIGR1cGxpY2F0ZSksIGFkZCBpdCB0byBlbnRlci5cbiAgZm9yIChpID0gMDsgaSA8IGRhdGFMZW5ndGg7ICsraSkge1xuICAgIGtleVZhbHVlID0ga2V5LmNhbGwocGFyZW50LCBkYXRhW2ldLCBpLCBkYXRhKSArIFwiXCI7XG4gICAgaWYgKG5vZGUgPSBub2RlQnlLZXlWYWx1ZS5nZXQoa2V5VmFsdWUpKSB7XG4gICAgICB1cGRhdGVbaV0gPSBub2RlO1xuICAgICAgbm9kZS5fX2RhdGFfXyA9IGRhdGFbaV07XG4gICAgICBub2RlQnlLZXlWYWx1ZS5kZWxldGUoa2V5VmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbnRlcltpXSA9IG5ldyBFbnRlck5vZGUocGFyZW50LCBkYXRhW2ldKTtcbiAgICB9XG4gIH1cblxuICAvLyBBZGQgYW55IHJlbWFpbmluZyBub2RlcyB0aGF0IHdlcmUgbm90IGJvdW5kIHRvIGRhdGEgdG8gZXhpdC5cbiAgZm9yIChpID0gMDsgaSA8IGdyb3VwTGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKG5vZGVCeUtleVZhbHVlLmdldChrZXlWYWx1ZXNbaV0pID09PSBub2RlKSkge1xuICAgICAgZXhpdFtpXSA9IG5vZGU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRhdHVtKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuX19kYXRhX187XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLCBkYXR1bSk7XG5cbiAgdmFyIGJpbmQgPSBrZXkgPyBiaW5kS2V5IDogYmluZEluZGV4LFxuICAgICAgcGFyZW50cyA9IHRoaXMuX3BhcmVudHMsXG4gICAgICBncm91cHMgPSB0aGlzLl9ncm91cHM7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB2YWx1ZSA9IGNvbnN0YW50KHZhbHVlKTtcblxuICBmb3IgKHZhciBtID0gZ3JvdXBzLmxlbmd0aCwgdXBkYXRlID0gbmV3IEFycmF5KG0pLCBlbnRlciA9IG5ldyBBcnJheShtKSwgZXhpdCA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICB2YXIgcGFyZW50ID0gcGFyZW50c1tqXSxcbiAgICAgICAgZ3JvdXAgPSBncm91cHNbal0sXG4gICAgICAgIGdyb3VwTGVuZ3RoID0gZ3JvdXAubGVuZ3RoLFxuICAgICAgICBkYXRhID0gYXJyYXkodmFsdWUuY2FsbChwYXJlbnQsIHBhcmVudCAmJiBwYXJlbnQuX19kYXRhX18sIGosIHBhcmVudHMpKSxcbiAgICAgICAgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoLFxuICAgICAgICBlbnRlckdyb3VwID0gZW50ZXJbal0gPSBuZXcgQXJyYXkoZGF0YUxlbmd0aCksXG4gICAgICAgIHVwZGF0ZUdyb3VwID0gdXBkYXRlW2pdID0gbmV3IEFycmF5KGRhdGFMZW5ndGgpLFxuICAgICAgICBleGl0R3JvdXAgPSBleGl0W2pdID0gbmV3IEFycmF5KGdyb3VwTGVuZ3RoKTtcblxuICAgIGJpbmQocGFyZW50LCBncm91cCwgZW50ZXJHcm91cCwgdXBkYXRlR3JvdXAsIGV4aXRHcm91cCwgZGF0YSwga2V5KTtcblxuICAgIC8vIE5vdyBjb25uZWN0IHRoZSBlbnRlciBub2RlcyB0byB0aGVpciBmb2xsb3dpbmcgdXBkYXRlIG5vZGUsIHN1Y2ggdGhhdFxuICAgIC8vIGFwcGVuZENoaWxkIGNhbiBpbnNlcnQgdGhlIG1hdGVyaWFsaXplZCBlbnRlciBub2RlIGJlZm9yZSB0aGlzIG5vZGUsXG4gICAgLy8gcmF0aGVyIHRoYW4gYXQgdGhlIGVuZCBvZiB0aGUgcGFyZW50IG5vZGUuXG4gICAgZm9yICh2YXIgaTAgPSAwLCBpMSA9IDAsIHByZXZpb3VzLCBuZXh0OyBpMCA8IGRhdGFMZW5ndGg7ICsraTApIHtcbiAgICAgIGlmIChwcmV2aW91cyA9IGVudGVyR3JvdXBbaTBdKSB7XG4gICAgICAgIGlmIChpMCA+PSBpMSkgaTEgPSBpMCArIDE7XG4gICAgICAgIHdoaWxlICghKG5leHQgPSB1cGRhdGVHcm91cFtpMV0pICYmICsraTEgPCBkYXRhTGVuZ3RoKTtcbiAgICAgICAgcHJldmlvdXMuX25leHQgPSBuZXh0IHx8IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlID0gbmV3IFNlbGVjdGlvbih1cGRhdGUsIHBhcmVudHMpO1xuICB1cGRhdGUuX2VudGVyID0gZW50ZXI7XG4gIHVwZGF0ZS5fZXhpdCA9IGV4aXQ7XG4gIHJldHVybiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oY29tcGFyZSkge1xuICBpZiAoIWNvbXBhcmUpIGNvbXBhcmUgPSBhc2NlbmRpbmc7XG5cbiAgZnVuY3Rpb24gY29tcGFyZU5vZGUoYSwgYikge1xuICAgIHJldHVybiBhICYmIGIgPyBjb21wYXJlKGEuX19kYXRhX18sIGIuX19kYXRhX18pIDogIWEgLSAhYjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHNvcnRncm91cHMgPSBuZXcgQXJyYXkobSksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIHNvcnRncm91cCA9IHNvcnRncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNvcnRncm91cFtpXSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRncm91cC5zb3J0KGNvbXBhcmVOb2RlKTtcbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHNvcnRncm91cHMsIHRoaXMuX3BhcmVudHMpLm9yZGVyKCk7XG59XG5cbmZ1bmN0aW9uIGFzY2VuZGluZyhhLCBiKSB7XG4gIHJldHVybiBhIDwgYiA/IC0xIDogYSA+IGIgPyAxIDogYSA+PSBiID8gMCA6IE5hTjtcbn1cbiIsImV4cG9ydCB2YXIgeGh0bWwgPSBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdmc6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcbiAgeGh0bWw6IHhodG1sLFxuICB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsXG4gIHhtbDogXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIixcbiAgeG1sbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cIlxufTtcbiIsImltcG9ydCBuYW1lc3BhY2VzIGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgcHJlZml4ID0gbmFtZSArPSBcIlwiLCBpID0gcHJlZml4LmluZGV4T2YoXCI6XCIpO1xuICBpZiAoaSA+PSAwICYmIChwcmVmaXggPSBuYW1lLnNsaWNlKDAsIGkpKSAhPT0gXCJ4bWxuc1wiKSBuYW1lID0gbmFtZS5zbGljZShpICsgMSk7XG4gIHJldHVybiBuYW1lc3BhY2VzLmhhc093blByb3BlcnR5KHByZWZpeCkgPyB7c3BhY2U6IG5hbWVzcGFjZXNbcHJlZml4XSwgbG9jYWw6IG5hbWV9IDogbmFtZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbn1cbiIsImltcG9ydCBuYW1lc3BhY2UgZnJvbSBcIi4uL25hbWVzcGFjZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJDb25zdGFudE5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHZhbHVlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgZWxzZSB0aGlzLnNldEF0dHJpYnV0ZShuYW1lLCB2KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHYgPT0gbnVsbCkgdGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIGVsc2UgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIHYpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIG5vZGUgPSB0aGlzLm5vZGUoKTtcbiAgICByZXR1cm4gZnVsbG5hbWUubG9jYWxcbiAgICAgICAgPyBub2RlLmdldEF0dHJpYnV0ZU5TKGZ1bGxuYW1lLnNwYWNlLCBmdWxsbmFtZS5sb2NhbClcbiAgICAgICAgOiBub2RlLmdldEF0dHJpYnV0ZShmdWxsbmFtZSk7XG4gIH1cblxuICByZXR1cm4gdGhpcy5lYWNoKCh2YWx1ZSA9PSBudWxsXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpIDogKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiXG4gICAgICA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJGdW5jdGlvbk5TIDogYXR0ckZ1bmN0aW9uKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkpKShmdWxsbmFtZSwgdmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLm93bmVyRG9jdW1lbnQgJiYgbm9kZS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSAvLyBub2RlIGlzIGEgTm9kZVxuICAgICAgfHwgKG5vZGUuZG9jdW1lbnQgJiYgbm9kZSkgLy8gbm9kZSBpcyBhIFdpbmRvd1xuICAgICAgfHwgbm9kZS5kZWZhdWx0VmlldzsgLy8gbm9kZSBpcyBhIERvY3VtZW50XG59XG4iLCJpbXBvcnQgZGVmYXVsdFZpZXcgZnJvbSBcIi4uL3dpbmRvdy5qc1wiO1xuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIHRoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgZWxzZSB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHYsIHByaW9yaXR5KTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUsIHByaW9yaXR5KSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICAgID8gc3R5bGVSZW1vdmUgOiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgPyBzdHlsZUZ1bmN0aW9uXG4gICAgICAgICAgICA6IHN0eWxlQ29uc3RhbnQpKG5hbWUsIHZhbHVlLCBwcmlvcml0eSA9PSBudWxsID8gXCJcIiA6IHByaW9yaXR5KSlcbiAgICAgIDogc3R5bGVWYWx1ZSh0aGlzLm5vZGUoKSwgbmFtZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdHlsZVZhbHVlKG5vZGUsIG5hbWUpIHtcbiAgcmV0dXJuIG5vZGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKVxuICAgICAgfHwgZGVmYXVsdFZpZXcobm9kZSkuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpO1xufVxuIiwiZnVuY3Rpb24gcHJvcGVydHlSZW1vdmUobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgZGVsZXRlIHRoaXNbbmFtZV07XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb3BlcnR5Q29uc3RhbnQobmFtZSwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXNbbmFtZV0gPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJvcGVydHlGdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHYgPSB2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIGlmICh2ID09IG51bGwpIGRlbGV0ZSB0aGlzW25hbWVdO1xuICAgIGVsc2UgdGhpc1tuYW1lXSA9IHY7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMVxuICAgICAgPyB0aGlzLmVhY2goKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IHByb3BlcnR5UmVtb3ZlIDogdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IHByb3BlcnR5RnVuY3Rpb25cbiAgICAgICAgICA6IHByb3BlcnR5Q29uc3RhbnQpKG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKClbbmFtZV07XG59XG4iLCJmdW5jdGlvbiBjbGFzc0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnRyaW0oKS5zcGxpdCgvXnxcXHMrLyk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzTGlzdChub2RlKSB7XG4gIHJldHVybiBub2RlLmNsYXNzTGlzdCB8fCBuZXcgQ2xhc3NMaXN0KG5vZGUpO1xufVxuXG5mdW5jdGlvbiBDbGFzc0xpc3Qobm9kZSkge1xuICB0aGlzLl9ub2RlID0gbm9kZTtcbiAgdGhpcy5fbmFtZXMgPSBjbGFzc0FycmF5KG5vZGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIik7XG59XG5cbkNsYXNzTGlzdC5wcm90b3R5cGUgPSB7XG4gIGFkZDogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIHRoaXMuX25hbWVzLnB1c2gobmFtZSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIHJlbW92ZTogZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBpID0gdGhpcy5fbmFtZXMuaW5kZXhPZihuYW1lKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICB0aGlzLl9uYW1lcy5zcGxpY2UoaSwgMSk7XG4gICAgICB0aGlzLl9ub2RlLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIHRoaXMuX25hbWVzLmpvaW4oXCIgXCIpKTtcbiAgICB9XG4gIH0sXG4gIGNvbnRhaW5zOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWVzLmluZGV4T2YobmFtZSkgPj0gMDtcbiAgfVxufTtcblxuZnVuY3Rpb24gY2xhc3NlZEFkZChub2RlLCBuYW1lcykge1xuICB2YXIgbGlzdCA9IGNsYXNzTGlzdChub2RlKSwgaSA9IC0xLCBuID0gbmFtZXMubGVuZ3RoO1xuICB3aGlsZSAoKytpIDwgbikgbGlzdC5hZGQobmFtZXNbaV0pO1xufVxuXG5mdW5jdGlvbiBjbGFzc2VkUmVtb3ZlKG5vZGUsIG5hbWVzKSB7XG4gIHZhciBsaXN0ID0gY2xhc3NMaXN0KG5vZGUpLCBpID0gLTEsIG4gPSBuYW1lcy5sZW5ndGg7XG4gIHdoaWxlICgrK2kgPCBuKSBsaXN0LnJlbW92ZShuYW1lc1tpXSk7XG59XG5cbmZ1bmN0aW9uIGNsYXNzZWRUcnVlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkQWRkKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZhbHNlKG5hbWVzKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBjbGFzc2VkUmVtb3ZlKHRoaXMsIG5hbWVzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xhc3NlZEZ1bmN0aW9uKG5hbWVzLCB2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgKHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgPyBjbGFzc2VkQWRkIDogY2xhc3NlZFJlbW92ZSkodGhpcywgbmFtZXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgbmFtZXMgPSBjbGFzc0FycmF5KG5hbWUgKyBcIlwiKTtcblxuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICB2YXIgbGlzdCA9IGNsYXNzTGlzdCh0aGlzLm5vZGUoKSksIGkgPSAtMSwgbiA9IG5hbWVzLmxlbmd0aDtcbiAgICB3aGlsZSAoKytpIDwgbikgaWYgKCFsaXN0LmNvbnRhaW5zKG5hbWVzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gY2xhc3NlZEZ1bmN0aW9uIDogdmFsdWVcbiAgICAgID8gY2xhc3NlZFRydWVcbiAgICAgIDogY2xhc3NlZEZhbHNlKShuYW1lcywgdmFsdWUpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRSZW1vdmUoKSB7XG4gIHRoaXMudGV4dENvbnRlbnQgPSBcIlwiO1xufVxuXG5mdW5jdGlvbiB0ZXh0Q29uc3RhbnQodmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHYgPT0gbnVsbCA/IFwiXCIgOiB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2godmFsdWUgPT0gbnVsbFxuICAgICAgICAgID8gdGV4dFJlbW92ZSA6ICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gdGV4dEZ1bmN0aW9uXG4gICAgICAgICAgOiB0ZXh0Q29uc3RhbnQpKHZhbHVlKSlcbiAgICAgIDogdGhpcy5ub2RlKCkudGV4dENvbnRlbnQ7XG59XG4iLCJmdW5jdGlvbiBodG1sUmVtb3ZlKCkge1xuICB0aGlzLmlubmVySFRNTCA9IFwiXCI7XG59XG5cbmZ1bmN0aW9uIGh0bWxDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2YWx1ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHRtbEZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgdGhpcy5pbm5lckhUTUwgPSB2ID09IG51bGwgPyBcIlwiIDogdjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5lYWNoKHZhbHVlID09IG51bGxcbiAgICAgICAgICA/IGh0bWxSZW1vdmUgOiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGh0bWxGdW5jdGlvblxuICAgICAgICAgIDogaHRtbENvbnN0YW50KSh2YWx1ZSkpXG4gICAgICA6IHRoaXMubm9kZSgpLmlubmVySFRNTDtcbn1cbiIsImZ1bmN0aW9uIHJhaXNlKCkge1xuICBpZiAodGhpcy5uZXh0U2libGluZykgdGhpcy5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChyYWlzZSk7XG59XG4iLCJmdW5jdGlvbiBsb3dlcigpIHtcbiAgaWYgKHRoaXMucHJldmlvdXNTaWJsaW5nKSB0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMsIHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gobG93ZXIpO1xufVxuIiwiaW1wb3J0IG5hbWVzcGFjZSBmcm9tIFwiLi9uYW1lc3BhY2UuanNcIjtcbmltcG9ydCB7eGh0bWx9IGZyb20gXCIuL25hbWVzcGFjZXMuanNcIjtcblxuZnVuY3Rpb24gY3JlYXRvckluaGVyaXQobmFtZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGRvY3VtZW50ID0gdGhpcy5vd25lckRvY3VtZW50LFxuICAgICAgICB1cmkgPSB0aGlzLm5hbWVzcGFjZVVSSTtcbiAgICByZXR1cm4gdXJpID09PSB4aHRtbCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQubmFtZXNwYWNlVVJJID09PSB4aHRtbFxuICAgICAgICA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQobmFtZSlcbiAgICAgICAgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModXJpLCBuYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRvckZpeGVkKGZ1bGxuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBmdWxsbmFtZSA9IG5hbWVzcGFjZShuYW1lKTtcbiAgcmV0dXJuIChmdWxsbmFtZS5sb2NhbFxuICAgICAgPyBjcmVhdG9yRml4ZWRcbiAgICAgIDogY3JlYXRvckluaGVyaXQpKGZ1bGxuYW1lKTtcbn1cbiIsImltcG9ydCBjcmVhdG9yIGZyb20gXCIuLi9jcmVhdG9yLmpzXCI7XG5pbXBvcnQgc2VsZWN0b3IgZnJvbSBcIi4uL3NlbGVjdG9yLmpzXCI7XG5cbmZ1bmN0aW9uIGNvbnN0YW50TnVsbCgpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIGJlZm9yZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpLFxuICAgICAgc2VsZWN0ID0gYmVmb3JlID09IG51bGwgPyBjb25zdGFudE51bGwgOiB0eXBlb2YgYmVmb3JlID09PSBcImZ1bmN0aW9uXCIgPyBiZWZvcmUgOiBzZWxlY3RvcihiZWZvcmUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5zZXJ0QmVmb3JlKGNyZWF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCBudWxsKTtcbiAgfSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmUoKSB7XG4gIHZhciBwYXJlbnQgPSB0aGlzLnBhcmVudE5vZGU7XG4gIGlmIChwYXJlbnQpIHBhcmVudC5yZW1vdmVDaGlsZCh0aGlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmVhY2gocmVtb3ZlKTtcbn1cbiIsImZ1bmN0aW9uIHNlbGVjdGlvbl9jbG9uZVNoYWxsb3coKSB7XG4gIHZhciBjbG9uZSA9IHRoaXMuY2xvbmVOb2RlKGZhbHNlKSwgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuICByZXR1cm4gcGFyZW50ID8gcGFyZW50Lmluc2VydEJlZm9yZShjbG9uZSwgdGhpcy5uZXh0U2libGluZykgOiBjbG9uZTtcbn1cblxuZnVuY3Rpb24gc2VsZWN0aW9uX2Nsb25lRGVlcCgpIHtcbiAgdmFyIGNsb25lID0gdGhpcy5jbG9uZU5vZGUodHJ1ZSksIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgcmV0dXJuIHBhcmVudCA/IHBhcmVudC5pbnNlcnRCZWZvcmUoY2xvbmUsIHRoaXMubmV4dFNpYmxpbmcpIDogY2xvbmU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlZXApIHtcbiAgcmV0dXJuIHRoaXMuc2VsZWN0KGRlZXAgPyBzZWxlY3Rpb25fY2xvbmVEZWVwIDogc2VsZWN0aW9uX2Nsb25lU2hhbGxvdyk7XG59XG4iLCJmdW5jdGlvbiBjb250ZXh0TGlzdGVuZXIobGlzdGVuZXIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgbGlzdGVuZXIuY2FsbCh0aGlzLCBldmVudCwgdGhpcy5fX2RhdGFfXyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lcykge1xuICByZXR1cm4gdHlwZW5hbWVzLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICB2YXIgbmFtZSA9IFwiXCIsIGkgPSB0LmluZGV4T2YoXCIuXCIpO1xuICAgIGlmIChpID49IDApIG5hbWUgPSB0LnNsaWNlKGkgKyAxKSwgdCA9IHQuc2xpY2UoMCwgaSk7XG4gICAgcmV0dXJuIHt0eXBlOiB0LCBuYW1lOiBuYW1lfTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIG9uUmVtb3ZlKHR5cGVuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgb24gPSB0aGlzLl9fb247XG4gICAgaWYgKCFvbikgcmV0dXJuO1xuICAgIGZvciAodmFyIGogPSAwLCBpID0gLTEsIG0gPSBvbi5sZW5ndGgsIG87IGogPCBtOyArK2opIHtcbiAgICAgIGlmIChvID0gb25bal0sICghdHlwZW5hbWUudHlwZSB8fCBvLnR5cGUgPT09IHR5cGVuYW1lLnR5cGUpICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25bKytpXSA9IG87XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgrK2kpIG9uLmxlbmd0aCA9IGk7XG4gICAgZWxzZSBkZWxldGUgdGhpcy5fX29uO1xuICB9O1xufVxuXG5mdW5jdGlvbiBvbkFkZCh0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBvbiA9IHRoaXMuX19vbiwgbywgbGlzdGVuZXIgPSBjb250ZXh0TGlzdGVuZXIodmFsdWUpO1xuICAgIGlmIChvbikgZm9yICh2YXIgaiA9IDAsIG0gPSBvbi5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICAgIGlmICgobyA9IG9uW2pdKS50eXBlID09PSB0eXBlbmFtZS50eXBlICYmIG8ubmFtZSA9PT0gdHlwZW5hbWUubmFtZSkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyLCBvLm9wdGlvbnMpO1xuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoby50eXBlLCBvLmxpc3RlbmVyID0gbGlzdGVuZXIsIG8ub3B0aW9ucyA9IG9wdGlvbnMpO1xuICAgICAgICBvLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKHR5cGVuYW1lLnR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgICBvID0ge3R5cGU6IHR5cGVuYW1lLnR5cGUsIG5hbWU6IHR5cGVuYW1lLm5hbWUsIHZhbHVlOiB2YWx1ZSwgbGlzdGVuZXI6IGxpc3RlbmVyLCBvcHRpb25zOiBvcHRpb25zfTtcbiAgICBpZiAoIW9uKSB0aGlzLl9fb24gPSBbb107XG4gICAgZWxzZSBvbi5wdXNoKG8pO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih0eXBlbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHR5cGVuYW1lcyA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiksIGksIG4gPSB0eXBlbmFtZXMubGVuZ3RoLCB0O1xuXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMikge1xuICAgIHZhciBvbiA9IHRoaXMubm9kZSgpLl9fb247XG4gICAgaWYgKG9uKSBmb3IgKHZhciBqID0gMCwgbSA9IG9uLmxlbmd0aCwgbzsgaiA8IG07ICsraikge1xuICAgICAgZm9yIChpID0gMCwgbyA9IG9uW2pdOyBpIDwgbjsgKytpKSB7XG4gICAgICAgIGlmICgodCA9IHR5cGVuYW1lc1tpXSkudHlwZSA9PT0gby50eXBlICYmIHQubmFtZSA9PT0gby5uYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG8udmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb24gPSB2YWx1ZSA/IG9uQWRkIDogb25SZW1vdmU7XG4gIGZvciAoaSA9IDA7IGkgPCBuOyArK2kpIHRoaXMuZWFjaChvbih0eXBlbmFtZXNbaV0sIHZhbHVlLCBvcHRpb25zKSk7XG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGRlZmF1bHRWaWV3IGZyb20gXCIuLi93aW5kb3cuanNcIjtcblxuZnVuY3Rpb24gZGlzcGF0Y2hFdmVudChub2RlLCB0eXBlLCBwYXJhbXMpIHtcbiAgdmFyIHdpbmRvdyA9IGRlZmF1bHRWaWV3KG5vZGUpLFxuICAgICAgZXZlbnQgPSB3aW5kb3cuQ3VzdG9tRXZlbnQ7XG5cbiAgaWYgKHR5cGVvZiBldmVudCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZXZlbnQgPSBuZXcgZXZlbnQodHlwZSwgcGFyYW1zKTtcbiAgfSBlbHNlIHtcbiAgICBldmVudCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFdmVudChcIkV2ZW50XCIpO1xuICAgIGlmIChwYXJhbXMpIGV2ZW50LmluaXRFdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUpLCBldmVudC5kZXRhaWwgPSBwYXJhbXMuZGV0YWlsO1xuICAgIGVsc2UgZXZlbnQuaW5pdEV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gIH1cblxuICBub2RlLmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnN0YW50KHR5cGUsIHBhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRpc3BhdGNoRXZlbnQodGhpcywgdHlwZSwgcGFyYW1zKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hGdW5jdGlvbih0eXBlLCBwYXJhbXMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBkaXNwYXRjaEV2ZW50KHRoaXMsIHR5cGUsIHBhcmFtcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHlwZSwgcGFyYW1zKSB7XG4gIHJldHVybiB0aGlzLmVhY2goKHR5cGVvZiBwYXJhbXMgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgPyBkaXNwYXRjaEZ1bmN0aW9uXG4gICAgICA6IGRpc3BhdGNoQ29uc3RhbnQpKHR5cGUsIHBhcmFtcykpO1xufVxuIiwiaW1wb3J0IHNlbGVjdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX3NlbGVjdEFsbCBmcm9tIFwiLi9zZWxlY3RBbGwuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQgZnJvbSBcIi4vc2VsZWN0Q2hpbGQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4gZnJvbSBcIi4vc2VsZWN0Q2hpbGRyZW4uanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXRhIGZyb20gXCIuL2RhdGEuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW50ZXIgZnJvbSBcIi4vZW50ZXIuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZXhpdCBmcm9tIFwiLi9leGl0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2pvaW4gZnJvbSBcIi4vam9pbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9tZXJnZSBmcm9tIFwiLi9tZXJnZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vcmRlciBmcm9tIFwiLi9vcmRlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zb3J0IGZyb20gXCIuL3NvcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fY2FsbCBmcm9tIFwiLi9jYWxsLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGVzIGZyb20gXCIuL25vZGVzLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX25vZGUgZnJvbSBcIi4vbm9kZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zaXplIGZyb20gXCIuL3NpemUuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZW1wdHkgZnJvbSBcIi4vZW1wdHkuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fZWFjaCBmcm9tIFwiLi9lYWNoLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2F0dHIgZnJvbSBcIi4vYXR0ci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9wcm9wZXJ0eSBmcm9tIFwiLi9wcm9wZXJ0eS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbGFzc2VkIGZyb20gXCIuL2NsYXNzZWQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdGV4dCBmcm9tIFwiLi90ZXh0LmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2h0bWwgZnJvbSBcIi4vaHRtbC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9yYWlzZSBmcm9tIFwiLi9yYWlzZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9sb3dlciBmcm9tIFwiLi9sb3dlci5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9hcHBlbmQgZnJvbSBcIi4vYXBwZW5kLmpzXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2luc2VydCBmcm9tIFwiLi9pbnNlcnQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fcmVtb3ZlIGZyb20gXCIuL3JlbW92ZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9jbG9uZSBmcm9tIFwiLi9jbG9uZS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kYXR1bSBmcm9tIFwiLi9kYXR1bS5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9vbiBmcm9tIFwiLi9vbi5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9kaXNwYXRjaCBmcm9tIFwiLi9kaXNwYXRjaC5qc1wiO1xuaW1wb3J0IHNlbGVjdGlvbl9pdGVyYXRvciBmcm9tIFwiLi9pdGVyYXRvci5qc1wiO1xuXG5leHBvcnQgdmFyIHJvb3QgPSBbbnVsbF07XG5cbmV4cG9ydCBmdW5jdGlvbiBTZWxlY3Rpb24oZ3JvdXBzLCBwYXJlbnRzKSB7XG4gIHRoaXMuX2dyb3VwcyA9IGdyb3VwcztcbiAgdGhpcy5fcGFyZW50cyA9IHBhcmVudHM7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5kb2N1bWVudEVsZW1lbnRdXSwgcm9vdCk7XG59XG5cbmZ1bmN0aW9uIHNlbGVjdGlvbl9zZWxlY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzO1xufVxuXG5TZWxlY3Rpb24ucHJvdG90eXBlID0gc2VsZWN0aW9uLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFNlbGVjdGlvbixcbiAgc2VsZWN0OiBzZWxlY3Rpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHNlbGVjdGlvbl9zZWxlY3RBbGwsXG4gIHNlbGVjdENoaWxkOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGQsXG4gIHNlbGVjdENoaWxkcmVuOiBzZWxlY3Rpb25fc2VsZWN0Q2hpbGRyZW4sXG4gIGZpbHRlcjogc2VsZWN0aW9uX2ZpbHRlcixcbiAgZGF0YTogc2VsZWN0aW9uX2RhdGEsXG4gIGVudGVyOiBzZWxlY3Rpb25fZW50ZXIsXG4gIGV4aXQ6IHNlbGVjdGlvbl9leGl0LFxuICBqb2luOiBzZWxlY3Rpb25fam9pbixcbiAgbWVyZ2U6IHNlbGVjdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiBzZWxlY3Rpb25fc2VsZWN0aW9uLFxuICBvcmRlcjogc2VsZWN0aW9uX29yZGVyLFxuICBzb3J0OiBzZWxlY3Rpb25fc29ydCxcbiAgY2FsbDogc2VsZWN0aW9uX2NhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fbm9kZXMsXG4gIG5vZGU6IHNlbGVjdGlvbl9ub2RlLFxuICBzaXplOiBzZWxlY3Rpb25fc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9lbXB0eSxcbiAgZWFjaDogc2VsZWN0aW9uX2VhY2gsXG4gIGF0dHI6IHNlbGVjdGlvbl9hdHRyLFxuICBzdHlsZTogc2VsZWN0aW9uX3N0eWxlLFxuICBwcm9wZXJ0eTogc2VsZWN0aW9uX3Byb3BlcnR5LFxuICBjbGFzc2VkOiBzZWxlY3Rpb25fY2xhc3NlZCxcbiAgdGV4dDogc2VsZWN0aW9uX3RleHQsXG4gIGh0bWw6IHNlbGVjdGlvbl9odG1sLFxuICByYWlzZTogc2VsZWN0aW9uX3JhaXNlLFxuICBsb3dlcjogc2VsZWN0aW9uX2xvd2VyLFxuICBhcHBlbmQ6IHNlbGVjdGlvbl9hcHBlbmQsXG4gIGluc2VydDogc2VsZWN0aW9uX2luc2VydCxcbiAgcmVtb3ZlOiBzZWxlY3Rpb25fcmVtb3ZlLFxuICBjbG9uZTogc2VsZWN0aW9uX2Nsb25lLFxuICBkYXR1bTogc2VsZWN0aW9uX2RhdHVtLFxuICBvbjogc2VsZWN0aW9uX29uLFxuICBkaXNwYXRjaDogc2VsZWN0aW9uX2Rpc3BhdGNoLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX2l0ZXJhdG9yXG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZWxlY3Rpb247XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzZWxlY3RvciBmcm9tIFwiLi4vc2VsZWN0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0KSB7XG4gIGlmICh0eXBlb2Ygc2VsZWN0ICE9PSBcImZ1bmN0aW9uXCIpIHNlbGVjdCA9IHNlbGVjdG9yKHNlbGVjdCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IG5ldyBBcnJheShuKSwgbm9kZSwgc3Vibm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiAoc3Vibm9kZSA9IHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkpIHtcbiAgICAgICAgaWYgKFwiX19kYXRhX19cIiBpbiBub2RlKSBzdWJub2RlLl9fZGF0YV9fID0gbm9kZS5fX2RhdGFfXztcbiAgICAgICAgc3ViZ3JvdXBbaV0gPSBzdWJub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBhcnJheSBmcm9tIFwiLi4vYXJyYXkuanNcIjtcbmltcG9ydCBzZWxlY3RvckFsbCBmcm9tIFwiLi4vc2VsZWN0b3JBbGwuanNcIjtcblxuZnVuY3Rpb24gYXJyYXlBbGwoc2VsZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgZ3JvdXAgPSBzZWxlY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICByZXR1cm4gZ3JvdXAgPT0gbnVsbCA/IFtdIDogYXJyYXkoZ3JvdXApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgaWYgKHR5cGVvZiBzZWxlY3QgPT09IFwiZnVuY3Rpb25cIikgc2VsZWN0ID0gYXJyYXlBbGwoc2VsZWN0KTtcbiAgZWxzZSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHN1Ymdyb3Vwcy5wdXNoKHNlbGVjdC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSk7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihzdWJncm91cHMsIHBhcmVudHMpO1xufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb259IGZyb20gXCIuL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2hlciBmcm9tIFwiLi4vbWF0Y2hlci5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihtYXRjaCkge1xuICBpZiAodHlwZW9mIG1hdGNoICE9PSBcImZ1bmN0aW9uXCIpIG1hdGNoID0gbWF0Y2hlcihtYXRjaCk7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBtID0gZ3JvdXBzLmxlbmd0aCwgc3ViZ3JvdXBzID0gbmV3IEFycmF5KG0pLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBzdWJncm91cCA9IHN1Ymdyb3Vwc1tqXSA9IFtdLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKChub2RlID0gZ3JvdXBbaV0pICYmIG1hdGNoLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApKSB7XG4gICAgICAgIHN1Ymdyb3VwLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBTZWxlY3Rpb24oc3ViZ3JvdXBzLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImltcG9ydCBzcGFyc2UgZnJvbSBcIi4vc3BhcnNlLmpzXCI7XG5pbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2V4aXQgfHwgdGhpcy5fZ3JvdXBzLm1hcChzcGFyc2UpLCB0aGlzLl9wYXJlbnRzKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG9uZW50ZXIsIG9udXBkYXRlLCBvbmV4aXQpIHtcbiAgdmFyIGVudGVyID0gdGhpcy5lbnRlcigpLCB1cGRhdGUgPSB0aGlzLCBleGl0ID0gdGhpcy5leGl0KCk7XG4gIGVudGVyID0gdHlwZW9mIG9uZW50ZXIgPT09IFwiZnVuY3Rpb25cIiA/IG9uZW50ZXIoZW50ZXIpIDogZW50ZXIuYXBwZW5kKG9uZW50ZXIgKyBcIlwiKTtcbiAgaWYgKG9udXBkYXRlICE9IG51bGwpIHVwZGF0ZSA9IG9udXBkYXRlKHVwZGF0ZSk7XG4gIGlmIChvbmV4aXQgPT0gbnVsbCkgZXhpdC5yZW1vdmUoKTsgZWxzZSBvbmV4aXQoZXhpdCk7XG4gIHJldHVybiBlbnRlciAmJiB1cGRhdGUgPyBlbnRlci5tZXJnZSh1cGRhdGUpLm9yZGVyKCkgOiB1cGRhdGU7XG59XG4iLCJpbXBvcnQge1NlbGVjdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc2VsZWN0aW9uKSB7XG4gIGlmICghKHNlbGVjdGlvbiBpbnN0YW5jZW9mIFNlbGVjdGlvbikpIHRocm93IG5ldyBFcnJvcihcImludmFsaWQgbWVyZ2VcIik7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHNlbGVjdGlvbi5fZ3JvdXBzLCBtMCA9IGdyb3VwczAubGVuZ3RoLCBtMSA9IGdyb3VwczEubGVuZ3RoLCBtID0gTWF0aC5taW4obTAsIG0xKSwgbWVyZ2VzID0gbmV3IEFycmF5KG0wKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cDAgPSBncm91cHMwW2pdLCBncm91cDEgPSBncm91cHMxW2pdLCBuID0gZ3JvdXAwLmxlbmd0aCwgbWVyZ2UgPSBtZXJnZXNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwMFtpXSB8fCBncm91cDFbaV0pIHtcbiAgICAgICAgbWVyZ2VbaV0gPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBqIDwgbTA7ICsraikge1xuICAgIG1lcmdlc1tqXSA9IGdyb3VwczBbal07XG4gIH1cblxuICByZXR1cm4gbmV3IFNlbGVjdGlvbihtZXJnZXMsIHRoaXMuX3BhcmVudHMpO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gLTEsIG0gPSBncm91cHMubGVuZ3RoOyArK2ogPCBtOykge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gZ3JvdXAubGVuZ3RoIC0gMSwgbmV4dCA9IGdyb3VwW2ldLCBub2RlOyAtLWkgPj0gMDspIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIHtcbiAgICAgICAgaWYgKG5leHQgJiYgbm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihuZXh0KSBeIDQpIG5leHQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbmV4dCk7XG4gICAgICAgIG5leHQgPSBub2RlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1swXTtcbiAgYXJndW1lbnRzWzBdID0gdGhpcztcbiAgY2FsbGJhY2suYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20odGhpcyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIGogPSAwLCBtID0gZ3JvdXBzLmxlbmd0aDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBpID0gMCwgbiA9IGdyb3VwLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgdmFyIG5vZGUgPSBncm91cFtpXTtcbiAgICAgIGlmIChub2RlKSByZXR1cm4gbm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKCkge1xuICBsZXQgc2l6ZSA9IDA7XG4gIGZvciAoY29uc3Qgbm9kZSBvZiB0aGlzKSArK3NpemU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgcmV0dXJuIHNpemU7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuICF0aGlzLm5vZGUoKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cbiAgZm9yICh2YXIgZ3JvdXBzID0gdGhpcy5fZ3JvdXBzLCBqID0gMCwgbSA9IGdyb3Vwcy5sZW5ndGg7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgaSA9IDAsIG4gPSBncm91cC5sZW5ndGgsIG5vZGU7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmIChub2RlID0gZ3JvdXBbaV0pIGNhbGxiYWNrLmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IGNyZWF0b3IgZnJvbSBcIi4uL2NyZWF0b3IuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSkge1xuICB2YXIgY3JlYXRlID0gdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiA/IG5hbWUgOiBjcmVhdG9yKG5hbWUpO1xuICByZXR1cm4gdGhpcy5zZWxlY3QoZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kQ2hpbGQoY3JlYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9KTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMucHJvcGVydHkoXCJfX2RhdGFfX1wiLCB2YWx1ZSlcbiAgICAgIDogdGhpcy5ub2RlKCkuX19kYXRhX187XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiooKSB7XG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgaiA9IDAsIG0gPSBncm91cHMubGVuZ3RoOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIGkgPSAwLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB5aWVsZCBub2RlO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHtTZWxlY3Rpb24sIHJvb3R9IGZyb20gXCIuL3NlbGVjdGlvbi9pbmRleC5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3Rvcikge1xuICByZXR1cm4gdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiXG4gICAgICA/IG5ldyBTZWxlY3Rpb24oW1tkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNlbGVjdG9yKV1dLCBbZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50XSlcbiAgICAgIDogbmV3IFNlbGVjdGlvbihbW3NlbGVjdG9yXV0sIHJvb3QpO1xufVxuIiwidmFyIG5vb3AgPSB7dmFsdWU6ICgpID0+IHt9fTtcblxuZnVuY3Rpb24gZGlzcGF0Y2goKSB7XG4gIGZvciAodmFyIGkgPSAwLCBuID0gYXJndW1lbnRzLmxlbmd0aCwgXyA9IHt9LCB0OyBpIDwgbjsgKytpKSB7XG4gICAgaWYgKCEodCA9IGFyZ3VtZW50c1tpXSArIFwiXCIpIHx8ICh0IGluIF8pIHx8IC9bXFxzLl0vLnRlc3QodCkpIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgdHlwZTogXCIgKyB0KTtcbiAgICBfW3RdID0gW107XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXNwYXRjaChfKTtcbn1cblxuZnVuY3Rpb24gRGlzcGF0Y2goXykge1xuICB0aGlzLl8gPSBfO1xufVxuXG5mdW5jdGlvbiBwYXJzZVR5cGVuYW1lcyh0eXBlbmFtZXMsIHR5cGVzKSB7XG4gIHJldHVybiB0eXBlbmFtZXMudHJpbSgpLnNwbGl0KC9efFxccysvKS5tYXAoZnVuY3Rpb24odCkge1xuICAgIHZhciBuYW1lID0gXCJcIiwgaSA9IHQuaW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGkgPj0gMCkgbmFtZSA9IHQuc2xpY2UoaSArIDEpLCB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICBpZiAodCAmJiAhdHlwZXMuaGFzT3duUHJvcGVydHkodCkpIHRocm93IG5ldyBFcnJvcihcInVua25vd24gdHlwZTogXCIgKyB0KTtcbiAgICByZXR1cm4ge3R5cGU6IHQsIG5hbWU6IG5hbWV9O1xuICB9KTtcbn1cblxuRGlzcGF0Y2gucHJvdG90eXBlID0gZGlzcGF0Y2gucHJvdG90eXBlID0ge1xuICBjb25zdHJ1Y3RvcjogRGlzcGF0Y2gsXG4gIG9uOiBmdW5jdGlvbih0eXBlbmFtZSwgY2FsbGJhY2spIHtcbiAgICB2YXIgXyA9IHRoaXMuXyxcbiAgICAgICAgVCA9IHBhcnNlVHlwZW5hbWVzKHR5cGVuYW1lICsgXCJcIiwgXyksXG4gICAgICAgIHQsXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IFQubGVuZ3RoO1xuXG4gICAgLy8gSWYgbm8gY2FsbGJhY2sgd2FzIHNwZWNpZmllZCwgcmV0dXJuIHRoZSBjYWxsYmFjayBvZiB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDIpIHtcbiAgICAgIHdoaWxlICgrK2kgPCBuKSBpZiAoKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSAmJiAodCA9IGdldChfW3RdLCB0eXBlbmFtZS5uYW1lKSkpIHJldHVybiB0O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIGEgdHlwZSB3YXMgc3BlY2lmaWVkLCBzZXQgdGhlIGNhbGxiYWNrIGZvciB0aGUgZ2l2ZW4gdHlwZSBhbmQgbmFtZS5cbiAgICAvLyBPdGhlcndpc2UsIGlmIGEgbnVsbCBjYWxsYmFjayB3YXMgc3BlY2lmaWVkLCByZW1vdmUgY2FsbGJhY2tzIG9mIHRoZSBnaXZlbiBuYW1lLlxuICAgIGlmIChjYWxsYmFjayAhPSBudWxsICYmIHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxiYWNrOiBcIiArIGNhbGxiYWNrKTtcbiAgICB3aGlsZSAoKytpIDwgbikge1xuICAgICAgaWYgKHQgPSAodHlwZW5hbWUgPSBUW2ldKS50eXBlKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIGVsc2UgaWYgKGNhbGxiYWNrID09IG51bGwpIGZvciAodCBpbiBfKSBfW3RdID0gc2V0KF9bdF0sIHR5cGVuYW1lLm5hbWUsIG51bGwpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBjb3B5OiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29weSA9IHt9LCBfID0gdGhpcy5fO1xuICAgIGZvciAodmFyIHQgaW4gXykgY29weVt0XSA9IF9bdF0uc2xpY2UoKTtcbiAgICByZXR1cm4gbmV3IERpc3BhdGNoKGNvcHkpO1xuICB9LFxuICBjYWxsOiBmdW5jdGlvbih0eXBlLCB0aGF0KSB7XG4gICAgaWYgKChuID0gYXJndW1lbnRzLmxlbmd0aCAtIDIpID4gMCkgZm9yICh2YXIgYXJncyA9IG5ldyBBcnJheShuKSwgaSA9IDAsIG4sIHQ7IGkgPCBuOyArK2kpIGFyZ3NbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh0ID0gdGhpcy5fW3R5cGVdLCBpID0gMCwgbiA9IHQubGVuZ3RoOyBpIDwgbjsgKytpKSB0W2ldLnZhbHVlLmFwcGx5KHRoYXQsIGFyZ3MpO1xuICB9LFxuICBhcHBseTogZnVuY3Rpb24odHlwZSwgdGhhdCwgYXJncykge1xuICAgIGlmICghdGhpcy5fLmhhc093blByb3BlcnR5KHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHR5cGU6IFwiICsgdHlwZSk7XG4gICAgZm9yICh2YXIgdCA9IHRoaXMuX1t0eXBlXSwgaSA9IDAsIG4gPSB0Lmxlbmd0aDsgaSA8IG47ICsraSkgdFtpXS52YWx1ZS5hcHBseSh0aGF0LCBhcmdzKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gZ2V0KHR5cGUsIG5hbWUpIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aCwgYzsgaSA8IG47ICsraSkge1xuICAgIGlmICgoYyA9IHR5cGVbaV0pLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHJldHVybiBjLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXQodHlwZSwgbmFtZSwgY2FsbGJhY2spIHtcbiAgZm9yICh2YXIgaSA9IDAsIG4gPSB0eXBlLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgIGlmICh0eXBlW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgIHR5cGVbaV0gPSBub29wLCB0eXBlID0gdHlwZS5zbGljZSgwLCBpKS5jb25jYXQodHlwZS5zbGljZShpICsgMSkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjayAhPSBudWxsKSB0eXBlLnB1c2goe25hbWU6IG5hbWUsIHZhbHVlOiBjYWxsYmFja30pO1xuICByZXR1cm4gdHlwZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlzcGF0Y2g7XG4iLCJ2YXIgZnJhbWUgPSAwLCAvLyBpcyBhbiBhbmltYXRpb24gZnJhbWUgcGVuZGluZz9cbiAgICB0aW1lb3V0ID0gMCwgLy8gaXMgYSB0aW1lb3V0IHBlbmRpbmc/XG4gICAgaW50ZXJ2YWwgPSAwLCAvLyBhcmUgYW55IHRpbWVycyBhY3RpdmU/XG4gICAgcG9rZURlbGF5ID0gMTAwMCwgLy8gaG93IGZyZXF1ZW50bHkgd2UgY2hlY2sgZm9yIGNsb2NrIHNrZXdcbiAgICB0YXNrSGVhZCxcbiAgICB0YXNrVGFpbCxcbiAgICBjbG9ja0xhc3QgPSAwLFxuICAgIGNsb2NrTm93ID0gMCxcbiAgICBjbG9ja1NrZXcgPSAwLFxuICAgIGNsb2NrID0gdHlwZW9mIHBlcmZvcm1hbmNlID09PSBcIm9iamVjdFwiICYmIHBlcmZvcm1hbmNlLm5vdyA/IHBlcmZvcm1hbmNlIDogRGF0ZSxcbiAgICBzZXRGcmFtZSA9IHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpIDogZnVuY3Rpb24oZikgeyBzZXRUaW1lb3V0KGYsIDE3KTsgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIGNsb2NrTm93IHx8IChzZXRGcmFtZShjbGVhck5vdyksIGNsb2NrTm93ID0gY2xvY2subm93KCkgKyBjbG9ja1NrZXcpO1xufVxuXG5mdW5jdGlvbiBjbGVhck5vdygpIHtcbiAgY2xvY2tOb3cgPSAwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gVGltZXIoKSB7XG4gIHRoaXMuX2NhbGwgPVxuICB0aGlzLl90aW1lID1cbiAgdGhpcy5fbmV4dCA9IG51bGw7XG59XG5cblRpbWVyLnByb3RvdHlwZSA9IHRpbWVyLnByb3RvdHlwZSA9IHtcbiAgY29uc3RydWN0b3I6IFRpbWVyLFxuICByZXN0YXJ0OiBmdW5jdGlvbihjYWxsYmFjaywgZGVsYXksIHRpbWUpIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICB0aW1lID0gKHRpbWUgPT0gbnVsbCA/IG5vdygpIDogK3RpbWUpICsgKGRlbGF5ID09IG51bGwgPyAwIDogK2RlbGF5KTtcbiAgICBpZiAoIXRoaXMuX25leHQgJiYgdGFza1RhaWwgIT09IHRoaXMpIHtcbiAgICAgIGlmICh0YXNrVGFpbCkgdGFza1RhaWwuX25leHQgPSB0aGlzO1xuICAgICAgZWxzZSB0YXNrSGVhZCA9IHRoaXM7XG4gICAgICB0YXNrVGFpbCA9IHRoaXM7XG4gICAgfVxuICAgIHRoaXMuX2NhbGwgPSBjYWxsYmFjaztcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICBzbGVlcCgpO1xuICB9LFxuICBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2FsbCkge1xuICAgICAgdGhpcy5fY2FsbCA9IG51bGw7XG4gICAgICB0aGlzLl90aW1lID0gSW5maW5pdHk7XG4gICAgICBzbGVlcCgpO1xuICAgIH1cbiAgfVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgdC5yZXN0YXJ0KGNhbGxiYWNrLCBkZWxheSwgdGltZSk7XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZXJGbHVzaCgpIHtcbiAgbm93KCk7IC8vIEdldCB0aGUgY3VycmVudCB0aW1lLCBpZiBub3QgYWxyZWFkeSBzZXQuXG4gICsrZnJhbWU7IC8vIFByZXRlbmQgd2XigJl2ZSBzZXQgYW4gYWxhcm0sIGlmIHdlIGhhdmVu4oCZdCBhbHJlYWR5LlxuICB2YXIgdCA9IHRhc2tIZWFkLCBlO1xuICB3aGlsZSAodCkge1xuICAgIGlmICgoZSA9IGNsb2NrTm93IC0gdC5fdGltZSkgPj0gMCkgdC5fY2FsbC5jYWxsKG51bGwsIGUpO1xuICAgIHQgPSB0Ll9uZXh0O1xuICB9XG4gIC0tZnJhbWU7XG59XG5cbmZ1bmN0aW9uIHdha2UoKSB7XG4gIGNsb2NrTm93ID0gKGNsb2NrTGFzdCA9IGNsb2NrLm5vdygpKSArIGNsb2NrU2tldztcbiAgZnJhbWUgPSB0aW1lb3V0ID0gMDtcbiAgdHJ5IHtcbiAgICB0aW1lckZsdXNoKCk7XG4gIH0gZmluYWxseSB7XG4gICAgZnJhbWUgPSAwO1xuICAgIG5hcCgpO1xuICAgIGNsb2NrTm93ID0gMDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb2tlKCkge1xuICB2YXIgbm93ID0gY2xvY2subm93KCksIGRlbGF5ID0gbm93IC0gY2xvY2tMYXN0O1xuICBpZiAoZGVsYXkgPiBwb2tlRGVsYXkpIGNsb2NrU2tldyAtPSBkZWxheSwgY2xvY2tMYXN0ID0gbm93O1xufVxuXG5mdW5jdGlvbiBuYXAoKSB7XG4gIHZhciB0MCwgdDEgPSB0YXNrSGVhZCwgdDIsIHRpbWUgPSBJbmZpbml0eTtcbiAgd2hpbGUgKHQxKSB7XG4gICAgaWYgKHQxLl9jYWxsKSB7XG4gICAgICBpZiAodGltZSA+IHQxLl90aW1lKSB0aW1lID0gdDEuX3RpbWU7XG4gICAgICB0MCA9IHQxLCB0MSA9IHQxLl9uZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0MiA9IHQxLl9uZXh0LCB0MS5fbmV4dCA9IG51bGw7XG4gICAgICB0MSA9IHQwID8gdDAuX25leHQgPSB0MiA6IHRhc2tIZWFkID0gdDI7XG4gICAgfVxuICB9XG4gIHRhc2tUYWlsID0gdDA7XG4gIHNsZWVwKHRpbWUpO1xufVxuXG5mdW5jdGlvbiBzbGVlcCh0aW1lKSB7XG4gIGlmIChmcmFtZSkgcmV0dXJuOyAvLyBTb29uZXN0IGFsYXJtIGFscmVhZHkgc2V0LCBvciB3aWxsIGJlLlxuICBpZiAodGltZW91dCkgdGltZW91dCA9IGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgdmFyIGRlbGF5ID0gdGltZSAtIGNsb2NrTm93OyAvLyBTdHJpY3RseSBsZXNzIHRoYW4gaWYgd2UgcmVjb21wdXRlZCBjbG9ja05vdy5cbiAgaWYgKGRlbGF5ID4gMjQpIHtcbiAgICBpZiAodGltZSA8IEluZmluaXR5KSB0aW1lb3V0ID0gc2V0VGltZW91dCh3YWtlLCB0aW1lIC0gY2xvY2subm93KCkgLSBjbG9ja1NrZXcpO1xuICAgIGlmIChpbnRlcnZhbCkgaW50ZXJ2YWwgPSBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWludGVydmFsKSBjbG9ja0xhc3QgPSBjbG9jay5ub3coKSwgaW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChwb2tlLCBwb2tlRGVsYXkpO1xuICAgIGZyYW1lID0gMSwgc2V0RnJhbWUod2FrZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7VGltZXJ9IGZyb20gXCIuL3RpbWVyLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGNhbGxiYWNrLCBkZWxheSwgdGltZSkge1xuICB2YXIgdCA9IG5ldyBUaW1lcjtcbiAgZGVsYXkgPSBkZWxheSA9PSBudWxsID8gMCA6ICtkZWxheTtcbiAgdC5yZXN0YXJ0KGVsYXBzZWQgPT4ge1xuICAgIHQuc3RvcCgpO1xuICAgIGNhbGxiYWNrKGVsYXBzZWQgKyBkZWxheSk7XG4gIH0sIGRlbGF5LCB0aW1lKTtcbiAgcmV0dXJuIHQ7XG59XG4iLCJpbXBvcnQge2Rpc3BhdGNofSBmcm9tIFwiZDMtZGlzcGF0Y2hcIjtcbmltcG9ydCB7dGltZXIsIHRpbWVvdXR9IGZyb20gXCJkMy10aW1lclwiO1xuXG52YXIgZW1wdHlPbiA9IGRpc3BhdGNoKFwic3RhcnRcIiwgXCJlbmRcIiwgXCJjYW5jZWxcIiwgXCJpbnRlcnJ1cHRcIik7XG52YXIgZW1wdHlUd2VlbiA9IFtdO1xuXG5leHBvcnQgdmFyIENSRUFURUQgPSAwO1xuZXhwb3J0IHZhciBTQ0hFRFVMRUQgPSAxO1xuZXhwb3J0IHZhciBTVEFSVElORyA9IDI7XG5leHBvcnQgdmFyIFNUQVJURUQgPSAzO1xuZXhwb3J0IHZhciBSVU5OSU5HID0gNDtcbmV4cG9ydCB2YXIgRU5ESU5HID0gNTtcbmV4cG9ydCB2YXIgRU5ERUQgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lLCBpZCwgaW5kZXgsIGdyb3VwLCB0aW1pbmcpIHtcbiAgdmFyIHNjaGVkdWxlcyA9IG5vZGUuX190cmFuc2l0aW9uO1xuICBpZiAoIXNjaGVkdWxlcykgbm9kZS5fX3RyYW5zaXRpb24gPSB7fTtcbiAgZWxzZSBpZiAoaWQgaW4gc2NoZWR1bGVzKSByZXR1cm47XG4gIGNyZWF0ZShub2RlLCBpZCwge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgaW5kZXg6IGluZGV4LCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgZ3JvdXA6IGdyb3VwLCAvLyBGb3IgY29udGV4dCBkdXJpbmcgY2FsbGJhY2suXG4gICAgb246IGVtcHR5T24sXG4gICAgdHdlZW46IGVtcHR5VHdlZW4sXG4gICAgdGltZTogdGltaW5nLnRpbWUsXG4gICAgZGVsYXk6IHRpbWluZy5kZWxheSxcbiAgICBkdXJhdGlvbjogdGltaW5nLmR1cmF0aW9uLFxuICAgIGVhc2U6IHRpbWluZy5lYXNlLFxuICAgIHRpbWVyOiBudWxsLFxuICAgIHN0YXRlOiBDUkVBVEVEXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5pdChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBDUkVBVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBzY2hlZHVsZWRcIik7XG4gIHJldHVybiBzY2hlZHVsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldChub2RlLCBpZCkge1xuICB2YXIgc2NoZWR1bGUgPSBnZXQobm9kZSwgaWQpO1xuICBpZiAoc2NoZWR1bGUuc3RhdGUgPiBTVEFSVEVEKSB0aHJvdyBuZXcgRXJyb3IoXCJ0b28gbGF0ZTsgYWxyZWFkeSBydW5uaW5nXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQobm9kZSwgaWQpIHtcbiAgdmFyIHNjaGVkdWxlID0gbm9kZS5fX3RyYW5zaXRpb247XG4gIGlmICghc2NoZWR1bGUgfHwgIShzY2hlZHVsZSA9IHNjaGVkdWxlW2lkXSkpIHRocm93IG5ldyBFcnJvcihcInRyYW5zaXRpb24gbm90IGZvdW5kXCIpO1xuICByZXR1cm4gc2NoZWR1bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZShub2RlLCBpZCwgc2VsZikge1xuICB2YXIgc2NoZWR1bGVzID0gbm9kZS5fX3RyYW5zaXRpb24sXG4gICAgICB0d2VlbjtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzZWxmIHRpbWVyIHdoZW4gdGhlIHRyYW5zaXRpb24gaXMgY3JlYXRlZC5cbiAgLy8gTm90ZSB0aGUgYWN0dWFsIGRlbGF5IGlzIG5vdCBrbm93biB1bnRpbCB0aGUgZmlyc3QgY2FsbGJhY2shXG4gIHNjaGVkdWxlc1tpZF0gPSBzZWxmO1xuICBzZWxmLnRpbWVyID0gdGltZXIoc2NoZWR1bGUsIDAsIHNlbGYudGltZSk7XG5cbiAgZnVuY3Rpb24gc2NoZWR1bGUoZWxhcHNlZCkge1xuICAgIHNlbGYuc3RhdGUgPSBTQ0hFRFVMRUQ7XG4gICAgc2VsZi50aW1lci5yZXN0YXJ0KHN0YXJ0LCBzZWxmLmRlbGF5LCBzZWxmLnRpbWUpO1xuXG4gICAgLy8gSWYgdGhlIGVsYXBzZWQgZGVsYXkgaXMgbGVzcyB0aGFuIG91ciBmaXJzdCBzbGVlcCwgc3RhcnQgaW1tZWRpYXRlbHkuXG4gICAgaWYgKHNlbGYuZGVsYXkgPD0gZWxhcHNlZCkgc3RhcnQoZWxhcHNlZCAtIHNlbGYuZGVsYXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnQoZWxhcHNlZCkge1xuICAgIHZhciBpLCBqLCBuLCBvO1xuXG4gICAgLy8gSWYgdGhlIHN0YXRlIGlzIG5vdCBTQ0hFRFVMRUQsIHRoZW4gd2UgcHJldmlvdXNseSBlcnJvcmVkIG9uIHN0YXJ0LlxuICAgIGlmIChzZWxmLnN0YXRlICE9PSBTQ0hFRFVMRUQpIHJldHVybiBzdG9wKCk7XG5cbiAgICBmb3IgKGkgaW4gc2NoZWR1bGVzKSB7XG4gICAgICBvID0gc2NoZWR1bGVzW2ldO1xuICAgICAgaWYgKG8ubmFtZSAhPT0gc2VsZi5uYW1lKSBjb250aW51ZTtcblxuICAgICAgLy8gV2hpbGUgdGhpcyBlbGVtZW50IGFscmVhZHkgaGFzIGEgc3RhcnRpbmcgdHJhbnNpdGlvbiBkdXJpbmcgdGhpcyBmcmFtZSxcbiAgICAgIC8vIGRlZmVyIHN0YXJ0aW5nIGFuIGludGVycnVwdGluZyB0cmFuc2l0aW9uIHVudGlsIHRoYXQgdHJhbnNpdGlvbiBoYXMgYVxuICAgICAgLy8gY2hhbmNlIHRvIHRpY2sgKGFuZCBwb3NzaWJseSBlbmQpOyBzZWUgZDMvZDMtdHJhbnNpdGlvbiM1NCFcbiAgICAgIGlmIChvLnN0YXRlID09PSBTVEFSVEVEKSByZXR1cm4gdGltZW91dChzdGFydCk7XG5cbiAgICAgIC8vIEludGVycnVwdCB0aGUgYWN0aXZlIHRyYW5zaXRpb24sIGlmIGFueS5cbiAgICAgIGlmIChvLnN0YXRlID09PSBSVU5OSU5HKSB7XG4gICAgICAgIG8uc3RhdGUgPSBFTkRFRDtcbiAgICAgICAgby50aW1lci5zdG9wKCk7XG4gICAgICAgIG8ub24uY2FsbChcImludGVycnVwdFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBvLmluZGV4LCBvLmdyb3VwKTtcbiAgICAgICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgICAgIH1cblxuICAgICAgLy8gQ2FuY2VsIGFueSBwcmUtZW1wdGVkIHRyYW5zaXRpb25zLlxuICAgICAgZWxzZSBpZiAoK2kgPCBpZCkge1xuICAgICAgICBvLnN0YXRlID0gRU5ERUQ7XG4gICAgICAgIG8udGltZXIuc3RvcCgpO1xuICAgICAgICBvLm9uLmNhbGwoXCJjYW5jZWxcIiwgbm9kZSwgbm9kZS5fX2RhdGFfXywgby5pbmRleCwgby5ncm91cCk7XG4gICAgICAgIGRlbGV0ZSBzY2hlZHVsZXNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVmZXIgdGhlIGZpcnN0IHRpY2sgdG8gZW5kIG9mIHRoZSBjdXJyZW50IGZyYW1lOyBzZWUgZDMvZDMjMTU3Ni5cbiAgICAvLyBOb3RlIHRoZSB0cmFuc2l0aW9uIG1heSBiZSBjYW5jZWxlZCBhZnRlciBzdGFydCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB0aWNrIVxuICAgIC8vIE5vdGUgdGhpcyBtdXN0IGJlIHNjaGVkdWxlZCBiZWZvcmUgdGhlIHN0YXJ0IGV2ZW50OyBzZWUgZDMvZDMtdHJhbnNpdGlvbiMxNiFcbiAgICAvLyBBc3N1bWluZyB0aGlzIGlzIHN1Y2Nlc3NmdWwsIHN1YnNlcXVlbnQgY2FsbGJhY2tzIGdvIHN0cmFpZ2h0IHRvIHRpY2suXG4gICAgdGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLnN0YXRlID09PSBTVEFSVEVEKSB7XG4gICAgICAgIHNlbGYuc3RhdGUgPSBSVU5OSU5HO1xuICAgICAgICBzZWxmLnRpbWVyLnJlc3RhcnQodGljaywgc2VsZi5kZWxheSwgc2VsZi50aW1lKTtcbiAgICAgICAgdGljayhlbGFwc2VkKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIERpc3BhdGNoIHRoZSBzdGFydCBldmVudC5cbiAgICAvLyBOb3RlIHRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSB0aGUgdHdlZW4gYXJlIGluaXRpYWxpemVkLlxuICAgIHNlbGYuc3RhdGUgPSBTVEFSVElORztcbiAgICBzZWxmLm9uLmNhbGwoXCJzdGFydFwiLCBub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKTtcbiAgICBpZiAoc2VsZi5zdGF0ZSAhPT0gU1RBUlRJTkcpIHJldHVybjsgLy8gaW50ZXJydXB0ZWRcbiAgICBzZWxmLnN0YXRlID0gU1RBUlRFRDtcblxuICAgIC8vIEluaXRpYWxpemUgdGhlIHR3ZWVuLCBkZWxldGluZyBudWxsIHR3ZWVuLlxuICAgIHR3ZWVuID0gbmV3IEFycmF5KG4gPSBzZWxmLnR3ZWVuLmxlbmd0aCk7XG4gICAgZm9yIChpID0gMCwgaiA9IC0xOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobyA9IHNlbGYudHdlZW5baV0udmFsdWUuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBzZWxmLmluZGV4LCBzZWxmLmdyb3VwKSkge1xuICAgICAgICB0d2VlblsrK2pdID0gbztcbiAgICAgIH1cbiAgICB9XG4gICAgdHdlZW4ubGVuZ3RoID0gaiArIDE7XG4gIH1cblxuICBmdW5jdGlvbiB0aWNrKGVsYXBzZWQpIHtcbiAgICB2YXIgdCA9IGVsYXBzZWQgPCBzZWxmLmR1cmF0aW9uID8gc2VsZi5lYXNlLmNhbGwobnVsbCwgZWxhcHNlZCAvIHNlbGYuZHVyYXRpb24pIDogKHNlbGYudGltZXIucmVzdGFydChzdG9wKSwgc2VsZi5zdGF0ZSA9IEVORElORywgMSksXG4gICAgICAgIGkgPSAtMSxcbiAgICAgICAgbiA9IHR3ZWVuLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2kgPCBuKSB7XG4gICAgICB0d2VlbltpXS5jYWxsKG5vZGUsIHQpO1xuICAgIH1cblxuICAgIC8vIERpc3BhdGNoIHRoZSBlbmQgZXZlbnQuXG4gICAgaWYgKHNlbGYuc3RhdGUgPT09IEVORElORykge1xuICAgICAgc2VsZi5vbi5jYWxsKFwiZW5kXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNlbGYuaW5kZXgsIHNlbGYuZ3JvdXApO1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgc2VsZi5zdGF0ZSA9IEVOREVEO1xuICAgIHNlbGYudGltZXIuc3RvcCgpO1xuICAgIGRlbGV0ZSBzY2hlZHVsZXNbaWRdO1xuICAgIGZvciAodmFyIGkgaW4gc2NoZWR1bGVzKSByZXR1cm47IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICBkZWxldGUgbm9kZS5fX3RyYW5zaXRpb247XG4gIH1cbn1cbiIsInZhciBkZWdyZWVzID0gMTgwIC8gTWF0aC5QSTtcblxuZXhwb3J0IHZhciBpZGVudGl0eSA9IHtcbiAgdHJhbnNsYXRlWDogMCxcbiAgdHJhbnNsYXRlWTogMCxcbiAgcm90YXRlOiAwLFxuICBza2V3WDogMCxcbiAgc2NhbGVYOiAxLFxuICBzY2FsZVk6IDFcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgdmFyIHNjYWxlWCwgc2NhbGVZLCBza2V3WDtcbiAgaWYgKHNjYWxlWCA9IE1hdGguc3FydChhICogYSArIGIgKiBiKSkgYSAvPSBzY2FsZVgsIGIgLz0gc2NhbGVYO1xuICBpZiAoc2tld1ggPSBhICogYyArIGIgKiBkKSBjIC09IGEgKiBza2V3WCwgZCAtPSBiICogc2tld1g7XG4gIGlmIChzY2FsZVkgPSBNYXRoLnNxcnQoYyAqIGMgKyBkICogZCkpIGMgLz0gc2NhbGVZLCBkIC89IHNjYWxlWSwgc2tld1ggLz0gc2NhbGVZO1xuICBpZiAoYSAqIGQgPCBiICogYykgYSA9IC1hLCBiID0gLWIsIHNrZXdYID0gLXNrZXdYLCBzY2FsZVggPSAtc2NhbGVYO1xuICByZXR1cm4ge1xuICAgIHRyYW5zbGF0ZVg6IGUsXG4gICAgdHJhbnNsYXRlWTogZixcbiAgICByb3RhdGU6IE1hdGguYXRhbjIoYiwgYSkgKiBkZWdyZWVzLFxuICAgIHNrZXdYOiBNYXRoLmF0YW4oc2tld1gpICogZGVncmVlcyxcbiAgICBzY2FsZVg6IHNjYWxlWCxcbiAgICBzY2FsZVk6IHNjYWxlWVxuICB9O1xufVxuIiwiaW1wb3J0IGRlY29tcG9zZSwge2lkZW50aXR5fSBmcm9tIFwiLi9kZWNvbXBvc2UuanNcIjtcblxudmFyIHN2Z05vZGU7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VDc3ModmFsdWUpIHtcbiAgY29uc3QgbSA9IG5ldyAodHlwZW9mIERPTU1hdHJpeCA9PT0gXCJmdW5jdGlvblwiID8gRE9NTWF0cml4IDogV2ViS2l0Q1NTTWF0cml4KSh2YWx1ZSArIFwiXCIpO1xuICByZXR1cm4gbS5pc0lkZW50aXR5ID8gaWRlbnRpdHkgOiBkZWNvbXBvc2UobS5hLCBtLmIsIG0uYywgbS5kLCBtLmUsIG0uZik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN2Zyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIGlkZW50aXR5O1xuICBpZiAoIXN2Z05vZGUpIHN2Z05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLCBcImdcIik7XG4gIHN2Z05vZGUuc2V0QXR0cmlidXRlKFwidHJhbnNmb3JtXCIsIHZhbHVlKTtcbiAgaWYgKCEodmFsdWUgPSBzdmdOb2RlLnRyYW5zZm9ybS5iYXNlVmFsLmNvbnNvbGlkYXRlKCkpKSByZXR1cm4gaWRlbnRpdHk7XG4gIHZhbHVlID0gdmFsdWUubWF0cml4O1xuICByZXR1cm4gZGVjb21wb3NlKHZhbHVlLmEsIHZhbHVlLmIsIHZhbHVlLmMsIHZhbHVlLmQsIHZhbHVlLmUsIHZhbHVlLmYpO1xufVxuIiwiaW1wb3J0IG51bWJlciBmcm9tIFwiLi4vbnVtYmVyLmpzXCI7XG5pbXBvcnQge3BhcnNlQ3NzLCBwYXJzZVN2Z30gZnJvbSBcIi4vcGFyc2UuanNcIjtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2UsIHB4Q29tbWEsIHB4UGFyZW4sIGRlZ1BhcmVuKSB7XG5cbiAgZnVuY3Rpb24gcG9wKHMpIHtcbiAgICByZXR1cm4gcy5sZW5ndGggPyBzLnBvcCgpICsgXCIgXCIgOiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gdHJhbnNsYXRlKHhhLCB5YSwgeGIsIHliLCBzLCBxKSB7XG4gICAgaWYgKHhhICE9PSB4YiB8fCB5YSAhPT0geWIpIHtcbiAgICAgIHZhciBpID0gcy5wdXNoKFwidHJhbnNsYXRlKFwiLCBudWxsLCBweENvbW1hLCBudWxsLCBweFBhcmVuKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgfHwgeWIpIHtcbiAgICAgIHMucHVzaChcInRyYW5zbGF0ZShcIiArIHhiICsgcHhDb21tYSArIHliICsgcHhQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcm90YXRlKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgaWYgKGEgLSBiID4gMTgwKSBiICs9IDM2MDsgZWxzZSBpZiAoYiAtIGEgPiAxODApIGEgKz0gMzYwOyAvLyBzaG9ydGVzdCBwYXRoXG4gICAgICBxLnB1c2goe2k6IHMucHVzaChwb3AocykgKyBcInJvdGF0ZShcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJyb3RhdGUoXCIgKyBiICsgZGVnUGFyZW4pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNrZXdYKGEsIGIsIHMsIHEpIHtcbiAgICBpZiAoYSAhPT0gYikge1xuICAgICAgcS5wdXNoKHtpOiBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiwgbnVsbCwgZGVnUGFyZW4pIC0gMiwgeDogbnVtYmVyKGEsIGIpfSk7XG4gICAgfSBlbHNlIGlmIChiKSB7XG4gICAgICBzLnB1c2gocG9wKHMpICsgXCJza2V3WChcIiArIGIgKyBkZWdQYXJlbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2NhbGUoeGEsIHlhLCB4YiwgeWIsIHMsIHEpIHtcbiAgICBpZiAoeGEgIT09IHhiIHx8IHlhICE9PSB5Yikge1xuICAgICAgdmFyIGkgPSBzLnB1c2gocG9wKHMpICsgXCJzY2FsZShcIiwgbnVsbCwgXCIsXCIsIG51bGwsIFwiKVwiKTtcbiAgICAgIHEucHVzaCh7aTogaSAtIDQsIHg6IG51bWJlcih4YSwgeGIpfSwge2k6IGkgLSAyLCB4OiBudW1iZXIoeWEsIHliKX0pO1xuICAgIH0gZWxzZSBpZiAoeGIgIT09IDEgfHwgeWIgIT09IDEpIHtcbiAgICAgIHMucHVzaChwb3AocykgKyBcInNjYWxlKFwiICsgeGIgKyBcIixcIiArIHliICsgXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHMgPSBbXSwgLy8gc3RyaW5nIGNvbnN0YW50cyBhbmQgcGxhY2Vob2xkZXJzXG4gICAgICAgIHEgPSBbXTsgLy8gbnVtYmVyIGludGVycG9sYXRvcnNcbiAgICBhID0gcGFyc2UoYSksIGIgPSBwYXJzZShiKTtcbiAgICB0cmFuc2xhdGUoYS50cmFuc2xhdGVYLCBhLnRyYW5zbGF0ZVksIGIudHJhbnNsYXRlWCwgYi50cmFuc2xhdGVZLCBzLCBxKTtcbiAgICByb3RhdGUoYS5yb3RhdGUsIGIucm90YXRlLCBzLCBxKTtcbiAgICBza2V3WChhLnNrZXdYLCBiLnNrZXdYLCBzLCBxKTtcbiAgICBzY2FsZShhLnNjYWxlWCwgYS5zY2FsZVksIGIuc2NhbGVYLCBiLnNjYWxlWSwgcywgcSk7XG4gICAgYSA9IGIgPSBudWxsOyAvLyBnY1xuICAgIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgICB2YXIgaSA9IC0xLCBuID0gcS5sZW5ndGgsIG87XG4gICAgICB3aGlsZSAoKytpIDwgbikgc1sobyA9IHFbaV0pLmldID0gby54KHQpO1xuICAgICAgcmV0dXJuIHMuam9pbihcIlwiKTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtQ3NzID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VDc3MsIFwicHgsIFwiLCBcInB4KVwiLCBcImRlZylcIik7XG5leHBvcnQgdmFyIGludGVycG9sYXRlVHJhbnNmb3JtU3ZnID0gaW50ZXJwb2xhdGVUcmFuc2Zvcm0ocGFyc2VTdmcsIFwiLCBcIiwgXCIpXCIsIFwiKVwiKTtcbiIsImltcG9ydCB7Z2V0LCBzZXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIHR3ZWVuUmVtb3ZlKGlkLCBuYW1lKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIHR3ZWVuID0gc2NoZWR1bGUudHdlZW47XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIHR3ZWVuIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIHR3ZWVuIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmICh0d2VlbiAhPT0gdHdlZW4wKSB7XG4gICAgICB0d2VlbjEgPSB0d2VlbjAgPSB0d2VlbjtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBuID0gdHdlZW4xLmxlbmd0aDsgaSA8IG47ICsraSkge1xuICAgICAgICBpZiAodHdlZW4xW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICB0d2VlbjEgPSB0d2VlbjEuc2xpY2UoKTtcbiAgICAgICAgICB0d2VlbjEuc3BsaWNlKGksIDEpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc2NoZWR1bGUudHdlZW4gPSB0d2VlbjE7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHR3ZWVuRnVuY3Rpb24oaWQsIG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0d2VlbjAsIHR3ZWVuMTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgRXJyb3I7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzZXQodGhpcywgaWQpLFxuICAgICAgICB0d2VlbiA9IHNjaGVkdWxlLnR3ZWVuO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCB0d2VlbiB3aXRoIHRoZSBwcmV2aW91cyBub2RlLFxuICAgIC8vIGp1c3QgYXNzaWduIHRoZSB1cGRhdGVkIHNoYXJlZCB0d2VlbiBhbmQgd2XigJlyZSBkb25lIVxuICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICBpZiAodHdlZW4gIT09IHR3ZWVuMCkge1xuICAgICAgdHdlZW4xID0gKHR3ZWVuMCA9IHR3ZWVuKS5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgdCA9IHtuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWV9LCBpID0gMCwgbiA9IHR3ZWVuMS5sZW5ndGg7IGkgPCBuOyArK2kpIHtcbiAgICAgICAgaWYgKHR3ZWVuMVtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgdHdlZW4xW2ldID0gdDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGkgPT09IG4pIHR3ZWVuMS5wdXNoKHQpO1xuICAgIH1cblxuICAgIHNjaGVkdWxlLnR3ZWVuID0gdHdlZW4xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICBuYW1lICs9IFwiXCI7XG5cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSB7XG4gICAgdmFyIHR3ZWVuID0gZ2V0KHRoaXMubm9kZSgpLCBpZCkudHdlZW47XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSB0d2Vlbi5sZW5ndGgsIHQ7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgodCA9IHR3ZWVuW2ldKS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiB0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiB0aGlzLmVhY2goKHZhbHVlID09IG51bGwgPyB0d2VlblJlbW92ZSA6IHR3ZWVuRnVuY3Rpb24pKGlkLCBuYW1lLCB2YWx1ZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHdlZW5WYWx1ZSh0cmFuc2l0aW9uLCBuYW1lLCB2YWx1ZSkge1xuICB2YXIgaWQgPSB0cmFuc2l0aW9uLl9pZDtcblxuICB0cmFuc2l0aW9uLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgdmFyIHNjaGVkdWxlID0gc2V0KHRoaXMsIGlkKTtcbiAgICAoc2NoZWR1bGUudmFsdWUgfHwgKHNjaGVkdWxlLnZhbHVlID0ge30pKVtuYW1lXSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH0pO1xuXG4gIHJldHVybiBmdW5jdGlvbihub2RlKSB7XG4gICAgcmV0dXJuIGdldChub2RlLCBpZCkudmFsdWVbbmFtZV07XG4gIH07XG59XG4iLCJpbXBvcnQge2NvbG9yfSBmcm9tIFwiZDMtY29sb3JcIjtcbmltcG9ydCB7aW50ZXJwb2xhdGVOdW1iZXIsIGludGVycG9sYXRlUmdiLCBpbnRlcnBvbGF0ZVN0cmluZ30gZnJvbSBcImQzLWludGVycG9sYXRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGEsIGIpIHtcbiAgdmFyIGM7XG4gIHJldHVybiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIgPyBpbnRlcnBvbGF0ZU51bWJlclxuICAgICAgOiBiIGluc3RhbmNlb2YgY29sb3IgPyBpbnRlcnBvbGF0ZVJnYlxuICAgICAgOiAoYyA9IGNvbG9yKGIpKSA/IChiID0gYywgaW50ZXJwb2xhdGVSZ2IpXG4gICAgICA6IGludGVycG9sYXRlU3RyaW5nKShhLCBiKTtcbn1cbiIsImltcG9ydCB7aW50ZXJwb2xhdGVUcmFuc2Zvcm1TdmcgYXMgaW50ZXJwb2xhdGVUcmFuc2Zvcm19IGZyb20gXCJkMy1pbnRlcnBvbGF0ZVwiO1xuaW1wb3J0IHtuYW1lc3BhY2V9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7dHdlZW5WYWx1ZX0gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tIFwiLi9pbnRlcnBvbGF0ZS5qc1wiO1xuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlKG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyUmVtb3ZlTlMoZnVsbG5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyQ29uc3RhbnROUyhmdWxsbmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlMSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIixcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBhdHRyRnVuY3Rpb24obmFtZSwgaW50ZXJwb2xhdGUsIHZhbHVlKSB7XG4gIHZhciBzdHJpbmcwMCxcbiAgICAgIHN0cmluZzEwLFxuICAgICAgaW50ZXJwb2xhdGUwO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0cmluZzAsIHZhbHVlMSA9IHZhbHVlKHRoaXMpLCBzdHJpbmcxO1xuICAgIGlmICh2YWx1ZTEgPT0gbnVsbCkgcmV0dXJuIHZvaWQgdGhpcy5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgc3RyaW5nMCA9IHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYXR0ckZ1bmN0aW9uTlMoZnVsbG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwLCB2YWx1ZTEgPSB2YWx1ZSh0aGlzKSwgc3RyaW5nMTtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHJldHVybiB2b2lkIHRoaXMucmVtb3ZlQXR0cmlidXRlTlMoZnVsbG5hbWUuc3BhY2UsIGZ1bGxuYW1lLmxvY2FsKTtcbiAgICBzdHJpbmcwID0gdGhpcy5nZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwpO1xuICAgIHN0cmluZzEgPSB2YWx1ZTEgKyBcIlwiO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcbiAgdmFyIGZ1bGxuYW1lID0gbmFtZXNwYWNlKG5hbWUpLCBpID0gZnVsbG5hbWUgPT09IFwidHJhbnNmb3JtXCIgPyBpbnRlcnBvbGF0ZVRyYW5zZm9ybSA6IGludGVycG9sYXRlO1xuICByZXR1cm4gdGhpcy5hdHRyVHdlZW4obmFtZSwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gKGZ1bGxuYW1lLmxvY2FsID8gYXR0ckZ1bmN0aW9uTlMgOiBhdHRyRnVuY3Rpb24pKGZ1bGxuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwiYXR0ci5cIiArIG5hbWUsIHZhbHVlKSlcbiAgICAgIDogdmFsdWUgPT0gbnVsbCA/IChmdWxsbmFtZS5sb2NhbCA/IGF0dHJSZW1vdmVOUyA6IGF0dHJSZW1vdmUpKGZ1bGxuYW1lKVxuICAgICAgOiAoZnVsbG5hbWUubG9jYWwgPyBhdHRyQ29uc3RhbnROUyA6IGF0dHJDb25zdGFudCkoZnVsbG5hbWUsIGksIHZhbHVlKSk7XG59XG4iLCJpbXBvcnQge25hbWVzcGFjZX0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG5mdW5jdGlvbiBhdHRySW50ZXJwb2xhdGUobmFtZSwgaSkge1xuICByZXR1cm4gZnVuY3Rpb24odCkge1xuICAgIHRoaXMuc2V0QXR0cmlidXRlKG5hbWUsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy5zZXRBdHRyaWJ1dGVOUyhmdWxsbmFtZS5zcGFjZSwgZnVsbG5hbWUubG9jYWwsIGkuY2FsbCh0aGlzLCB0KSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGF0dHJUd2Vlbk5TKGZ1bGxuYW1lLCB2YWx1ZSkge1xuICB2YXIgdDAsIGkwO1xuICBmdW5jdGlvbiB0d2VlbigpIHtcbiAgICB2YXIgaSA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKGkgIT09IGkwKSB0MCA9IChpMCA9IGkpICYmIGF0dHJJbnRlcnBvbGF0ZU5TKGZ1bGxuYW1lLCBpKTtcbiAgICByZXR1cm4gdDA7XG4gIH1cbiAgdHdlZW4uX3ZhbHVlID0gdmFsdWU7XG4gIHJldHVybiB0d2Vlbjtcbn1cblxuZnVuY3Rpb24gYXR0clR3ZWVuKG5hbWUsIHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgYXR0ckludGVycG9sYXRlKG5hbWUsIGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJhdHRyLlwiICsgbmFtZTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICB2YXIgZnVsbG5hbWUgPSBuYW1lc3BhY2UobmFtZSk7XG4gIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgKGZ1bGxuYW1lLmxvY2FsID8gYXR0clR3ZWVuTlMgOiBhdHRyVHdlZW4pKGZ1bGxuYW1lLCB2YWx1ZSkpO1xufVxuIiwiaW1wb3J0IHtnZXQsIGluaXR9IGZyb20gXCIuL3NjaGVkdWxlLmpzXCI7XG5cbmZ1bmN0aW9uIGRlbGF5RnVuY3Rpb24oaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpbml0KHRoaXMsIGlkKS5kZWxheSA9ICt2YWx1ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBkZWxheUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPSArdmFsdWUsIGZ1bmN0aW9uKCkge1xuICAgIGluaXQodGhpcywgaWQpLmRlbGF5ID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGRlbGF5RnVuY3Rpb25cbiAgICAgICAgICA6IGRlbGF5Q29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmRlbGF5O1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZHVyYXRpb25GdW5jdGlvbihpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZHVyYXRpb24gPSArdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gZHVyYXRpb25Db25zdGFudChpZCwgdmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID0gK3ZhbHVlLCBmdW5jdGlvbigpIHtcbiAgICBzZXQodGhpcywgaWQpLmR1cmF0aW9uID0gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHZhciBpZCA9IHRoaXMuX2lkO1xuXG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoXG4gICAgICA/IHRoaXMuZWFjaCgodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICA/IGR1cmF0aW9uRnVuY3Rpb25cbiAgICAgICAgICA6IGR1cmF0aW9uQ29uc3RhbnQpKGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmR1cmF0aW9uO1xufVxuIiwiaW1wb3J0IHtnZXQsIHNldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHNldCh0aGlzLCBpZCkuZWFzZSA9IHZhbHVlO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aFxuICAgICAgPyB0aGlzLmVhY2goZWFzZUNvbnN0YW50KGlkLCB2YWx1ZSkpXG4gICAgICA6IGdldCh0aGlzLm5vZGUoKSwgaWQpLmVhc2U7XG59XG4iLCJpbXBvcnQge2dldCwgc2V0LCBpbml0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5mdW5jdGlvbiBzdGFydChuYW1lKSB7XG4gIHJldHVybiAobmFtZSArIFwiXCIpLnRyaW0oKS5zcGxpdCgvXnxcXHMrLykuZXZlcnkoZnVuY3Rpb24odCkge1xuICAgIHZhciBpID0gdC5pbmRleE9mKFwiLlwiKTtcbiAgICBpZiAoaSA+PSAwKSB0ID0gdC5zbGljZSgwLCBpKTtcbiAgICByZXR1cm4gIXQgfHwgdCA9PT0gXCJzdGFydFwiO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gb25GdW5jdGlvbihpZCwgbmFtZSwgbGlzdGVuZXIpIHtcbiAgdmFyIG9uMCwgb24xLCBzaXQgPSBzdGFydChuYW1lKSA/IGluaXQgOiBzZXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc2NoZWR1bGUgPSBzaXQodGhpcywgaWQpLFxuICAgICAgICBvbiA9IHNjaGVkdWxlLm9uO1xuXG4gICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgLy8ganVzdCBhc3NpZ24gdGhlIHVwZGF0ZWQgc2hhcmVkIGRpc3BhdGNoIGFuZCB3ZeKAmXJlIGRvbmUhXG4gICAgLy8gT3RoZXJ3aXNlLCBjb3B5LW9uLXdyaXRlLlxuICAgIGlmIChvbiAhPT0gb24wKSAob24xID0gKG9uMCA9IG9uKS5jb3B5KCkpLm9uKG5hbWUsIGxpc3RlbmVyKTtcblxuICAgIHNjaGVkdWxlLm9uID0gb24xO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCBsaXN0ZW5lcikge1xuICB2YXIgaWQgPSB0aGlzLl9pZDtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8IDJcbiAgICAgID8gZ2V0KHRoaXMubm9kZSgpLCBpZCkub24ub24obmFtZSlcbiAgICAgIDogdGhpcy5lYWNoKG9uRnVuY3Rpb24oaWQsIG5hbWUsIGxpc3RlbmVyKSk7XG59XG4iLCJpbXBvcnQge3NlbGVjdGlvbn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuXG52YXIgU2VsZWN0aW9uID0gc2VsZWN0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgU2VsZWN0aW9uKHRoaXMuX2dyb3VwcywgdGhpcy5fcGFyZW50cyk7XG59XG4iLCJpbXBvcnQge2ludGVycG9sYXRlVHJhbnNmb3JtQ3NzIGFzIGludGVycG9sYXRlVHJhbnNmb3JtfSBmcm9tIFwiZDMtaW50ZXJwb2xhdGVcIjtcbmltcG9ydCB7c3R5bGV9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHt0d2VlblZhbHVlfSBmcm9tIFwiLi90d2Vlbi5qc1wiO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gXCIuL2ludGVycG9sYXRlLmpzXCI7XG5cbmZ1bmN0aW9uIHN0eWxlTnVsbChuYW1lLCBpbnRlcnBvbGF0ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHN0cmluZzEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCBzdHJpbmcxMCA9IHN0cmluZzEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVJlbW92ZShuYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnN0eWxlLnJlbW92ZVByb3BlcnR5KG5hbWUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUNvbnN0YW50KG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZTEpIHtcbiAgdmFyIHN0cmluZzAwLFxuICAgICAgc3RyaW5nMSA9IHZhbHVlMSArIFwiXCIsXG4gICAgICBpbnRlcnBvbGF0ZTA7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RyaW5nMCA9IHN0eWxlKHRoaXMsIG5hbWUpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZUZ1bmN0aW9uKG5hbWUsIGludGVycG9sYXRlLCB2YWx1ZSkge1xuICB2YXIgc3RyaW5nMDAsXG4gICAgICBzdHJpbmcxMCxcbiAgICAgIGludGVycG9sYXRlMDtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzdHJpbmcwID0gc3R5bGUodGhpcywgbmFtZSksXG4gICAgICAgIHZhbHVlMSA9IHZhbHVlKHRoaXMpLFxuICAgICAgICBzdHJpbmcxID0gdmFsdWUxICsgXCJcIjtcbiAgICBpZiAodmFsdWUxID09IG51bGwpIHN0cmluZzEgPSB2YWx1ZTEgPSAodGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuYW1lKSwgc3R5bGUodGhpcywgbmFtZSkpO1xuICAgIHJldHVybiBzdHJpbmcwID09PSBzdHJpbmcxID8gbnVsbFxuICAgICAgICA6IHN0cmluZzAgPT09IHN0cmluZzAwICYmIHN0cmluZzEgPT09IHN0cmluZzEwID8gaW50ZXJwb2xhdGUwXG4gICAgICAgIDogKHN0cmluZzEwID0gc3RyaW5nMSwgaW50ZXJwb2xhdGUwID0gaW50ZXJwb2xhdGUoc3RyaW5nMDAgPSBzdHJpbmcwLCB2YWx1ZTEpKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3R5bGVNYXliZVJlbW92ZShpZCwgbmFtZSkge1xuICB2YXIgb24wLCBvbjEsIGxpc3RlbmVyMCwga2V5ID0gXCJzdHlsZS5cIiArIG5hbWUsIGV2ZW50ID0gXCJlbmQuXCIgKyBrZXksIHJlbW92ZTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgIG9uID0gc2NoZWR1bGUub24sXG4gICAgICAgIGxpc3RlbmVyID0gc2NoZWR1bGUudmFsdWVba2V5XSA9PSBudWxsID8gcmVtb3ZlIHx8IChyZW1vdmUgPSBzdHlsZVJlbW92ZShuYW1lKSkgOiB1bmRlZmluZWQ7XG5cbiAgICAvLyBJZiB0aGlzIG5vZGUgc2hhcmVkIGEgZGlzcGF0Y2ggd2l0aCB0aGUgcHJldmlvdXMgbm9kZSxcbiAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAvLyBPdGhlcndpc2UsIGNvcHktb24td3JpdGUuXG4gICAgaWYgKG9uICE9PSBvbjAgfHwgbGlzdGVuZXIwICE9PSBsaXN0ZW5lcikgKG9uMSA9IChvbjAgPSBvbikuY29weSgpKS5vbihldmVudCwgbGlzdGVuZXIwID0gbGlzdGVuZXIpO1xuXG4gICAgc2NoZWR1bGUub24gPSBvbjE7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgaSA9IChuYW1lICs9IFwiXCIpID09PSBcInRyYW5zZm9ybVwiID8gaW50ZXJwb2xhdGVUcmFuc2Zvcm0gOiBpbnRlcnBvbGF0ZTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZU51bGwobmFtZSwgaSkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBzdHlsZVJlbW92ZShuYW1lKSlcbiAgICA6IHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdGhpc1xuICAgICAgLnN0eWxlVHdlZW4obmFtZSwgc3R5bGVGdW5jdGlvbihuYW1lLCBpLCB0d2VlblZhbHVlKHRoaXMsIFwic3R5bGUuXCIgKyBuYW1lLCB2YWx1ZSkpKVxuICAgICAgLmVhY2goc3R5bGVNYXliZVJlbW92ZSh0aGlzLl9pZCwgbmFtZSkpXG4gICAgOiB0aGlzXG4gICAgICAuc3R5bGVUd2VlbihuYW1lLCBzdHlsZUNvbnN0YW50KG5hbWUsIGksIHZhbHVlKSwgcHJpb3JpdHkpXG4gICAgICAub24oXCJlbmQuc3R5bGUuXCIgKyBuYW1lLCBudWxsKTtcbn1cbiIsImZ1bmN0aW9uIHN0eWxlSW50ZXJwb2xhdGUobmFtZSwgaSwgcHJpb3JpdHkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHQpIHtcbiAgICB0aGlzLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGkuY2FsbCh0aGlzLCB0KSwgcHJpb3JpdHkpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBzdHlsZVR3ZWVuKG5hbWUsIHZhbHVlLCBwcmlvcml0eSkge1xuICB2YXIgdCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQgPSAoaTAgPSBpKSAmJiBzdHlsZUludGVycG9sYXRlKG5hbWUsIGksIHByaW9yaXR5KTtcbiAgICByZXR1cm4gdDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihuYW1lLCB2YWx1ZSwgcHJpb3JpdHkpIHtcbiAgdmFyIGtleSA9IFwic3R5bGUuXCIgKyAobmFtZSArPSBcIlwiKTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPCAyKSByZXR1cm4gKGtleSA9IHRoaXMudHdlZW4oa2V5KSkgJiYga2V5Ll92YWx1ZTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0aGlzLnR3ZWVuKGtleSwgbnVsbCk7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IEVycm9yO1xuICByZXR1cm4gdGhpcy50d2VlbihrZXksIHN0eWxlVHdlZW4obmFtZSwgdmFsdWUsIHByaW9yaXR5ID09IG51bGwgPyBcIlwiIDogcHJpb3JpdHkpKTtcbn1cbiIsImZ1bmN0aW9uIHRleHRJbnRlcnBvbGF0ZShpKSB7XG4gIHJldHVybiBmdW5jdGlvbih0KSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IGkuY2FsbCh0aGlzLCB0KTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gdGV4dFR3ZWVuKHZhbHVlKSB7XG4gIHZhciB0MCwgaTA7XG4gIGZ1bmN0aW9uIHR3ZWVuKCkge1xuICAgIHZhciBpID0gdmFsdWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAoaSAhPT0gaTApIHQwID0gKGkwID0gaSkgJiYgdGV4dEludGVycG9sYXRlKGkpO1xuICAgIHJldHVybiB0MDtcbiAgfVxuICB0d2Vlbi5fdmFsdWUgPSB2YWx1ZTtcbiAgcmV0dXJuIHR3ZWVuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICB2YXIga2V5ID0gXCJ0ZXh0XCI7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkgcmV0dXJuIChrZXkgPSB0aGlzLnR3ZWVuKGtleSkpICYmIGtleS5fdmFsdWU7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdGhpcy50d2VlbihrZXksIG51bGwpO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMudHdlZW4oa2V5LCB0ZXh0VHdlZW4odmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9hdHRyIGZyb20gXCIuL2F0dHIuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2F0dHJUd2VlbiBmcm9tIFwiLi9hdHRyVHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2RlbGF5IGZyb20gXCIuL2RlbGF5LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9kdXJhdGlvbiBmcm9tIFwiLi9kdXJhdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZWFzZSBmcm9tIFwiLi9lYXNlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9lYXNlVmFyeWluZyBmcm9tIFwiLi9lYXNlVmFyeWluZy5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fZmlsdGVyIGZyb20gXCIuL2ZpbHRlci5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fbWVyZ2UgZnJvbSBcIi4vbWVyZ2UuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX29uIGZyb20gXCIuL29uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9yZW1vdmUgZnJvbSBcIi4vcmVtb3ZlLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3QgZnJvbSBcIi4vc2VsZWN0LmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3RBbGwgZnJvbSBcIi4vc2VsZWN0QWxsLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zZWxlY3Rpb24gZnJvbSBcIi4vc2VsZWN0aW9uLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl9zdHlsZSBmcm9tIFwiLi9zdHlsZS5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fc3R5bGVUd2VlbiBmcm9tIFwiLi9zdHlsZVR3ZWVuLmpzXCI7XG5pbXBvcnQgdHJhbnNpdGlvbl90ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RleHRUd2VlbiBmcm9tIFwiLi90ZXh0VHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX3RyYW5zaXRpb24gZnJvbSBcIi4vdHJhbnNpdGlvbi5qc1wiO1xuaW1wb3J0IHRyYW5zaXRpb25fdHdlZW4gZnJvbSBcIi4vdHdlZW4uanNcIjtcbmltcG9ydCB0cmFuc2l0aW9uX2VuZCBmcm9tIFwiLi9lbmQuanNcIjtcblxudmFyIGlkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zaXRpb24oZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCkge1xuICB0aGlzLl9ncm91cHMgPSBncm91cHM7XG4gIHRoaXMuX3BhcmVudHMgPSBwYXJlbnRzO1xuICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgdGhpcy5faWQgPSBpZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNpdGlvbihuYW1lKSB7XG4gIHJldHVybiBzZWxlY3Rpb24oKS50cmFuc2l0aW9uKG5hbWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SWQoKSB7XG4gIHJldHVybiArK2lkO1xufVxuXG52YXIgc2VsZWN0aW9uX3Byb3RvdHlwZSA9IHNlbGVjdGlvbi5wcm90b3R5cGU7XG5cblRyYW5zaXRpb24ucHJvdG90eXBlID0gdHJhbnNpdGlvbi5wcm90b3R5cGUgPSB7XG4gIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxuICBzZWxlY3Q6IHRyYW5zaXRpb25fc2VsZWN0LFxuICBzZWxlY3RBbGw6IHRyYW5zaXRpb25fc2VsZWN0QWxsLFxuICBmaWx0ZXI6IHRyYW5zaXRpb25fZmlsdGVyLFxuICBtZXJnZTogdHJhbnNpdGlvbl9tZXJnZSxcbiAgc2VsZWN0aW9uOiB0cmFuc2l0aW9uX3NlbGVjdGlvbixcbiAgdHJhbnNpdGlvbjogdHJhbnNpdGlvbl90cmFuc2l0aW9uLFxuICBjYWxsOiBzZWxlY3Rpb25fcHJvdG90eXBlLmNhbGwsXG4gIG5vZGVzOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGVzLFxuICBub2RlOiBzZWxlY3Rpb25fcHJvdG90eXBlLm5vZGUsXG4gIHNpemU6IHNlbGVjdGlvbl9wcm90b3R5cGUuc2l6ZSxcbiAgZW1wdHk6IHNlbGVjdGlvbl9wcm90b3R5cGUuZW1wdHksXG4gIGVhY2g6IHNlbGVjdGlvbl9wcm90b3R5cGUuZWFjaCxcbiAgb246IHRyYW5zaXRpb25fb24sXG4gIGF0dHI6IHRyYW5zaXRpb25fYXR0cixcbiAgYXR0clR3ZWVuOiB0cmFuc2l0aW9uX2F0dHJUd2VlbixcbiAgc3R5bGU6IHRyYW5zaXRpb25fc3R5bGUsXG4gIHN0eWxlVHdlZW46IHRyYW5zaXRpb25fc3R5bGVUd2VlbixcbiAgdGV4dDogdHJhbnNpdGlvbl90ZXh0LFxuICB0ZXh0VHdlZW46IHRyYW5zaXRpb25fdGV4dFR3ZWVuLFxuICByZW1vdmU6IHRyYW5zaXRpb25fcmVtb3ZlLFxuICB0d2VlbjogdHJhbnNpdGlvbl90d2VlbixcbiAgZGVsYXk6IHRyYW5zaXRpb25fZGVsYXksXG4gIGR1cmF0aW9uOiB0cmFuc2l0aW9uX2R1cmF0aW9uLFxuICBlYXNlOiB0cmFuc2l0aW9uX2Vhc2UsXG4gIGVhc2VWYXJ5aW5nOiB0cmFuc2l0aW9uX2Vhc2VWYXJ5aW5nLFxuICBlbmQ6IHRyYW5zaXRpb25fZW5kLFxuICBbU3ltYm9sLml0ZXJhdG9yXTogc2VsZWN0aW9uX3Byb3RvdHlwZVtTeW1ib2wuaXRlcmF0b3JdXG59O1xuIiwiaW1wb3J0IHtzZWxlY3Rvcn0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvcihzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBuZXcgQXJyYXkobiksIG5vZGUsIHN1Ym5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAoKG5vZGUgPSBncm91cFtpXSkgJiYgKHN1Ym5vZGUgPSBzZWxlY3QuY2FsbChub2RlLCBub2RlLl9fZGF0YV9fLCBpLCBncm91cCkpKSB7XG4gICAgICAgIGlmIChcIl9fZGF0YV9fXCIgaW4gbm9kZSkgc3Vibm9kZS5fX2RhdGFfXyA9IG5vZGUuX19kYXRhX187XG4gICAgICAgIHN1Ymdyb3VwW2ldID0gc3Vibm9kZTtcbiAgICAgICAgc2NoZWR1bGUoc3ViZ3JvdXBbaV0sIG5hbWUsIGlkLCBpLCBzdWJncm91cCwgZ2V0KG5vZGUsIGlkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKHN1Ymdyb3VwcywgdGhpcy5fcGFyZW50cywgbmFtZSwgaWQpO1xufVxuIiwiaW1wb3J0IHtzZWxlY3RvckFsbH0gZnJvbSBcImQzLXNlbGVjdGlvblwiO1xuaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tIFwiLi9pbmRleC5qc1wiO1xuaW1wb3J0IHNjaGVkdWxlLCB7Z2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihzZWxlY3QpIHtcbiAgdmFyIG5hbWUgPSB0aGlzLl9uYW1lLFxuICAgICAgaWQgPSB0aGlzLl9pZDtcblxuICBpZiAodHlwZW9mIHNlbGVjdCAhPT0gXCJmdW5jdGlvblwiKSBzZWxlY3QgPSBzZWxlY3RvckFsbChzZWxlY3QpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IFtdLCBwYXJlbnRzID0gW10sIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIGZvciAodmFyIGNoaWxkcmVuID0gc2VsZWN0LmNhbGwobm9kZSwgbm9kZS5fX2RhdGFfXywgaSwgZ3JvdXApLCBjaGlsZCwgaW5oZXJpdCA9IGdldChub2RlLCBpZCksIGsgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBrIDwgbDsgKytrKSB7XG4gICAgICAgICAgaWYgKGNoaWxkID0gY2hpbGRyZW5ba10pIHtcbiAgICAgICAgICAgIHNjaGVkdWxlKGNoaWxkLCBuYW1lLCBpZCwgaywgY2hpbGRyZW4sIGluaGVyaXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzdWJncm91cHMucHVzaChjaGlsZHJlbik7XG4gICAgICAgIHBhcmVudHMucHVzaChub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oc3ViZ3JvdXBzLCBwYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJpbXBvcnQge21hdGNoZXJ9IGZyb20gXCJkMy1zZWxlY3Rpb25cIjtcbmltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24obWF0Y2gpIHtcbiAgaWYgKHR5cGVvZiBtYXRjaCAhPT0gXCJmdW5jdGlvblwiKSBtYXRjaCA9IG1hdGNoZXIobWF0Y2gpO1xuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIHN1Ymdyb3VwcyA9IG5ldyBBcnJheShtKSwgaiA9IDA7IGogPCBtOyArK2opIHtcbiAgICBmb3IgKHZhciBncm91cCA9IGdyb3Vwc1tqXSwgbiA9IGdyb3VwLmxlbmd0aCwgc3ViZ3JvdXAgPSBzdWJncm91cHNbal0gPSBbXSwgbm9kZSwgaSA9IDA7IGkgPCBuOyArK2kpIHtcbiAgICAgIGlmICgobm9kZSA9IGdyb3VwW2ldKSAmJiBtYXRjaC5jYWxsKG5vZGUsIG5vZGUuX19kYXRhX18sIGksIGdyb3VwKSkge1xuICAgICAgICBzdWJncm91cC5wdXNoKG5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihzdWJncm91cHMsIHRoaXMuX3BhcmVudHMsIHRoaXMuX25hbWUsIHRoaXMuX2lkKTtcbn1cbiIsImltcG9ydCB7VHJhbnNpdGlvbn0gZnJvbSBcIi4vaW5kZXguanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odHJhbnNpdGlvbikge1xuICBpZiAodHJhbnNpdGlvbi5faWQgIT09IHRoaXMuX2lkKSB0aHJvdyBuZXcgRXJyb3I7XG5cbiAgZm9yICh2YXIgZ3JvdXBzMCA9IHRoaXMuX2dyb3VwcywgZ3JvdXBzMSA9IHRyYW5zaXRpb24uX2dyb3VwcywgbTAgPSBncm91cHMwLmxlbmd0aCwgbTEgPSBncm91cHMxLmxlbmd0aCwgbSA9IE1hdGgubWluKG0wLCBtMSksIG1lcmdlcyA9IG5ldyBBcnJheShtMCksIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAwID0gZ3JvdXBzMFtqXSwgZ3JvdXAxID0gZ3JvdXBzMVtqXSwgbiA9IGdyb3VwMC5sZW5ndGgsIG1lcmdlID0gbWVyZ2VzW2pdID0gbmV3IEFycmF5KG4pLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cDBbaV0gfHwgZ3JvdXAxW2ldKSB7XG4gICAgICAgIG1lcmdlW2ldID0gbm9kZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKDsgaiA8IG0wOyArK2opIHtcbiAgICBtZXJnZXNbal0gPSBncm91cHMwW2pdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBUcmFuc2l0aW9uKG1lcmdlcywgdGhpcy5fcGFyZW50cywgdGhpcy5fbmFtZSwgdGhpcy5faWQpO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSwge2dldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKSB7XG4gIHZhciBuYW1lID0gdGhpcy5fbmFtZSxcbiAgICAgIGlkMCA9IHRoaXMuX2lkLFxuICAgICAgaWQxID0gbmV3SWQoKTtcblxuICBmb3IgKHZhciBncm91cHMgPSB0aGlzLl9ncm91cHMsIG0gPSBncm91cHMubGVuZ3RoLCBqID0gMDsgaiA8IG07ICsraikge1xuICAgIGZvciAodmFyIGdyb3VwID0gZ3JvdXBzW2pdLCBuID0gZ3JvdXAubGVuZ3RoLCBub2RlLCBpID0gMDsgaSA8IG47ICsraSkge1xuICAgICAgaWYgKG5vZGUgPSBncm91cFtpXSkge1xuICAgICAgICB2YXIgaW5oZXJpdCA9IGdldChub2RlLCBpZDApO1xuICAgICAgICBzY2hlZHVsZShub2RlLCBuYW1lLCBpZDEsIGksIGdyb3VwLCB7XG4gICAgICAgICAgdGltZTogaW5oZXJpdC50aW1lICsgaW5oZXJpdC5kZWxheSArIGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZGVsYXk6IDAsXG4gICAgICAgICAgZHVyYXRpb246IGluaGVyaXQuZHVyYXRpb24sXG4gICAgICAgICAgZWFzZTogaW5oZXJpdC5lYXNlXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgVHJhbnNpdGlvbihncm91cHMsIHRoaXMuX3BhcmVudHMsIG5hbWUsIGlkMSk7XG59XG4iLCJpbXBvcnQge3R3ZWVuVmFsdWV9IGZyb20gXCIuL3R3ZWVuLmpzXCI7XG5cbmZ1bmN0aW9uIHRleHRDb25zdGFudCh2YWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuICB9O1xufVxuXG5mdW5jdGlvbiB0ZXh0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciB2YWx1ZTEgPSB2YWx1ZSh0aGlzKTtcbiAgICB0aGlzLnRleHRDb250ZW50ID0gdmFsdWUxID09IG51bGwgPyBcIlwiIDogdmFsdWUxO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gdGhpcy50d2VlbihcInRleHRcIiwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCJcbiAgICAgID8gdGV4dEZ1bmN0aW9uKHR3ZWVuVmFsdWUodGhpcywgXCJ0ZXh0XCIsIHZhbHVlKSlcbiAgICAgIDogdGV4dENvbnN0YW50KHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiKSk7XG59XG4iLCJmdW5jdGlvbiByZW1vdmVGdW5jdGlvbihpZCkge1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcbiAgICBmb3IgKHZhciBpIGluIHRoaXMuX190cmFuc2l0aW9uKSBpZiAoK2kgIT09IGlkKSByZXR1cm47XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LnJlbW92ZUNoaWxkKHRoaXMpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIHRoaXMub24oXCJlbmQucmVtb3ZlXCIsIHJlbW92ZUZ1bmN0aW9uKHRoaXMuX2lkKSk7XG59XG4iLCJpbXBvcnQge3NldH0gZnJvbSBcIi4vc2NoZWR1bGUuanNcIjtcblxuZnVuY3Rpb24gZWFzZVZhcnlpbmcoaWQsIHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgdiA9IHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHR5cGVvZiB2ICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgICBzZXQodGhpcywgaWQpLmVhc2UgPSB2O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBFcnJvcjtcbiAgcmV0dXJuIHRoaXMuZWFjaChlYXNlVmFyeWluZyh0aGlzLl9pZCwgdmFsdWUpKTtcbn1cbiIsImltcG9ydCB7c2V0fSBmcm9tIFwiLi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbigpIHtcbiAgdmFyIG9uMCwgb24xLCB0aGF0ID0gdGhpcywgaWQgPSB0aGF0Ll9pZCwgc2l6ZSA9IHRoYXQuc2l6ZSgpO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdmFyIGNhbmNlbCA9IHt2YWx1ZTogcmVqZWN0fSxcbiAgICAgICAgZW5kID0ge3ZhbHVlOiBmdW5jdGlvbigpIHsgaWYgKC0tc2l6ZSA9PT0gMCkgcmVzb2x2ZSgpOyB9fTtcblxuICAgIHRoYXQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgIHZhciBzY2hlZHVsZSA9IHNldCh0aGlzLCBpZCksXG4gICAgICAgICAgb24gPSBzY2hlZHVsZS5vbjtcblxuICAgICAgLy8gSWYgdGhpcyBub2RlIHNoYXJlZCBhIGRpc3BhdGNoIHdpdGggdGhlIHByZXZpb3VzIG5vZGUsXG4gICAgICAvLyBqdXN0IGFzc2lnbiB0aGUgdXBkYXRlZCBzaGFyZWQgZGlzcGF0Y2ggYW5kIHdl4oCZcmUgZG9uZSFcbiAgICAgIC8vIE90aGVyd2lzZSwgY29weS1vbi13cml0ZS5cbiAgICAgIGlmIChvbiAhPT0gb24wKSB7XG4gICAgICAgIG9uMSA9IChvbjAgPSBvbikuY29weSgpO1xuICAgICAgICBvbjEuXy5jYW5jZWwucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5pbnRlcnJ1cHQucHVzaChjYW5jZWwpO1xuICAgICAgICBvbjEuXy5lbmQucHVzaChlbmQpO1xuICAgICAgfVxuXG4gICAgICBzY2hlZHVsZS5vbiA9IG9uMTtcbiAgICB9KTtcblxuICAgIC8vIFRoZSBzZWxlY3Rpb24gd2FzIGVtcHR5LCByZXNvbHZlIGVuZCBpbW1lZGlhdGVseVxuICAgIGlmIChzaXplID09PSAwKSByZXNvbHZlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtUcmFuc2l0aW9uLCBuZXdJZH0gZnJvbSBcIi4uL3RyYW5zaXRpb24vaW5kZXguanNcIjtcbmltcG9ydCBzY2hlZHVsZSBmcm9tIFwiLi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuaW1wb3J0IHtlYXNlQ3ViaWNJbk91dH0gZnJvbSBcImQzLWVhc2VcIjtcbmltcG9ydCB7bm93fSBmcm9tIFwiZDMtdGltZXJcIjtcblxudmFyIGRlZmF1bHRUaW1pbmcgPSB7XG4gIHRpbWU6IG51bGwsIC8vIFNldCBvbiB1c2UuXG4gIGRlbGF5OiAwLFxuICBkdXJhdGlvbjogMjUwLFxuICBlYXNlOiBlYXNlQ3ViaWNJbk91dFxufTtcblxuZnVuY3Rpb24gaW5oZXJpdChub2RlLCBpZCkge1xuICB2YXIgdGltaW5nO1xuICB3aGlsZSAoISh0aW1pbmcgPSBub2RlLl9fdHJhbnNpdGlvbikgfHwgISh0aW1pbmcgPSB0aW1pbmdbaWRdKSkge1xuICAgIGlmICghKG5vZGUgPSBub2RlLnBhcmVudE5vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHRyYW5zaXRpb24gJHtpZH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aW1pbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIGlkLFxuICAgICAgdGltaW5nO1xuXG4gIGlmIChuYW1lIGluc3RhbmNlb2YgVHJhbnNpdGlvbikge1xuICAgIGlkID0gbmFtZS5faWQsIG5hbWUgPSBuYW1lLl9uYW1lO1xuICB9IGVsc2Uge1xuICAgIGlkID0gbmV3SWQoKSwgKHRpbWluZyA9IGRlZmF1bHRUaW1pbmcpLnRpbWUgPSBub3coKSwgbmFtZSA9IG5hbWUgPT0gbnVsbCA/IG51bGwgOiBuYW1lICsgXCJcIjtcbiAgfVxuXG4gIGZvciAodmFyIGdyb3VwcyA9IHRoaXMuX2dyb3VwcywgbSA9IGdyb3Vwcy5sZW5ndGgsIGogPSAwOyBqIDwgbTsgKytqKSB7XG4gICAgZm9yICh2YXIgZ3JvdXAgPSBncm91cHNbal0sIG4gPSBncm91cC5sZW5ndGgsIG5vZGUsIGkgPSAwOyBpIDwgbjsgKytpKSB7XG4gICAgICBpZiAobm9kZSA9IGdyb3VwW2ldKSB7XG4gICAgICAgIHNjaGVkdWxlKG5vZGUsIG5hbWUsIGlkLCBpLCBncm91cCwgdGltaW5nIHx8IGluaGVyaXQobm9kZSwgaWQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFRyYW5zaXRpb24oZ3JvdXBzLCB0aGlzLl9wYXJlbnRzLCBuYW1lLCBpZCk7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gY3ViaWNJbih0KSB7XG4gIHJldHVybiB0ICogdCAqIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gIHJldHVybiAtLXQgKiB0ICogdCArIDE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgcmV0dXJuICgodCAqPSAyKSA8PSAxID8gdCAqIHQgKiB0IDogKHQgLT0gMikgKiB0ICogdCArIDIpIC8gMjtcbn1cbiIsImltcG9ydCB7c2VsZWN0aW9ufSBmcm9tIFwiZDMtc2VsZWN0aW9uXCI7XG5pbXBvcnQgc2VsZWN0aW9uX2ludGVycnVwdCBmcm9tIFwiLi9pbnRlcnJ1cHQuanNcIjtcbmltcG9ydCBzZWxlY3Rpb25fdHJhbnNpdGlvbiBmcm9tIFwiLi90cmFuc2l0aW9uLmpzXCI7XG5cbnNlbGVjdGlvbi5wcm90b3R5cGUuaW50ZXJydXB0ID0gc2VsZWN0aW9uX2ludGVycnVwdDtcbnNlbGVjdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbiA9IHNlbGVjdGlvbl90cmFuc2l0aW9uO1xuIiwiaW1wb3J0IGludGVycnVwdCBmcm9tIFwiLi4vaW50ZXJydXB0LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKG5hbWUpIHtcbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcbiAgICBpbnRlcnJ1cHQodGhpcywgbmFtZSk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHtTVEFSVElORywgRU5ESU5HLCBFTkRFRH0gZnJvbSBcIi4vdHJhbnNpdGlvbi9zY2hlZHVsZS5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihub2RlLCBuYW1lKSB7XG4gIHZhciBzY2hlZHVsZXMgPSBub2RlLl9fdHJhbnNpdGlvbixcbiAgICAgIHNjaGVkdWxlLFxuICAgICAgYWN0aXZlLFxuICAgICAgZW1wdHkgPSB0cnVlLFxuICAgICAgaTtcblxuICBpZiAoIXNjaGVkdWxlcykgcmV0dXJuO1xuXG4gIG5hbWUgPSBuYW1lID09IG51bGwgPyBudWxsIDogbmFtZSArIFwiXCI7XG5cbiAgZm9yIChpIGluIHNjaGVkdWxlcykge1xuICAgIGlmICgoc2NoZWR1bGUgPSBzY2hlZHVsZXNbaV0pLm5hbWUgIT09IG5hbWUpIHsgZW1wdHkgPSBmYWxzZTsgY29udGludWU7IH1cbiAgICBhY3RpdmUgPSBzY2hlZHVsZS5zdGF0ZSA+IFNUQVJUSU5HICYmIHNjaGVkdWxlLnN0YXRlIDwgRU5ESU5HO1xuICAgIHNjaGVkdWxlLnN0YXRlID0gRU5ERUQ7XG4gICAgc2NoZWR1bGUudGltZXIuc3RvcCgpO1xuICAgIHNjaGVkdWxlLm9uLmNhbGwoYWN0aXZlID8gXCJpbnRlcnJ1cHRcIiA6IFwiY2FuY2VsXCIsIG5vZGUsIG5vZGUuX19kYXRhX18sIHNjaGVkdWxlLmluZGV4LCBzY2hlZHVsZS5ncm91cCk7XG4gICAgZGVsZXRlIHNjaGVkdWxlc1tpXTtcbiAgfVxuXG4gIGlmIChlbXB0eSkgZGVsZXRlIG5vZGUuX190cmFuc2l0aW9uO1xufVxuIiwiaW1wb3J0IHsgc2VsZWN0IH0gZnJvbSAnZDMtc2VsZWN0aW9uJ1xuaW1wb3J0IHsgdHJhbnNpdGlvbiwgZHVyYXRpb24sIG9uIH0gZnJvbSAnZDMtdHJhbnNpdGlvbidcbmNvbnN0IHRvb2x0aXBFbCA9IHNlbGVjdCgnLnRvb2x0aXAnKVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNob3c6IGZ1bmN0aW9uKGV2ZW50LCBjb250ZW50KSB7XG4gICAgbGV0IHlQb3MgPSBldmVudC5wYWdlWSAtIDEwMFxuICAgIGxldCB4UG9zID0gZXZlbnQucGFnZVhcbiAgICBpZiAoeFBvcyArIDEwID4gZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCAtIDExNSkge1xuICAgICAgeFBvcyA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGggKyA1IC0gMTc1XG4gICAgfVxuXG4gICAgaWYgKHlQb3MgPCAyNSkge1xuICAgICAgeVBvcyA9IHlQb3MgKyA4NVxuICAgIH1cblxuICAgIHRvb2x0aXBFbFxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDIwMClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDAuOSlcbiAgICAgIC5vbignZW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHRvb2x0aXBFbC5jbGFzc2VkKCdpc0FjdGl2ZScsIHRydWUpXG4gICAgICAgIHRvb2x0aXBFbC5zZWxlY3QoJy50b29sdGlwLWNsb3NlJykub24oJ2NsaWNrJywgdGhpcy5oaWRlKVxuICAgICAgfSlcbiAgICB0b29sdGlwRWxcbiAgICAgIC5odG1sKGNvbnRlbnQpXG4gICAgICAuc3R5bGUoJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpXG4gICAgICAuc3R5bGUoJ2xlZnQnLCB4UG9zICsgJ3B4JylcbiAgICAgIC5zdHlsZSgndG9wJywgeVBvcyArICdweCcpXG4gIH0sXG4gIGhpZGU6IGZ1bmN0aW9uKCkge1xuICAgIHRvb2x0aXBFbFxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDUwMClcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIDApXG4gIH0sXG4gIGZvcm1hdENvbnRlbnQ6IGZ1bmN0aW9uKGNvbXBvbmVudCwgaXNMaXN0ID0gZmFsc2UpIHtcbiAgICBsZXQgY29udGVudCA9ICcnXG4gICAgaWYgKGlzTGlzdCkge1xuICAgICAgY29udGVudCA9ICc8dWwgY2xhc3M9XCJ0b29sdGlwLWxpc3RcIj4nXG4gICAgfVxuICAgIGNvbXBvbmVudC5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0sIGluZGV4KSB7XG4gICAgICBsZXQgY3NzQ2xhc3MgPSBudWxsXG4gICAgICBpZiAoaXRlbS5jbGFzcykge1xuICAgICAgICBjc3NDbGFzcyA9IGl0ZW0uY2xhc3NcbiAgICAgIH1cbiAgICAgIGxldCBwcmVmaXggPSAnJ1xuICAgICAgbGV0IHN1ZmZpeCA9ICc8YnIgLz4nXG4gICAgICBpZiAoaXNMaXN0KSB7XG4gICAgICAgIHByZWZpeCA9IGA8bGkgY2xhc3M9XCIke2Nzc0NsYXNzfVwiPmBcbiAgICAgICAgc3VmZml4ID0gJzwvbGk+J1xuICAgICAgfVxuXG4gICAgICBsZXQgbGFiZWwgPSBPYmplY3Qua2V5cyhpdGVtKVswXVxuICAgICAgY29udGVudCArPSBgJHtwcmVmaXh9PHNwYW4gY2xhc3M9XCJ0b29sdGlwLWxhYmVsXCI+JHtsYWJlbH06PC9zcGFuPiAke1xuICAgICAgICBpdGVtW2xhYmVsXVxuICAgICAgfSR7c3VmZml4fWBcbiAgICB9KVxuICAgIGlmIChpc0xpc3QpIHtcbiAgICAgIGNvbnRlbnQgKz0gJzwvdWw+J1xuICAgIH1cbiAgICByZXR1cm4gY29udGVudFxuICB9XG59XG5cbi8vIGV4cG9ydCBkZWZhdWx0IHsgdG9vbHRpcCB9XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbih4KSB7XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IHJldmVyc2UgZnJvbSBcIi4vcmV2ZXJzZS5qc1wiO1xuaW1wb3J0IHRyYW5zZm9ybSBmcm9tIFwiLi90cmFuc2Zvcm0uanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24odG9wb2xvZ3ksIG8pIHtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSBvID0gdG9wb2xvZ3kub2JqZWN0c1tvXTtcbiAgcmV0dXJuIG8udHlwZSA9PT0gXCJHZW9tZXRyeUNvbGxlY3Rpb25cIlxuICAgICAgPyB7dHlwZTogXCJGZWF0dXJlQ29sbGVjdGlvblwiLCBmZWF0dXJlczogby5nZW9tZXRyaWVzLm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBmZWF0dXJlKHRvcG9sb2d5LCBvKTsgfSl9XG4gICAgICA6IGZlYXR1cmUodG9wb2xvZ3ksIG8pO1xufVxuXG5mdW5jdGlvbiBmZWF0dXJlKHRvcG9sb2d5LCBvKSB7XG4gIHZhciBpZCA9IG8uaWQsXG4gICAgICBiYm94ID0gby5iYm94LFxuICAgICAgcHJvcGVydGllcyA9IG8ucHJvcGVydGllcyA9PSBudWxsID8ge30gOiBvLnByb3BlcnRpZXMsXG4gICAgICBnZW9tZXRyeSA9IG9iamVjdCh0b3BvbG9neSwgbyk7XG4gIHJldHVybiBpZCA9PSBudWxsICYmIGJib3ggPT0gbnVsbCA/IHt0eXBlOiBcIkZlYXR1cmVcIiwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiBiYm94ID09IG51bGwgPyB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fVxuICAgICAgOiB7dHlwZTogXCJGZWF0dXJlXCIsIGlkOiBpZCwgYmJveDogYmJveCwgcHJvcGVydGllczogcHJvcGVydGllcywgZ2VvbWV0cnk6IGdlb21ldHJ5fTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9iamVjdCh0b3BvbG9neSwgbykge1xuICB2YXIgdHJhbnNmb3JtUG9pbnQgPSB0cmFuc2Zvcm0odG9wb2xvZ3kudHJhbnNmb3JtKSxcbiAgICAgIGFyY3MgPSB0b3BvbG9neS5hcmNzO1xuXG4gIGZ1bmN0aW9uIGFyYyhpLCBwb2ludHMpIHtcbiAgICBpZiAocG9pbnRzLmxlbmd0aCkgcG9pbnRzLnBvcCgpO1xuICAgIGZvciAodmFyIGEgPSBhcmNzW2kgPCAwID8gfmkgOiBpXSwgayA9IDAsIG4gPSBhLmxlbmd0aDsgayA8IG47ICsraykge1xuICAgICAgcG9pbnRzLnB1c2godHJhbnNmb3JtUG9pbnQoYVtrXSwgaykpO1xuICAgIH1cbiAgICBpZiAoaSA8IDApIHJldmVyc2UocG9pbnRzLCBuKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50KHApIHtcbiAgICByZXR1cm4gdHJhbnNmb3JtUG9pbnQocCk7XG4gIH1cblxuICBmdW5jdGlvbiBsaW5lKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDAsIG4gPSBhcmNzLmxlbmd0aDsgaSA8IG47ICsraSkgYXJjKGFyY3NbaV0sIHBvaW50cyk7XG4gICAgaWYgKHBvaW50cy5sZW5ndGggPCAyKSBwb2ludHMucHVzaChwb2ludHNbMF0pOyAvLyBUaGlzIHNob3VsZCBuZXZlciBoYXBwZW4gcGVyIHRoZSBzcGVjaWZpY2F0aW9uLlxuICAgIHJldHVybiBwb2ludHM7XG4gIH1cblxuICBmdW5jdGlvbiByaW5nKGFyY3MpIHtcbiAgICB2YXIgcG9pbnRzID0gbGluZShhcmNzKTtcbiAgICB3aGlsZSAocG9pbnRzLmxlbmd0aCA8IDQpIHBvaW50cy5wdXNoKHBvaW50c1swXSk7IC8vIFRoaXMgbWF5IGhhcHBlbiBpZiBhbiBhcmMgaGFzIG9ubHkgdHdvIHBvaW50cy5cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seWdvbihhcmNzKSB7XG4gICAgcmV0dXJuIGFyY3MubWFwKHJpbmcpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VvbWV0cnkobykge1xuICAgIHZhciB0eXBlID0gby50eXBlLCBjb29yZGluYXRlcztcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJHZW9tZXRyeUNvbGxlY3Rpb25cIjogcmV0dXJuIHt0eXBlOiB0eXBlLCBnZW9tZXRyaWVzOiBvLmdlb21ldHJpZXMubWFwKGdlb21ldHJ5KX07XG4gICAgICBjYXNlIFwiUG9pbnRcIjogY29vcmRpbmF0ZXMgPSBwb2ludChvLmNvb3JkaW5hdGVzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2ludFwiOiBjb29yZGluYXRlcyA9IG8uY29vcmRpbmF0ZXMubWFwKHBvaW50KTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTGluZVN0cmluZ1wiOiBjb29yZGluYXRlcyA9IGxpbmUoby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlMaW5lU3RyaW5nXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChsaW5lKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiUG9seWdvblwiOiBjb29yZGluYXRlcyA9IHBvbHlnb24oby5hcmNzKTsgYnJlYWs7XG4gICAgICBjYXNlIFwiTXVsdGlQb2x5Z29uXCI6IGNvb3JkaW5hdGVzID0gby5hcmNzLm1hcChwb2x5Z29uKTsgYnJlYWs7XG4gICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHt0eXBlOiB0eXBlLCBjb29yZGluYXRlczogY29vcmRpbmF0ZXN9O1xuICB9XG5cbiAgcmV0dXJuIGdlb21ldHJ5KG8pO1xufVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuL2lkZW50aXR5LmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKHRyYW5zZm9ybSkge1xuICBpZiAodHJhbnNmb3JtID09IG51bGwpIHJldHVybiBpZGVudGl0eTtcbiAgdmFyIHgwLFxuICAgICAgeTAsXG4gICAgICBreCA9IHRyYW5zZm9ybS5zY2FsZVswXSxcbiAgICAgIGt5ID0gdHJhbnNmb3JtLnNjYWxlWzFdLFxuICAgICAgZHggPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzBdLFxuICAgICAgZHkgPSB0cmFuc2Zvcm0udHJhbnNsYXRlWzFdO1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQsIGkpIHtcbiAgICBpZiAoIWkpIHgwID0geTAgPSAwO1xuICAgIHZhciBqID0gMiwgbiA9IGlucHV0Lmxlbmd0aCwgb3V0cHV0ID0gbmV3IEFycmF5KG4pO1xuICAgIG91dHB1dFswXSA9ICh4MCArPSBpbnB1dFswXSkgKiBreCArIGR4O1xuICAgIG91dHB1dFsxXSA9ICh5MCArPSBpbnB1dFsxXSkgKiBreSArIGR5O1xuICAgIHdoaWxlIChqIDwgbikgb3V0cHV0W2pdID0gaW5wdXRbal0sICsrajtcbiAgICByZXR1cm4gb3V0cHV0O1xuICB9O1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oYXJyYXksIG4pIHtcbiAgdmFyIHQsIGogPSBhcnJheS5sZW5ndGgsIGkgPSBqIC0gbjtcbiAgd2hpbGUgKGkgPCAtLWopIHQgPSBhcnJheVtpXSwgYXJyYXlbaSsrXSA9IGFycmF5W2pdLCBhcnJheVtqXSA9IHQ7XG59XG4iLCJpbXBvcnQgeyBnZW9QYXRoLCBnZW9PcnRob2dyYXBoaWMgfSBmcm9tICdkMy1nZW8nXG5pbXBvcnQgeyBzY2FsZUxpbmVhciB9IGZyb20gJ2QzLXNjYWxlJ1xuaW1wb3J0IHsgc2VsZWN0LCBzZWxlY3RBbGwgfSBmcm9tICdkMy1zZWxlY3Rpb24nXG5pbXBvcnQgdG9vbHRpcCBmcm9tICcuL3Rvb2x0aXAnXG5pbXBvcnQgKiBhcyB0b3BvanNvbiBmcm9tICd0b3BvanNvbi1jbGllbnQnXG5cbmNvbnN0IGNoYXJ0ID0gZHJhd0NoYXJ0KClcblxubGV0IGVsXG5sZXQgd29ybGRcbmxldCB3b3JsZFByb2plY3Rpb25cbmxldCB0cmFuc2l0aW9uRHVyYXRpb25cblxuZnVuY3Rpb24gcmVzaXplKCkge1xuICBjb25zdCBzeiA9IE1hdGgubWluKGVsLm5vZGUoKS5vZmZzZXRXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KVxuICBjaGFydC53aWR0aChzeikuaGVpZ2h0KHN6IC8gMylcbiAgZWwuY2FsbChjaGFydClcbn1cblxuZnVuY3Rpb24gZHJhd0NoYXJ0KCkge1xuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogMTAsIHJpZ2h0OiAxMCwgYm90dG9tOiAxMCwgbGVmdDogMTAgfVxuICBjb25zdCBkZWZhdWx0Q29vcmRzID0ge1xuICAgIG9yYml0OiB7XG4gICAgICB4OiB7XG4gICAgICAgIG1pbjogLTEsXG4gICAgICAgIG1heDogMVxuICAgICAgfSxcbiAgICAgIHk6IHtcbiAgICAgICAgbWluOiAtMC4zMDksXG4gICAgICAgIG1heDogMC4zMDlcbiAgICAgIH1cbiAgICB9LFxuICAgIGVhcnRoOiB7XG4gICAgICB4OiB7XG4gICAgICAgIG1pbjogLTAuMTUxLFxuICAgICAgICBtYXg6IDAuMTUxXG4gICAgICB9LFxuICAgICAgeToge1xuICAgICAgICBtaW46IC0wLjE1MSxcbiAgICAgICAgbWF4OiAwLjE1MVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBwcm9qZWN0aW9uID0gZ2VvT3J0aG9ncmFwaGljKClcbiAgbGV0IGdsb2JlUGF0aCA9IGdlb1BhdGgoKVxuXG4gIGxldCB3aWR0aCA9IDBcbiAgbGV0IGhlaWdodCA9IDBcbiAgbGV0IHJhZGl1cyA9IDNcbiAgbGV0IHBlcnBSYWRpdXMgPSA1XG5cbiAgbGV0IHNjYWxlWCA9IHNjYWxlTGluZWFyKClcbiAgbGV0IHNjYWxlWSA9IHNjYWxlTGluZWFyKClcblxuICBmdW5jdGlvbiBlbnRlcih7IGNvbnRhaW5lciwgZGF0YSB9KSB7XG4gICAgY29uc3Qgc3ZnID0gY29udGFpbmVyLnNlbGVjdEFsbCgnc3ZnJykuZGF0YShbZGF0YV0pXG4gICAgY29uc3Qgc3ZnRW50ZXIgPSBzdmcuZW50ZXIoKS5hcHBlbmQoJ3N2ZycpXG4gICAgY29uc3QgZ0VudGVyID0gc3ZnRW50ZXIuYXBwZW5kKCdnJylcbiAgICBnRW50ZXJcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ctb3JiaXQnKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignZmlsbCcsICdub25lJylcbiAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2I1YmRjMScpXG4gICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMilcblxuICAgIGNvbnN0IGVhcnRoID0gZ0VudGVyLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2ctZWFydGgnKVxuICAgIGVhcnRoXG4gICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3dhdGVyJylcbiAgICAgIC5hdHRyKCdmaWxsJywgJyNiN2M3ZDEnKVxuXG4gICAgZWFydGhcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xhbmQnKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJyNmMmYxZWUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnI2NjYycpXG4gICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsICcwLjNweCcpXG5cbiAgICBnRW50ZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnZy1wbG90JylcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNjYWxlcyh7IGRhdGEgfSkge1xuICAgIHNjYWxlWFxuICAgICAgLmRvbWFpbihbZGVmYXVsdENvb3Jkcy5vcmJpdC54Lm1pbiwgZGVmYXVsdENvb3Jkcy5vcmJpdC54Lm1heF0pXG4gICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcbiAgICBzY2FsZVlcbiAgICAgIC5kb21haW4oW2RlZmF1bHRDb29yZHMub3JiaXQueS5taW4sIGRlZmF1bHRDb29yZHMub3JiaXQueS5tYXhdKVxuICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRG9tKHsgY29udGFpbmVyLCBkYXRhIH0pIHtcbiAgICBsZXQgc3ZnID0gY29udGFpbmVyXG4gICAgICAuc2VsZWN0KCdzdmcnKVxuICAgICAgLmF0dHIoXG4gICAgICAgICd2aWV3Qm94JyxcbiAgICAgICAgJzAgMCAnICtcbiAgICAgICAgICAod2lkdGggKyBtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodCkgK1xuICAgICAgICAgICcgJyArXG4gICAgICAgICAgKGhlaWdodCArIG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKVxuICAgICAgKVxuXG4gICAgbGV0IGcgPSBzdmdcbiAgICAgIC5zZWxlY3QoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hcmdpbi5sZWZ0ICsgJywnICsgbWFyZ2luLnRvcCArICcpJylcblxuICAgIC8vIEVhcnRoXG4gICAgbGV0IGVhcnRoID0gZy5zZWxlY3QoJy5nLWVhcnRoJylcblxuICAgIGNvbnN0IGVhcnRoUmFkaXVzID0gTWF0aC5hYnMoc2NhbGVZKGRlZmF1bHRDb29yZHMuZWFydGgueS5tYXgpIC0gc2NhbGVZKDApKVxuXG4gICAgcHJvamVjdGlvblxuICAgICAgLnRyYW5zbGF0ZShbc2NhbGVYKDApLCBzY2FsZVkoMCldKVxuICAgICAgLnNjYWxlKGVhcnRoUmFkaXVzKVxuICAgICAgLnJvdGF0ZSh3b3JsZFByb2plY3Rpb24pXG4gICAgZ2xvYmVQYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbilcblxuICAgIGVhcnRoXG4gICAgICAuc2VsZWN0KCcud2F0ZXInKVxuICAgICAgLmF0dHIoJ2N4Jywgc2NhbGVYKDApKVxuICAgICAgLmF0dHIoJ2N5Jywgc2NhbGVZKDApKVxuICAgICAgLmF0dHIoJ3InLCBwcm9qZWN0aW9uLnNjYWxlKCkpXG5cbiAgICBlYXJ0aFxuICAgICAgLnNlbGVjdCgnLmxhbmQnKVxuICAgICAgLmRhdHVtKHRvcG9qc29uLmZlYXR1cmUod29ybGQsIHdvcmxkLm9iamVjdHMuY291bnRyaWVzKSlcbiAgICAgIC5hdHRyKCdkJywgZ2xvYmVQYXRoKVxuXG4gICAgLy8gR2Vvc3RhdGlvbmFyeSBCZWx0XG4gICAgbGV0IG9yYml0ID0gZy5zZWxlY3QoJy5nLW9yYml0IHBhdGgnKVxuXG4gICAgY29uc3Qgb3JiaXRSYWRpdXNYID0gTWF0aC5hYnMoc2NhbGVYKGRlZmF1bHRDb29yZHMub3JiaXQueC5tYXgpIC0gc2NhbGVYKDApKVxuXG4gICAgY29uc3Qgb3JiaXRSYWRpdXNZID0gTWF0aC5hYnMoc2NhbGVZKGRlZmF1bHRDb29yZHMub3JiaXQueS5tYXgpIC0gc2NhbGVZKDApKVxuXG4gICAgb3JiaXQuYXR0cihcbiAgICAgICdkJyxcbiAgICAgIGRyYXdFbGxpcHNlKHtcbiAgICAgICAgY3g6IHNjYWxlWCgwKSxcbiAgICAgICAgY3k6IHNjYWxlWSgwKSxcbiAgICAgICAgcng6IG9yYml0UmFkaXVzWCxcbiAgICAgICAgcnk6IG9yYml0UmFkaXVzWVxuICAgICAgfSlcbiAgICApXG5cbiAgICAvLyBTYXRlbGxpdGVzXG4gICAgbGV0IHNhdGVsbGl0ZXMgPSBnXG4gICAgICAuc2VsZWN0KCcuZy1wbG90JylcbiAgICAgIC5zZWxlY3RBbGwoJy5zYXRlbGxpdGUnKVxuICAgICAgLmRhdGEoZGF0YSwgZCA9PiBkLnNhdF9uYW1lKVxuXG4gICAgc2F0ZWxsaXRlcy5qb2luKFxuICAgICAgZW50ZXIgPT5cbiAgICAgICAgZW50ZXJcbiAgICAgICAgICAuYXBwZW5kKCdjaXJjbGUnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdzYXRlbGxpdGUnKVxuICAgICAgICAgIC5jbGFzc2VkKCdzYXRlbGxpdGUtLXBlcnAnLCBkID0+IGQuaXNfcGVycClcbiAgICAgICAgICAuY2xhc3NlZCgnc2F0ZWxsaXRlLS10YXJnZXQnLCBkID0+IGQuaXNfdGFyZ2V0KVxuICAgICAgICAgIC5hdHRyKCdyJywgcGVycFJhZGl1cylcbiAgICAgICAgICAuYXR0cignZGF0YS14JywgZCA9PiBkLnhfY29vcmQpXG4gICAgICAgICAgLmF0dHIoJ2RhdGEteScsIGQgPT4gZC55X2Nvb3JkKVxuICAgICAgICAgIC5hdHRyKFxuICAgICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgICBkID0+IGB0cmFuc2xhdGUoJHtzY2FsZVgoZC54X2Nvb3JkKX0sICR7c2NhbGVZKGQueV9jb29yZCl9KWBcbiAgICAgICAgICApXG4gICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBpbnRlcmFjdGlvbnMubW91c2VvdmVyKVxuICAgICAgICAgIC5vbignbW91c2VsZWF2ZScsIGludGVyYWN0aW9ucy5tb3VzZWxlYXZlKSxcbiAgICAgIHVwZGF0ZSA9PlxuICAgICAgICB1cGRhdGVcbiAgICAgICAgICAuYXR0cignZGF0YS14JywgZCA9PiBkLnhfY29vcmQpXG4gICAgICAgICAgLmF0dHIoJ2RhdGEteScsIGQgPT4gZC55X2Nvb3JkKVxuICAgICAgICAgIC5jYWxsKHVwZGF0ZSA9PlxuICAgICAgICAgICAgdXBkYXRlXG4gICAgICAgICAgICAgIC50cmFuc2l0aW9uKHRyYW5zaXRpb25EdXJhdGlvbilcbiAgICAgICAgICAgICAgLmF0dHIoXG4gICAgICAgICAgICAgICAgJ3RyYW5zZm9ybScsXG4gICAgICAgICAgICAgICAgZCA9PiBgdHJhbnNsYXRlKCR7c2NhbGVYKGQueF9jb29yZCl9LCAke3NjYWxlWShkLnlfY29vcmQpfSlgXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICApXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gY2hhcnQoY29udGFpbmVyKSB7XG4gICAgY29uc3QgZGF0YSA9IGNvbnRhaW5lci5kYXR1bSgpXG5cbiAgICBlbnRlcih7IGNvbnRhaW5lciwgZGF0YSB9KVxuICAgIHVwZGF0ZVNjYWxlcyh7IGRhdGEgfSlcbiAgICB1cGRhdGVEb20oeyBjb250YWluZXIsIGRhdGEgfSlcbiAgfVxuXG4gIGNvbnN0IGludGVyYWN0aW9ucyA9IHtcbiAgICBtb3VzZW92ZXIoZXZlbnQsIGQpIHtcbiAgICAgIGludGVyYWN0aW9ucy5zaG93VG9vbHRpcChldmVudCwgZClcbiAgICAgIHNlbGVjdCh0aGlzKS5jbGFzc2VkKCdpcy1hY3RpdmUnLCB0cnVlKVxuICAgIH0sXG4gICAgbW91c2VsZWF2ZSgpIHtcbiAgICAgIHRvb2x0aXAuaGlkZSgpXG4gICAgICBzZWxlY3QodGhpcykuY2xhc3NlZCgnaXMtYWN0aXZlJywgZmFsc2UpXG4gICAgfSxcbiAgICBzaG93VG9vbHRpcChldmVudCwgZCkge1xuICAgICAgbGV0IHRvb2x0aXBCb2R5ID0gW3sgRGF0ZTogZC50aW1lc3RhbXAgfSwgeyBMb25naXR1ZGU6IGQubG9uZ19zdHJpbmcgfV1cblxuICAgICAgbGV0IHRvb2x0aXBDb250ZW50ID0gYFxuICAgICAgPHAgY2xhc3M9XCJ0b29sdGlwLWhlYWRpbmdcIj5cbiAgICAgICAgJHtkLnNhdF9uYW1lfTwvcD5cbiAgICAgICR7dG9vbHRpcC5mb3JtYXRDb250ZW50KHRvb2x0aXBCb2R5LCB0cnVlKX1gXG4gICAgICB0b29sdGlwLnNob3coZXZlbnQsIHRvb2x0aXBDb250ZW50KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGRyYXdFbGxpcHNlKHsgY3gsIGN5LCByeCwgcnkgfSkge1xuICAgIGN4ID0gcGFyc2VGbG9hdChjeCwgMTApXG4gICAgY3kgPSBwYXJzZUZsb2F0KGN5LCAxMClcbiAgICByeCA9IHBhcnNlRmxvYXQocngsIDEwKVxuICAgIHJ5ID0gcGFyc2VGbG9hdChyeSwgMTApXG5cbiAgICBjb25zdCBvdXRwdXQyID0gYFxuICAgICAgICBNJHtjeCAtIHJ4fSwgJHtjeX1cbiAgICAgICAgYSR7cnh9LCAke3J5fSAwIDEsIDAgJHtyeCAqIDJ9LCAwXG4gICAgICAgIGEke3J4fSwgJHtyeX0gMCAxLCAwICR7cnggKiAtMn0sIDBcbiAgICAgICAgYFxuICAgIHJldHVybiBvdXRwdXQyXG4gIH1cblxuICBjaGFydC53aWR0aCA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSByZXR1cm4gd2lkdGhcbiAgICB3aWR0aCA9IGFyZ3NbMF0gLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodFxuICAgIHJldHVybiBjaGFydFxuICB9XG5cbiAgY2hhcnQuaGVpZ2h0ID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmICghYXJncy5sZW5ndGgpIHJldHVybiBoZWlnaHRcbiAgICBoZWlnaHQgPSBhcmdzWzBdIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b21cbiAgICBwZXJwUmFkaXVzID0gTWF0aC5tYXgoaGVpZ2h0ICogMC4wMjUsIDMpXG4gICAgcmFkaXVzID0gTWF0aC5tYXgoaGVpZ2h0ICogMC4wMTE3LCAxKVxuXG4gICAgcmV0dXJuIGNoYXJ0XG4gIH1cblxuICByZXR1cm4gY2hhcnRcbn1cblxuZnVuY3Rpb24gaW5pdChhcmdzKSB7XG4gIGVsID0gc2VsZWN0KGFyZ3MuY29udGFpbmVyKVxuICBlbC5kYXR1bShhcmdzLmRhdGEpXG4gIHRyYW5zaXRpb25EdXJhdGlvbiA9IGFyZ3MudHJhbnNpdGlvbkR1cmF0aW9uXG4gIHJlc2l6ZShhcmdzKVxufVxuXG5mdW5jdGlvbiBzZXRXb3JsZChkYXRhLCBwcm9qZWN0aW9uKSB7XG4gIHdvcmxkID0gZGF0YVxuICB3b3JsZFByb2plY3Rpb24gPSBwcm9qZWN0aW9uXG59XG5cbmV4cG9ydCBkZWZhdWx0IHsgaW5pdCwgc2V0V29ybGQgfVxuIiwiaW1wb3J0IGlkZW50aXR5IGZyb20gXCIuLi9pZGVudGl0eS5qc1wiO1xuaW1wb3J0IHN0cmVhbSBmcm9tIFwiLi4vc3RyZWFtLmpzXCI7XG5pbXBvcnQgcGF0aEFyZWEgZnJvbSBcIi4vYXJlYS5qc1wiO1xuaW1wb3J0IHBhdGhCb3VuZHMgZnJvbSBcIi4vYm91bmRzLmpzXCI7XG5pbXBvcnQgcGF0aENlbnRyb2lkIGZyb20gXCIuL2NlbnRyb2lkLmpzXCI7XG5pbXBvcnQgUGF0aENvbnRleHQgZnJvbSBcIi4vY29udGV4dC5qc1wiO1xuaW1wb3J0IHBhdGhNZWFzdXJlIGZyb20gXCIuL21lYXN1cmUuanNcIjtcbmltcG9ydCBQYXRoU3RyaW5nIGZyb20gXCIuL3N0cmluZy5qc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihwcm9qZWN0aW9uLCBjb250ZXh0KSB7XG4gIHZhciBwb2ludFJhZGl1cyA9IDQuNSxcbiAgICAgIHByb2plY3Rpb25TdHJlYW0sXG4gICAgICBjb250ZXh0U3RyZWFtO1xuXG4gIGZ1bmN0aW9uIHBhdGgob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCkge1xuICAgICAgaWYgKHR5cGVvZiBwb2ludFJhZGl1cyA9PT0gXCJmdW5jdGlvblwiKSBjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtwb2ludFJhZGl1cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0oY29udGV4dFN0cmVhbSkpO1xuICAgIH1cbiAgICByZXR1cm4gY29udGV4dFN0cmVhbS5yZXN1bHQoKTtcbiAgfVxuXG4gIHBhdGguYXJlYSA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aEFyZWEpKTtcbiAgICByZXR1cm4gcGF0aEFyZWEucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5tZWFzdXJlID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgc3RyZWFtKG9iamVjdCwgcHJvamVjdGlvblN0cmVhbShwYXRoTWVhc3VyZSkpO1xuICAgIHJldHVybiBwYXRoTWVhc3VyZS5yZXN1bHQoKTtcbiAgfTtcblxuICBwYXRoLmJvdW5kcyA9IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHN0cmVhbShvYmplY3QsIHByb2plY3Rpb25TdHJlYW0ocGF0aEJvdW5kcykpO1xuICAgIHJldHVybiBwYXRoQm91bmRzLnJlc3VsdCgpO1xuICB9O1xuXG4gIHBhdGguY2VudHJvaWQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBzdHJlYW0ob2JqZWN0LCBwcm9qZWN0aW9uU3RyZWFtKHBhdGhDZW50cm9pZCkpO1xuICAgIHJldHVybiBwYXRoQ2VudHJvaWQucmVzdWx0KCk7XG4gIH07XG5cbiAgcGF0aC5wcm9qZWN0aW9uID0gZnVuY3Rpb24oXykge1xuICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoID8gKHByb2plY3Rpb25TdHJlYW0gPSBfID09IG51bGwgPyAocHJvamVjdGlvbiA9IG51bGwsIGlkZW50aXR5KSA6IChwcm9qZWN0aW9uID0gXykuc3RyZWFtLCBwYXRoKSA6IHByb2plY3Rpb247XG4gIH07XG5cbiAgcGF0aC5jb250ZXh0ID0gZnVuY3Rpb24oXykge1xuICAgIGlmICghYXJndW1lbnRzLmxlbmd0aCkgcmV0dXJuIGNvbnRleHQ7XG4gICAgY29udGV4dFN0cmVhbSA9IF8gPT0gbnVsbCA/IChjb250ZXh0ID0gbnVsbCwgbmV3IFBhdGhTdHJpbmcpIDogbmV3IFBhdGhDb250ZXh0KGNvbnRleHQgPSBfKTtcbiAgICBpZiAodHlwZW9mIHBvaW50UmFkaXVzICE9PSBcImZ1bmN0aW9uXCIpIGNvbnRleHRTdHJlYW0ucG9pbnRSYWRpdXMocG9pbnRSYWRpdXMpO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHBhdGgucG9pbnRSYWRpdXMgPSBmdW5jdGlvbihfKSB7XG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSByZXR1cm4gcG9pbnRSYWRpdXM7XG4gICAgcG9pbnRSYWRpdXMgPSB0eXBlb2YgXyA9PT0gXCJmdW5jdGlvblwiID8gXyA6IChjb250ZXh0U3RyZWFtLnBvaW50UmFkaXVzKCtfKSwgK18pO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIHJldHVybiBwYXRoLnByb2plY3Rpb24ocHJvamVjdGlvbikuY29udGV4dChjb250ZXh0KTtcbn1cbiIsImNvbnN0IFNwZWVkQ29udHJvbHMgPSB7XG4gIGJ0bnM6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zcGVlZC1idG4nKSxcbiAgaW5pdCh7IGN1cnJlbnRTcGVlZCwgb25DbGljayB9KSB7XG4gICAgZG9jdW1lbnRcbiAgICAgIC5xdWVyeVNlbGVjdG9yKCcuc3BlZWQtYnRuLS0nICsgY3VycmVudFNwZWVkKVxuICAgICAgLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpXG5cbiAgICBBcnJheS5mcm9tKHRoaXMuYnRucykuZm9yRWFjaChlbCA9PiB7XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2spXG4gICAgfSlcbiAgfSxcbiAgZ2V0Q3VycmVudFNwZWVkKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3BlZWQtYnRuLmlzLWFjdGl2ZScpLmRhdGFzZXQuc3BlZWRcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTcGVlZENvbnRyb2xzXG4iLCJpbXBvcnQgKiBhcyBub1VpU2xpZGVyIGZyb20gJ25vdWlzbGlkZXInXG5cbmNvbnN0IHRpbWVsaW5lID0ge1xuICBlbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLWJhcicpLFxuICBidG5Db250cm9sczogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLWJ0bicpLFxuICBjb250cm9sQnRuOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udHJvbC1idG4nKSxcbiAgY3VycmVudERhdGVFbDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRpbWVsaW5lLWN1cnJlbnQtZGF0ZScpLFxuICBwbGF5aW5nOiBmYWxzZSxcbiAgdGltZXI6IG51bGwsXG4gIHRyYW5zaXRpb25EdXJhdGlvbjogMCxcbiAgZW5kRGF0ZTogMCxcbiAgc3RhcnREYXRlOiAwLFxuICB1cGRhdGVDdXJyZW50RGF0ZShkYXRlKSB7XG4gICAgdGhpcy5jdXJyZW50RGF0ZUVsLmlubmVySFRNTCA9IGAke3RoaXMuZm9ybWF0RGF0ZShkYXRlKX1gXG4gIH0sXG4gIGZvcm1hdERhdGUoZGF0ZSkge1xuICAgIGRhdGUgPSBuZXcgRGF0ZShkYXRlKVxuICAgIGRhdGUgPSBuZXcgRGF0ZShcbiAgICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICAwXG4gICAgKVxuICAgIHJldHVybiBgJHtkYXRlLmdldE1vbnRoKCkgKyAxfS8ke2RhdGUuZ2V0RGF0ZSgpfS8ke2RhdGUuZ2V0RnVsbFllYXIoKX1gXG4gIH0sXG4gIGdldEN1cnJlbnREYXRlKCkge1xuICAgIHJldHVybiB0aGlzLmVsLm5vVWlTbGlkZXIuZ2V0KClcbiAgfSxcbiAgc2V0dXBUaW1lbGluZSh7IHN0YXJ0RGF0ZSwgZW5kRGF0ZSwgb25VcGRhdGUgfSkge1xuICAgIHRoaXMuZW5kRGF0ZSA9IGVuZERhdGVcbiAgICB0aGlzLnN0YXJ0RGF0ZSA9IHN0YXJ0RGF0ZVxuXG4gICAgbm9VaVNsaWRlci5jcmVhdGUodGhpcy5lbCwge1xuICAgICAgc3RhcnQ6IFtzdGFydERhdGVdLFxuICAgICAgY29ubmVjdDogdHJ1ZSxcbiAgICAgIGJlaGF2aW91cjogJ3RhcC1kcmFnJyxcbiAgICAgIC8vIHN0ZXA6IDI0ICogNjAgKiA2MCAqIDEwMDAsXG4gICAgICByYW5nZToge1xuICAgICAgICBtaW46IHN0YXJ0RGF0ZSxcbiAgICAgICAgbWF4OiBlbmREYXRlXG4gICAgICB9LFxuICAgICAgZm9ybWF0OiB7XG4gICAgICAgIGZyb206IHYgPT4gcGFyc2VJbnQodiksXG4gICAgICAgIHRvOiB2ID0+IHBhcnNlSW50KHYpXG4gICAgICB9LFxuICAgICAgcGlwczoge1xuICAgICAgICBtb2RlOiAncmFuZ2UnLFxuICAgICAgICBkZW5zaXR5OiAxNVxuICAgICAgfVxuICAgIH0pXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIuc2V0KHN0YXJ0RGF0ZSlcblxuICAgIHRoaXMuc2V0dXBCdG5Db250cm9scygpXG5cbiAgICB0aGlzLmVsLm5vVWlTbGlkZXIub24oJ3VwZGF0ZScsIG9uVXBkYXRlKVxuICAgIHRoaXMuZWwubm9VaVNsaWRlci5vbignc2xpZGUnLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZSkge1xuICAgICAgbGV0IHRlbXBEYXRlID0gbmV3IERhdGUodmFsdWVzW2hhbmRsZV0pXG4gICAgICB0ZW1wRGF0ZSA9IG5ldyBEYXRlKFxuICAgICAgICB0ZW1wRGF0ZS5nZXRVVENGdWxsWWVhcigpLFxuICAgICAgICB0ZW1wRGF0ZS5nZXRVVENNb250aCgpLFxuICAgICAgICB0ZW1wRGF0ZS5nZXRVVENEYXRlKClcbiAgICAgICkuZ2V0VGltZSgpXG4gICAgICB0aW1lbGluZS5lbC5ub1VpU2xpZGVyLnNldCh0ZW1wRGF0ZSlcbiAgICB9KVxuXG4gICAgdGhpcy5lbC5xdWVyeVNlbGVjdG9yKFxuICAgICAgYFtkYXRhLXZhbHVlPScke3N0YXJ0RGF0ZX0nXWBcbiAgICApLmlubmVySFRNTCA9IHRoaXMuZm9ybWF0RGF0ZShzdGFydERhdGUpXG5cbiAgICB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICBgW2RhdGEtdmFsdWU9JyR7ZW5kRGF0ZX0nXWBcbiAgICApLmlubmVySFRNTCA9IHRoaXMuZm9ybWF0RGF0ZShlbmREYXRlKVxuICB9LFxuICBzZXR1cEJ0bkNvbnRyb2xzKCkge1xuICAgIHRoaXMuYnRuQ29udHJvbHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGxldCBjdXJyZW50RGF0ZSA9IHRpbWVsaW5lLmdldEN1cnJlbnREYXRlKClcbiAgICAgIGlmIChjdXJyZW50RGF0ZSA9PSB0aW1lbGluZS5lbmREYXRlKSB7XG4gICAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KHRpbWVsaW5lLnN0YXJ0RGF0ZSlcbiAgICAgIH1cblxuICAgICAgaWYgKHRpbWVsaW5lLnBsYXlpbmcgPT0gdHJ1ZSkge1xuICAgICAgICB0aW1lbGluZS5zdG9wVGltZWxpbmUoKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdGltZWxpbmUuc3RhcnRUaW1lbGluZSgpXG4gICAgfSlcbiAgfSxcbiAgc3RhcnRUaW1lbGluZSgpIHtcbiAgICB0aW1lbGluZS50aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgbGV0IGN1cnJlbnREYXRlID0gdGltZWxpbmUuZ2V0Q3VycmVudERhdGUoKVxuICAgICAgbGV0IHRlc3RDdXJyZW50ID0gbmV3IERhdGUoY3VycmVudERhdGUpXG4gICAgICBsZXQgbmV3RGF0ZSA9IHRlc3RDdXJyZW50LnNldERhdGUodGVzdEN1cnJlbnQuZ2V0RGF0ZSgpICsgMSlcbiAgICAgIHRpbWVsaW5lLmVsLm5vVWlTbGlkZXIuc2V0KG5ld0RhdGUpXG4gICAgfSwgdGltZWxpbmUudHJhbnNpdGlvbkR1cmF0aW9uKVxuXG4gICAgdGltZWxpbmUuY29udHJvbEJ0bi5jbGFzc0xpc3QucmVtb3ZlKCdwbGF5LWJ0bicpXG4gICAgdGltZWxpbmUuY29udHJvbEJ0bi5jbGFzc0xpc3QuYWRkKCdwYXVzZS1idG4nKVxuXG4gICAgdGltZWxpbmUucGxheWluZyA9IHRydWVcbiAgfSxcbiAgc3RvcFRpbWVsaW5lKCkge1xuICAgIGNsZWFySW50ZXJ2YWwodGltZWxpbmUudGltZXIpXG4gICAgdGltZWxpbmUucGxheWluZyA9IGZhbHNlXG4gICAgdGltZWxpbmUuYnRuQ29udHJvbHMuY2xhc3NMaXN0LnJlbW92ZSgncGF1c2UtYnRuJylcbiAgICB0aW1lbGluZS5idG5Db250cm9scy5jbGFzc0xpc3QuYWRkKCdwbGF5LWJ0bicpXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgdGltZWxpbmVcbiIsInZhciBFT0wgPSB7fSxcbiAgICBFT0YgPSB7fSxcbiAgICBRVU9URSA9IDM0LFxuICAgIE5FV0xJTkUgPSAxMCxcbiAgICBSRVRVUk4gPSAxMztcblxuZnVuY3Rpb24gb2JqZWN0Q29udmVydGVyKGNvbHVtbnMpIHtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbihcImRcIiwgXCJyZXR1cm4ge1wiICsgY29sdW1ucy5tYXAoZnVuY3Rpb24obmFtZSwgaSkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShuYW1lKSArIFwiOiBkW1wiICsgaSArIFwiXSB8fCBcXFwiXFxcIlwiO1xuICB9KS5qb2luKFwiLFwiKSArIFwifVwiKTtcbn1cblxuZnVuY3Rpb24gY3VzdG9tQ29udmVydGVyKGNvbHVtbnMsIGYpIHtcbiAgdmFyIG9iamVjdCA9IG9iamVjdENvbnZlcnRlcihjb2x1bW5zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJvdywgaSkge1xuICAgIHJldHVybiBmKG9iamVjdChyb3cpLCBpLCBjb2x1bW5zKTtcbiAgfTtcbn1cblxuLy8gQ29tcHV0ZSB1bmlxdWUgY29sdW1ucyBpbiBvcmRlciBvZiBkaXNjb3ZlcnkuXG5mdW5jdGlvbiBpbmZlckNvbHVtbnMocm93cykge1xuICB2YXIgY29sdW1uU2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSxcbiAgICAgIGNvbHVtbnMgPSBbXTtcblxuICByb3dzLmZvckVhY2goZnVuY3Rpb24ocm93KSB7XG4gICAgZm9yICh2YXIgY29sdW1uIGluIHJvdykge1xuICAgICAgaWYgKCEoY29sdW1uIGluIGNvbHVtblNldCkpIHtcbiAgICAgICAgY29sdW1ucy5wdXNoKGNvbHVtblNldFtjb2x1bW5dID0gY29sdW1uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBjb2x1bW5zO1xufVxuXG5mdW5jdGlvbiBwYWQodmFsdWUsIHdpZHRoKSB7XG4gIHZhciBzID0gdmFsdWUgKyBcIlwiLCBsZW5ndGggPSBzLmxlbmd0aDtcbiAgcmV0dXJuIGxlbmd0aCA8IHdpZHRoID8gbmV3IEFycmF5KHdpZHRoIC0gbGVuZ3RoICsgMSkuam9pbigwKSArIHMgOiBzO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRZZWFyKHllYXIpIHtcbiAgcmV0dXJuIHllYXIgPCAwID8gXCItXCIgKyBwYWQoLXllYXIsIDYpXG4gICAgOiB5ZWFyID4gOTk5OSA/IFwiK1wiICsgcGFkKHllYXIsIDYpXG4gICAgOiBwYWQoeWVhciwgNCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdERhdGUoZGF0ZSkge1xuICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCksXG4gICAgICBtaW51dGVzID0gZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBzZWNvbmRzID0gZGF0ZS5nZXRVVENTZWNvbmRzKCksXG4gICAgICBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICByZXR1cm4gaXNOYU4oZGF0ZSkgPyBcIkludmFsaWQgRGF0ZVwiXG4gICAgICA6IGZvcm1hdFllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpLCA0KSArIFwiLVwiICsgcGFkKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsIDIpICsgXCItXCIgKyBwYWQoZGF0ZS5nZXRVVENEYXRlKCksIDIpXG4gICAgICArIChtaWxsaXNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCIuXCIgKyBwYWQobWlsbGlzZWNvbmRzLCAzKSArIFwiWlwiXG4gICAgICA6IHNlY29uZHMgPyBcIlRcIiArIHBhZChob3VycywgMikgKyBcIjpcIiArIHBhZChtaW51dGVzLCAyKSArIFwiOlwiICsgcGFkKHNlY29uZHMsIDIpICsgXCJaXCJcbiAgICAgIDogbWludXRlcyB8fCBob3VycyA/IFwiVFwiICsgcGFkKGhvdXJzLCAyKSArIFwiOlwiICsgcGFkKG1pbnV0ZXMsIDIpICsgXCJaXCJcbiAgICAgIDogXCJcIik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGRlbGltaXRlcikge1xuICB2YXIgcmVGb3JtYXQgPSBuZXcgUmVnRXhwKFwiW1xcXCJcIiArIGRlbGltaXRlciArIFwiXFxuXFxyXVwiKSxcbiAgICAgIERFTElNSVRFUiA9IGRlbGltaXRlci5jaGFyQ29kZUF0KDApO1xuXG4gIGZ1bmN0aW9uIHBhcnNlKHRleHQsIGYpIHtcbiAgICB2YXIgY29udmVydCwgY29sdW1ucywgcm93cyA9IHBhcnNlUm93cyh0ZXh0LCBmdW5jdGlvbihyb3csIGkpIHtcbiAgICAgIGlmIChjb252ZXJ0KSByZXR1cm4gY29udmVydChyb3csIGkgLSAxKTtcbiAgICAgIGNvbHVtbnMgPSByb3csIGNvbnZlcnQgPSBmID8gY3VzdG9tQ29udmVydGVyKHJvdywgZikgOiBvYmplY3RDb252ZXJ0ZXIocm93KTtcbiAgICB9KTtcbiAgICByb3dzLmNvbHVtbnMgPSBjb2x1bW5zIHx8IFtdO1xuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VSb3dzKHRleHQsIGYpIHtcbiAgICB2YXIgcm93cyA9IFtdLCAvLyBvdXRwdXQgcm93c1xuICAgICAgICBOID0gdGV4dC5sZW5ndGgsXG4gICAgICAgIEkgPSAwLCAvLyBjdXJyZW50IGNoYXJhY3RlciBpbmRleFxuICAgICAgICBuID0gMCwgLy8gY3VycmVudCBsaW5lIG51bWJlclxuICAgICAgICB0LCAvLyBjdXJyZW50IHRva2VuXG4gICAgICAgIGVvZiA9IE4gPD0gMCwgLy8gY3VycmVudCB0b2tlbiBmb2xsb3dlZCBieSBFT0Y/XG4gICAgICAgIGVvbCA9IGZhbHNlOyAvLyBjdXJyZW50IHRva2VuIGZvbGxvd2VkIGJ5IEVPTD9cblxuICAgIC8vIFN0cmlwIHRoZSB0cmFpbGluZyBuZXdsaW5lLlxuICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoTiAtIDEpID09PSBORVdMSU5FKSAtLU47XG4gICAgaWYgKHRleHQuY2hhckNvZGVBdChOIC0gMSkgPT09IFJFVFVSTikgLS1OO1xuXG4gICAgZnVuY3Rpb24gdG9rZW4oKSB7XG4gICAgICBpZiAoZW9mKSByZXR1cm4gRU9GO1xuICAgICAgaWYgKGVvbCkgcmV0dXJuIGVvbCA9IGZhbHNlLCBFT0w7XG5cbiAgICAgIC8vIFVuZXNjYXBlIHF1b3Rlcy5cbiAgICAgIHZhciBpLCBqID0gSSwgYztcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQoaikgPT09IFFVT1RFKSB7XG4gICAgICAgIHdoaWxlIChJKysgPCBOICYmIHRleHQuY2hhckNvZGVBdChJKSAhPT0gUVVPVEUgfHwgdGV4dC5jaGFyQ29kZUF0KCsrSSkgPT09IFFVT1RFKTtcbiAgICAgICAgaWYgKChpID0gSSkgPj0gTikgZW9mID0gdHJ1ZTtcbiAgICAgICAgZWxzZSBpZiAoKGMgPSB0ZXh0LmNoYXJDb2RlQXQoSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiArIDEsIGkgLSAxKS5yZXBsYWNlKC9cIlwiL2csIFwiXFxcIlwiKTtcbiAgICAgIH1cblxuICAgICAgLy8gRmluZCBuZXh0IGRlbGltaXRlciBvciBuZXdsaW5lLlxuICAgICAgd2hpbGUgKEkgPCBOKSB7XG4gICAgICAgIGlmICgoYyA9IHRleHQuY2hhckNvZGVBdChpID0gSSsrKSkgPT09IE5FV0xJTkUpIGVvbCA9IHRydWU7XG4gICAgICAgIGVsc2UgaWYgKGMgPT09IFJFVFVSTikgeyBlb2wgPSB0cnVlOyBpZiAodGV4dC5jaGFyQ29kZUF0KEkpID09PSBORVdMSU5FKSArK0k7IH1cbiAgICAgICAgZWxzZSBpZiAoYyAhPT0gREVMSU1JVEVSKSBjb250aW51ZTtcbiAgICAgICAgcmV0dXJuIHRleHQuc2xpY2UoaiwgaSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJldHVybiBsYXN0IHRva2VuIGJlZm9yZSBFT0YuXG4gICAgICByZXR1cm4gZW9mID0gdHJ1ZSwgdGV4dC5zbGljZShqLCBOKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKHQgPSB0b2tlbigpKSAhPT0gRU9GKSB7XG4gICAgICB2YXIgcm93ID0gW107XG4gICAgICB3aGlsZSAodCAhPT0gRU9MICYmIHQgIT09IEVPRikgcm93LnB1c2godCksIHQgPSB0b2tlbigpO1xuICAgICAgaWYgKGYgJiYgKHJvdyA9IGYocm93LCBuKyspKSA9PSBudWxsKSBjb250aW51ZTtcbiAgICAgIHJvd3MucHVzaChyb3cpO1xuICAgIH1cblxuICAgIHJldHVybiByb3dzO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlZm9ybWF0Qm9keShyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIHJvd3MubWFwKGZ1bmN0aW9uKHJvdykge1xuICAgICAgcmV0dXJuIGNvbHVtbnMubWFwKGZ1bmN0aW9uKGNvbHVtbikge1xuICAgICAgICByZXR1cm4gZm9ybWF0VmFsdWUocm93W2NvbHVtbl0pO1xuICAgICAgfSkuam9pbihkZWxpbWl0ZXIpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBbY29sdW1ucy5tYXAoZm9ybWF0VmFsdWUpLmpvaW4oZGVsaW1pdGVyKV0uY29uY2F0KHByZWZvcm1hdEJvZHkocm93cywgY29sdW1ucykpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpIHtcbiAgICBpZiAoY29sdW1ucyA9PSBudWxsKSBjb2x1bW5zID0gaW5mZXJDb2x1bW5zKHJvd3MpO1xuICAgIHJldHVybiBwcmVmb3JtYXRCb2R5KHJvd3MsIGNvbHVtbnMpLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRSb3dzKHJvd3MpIHtcbiAgICByZXR1cm4gcm93cy5tYXAoZm9ybWF0Um93KS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0Um93KHJvdykge1xuICAgIHJldHVybiByb3cubWFwKGZvcm1hdFZhbHVlKS5qb2luKGRlbGltaXRlcik7XG4gIH1cblxuICBmdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PSBudWxsID8gXCJcIlxuICAgICAgICA6IHZhbHVlIGluc3RhbmNlb2YgRGF0ZSA/IGZvcm1hdERhdGUodmFsdWUpXG4gICAgICAgIDogcmVGb3JtYXQudGVzdCh2YWx1ZSArPSBcIlwiKSA/IFwiXFxcIlwiICsgdmFsdWUucmVwbGFjZSgvXCIvZywgXCJcXFwiXFxcIlwiKSArIFwiXFxcIlwiXG4gICAgICAgIDogdmFsdWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBwYXJzZVJvd3M6IHBhcnNlUm93cyxcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICBmb3JtYXRCb2R5OiBmb3JtYXRCb2R5LFxuICAgIGZvcm1hdFJvd3M6IGZvcm1hdFJvd3MsXG4gICAgZm9ybWF0Um93OiBmb3JtYXRSb3csXG4gICAgZm9ybWF0VmFsdWU6IGZvcm1hdFZhbHVlXG4gIH07XG59XG4iLCJpbXBvcnQgZHN2IGZyb20gXCIuL2Rzdi5qc1wiO1xuXG52YXIgY3N2ID0gZHN2KFwiLFwiKTtcblxuZXhwb3J0IHZhciBjc3ZQYXJzZSA9IGNzdi5wYXJzZTtcbmV4cG9ydCB2YXIgY3N2UGFyc2VSb3dzID0gY3N2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0ID0gY3N2LmZvcm1hdDtcbmV4cG9ydCB2YXIgY3N2Rm9ybWF0Qm9keSA9IGNzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciBjc3ZGb3JtYXRSb3dzID0gY3N2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFJvdyA9IGNzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIGNzdkZvcm1hdFZhbHVlID0gY3N2LmZvcm1hdFZhbHVlO1xuIiwiaW1wb3J0IGRzdiBmcm9tIFwiLi9kc3YuanNcIjtcblxudmFyIHRzdiA9IGRzdihcIlxcdFwiKTtcblxuZXhwb3J0IHZhciB0c3ZQYXJzZSA9IHRzdi5wYXJzZTtcbmV4cG9ydCB2YXIgdHN2UGFyc2VSb3dzID0gdHN2LnBhcnNlUm93cztcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0ID0gdHN2LmZvcm1hdDtcbmV4cG9ydCB2YXIgdHN2Rm9ybWF0Qm9keSA9IHRzdi5mb3JtYXRCb2R5O1xuZXhwb3J0IHZhciB0c3ZGb3JtYXRSb3dzID0gdHN2LmZvcm1hdFJvd3M7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFJvdyA9IHRzdi5mb3JtYXRSb3c7XG5leHBvcnQgdmFyIHRzdkZvcm1hdFZhbHVlID0gdHN2LmZvcm1hdFZhbHVlO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VUZXh0KHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbihpbnB1dCwgaW5pdCkge1xuICByZXR1cm4gZmV0Y2goaW5wdXQsIGluaXQpLnRoZW4ocmVzcG9uc2VUZXh0KTtcbn1cbiIsImltcG9ydCB7Y3N2UGFyc2UsIGRzdkZvcm1hdCwgdHN2UGFyc2V9IGZyb20gXCJkMy1kc3ZcIjtcbmltcG9ydCB0ZXh0IGZyb20gXCIuL3RleHQuanNcIjtcblxuZnVuY3Rpb24gZHN2UGFyc2UocGFyc2UpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0LCBpbml0LCByb3cpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlb2YgaW5pdCA9PT0gXCJmdW5jdGlvblwiKSByb3cgPSBpbml0LCBpbml0ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiB0ZXh0KGlucHV0LCBpbml0KS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICByZXR1cm4gcGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRzdihkZWxpbWl0ZXIsIGlucHV0LCBpbml0LCByb3cpIHtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGluaXQgPT09IFwiZnVuY3Rpb25cIikgcm93ID0gaW5pdCwgaW5pdCA9IHVuZGVmaW5lZDtcbiAgdmFyIGZvcm1hdCA9IGRzdkZvcm1hdChkZWxpbWl0ZXIpO1xuICByZXR1cm4gdGV4dChpbnB1dCwgaW5pdCkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgIHJldHVybiBmb3JtYXQucGFyc2UocmVzcG9uc2UsIHJvdyk7XG4gIH0pO1xufVxuXG5leHBvcnQgdmFyIGNzdiA9IGRzdlBhcnNlKGNzdlBhcnNlKTtcbmV4cG9ydCB2YXIgdHN2ID0gZHN2UGFyc2UodHN2UGFyc2UpO1xuIiwiZnVuY3Rpb24gcmVzcG9uc2VKc29uKHJlc3BvbnNlKSB7XG4gIGlmICghcmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5zdGF0dXMgKyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDQgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDUpIHJldHVybjtcbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oaW5wdXQsIGluaXQpIHtcbiAgcmV0dXJuIGZldGNoKGlucHV0LCBpbml0KS50aGVuKHJlc3BvbnNlSnNvbik7XG59XG4iLCJpbXBvcnQgKiBhcyBkM0ZldGNoIGZyb20gJ2QzLWZldGNoJ1xuXG5jb25zdCBrbm93bkNvdW50cmllcyA9IFsnVVMnLCAnQ2hpbmEnLCAnUnVzc2lhJ11cblxuYXN5bmMgZnVuY3Rpb24gZ2V0RGF0YShzYXRlbGxpdGVVUkwpIHtcbiAgY29uc3Qgc2F0ZWxsaXRlUHJvbWlzZSA9IGQzRmV0Y2guY3N2KHNhdGVsbGl0ZVVSTClcblxuICBsZXQgZGF0YSA9IFByb21pc2UuYWxsKFtzYXRlbGxpdGVQcm9taXNlXSkudGhlbihyZXMgPT4ge1xuICAgIGNvbnN0IFtzYXRlbGxpdGVEYXRhXSA9IHJlc1xuXG4gICAgbGV0IGZpbHRlcmVkU2F0ZWxsaXRlcyA9IGZpbHRlclNhdGVsbGl0ZXMoc2F0ZWxsaXRlRGF0YSlcbiAgICBmaWx0ZXJlZFNhdGVsbGl0ZXMuZm9yRWFjaChkID0+IHtcbiAgICAgIGZvcm1hdFNhdGVsbGl0ZURhdGEoZCwgdHJ1ZSlcbiAgICB9KVxuXG4gICAgY29uc3QgdGltZXN0YW1wcyA9IEFycmF5LmZyb20oXG4gICAgICBuZXcgU2V0KFsuLi5maWx0ZXJlZFNhdGVsbGl0ZXMubWFwKGQgPT4gZC50aW1lc3RhbXApXSlcbiAgICApXG5cbiAgICBjb25zdCBzYXRlbGxpdGVzID0gQXJyYXkuZnJvbShcbiAgICAgIG5ldyBTZXQoWy4uLmZpbHRlcmVkU2F0ZWxsaXRlcy5tYXAoZCA9PiBkLnNhdF9uYW1lKV0pXG4gICAgKVxuXG4gICAgbGV0IGRhdGFzZXQgPSB7XG4gICAgICBwZXJwOiBuZXcgTWFwKClcbiAgICB9XG5cbiAgICB0aW1lc3RhbXBzLmZvckVhY2goKHRpbWVzdGFtcCwgaSkgPT4ge1xuICAgICAgbGV0IGVudHJpZXMgPSBbXVxuICAgICAgc2F0ZWxsaXRlcy5mb3JFYWNoKHNhdGVsbGl0ZSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpbHRlcmVkU2F0ZWxsaXRlcy5maWx0ZXIoXG4gICAgICAgICAgZCA9PiBkLnRpbWVzdGFtcCA9PT0gdGltZXN0YW1wICYmIGQuc2F0X25hbWUgPT09IHNhdGVsbGl0ZVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCFyZXN1bHQubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cblxuICAgICAgICBlbnRyaWVzLnB1c2gocmVzdWx0WzBdKVxuICAgICAgfSlcbiAgICAgIGxldCB0ZW1wRGF0ZSA9IG5ldyBEYXRlKHRpbWVzdGFtcClcbiAgICAgIHRlbXBEYXRlID0gbmV3IERhdGUoXG4gICAgICAgIHRlbXBEYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICAgIHRlbXBEYXRlLmdldFVUQ01vbnRoKCksXG4gICAgICAgIHRlbXBEYXRlLmdldFVUQ0RhdGUoKSxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMCxcbiAgICAgICAgMFxuICAgICAgKS5nZXRUaW1lKClcbiAgICAgIGRhdGFzZXQucGVycC5zZXQodGVtcERhdGUsIGVudHJpZXMpXG4gICAgfSlcblxuICAgIGRhdGFzZXQucGVycCA9IG5ldyBNYXAoQXJyYXkuZnJvbShkYXRhc2V0LnBlcnApLnNvcnQoKGEsIGIpID0+IGFbMF0gLSBiWzBdKSlcbiAgICByZXR1cm4gZGF0YXNldFxuICB9KVxuXG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIGZpbHRlclNhdGVsbGl0ZXMoc2F0ZWxsaXRlcykge1xuICByZXR1cm4gc2F0ZWxsaXRlcy5maWx0ZXIoZCA9PiBkLmluY2x1ZGUgPT09ICdUUlVFJylcbn1cblxuZnVuY3Rpb24gZm9ybWF0U2F0ZWxsaXRlRGF0YShkLCBpc1BlcnApIHtcbiAgZC5kYXRlID0gbmV3IERhdGUoZC50aW1lc3RhbXApLmdldFRpbWUoKVxuICBkLmluY2x1ZGUgPSBkLmluY2x1ZGUgPT0gJ1RSVUUnID8gdHJ1ZSA6IGZhbHNlXG4gIGQubG9uZ2l0dWRlID0gK2QubG9uZ2l0dWRlXG4gIGQueF9jb29yZCA9ICtkLnhfY29vcmRcbiAgZC55X2Nvb3JkID0gK2QueV9jb29yZFxuICBkLmNvdW50cnkgPSBkLnNhdF9vcGVyYXRvclxuICBkLmxvbmdfc3RyaW5nID0gZC5sb25nX3N0cmluZy5yZXBsYWNlKCfvv70nLCAnJiMxNzY7JylcblxuICBpZiAoZC5jb3VudHJ5LmluY2x1ZGVzKCdVLlMuJykpIHtcbiAgICBkLmNvdW50cnkgPSAnVVMnXG4gIH1cblxuICBpZiAoIWtub3duQ291bnRyaWVzLmluY2x1ZGVzKGQuY291bnRyeSkpIHtcbiAgICBkLmNvdW50cnkgPSAnT3RoZXInXG4gIH1cblxuICBkLmlzX3BlcnAgPSBpc1BlcnBcbiAgZC5pc19nZW8gPSAhaXNQZXJwXG5cbiAgcmV0dXJuIGRcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0V29ybGREYXRhKCkge1xuICBsZXQgd29ybGQgPSBkM0ZldGNoLmpzb24oJy4vZGF0YS93b3JsZC0xMTBtLmpzb24nKS50aGVuKGRhdGEgPT4gZGF0YSlcblxuICByZXR1cm4gd29ybGRcbn1cblxuZXhwb3J0IHsgZ2V0RGF0YSwgZ2V0V29ybGREYXRhIH1cbiIsImltcG9ydCBicmVha3BvaW50cyBmcm9tICcuL2pzL2JyZWFrcG9pbnRzJ1xuaW1wb3J0IENoYXJ0IGZyb20gJy4vanMvY2hhcnQnXG5pbXBvcnQgU3BlZWRDb250cm9scyBmcm9tICcuL2pzL3NwZWVkLWNvbnRyb2xzJ1xuaW1wb3J0IHRpbWVsaW5lIGZyb20gJy4vanMvdGltZWxpbmUnXG5pbXBvcnQgeyBnZXREYXRhLCBnZXRXb3JsZERhdGEgfSBmcm9tICcuL2pzL2RhdGEnXG5cbmNvbnN0IGJhc2VTcGVlZCA9IDIwMFxuXG5jb25zdCBzcGVlZHMgPSB7XG4gIGhhbGY6IGJhc2VTcGVlZCAqIDIsXG4gICcxeCc6IGJhc2VTcGVlZCxcbiAgJzJ4JzogYmFzZVNwZWVkIC8gMlxufVxuXG5sZXQgYnJlYWtwb2ludCA9IGJyZWFrcG9pbnRzLmNhbGN1bGF0ZSgpXG5sZXQgZGF0YVxubGV0IHdvcmxkXG5sZXQgY3VycmVudERhdGVcbmxldCBzdGFydERhdGVcbmxldCBlbmREYXRlXG5sZXQgY3VycmVudFNwZWVkID0gJzF4J1xubGV0IHRyYW5zaXRpb25EdXJhdGlvbiA9IHNwZWVkc1tjdXJyZW50U3BlZWRdXG5cbmFzeW5jIGZ1bmN0aW9uIGxvYWREYXRhKFxuICBzYXRlbGxpdGVGaWxlLFxuICBzYXRlbGxpdGVOYW1lLFxuICBzYXRlbGxpdGVDb3VudHJ5LFxuICB3b3JsZFByb2plY3Rpb25cbikge1xuICBkYXRhID0gYXdhaXQgZ2V0RGF0YShzYXRlbGxpdGVGaWxlKVxuXG4gIHdvcmxkID0gYXdhaXQgZ2V0V29ybGREYXRhKClcbiAgQ2hhcnQuc2V0V29ybGQod29ybGQsIHdvcmxkUHJvamVjdGlvbilcblxuICBsZXQgZGF0ZXMgPSBBcnJheS5mcm9tKGRhdGEucGVycC5rZXlzKCkpXG4gIHN0YXJ0RGF0ZSA9IGRhdGVzWzBdXG4gIGVuZERhdGUgPSBkYXRlc1tkYXRlcy5sZW5ndGggLSAxXVxuICBjdXJyZW50RGF0ZSA9IHN0YXJ0RGF0ZVxuXG4gIHVwZGF0ZVNhdGVsbGl0ZU5hbWVzKHNhdGVsbGl0ZU5hbWUsIHNhdGVsbGl0ZUNvdW50cnkpXG5cbiAgLy8gU2V0dGluZyB1cCB0aGUgdGltZWxpbmUgd2lsbCBpbml0aWF0ZSBkcmF3Q2hhcnQoKVxuICBzZXR1cFNwZWVkQ29udHJvbHMoKVxuICBzZXR1cFRpbWVsaW5lKClcbiAgaGlkZUxvYWRpbmcoKVxufVxuXG5mdW5jdGlvbiBkcmF3Q2hhcnQoKSB7XG4gIGN1cnJlbnREYXRlID0gdGltZWxpbmUuZ2V0Q3VycmVudERhdGUoKVxuICBsZXQgZGF0YXNldCA9IGRhdGEucGVycC5nZXQoY3VycmVudERhdGUpXG5cbiAgaWYgKCFkYXRhc2V0KSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBDaGFydC5pbml0KHtcbiAgICBkYXRhOiBkYXRhc2V0LFxuICAgIHRyYW5zaXRpb25EdXJhdGlvbixcbiAgICBjb250YWluZXI6ICcuY2hhcnQnXG4gIH0pXG59XG5cbmZ1bmN0aW9uIHNldHVwU3BlZWRDb250cm9scygpIHtcbiAgU3BlZWRDb250cm9scy5pbml0KHtcbiAgICBjdXJyZW50U3BlZWQsXG4gICAgb25DbGljazogZnVuY3Rpb24oZSkge1xuICAgICAgdGltZWxpbmUuc3RvcFRpbWVsaW5lKClcbiAgICAgIEFycmF5LmZyb20oU3BlZWRDb250cm9scy5idG5zKS5mb3JFYWNoKGVsID0+XG4gICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2lzLWFjdGl2ZScpXG4gICAgICApXG4gICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpXG4gICAgICBjdXJyZW50U3BlZWQgPSBTcGVlZENvbnRyb2xzLmdldEN1cnJlbnRTcGVlZCgpXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb24gPSBzcGVlZHNbY3VycmVudFNwZWVkXVxuICAgICAgdGltZWxpbmUudHJhbnNpdGlvbkR1cmF0aW9uID0gdHJhbnNpdGlvbkR1cmF0aW9uXG4gICAgICB0aW1lbGluZS5zdGFydFRpbWVsaW5lKClcbiAgICB9XG4gIH0pXG59XG5cbmZ1bmN0aW9uIHNldHVwVGltZWxpbmUoKSB7XG4gIHRpbWVsaW5lLnRyYW5zaXRpb25EdXJhdGlvbiA9IHRyYW5zaXRpb25EdXJhdGlvblxuXG4gIHRpbWVsaW5lLnNldHVwVGltZWxpbmUoe1xuICAgIHN0YXJ0RGF0ZTogc3RhcnREYXRlLFxuICAgIGVuZERhdGU6IGVuZERhdGUsXG4gICAgdHJhbnNpdGlvbkR1cmF0aW9uOiB0cmFuc2l0aW9uRHVyYXRpb24sXG4gICAgb25VcGRhdGU6IGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlKSB7XG4gICAgICBkcmF3Q2hhcnQoKVxuICAgICAgdGltZWxpbmUudXBkYXRlQ3VycmVudERhdGUoY3VycmVudERhdGUpXG4gICAgICBpZiAoY3VycmVudERhdGUgPT0gZW5kRGF0ZSkge1xuICAgICAgICB0aW1lbGluZS5zdG9wVGltZWxpbmUoKVxuICAgICAgfVxuICAgIH1cbiAgfSlcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2F0ZWxsaXRlTmFtZXMobmFtZSwgY291bnRyeSkge1xuICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zYXRlbGxpdGUtbmFtZScpKS5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC50ZXh0Q29udGVudCA9IG5hbWVcbiAgfSlcblxuICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zYXRlbGxpdGUtY291bnRyeScpKS5mb3JFYWNoKGVsID0+IHtcbiAgICBlbC50ZXh0Q29udGVudCA9IGNvdW50cnlcbiAgfSlcbn1cblxuZnVuY3Rpb24gcmVzaXplQ2hhcnQoKSB7XG4gIGxldCBuZXdCcmVha3BvaW50ID0gYnJlYWtwb2ludHMuY2FsY3VsYXRlKClcblxuICBpZiAoYnJlYWtwb2ludCAhPSBuZXdCcmVha3BvaW50KSB7XG4gICAgYnJlYWtwb2ludCA9IG5ld0JyZWFrcG9pbnRcbiAgICBkcmF3Q2hhcnQoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGhpZGVMb2FkaW5nKCkge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGluZy1jb250YWluZXInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnXG4gIGRvY3VtZW50XG4gICAgLnF1ZXJ5U2VsZWN0b3JBbGwoJy5oaWRlLW9uLWxvYWQnKVxuICAgIC5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGUtb24tbG9hZCcpKVxufVxuXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplQ2hhcnQpXG5cbmV4cG9ydCBkZWZhdWx0IGxvYWREYXRhXG4iLCJpbXBvcnQgbG9hZERhdGEgZnJvbSAnLi9pbmRleCdcblxuY29uc3Qgc2F0ZWxsaXRlID0gJ1NKLTE3J1xuY29uc3Qgc2F0ZWxsaXRlQ291bnRyeSA9ICdDaGluZXNlJ1xuY29uc3Qgc2F0ZWxsaXRlRmlsZSA9ICcuL2RhdGEvZGF0YS1jaGluYS5jc3YnXG5cbmNvbnN0IHdvcmxkUHJvamVjdGlvbiA9IFstNjAsIC0xOF1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgbG9hZERhdGEoc2F0ZWxsaXRlRmlsZSwgc2F0ZWxsaXRlLCBzYXRlbGxpdGVDb3VudHJ5LCB3b3JsZFByb2plY3Rpb24pXG59XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgaW5pdClcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEB1bnNjb3BhYmxlc1xuaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHtcbiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihBcnJheVByb3RvdHlwZSwgVU5TQ09QQUJMRVMsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgdmFsdWU6IGNyZWF0ZShudWxsKVxuICB9KTtcbn1cblxuLy8gYWRkIGEga2V5IHRvIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG5cbi8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFMsIGluZGV4LCB1bmljb2RlKSB7XG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gY2hhckF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUpIHtcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSkge1xuICAgIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYW4gb2JqZWN0Jyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgU1RSSUNUX01FVEhPRCA9IGFycmF5TWV0aG9kSXNTdHJpY3QoJ2ZvckVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gIVNUUklDVF9NRVRIT0QgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2FsbC13aXRoLXNhZmUtaXRlcmF0aW9uLWNsb3NpbmcnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5Jyk7XG52YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xuXG4vLyBgQXJyYXkuZnJvbWAgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LmZyb21cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZnJvbShhcnJheUxpa2UgLyogLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZCAqLykge1xuICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XG4gIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcbiAgdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIHZhciBtYXBmbiA9IGFyZ3VtZW50c0xlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XG4gIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcbiAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBsZW5ndGgsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3IsIG5leHQsIHZhbHVlO1xuICBpZiAobWFwcGluZykgbWFwZm4gPSBiaW5kKG1hcGZuLCBhcmd1bWVudHNMZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkLCAyKTtcbiAgLy8gaWYgdGhlIHRhcmdldCBpcyBub3QgaXRlcmFibGUgb3IgaXQncyBhbiBhcnJheSB3aXRoIHRoZSBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIGEgc2ltcGxlIGNhc2VcbiAgaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHtcbiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7XG4gICAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gICAgcmVzdWx0ID0gbmV3IEMoKTtcbiAgICBmb3IgKDshKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lOyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgcmVzdWx0ID0gbmV3IEMobGVuZ3RoKTtcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgdmFsdWUgPSBtYXBwaW5nID8gbWFwZm4oT1tpbmRleF0sIGluZGV4KSA6IE9baW5kZXhdO1xuICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpO1xuICAgIH1cbiAgfVxuICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmUgLS0gTmFOIGNoZWNrXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXgsIGZpbHRlck91dCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcbiAgdmFyIElTX1NPTUUgPSBUWVBFID09IDM7XG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XG4gIHZhciBJU19GSUxURVJfT1VUID0gVFlQRSA9PSA3O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgfHwgSVNfRklMVEVSX09VVCA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XG4gICAgdmFyIHZhbHVlLCByZXN1bHQ7XG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XG4gICAgICB2YWx1ZSA9IHNlbGZbaW5kZXhdO1xuICAgICAgcmVzdWx0ID0gYm91bmRGdW5jdGlvbih2YWx1ZSwgaW5kZXgsIE8pO1xuICAgICAgaWYgKFRZUEUpIHtcbiAgICAgICAgaWYgKElTX01BUCkgdGFyZ2V0W2luZGV4XSA9IHJlc3VsdDsgLy8gbWFwXG4gICAgICAgIGVsc2UgaWYgKHJlc3VsdCkgc3dpdGNoIChUWVBFKSB7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgIC8vIHNvbWVcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiB2YWx1ZTsgICAgICAgICAgICAgLy8gZmluZFxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgICAvLyBmaW5kSW5kZXhcbiAgICAgICAgICBjYXNlIDI6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyXG4gICAgICAgIH0gZWxzZSBzd2l0Y2ggKFRZUEUpIHtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBmYWxzZTsgICAgICAgICAgICAgLy8gZXZlcnlcbiAgICAgICAgICBjYXNlIDc6IHB1c2guY2FsbCh0YXJnZXQsIHZhbHVlKTsgLy8gZmlsdGVyT3V0XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5tYXBcbiAgbWFwOiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmlsdGVyXG4gIGZpbHRlcjogY3JlYXRlTWV0aG9kKDIpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLnNvbWVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmV2ZXJ5XG4gIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRcbiAgZmluZDogY3JlYXRlTWV0aG9kKDUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5maWx0ZXJPdXRgIG1ldGhvZFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1hcnJheS1maWx0ZXJpbmdcbiAgZmlsdGVyT3V0OiBjcmVhdGVNZXRob2QoNylcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuICAvLyBkZW9wdGltaXphdGlvbiBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc3XG4gIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTtcbiAgICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGZvbzogMSB9O1xuICAgIH07XG4gICAgcmV0dXJuIGFycmF5W01FVEhPRF9OQU1FXShCb29sZWFuKS5mb28gIT09IDE7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG4vLyBgQXJyYXlTcGVjaWVzQ3JlYXRlYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGl0ZXJhdG9yQ2xvc2UoaXRlcmF0b3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XG5cbnRyeSB7XG4gIHZhciBjYWxsZWQgPSAwO1xuICB2YXIgaXRlcmF0b3JXaXRoUmV0dXJuID0ge1xuICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTtcbiAgICB9LFxuICAgICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBTQUZFX0NMT1NJTkcgPSB0cnVlO1xuICAgIH1cbiAgfTtcbiAgaXRlcmF0b3JXaXRoUmV0dXJuW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWwgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsgdGhyb3cgMjsgfSk7XG59IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIFNLSVBfQ0xPU0lORykge1xuICBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XG4gIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlO1xuICB0cnkge1xuICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICBvYmplY3RbSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiB7IGRvbmU6IElURVJBVElPTl9TVVBQT1JUID0gdHJ1ZSB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG4gICAgZXhlYyhvYmplY3QpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBJVEVSQVRJT05fU1VQUE9SVDtcbn07XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZS1hbGwnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4taW5zdGFuY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJykuZmFzdEtleTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKSB7XG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBDT05TVFJVQ1RPUl9OQU1FKTtcbiAgICAgIHNldEludGVybmFsU3RhdGUodGhhdCwge1xuICAgICAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLFxuICAgICAgICBpbmRleDogY3JlYXRlKG51bGwpLFxuICAgICAgICBmaXJzdDogdW5kZWZpbmVkLFxuICAgICAgICBsYXN0OiB1bmRlZmluZWQsXG4gICAgICAgIHNpemU6IDBcbiAgICAgIH0pO1xuICAgICAgaWYgKCFERVNDUklQVE9SUykgdGhhdC5zaXplID0gMDtcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB7IHRoYXQ6IHRoYXQsIEFTX0VOVFJJRVM6IElTX01BUCB9KTtcbiAgICB9KTtcblxuICAgIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTtcblxuICAgIHZhciBkZWZpbmUgPSBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICB2YXIgcHJldmlvdXMsIGluZGV4O1xuICAgICAgLy8gY2hhbmdlIGV4aXN0aW5nIGVudHJ5XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmxhc3QgPSBlbnRyeSA9IHtcbiAgICAgICAgICBpbmRleDogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksXG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICAgIHByZXZpb3VzOiBwcmV2aW91cyA9IHN0YXRlLmxhc3QsXG4gICAgICAgICAgbmV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgIHJlbW92ZWQ6IGZhbHNlXG4gICAgICAgIH07XG4gICAgICAgIGlmICghc3RhdGUuZmlyc3QpIHN0YXRlLmZpcnN0ID0gZW50cnk7XG4gICAgICAgIGlmIChwcmV2aW91cykgcHJldmlvdXMubmV4dCA9IGVudHJ5O1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUrKztcbiAgICAgICAgZWxzZSB0aGF0LnNpemUrKztcbiAgICAgICAgLy8gYWRkIHRvIGluZGV4XG4gICAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSBzdGF0ZS5pbmRleFtpbmRleF0gPSBlbnRyeTtcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XG4gICAgfTtcblxuICAgIHZhciBnZXRFbnRyeSA9IGZ1bmN0aW9uICh0aGF0LCBrZXkpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAvLyBmYXN0IGNhc2VcbiAgICAgIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcbiAgICAgIHZhciBlbnRyeTtcbiAgICAgIGlmIChpbmRleCAhPT0gJ0YnKSByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdO1xuICAgICAgLy8gZnJvemVuIG9iamVjdCBjYXNlXG4gICAgICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtleSA9PSBrZXkpIHJldHVybiBlbnRyeTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXG4gICAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTtcbiAgICAgICAgdmFyIGRhdGEgPSBzdGF0ZS5pbmRleDtcbiAgICAgICAgdmFyIGVudHJ5ID0gc3RhdGUuZmlyc3Q7XG4gICAgICAgIHdoaWxlIChlbnRyeSkge1xuICAgICAgICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlO1xuICAgICAgICAgIGlmIChlbnRyeS5wcmV2aW91cykgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTtcbiAgICAgICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuZmlyc3QgPSBzdGF0ZS5sYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUgPSAwO1xuICAgICAgICBlbHNlIHRoYXQuc2l6ZSA9IDA7XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7XG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XG4gICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgIHZhciBuZXh0ID0gZW50cnkubmV4dDtcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICAgIGRlbGV0ZSBzdGF0ZS5pbmRleFtlbnRyeS5pbmRleF07XG4gICAgICAgICAgZW50cnkucmVtb3ZlZCA9IHRydWU7XG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubmV4dCA9IG5leHQ7XG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucHJldmlvdXMgPSBwcmV2O1xuICAgICAgICAgIGlmIChzdGF0ZS5maXJzdCA9PSBlbnRyeSkgc3RhdGUuZmlyc3QgPSBuZXh0O1xuICAgICAgICAgIGlmIChzdGF0ZS5sYXN0ID09IGVudHJ5KSBzdGF0ZS5sYXN0ID0gcHJldjtcbiAgICAgICAgICBpZiAoREVTQ1JJUFRPUlMpIHN0YXRlLnNpemUtLTtcbiAgICAgICAgICBlbHNlIHRoYXQuc2l6ZS0tO1xuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjIuMy42IFNldC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XG4gICAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gICAgICAgIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgd2hpbGUgKGVudHJ5ID0gZW50cnkgPyBlbnRyeS5uZXh0IDogc3RhdGUuZmlyc3QpIHtcbiAgICAgICAgICBib3VuZEZ1bmN0aW9uKGVudHJ5LnZhbHVlLCBlbnRyeS5rZXksIHRoaXMpO1xuICAgICAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKSBlbnRyeSA9IGVudHJ5LnByZXZpb3VzO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxuICAgICAgLy8gMjMuMi4zLjcgU2V0LnByb3RvdHlwZS5oYXModmFsdWUpXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCBJU19NQVAgPyB7XG4gICAgICAvLyAyMy4xLjMuNiBNYXAucHJvdG90eXBlLmdldChrZXkpXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhpcywga2V5KTtcbiAgICAgICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICAgICAgfSxcbiAgICAgIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gOiB7XG4gICAgICAvLyAyMy4yLjMuMSBTZXQucHJvdG90eXBlLmFkZCh2YWx1ZSlcbiAgICAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUgPSB2YWx1ZSA9PT0gMCA/IDAgOiB2YWx1ZSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsICdzaXplJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNpemU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIEM7XG4gIH0sXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCkge1xuICAgIHZhciBJVEVSQVRPUl9OQU1FID0gQ09OU1RSVUNUT1JfTkFNRSArICcgSXRlcmF0b3InO1xuICAgIHZhciBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7XG4gICAgdmFyIGdldEludGVybmFsSXRlcmF0b3JTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoSVRFUkFUT1JfTkFNRSk7XG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXG4gICAgLy8gMjMuMS4zLjQsIDIzLjEuMy44LCAyMy4xLjMuMTEsIDIzLjEuMy4xMiwgMjMuMi4zLjUsIDIzLjIuMy44LCAyMy4yLjMuMTAsIDIzLjIuMy4xMVxuICAgIGRlZmluZUl0ZXJhdG9yKEMsIENPTlNUUlVDVE9SX05BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICAgICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgICAgIHR5cGU6IElURVJBVE9SX05BTUUsXG4gICAgICAgIHRhcmdldDogaXRlcmF0ZWQsXG4gICAgICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksXG4gICAgICAgIGtpbmQ6IGtpbmQsXG4gICAgICAgIGxhc3Q6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpO1xuICAgICAgdmFyIGtpbmQgPSBzdGF0ZS5raW5kO1xuICAgICAgdmFyIGVudHJ5ID0gc3RhdGUubGFzdDtcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxuICAgICAgd2hpbGUgKGVudHJ5ICYmIGVudHJ5LnJlbW92ZWQpIGVudHJ5ID0gZW50cnkucHJldmlvdXM7XG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxuICAgICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHtcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cbiAgICAgICAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXG4gICAgICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiB7IHZhbHVlOiBlbnRyeS5rZXksIGRvbmU6IGZhbHNlIH07XG4gICAgICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IGVudHJ5LnZhbHVlLCBkb25lOiBmYWxzZSB9O1xuICAgICAgcmV0dXJuIHsgdmFsdWU6IFtlbnRyeS5rZXksIGVudHJ5LnZhbHVlXSwgZG9uZTogZmFsc2UgfTtcbiAgICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7XG5cbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxuICAgIHNldFNwZWNpZXMoQ09OU1RSVUNUT1JfTkFNRSk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLW1ldGFkYXRhJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1pbnN0YW5jZScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NoZWNrLWNvcnJlY3RuZXNzLW9mLWl0ZXJhdGlvbicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5oZXJpdC1pZi1yZXF1aXJlZCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FLCB3cmFwcGVyLCBjb21tb24pIHtcbiAgdmFyIElTX01BUCA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignTWFwJykgIT09IC0xO1xuICB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTtcbiAgdmFyIEFEREVSID0gSVNfTUFQID8gJ3NldCcgOiAnYWRkJztcbiAgdmFyIE5hdGl2ZUNvbnN0cnVjdG9yID0gZ2xvYmFsW0NPTlNUUlVDVE9SX05BTUVdO1xuICB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlO1xuICB2YXIgQ29uc3RydWN0b3IgPSBOYXRpdmVDb25zdHJ1Y3RvcjtcbiAgdmFyIGV4cG9ydGVkID0ge307XG5cbiAgdmFyIGZpeE1ldGhvZCA9IGZ1bmN0aW9uIChLRVkpIHtcbiAgICB2YXIgbmF0aXZlTWV0aG9kID0gTmF0aXZlUHJvdG90eXBlW0tFWV07XG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvdG90eXBlLCBLRVksXG4gICAgICBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICAgICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0gOiBLRVkgPT0gJ2RlbGV0ZScgPyBmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gZmFsc2UgOiBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTtcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChrZXkpID8gdW5kZWZpbmVkIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7XG4gICAgICB9IDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIHZhciBSRVBMQUNFID0gaXNGb3JjZWQoXG4gICAgQ09OU1RSVUNUT1JfTkFNRSxcbiAgICB0eXBlb2YgTmF0aXZlQ29uc3RydWN0b3IgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgTmF0aXZlUHJvdG90eXBlLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAgIG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLmVudHJpZXMoKS5uZXh0KCk7XG4gICAgfSkpXG4gICk7XG5cbiAgaWYgKFJFUExBQ0UpIHtcbiAgICAvLyBjcmVhdGUgY29sbGVjdGlvbiBjb25zdHJ1Y3RvclxuICAgIENvbnN0cnVjdG9yID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpO1xuICAgIEludGVybmFsTWV0YWRhdGFNb2R1bGUuUkVRVUlSRUQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHRydWUpKSB7XG4gICAgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7XG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XG4gICAgLy8gVjggfiBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcbiAgICB2YXIgVEhST1dTX09OX1BSSU1JVElWRVMgPSBmYWlscyhmdW5jdGlvbiAoKSB7IGluc3RhbmNlLmhhcygxKTsgfSk7XG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXcgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgICB2YXIgQUNDRVBUX0lURVJBQkxFUyA9IGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHsgbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKGl0ZXJhYmxlKTsgfSk7XG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXG4gICAgdmFyIEJVR0dZX1pFUk8gPSAhSVNfV0VBSyAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKTtcbiAgICAgIHZhciBpbmRleCA9IDU7XG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xuICAgICAgcmV0dXJuICEkaW5zdGFuY2UuaGFzKC0wKTtcbiAgICB9KTtcblxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xuICAgICAgQ29uc3RydWN0b3IgPSB3cmFwcGVyKGZ1bmN0aW9uIChkdW1teSwgaXRlcmFibGUpIHtcbiAgICAgICAgYW5JbnN0YW5jZShkdW1teSwgQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBOYXRpdmVDb25zdHJ1Y3RvcigpLCBkdW1teSwgQ29uc3RydWN0b3IpO1xuICAgICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgeyB0aGF0OiB0aGF0LCBBU19FTlRSSUVTOiBJU19NQVAgfSk7XG4gICAgICAgIHJldHVybiB0aGF0O1xuICAgICAgfSk7XG4gICAgICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBOYXRpdmVQcm90b3R5cGU7XG4gICAgICBOYXRpdmVQcm90b3R5cGUuY29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcjtcbiAgICB9XG5cbiAgICBpZiAoVEhST1dTX09OX1BSSU1JVElWRVMgfHwgQlVHR1lfWkVSTykge1xuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XG4gICAgICBJU19NQVAgJiYgZml4TWV0aG9kKCdnZXQnKTtcbiAgICB9XG5cbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcblxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXG4gICAgaWYgKElTX1dFQUsgJiYgTmF0aXZlUHJvdG90eXBlLmNsZWFyKSBkZWxldGUgTmF0aXZlUHJvdG90eXBlLmNsZWFyO1xuICB9XG5cbiAgZXhwb3J0ZWRbQ09OU1RSVUNUT1JfTkFNRV0gPSBDb25zdHJ1Y3RvcjtcbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBDb25zdHJ1Y3RvciAhPSBOYXRpdmVDb25zdHJ1Y3RvciB9LCBleHBvcnRlZCk7XG5cbiAgc2V0VG9TdHJpbmdUYWcoQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpO1xuXG4gIGlmICghSVNfV0VBSykgY29tbW9uLnNldFN0cm9uZyhDb25zdHJ1Y3RvciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKTtcblxuICByZXR1cm4gQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL293bi1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG4gIHZhciBrZXlzID0gb3duS2V5cyhzb3VyY2UpO1xuICB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mO1xuICB2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgIGlmICghaGFzKHRhcmdldCwga2V5KSkgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE1FVEhPRF9OQU1FKSB7XG4gIHZhciByZWdleHAgPSAvLi87XG4gIHRyeSB7XG4gICAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gIH0gY2F0Y2ggKGVycm9yMSkge1xuICAgIHRyeSB7XG4gICAgICByZWdleHBbTUFUQ0hdID0gZmFsc2U7XG4gICAgICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7XG4gICAgfSBjYXRjaCAoZXJyb3IyKSB7IC8qIGVtcHR5ICovIH1cbiAgfSByZXR1cm4gZmFsc2U7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcbiAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JDb25zdHJ1Y3RvciwgVE9fU1RSSU5HX1RBRywgZmFsc2UsIHRydWUpO1xuICBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3Rvcjtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxuICAgIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLFxuICAgIHZhbHVlOiB2YWx1ZVxuICB9O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShrZXkpO1xuICBpZiAocHJvcGVydHlLZXkgaW4gb2JqZWN0KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwgcHJvcGVydHlLZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigwLCB2YWx1ZSkpO1xuICBlbHNlIG9iamVjdFtwcm9wZXJ0eUtleV0gPSB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLXdyYXBwZWQnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xuICB2YXIgU3ltYm9sID0gcGF0aC5TeW1ib2wgfHwgKHBhdGguU3ltYm9sID0ge30pO1xuICBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKSBkZWZpbmVQcm9wZXJ0eShTeW1ib2wsIE5BTUUsIHtcbiAgICB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpXG4gIH0pO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG4vLyBEZXRlY3QgSUU4J3MgaW5jb21wbGV0ZSBkZWZpbmVQcm9wZXJ0eSBpbXBsZW1lbnRhdGlvblxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3NvZihnbG9iYWwucHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC93ZWIwcyg/IS4qY2hyb21lKS9pLnRlc3QodXNlckFnZW50KTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJztcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgdmVyc2lvbnMgPSBwcm9jZXNzICYmIHByb2Nlc3MudmVyc2lvbnM7XG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODtcbnZhciBtYXRjaCwgdmVyc2lvbjtcblxuaWYgKHY4KSB7XG4gIG1hdGNoID0gdjguc3BsaXQoJy4nKTtcbiAgdmVyc2lvbiA9IG1hdGNoWzBdICsgbWF0Y2hbMV07XG59IGVsc2UgaWYgKHVzZXJBZ2VudCkge1xuICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvRWRnZVxcLyhcXGQrKS8pO1xuICBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7XG4gICAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVxcLyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCkgdmVyc2lvbiA9IG1hdGNoWzFdO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdmVyc2lvbiAmJiArdmVyc2lvbjtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGAgc2luY2UgaXQncyBtb3ZlZCB0byBlbnRyeSBwb2ludHNcbnJlcXVpcmUoJy4uL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gI3JlcGxhY2UgbmVlZHMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgbmFtZWQgZ3JvdXBzLlxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxuICB2YXIgcmUgPSAvLi87XG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHJlc3VsdC5ncm91cHMgPSB7IGE6ICc3JyB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIHJldHVybiAnJy5yZXBsYWNlKHJlLCAnJDxhPicpICE9PSAnNyc7XG59KTtcblxuLy8gSUUgPD0gMTEgcmVwbGFjZXMgJDAgd2l0aCB0aGUgd2hvbGUgbWF0Y2gsIGFzIGlmIGl0IHdhcyAkJlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjAyNDY2Ni9nZXR0aW5nLWllLXRvLXJlcGxhY2UtYS1yZWdleC13aXRoLXRoZS1saXRlcmFsLXN0cmluZy0wXG52YXIgUkVQTEFDRV9LRUVQU18kMCA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAnYScucmVwbGFjZSgvLi8sICckMCcpID09PSAnJDAnO1xufSkoKTtcblxudmFyIFJFUExBQ0UgPSB3ZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTtcbi8vIFNhZmFyaSA8PSAxMy4wLjMoPykgc3Vic3RpdHV0ZXMgbnRoIGNhcHR1cmUgd2hlcmUgbj5tIHdpdGggYW4gZW1wdHkgc3RyaW5nXG52YXIgUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAoLy4vW1JFUExBQ0VdKSB7XG4gICAgcmV0dXJuIC8uL1tSRVBMQUNFXSgnYScsICckMCcpID09PSAnJztcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59KSgpO1xuXG4vLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcbi8vIFdlZXggSlMgaGFzIGZyb3plbiBidWlsdC1pbiBwcm90b3R5cGVzLCBzbyB1c2UgdHJ5IC8gY2F0Y2ggd3JhcHBlclxudmFyIFNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbiAgdmFyIHJlID0gLyg/OikvO1xuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICB2YXIgcmVzdWx0ID0gJ2FiJy5zcGxpdChyZSk7XG4gIHJldHVybiByZXN1bHQubGVuZ3RoICE9PSAyIHx8IHJlc3VsdFswXSAhPT0gJ2EnIHx8IHJlc3VsdFsxXSAhPT0gJ2InO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjLCBzaGFtKSB7XG4gIHZhciBTWU1CT0wgPSB3ZWxsS25vd25TeW1ib2woS0VZKTtcblxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3RyaW5nIG1ldGhvZHMgY2FsbCBzeW1ib2wtbmFtZWQgUmVnRXAgbWV0aG9kc1xuICAgIHZhciBPID0ge307XG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcbiAgICByZXR1cm4gJydbS0VZXShPKSAhPSA3O1xuICB9KTtcblxuICB2YXIgREVMRUdBVEVTX1RPX0VYRUMgPSBERUxFR0FURVNfVE9fU1lNQk9MICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcbiAgICB2YXIgZXhlY0NhbGxlZCA9IGZhbHNlO1xuICAgIHZhciByZSA9IC9hLztcblxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcbiAgICAgIC8vIFdlIGNhbid0IHVzZSByZWFsIHJlZ2V4IGhlcmUgc2luY2UgaXQgY2F1c2VzIGRlb3B0aW1pemF0aW9uXG4gICAgICAvLyBhbmQgc2VyaW91cyBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvbiBpbiBWOFxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMwNlxuICAgICAgcmUgPSB7fTtcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXG4gICAgICAvLyBhIG5ldyBvbmUuIFdlIG5lZWQgdG8gcmV0dXJuIHRoZSBwYXRjaGVkIHJlZ2V4IHdoZW4gY3JlYXRpbmcgdGhlIG5ldyBvbmUuXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcbiAgICAgIHJlLmZsYWdzID0gJyc7XG4gICAgICByZVtTWU1CT0xdID0gLy4vW1NZTUJPTF07XG4gICAgfVxuXG4gICAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgZXhlY0NhbGxlZCA9IHRydWU7IHJldHVybiBudWxsOyB9O1xuXG4gICAgcmVbU1lNQk9MXSgnJyk7XG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xuICB9KTtcblxuICBpZiAoXG4gICAgIURFTEVHQVRFU19UT19TWU1CT0wgfHxcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIShcbiAgICAgIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTICYmXG4gICAgICBSRVBMQUNFX0tFRVBTXyQwICYmXG4gICAgICAhUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkVcbiAgICApKSB8fFxuICAgIChLRVkgPT09ICdzcGxpdCcgJiYgIVNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQylcbiAgKSB7XG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xuICAgIHZhciBtZXRob2RzID0gZXhlYyhTWU1CT0wsICcnW0tFWV0sIGZ1bmN0aW9uIChuYXRpdmVNZXRob2QsIHJlZ2V4cCwgc3RyLCBhcmcyLCBmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XG4gICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xuICAgICAgICAgIC8vIFRoZSBuYXRpdmUgU3RyaW5nIG1ldGhvZCBhbHJlYWR5IGRlbGVnYXRlcyB0byBAQG1ldGhvZCAodGhpc1xuICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cbiAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxuICAgICAgICAgIHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlOiBuYXRpdmVSZWdFeHBNZXRob2QuY2FsbChyZWdleHAsIHN0ciwgYXJnMikgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XG4gICAgICB9XG4gICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xuICAgIH0sIHtcbiAgICAgIFJFUExBQ0VfS0VFUFNfJDA6IFJFUExBQ0VfS0VFUFNfJDAsXG4gICAgICBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTogUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkVcbiAgICB9KTtcbiAgICB2YXIgc3RyaW5nTWV0aG9kID0gbWV0aG9kc1swXTtcbiAgICB2YXIgcmVnZXhNZXRob2QgPSBtZXRob2RzWzFdO1xuXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJpbmdNZXRob2QpO1xuICAgIHJlZGVmaW5lKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcbiAgICAgIC8vIDIxLjIuNS44IFJlZ0V4cC5wcm90b3R5cGVbQEByZXBsYWNlXShzdHJpbmcsIHJlcGxhY2VWYWx1ZSlcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcmVnZXhNZXRob2QuY2FsbChzdHJpbmcsIHRoaXMsIGFyZyk7IH1cbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxuICAgICAgOiBmdW5jdGlvbiAoc3RyaW5nKSB7IHJldHVybiByZWdleE1ldGhvZC5jYWxsKHN0cmluZywgdGhpcyk7IH1cbiAgICApO1xuICB9XG5cbiAgaWYgKHNoYW0pIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShSZWdFeHAucHJvdG90eXBlW1NZTUJPTF0sICdzaGFtJywgdHJ1ZSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5pc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XG59KTtcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1mdW5jdGlvbicpO1xuXG4vLyBvcHRpb25hbCAvIHNpbXBsZSBjb250ZXh0IGJpbmRpbmdcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcbiAgYUZ1bmN0aW9uKGZuKTtcbiAgaWYgKHRoYXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGZuO1xuICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgIGNhc2UgMDogcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQpO1xuICAgIH07XG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xuICAgIH07XG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xuICAgIH07XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3VtZW50cyk7XG4gIH07XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cbiAgICB8fCBJdGVyYXRvcnNbY2xhc3NvZihpdCldO1xufTtcbiIsInZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcblxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcbnZhciByZXBsYWNlID0gJycucmVwbGFjZTtcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmJ2BdfFxcZHsxLDJ9fDxbXj5dKj4pL2c7XG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQgPSAvXFwkKFskJidgXXxcXGR7MSwyfSkvZztcblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1nZXRzdWJzdGl0dXRpb25cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xuICB2YXIgdGFpbFBvcyA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xuICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xuICBpZiAobmFtZWRDYXB0dXJlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xuICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcbiAgfVxuICByZXR1cm4gcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XG4gICAgdmFyIGNhcHR1cmU7XG4gICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcbiAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xuICAgICAgY2FzZSAnJic6IHJldHVybiBtYXRjaGVkO1xuICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xuICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcbiAgICAgIGNhc2UgJzwnOlxuICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6IC8vIFxcZFxcZD9cbiAgICAgICAgdmFyIG4gPSArY2g7XG4gICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XG4gICAgICAgIGlmIChuID4gbSkge1xuICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcbiAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIGlmIChmIDw9IG0pIHJldHVybiBjYXB0dXJlc1tmIC0gMV0gPT09IHVuZGVmaW5lZCA/IGNoLmNoYXJBdCgxKSA6IGNhcHR1cmVzW2YgLSAxXSArIGNoLmNoYXJBdCgxKTtcbiAgICAgICAgICByZXR1cm4gbWF0Y2g7XG4gICAgICAgIH1cbiAgICAgICAgY2FwdHVyZSA9IGNhcHR1cmVzW24gLSAxXTtcbiAgICB9XG4gICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcbiAgfSk7XG59O1xuIiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvKiBnbG9iYWwgZ2xvYmFsVGhpcyAtLSBzYWZlICovXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jIC0tIGZhbGxiYWNrXG4gIChmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9KSgpIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChpdCwga2V5KTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApO1xufSkgPyBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTtcbn0gOiBPYmplY3Q7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcblxuLy8gbWFrZXMgc3ViY2xhc3Npbmcgd29yayBjb3JyZWN0IGZvciB3cmFwcGVkIGJ1aWx0LWluc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoJHRoaXMsIGR1bW15LCBXcmFwcGVyKSB7XG4gIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTtcbiAgaWYgKFxuICAgIC8vIGl0IGNhbiB3b3JrIG9ubHkgd2l0aCBuYXRpdmUgYHNldFByb3RvdHlwZU9mYFxuICAgIHNldFByb3RvdHlwZU9mICYmXG4gICAgLy8gd2UgaGF2ZW4ndCBjb21wbGV0ZWx5IGNvcnJlY3QgcHJlLUVTNiB3YXkgZm9yIGdldHRpbmcgYG5ldy50YXJnZXRgLCBzbyB1c2UgdGhpc1xuICAgIHR5cGVvZiAoTmV3VGFyZ2V0ID0gZHVtbXkuY29uc3RydWN0b3IpID09ICdmdW5jdGlvbicgJiZcbiAgICBOZXdUYXJnZXQgIT09IFdyYXBwZXIgJiZcbiAgICBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJlxuICAgIE5ld1RhcmdldFByb3RvdHlwZSAhPT0gV3JhcHBlci5wcm90b3R5cGVcbiAgKSBzZXRQcm90b3R5cGVPZigkdGhpcywgTmV3VGFyZ2V0UHJvdG90eXBlKTtcbiAgcmV0dXJuICR0aGlzO1xufTtcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZztcblxuLy8gdGhpcyBoZWxwZXIgYnJva2VuIGluIGAzLjQuMS0zLjQuNGAsIHNvIHdlIGNhbid0IHVzZSBgc2hhcmVkYCBoZWxwZXJcbmlmICh0eXBlb2Ygc3RvcmUuaW5zcGVjdFNvdXJjZSAhPSAnZnVuY3Rpb24nKSB7XG4gIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlO1xuIiwidmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIEZSRUVaSU5HID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZyZWV6aW5nJyk7XG5cbnZhciBNRVRBREFUQSA9IHVpZCgnbWV0YScpO1xudmFyIGlkID0gMDtcblxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbnZhciBzZXRNZXRhZGF0YSA9IGZ1bmN0aW9uIChpdCkge1xuICBkZWZpbmVQcm9wZXJ0eShpdCwgTUVUQURBVEEsIHsgdmFsdWU6IHtcbiAgICBvYmplY3RJRDogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXG4gICAgd2Vha0RhdGE6IHt9ICAgICAgICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgSURzXG4gIH0gfSk7XG59O1xuXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XG4gIC8vIHJldHVybiBhIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiAnRSc7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiBvYmplY3QgSURcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLm9iamVjdElEO1xufTtcblxudmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcbiAgaWYgKCFoYXMoaXQsIE1FVEFEQVRBKSkge1xuICAgIC8vIGNhbid0IHNldCBtZXRhZGF0YSB0byB1bmNhdWdodCBmcm96ZW4gb2JqZWN0XG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcbiAgICBzZXRNZXRhZGF0YShpdCk7XG4gIC8vIHJldHVybiB0aGUgc3RvcmUgb2Ygd2VhayBjb2xsZWN0aW9ucyBJRHNcbiAgfSByZXR1cm4gaXRbTUVUQURBVEFdLndlYWtEYXRhO1xufTtcblxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKEZSRUVaSU5HICYmIG1ldGEuUkVRVUlSRUQgJiYgaXNFeHRlbnNpYmxlKGl0KSAmJiAhaGFzKGl0LCBNRVRBREFUQSkpIHNldE1ldGFkYXRhKGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcblxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgUkVRVUlSRUQ6IGZhbHNlLFxuICBmYXN0S2V5OiBmYXN0S2V5LFxuICBnZXRXZWFrRGF0YTogZ2V0V2Vha0RhdGEsXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxufTtcblxuaGlkZGVuS2V5c1tNRVRBREFUQV0gPSB0cnVlO1xuIiwidmFyIE5BVElWRV9XRUFLX01BUCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIG9iamVjdEhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IHNoYXJlZC5zdGF0ZSB8fCAoc2hhcmVkLnN0YXRlID0gbmV3IFdlYWtNYXAoKSk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICBtZXRhZGF0YS5mYWNhZGUgPSBpdDtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgbWV0YWRhdGEuZmFjYWRlID0gaXQ7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG4vLyBgSXNBcnJheWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbnZhciByZXBsYWNlbWVudCA9IC8jfFxcLnByb3RvdHlwZVxcLi87XG5cbnZhciBpc0ZvcmNlZCA9IGZ1bmN0aW9uIChmZWF0dXJlLCBkZXRlY3Rpb24pIHtcbiAgdmFyIHZhbHVlID0gZGF0YVtub3JtYWxpemUoZmVhdHVyZSldO1xuICByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlXG4gICAgOiB2YWx1ZSA9PSBOQVRJVkUgPyBmYWxzZVxuICAgIDogdHlwZW9mIGRldGVjdGlvbiA9PSAnZnVuY3Rpb24nID8gZmFpbHMoZGV0ZWN0aW9uKVxuICAgIDogISFkZXRlY3Rpb247XG59O1xuXG52YXIgbm9ybWFsaXplID0gaXNGb3JjZWQubm9ybWFsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpO1xufTtcblxudmFyIGRhdGEgPSBpc0ZvcmNlZC5kYXRhID0ge307XG52YXIgTkFUSVZFID0gaXNGb3JjZWQuTkFUSVZFID0gJ04nO1xudmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgTUFUQ0ggPSB3ZWxsS25vd25TeW1ib2woJ21hdGNoJyk7XG5cbi8vIGBJc1JlZ0V4cGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWlzcmVnZXhwXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgaXNSZWdFeHA7XG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgKChpc1JlZ0V4cCA9IGl0W01BVENIXSkgIT09IHVuZGVmaW5lZCA/ICEhaXNSZWdFeHAgOiBjbGFzc29mKGl0KSA9PSAnUmVnRXhwJyk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzQXJyYXlJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheS1pdGVyYXRvci1tZXRob2QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcbnZhciBpdGVyYXRvckNsb3NlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9yLWNsb3NlJyk7XG5cbnZhciBSZXN1bHQgPSBmdW5jdGlvbiAoc3RvcHBlZCwgcmVzdWx0KSB7XG4gIHRoaXMuc3RvcHBlZCA9IHN0b3BwZWQ7XG4gIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIHVuYm91bmRGdW5jdGlvbiwgb3B0aW9ucykge1xuICB2YXIgdGhhdCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50aGF0O1xuICB2YXIgQVNfRU5UUklFUyA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5BU19FTlRSSUVTKTtcbiAgdmFyIElTX0lURVJBVE9SID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklTX0lURVJBVE9SKTtcbiAgdmFyIElOVEVSUlVQVEVEID0gISEob3B0aW9ucyAmJiBvcHRpb25zLklOVEVSUlVQVEVEKTtcbiAgdmFyIGZuID0gYmluZCh1bmJvdW5kRnVuY3Rpb24sIHRoYXQsIDEgKyBBU19FTlRSSUVTICsgSU5URVJSVVBURUQpO1xuICB2YXIgaXRlcmF0b3IsIGl0ZXJGbiwgaW5kZXgsIGxlbmd0aCwgcmVzdWx0LCBuZXh0LCBzdGVwO1xuXG4gIHZhciBzdG9wID0gZnVuY3Rpb24gKGNvbmRpdGlvbikge1xuICAgIGlmIChpdGVyYXRvcikgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgcmV0dXJuIG5ldyBSZXN1bHQodHJ1ZSwgY29uZGl0aW9uKTtcbiAgfTtcblxuICB2YXIgY2FsbEZuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKEFTX0VOVFJJRVMpIHtcbiAgICAgIGFuT2JqZWN0KHZhbHVlKTtcbiAgICAgIHJldHVybiBJTlRFUlJVUFRFRCA/IGZuKHZhbHVlWzBdLCB2YWx1ZVsxXSwgc3RvcCkgOiBmbih2YWx1ZVswXSwgdmFsdWVbMV0pO1xuICAgIH0gcmV0dXJuIElOVEVSUlVQVEVEID8gZm4odmFsdWUsIHN0b3ApIDogZm4odmFsdWUpO1xuICB9O1xuXG4gIGlmIChJU19JVEVSQVRPUikge1xuICAgIGl0ZXJhdG9yID0gaXRlcmFibGU7XG4gIH0gZWxzZSB7XG4gICAgaXRlckZuID0gZ2V0SXRlcmF0b3JNZXRob2QoaXRlcmFibGUpO1xuICAgIGlmICh0eXBlb2YgaXRlckZuICE9ICdmdW5jdGlvbicpIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBpdGVyYWJsZScpO1xuICAgIC8vIG9wdGltaXNhdGlvbiBmb3IgYXJyYXkgaXRlcmF0b3JzXG4gICAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7XG4gICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgICAgcmVzdWx0ID0gY2FsbEZuKGl0ZXJhYmxlW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0IGluc3RhbmNlb2YgUmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG4gICAgfVxuICAgIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpO1xuICB9XG5cbiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7XG4gIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJlc3VsdCA9IGNhbGxGbihzdGVwLnZhbHVlKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaXRlcmF0b3JDbG9zZShpdGVyYXRvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgPT0gJ29iamVjdCcgJiYgcmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgfSByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvcikge1xuICB2YXIgcmV0dXJuTWV0aG9kID0gaXRlcmF0b3JbJ3JldHVybiddO1xuICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gYW5PYmplY3QocmV0dXJuTWV0aG9kLmNhbGwoaXRlcmF0b3IpKS52YWx1ZTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgPSBmYWxzZTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG4vLyBgJUl0ZXJhdG9yUHJvdG90eXBlJWAgb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG52YXIgTkVXX0lURVJBVE9SX1BST1RPVFlQRSA9IEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0ge307XG4gIC8vIEZGNDQtIGxlZ2FjeSBpdGVyYXRvcnMgY2FzZVxuICByZXR1cm4gSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdLmNhbGwodGVzdCkgIT09IHRlc3Q7XG59KTtcblxuaWYgKE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG5cbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXG5pZiAoKCFJU19QVVJFIHx8IE5FV19JVEVSQVRPUl9QUk9UT1RZUEUpICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0ge307XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xudmFyIElTX1dFQk9TX1dFQktJVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtd2Vib3Mtd2Via2l0Jyk7XG52YXIgSVNfTk9ERSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtaXMtbm9kZScpO1xuXG52YXIgTXV0YXRpb25PYnNlcnZlciA9IGdsb2JhbC5NdXRhdGlvbk9ic2VydmVyIHx8IGdsb2JhbC5XZWJLaXRNdXRhdGlvbk9ic2VydmVyO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XG4vLyBOb2RlLmpzIDExIHNob3dzIEV4cGVyaW1lbnRhbFdhcm5pbmcgb24gZ2V0dGluZyBgcXVldWVNaWNyb3Rhc2tgXG52YXIgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGdsb2JhbCwgJ3F1ZXVlTWljcm90YXNrJyk7XG52YXIgcXVldWVNaWNyb3Rhc2sgPSBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgJiYgcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yLnZhbHVlO1xuXG52YXIgZmx1c2gsIGhlYWQsIGxhc3QsIG5vdGlmeSwgdG9nZ2xlLCBub2RlLCBwcm9taXNlLCB0aGVuO1xuXG4vLyBtb2Rlcm4gZW5naW5lcyBoYXZlIHF1ZXVlTWljcm90YXNrIG1ldGhvZFxuaWYgKCFxdWV1ZU1pY3JvdGFzaykge1xuICBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGFyZW50LCBmbjtcbiAgICBpZiAoSVNfTk9ERSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xuICAgIHdoaWxlIChoZWFkKSB7XG4gICAgICBmbiA9IGhlYWQuZm47XG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZm4oKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGlmIChoZWFkKSBub3RpZnkoKTtcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgaWYgKHBhcmVudCkgcGFyZW50LmVudGVyKCk7XG4gIH07XG5cbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICAvLyBhbHNvIGV4Y2VwdCBXZWJPUyBXZWJraXQgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg5OFxuICBpZiAoIUlTX0lPUyAmJiAhSVNfTk9ERSAmJiAhSVNfV0VCT1NfV0VCS0lUICYmIE11dGF0aW9uT2JzZXJ2ZXIgJiYgZG9jdW1lbnQpIHtcbiAgICB0b2dnbGUgPSB0cnVlO1xuICAgIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pO1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIG5vZGUuZGF0YSA9IHRvZ2dsZSA9ICF0b2dnbGU7XG4gICAgfTtcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcbiAgfSBlbHNlIGlmIChQcm9taXNlICYmIFByb21pc2UucmVzb2x2ZSkge1xuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXG4gICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgIHRoZW4gPSBwcm9taXNlLnRoZW47XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhlbi5jYWxsKHByb21pc2UsIGZsdXNoKTtcbiAgICB9O1xuICAvLyBOb2RlLmpzIHdpdGhvdXQgcHJvbWlzZXNcbiAgfSBlbHNlIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcbiAgLy8gLSBzZXRJbW1lZGlhdGVcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXG4gIC8vIC0gb25yZWFkeXN0YXRlY2hhbmdlXG4gIC8vIC0gc2V0VGltZW91dFxuICB9IGVsc2Uge1xuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xuICAgIH07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBxdWV1ZU1pY3JvdGFzayB8fCBmdW5jdGlvbiAoZm4pIHtcbiAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XG4gIGlmIChsYXN0KSBsYXN0Lm5leHQgPSB0YXNrO1xuICBpZiAoIWhlYWQpIHtcbiAgICBoZWFkID0gdGFzaztcbiAgICBub3RpZnkoKTtcbiAgfSBsYXN0ID0gdGFzaztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5Qcm9taXNlO1xuIiwidmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG52YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLyogZ2xvYmFsIFN5bWJvbCAtLSByZXF1aXJlZCBmb3IgdGVzdGluZyAqL1xuICByZXR1cm4gIVN5bWJvbC5zaGFtICYmXG4gICAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgICAvLyBDaHJvbWUgMzgtNDAgc3ltYm9scyBhcmUgbm90IGluaGVyaXRlZCBmcm9tIERPTSBjb2xsZWN0aW9ucyBwcm90b3R5cGVzIHRvIGluc3RhbmNlc1xuICAgIChJU19OT0RFID8gVjhfVkVSU0lPTiA9PT0gMzggOiBWOF9WRVJTSU9OID4gMzcgJiYgVjhfVkVSU0lPTiA8IDQxKTtcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG5cbm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KGluc3BlY3RTb3VyY2UoV2Vha01hcCkpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwidmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXJlZ2V4cCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXNSZWdFeHAoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zXCIpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHRyaW0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLXRyaW0nKS50cmltO1xudmFyIHdoaXRlc3BhY2VzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3doaXRlc3BhY2VzJyk7XG5cbnZhciAkcGFyc2VGbG9hdCA9IGdsb2JhbC5wYXJzZUZsb2F0O1xudmFyIEZPUkNFRCA9IDEgLyAkcGFyc2VGbG9hdCh3aGl0ZXNwYWNlcyArICctMCcpICE9PSAtSW5maW5pdHk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gRk9SQ0VEID8gZnVuY3Rpb24gcGFyc2VGbG9hdChzdHJpbmcpIHtcbiAgdmFyIHRyaW1tZWRTdHJpbmcgPSB0cmltKFN0cmluZyhzdHJpbmcpKTtcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHRyaW1tZWRTdHJpbmcpO1xuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHRyaW1tZWRTdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xufSA6ICRwYXJzZUZsb2F0O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgJHBhcnNlSW50ID0gZ2xvYmFsLnBhcnNlSW50O1xudmFyIGhleCA9IC9eWystXT8wW1h4XS87XG52YXIgRk9SQ0VEID0gJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzA4JykgIT09IDggfHwgJHBhcnNlSW50KHdoaXRlc3BhY2VzICsgJzB4MTYnKSAhPT0gMjI7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxubW9kdWxlLmV4cG9ydHMgPSBGT1JDRUQgPyBmdW5jdGlvbiBwYXJzZUludChzdHJpbmcsIHJhZGl4KSB7XG4gIHZhciBTID0gdHJpbShTdHJpbmcoc3RyaW5nKSk7XG4gIHJldHVybiAkcGFyc2VJbnQoUywgKHJhZGl4ID4+PiAwKSB8fCAoaGV4LnRlc3QoUykgPyAxNiA6IDEwKSk7XG59IDogJHBhcnNlSW50O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0IC0tIG9sZCBJRSAqL1xuICAgIGFjdGl2ZVhEb2N1bWVudCA9IGRvY3VtZW50LmRvbWFpbiAmJiBuZXcgQWN0aXZlWE9iamVjdCgnaHRtbGZpbGUnKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogaWdub3JlICovIH1cbiAgTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7XG4gIHZhciBsZW5ndGggPSBlbnVtQnVnS2V5cy5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkgZGVsZXRlIE51bGxQcm90b09iamVjdFtQUk9UT1RZUEVdW2VudW1CdWdLZXlzW2xlbmd0aF1dO1xuICByZXR1cm4gTnVsbFByb3RvT2JqZWN0KCk7XG59O1xuXG5oaWRkZW5LZXlzW0lFX1BST1RPXSA9IHRydWU7XG5cbi8vIGBPYmplY3QuY3JlYXRlYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yXG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKSB7XG4gIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKGhhcyhPLCBQKSkgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpLmY7XG5cbnZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuICA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHdpbmRvdykgOiBbXTtcblxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMoaXQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xuICB9XG59O1xuXG4vLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xuICByZXR1cm4gd2luZG93TmFtZXMgJiYgdG9TdHJpbmcuY2FsbChpdCkgPT0gJ1tvYmplY3QgV2luZG93XSdcbiAgICA/IGdldFdpbmRvd05hbWVzKGl0KVxuICAgIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTtcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldHByb3RvdHlwZW9mXG5tb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7XG4gIE8gPSB0b09iamVjdChPKTtcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcbiAgICByZXR1cm4gTy5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90b3R5cGUgOiBudWxsO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnByb3BlcnR5aXNlbnVtZXJhYmxlXG5leHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgVik7XG4gIHJldHVybiAhIWRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci5lbnVtZXJhYmxlO1xufSA6IG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlO1xuIiwiLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gLS0gc2FmZSAqL1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZicpO1xuXG4vLyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AgbWV0aG9kIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmdcbm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiB7IGVycm9yOiBmYWxzZSwgdmFsdWU6IGV4ZWMoKSB9O1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB7IGVycm9yOiB0cnVlLCB2YWx1ZTogZXJyb3IgfTtcbiAgfVxufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcbiAgYW5PYmplY3QoQyk7XG4gIGlmIChpc09iamVjdCh4KSAmJiB4LmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4geDtcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xuICByZXNvbHZlKHgpO1xuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcbn07XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIga2V5IGluIHNyYykgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNyY1trZXldLCBvcHRpb25zKTtcbiAgcmV0dXJuIHRhcmdldDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBpbnNwZWN0U291cmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xuXG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0O1xudmFyIGVuZm9yY2VJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5lbmZvcmNlO1xudmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykge1xuICB2YXIgdW5zYWZlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy51bnNhZmUgOiBmYWxzZTtcbiAgdmFyIHNpbXBsZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMuZW51bWVyYWJsZSA6IGZhbHNlO1xuICB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7XG4gIHZhciBzdGF0ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgfVxuICAgIHN0YXRlID0gZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpO1xuICAgIGlmICghc3RhdGUuc291cmNlKSB7XG4gICAgICBzdGF0ZS5zb3VyY2UgPSBURU1QTEFURS5qb2luKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyBrZXkgOiAnJyk7XG4gICAgfVxuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vY2xhc3NvZi1yYXcnKTtcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwRXhlY2AgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cGV4ZWNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XG4gIGlmICh0eXBlb2YgZXhlYyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XG4gIH1cblxuICByZXR1cm4gcmVnZXhwRXhlYy5jYWxsKFIsIFMpO1xufTtcblxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9yZWdleHAtZmxhZ3MnKTtcbnZhciBzdGlja3lIZWxwZXJzID0gcmVxdWlyZSgnLi9yZWdleHAtc3RpY2t5LWhlbHBlcnMnKTtcblxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcbi8vIFN0cmluZyNyZXBsYWNlIHBvbHlmaWxsIHVzZXMgLi9maXgtcmVnZXhwLXdlbGwta25vd24tc3ltYm9sLWxvZ2ljLmpzLFxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XG5cbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XG5cbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgcmUxID0gL2EvO1xuICB2YXIgcmUyID0gL2IqL2c7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTIsICdhJyk7XG4gIHJldHVybiByZTEubGFzdEluZGV4ICE9PSAwIHx8IHJlMi5sYXN0SW5kZXggIT09IDA7XG59KSgpO1xuXG52YXIgVU5TVVBQT1JURURfWSA9IHN0aWNreUhlbHBlcnMuVU5TVVBQT1JURURfWSB8fCBzdGlja3lIZWxwZXJzLkJST0tFTl9DQVJFVDtcblxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1hc3NlcnRpb24tY2FwdHVyaW5nLWdyb3VwLCByZWdleHAvbm8tZW1wdHktZ3JvdXAgLS0gcmVxdWlyZWQgZm9yIHRlc3RpbmdcbnZhciBOUENHX0lOQ0xVREVEID0gLygpPz8vLmV4ZWMoJycpWzFdICE9PSB1bmRlZmluZWQ7XG5cbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEIHx8IFVOU1VQUE9SVEVEX1k7XG5cbmlmIChQQVRDSCkge1xuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XG4gICAgdmFyIHJlID0gdGhpcztcbiAgICB2YXIgbGFzdEluZGV4LCByZUNvcHksIG1hdGNoLCBpO1xuICAgIHZhciBzdGlja3kgPSBVTlNVUFBPUlRFRF9ZICYmIHJlLnN0aWNreTtcbiAgICB2YXIgZmxhZ3MgPSByZWdleHBGbGFncy5jYWxsKHJlKTtcbiAgICB2YXIgc291cmNlID0gcmUuc291cmNlO1xuICAgIHZhciBjaGFyc0FkZGVkID0gMDtcbiAgICB2YXIgc3RyQ29weSA9IHN0cjtcblxuICAgIGlmIChzdGlja3kpIHtcbiAgICAgIGZsYWdzID0gZmxhZ3MucmVwbGFjZSgneScsICcnKTtcbiAgICAgIGlmIChmbGFncy5pbmRleE9mKCdnJykgPT09IC0xKSB7XG4gICAgICAgIGZsYWdzICs9ICdnJztcbiAgICAgIH1cblxuICAgICAgc3RyQ29weSA9IFN0cmluZyhzdHIpLnNsaWNlKHJlLmxhc3RJbmRleCk7XG4gICAgICAvLyBTdXBwb3J0IGFuY2hvcmVkIHN0aWNreSBiZWhhdmlvci5cbiAgICAgIGlmIChyZS5sYXN0SW5kZXggPiAwICYmICghcmUubXVsdGlsaW5lIHx8IHJlLm11bHRpbGluZSAmJiBzdHJbcmUubGFzdEluZGV4IC0gMV0gIT09ICdcXG4nKSkge1xuICAgICAgICBzb3VyY2UgPSAnKD86ICcgKyBzb3VyY2UgKyAnKSc7XG4gICAgICAgIHN0ckNvcHkgPSAnICcgKyBzdHJDb3B5O1xuICAgICAgICBjaGFyc0FkZGVkKys7XG4gICAgICB9XG4gICAgICAvLyBeKD8gKyByeCArICkgaXMgbmVlZGVkLCBpbiBjb21iaW5hdGlvbiB3aXRoIHNvbWUgc3RyIHNsaWNpbmcsIHRvXG4gICAgICAvLyBzaW11bGF0ZSB0aGUgJ3knIGZsYWcuXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeKD86JyArIHNvdXJjZSArICcpJywgZmxhZ3MpO1xuICAgIH1cblxuICAgIGlmIChOUENHX0lOQ0xVREVEKSB7XG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHNvdXJjZSArICckKD8hXFxcXHMpJywgZmxhZ3MpO1xuICAgIH1cbiAgICBpZiAoVVBEQVRFU19MQVNUX0lOREVYX1dST05HKSBsYXN0SW5kZXggPSByZS5sYXN0SW5kZXg7XG5cbiAgICBtYXRjaCA9IG5hdGl2ZUV4ZWMuY2FsbChzdGlja3kgPyByZUNvcHkgOiByZSwgc3RyQ29weSk7XG5cbiAgICBpZiAoc3RpY2t5KSB7XG4gICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgbWF0Y2guaW5wdXQgPSBtYXRjaC5pbnB1dC5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZShjaGFyc0FkZGVkKTtcbiAgICAgICAgbWF0Y2guaW5kZXggPSByZS5sYXN0SW5kZXg7XG4gICAgICAgIHJlLmxhc3RJbmRleCArPSBtYXRjaFswXS5sZW5ndGg7XG4gICAgICB9IGVsc2UgcmUubGFzdEluZGV4ID0gMDtcbiAgICB9IGVsc2UgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xuICAgICAgcmUubGFzdEluZGV4ID0gcmUuZ2xvYmFsID8gbWF0Y2guaW5kZXggKyBtYXRjaFswXS5sZW5ndGggOiBsYXN0SW5kZXg7XG4gICAgfVxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIEZpeCBicm93c2VycyB3aG9zZSBgZXhlY2AgbWV0aG9kcyBkb24ndCBjb25zaXN0ZW50bHkgcmV0dXJuIGB1bmRlZmluZWRgXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cbiAgICAgIG5hdGl2ZVJlcGxhY2UuY2FsbChtYXRjaFswXSwgcmVDb3B5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hdGNoO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5mbGFnc2AgZ2V0dGVyIGltcGxlbWVudGF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWdldC1yZWdleHAucHJvdG90eXBlLmZsYWdzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcbiAgdmFyIHJlc3VsdCA9ICcnO1xuICBpZiAodGhhdC5nbG9iYWwpIHJlc3VsdCArPSAnZyc7XG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcbiAgaWYgKHRoYXQuZG90QWxsKSByZXN1bHQgKz0gJ3MnO1xuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xuICBpZiAodGhhdC5zdGlja3kpIHJlc3VsdCArPSAneSc7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL2ZhaWxzJyk7XG5cbi8vIGJhYmVsLW1pbmlmeSB0cmFuc3BpbGVzIFJlZ0V4cCgnYScsICd5JykgLT4gL2EveSBhbmQgaXQgY2F1c2VzIFN5bnRheEVycm9yLFxuLy8gc28gd2UgdXNlIGFuIGludGVybWVkaWF0ZSBmdW5jdGlvbi5cbmZ1bmN0aW9uIFJFKHMsIGYpIHtcbiAgcmV0dXJuIFJlZ0V4cChzLCBmKTtcbn1cblxuZXhwb3J0cy5VTlNVUFBPUlRFRF9ZID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ2EnLCAneScpIC0+IC9hL3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxuICB2YXIgcmUgPSBSRSgnYScsICd5Jyk7XG4gIHJlLmxhc3RJbmRleCA9IDI7XG4gIHJldHVybiByZS5leGVjKCdhYmNkJykgIT0gbnVsbDtcbn0pO1xuXG5leHBvcnRzLkJST0tFTl9DQVJFVCA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NzczNjg3XG4gIHZhciByZSA9IFJFKCdecicsICdneScpO1xuICByZS5sYXN0SW5kZXggPSAyO1xuICByZXR1cm4gcmUuZXhlYygnc3RyJykgIT0gbnVsbDtcbn0pO1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTlNUUlVDVE9SX05BTUUpIHtcbiAgdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcblxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxuICAgIH0pO1xuICB9XG59O1xuIiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKS5mO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUQUcsIFNUQVRJQykge1xuICBpZiAoaXQgJiYgIWhhcyhpdCA9IFNUQVRJQyA/IGl0IDogaXQucHJvdG90eXBlLCBUT19TVFJJTkdfVEFHKSkge1xuICAgIGRlZmluZVByb3BlcnR5KGl0LCBUT19TVFJJTkdfVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IFRBRyB9KTtcbiAgfVxufTtcbiIsInZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xuXG52YXIga2V5cyA9IHNoYXJlZCgna2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcblxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xudmFyIHN0b3JlID0gZ2xvYmFsW1NIQVJFRF0gfHwgc2V0R2xvYmFsKFNIQVJFRCwge30pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlO1xuIiwidmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gc3RvcmVba2V5XSB8fCAoc3RvcmVba2V5XSA9IHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IHt9KTtcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcbiAgdmVyc2lvbjogJzMuOS4xJyxcbiAgbW9kZTogSVNfUFVSRSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxuICBjb3B5cmlnaHQ6ICfCqSAyMDIxIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJ1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNwZWNpZXNjb25zdHJ1Y3RvclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgZGVmYXVsdENvbnN0cnVjdG9yKSB7XG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XG4gIHZhciBTO1xuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IGRlZmF1bHRDb25zdHJ1Y3RvciA6IGFGdW5jdGlvbihTKTtcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcbnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IGNvZGVQb2ludEF0LCBhdCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKENPTlZFUlRfVE9fU1RSSU5HKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIHBvcykge1xuICAgIHZhciBTID0gU3RyaW5nKHJlcXVpcmVPYmplY3RDb2VyY2libGUoJHRoaXMpKTtcbiAgICB2YXIgcG9zaXRpb24gPSB0b0ludGVnZXIocG9zKTtcbiAgICB2YXIgc2l6ZSA9IFMubGVuZ3RoO1xuICAgIHZhciBmaXJzdCwgc2Vjb25kO1xuICAgIGlmIChwb3NpdGlvbiA8IDAgfHwgcG9zaXRpb24gPj0gc2l6ZSkgcmV0dXJuIENPTlZFUlRfVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XG4gICAgZmlyc3QgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24pO1xuICAgIHJldHVybiBmaXJzdCA8IDB4RDgwMCB8fCBmaXJzdCA+IDB4REJGRiB8fCBwb3NpdGlvbiArIDEgPT09IHNpemVcbiAgICAgIHx8IChzZWNvbmQgPSBTLmNoYXJDb2RlQXQocG9zaXRpb24gKyAxKSkgPCAweERDMDAgfHwgc2Vjb25kID4gMHhERkZGXG4gICAgICAgID8gQ09OVkVSVF9UT19TVFJJTkcgPyBTLmNoYXJBdChwb3NpdGlvbikgOiBmaXJzdFxuICAgICAgICA6IENPTlZFUlRfVE9fU1RSSU5HID8gUy5zbGljZShwb3NpdGlvbiwgcG9zaXRpb24gKyAyKSA6IChmaXJzdCAtIDB4RDgwMCA8PCAxMCkgKyAoc2Vjb25kIC0gMHhEQzAwKSArIDB4MTAwMDA7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYFN0cmluZy5wcm90b3R5cGUuY29kZVBvaW50QXRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuY29kZXBvaW50YXRcbiAgY29kZUF0OiBjcmVhdGVNZXRob2QoZmFsc2UpLFxuICAvLyBgU3RyaW5nLnByb3RvdHlwZS5hdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcbiAgY2hhckF0OiBjcmVhdGVNZXRob2QodHJ1ZSlcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgbm9uID0gJ1xcdTIwMEJcXHUwMDg1XFx1MTgwRSc7XG5cbi8vIGNoZWNrIHRoYXQgYSBtZXRob2Qgd29ya3Mgd2l0aCB0aGUgY29ycmVjdCBsaXN0XG4vLyBvZiB3aGl0ZXNwYWNlcyBhbmQgaGFzIGEgY29ycmVjdCBuYW1lXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkge1xuICByZXR1cm4gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAhIXdoaXRlc3BhY2VzW01FVEhPRF9OQU1FXSgpIHx8IG5vbltNRVRIT0RfTkFNRV0oKSAhPSBub24gfHwgd2hpdGVzcGFjZXNbTUVUSE9EX05BTUVdLm5hbWUgIT09IE1FVEhPRF9OQU1FO1xuICB9KTtcbn07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcbnZhciB3aGl0ZXNwYWNlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93aGl0ZXNwYWNlcycpO1xuXG52YXIgd2hpdGVzcGFjZSA9ICdbJyArIHdoaXRlc3BhY2VzICsgJ10nO1xudmFyIGx0cmltID0gUmVnRXhwKCdeJyArIHdoaXRlc3BhY2UgKyB3aGl0ZXNwYWNlICsgJyonKTtcbnZhciBydHJpbSA9IFJlZ0V4cCh3aGl0ZXNwYWNlICsgd2hpdGVzcGFjZSArICcqJCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW0sIHRyaW1TdGFydCwgdHJpbUVuZCwgdHJpbUxlZnQsIHRyaW1SaWdodCB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpO1xuICAgIGlmIChUWVBFICYgMSkgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UobHRyaW0sICcnKTtcbiAgICBpZiAoVFlQRSAmIDIpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKHJ0cmltLCAnJyk7XG4gICAgcmV0dXJuIHN0cmluZztcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgU3RyaW5nLnByb3RvdHlwZS57IHRyaW1MZWZ0LCB0cmltU3RhcnQgfWAgbWV0aG9kc1xuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbXN0YXJ0XG4gIHN0YXJ0OiBjcmVhdGVNZXRob2QoMSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnsgdHJpbVJpZ2h0LCB0cmltRW5kIH1gIG1ldGhvZHNcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnRyaW1lbmRcbiAgZW5kOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLnRyaW1gIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUudHJpbVxuICB0cmltOiBjcmVhdGVNZXRob2QoMylcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBjcmVhdGVFbGVtZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvY3VtZW50LWNyZWF0ZS1lbGVtZW50Jyk7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcbnZhciBJU19OT0RFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1ub2RlJyk7XG5cbnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjtcbnZhciBzZXQgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xudmFyIGNsZWFyID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciBNZXNzYWdlQ2hhbm5lbCA9IGdsb2JhbC5NZXNzYWdlQ2hhbm5lbDtcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcbnZhciBjb3VudGVyID0gMDtcbnZhciBxdWV1ZSA9IHt9O1xudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xuXG52YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgLS0gc2FmZVxuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgdmFyIGZuID0gcXVldWVbaWRdO1xuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XG4gICAgZm4oKTtcbiAgfVxufTtcblxudmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJ1bihpZCk7XG4gIH07XG59O1xuXG52YXIgbGlzdGVuZXIgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgcnVuKGV2ZW50LmRhdGEpO1xufTtcblxudmFyIHBvc3QgPSBmdW5jdGlvbiAoaWQpIHtcbiAgLy8gb2xkIGVuZ2luZXMgaGF2ZSBub3QgbG9jYXRpb24ub3JpZ2luXG4gIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0KTtcbn07XG5cbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcbmlmICghc2V0IHx8ICFjbGVhcikge1xuICBzZXQgPSBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoZm4pIHtcbiAgICB2YXIgYXJncyA9IFtdO1xuICAgIHZhciBpID0gMTtcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBzcGVjIHJlcXVpcmVtZW50XG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChJU19OT0RFKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2socnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gU3BoZXJlIChKUyBnYW1lIGVuZ2luZSkgRGlzcGF0Y2ggQVBJXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIERpc3BhdGNoLm5vdyhydW5uZXIoaWQpKTtcbiAgICB9O1xuICAvLyBCcm93c2VycyB3aXRoIE1lc3NhZ2VDaGFubmVsLCBpbmNsdWRlcyBXZWJXb3JrZXJzXG4gIC8vIGV4Y2VwdCBpT1MgLSBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjI0XG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykge1xuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcbiAgICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyO1xuICAgIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBwb3N0TWVzc2FnZSwgc2tpcCBXZWJXb3JrZXJzXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXG4gIH0gZWxzZSBpZiAoXG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiZcbiAgICB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJlxuICAgICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJlxuICAgIGxvY2F0aW9uICYmIGxvY2F0aW9uLnByb3RvY29sICE9PSAnZmlsZTonICYmXG4gICAgIWZhaWxzKHBvc3QpXG4gICkge1xuICAgIGRlZmVyID0gcG9zdDtcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XG4gIC8vIElFOC1cbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaHRtbC5yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICAgICAgcnVuKGlkKTtcbiAgICAgIH07XG4gICAgfTtcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcbiAgfSBlbHNlIHtcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xuICAgICAgc2V0VGltZW91dChydW5uZXIoaWQpLCAwKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgY2xlYXI6IGNsZWFyXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCJ2YXIgY2VpbCA9IE1hdGguY2VpbDtcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XG5cbi8vIGBUb0ludGVnZXJgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b2ludGVnZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBpc05hTihhcmd1bWVudCA9ICthcmd1bWVudCkgPyAwIDogKGFyZ3VtZW50ID4gMCA/IGZsb29yIDogY2VpbCkoYXJndW1lbnQpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXRvbGVuZ3RoXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gYXJndW1lbnQgPiAwID8gbWluKHRvSW50ZWdlcihhcmd1bWVudCksIDB4MUZGRkZGRkZGRkZGRkYpIDogMDsgLy8gMiAqKiA1MyAtIDEgPT0gOTAwNzE5OTI1NDc0MDk5MVxufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG4vLyBgVG9QcmltaXRpdmVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBpZCA9IDA7XG52YXIgcG9zdGZpeCA9IE1hdGgucmFuZG9tKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8qIGdsb2JhbCBTeW1ib2wgLS0gc2FmZSAqL1xuICAmJiAhU3ltYm9sLnNoYW1cbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxuZXhwb3J0cy5mID0gd2VsbEtub3duU3ltYm9sO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcbnZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcbnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZCcpO1xuXG52YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTtcbnZhciBTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyIGNyZWF0ZVdlbGxLbm93blN5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gU3ltYm9sIDogU3ltYm9sICYmIFN5bWJvbC53aXRob3V0U2V0dGVyIHx8IHVpZDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xuICBpZiAoIWhhcyhXZWxsS25vd25TeW1ib2xzU3RvcmUsIG5hbWUpIHx8ICEoTkFUSVZFX1NZTUJPTCB8fCB0eXBlb2YgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID09ICdzdHJpbmcnKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSB7XG4gICAgICBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXSA9IGNyZWF0ZVdlbGxLbm93blN5bWJvbCgnU3ltYm9sLicgKyBuYW1lKTtcbiAgICB9XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCIvLyBhIHN0cmluZyBvZiBhbGwgdmFsaWQgdW5pY29kZSB3aGl0ZXNwYWNlc1xubW9kdWxlLmV4cG9ydHMgPSAnXFx1MDAwOVxcdTAwMEFcXHUwMDBCXFx1MDAwQ1xcdTAwMERcXHUwMDIwXFx1MDBBMFxcdTE2ODBcXHUyMDAwXFx1MjAwMVxcdTIwMDInICtcbiAgJ1xcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHdlbGxLbm93blN5bWJvbCgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDB4MUZGRkZGRkZGRkZGRkY7XG52YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7XG5cbi8vIFdlIGNhbid0IHVzZSB0aGlzIGZlYXR1cmUgZGV0ZWN0aW9uIGluIFY4IHNpbmNlIGl0IGNhdXNlc1xuLy8gZGVvcHRpbWl6YXRpb24gYW5kIHNlcmlvdXMgcGVyZm9ybWFuY2UgZGVncmFkYXRpb25cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NzlcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICB2YXIgYXJyYXkgPSBbXTtcbiAgYXJyYXlbSVNfQ09OQ0FUX1NQUkVBREFCTEVdID0gZmFsc2U7XG4gIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7XG59KTtcblxudmFyIFNQRUNJRVNfU1VQUE9SVCA9IGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQoJ2NvbmNhdCcpO1xuXG52YXIgaXNDb25jYXRTcHJlYWRhYmxlID0gZnVuY3Rpb24gKE8pIHtcbiAgaWYgKCFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xuICB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdO1xuICByZXR1cm4gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShPKTtcbn07XG5cbnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmNvbmNhdGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5jb25jYXRcbi8vIHdpdGggYWRkaW5nIHN1cHBvcnQgb2YgQEBpc0NvbmNhdFNwcmVhZGFibGUgYW5kIEBAc3BlY2llc1xuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzIC0tIHJlcXVpcmVkIGZvciBgLmxlbmd0aGBcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7XG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcbiAgICB2YXIgbiA9IDA7XG4gICAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFO1xuICAgIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIEUgPSBpID09PSAtMSA/IE8gOiBhcmd1bWVudHNbaV07XG4gICAgICBpZiAoaXNDb25jYXRTcHJlYWRhYmxlKEUpKSB7XG4gICAgICAgIGxlbiA9IHRvTGVuZ3RoKEUubGVuZ3RoKTtcbiAgICAgICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKSB0aHJvdyBUeXBlRXJyb3IoTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEKTtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspIGlmIChrIGluIEUpIGNyZWF0ZVByb3BlcnR5KEEsIG4sIEVba10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG4gPj0gTUFYX1NBRkVfSU5URUdFUikgdGhyb3cgVHlwZUVycm9yKE1BWElNVU1fQUxMT1dFRF9JTkRFWF9FWENFRURFRCk7XG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KEEsIG4rKywgRSk7XG4gICAgICB9XG4gICAgfVxuICAgIEEubGVuZ3RoID0gbjtcbiAgICByZXR1cm4gQTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkZmlsdGVyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLmZpbHRlcjtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnZmlsdGVyJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbHRlclxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZm9yZWFjaFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogW10uZm9yRWFjaCAhPSBmb3JFYWNoIH0sIHtcbiAgZm9yRWFjaDogZm9yRWFjaFxufSk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5mcm9tXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICBmcm9tOiBmcm9tXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluY2x1ZGVzO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKGVsIC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcbiAgfVxufSk7XG5cbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG5cbi8vIGBBcnJheS5pc0FycmF5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkuaXNhcnJheVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSB9LCB7XG4gIGlzQXJyYXk6IGlzQXJyYXlcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5rZXlzXG4vLyBgQXJyYXkucHJvdG90eXBlLnZhbHVlc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1jcmVhdGVhcnJheWl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUl0ZXJhdG9yKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogQVJSQVlfSVRFUkFUT1IsXG4gICAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLCAvLyB0YXJnZXRcbiAgICBpbmRleDogMCwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcbiAgICBraW5kOiBraW5kICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcbiAgfSk7XG4vLyBgJUFycmF5SXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtY3JlYXRlbWFwcGVkYXJndW1lbnRzb2JqZWN0XG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xuXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcblxudmFyIG5hdGl2ZUpvaW4gPSBbXS5qb2luO1xuXG52YXIgRVMzX1NUUklOR1MgPSBJbmRleGVkT2JqZWN0ICE9IE9iamVjdDtcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnam9pbicsICcsJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuam9pbmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5qb2luXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBFUzNfU1RSSU5HUyB8fCAhU1RSSUNUX01FVEhPRCB9LCB7XG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUpvaW4uY2FsbCh0b0luZGV4ZWRPYmplY3QodGhpcyksIHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkID8gJywnIDogc2VwYXJhdG9yKTtcbiAgfVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciAkbWFwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWl0ZXJhdGlvbicpLm1hcDtcbnZhciBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1oYXMtc3BlY2llcy1zdXBwb3J0Jyk7XG5cbnZhciBIQVNfU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnbWFwJyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUubWFwYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLm1hcFxuLy8gd2l0aCBhZGRpbmcgc3VwcG9ydCBvZiBAQHNwZWNpZXNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1hcnJheScpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGFycmF5TWV0aG9kSGFzU3BlY2llc1N1cHBvcnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWhhcy1zcGVjaWVzLXN1cHBvcnQnKTtcblxudmFyIEhBU19TUEVDSUVTX1NVUFBPUlQgPSBhcnJheU1ldGhvZEhhc1NwZWNpZXNTdXBwb3J0KCdzbGljZScpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xudmFyIG5hdGl2ZVNsaWNlID0gW10uc2xpY2U7XG52YXIgbWF4ID0gTWF0aC5tYXg7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUuc2xpY2VgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc2xpY2Vcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBFUzMgc3RyaW5ncyBhbmQgRE9NIG9iamVjdHNcbiQoeyB0YXJnZXQ6ICdBcnJheScsIHByb3RvOiB0cnVlLCBmb3JjZWQ6ICFIQVNfU1BFQ0lFU19TVVBQT1JUIH0sIHtcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCh0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBrID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW5ndGgpO1xuICAgIHZhciBmaW4gPSB0b0Fic29sdXRlSW5kZXgoZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQsIGxlbmd0aCk7XG4gICAgLy8gaW5saW5lIGBBcnJheVNwZWNpZXNDcmVhdGVgIGZvciB1c2FnZSBuYXRpdmUgYEFycmF5I3NsaWNlYCB3aGVyZSBpdCdzIHBvc3NpYmxlXG4gICAgdmFyIENvbnN0cnVjdG9yLCByZXN1bHQsIG47XG4gICAgaWYgKGlzQXJyYXkoTykpIHtcbiAgICAgIENvbnN0cnVjdG9yID0gTy5jb25zdHJ1Y3RvcjtcbiAgICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXG4gICAgICBpZiAodHlwZW9mIENvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgKENvbnN0cnVjdG9yID09PSBBcnJheSB8fCBpc0FycmF5KENvbnN0cnVjdG9yLnByb3RvdHlwZSkpKSB7XG4gICAgICAgIENvbnN0cnVjdG9yID0gdW5kZWZpbmVkO1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChDb25zdHJ1Y3RvcikpIHtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBDb25zdHJ1Y3RvcltTUEVDSUVTXTtcbiAgICAgICAgaWYgKENvbnN0cnVjdG9yID09PSBudWxsKSBDb25zdHJ1Y3RvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmIChDb25zdHJ1Y3RvciA9PT0gQXJyYXkgfHwgQ29uc3RydWN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbmF0aXZlU2xpY2UuY2FsbChPLCBrLCBmaW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQgPSBuZXcgKENvbnN0cnVjdG9yID09PSB1bmRlZmluZWQgPyBBcnJheSA6IENvbnN0cnVjdG9yKShtYXgoZmluIC0gaywgMCkpO1xuICAgIGZvciAobiA9IDA7IGsgPCBmaW47IGsrKywgbisrKSBpZiAoayBpbiBPKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIG4sIE9ba10pO1xuICAgIHJlc3VsdC5sZW5ndGggPSBuO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGFycmF5TWV0aG9kSXNTdHJpY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktbWV0aG9kLWlzLXN0cmljdCcpO1xuXG52YXIgdGVzdCA9IFtdO1xudmFyIG5hdGl2ZVNvcnQgPSB0ZXN0LnNvcnQ7XG5cbi8vIElFOC1cbnZhciBGQUlMU19PTl9VTkRFRklORUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7XG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xufSk7XG4vLyBWOCBidWdcbnZhciBGQUlMU19PTl9OVUxMID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICB0ZXN0LnNvcnQobnVsbCk7XG59KTtcbi8vIE9sZCBXZWJLaXRcbnZhciBTVFJJQ1RfTUVUSE9EID0gYXJyYXlNZXRob2RJc1N0cmljdCgnc29ydCcpO1xuXG52YXIgRk9SQ0VEID0gRkFJTFNfT05fVU5ERUZJTkVEIHx8ICFGQUlMU19PTl9OVUxMIHx8ICFTVFJJQ1RfTUVUSE9EO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnNvcnRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuc29ydFxuJCh7IHRhcmdldDogJ0FycmF5JywgcHJvdG86IHRydWUsIGZvcmNlZDogRk9SQ0VEIH0sIHtcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcbiAgICAgID8gbmF0aXZlU29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxuICAgICAgOiBuYXRpdmVTb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcbiAgfVxufSk7XG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcblxudmFyIERhdGVQcm90b3R5cGUgPSBEYXRlLnByb3RvdHlwZTtcbnZhciBJTlZBTElEX0RBVEUgPSAnSW52YWxpZCBEYXRlJztcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xudmFyIG5hdGl2ZURhdGVUb1N0cmluZyA9IERhdGVQcm90b3R5cGVbVE9fU1RSSU5HXTtcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvdHlwZS5nZXRUaW1lO1xuXG4vLyBgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1kYXRlLnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKG5ldyBEYXRlKE5hTikgKyAnJyAhPSBJTlZBTElEX0RBVEUpIHtcbiAgcmVkZWZpbmUoRGF0ZVByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZSAtLSBOYU4gY2hlY2tcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gbmF0aXZlRGF0ZVRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XG4gIH0pO1xufVxuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG5cbnZhciBGdW5jdGlvblByb3RvdHlwZSA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcbnZhciBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nID0gRnVuY3Rpb25Qcm90b3R5cGUudG9TdHJpbmc7XG52YXIgbmFtZVJFID0gL15cXHMqZnVuY3Rpb24gKFteIChdKikvO1xudmFyIE5BTUUgPSAnbmFtZSc7XG5cbi8vIEZ1bmN0aW9uIGluc3RhbmNlcyBgLm5hbWVgIHByb3BlcnR5XG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWZ1bmN0aW9uLWluc3RhbmNlcy1uYW1lXG5pZiAoREVTQ1JJUFRPUlMgJiYgIShOQU1FIGluIEZ1bmN0aW9uUHJvdG90eXBlKSkge1xuICBkZWZpbmVQcm9wZXJ0eShGdW5jdGlvblByb3RvdHlwZSwgTkFNRSwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvblByb3RvdHlwZVRvU3RyaW5nLmNhbGwodGhpcykubWF0Y2gobmFtZVJFKVsxXTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGNvbGxlY3Rpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbicpO1xudmFyIGNvbGxlY3Rpb25TdHJvbmcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29sbGVjdGlvbi1zdHJvbmcnKTtcblxuLy8gYE1hcGAgY29uc3RydWN0b3Jcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtbWFwLW9iamVjdHNcbm1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignTWFwJywgZnVuY3Rpb24gKGluaXQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIE1hcCgpIHsgcmV0dXJuIGluaXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XG59LCBjb2xsZWN0aW9uU3Ryb25nKTtcbiIsInZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIG5hdGl2ZUtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgRkFJTFNfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgbmF0aXZlS2V5cygxKTsgfSk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBGQUlMU19PTl9QUklNSVRJVkVTIH0sIHtcbiAga2V5czogZnVuY3Rpb24ga2V5cyhpdCkge1xuICAgIHJldHVybiBuYXRpdmVLZXlzKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nXG5pZiAoIVRPX1NUUklOR19UQUdfU1VQUE9SVCkge1xuICByZWRlZmluZShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCB0b1N0cmluZywgeyB1bnNhZmU6IHRydWUgfSk7XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbnVtYmVyLXBhcnNlLWZsb2F0Jyk7XG5cbi8vIGBwYXJzZUZsb2F0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcGFyc2VmbG9hdC1zdHJpbmdcbiQoeyBnbG9iYWw6IHRydWUsIGZvcmNlZDogcGFyc2VGbG9hdCAhPSBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb24gfSwge1xuICBwYXJzZUZsb2F0OiBwYXJzZUZsb2F0SW1wbGVtZW50YXRpb25cbn0pO1xuIiwidmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgcGFyc2VJbnRJbXBsZW1lbnRhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9udW1iZXItcGFyc2UtaW50Jyk7XG5cbi8vIGBwYXJzZUludGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXBhcnNlaW50LXN0cmluZy1yYWRpeFxuJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiBwYXJzZUludCAhPSBwYXJzZUludEltcGxlbWVudGF0aW9uIH0sIHtcbiAgcGFyc2VJbnQ6IHBhcnNlSW50SW1wbGVtZW50YXRpb25cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIGl0ZXJhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0ZScpO1xudmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHRhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdGFzaycpLnNldDtcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbWljcm90YXNrJyk7XG52YXIgcHJvbWlzZVJlc29sdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlJyk7XG52YXIgaG9zdFJlcG9ydEVycm9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9ob3N0LXJlcG9ydC1lcnJvcnMnKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX05PREUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLW5vZGUnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBESVNQQVRDSF9FVkVOVCA9ICEhKGRvY3VtZW50ICYmIGRvY3VtZW50LmNyZWF0ZUV2ZW50ICYmIGdsb2JhbC5kaXNwYXRjaEV2ZW50KTtcbnZhciBOQVRJVkVfUkVKRUNUSU9OX0VWRU5UID0gdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nO1xudmFyIFVOSEFORExFRF9SRUpFQ1RJT04gPSAndW5oYW5kbGVkcmVqZWN0aW9uJztcbnZhciBSRUpFQ1RJT05fSEFORExFRCA9ICdyZWplY3Rpb25oYW5kbGVkJztcbnZhciBQRU5ESU5HID0gMDtcbnZhciBGVUxGSUxMRUQgPSAxO1xudmFyIFJFSkVDVEVEID0gMjtcbnZhciBIQU5ETEVEID0gMTtcbnZhciBVTkhBTkRMRUQgPSAyO1xudmFyIEludGVybmFsLCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgUHJvbWlzZVdyYXBwZXIsIG5hdGl2ZVRoZW47XG5cbnZhciBGT1JDRUQgPSBpc0ZvcmNlZChQUk9NSVNFLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBHTE9CQUxfQ09SRV9KU19QUk9NSVNFID0gaW5zcGVjdFNvdXJjZShQcm9taXNlQ29uc3RydWN0b3IpICE9PSBTdHJpbmcoUHJvbWlzZUNvbnN0cnVjdG9yKTtcbiAgaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFKSB7XG4gICAgLy8gVjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxuICAgIC8vIFdlIGNhbid0IGRldGVjdCBpdCBzeW5jaHJvbm91c2x5LCBzbyBqdXN0IGNoZWNrIHZlcnNpb25zXG4gICAgaWYgKFY4X1ZFUlNJT04gPT09IDY2KSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBVbmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XG4gICAgaWYgKCFJU19OT0RFICYmICFOQVRJVkVfUkVKRUNUSU9OX0VWRU5UKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoIU5BVElWRV9SRUpFQ1RJT05fRVZFTlQgJiYgKGhhbmRsZXIgPSBnbG9iYWxbJ29uJyArIG5hbWVdKSkgaGFuZGxlcihldmVudCk7XG4gIGVsc2UgaWYgKG5hbWUgPT09IFVOSEFORExFRF9SRUpFQ1RJT04pIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7XG59O1xuXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9taXNlID0gc3RhdGUuZmFjYWRlO1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoSVNfVU5IQU5ETEVEKSB7XG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKElTX05PREUpIHtcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpO1xuICAgICAgfSk7XG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxuICAgICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEO1xuICAgICAgaWYgKHJlc3VsdC5lcnJvcikgdGhyb3cgcmVzdWx0LnZhbHVlO1xuICAgIH1cbiAgfSk7XG59O1xuXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLnJlamVjdGlvbiAhPT0gSEFORExFRCAmJiAhc3RhdGUucGFyZW50O1xufTtcblxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHN0YXRlLmZhY2FkZTtcbiAgICBpZiAoSVNfTk9ERSkge1xuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XG4gICAgfSBlbHNlIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTtcbiAgfSk7XG59O1xuXG52YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgc3RhdGUsIHVud3JhcCkge1xuICByZXR1cm4gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgZm4oc3RhdGUsIHZhbHVlLCB1bndyYXApO1xuICB9O1xufTtcblxudmFyIGludGVybmFsUmVqZWN0ID0gZnVuY3Rpb24gKHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgc3RhdGUuc3RhdGUgPSBSRUpFQ1RFRDtcbiAgbm90aWZ5KHN0YXRlLCB0cnVlKTtcbn07XG5cbnZhciBpbnRlcm5hbFJlc29sdmUgPSBmdW5jdGlvbiAoc3RhdGUsIHZhbHVlLCB1bndyYXApIHtcbiAgaWYgKHN0YXRlLmRvbmUpIHJldHVybjtcbiAgc3RhdGUuZG9uZSA9IHRydWU7XG4gIGlmICh1bndyYXApIHN0YXRlID0gdW53cmFwO1xuICB0cnkge1xuICAgIGlmIChzdGF0ZS5mYWNhZGUgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcbiAgICB2YXIgdGhlbiA9IGlzVGhlbmFibGUodmFsdWUpO1xuICAgIGlmICh0aGVuKSB7XG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IHsgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGVuLmNhbGwodmFsdWUsXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVzb2x2ZSwgd3JhcHBlciwgc3RhdGUpLFxuICAgICAgICAgICAgYmluZChpbnRlcm5hbFJlamVjdCwgd3JhcHBlciwgc3RhdGUpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBpbnRlcm5hbFJlamVjdCh3cmFwcGVyLCBlcnJvciwgc3RhdGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEO1xuICAgICAgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGludGVybmFsUmVqZWN0KHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTtcbiAgfVxufTtcblxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcbmlmIChGT1JDRUQpIHtcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcbiAgUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTtcbiAgICBhRnVuY3Rpb24oZXhlY3V0b3IpO1xuICAgIEludGVybmFsLmNhbGwodGhpcyk7XG4gICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTtcbiAgICB0cnkge1xuICAgICAgZXhlY3V0b3IoYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKSwgYmluZChpbnRlcm5hbFJlamVjdCwgc3RhdGUpKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgaW50ZXJuYWxSZWplY3Qoc3RhdGUsIGVycm9yKTtcbiAgICB9XG4gIH07XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAtLSByZXF1aXJlZCBmb3IgYC5sZW5ndGhgXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS50aGVuXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQcm9taXNlU3RhdGUodGhpcyk7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7XG4gICAgICByZWFjdGlvbi5vayA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiB0cnVlO1xuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDtcbiAgICAgIHN0YXRlLnBhcmVudCA9IHRydWU7XG4gICAgICBzdGF0ZS5yZWFjdGlvbnMucHVzaChyZWFjdGlvbik7XG4gICAgICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykgbm90aWZ5KHN0YXRlLCBmYWxzZSk7XG4gICAgICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTtcbiAgICB9LFxuICAgIC8vIGBQcm9taXNlLnByb3RvdHlwZS5jYXRjaGAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnByb3RvdHlwZS5jYXRjaFxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XG4gICAgfVxuICB9KTtcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgSW50ZXJuYWwoKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHByb21pc2UpO1xuICAgIHRoaXMucHJvbWlzZSA9IHByb21pc2U7XG4gICAgdGhpcy5yZXNvbHZlID0gYmluZChpbnRlcm5hbFJlc29sdmUsIHN0YXRlKTtcbiAgICB0aGlzLnJlamVjdCA9IGJpbmQoaW50ZXJuYWxSZWplY3QsIHN0YXRlKTtcbiAgfTtcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcbiAgICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxuICAgICAgOiBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gIH07XG5cbiAgaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicpIHtcbiAgICBuYXRpdmVUaGVuID0gTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUudGhlbjtcblxuICAgIC8vIHdyYXAgbmF0aXZlIFByb21pc2UjdGhlbiBmb3IgbmF0aXZlIGFzeW5jIGZ1bmN0aW9uc1xuICAgIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAndGhlbicsIGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgbmF0aXZlVGhlbi5jYWxsKHRoYXQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjQwXG4gICAgfSwgeyB1bnNhZmU6IHRydWUgfSk7XG5cbiAgICAvLyB3cmFwIGZldGNoIHJlc3VsdFxuICAgIGlmICh0eXBlb2YgJGZldGNoID09ICdmdW5jdGlvbicpICQoeyBnbG9iYWw6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIGZvcmNlZDogdHJ1ZSB9LCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZWplY3RcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkodGhpcyk7XG4gICAgY2FwYWJpbGl0eS5yZWplY3QuY2FsbCh1bmRlZmluZWQsIHIpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElTX1BVUkUgfHwgRk9SQ0VEIH0sIHtcbiAgLy8gYFByb21pc2UucmVzb2x2ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcHJvbWlzZS5yZXNvbHZlXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoeCkge1xuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShJU19QVVJFICYmIHRoaXMgPT09IFByb21pc2VXcmFwcGVyID8gUHJvbWlzZUNvbnN0cnVjdG9yIDogdGhpcywgeCk7XG4gIH1cbn0pO1xuXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IElOQ09SUkVDVF9JVEVSQVRJT04gfSwge1xuICAvLyBgUHJvbWlzZS5hbGxgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJhY2VcbiAgcmFjZTogZnVuY3Rpb24gcmFjZShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgZXhlYyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWdleHAtZXhlYycpO1xuXG4vLyBgUmVnRXhwLnByb3RvdHlwZS5leGVjYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS5leGVjXG4kKHsgdGFyZ2V0OiAnUmVnRXhwJywgcHJvdG86IHRydWUsIGZvcmNlZDogLy4vLmV4ZWMgIT09IGV4ZWMgfSwge1xuICBleGVjOiBleGVjXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjb2xsZWN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24nKTtcbnZhciBjb2xsZWN0aW9uU3Ryb25nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvbGxlY3Rpb24tc3Ryb25nJyk7XG5cbi8vIGBTZXRgIGNvbnN0cnVjdG9yXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXNldC1vYmplY3RzXG5tb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ1NldCcsIGZ1bmN0aW9uIChpbml0KSB7XG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xufSwgY29sbGVjdGlvblN0cm9uZyk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBub3RBUmVnRXhwID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25vdC1hLXJlZ2V4cCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1pcy1yZWdleHAtbG9naWMnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLmluY2x1ZGVzXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogIWNvcnJlY3RJc1JlZ0V4cExvZ2ljKCdpbmNsdWRlcycpIH0sIHtcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xuICAgIHJldHVybiAhIX5TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSlcbiAgICAgIC5pbmRleE9mKG5vdEFSZWdFeHAoc2VhcmNoU3RyaW5nKSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBjaGFyQXQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZScpLmNoYXJBdDtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG52YXIgZGVmaW5lSXRlcmF0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yJyk7XG5cbnZhciBTVFJJTkdfSVRFUkFUT1IgPSAnU3RyaW5nIEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFNUUklOR19JVEVSQVRPUik7XG5cbi8vIGBTdHJpbmcucHJvdG90eXBlW0BAaXRlcmF0b3JdYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS1AQGl0ZXJhdG9yXG5kZWZpbmVJdGVyYXRvcihTdHJpbmcsICdTdHJpbmcnLCBmdW5jdGlvbiAoaXRlcmF0ZWQpIHtcbiAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7XG4gICAgdHlwZTogU1RSSU5HX0lURVJBVE9SLFxuICAgIHN0cmluZzogU3RyaW5nKGl0ZXJhdGVkKSxcbiAgICBpbmRleDogMFxuICB9KTtcbi8vIGAlU3RyaW5nSXRlcmF0b3JQcm90b3R5cGUlLm5leHRgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XG52YXIgZ2V0U3Vic3RpdHV0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1zdWJzdGl0dXRpb24nKTtcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxudmFyIG1heWJlVG9TdHJpbmcgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XG59O1xuXG4vLyBAQHJlcGxhY2UgbG9naWNcbmZpeFJlZ0V4cFdlbGxLbm93blN5bWJvbExvZ2ljKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKFJFUExBQ0UsIG5hdGl2ZVJlcGxhY2UsIG1heWJlQ2FsbE5hdGl2ZSwgcmVhc29uKSB7XG4gIHZhciBSRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRSA9IHJlYXNvbi5SRUdFWFBfUkVQTEFDRV9TVUJTVElUVVRFU19VTkRFRklORURfQ0FQVFVSRTtcbiAgdmFyIFJFUExBQ0VfS0VFUFNfJDAgPSByZWFzb24uUkVQTEFDRV9LRUVQU18kMDtcbiAgdmFyIFVOU0FGRV9TVUJTVElUVVRFID0gUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgPyAnJCcgOiAnJDAnO1xuXG4gIHJldHVybiBbXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcbiAgICAgIHZhciBPID0gcmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKTtcbiAgICAgIHZhciByZXBsYWNlciA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xuICAgICAgcmV0dXJuIHJlcGxhY2VyICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyByZXBsYWNlci5jYWxsKHNlYXJjaFZhbHVlLCBPLCByZXBsYWNlVmFsdWUpXG4gICAgICAgIDogbmF0aXZlUmVwbGFjZS5jYWxsKFN0cmluZyhPKSwgc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSxcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcbiAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCwgcmVwbGFjZVZhbHVlKSB7XG4gICAgICBpZiAoXG4gICAgICAgICghUkVHRVhQX1JFUExBQ0VfU1VCU1RJVFVURVNfVU5ERUZJTkVEX0NBUFRVUkUgJiYgUkVQTEFDRV9LRUVQU18kMCkgfHxcbiAgICAgICAgKHR5cGVvZiByZXBsYWNlVmFsdWUgPT09ICdzdHJpbmcnICYmIHJlcGxhY2VWYWx1ZS5pbmRleE9mKFVOU0FGRV9TVUJTVElUVVRFKSA9PT0gLTEpXG4gICAgICApIHtcbiAgICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZShuYXRpdmVSZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XG4gICAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xuXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XG5cbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XG4gICAgICBpZiAoZ2xvYmFsKSB7XG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcblxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xuXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xuICAgICAgICBpZiAobWF0Y2hTdHIgPT09ICcnKSByeC5sYXN0SW5kZXggPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgdG9MZW5ndGgocngubGFzdEluZGV4KSwgZnVsbFVuaWNvZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XG5cbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcbiAgICAgICAgdmFyIGNhcHR1cmVzID0gW107XG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxuICAgICAgICAvLyBidXQgZm9yIHNvbWUgcmVhc29uIGBuYXRpdmVTbGljZS5jYWxsKHJlc3VsdCwgMSwgcmVzdWx0Lmxlbmd0aClgIChjYWxsZWQgaW5cbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IHJlc3VsdC5sZW5ndGg7IGorKykgY2FwdHVyZXMucHVzaChtYXliZVRvU3RyaW5nKHJlc3VsdFtqXSkpO1xuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xuICAgICAgICAgIHZhciByZXBsYWNlckFyZ3MgPSBbbWF0Y2hlZF0uY29uY2F0KGNhcHR1cmVzLCBwb3NpdGlvbiwgUyk7XG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocG9zaXRpb24gPj0gbmV4dFNvdXJjZVBvc2l0aW9uKSB7XG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcbiAgICB9XG4gIF07XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyICR0cmltID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltJykudHJpbTtcbnZhciBmb3JjZWRTdHJpbmdUcmltTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy10cmltLWZvcmNlZCcpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZS50cmltYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS50cmltXG4kKHsgdGFyZ2V0OiAnU3RyaW5nJywgcHJvdG86IHRydWUsIGZvcmNlZDogZm9yY2VkU3RyaW5nVHJpbU1ldGhvZCgndHJpbScpIH0sIHtcbiAgdHJpbTogZnVuY3Rpb24gdHJpbSgpIHtcbiAgICByZXR1cm4gJHRyaW0odGhpcyk7XG4gIH1cbn0pO1xuIiwiLy8gYFN5bWJvbC5wcm90b3R5cGUuZGVzY3JpcHRpb25gIGdldHRlclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLmRlc2NyaXB0aW9uXG4ndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMnKTtcblxudmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG5cbmlmIChERVNDUklQVE9SUyAmJiB0eXBlb2YgTmF0aXZlU3ltYm9sID09ICdmdW5jdGlvbicgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBOYXRpdmVTeW1ib2wucHJvdG90eXBlKSB8fFxuICAvLyBTYWZhcmkgMTIgYnVnXG4gIE5hdGl2ZVN5bWJvbCgpLmRlc2NyaXB0aW9uICE9PSB1bmRlZmluZWRcbikpIHtcbiAgdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9O1xuICAvLyB3cmFwIFN5bWJvbCBjb25zdHJ1Y3RvciBmb3IgY29ycmVjdCB3b3JrIHdpdGggdW5kZWZpbmVkIGRlc2NyaXB0aW9uXG4gIHZhciBTeW1ib2xXcmFwcGVyID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPCAxIHx8IGFyZ3VtZW50c1swXSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogU3RyaW5nKGFyZ3VtZW50c1swXSk7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMgaW5zdGFuY2VvZiBTeW1ib2xXcmFwcGVyXG4gICAgICA/IG5ldyBOYXRpdmVTeW1ib2woZGVzY3JpcHRpb24pXG4gICAgICAvLyBpbiBFZGdlIDEzLCBTdHJpbmcoU3ltYm9sKHVuZGVmaW5lZCkpID09PSAnU3ltYm9sKHVuZGVmaW5lZCknXG4gICAgICA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7XG4gICAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMoU3ltYm9sV3JhcHBlciwgTmF0aXZlU3ltYm9sKTtcbiAgdmFyIHN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlU3ltYm9sLnByb3RvdHlwZTtcbiAgc3ltYm9sUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ltYm9sV3JhcHBlcjtcblxuICB2YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90b3R5cGUudG9TdHJpbmc7XG4gIHZhciBuYXRpdmUgPSBTdHJpbmcoTmF0aXZlU3ltYm9sKCd0ZXN0JykpID09ICdTeW1ib2wodGVzdCknO1xuICB2YXIgcmVnZXhwID0gL15TeW1ib2xcXCgoLiopXFwpW14pXSskLztcbiAgZGVmaW5lUHJvcGVydHkoc3ltYm9sUHJvdG90eXBlLCAnZGVzY3JpcHRpb24nLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICB2YXIgc3ltYm9sID0gaXNPYmplY3QodGhpcykgPyB0aGlzLnZhbHVlT2YoKSA6IHRoaXM7XG4gICAgICB2YXIgc3RyaW5nID0gc3ltYm9sVG9TdHJpbmcuY2FsbChzeW1ib2wpO1xuICAgICAgaWYgKGhhcyhFbXB0eVN0cmluZ0Rlc2NyaXB0aW9uU3RvcmUsIHN5bWJvbCkpIHJldHVybiAnJztcbiAgICAgIHZhciBkZXNjID0gbmF0aXZlID8gc3RyaW5nLnNsaWNlKDcsIC0xKSA6IHN0cmluZy5yZXBsYWNlKHJlZ2V4cCwgJyQxJyk7XG4gICAgICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjO1xuICAgIH1cbiAgfSk7XG5cbiAgJCh7IGdsb2JhbDogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICBTeW1ib2w6IFN5bWJvbFdyYXBwZXJcbiAgfSk7XG59XG4iLCJ2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS13ZWxsLWtub3duLXN5bWJvbCcpO1xuXG4vLyBgU3ltYm9sLml0ZXJhdG9yYCB3ZWxsLWtub3duIHN5bWJvbFxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuaXRlcmF0b3JcbmRlZmluZVdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgbmF0aXZlT2JqZWN0Q3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy1leHRlcm5hbCcpO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXByb3BlcnR5LWlzLWVudW1lcmFibGUnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wtd3JhcHBlZCcpO1xudmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pdGVyYXRpb24nKS5mb3JFYWNoO1xuXG52YXIgSElEREVOID0gc2hhcmVkS2V5KCdoaWRkZW4nKTtcbnZhciBTWU1CT0wgPSAnU3ltYm9sJztcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcbnZhciBUT19QUklNSVRJVkUgPSB3ZWxsS25vd25TeW1ib2woJ3RvUHJpbWl0aXZlJyk7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdFtQUk9UT1RZUEVdO1xudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xudmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpO1xudmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mO1xudmFyIEFsbFN5bWJvbHMgPSBzaGFyZWQoJ3N5bWJvbHMnKTtcbnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XG52YXIgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3RyaW5nLXRvLXN5bWJvbC1yZWdpc3RyeScpO1xudmFyIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC10by1zdHJpbmctcmVnaXN0cnknKTtcbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xudmFyIFVTRV9TRVRURVIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xuXG4vLyBmYWxsYmFjayBmb3Igb2xkIEFuZHJvaWQsIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvdjgvaXNzdWVzL2RldGFpbD9pZD02ODdcbnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0Q3JlYXRlKG5hdGl2ZURlZmluZVByb3BlcnR5KHt9LCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XG4gIH0pKS5hICE9IDc7XG59KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIHZhciBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yID0gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdFByb3RvdHlwZSwgUCk7XG4gIGlmIChPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKSBkZWxldGUgT2JqZWN0UHJvdG90eXBlW1BdO1xuICBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7XG4gICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTtcbiAgfVxufSA6IG5hdGl2ZURlZmluZVByb3BlcnR5O1xuXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7XG4gIHZhciBzeW1ib2wgPSBBbGxTeW1ib2xzW3RhZ10gPSBuYXRpdmVPYmplY3RDcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcbiAgc2V0SW50ZXJuYWxTdGF0ZShzeW1ib2wsIHtcbiAgICB0eXBlOiBTWU1CT0wsXG4gICAgdGFnOiB0YWcsXG4gICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uXG4gIH0pO1xuICBpZiAoIURFU0NSSVBUT1JTKSBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcbiAgcmV0dXJuIHN5bWJvbDtcbn07XG5cbnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XG59IDogZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBPYmplY3QoaXQpIGluc3RhbmNlb2YgJFN5bWJvbDtcbn07XG5cbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XG4gIGlmIChPID09PSBPYmplY3RQcm90b3R5cGUpICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xuICAgIGlmICghQXR0cmlidXRlcy5lbnVtZXJhYmxlKSB7XG4gICAgICBpZiAoIWhhcyhPLCBISURERU4pKSBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBISURERU4sIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB7fSkpO1xuICAgICAgT1tISURERU5dW2tleV0gPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGFzKE8sIEhJRERFTikgJiYgT1tISURERU5dW2tleV0pIE9bSElEREVOXVtrZXldID0gZmFsc2U7XG4gICAgICBBdHRyaWJ1dGVzID0gbmF0aXZlT2JqZWN0Q3JlYXRlKEF0dHJpYnV0ZXMsIHsgZW51bWVyYWJsZTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIGZhbHNlKSB9KTtcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjcmlwdG9yKE8sIGtleSwgQXR0cmlidXRlcyk7XG4gIH0gcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7XG59O1xuXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBwcm9wZXJ0aWVzID0gdG9JbmRleGVkT2JqZWN0KFByb3BlcnRpZXMpO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMocHJvcGVydGllcykuY29uY2F0KCRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcGVydGllcykpO1xuICAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKSAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pO1xuICB9KTtcbiAgcmV0dXJuIE87XG59O1xuXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyBuYXRpdmVPYmplY3RDcmVhdGUoTykgOiAkZGVmaW5lUHJvcGVydGllcyhuYXRpdmVPYmplY3RDcmVhdGUoTyksIFByb3BlcnRpZXMpO1xufTtcblxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHtcbiAgdmFyIFAgPSB0b1ByaW1pdGl2ZShWLCB0cnVlKTtcbiAgdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApO1xuICBpZiAodGhpcyA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBQKSAmJiAhaGFzKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIFApKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiBlbnVtZXJhYmxlIHx8ICFoYXModGhpcywgUCkgfHwgIWhhcyhBbGxTeW1ib2xzLCBQKSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1bUF0gPyBlbnVtZXJhYmxlIDogdHJ1ZTtcbn07XG5cbnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcbiAgdmFyIGl0ID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICB2YXIga2V5ID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkgcmV0dXJuO1xuICB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTtcbiAgaWYgKGRlc2NyaXB0b3IgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkge1xuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGRlc2NyaXB0b3I7XG59O1xuXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKCFoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKGhpZGRlbktleXMsIGtleSkpIHJlc3VsdC5wdXNoKGtleSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykge1xuICB2YXIgSVNfT0JKRUNUX1BST1RPVFlQRSA9IE8gPT09IE9iamVjdFByb3RvdHlwZTtcbiAgdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhJU19PQkpFQ1RfUFJPVE9UWVBFID8gT2JqZWN0UHJvdG90eXBlU3ltYm9scyA6IHRvSW5kZXhlZE9iamVjdChPKSk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgKCFJU19PQkpFQ1RfUFJPVE9UWVBFIHx8IGhhcyhPYmplY3RQcm90b3R5cGUsIGtleSkpKSB7XG4gICAgICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG4vLyBgU3ltYm9sYCBjb25zdHJ1Y3RvclxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wtY29uc3RydWN0b3JcbmlmICghTkFUSVZFX1NZTUJPTCkge1xuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pO1xuICAgIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pO1xuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90b3R5cGUpIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTtcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xuICAgICAgc2V0U3ltYm9sRGVzY3JpcHRvcih0aGlzLCB0YWcsIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xuICAgIH07XG4gICAgaWYgKERFU0NSSVBUT1JTICYmIFVTRV9TRVRURVIpIHNldFN5bWJvbERlc2NyaXB0b3IoT2JqZWN0UHJvdG90eXBlLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6IHNldHRlciB9KTtcbiAgICByZXR1cm4gd3JhcCh0YWcsIGRlc2NyaXB0aW9uKTtcbiAgfTtcblxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnRhZztcbiAgfSk7XG5cbiAgcmVkZWZpbmUoJFN5bWJvbCwgJ3dpdGhvdXRTZXR0ZXInLCBmdW5jdGlvbiAoZGVzY3JpcHRpb24pIHtcbiAgICByZXR1cm4gd3JhcCh1aWQoZGVzY3JpcHRpb24pLCBkZXNjcmlwdGlvbik7XG4gIH0pO1xuXG4gIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYgPSAkcHJvcGVydHlJc0VudW1lcmFibGU7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYgPSAkZGVmaW5lUHJvcGVydHk7XG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbiAgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xuXG4gIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHdyYXAod2VsbEtub3duU3ltYm9sKG5hbWUpLCBuYW1lKTtcbiAgfTtcblxuICBpZiAoREVTQ1JJUFRPUlMpIHtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1TeW1ib2wtZGVzY3JpcHRpb25cbiAgICBuYXRpdmVEZWZpbmVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sICdkZXNjcmlwdGlvbicsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gZGVzY3JpcHRpb24oKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghSVNfUFVSRSkge1xuICAgICAgcmVkZWZpbmUoT2JqZWN0UHJvdG90eXBlLCAncHJvcGVydHlJc0VudW1lcmFibGUnLCAkcHJvcGVydHlJc0VudW1lcmFibGUsIHsgdW5zYWZlOiB0cnVlIH0pO1xuICAgIH1cbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIFN5bWJvbDogJFN5bWJvbFxufSk7XG5cbiRmb3JFYWNoKG9iamVjdEtleXMoV2VsbEtub3duU3ltYm9sc1N0b3JlKSwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgZGVmaW5lV2VsbEtub3duU3ltYm9sKG5hbWUpO1xufSk7XG5cbiQoeyB0YXJnZXQ6IFNZTUJPTCwgc3RhdDogdHJ1ZSwgZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCB9LCB7XG4gIC8vIGBTeW1ib2wuZm9yYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wuZm9yXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHN0cmluZyA9IFN0cmluZyhrZXkpO1xuICAgIGlmIChoYXMoU3RyaW5nVG9TeW1ib2xSZWdpc3RyeSwgc3RyaW5nKSkgcmV0dXJuIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXTtcbiAgICB2YXIgc3ltYm9sID0gJFN5bWJvbChzdHJpbmcpO1xuICAgIFN0cmluZ1RvU3ltYm9sUmVnaXN0cnlbc3RyaW5nXSA9IHN5bWJvbDtcbiAgICBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bWJvbF0gPSBzdHJpbmc7XG4gICAgcmV0dXJuIHN5bWJvbDtcbiAgfSxcbiAgLy8gYFN5bWJvbC5rZXlGb3JgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5rZXlmb3JcbiAga2V5Rm9yOiBmdW5jdGlvbiBrZXlGb3Ioc3ltKSB7XG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2wnKTtcbiAgICBpZiAoaGFzKFN5bWJvbFRvU3RyaW5nUmVnaXN0cnksIHN5bSkpIHJldHVybiBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5W3N5bV07XG4gIH0sXG4gIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgeyBVU0VfU0VUVEVSID0gdHJ1ZTsgfSxcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IFVTRV9TRVRURVIgPSBmYWxzZTsgfVxufSk7XG5cbiQoeyB0YXJnZXQ6ICdPYmplY3QnLCBzdGF0OiB0cnVlLCBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLCBzaGFtOiAhREVTQ1JJUFRPUlMgfSwge1xuICAvLyBgT2JqZWN0LmNyZWF0ZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxuICBjcmVhdGU6ICRjcmVhdGUsXG4gIC8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuICBkZWZpbmVQcm9wZXJ0eTogJGRlZmluZVByb3BlcnR5LFxuICAvLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvcnNcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yXG59KTtcblxuJCh7IHRhcmdldDogJ09iamVjdCcsIHN0YXQ6IHRydWUsIGZvcmNlZDogIU5BVElWRV9TWU1CT0wgfSwge1xuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG4gIGdldE93blByb3BlcnR5TmFtZXM6ICRnZXRPd25Qcm9wZXJ0eU5hbWVzLFxuICAvLyBgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9sc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5c3ltYm9sc1xuICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbn0pO1xuXG4vLyBDaHJvbWUgMzggYW5kIDM5IGBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzYCBmYWlscyBvbiBwcmltaXRpdmVzXG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zNDQzXG4kKHsgdGFyZ2V0OiAnT2JqZWN0Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBmYWlscyhmdW5jdGlvbiAoKSB7IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKDEpOyB9KSB9LCB7XG4gIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7XG4gICAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7XG4gIH1cbn0pO1xuXG4vLyBgSlNPTi5zdHJpbmdpZnlgIG1ldGhvZCBiZWhhdmlvciB3aXRoIHN5bWJvbHNcbi8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtanNvbi5zdHJpbmdpZnlcbmlmICgkc3RyaW5naWZ5KSB7XG4gIHZhciBGT1JDRURfSlNPTl9TVFJJTkdJRlkgPSAhTkFUSVZFX1NZTUJPTCB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN5bWJvbCA9ICRTeW1ib2woKTtcbiAgICAvLyBNUyBFZGdlIGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyB7fVxuICAgIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJ1xuICAgICAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXG4gICAgICB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fSdcbiAgICAgIC8vIFY4IHRocm93cyBvbiBib3hlZCBzeW1ib2xzXG4gICAgICB8fCAkc3RyaW5naWZ5KE9iamVjdChzeW1ib2wpKSAhPSAne30nO1xuICB9KTtcblxuICAkKHsgdGFyZ2V0OiAnSlNPTicsIHN0YXQ6IHRydWUsIGZvcmNlZDogRk9SQ0VEX0pTT05fU1RSSU5HSUZZIH0sIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMgLS0gcmVxdWlyZWQgZm9yIGAubGVuZ3RoYFxuICAgIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHtcbiAgICAgIHZhciBhcmdzID0gW2l0XTtcbiAgICAgIHZhciBpbmRleCA9IDE7XG4gICAgICB2YXIgJHJlcGxhY2VyO1xuICAgICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpbmRleCkgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7XG4gICAgICAkcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgIGlmICghaXNPYmplY3QocmVwbGFjZXIpICYmIGl0ID09PSB1bmRlZmluZWQgfHwgaXNTeW1ib2woaXQpKSByZXR1cm47IC8vIElFOCByZXR1cm5zIHN0cmluZyBvbiB1bmRlZmluZWRcbiAgICAgIGlmICghaXNBcnJheShyZXBsYWNlcikpIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiAkcmVwbGFjZXIgPT0gJ2Z1bmN0aW9uJykgdmFsdWUgPSAkcmVwbGFjZXIuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKCFpc1N5bWJvbCh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIH07XG4gICAgICBhcmdzWzFdID0gcmVwbGFjZXI7XG4gICAgICByZXR1cm4gJHN0cmluZ2lmeS5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLXN5bWJvbC5wcm90b3R5cGUtQEB0b3ByaW1pdGl2ZVxuaWYgKCEkU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcbn1cbi8vIGBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddYCBwcm9wZXJ0eVxuLy8gaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3NlYy1zeW1ib2wucHJvdG90eXBlLUBAdG9zdHJpbmd0YWdcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7XG5cbmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIERPTUl0ZXJhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb20taXRlcmFibGVzJyk7XG52YXIgZm9yRWFjaCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1mb3ItZWFjaCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcblxuZm9yICh2YXIgQ09MTEVDVElPTl9OQU1FIGluIERPTUl0ZXJhYmxlcykge1xuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtDT0xMRUNUSU9OX05BTUVdO1xuICB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7XG4gIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSAmJiBDb2xsZWN0aW9uUHJvdG90eXBlLmZvckVhY2ggIT09IGZvckVhY2gpIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsICdmb3JFYWNoJywgZm9yRWFjaCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgQ29sbGVjdGlvblByb3RvdHlwZS5mb3JFYWNoID0gZm9yRWFjaDtcbiAgfVxufVxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS11c2VyLWFnZW50Jyk7XG5cbnZhciBzbGljZSA9IFtdLnNsaWNlO1xudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcblxudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2NoZWR1bGVyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCAvKiAsIC4uLmFyZ3VtZW50cyAqLykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICB2YXIgYXJncyA9IGJvdW5kQXJncyA/IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gc2NoZWR1bGVyKGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuYyAtLSBzcGVjIHJlcXVpcmVtZW50XG4gICAgICAodHlwZW9mIGhhbmRsZXIgPT0gJ2Z1bmN0aW9uJyA/IGhhbmRsZXIgOiBGdW5jdGlvbihoYW5kbGVyKSkuYXBwbHkodGhpcywgYXJncyk7XG4gICAgfSA6IGhhbmRsZXIsIHRpbWVvdXQpO1xuICB9O1xufTtcblxuLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxuLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCN0aW1lcnNcbiQoeyBnbG9iYWw6IHRydWUsIGJpbmQ6IHRydWUsIGZvcmNlZDogTVNJRSB9LCB7XG4gIC8vIGBzZXRUaW1lb3V0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0dGltZW91dFxuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcbiAgLy8gYHNldEludGVydmFsYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvdGltZXJzLWFuZC11c2VyLXByb21wdHMuaHRtbCNkb20tc2V0aW50ZXJ2YWxcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxufSk7XG4iLCIvKiEgbm91aXNsaWRlciAtIDE0LjYuMyAtIDExLzE5LzIwMjAgKi9cbihmdW5jdGlvbihmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIC8vIEFNRC4gUmVnaXN0ZXIgYXMgYW4gYW5vbnltb3VzIG1vZHVsZS5cbiAgICAgICAgZGVmaW5lKFtdLCBmYWN0b3J5KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8vIE5vZGUvQ29tbW9uSlNcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQnJvd3NlciBnbG9iYWxzXG4gICAgICAgIHdpbmRvdy5ub1VpU2xpZGVyID0gZmFjdG9yeSgpO1xuICAgIH1cbn0pKGZ1bmN0aW9uKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgdmFyIFZFUlNJT04gPSBcIjE0LjYuM1wiO1xuXG4gICAgLy9yZWdpb24gSGVscGVyIE1ldGhvZHNcblxuICAgIGZ1bmN0aW9uIGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgZW50cnkudG8gPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZW50cnkuZnJvbSA9PT0gXCJmdW5jdGlvblwiO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZWwpIHtcbiAgICAgICAgZWwucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChlbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTZXQodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLy8gQmluZGFibGUgdmVyc2lvblxuICAgIGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0KGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZXMgZHVwbGljYXRlcyBmcm9tIGFuIGFycmF5LlxuICAgIGZ1bmN0aW9uIHVuaXF1ZShhcnJheSkge1xuICAgICAgICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpc1thXSA/ICh0aGlzW2FdID0gdHJ1ZSkgOiBmYWxzZTtcbiAgICAgICAgfSwge30pO1xuICAgIH1cblxuICAgIC8vIFJvdW5kIGEgdmFsdWUgdG8gdGhlIGNsb3Nlc3QgJ3RvJy5cbiAgICBmdW5jdGlvbiBjbG9zZXN0KHZhbHVlLCB0bykge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSAvIHRvKSAqIHRvO1xuICAgIH1cblxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQuXG4gICAgZnVuY3Rpb24gb2Zmc2V0KGVsZW0sIG9yaWVudGF0aW9uKSB7XG4gICAgICAgIHZhciByZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgdmFyIGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICB2YXIgcGFnZU9mZnNldCA9IGdldFBhZ2VPZmZzZXQoZG9jKTtcblxuICAgICAgICAvLyBnZXRCb3VuZGluZ0NsaWVudFJlY3QgY29udGFpbnMgbGVmdCBzY3JvbGwgaW4gQ2hyb21lIG9uIEFuZHJvaWQuXG4gICAgICAgIC8vIEkgaGF2ZW4ndCBmb3VuZCBhIGZlYXR1cmUgZGV0ZWN0aW9uIHRoYXQgcHJvdmVzIHRoaXMuIFdvcnN0IGNhc2VcbiAgICAgICAgLy8gc2NlbmFyaW8gb24gbWlzLW1hdGNoOiB0aGUgJ3RhcCcgZmVhdHVyZSBvbiBob3Jpem9udGFsIHNsaWRlcnMgYnJlYWtzLlxuICAgICAgICBpZiAoL3dlYmtpdC4qQ2hyb21lLipNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICBwYWdlT2Zmc2V0LnggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9yaWVudGF0aW9uXG4gICAgICAgICAgICA/IHJlY3QudG9wICsgcGFnZU9mZnNldC55IC0gZG9jRWxlbS5jbGllbnRUb3BcbiAgICAgICAgICAgIDogcmVjdC5sZWZ0ICsgcGFnZU9mZnNldC54IC0gZG9jRWxlbS5jbGllbnRMZWZ0O1xuICAgIH1cblxuICAgIC8vIENoZWNrcyB3aGV0aGVyIGEgdmFsdWUgaXMgbnVtZXJpY2FsLlxuICAgIGZ1bmN0aW9uIGlzTnVtZXJpYyhhKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgYSA9PT0gXCJudW1iZXJcIiAmJiAhaXNOYU4oYSkgJiYgaXNGaW5pdGUoYSk7XG4gICAgfVxuXG4gICAgLy8gU2V0cyBhIGNsYXNzIGFuZCByZW1vdmVzIGl0IGFmdGVyIFtkdXJhdGlvbl0gbXMuXG4gICAgZnVuY3Rpb24gYWRkQ2xhc3NGb3IoZWxlbWVudCwgY2xhc3NOYW1lLCBkdXJhdGlvbikge1xuICAgICAgICBpZiAoZHVyYXRpb24gPiAwKSB7XG4gICAgICAgICAgICBhZGRDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhlbGVtZW50LCBjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSwgZHVyYXRpb24pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTGltaXRzIGEgdmFsdWUgdG8gMCAtIDEwMFxuICAgIGZ1bmN0aW9uIGxpbWl0KGEpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGEsIDEwMCksIDApO1xuICAgIH1cblxuICAgIC8vIFdyYXBzIGEgdmFyaWFibGUgYXMgYW4gYXJyYXksIGlmIGl0IGlzbid0IG9uZSB5ZXQuXG4gICAgLy8gTm90ZSB0aGF0IGFuIGlucHV0IGFycmF5IGlzIHJldHVybmVkIGJ5IHJlZmVyZW5jZSFcbiAgICBmdW5jdGlvbiBhc0FycmF5KGEpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYSkgPyBhIDogW2FdO1xuICAgIH1cblxuICAgIC8vIENvdW50cyBkZWNpbWFsc1xuICAgIGZ1bmN0aW9uIGNvdW50RGVjaW1hbHMobnVtU3RyKSB7XG4gICAgICAgIG51bVN0ciA9IFN0cmluZyhudW1TdHIpO1xuICAgICAgICB2YXIgcGllY2VzID0gbnVtU3RyLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgcmV0dXJuIHBpZWNlcy5sZW5ndGggPiAxID8gcGllY2VzWzFdLmxlbmd0aCA6IDA7XG4gICAgfVxuXG4gICAgLy8gaHR0cDovL3lvdW1pZ2h0bm90bmVlZGpxdWVyeS5jb20vI2FkZF9jbGFzc1xuICAgIGZ1bmN0aW9uIGFkZENsYXNzKGVsLCBjbGFzc05hbWUpIHtcbiAgICAgICAgaWYgKGVsLmNsYXNzTGlzdCAmJiAhL1xccy8udGVzdChjbGFzc05hbWUpKSB7XG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gXCIgXCIgKyBjbGFzc05hbWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBodHRwOi8veW91bWlnaHRub3RuZWVkanF1ZXJ5LmNvbS8jcmVtb3ZlX2NsYXNzXG4gICAgZnVuY3Rpb24gcmVtb3ZlQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoZWwuY2xhc3NMaXN0ICYmICEvXFxzLy50ZXN0KGNsYXNzTmFtZSkpIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsLmNsYXNzTmFtZSA9IGVsLmNsYXNzTmFtZS5yZXBsYWNlKFxuICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIoXnxcXFxcYilcIiArIGNsYXNzTmFtZS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcYnwkKVwiLCBcImdpXCIpLFxuICAgICAgICAgICAgICAgIFwiIFwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9wbGFpbmpzLmNvbS9qYXZhc2NyaXB0L2F0dHJpYnV0ZXMvYWRkaW5nLXJlbW92aW5nLWFuZC10ZXN0aW5nLWZvci1jbGFzc2VzLTkvXG4gICAgZnVuY3Rpb24gaGFzQ2xhc3MoZWwsIGNsYXNzTmFtZSkge1xuICAgICAgICByZXR1cm4gZWwuY2xhc3NMaXN0XG4gICAgICAgICAgICA/IGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpXG4gICAgICAgICAgICA6IG5ldyBSZWdFeHAoXCJcXFxcYlwiICsgY2xhc3NOYW1lICsgXCJcXFxcYlwiKS50ZXN0KGVsLmNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9zY3JvbGxZI05vdGVzXG4gICAgZnVuY3Rpb24gZ2V0UGFnZU9mZnNldChkb2MpIHtcbiAgICAgICAgdmFyIHN1cHBvcnRQYWdlT2Zmc2V0ID0gd2luZG93LnBhZ2VYT2Zmc2V0ICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIHZhciBpc0NTUzFDb21wYXQgPSAoZG9jLmNvbXBhdE1vZGUgfHwgXCJcIikgPT09IFwiQ1NTMUNvbXBhdFwiO1xuICAgICAgICB2YXIgeCA9IHN1cHBvcnRQYWdlT2Zmc2V0XG4gICAgICAgICAgICA/IHdpbmRvdy5wYWdlWE9mZnNldFxuICAgICAgICAgICAgOiBpc0NTUzFDb21wYXRcbiAgICAgICAgICAgICAgICA/IGRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsTGVmdDtcbiAgICAgICAgdmFyIHkgPSBzdXBwb3J0UGFnZU9mZnNldFxuICAgICAgICAgICAgPyB3aW5kb3cucGFnZVlPZmZzZXRcbiAgICAgICAgICAgIDogaXNDU1MxQ29tcGF0XG4gICAgICAgICAgICAgICAgPyBkb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcFxuICAgICAgICAgICAgICAgIDogZG9jLmJvZHkuc2Nyb2xsVG9wO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiB4LFxuICAgICAgICAgICAgeTogeVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIHdlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byBjb21wdXRlIGNvbnN0YW50cyBpbnN0ZWFkXG4gICAgLy8gb2YgYWNjZXNzaW5nIHdpbmRvdy4qIGFzIHNvb24gYXMgdGhlIG1vZHVsZSBuZWVkcyBpdFxuICAgIC8vIHNvIHRoYXQgd2UgZG8gbm90IGNvbXB1dGUgYW55dGhpbmcgaWYgbm90IG5lZWRlZFxuICAgIGZ1bmN0aW9uIGdldEFjdGlvbnMoKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgZXZlbnRzIHRvIGJpbmQuIElFMTEgaW1wbGVtZW50cyBwb2ludGVyRXZlbnRzIHdpdGhvdXRcbiAgICAgICAgLy8gYSBwcmVmaXgsIHdoaWNoIGJyZWFrcyBjb21wYXRpYmlsaXR5IHdpdGggdGhlIElFMTAgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0OiBcInBvaW50ZXJkb3duXCIsXG4gICAgICAgICAgICAgICAgICBtb3ZlOiBcInBvaW50ZXJtb3ZlXCIsXG4gICAgICAgICAgICAgICAgICBlbmQ6IFwicG9pbnRlcnVwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWRcbiAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJNU1BvaW50ZXJEb3duXCIsXG4gICAgICAgICAgICAgICAgICAgICAgbW92ZTogXCJNU1BvaW50ZXJNb3ZlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgZW5kOiBcIk1TUG9pbnRlclVwXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgICAgICAgICAgICAgICBzdGFydDogXCJtb3VzZWRvd24gdG91Y2hzdGFydFwiLFxuICAgICAgICAgICAgICAgICAgICAgIG1vdmU6IFwibW91c2Vtb3ZlIHRvdWNobW92ZVwiLFxuICAgICAgICAgICAgICAgICAgICAgIGVuZDogXCJtb3VzZXVwIHRvdWNoZW5kXCJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvRXZlbnRMaXN0ZW5lck9wdGlvbnMvYmxvYi9naC1wYWdlcy9leHBsYWluZXIubWRcbiAgICAvLyBJc3N1ZSAjNzg1XG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNQYXNzaXZlKCkge1xuICAgICAgICB2YXIgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG5cbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidGVzdFwiLCBudWxsLCBvcHRzKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKSB7XG4gICAgICAgIHJldHVybiB3aW5kb3cuQ1NTICYmIENTUy5zdXBwb3J0cyAmJiBDU1Muc3VwcG9ydHMoXCJ0b3VjaC1hY3Rpb25cIiwgXCJub25lXCIpO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBSYW5nZSBDYWxjdWxhdGlvblxuXG4gICAgLy8gRGV0ZXJtaW5lIHRoZSBzaXplIG9mIGEgc3ViLXJhbmdlIGluIHJlbGF0aW9uIHRvIGEgZnVsbCByYW5nZS5cbiAgICBmdW5jdGlvbiBzdWJSYW5nZVJhdGlvKHBhLCBwYikge1xuICAgICAgICByZXR1cm4gMTAwIC8gKHBiIC0gcGEpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBIb3cgbWFueSBwZXJjZW50IGlzIHRoaXMgdmFsdWUgb2YgdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBmcm9tUGVyY2VudGFnZShyYW5nZSwgdmFsdWUsIHN0YXJ0UmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuICh2YWx1ZSAqIDEwMCkgLyAocmFuZ2Vbc3RhcnRSYW5nZSArIDFdIC0gcmFuZ2Vbc3RhcnRSYW5nZV0pO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBXaGVyZSBpcyB0aGlzIHZhbHVlIG9uIHRoaXMgcmFuZ2U/XG4gICAgZnVuY3Rpb24gdG9QZXJjZW50YWdlKHJhbmdlLCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gZnJvbVBlcmNlbnRhZ2UocmFuZ2UsIHJhbmdlWzBdIDwgMCA/IHZhbHVlICsgTWF0aC5hYnMocmFuZ2VbMF0pIDogdmFsdWUgLSByYW5nZVswXSwgMCk7XG4gICAgfVxuXG4gICAgLy8gKHZhbHVlKSBIb3cgbXVjaCBpcyB0aGlzIHBlcmNlbnRhZ2Ugb24gdGhpcyByYW5nZT9cbiAgICBmdW5jdGlvbiBpc1BlcmNlbnRhZ2UocmFuZ2UsIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiAodmFsdWUgKiAocmFuZ2VbMV0gLSByYW5nZVswXSkpIC8gMTAwICsgcmFuZ2VbMF07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Sih2YWx1ZSwgYXJyKSB7XG4gICAgICAgIHZhciBqID0gMTtcblxuICAgICAgICB3aGlsZSAodmFsdWUgPj0gYXJyW2pdKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gajtcbiAgICB9XG5cbiAgICAvLyAocGVyY2VudGFnZSkgSW5wdXQgYSB2YWx1ZSwgZmluZCB3aGVyZSwgb24gYSBzY2FsZSBvZiAwLTEwMCwgaXQgYXBwbGllcy5cbiAgICBmdW5jdGlvbiB0b1N0ZXBwaW5nKHhWYWwsIHhQY3QsIHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA+PSB4VmFsLnNsaWNlKC0xKVswXSkge1xuICAgICAgICAgICAgcmV0dXJuIDEwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFZhbCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gcGEgKyB0b1BlcmNlbnRhZ2UoW3ZhLCB2Yl0sIHZhbHVlKSAvIHN1YlJhbmdlUmF0aW8ocGEsIHBiKTtcbiAgICB9XG5cbiAgICAvLyAodmFsdWUpIElucHV0IGEgcGVyY2VudGFnZSwgZmluZCB3aGVyZSBpdCBpcyBvbiB0aGUgc3BlY2lmaWVkIHJhbmdlLlxuICAgIGZ1bmN0aW9uIGZyb21TdGVwcGluZyh4VmFsLCB4UGN0LCB2YWx1ZSkge1xuICAgICAgICAvLyBUaGVyZSBpcyBubyByYW5nZSBncm91cCB0aGF0IGZpdHMgMTAwXG4gICAgICAgIGlmICh2YWx1ZSA+PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB4VmFsLnNsaWNlKC0xKVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciB2YSA9IHhWYWxbaiAtIDFdO1xuICAgICAgICB2YXIgdmIgPSB4VmFsW2pdO1xuICAgICAgICB2YXIgcGEgPSB4UGN0W2ogLSAxXTtcbiAgICAgICAgdmFyIHBiID0geFBjdFtqXTtcblxuICAgICAgICByZXR1cm4gaXNQZXJjZW50YWdlKFt2YSwgdmJdLCAodmFsdWUgLSBwYSkgKiBzdWJSYW5nZVJhdGlvKHBhLCBwYikpO1xuICAgIH1cblxuICAgIC8vIChwZXJjZW50YWdlKSBHZXQgdGhlIHN0ZXAgdGhhdCBhcHBsaWVzIGF0IGEgY2VydGFpbiB2YWx1ZS5cbiAgICBmdW5jdGlvbiBnZXRTdGVwKHhQY3QsIHhTdGVwcywgc25hcCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBqID0gZ2V0Sih2YWx1ZSwgeFBjdCk7XG4gICAgICAgIHZhciBhID0geFBjdFtqIC0gMV07XG4gICAgICAgIHZhciBiID0geFBjdFtqXTtcblxuICAgICAgICAvLyBJZiAnc25hcCcgaXMgc2V0LCBzdGVwcyBhcmUgdXNlZCBhcyBmaXhlZCBwb2ludHMgb24gdGhlIHNsaWRlci5cbiAgICAgICAgaWYgKHNuYXApIHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3QgcG9zaXRpb24sIGEgb3IgYi5cbiAgICAgICAgICAgIGlmICh2YWx1ZSAtIGEgPiAoYiAtIGEpIC8gMikge1xuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgheFN0ZXBzW2ogLSAxXSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHhQY3RbaiAtIDFdICsgY2xvc2VzdCh2YWx1ZSAtIHhQY3RbaiAtIDFdLCB4U3RlcHNbaiAtIDFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVFbnRyeVBvaW50KGluZGV4LCB2YWx1ZSwgdGhhdCkge1xuICAgICAgICB2YXIgcGVyY2VudGFnZTtcblxuICAgICAgICAvLyBXcmFwIG51bWVyaWNhbCBpbnB1dCBpbiBhbiBhcnJheS5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgdmFsdWUgPSBbdmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVqZWN0IGFueSBpbnZhbGlkIGlucHV0LCBieSB0ZXN0aW5nIHdoZXRoZXIgdmFsdWUgaXMgYW4gYXJyYXkuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyBjb250YWlucyBpbnZhbGlkIHZhbHVlLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENvdmVydCBtaW4vbWF4IHN5bnRheCB0byAwIGFuZCAxMDAuXG4gICAgICAgIGlmIChpbmRleCA9PT0gXCJtaW5cIikge1xuICAgICAgICAgICAgcGVyY2VudGFnZSA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IFwibWF4XCIpIHtcbiAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZXJjZW50YWdlID0gcGFyc2VGbG9hdChpbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKCFpc051bWVyaWMocGVyY2VudGFnZSkgfHwgIWlzTnVtZXJpYyh2YWx1ZVswXSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyB2YWx1ZSBpc24ndCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHZhbHVlcy5cbiAgICAgICAgdGhhdC54UGN0LnB1c2gocGVyY2VudGFnZSk7XG4gICAgICAgIHRoYXQueFZhbC5wdXNoKHZhbHVlWzBdKTtcblxuICAgICAgICAvLyBOYU4gd2lsbCBldmFsdWF0ZSB0byBmYWxzZSB0b28sIGJ1dCB0byBrZWVwXG4gICAgICAgIC8vIGxvZ2dpbmcgY2xlYXIsIHNldCBzdGVwIGV4cGxpY2l0bHkuIE1ha2Ugc3VyZVxuICAgICAgICAvLyBub3QgdG8gb3ZlcnJpZGUgdGhlICdzdGVwJyBzZXR0aW5nIHdpdGggZmFsc2UuXG4gICAgICAgIGlmICghcGVyY2VudGFnZSkge1xuICAgICAgICAgICAgaWYgKCFpc05hTih2YWx1ZVsxXSkpIHtcbiAgICAgICAgICAgICAgICB0aGF0LnhTdGVwc1swXSA9IHZhbHVlWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhhdC54U3RlcHMucHVzaChpc05hTih2YWx1ZVsxXSkgPyBmYWxzZSA6IHZhbHVlWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoYXQueEhpZ2hlc3RDb21wbGV0ZVN0ZXAucHVzaCgwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdGVwUG9pbnQoaSwgbiwgdGhhdCkge1xuICAgICAgICAvLyBJZ25vcmUgJ2ZhbHNlJyBzdGVwcGluZy5cbiAgICAgICAgaWYgKCFuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdGVwIG92ZXIgemVyby1sZW5ndGggcmFuZ2VzICgjOTQ4KTtcbiAgICAgICAgaWYgKHRoYXQueFZhbFtpXSA9PT0gdGhhdC54VmFsW2kgKyAxXSkge1xuICAgICAgICAgICAgdGhhdC54U3RlcHNbaV0gPSB0aGF0LnhIaWdoZXN0Q29tcGxldGVTdGVwW2ldID0gdGhhdC54VmFsW2ldO1xuXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBGYWN0b3IgdG8gcmFuZ2UgcmF0aW9cbiAgICAgICAgdGhhdC54U3RlcHNbaV0gPVxuICAgICAgICAgICAgZnJvbVBlcmNlbnRhZ2UoW3RoYXQueFZhbFtpXSwgdGhhdC54VmFsW2kgKyAxXV0sIG4sIDApIC8gc3ViUmFuZ2VSYXRpbyh0aGF0LnhQY3RbaV0sIHRoYXQueFBjdFtpICsgMV0pO1xuXG4gICAgICAgIHZhciB0b3RhbFN0ZXBzID0gKHRoYXQueFZhbFtpICsgMV0gLSB0aGF0LnhWYWxbaV0pIC8gdGhhdC54TnVtU3RlcHNbaV07XG4gICAgICAgIHZhciBoaWdoZXN0U3RlcCA9IE1hdGguY2VpbChOdW1iZXIodG90YWxTdGVwcy50b0ZpeGVkKDMpKSAtIDEpO1xuICAgICAgICB2YXIgc3RlcCA9IHRoYXQueFZhbFtpXSArIHRoYXQueE51bVN0ZXBzW2ldICogaGlnaGVzdFN0ZXA7XG5cbiAgICAgICAgdGhhdC54SGlnaGVzdENvbXBsZXRlU3RlcFtpXSA9IHN0ZXA7XG4gICAgfVxuXG4gICAgLy9lbmRyZWdpb25cblxuICAgIC8vcmVnaW9uIFNwZWN0cnVtXG5cbiAgICBmdW5jdGlvbiBTcGVjdHJ1bShlbnRyeSwgc25hcCwgc2luZ2xlU3RlcCkge1xuICAgICAgICB0aGlzLnhQY3QgPSBbXTtcbiAgICAgICAgdGhpcy54VmFsID0gW107XG4gICAgICAgIHRoaXMueFN0ZXBzID0gW3NpbmdsZVN0ZXAgfHwgZmFsc2VdO1xuICAgICAgICB0aGlzLnhOdW1TdGVwcyA9IFtmYWxzZV07XG4gICAgICAgIHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXAgPSBbXTtcblxuICAgICAgICB0aGlzLnNuYXAgPSBzbmFwO1xuXG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIG9yZGVyZWQgPSBbXTsgLy8gWzAsICdtaW4nXSwgWzEsICc1MCUnXSwgWzIsICdtYXgnXVxuXG4gICAgICAgIC8vIE1hcCB0aGUgb2JqZWN0IGtleXMgdG8gYW4gYXJyYXkuXG4gICAgICAgIGZvciAoaW5kZXggaW4gZW50cnkpIHtcbiAgICAgICAgICAgIGlmIChlbnRyeS5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHtcbiAgICAgICAgICAgICAgICBvcmRlcmVkLnB1c2goW2VudHJ5W2luZGV4XSwgaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNvcnQgYWxsIGVudHJpZXMgYnkgdmFsdWUgKG51bWVyaWMgc29ydCkuXG4gICAgICAgIGlmIChvcmRlcmVkLmxlbmd0aCAmJiB0eXBlb2Ygb3JkZXJlZFswXVswXSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgb3JkZXJlZC5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYVswXVswXSAtIGJbMF1bMF07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9yZGVyZWQuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbMF0gLSBiWzBdO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBlbnRyaWVzIHRvIHN1YnJhbmdlcy5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgb3JkZXJlZC5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGhhbmRsZUVudHJ5UG9pbnQob3JkZXJlZFtpbmRleF1bMV0sIG9yZGVyZWRbaW5kZXhdWzBdLCB0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFN0b3JlIHRoZSBhY3R1YWwgc3RlcCB2YWx1ZXMuXG4gICAgICAgIC8vIHhTdGVwcyBpcyBzb3J0ZWQgaW4gdGhlIHNhbWUgb3JkZXIgYXMgeFBjdCBhbmQgeFZhbC5cbiAgICAgICAgdGhpcy54TnVtU3RlcHMgPSB0aGlzLnhTdGVwcy5zbGljZSgwKTtcblxuICAgICAgICAvLyBDb252ZXJ0IGFsbCBudW1lcmljIHN0ZXBzIHRvIHRoZSBwZXJjZW50YWdlIG9mIHRoZSBzdWJyYW5nZSB0aGV5IHJlcHJlc2VudC5cbiAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgdGhpcy54TnVtU3RlcHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBoYW5kbGVTdGVwUG9pbnQoaW5kZXgsIHRoaXMueE51bVN0ZXBzW2luZGV4XSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0RGlzdGFuY2UgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaW5kZXg7XG4gICAgICAgIHZhciBkaXN0YW5jZXMgPSBbXTtcblxuICAgICAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLnhOdW1TdGVwcy5sZW5ndGggLSAxOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBsYXN0IFwicmFuZ2VcIiBjYW4ndCBjb250YWluIHN0ZXAgc2l6ZSBhcyBpdCBpcyBwdXJlbHkgYW4gZW5kcG9pbnQuXG4gICAgICAgICAgICB2YXIgc3RlcCA9IHRoaXMueE51bVN0ZXBzW2luZGV4XTtcblxuICAgICAgICAgICAgaWYgKHN0ZXAgJiYgKHZhbHVlIC8gc3RlcCkgJSAxICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT04gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIpOiAnbGltaXQnLCAnbWFyZ2luJyBhbmQgJ3BhZGRpbmcnIG9mIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMueFBjdFtpbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgXCIlIHJhbmdlIG11c3QgYmUgZGl2aXNpYmxlIGJ5IHN0ZXAuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgcGVyY2VudHVhbCBkaXN0YW5jZSBpbiBjdXJyZW50IHJhbmdlIG9mIGxpbWl0LCBtYXJnaW4gb3IgcGFkZGluZ1xuICAgICAgICAgICAgZGlzdGFuY2VzW2luZGV4XSA9IGZyb21QZXJjZW50YWdlKHRoaXMueFZhbCwgdmFsdWUsIGluZGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkaXN0YW5jZXM7XG4gICAgfTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvdmVyIHRoZSB3aG9sZSBzY2FsZSBvZiByYW5nZXMuXG4gICAgLy8gZGlyZWN0aW9uOiAwID0gYmFja3dhcmRzIC8gMSA9IGZvcndhcmRzXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldEFic29sdXRlRGlzdGFuY2UgPSBmdW5jdGlvbih2YWx1ZSwgZGlzdGFuY2VzLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgdmFyIHhQY3RfaW5kZXggPSAwO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSByYW5nZSB3aGVyZSB0byBzdGFydCBjYWxjdWxhdGlvblxuICAgICAgICBpZiAodmFsdWUgPCB0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICB3aGlsZSAodmFsdWUgPiB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICAgICAgeFBjdF9pbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0aGlzLnhQY3RbdGhpcy54UGN0Lmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICB4UGN0X2luZGV4ID0gdGhpcy54UGN0Lmxlbmd0aCAtIDI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiBsb29raW5nIGJhY2t3YXJkcyBhbmQgdGhlIHZhbHVlIGlzIGV4YWN0bHkgYXQgYSByYW5nZSBzZXBhcmF0b3IgdGhlbiBsb29rIG9uZSByYW5nZSBmdXJ0aGVyXG4gICAgICAgIGlmICghZGlyZWN0aW9uICYmIHZhbHVlID09PSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIDFdKSB7XG4gICAgICAgICAgICB4UGN0X2luZGV4Kys7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc3RhcnRfZmFjdG9yO1xuICAgICAgICB2YXIgcmVzdF9mYWN0b3IgPSAxO1xuXG4gICAgICAgIHZhciByZXN0X3JlbF9kaXN0YW5jZSA9IGRpc3RhbmNlc1t4UGN0X2luZGV4XTtcblxuICAgICAgICB2YXIgcmFuZ2VfcGN0ID0gMDtcblxuICAgICAgICB2YXIgcmVsX3JhbmdlX2Rpc3RhbmNlID0gMDtcbiAgICAgICAgdmFyIGFic19kaXN0YW5jZV9jb3VudGVyID0gMDtcbiAgICAgICAgdmFyIHJhbmdlX2NvdW50ZXIgPSAwO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB3aGF0IHBhcnQgb2YgdGhlIHN0YXJ0IHJhbmdlIHRoZSB2YWx1ZSBpc1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBzdGFydF9mYWN0b3IgPSAodmFsdWUgLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pIC8gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gKHRoaXMueFBjdFt4UGN0X2luZGV4ICsgMV0gLSB2YWx1ZSkgLyAodGhpcy54UGN0W3hQY3RfaW5kZXggKyAxXSAtIHRoaXMueFBjdFt4UGN0X2luZGV4XSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEbyB1bnRpbCB0aGUgY29tcGxldGUgZGlzdGFuY2UgYWNyb3NzIHJhbmdlcyBpcyBjYWxjdWxhdGVkXG4gICAgICAgIHdoaWxlIChyZXN0X3JlbF9kaXN0YW5jZSA+IDApIHtcbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgcGVyY2VudGFnZSBvZiB0b3RhbCByYW5nZVxuICAgICAgICAgICAgcmFuZ2VfcGN0ID0gdGhpcy54UGN0W3hQY3RfaW5kZXggKyAxICsgcmFuZ2VfY291bnRlcl0gLSB0aGlzLnhQY3RbeFBjdF9pbmRleCArIHJhbmdlX2NvdW50ZXJdO1xuXG4gICAgICAgICAgICAvLyBEZXRlY3QgaWYgdGhlIG1hcmdpbiwgcGFkZGluZyBvciBsaW1pdCBpcyBsYXJnZXIgdGhlbiB0aGUgY3VycmVudCByYW5nZSBhbmQgY2FsY3VsYXRlXG4gICAgICAgICAgICBpZiAoZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJlc3RfZmFjdG9yICsgMTAwIC0gc3RhcnRfZmFjdG9yICogMTAwID4gMTAwKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbGFyZ2VyIHRoZW4gdGFrZSB0aGUgcGVyY2VudHVhbCBkaXN0YW5jZSBvZiB0aGUgd2hvbGUgcmFuZ2VcbiAgICAgICAgICAgICAgICByZWxfcmFuZ2VfZGlzdGFuY2UgPSByYW5nZV9wY3QgKiBzdGFydF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgLy8gUmVzdCBmYWN0b3Igb2YgcmVsYXRpdmUgcGVyY2VudHVhbCBkaXN0YW5jZSBzdGlsbCB0byBiZSBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgcmVzdF9mYWN0b3IgPSAocmVzdF9yZWxfZGlzdGFuY2UgLSAxMDAgKiBzdGFydF9mYWN0b3IpIC8gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXTtcbiAgICAgICAgICAgICAgICAvLyBTZXQgc3RhcnQgZmFjdG9yIHRvIDEgYXMgZm9yIG5leHQgcmFuZ2UgaXQgZG9lcyBub3QgYXBwbHkuXG4gICAgICAgICAgICAgICAgc3RhcnRfZmFjdG9yID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgc21hbGxlciBvciBlcXVhbCB0aGVuIHRha2UgdGhlIHBlcmNlbnR1YWwgZGlzdGFuY2Ugb2YgdGhlIGNhbGN1bGF0ZSBwZXJjZW50dWFsIHBhcnQgb2YgdGhhdCByYW5nZVxuICAgICAgICAgICAgICAgIHJlbF9yYW5nZV9kaXN0YW5jZSA9ICgoZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJhbmdlX3BjdCkgLyAxMDApICogcmVzdF9mYWN0b3I7XG4gICAgICAgICAgICAgICAgLy8gTm8gcmVzdCBsZWZ0IGFzIHRoZSByZXN0IGZpdHMgaW4gY3VycmVudCByYW5nZVxuICAgICAgICAgICAgICAgIHJlc3RfZmFjdG9yID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgLSByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gTGltaXQgcmFuZ2UgdG8gZmlyc3QgcmFuZ2Ugd2hlbiBkaXN0YW5jZSBiZWNvbWVzIG91dHNpZGUgb2YgbWluaW11bSByYW5nZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnhQY3QubGVuZ3RoICsgcmFuZ2VfY291bnRlciA+PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlX2NvdW50ZXItLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFic19kaXN0YW5jZV9jb3VudGVyID0gYWJzX2Rpc3RhbmNlX2NvdW50ZXIgKyByZWxfcmFuZ2VfZGlzdGFuY2U7XG4gICAgICAgICAgICAgICAgLy8gTGltaXQgcmFuZ2UgdG8gbGFzdCByYW5nZSB3aGVuIGRpc3RhbmNlIGJlY29tZXMgb3V0c2lkZSBvZiBtYXhpbXVtIHJhbmdlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueFBjdC5sZW5ndGggLSByYW5nZV9jb3VudGVyID49IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2VfY291bnRlcisrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gUmVzdCBvZiByZWxhdGl2ZSBwZXJjZW50dWFsIGRpc3RhbmNlIHN0aWxsIHRvIGJlIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgIHJlc3RfcmVsX2Rpc3RhbmNlID0gZGlzdGFuY2VzW3hQY3RfaW5kZXggKyByYW5nZV9jb3VudGVyXSAqIHJlc3RfZmFjdG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlICsgYWJzX2Rpc3RhbmNlX2NvdW50ZXI7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS50b1N0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFsdWUgPSB0b1N0ZXBwaW5nKHRoaXMueFZhbCwgdGhpcy54UGN0LCB2YWx1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZnJvbVN0ZXBwaW5nID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZyb21TdGVwcGluZyh0aGlzLnhWYWwsIHRoaXMueFBjdCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuZ2V0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHZhbHVlID0gZ2V0U3RlcCh0aGlzLnhQY3QsIHRoaXMueFN0ZXBzLCB0aGlzLnNuYXAsIHZhbHVlKTtcblxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcblxuICAgIFNwZWN0cnVtLnByb3RvdHlwZS5nZXREZWZhdWx0U3RlcCA9IGZ1bmN0aW9uKHZhbHVlLCBpc0Rvd24sIHNpemUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIC8vIFdoZW4gYXQgdGhlIHRvcCBvciBzdGVwcGluZyBkb3duLCBsb29rIGF0IHRoZSBwcmV2aW91cyBzdWItcmFuZ2VcbiAgICAgICAgaWYgKHZhbHVlID09PSAxMDAgfHwgKGlzRG93biAmJiB2YWx1ZSA9PT0gdGhpcy54UGN0W2ogLSAxXSkpIHtcbiAgICAgICAgICAgIGogPSBNYXRoLm1heChqIC0gMSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKHRoaXMueFZhbFtqXSAtIHRoaXMueFZhbFtqIC0gMV0pIC8gc2l6ZTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmdldE5lYXJieVN0ZXBzID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGogPSBnZXRKKHZhbHVlLCB0aGlzLnhQY3QpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzdGVwQmVmb3JlOiB7XG4gICAgICAgICAgICAgICAgc3RhcnRWYWx1ZTogdGhpcy54VmFsW2ogLSAyXSxcbiAgICAgICAgICAgICAgICBzdGVwOiB0aGlzLnhOdW1TdGVwc1tqIC0gMl0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbaiAtIDJdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGhpc1N0ZXA6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbaiAtIDFdLFxuICAgICAgICAgICAgICAgIHN0ZXA6IHRoaXMueE51bVN0ZXBzW2ogLSAxXSxcbiAgICAgICAgICAgICAgICBoaWdoZXN0U3RlcDogdGhpcy54SGlnaGVzdENvbXBsZXRlU3RlcFtqIC0gMV1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdGVwQWZ0ZXI6IHtcbiAgICAgICAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnhWYWxbal0sXG4gICAgICAgICAgICAgICAgc3RlcDogdGhpcy54TnVtU3RlcHNbal0sXG4gICAgICAgICAgICAgICAgaGlnaGVzdFN0ZXA6IHRoaXMueEhpZ2hlc3RDb21wbGV0ZVN0ZXBbal1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgU3BlY3RydW0ucHJvdG90eXBlLmNvdW50U3RlcERlY2ltYWxzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGVwRGVjaW1hbHMgPSB0aGlzLnhOdW1TdGVwcy5tYXAoY291bnREZWNpbWFscyk7XG4gICAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBzdGVwRGVjaW1hbHMpO1xuICAgIH07XG5cbiAgICAvLyBPdXRzaWRlIHRlc3RpbmdcbiAgICBTcGVjdHJ1bS5wcm90b3R5cGUuY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0ZXAodGhpcy50b1N0ZXBwaW5nKHZhbHVlKSk7XG4gICAgfTtcblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICAvL3JlZ2lvbiBPcHRpb25zXG5cbiAgICAvKlx0RXZlcnkgaW5wdXQgb3B0aW9uIGlzIHRlc3RlZCBhbmQgcGFyc2VkLiBUaGlzJ2xsIHByZXZlbnRcbiAgICAgICAgZW5kbGVzcyB2YWxpZGF0aW9uIGluIGludGVybmFsIG1ldGhvZHMuIFRoZXNlIHRlc3RzIGFyZVxuICAgICAgICBzdHJ1Y3R1cmVkIHdpdGggYW4gaXRlbSBmb3IgZXZlcnkgb3B0aW9uIGF2YWlsYWJsZS4gQW5cbiAgICAgICAgb3B0aW9uIGNhbiBiZSBtYXJrZWQgYXMgcmVxdWlyZWQgYnkgc2V0dGluZyB0aGUgJ3InIGZsYWcuXG4gICAgICAgIFRoZSB0ZXN0aW5nIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICAgICAgICAgICAgLSBUaGUgcHJvdmlkZWQgdmFsdWUgZm9yIHRoZSBvcHRpb247XG4gICAgICAgICAgICAtIEEgcmVmZXJlbmNlIHRvIHRoZSBvcHRpb25zIG9iamVjdDtcbiAgICAgICAgICAgIC0gVGhlIG5hbWUgZm9yIHRoZSBvcHRpb247XG5cbiAgICAgICAgVGhlIHRlc3RpbmcgZnVuY3Rpb24gcmV0dXJucyBmYWxzZSB3aGVuIGFuIGVycm9yIGlzIGRldGVjdGVkLFxuICAgICAgICBvciB0cnVlIHdoZW4gZXZlcnl0aGluZyBpcyBPSy4gSXQgY2FuIGFsc28gbW9kaWZ5IHRoZSBvcHRpb25cbiAgICAgICAgb2JqZWN0LCB0byBtYWtlIHN1cmUgYWxsIHZhbHVlcyBjYW4gYmUgY29ycmVjdGx5IGxvb3BlZCBlbHNld2hlcmUuICovXG5cbiAgICAvL3JlZ2lvbiBEZWZhdWx0c1xuXG4gICAgdmFyIGRlZmF1bHRGb3JtYXR0ZXIgPSB7XG4gICAgICAgIHRvOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUudG9GaXhlZCgyKTtcbiAgICAgICAgfSxcbiAgICAgICAgZnJvbTogTnVtYmVyXG4gICAgfTtcblxuICAgIHZhciBjc3NDbGFzc2VzID0ge1xuICAgICAgICB0YXJnZXQ6IFwidGFyZ2V0XCIsXG4gICAgICAgIGJhc2U6IFwiYmFzZVwiLFxuICAgICAgICBvcmlnaW46IFwib3JpZ2luXCIsXG4gICAgICAgIGhhbmRsZTogXCJoYW5kbGVcIixcbiAgICAgICAgaGFuZGxlTG93ZXI6IFwiaGFuZGxlLWxvd2VyXCIsXG4gICAgICAgIGhhbmRsZVVwcGVyOiBcImhhbmRsZS11cHBlclwiLFxuICAgICAgICB0b3VjaEFyZWE6IFwidG91Y2gtYXJlYVwiLFxuICAgICAgICBob3Jpem9udGFsOiBcImhvcml6b250YWxcIixcbiAgICAgICAgdmVydGljYWw6IFwidmVydGljYWxcIixcbiAgICAgICAgYmFja2dyb3VuZDogXCJiYWNrZ3JvdW5kXCIsXG4gICAgICAgIGNvbm5lY3Q6IFwiY29ubmVjdFwiLFxuICAgICAgICBjb25uZWN0czogXCJjb25uZWN0c1wiLFxuICAgICAgICBsdHI6IFwibHRyXCIsXG4gICAgICAgIHJ0bDogXCJydGxcIixcbiAgICAgICAgdGV4dERpcmVjdGlvbkx0cjogXCJ0eHQtZGlyLWx0clwiLFxuICAgICAgICB0ZXh0RGlyZWN0aW9uUnRsOiBcInR4dC1kaXItcnRsXCIsXG4gICAgICAgIGRyYWdnYWJsZTogXCJkcmFnZ2FibGVcIixcbiAgICAgICAgZHJhZzogXCJzdGF0ZS1kcmFnXCIsXG4gICAgICAgIHRhcDogXCJzdGF0ZS10YXBcIixcbiAgICAgICAgYWN0aXZlOiBcImFjdGl2ZVwiLFxuICAgICAgICB0b29sdGlwOiBcInRvb2x0aXBcIixcbiAgICAgICAgcGlwczogXCJwaXBzXCIsXG4gICAgICAgIHBpcHNIb3Jpem9udGFsOiBcInBpcHMtaG9yaXpvbnRhbFwiLFxuICAgICAgICBwaXBzVmVydGljYWw6IFwicGlwcy12ZXJ0aWNhbFwiLFxuICAgICAgICBtYXJrZXI6IFwibWFya2VyXCIsXG4gICAgICAgIG1hcmtlckhvcml6b250YWw6IFwibWFya2VyLWhvcml6b250YWxcIixcbiAgICAgICAgbWFya2VyVmVydGljYWw6IFwibWFya2VyLXZlcnRpY2FsXCIsXG4gICAgICAgIG1hcmtlck5vcm1hbDogXCJtYXJrZXItbm9ybWFsXCIsXG4gICAgICAgIG1hcmtlckxhcmdlOiBcIm1hcmtlci1sYXJnZVwiLFxuICAgICAgICBtYXJrZXJTdWI6IFwibWFya2VyLXN1YlwiLFxuICAgICAgICB2YWx1ZTogXCJ2YWx1ZVwiLFxuICAgICAgICB2YWx1ZUhvcml6b250YWw6IFwidmFsdWUtaG9yaXpvbnRhbFwiLFxuICAgICAgICB2YWx1ZVZlcnRpY2FsOiBcInZhbHVlLXZlcnRpY2FsXCIsXG4gICAgICAgIHZhbHVlTm9ybWFsOiBcInZhbHVlLW5vcm1hbFwiLFxuICAgICAgICB2YWx1ZUxhcmdlOiBcInZhbHVlLWxhcmdlXCIsXG4gICAgICAgIHZhbHVlU3ViOiBcInZhbHVlLXN1YlwiXG4gICAgfTtcblxuICAgIC8vIE5hbWVzcGFjZXMgb2YgaW50ZXJuYWwgZXZlbnQgbGlzdGVuZXJzXG4gICAgdmFyIElOVEVSTkFMX0VWRU5UX05TID0ge1xuICAgICAgICB0b29sdGlwczogXCIuX190b29sdGlwc1wiLFxuICAgICAgICBhcmlhOiBcIi5fX2FyaWFcIlxuICAgIH07XG5cbiAgICAvL2VuZHJlZ2lvblxuXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZW50cnkpIHtcbiAgICAgICAgLy8gQW55IG9iamVjdCB3aXRoIGEgdG8gYW5kIGZyb20gbWV0aG9kIGlzIHN1cHBvcnRlZC5cbiAgICAgICAgaWYgKGlzVmFsaWRGb3JtYXR0ZXIoZW50cnkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2Zvcm1hdCcgcmVxdWlyZXMgJ3RvJyBhbmQgJ2Zyb20nIG1ldGhvZHMuXCIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RTdGVwKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzdGVwJyBpcyBub3QgbnVtZXJpYy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgc3RlcCBvcHRpb24gY2FuIHN0aWxsIGJlIHVzZWQgdG8gc2V0IHN0ZXBwaW5nXG4gICAgICAgIC8vIGZvciBsaW5lYXIgc2xpZGVycy4gT3ZlcndyaXR0ZW4gaWYgc2V0IGluICdyYW5nZScuXG4gICAgICAgIHBhcnNlZC5zaW5nbGVTdGVwID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkUGFnZU11bHRpcGxpZXIocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2tleWJvYXJkUGFnZU11bHRpcGxpZXInIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFBhZ2VNdWx0aXBsaWVyID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkRGVmYXVsdFN0ZXAocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAoIWlzTnVtZXJpYyhlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2tleWJvYXJkRGVmYXVsdFN0ZXAnIGlzIG5vdCBudW1lcmljLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5rZXlib2FyZERlZmF1bHRTdGVwID0gZW50cnk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdFJhbmdlKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gRmlsdGVyIGluY29ycmVjdCBpbnB1dC5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIiB8fCBBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncmFuZ2UnIGlzIG5vdCBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggbWlzc2luZyBzdGFydCBvciBlbmQuXG4gICAgICAgIGlmIChlbnRyeS5taW4gPT09IHVuZGVmaW5lZCB8fCBlbnRyeS5tYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBNaXNzaW5nICdtaW4nIG9yICdtYXgnIGluICdyYW5nZScuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2F0Y2ggZXF1YWwgc3RhcnQgb3IgZW5kLlxuICAgICAgICBpZiAoZW50cnkubWluID09PSBlbnRyeS5tYXgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3JhbmdlJyAnbWluJyBhbmQgJ21heCcgY2Fubm90IGJlIGVxdWFsLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5zcGVjdHJ1bSA9IG5ldyBTcGVjdHJ1bShlbnRyeSwgcGFyc2VkLnNuYXAsIHBhcnNlZC5zaW5nbGVTdGVwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U3RhcnQocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBlbnRyeSA9IGFzQXJyYXkoZW50cnkpO1xuXG4gICAgICAgIC8vIFZhbGlkYXRlIGlucHV0LiBWYWx1ZXMgYXJlbid0IHRlc3RlZCwgYXMgdGhlIHB1YmxpYyAudmFsIG1ldGhvZFxuICAgICAgICAvLyB3aWxsIGFsd2F5cyBwcm92aWRlIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnc3RhcnQnIG9wdGlvbiBpcyBpbmNvcnJlY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RvcmUgdGhlIG51bWJlciBvZiBoYW5kbGVzLlxuICAgICAgICBwYXJzZWQuaGFuZGxlcyA9IGVudHJ5Lmxlbmd0aDtcblxuICAgICAgICAvLyBXaGVuIHRoZSBzbGlkZXIgaXMgaW5pdGlhbGl6ZWQsIHRoZSAudmFsIG1ldGhvZCB3aWxsXG4gICAgICAgIC8vIGJlIGNhbGxlZCB3aXRoIHRoZSBzdGFydCBvcHRpb25zLlxuICAgICAgICBwYXJzZWQuc3RhcnQgPSBlbnRyeTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0U25hcChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIEVuZm9yY2UgMTAwJSBzdGVwcGluZyB3aXRoaW4gc3VicmFuZ2VzLlxuICAgICAgICBwYXJzZWQuc25hcCA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdzbmFwJyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEFuaW1hdGUocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBFbmZvcmNlIDEwMCUgc3RlcHBpbmcgd2l0aGluIHN1YnJhbmdlcy5cbiAgICAgICAgcGFyc2VkLmFuaW1hdGUgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYW5pbWF0ZScgb3B0aW9uIG11c3QgYmUgYSBib29sZWFuLlwiKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RBbmltYXRpb25EdXJhdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hbmltYXRpb25EdXJhdGlvbiA9IGVudHJ5O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZW50cnkgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2FuaW1hdGlvbkR1cmF0aW9uJyBvcHRpb24gbXVzdCBiZSBhIG51bWJlci5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Q29ubmVjdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHZhciBjb25uZWN0ID0gW2ZhbHNlXTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gTWFwIGxlZ2FjeSBvcHRpb25zXG4gICAgICAgIGlmIChlbnRyeSA9PT0gXCJsb3dlclwiKSB7XG4gICAgICAgICAgICBlbnRyeSA9IFt0cnVlLCBmYWxzZV07XG4gICAgICAgIH0gZWxzZSBpZiAoZW50cnkgPT09IFwidXBwZXJcIikge1xuICAgICAgICAgICAgZW50cnkgPSBbZmFsc2UsIHRydWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlIGJvb2xlYW4gb3B0aW9uc1xuICAgICAgICBpZiAoZW50cnkgPT09IHRydWUgfHwgZW50cnkgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbm5lY3QucHVzaChlbnRyeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbm5lY3QucHVzaChmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWplY3QgaW52YWxpZCBpbnB1dFxuICAgICAgICBlbHNlIGlmICghQXJyYXkuaXNBcnJheShlbnRyeSkgfHwgIWVudHJ5Lmxlbmd0aCB8fCBlbnRyeS5sZW5ndGggIT09IHBhcnNlZC5oYW5kbGVzICsgMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY29ubmVjdCcgb3B0aW9uIGRvZXNuJ3QgbWF0Y2ggaGFuZGxlIGNvdW50LlwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3QgPSBlbnRyeTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5jb25uZWN0ID0gY29ubmVjdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0T3JpZW50YXRpb24ocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICAvLyBTZXQgb3JpZW50YXRpb24gdG8gYW4gYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3lcbiAgICAgICAgLy8gYXJyYXkgc2VsZWN0aW9uLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwiaG9yaXpvbnRhbFwiOlxuICAgICAgICAgICAgICAgIHBhcnNlZC5vcnQgPSAwO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInZlcnRpY2FsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLm9ydCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ29yaWVudGF0aW9uJyBvcHRpb24gaXMgaW52YWxpZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0TWFyZ2luKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKCFpc051bWVyaWMoZW50cnkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICdtYXJnaW4nIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXNzdWUgIzU4MlxuICAgICAgICBpZiAoZW50cnkgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcnNlZC5tYXJnaW4gPSBwYXJzZWQuc3BlY3RydW0uZ2V0RGlzdGFuY2UoZW50cnkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RMaW1pdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnbGltaXQnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmxpbWl0ID0gcGFyc2VkLnNwZWN0cnVtLmdldERpc3RhbmNlKGVudHJ5KTtcblxuICAgICAgICBpZiAoIXBhcnNlZC5saW1pdCB8fCBwYXJzZWQuaGFuZGxlcyA8IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICtcbiAgICAgICAgICAgICAgICAgICAgVkVSU0lPTiArXG4gICAgICAgICAgICAgICAgICAgIFwiKTogJ2xpbWl0JyBvcHRpb24gaXMgb25seSBzdXBwb3J0ZWQgb24gbGluZWFyIHNsaWRlcnMgd2l0aCAyIG9yIG1vcmUgaGFuZGxlcy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RQYWRkaW5nKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgdmFyIGluZGV4O1xuXG4gICAgICAgIGlmICghaXNOdW1lcmljKGVudHJ5KSAmJiAhQXJyYXkuaXNBcnJheShlbnRyeSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIG51bWVyaWMgb3IgYXJyYXkgb2YgZXhhY3RseSAyIG51bWJlcnMuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbnRyeSkgJiYgIShlbnRyeS5sZW5ndGggPT09IDIgfHwgaXNOdW1lcmljKGVudHJ5WzBdKSB8fCBpc051bWVyaWMoZW50cnlbMV0pKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAncGFkZGluZycgb3B0aW9uIG11c3QgYmUgbnVtZXJpYyBvciBhcnJheSBvZiBleGFjdGx5IDIgbnVtYmVycy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGVudHJ5KSkge1xuICAgICAgICAgICAgZW50cnkgPSBbZW50cnksIGVudHJ5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vICdnZXREaXN0YW5jZScgcmV0dXJucyBmYWxzZSBmb3IgaW52YWxpZCB2YWx1ZXMuXG4gICAgICAgIHBhcnNlZC5wYWRkaW5nID0gW3BhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeVswXSksIHBhcnNlZC5zcGVjdHJ1bS5nZXREaXN0YW5jZShlbnRyeVsxXSldO1xuXG4gICAgICAgIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnNlZC5zcGVjdHJ1bS54TnVtU3RlcHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xuICAgICAgICAgICAgLy8gbGFzdCBcInJhbmdlXCIgY2FuJ3QgY29udGFpbiBzdGVwIHNpemUgYXMgaXQgaXMgcHVyZWx5IGFuIGVuZHBvaW50LlxuICAgICAgICAgICAgaWYgKHBhcnNlZC5wYWRkaW5nWzBdW2luZGV4XSA8IDAgfHwgcGFyc2VkLnBhZGRpbmdbMV1baW5kZXhdIDwgMCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyKHMpLlwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3RhbFBhZGRpbmcgPSBlbnRyeVswXSArIGVudHJ5WzFdO1xuICAgICAgICB2YXIgZmlyc3RWYWx1ZSA9IHBhcnNlZC5zcGVjdHJ1bS54VmFsWzBdO1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gcGFyc2VkLnNwZWN0cnVtLnhWYWxbcGFyc2VkLnNwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHRvdGFsUGFkZGluZyAvIChsYXN0VmFsdWUgLSBmaXJzdFZhbHVlKSA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3BhZGRpbmcnIG9wdGlvbiBtdXN0IG5vdCBleGNlZWQgMTAwJSBvZiB0aGUgcmFuZ2UuXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERpcmVjdGlvbihwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFNldCBkaXJlY3Rpb24gYXMgYSBudW1lcmljYWwgdmFsdWUgZm9yIGVhc3kgcGFyc2luZy5cbiAgICAgICAgLy8gSW52ZXJ0IGNvbm5lY3Rpb24gZm9yIFJUTCBzbGlkZXJzLCBzbyB0aGF0IHRoZSBwcm9wZXJcbiAgICAgICAgLy8gaGFuZGxlcyBnZXQgdGhlIGNvbm5lY3QvYmFja2dyb3VuZCBjbGFzc2VzLlxuICAgICAgICBzd2l0Y2ggKGVudHJ5KSB7XG4gICAgICAgICAgICBjYXNlIFwibHRyXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwicnRsXCI6XG4gICAgICAgICAgICAgICAgcGFyc2VkLmRpciA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2RpcmVjdGlvbicgb3B0aW9uIHdhcyBub3QgcmVjb2duaXplZC5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QmVoYXZpb3VyKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSBpbnB1dCBpcyBhIHN0cmluZy5cbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnYmVoYXZpb3VyJyBtdXN0IGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgb3B0aW9ucy5cIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBpZiB0aGUgc3RyaW5nIGNvbnRhaW5zIGFueSBrZXl3b3Jkcy5cbiAgICAgICAgLy8gTm9uZSBhcmUgcmVxdWlyZWQuXG4gICAgICAgIHZhciB0YXAgPSBlbnRyeS5pbmRleE9mKFwidGFwXCIpID49IDA7XG4gICAgICAgIHZhciBkcmFnID0gZW50cnkuaW5kZXhPZihcImRyYWdcIikgPj0gMDtcbiAgICAgICAgdmFyIGZpeGVkID0gZW50cnkuaW5kZXhPZihcImZpeGVkXCIpID49IDA7XG4gICAgICAgIHZhciBzbmFwID0gZW50cnkuaW5kZXhPZihcInNuYXBcIikgPj0gMDtcbiAgICAgICAgdmFyIGhvdmVyID0gZW50cnkuaW5kZXhPZihcImhvdmVyXCIpID49IDA7XG4gICAgICAgIHZhciB1bmNvbnN0cmFpbmVkID0gZW50cnkuaW5kZXhPZihcInVuY29uc3RyYWluZWRcIikgPj0gMDtcblxuICAgICAgICBpZiAoZml4ZWQpIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWQuaGFuZGxlcyAhPT0gMikge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ2ZpeGVkJyBiZWhhdmlvdXIgbXVzdCBiZSB1c2VkIHdpdGggMiBoYW5kbGVzXCIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVc2UgbWFyZ2luIHRvIGVuZm9yY2UgZml4ZWQgc3RhdGVcbiAgICAgICAgICAgIHRlc3RNYXJnaW4ocGFyc2VkLCBwYXJzZWQuc3RhcnRbMV0gLSBwYXJzZWQuc3RhcnRbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVuY29uc3RyYWluZWQgJiYgKHBhcnNlZC5tYXJnaW4gfHwgcGFyc2VkLmxpbWl0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAndW5jb25zdHJhaW5lZCcgYmVoYXZpb3VyIGNhbm5vdCBiZSB1c2VkIHdpdGggbWFyZ2luIG9yIGxpbWl0XCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBwYXJzZWQuZXZlbnRzID0ge1xuICAgICAgICAgICAgdGFwOiB0YXAgfHwgc25hcCxcbiAgICAgICAgICAgIGRyYWc6IGRyYWcsXG4gICAgICAgICAgICBmaXhlZDogZml4ZWQsXG4gICAgICAgICAgICBzbmFwOiBzbmFwLFxuICAgICAgICAgICAgaG92ZXI6IGhvdmVyLFxuICAgICAgICAgICAgdW5jb25zdHJhaW5lZDogdW5jb25zdHJhaW5lZFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RUb29sdGlwcyhwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIGlmIChlbnRyeSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gW107XG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGFyc2VkLmhhbmRsZXM7IGkrKykge1xuICAgICAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5wdXNoKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLnRvb2x0aXBzID0gYXNBcnJheShlbnRyeSk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZWQudG9vbHRpcHMubGVuZ3RoICE9PSBwYXJzZWQuaGFuZGxlcykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogbXVzdCBwYXNzIGEgZm9ybWF0dGVyIGZvciBhbGwgaGFuZGxlcy5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhcnNlZC50b29sdGlwcy5mb3JFYWNoKGZ1bmN0aW9uKGZvcm1hdHRlcikge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGZvcm1hdHRlciAhPT0gXCJib29sZWFuXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBmb3JtYXR0ZXIgIT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGZvcm1hdHRlci50byAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub1VpU2xpZGVyIChcIiArIFZFUlNJT04gKyBcIik6ICd0b29sdGlwcycgbXVzdCBiZSBwYXNzZWQgYSBmb3JtYXR0ZXIgb3IgJ2ZhbHNlJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0QXJpYUZvcm1hdChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5hcmlhRm9ybWF0ID0gZW50cnk7XG4gICAgICAgIHZhbGlkYXRlRm9ybWF0KGVudHJ5KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0Rm9ybWF0KHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgcGFyc2VkLmZvcm1hdCA9IGVudHJ5O1xuICAgICAgICB2YWxpZGF0ZUZvcm1hdChlbnRyeSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEtleWJvYXJkU3VwcG9ydChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIHBhcnNlZC5rZXlib2FyZFN1cHBvcnQgPSBlbnRyeTtcblxuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAna2V5Ym9hcmRTdXBwb3J0JyBvcHRpb24gbXVzdCBiZSBhIGJvb2xlYW4uXCIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdERvY3VtZW50RWxlbWVudChwYXJzZWQsIGVudHJ5KSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYW4gYWR2YW5jZWQgb3B0aW9uLiBQYXNzZWQgdmFsdWVzIGFyZSB1c2VkIHdpdGhvdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgcGFyc2VkLmRvY3VtZW50RWxlbWVudCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NQcmVmaXgocGFyc2VkLCBlbnRyeSkge1xuICAgICAgICBpZiAodHlwZW9mIGVudHJ5ICE9PSBcInN0cmluZ1wiICYmIGVudHJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzUHJlZml4JyBtdXN0IGJlIGEgc3RyaW5nIG9yIGBmYWxzZWAuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyc2VkLmNzc1ByZWZpeCA9IGVudHJ5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRlc3RDc3NDbGFzc2VzKHBhcnNlZCwgZW50cnkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBlbnRyeSAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiAnY3NzQ2xhc3NlcycgbXVzdCBiZSBhbiBvYmplY3QuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJzZWQuY3NzUHJlZml4ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBwYXJzZWQuY3NzQ2xhc3NlcyA9IHt9O1xuXG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWVudHJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXNba2V5XSA9IHBhcnNlZC5jc3NQcmVmaXggKyBlbnRyeVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGFyc2VkLmNzc0NsYXNzZXMgPSBlbnRyeTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRlc3QgYWxsIGRldmVsb3BlciBzZXR0aW5ncyBhbmQgcGFyc2UgdG8gYXNzdW1wdGlvbi1zYWZlIHZhbHVlcy5cbiAgICBmdW5jdGlvbiB0ZXN0T3B0aW9ucyhvcHRpb25zKSB7XG4gICAgICAgIC8vIFRvIHByb3ZlIGEgZml4IGZvciAjNTM3LCBmcmVlemUgb3B0aW9ucyBoZXJlLlxuICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IGlzIG1vZGlmaWVkLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAgICAgICAgLy8gT2JqZWN0LmZyZWV6ZShvcHRpb25zKTtcblxuICAgICAgICB2YXIgcGFyc2VkID0ge1xuICAgICAgICAgICAgbWFyZ2luOiAwLFxuICAgICAgICAgICAgbGltaXQ6IDAsXG4gICAgICAgICAgICBwYWRkaW5nOiAwLFxuICAgICAgICAgICAgYW5pbWF0ZTogdHJ1ZSxcbiAgICAgICAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyLFxuICAgICAgICAgICAgZm9ybWF0OiBkZWZhdWx0Rm9ybWF0dGVyXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gVGVzdHMgYXJlIGV4ZWN1dGVkIGluIHRoZSBvcmRlciB0aGV5IGFyZSBwcmVzZW50ZWQgaGVyZS5cbiAgICAgICAgdmFyIHRlc3RzID0ge1xuICAgICAgICAgICAgc3RlcDogeyByOiBmYWxzZSwgdDogdGVzdFN0ZXAgfSxcbiAgICAgICAgICAgIGtleWJvYXJkUGFnZU11bHRpcGxpZXI6IHsgcjogZmFsc2UsIHQ6IHRlc3RLZXlib2FyZFBhZ2VNdWx0aXBsaWVyIH0sXG4gICAgICAgICAgICBrZXlib2FyZERlZmF1bHRTdGVwOiB7IHI6IGZhbHNlLCB0OiB0ZXN0S2V5Ym9hcmREZWZhdWx0U3RlcCB9LFxuICAgICAgICAgICAgc3RhcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdFN0YXJ0IH0sXG4gICAgICAgICAgICBjb25uZWN0OiB7IHI6IHRydWUsIHQ6IHRlc3RDb25uZWN0IH0sXG4gICAgICAgICAgICBkaXJlY3Rpb246IHsgcjogdHJ1ZSwgdDogdGVzdERpcmVjdGlvbiB9LFxuICAgICAgICAgICAgc25hcDogeyByOiBmYWxzZSwgdDogdGVzdFNuYXAgfSxcbiAgICAgICAgICAgIGFuaW1hdGU6IHsgcjogZmFsc2UsIHQ6IHRlc3RBbmltYXRlIH0sXG4gICAgICAgICAgICBhbmltYXRpb25EdXJhdGlvbjogeyByOiBmYWxzZSwgdDogdGVzdEFuaW1hdGlvbkR1cmF0aW9uIH0sXG4gICAgICAgICAgICByYW5nZTogeyByOiB0cnVlLCB0OiB0ZXN0UmFuZ2UgfSxcbiAgICAgICAgICAgIG9yaWVudGF0aW9uOiB7IHI6IGZhbHNlLCB0OiB0ZXN0T3JpZW50YXRpb24gfSxcbiAgICAgICAgICAgIG1hcmdpbjogeyByOiBmYWxzZSwgdDogdGVzdE1hcmdpbiB9LFxuICAgICAgICAgICAgbGltaXQ6IHsgcjogZmFsc2UsIHQ6IHRlc3RMaW1pdCB9LFxuICAgICAgICAgICAgcGFkZGluZzogeyByOiBmYWxzZSwgdDogdGVzdFBhZGRpbmcgfSxcbiAgICAgICAgICAgIGJlaGF2aW91cjogeyByOiB0cnVlLCB0OiB0ZXN0QmVoYXZpb3VyIH0sXG4gICAgICAgICAgICBhcmlhRm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0QXJpYUZvcm1hdCB9LFxuICAgICAgICAgICAgZm9ybWF0OiB7IHI6IGZhbHNlLCB0OiB0ZXN0Rm9ybWF0IH0sXG4gICAgICAgICAgICB0b29sdGlwczogeyByOiBmYWxzZSwgdDogdGVzdFRvb2x0aXBzIH0sXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHsgcjogdHJ1ZSwgdDogdGVzdEtleWJvYXJkU3VwcG9ydCB9LFxuICAgICAgICAgICAgZG9jdW1lbnRFbGVtZW50OiB7IHI6IGZhbHNlLCB0OiB0ZXN0RG9jdW1lbnRFbGVtZW50IH0sXG4gICAgICAgICAgICBjc3NQcmVmaXg6IHsgcjogdHJ1ZSwgdDogdGVzdENzc1ByZWZpeCB9LFxuICAgICAgICAgICAgY3NzQ2xhc3NlczogeyByOiB0cnVlLCB0OiB0ZXN0Q3NzQ2xhc3NlcyB9XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgY29ubmVjdDogZmFsc2UsXG4gICAgICAgICAgICBkaXJlY3Rpb246IFwibHRyXCIsXG4gICAgICAgICAgICBiZWhhdmlvdXI6IFwidGFwXCIsXG4gICAgICAgICAgICBvcmllbnRhdGlvbjogXCJob3Jpem9udGFsXCIsXG4gICAgICAgICAgICBrZXlib2FyZFN1cHBvcnQ6IHRydWUsXG4gICAgICAgICAgICBjc3NQcmVmaXg6IFwibm9VaS1cIixcbiAgICAgICAgICAgIGNzc0NsYXNzZXM6IGNzc0NsYXNzZXMsXG4gICAgICAgICAgICBrZXlib2FyZFBhZ2VNdWx0aXBsaWVyOiA1LFxuICAgICAgICAgICAga2V5Ym9hcmREZWZhdWx0U3RlcDogMTBcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBBcmlhRm9ybWF0IGRlZmF1bHRzIHRvIHJlZ3VsYXIgZm9ybWF0LCBpZiBhbnkuXG4gICAgICAgIGlmIChvcHRpb25zLmZvcm1hdCAmJiAhb3B0aW9ucy5hcmlhRm9ybWF0KSB7XG4gICAgICAgICAgICBvcHRpb25zLmFyaWFGb3JtYXQgPSBvcHRpb25zLmZvcm1hdDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJ1biBhbGwgb3B0aW9ucyB0aHJvdWdoIGEgdGVzdGluZyBtZWNoYW5pc20gdG8gZW5zdXJlIGNvcnJlY3RcbiAgICAgICAgLy8gaW5wdXQuIEl0IHNob3VsZCBiZSBub3RlZCB0aGF0IG9wdGlvbnMgbWlnaHQgZ2V0IG1vZGlmaWVkIHRvXG4gICAgICAgIC8vIGJlIGhhbmRsZWQgcHJvcGVybHkuIEUuZy4gd3JhcHBpbmcgaW50ZWdlcnMgaW4gYXJyYXlzLlxuICAgICAgICBPYmplY3Qua2V5cyh0ZXN0cykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGUgb3B0aW9uIGlzbid0IHNldCwgYnV0IGl0IGlzIHJlcXVpcmVkLCB0aHJvdyBhbiBlcnJvci5cbiAgICAgICAgICAgIGlmICghaXNTZXQob3B0aW9uc1tuYW1lXSkgJiYgZGVmYXVsdHNbbmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmICh0ZXN0c1tuYW1lXS5yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ1wiICsgbmFtZSArIFwiJyBpcyByZXF1aXJlZC5cIik7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRlc3RzW25hbWVdLnQocGFyc2VkLCAhaXNTZXQob3B0aW9uc1tuYW1lXSkgPyBkZWZhdWx0c1tuYW1lXSA6IG9wdGlvbnNbbmFtZV0pO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBGb3J3YXJkIHBpcHMgb3B0aW9uc1xuICAgICAgICBwYXJzZWQucGlwcyA9IG9wdGlvbnMucGlwcztcblxuICAgICAgICAvLyBBbGwgcmVjZW50IGJyb3dzZXJzIGFjY2VwdCB1bnByZWZpeGVkIHRyYW5zZm9ybS5cbiAgICAgICAgLy8gV2UgbmVlZCAtbXMtIGZvciBJRTkgYW5kIC13ZWJraXQtIGZvciBvbGRlciBBbmRyb2lkO1xuICAgICAgICAvLyBBc3N1bWUgdXNlIG9mIC13ZWJraXQtIGlmIHVucHJlZml4ZWQgYW5kIC1tcy0gYXJlIG5vdCBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9dHJhbnNmb3JtczJkXG4gICAgICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG1zUHJlZml4ID0gZC5zdHlsZS5tc1RyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgbm9QcmVmaXggPSBkLnN0eWxlLnRyYW5zZm9ybSAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHBhcnNlZC50cmFuc2Zvcm1SdWxlID0gbm9QcmVmaXggPyBcInRyYW5zZm9ybVwiIDogbXNQcmVmaXggPyBcIm1zVHJhbnNmb3JtXCIgOiBcIndlYmtpdFRyYW5zZm9ybVwiO1xuXG4gICAgICAgIC8vIFBpcHMgZG9uJ3QgbW92ZSwgc28gd2UgY2FuIHBsYWNlIHRoZW0gdXNpbmcgbGVmdC90b3AuXG4gICAgICAgIHZhciBzdHlsZXMgPSBbW1wibGVmdFwiLCBcInRvcFwiXSwgW1wicmlnaHRcIiwgXCJib3R0b21cIl1dO1xuXG4gICAgICAgIHBhcnNlZC5zdHlsZSA9IHN0eWxlc1twYXJzZWQuZGlyXVtwYXJzZWQub3J0XTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkO1xuICAgIH1cblxuICAgIC8vZW5kcmVnaW9uXG5cbiAgICBmdW5jdGlvbiBzY29wZSh0YXJnZXQsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucykge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IGdldEFjdGlvbnMoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lID0gZ2V0U3VwcG9ydHNUb3VjaEFjdGlvbk5vbmUoKTtcbiAgICAgICAgdmFyIHN1cHBvcnRzUGFzc2l2ZSA9IHN1cHBvcnRzVG91Y2hBY3Rpb25Ob25lICYmIGdldFN1cHBvcnRzUGFzc2l2ZSgpO1xuXG4gICAgICAgIC8vIEFsbCB2YXJpYWJsZXMgbG9jYWwgdG8gJ3Njb3BlJyBhcmUgcHJlZml4ZWQgd2l0aCAnc2NvcGVfJ1xuXG4gICAgICAgIC8vIFNsaWRlciBET00gTm9kZXNcbiAgICAgICAgdmFyIHNjb3BlX1RhcmdldCA9IHRhcmdldDtcbiAgICAgICAgdmFyIHNjb3BlX0Jhc2U7XG4gICAgICAgIHZhciBzY29wZV9IYW5kbGVzO1xuICAgICAgICB2YXIgc2NvcGVfQ29ubmVjdHM7XG4gICAgICAgIHZhciBzY29wZV9QaXBzO1xuICAgICAgICB2YXIgc2NvcGVfVG9vbHRpcHM7XG5cbiAgICAgICAgLy8gU2xpZGVyIHN0YXRlIHZhbHVlc1xuICAgICAgICB2YXIgc2NvcGVfU3BlY3RydW0gPSBvcHRpb25zLnNwZWN0cnVtO1xuICAgICAgICB2YXIgc2NvcGVfVmFsdWVzID0gW107XG4gICAgICAgIHZhciBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0hhbmRsZU51bWJlcnMgPSBbXTtcbiAgICAgICAgdmFyIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9IDA7XG4gICAgICAgIHZhciBzY29wZV9FdmVudHMgPSB7fTtcblxuICAgICAgICAvLyBFeHBvc2VkIEFQSVxuICAgICAgICB2YXIgc2NvcGVfU2VsZjtcblxuICAgICAgICAvLyBEb2N1bWVudCBOb2Rlc1xuICAgICAgICB2YXIgc2NvcGVfRG9jdW1lbnQgPSB0YXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0RvY3VtZW50RWxlbWVudCA9IG9wdGlvbnMuZG9jdW1lbnRFbGVtZW50IHx8IHNjb3BlX0RvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHNjb3BlX0JvZHkgPSBzY29wZV9Eb2N1bWVudC5ib2R5O1xuXG4gICAgICAgIC8vIFBpcHMgY29uc3RhbnRzXG4gICAgICAgIHZhciBQSVBTX05PTkUgPSAtMTtcbiAgICAgICAgdmFyIFBJUFNfTk9fVkFMVUUgPSAwO1xuICAgICAgICB2YXIgUElQU19MQVJHRV9WQUxVRSA9IDE7XG4gICAgICAgIHZhciBQSVBTX1NNQUxMX1ZBTFVFID0gMjtcblxuICAgICAgICAvLyBGb3IgaG9yaXpvbnRhbCBzbGlkZXJzIGluIHN0YW5kYXJkIGx0ciBkb2N1bWVudHMsXG4gICAgICAgIC8vIG1ha2UgLm5vVWktb3JpZ2luIG92ZXJmbG93IHRvIHRoZSBsZWZ0IHNvIHRoZSBkb2N1bWVudCBkb2Vzbid0IHNjcm9sbC5cbiAgICAgICAgdmFyIHNjb3BlX0Rpck9mZnNldCA9IHNjb3BlX0RvY3VtZW50LmRpciA9PT0gXCJydGxcIiB8fCBvcHRpb25zLm9ydCA9PT0gMSA/IDAgOiAxMDA7XG5cbiAgICAgICAgLy8gQ3JlYXRlcyBhIG5vZGUsIGFkZHMgaXQgdG8gdGFyZ2V0LCByZXR1cm5zIHRoZSBuZXcgbm9kZS5cbiAgICAgICAgZnVuY3Rpb24gYWRkTm9kZVRvKGFkZFRhcmdldCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICB2YXIgZGl2ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGRpdiwgY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWRkVGFyZ2V0LmFwcGVuZENoaWxkKGRpdik7XG5cbiAgICAgICAgICAgIHJldHVybiBkaXY7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBlbmQgYSBvcmlnaW4gdG8gdGhlIGJhc2VcbiAgICAgICAgZnVuY3Rpb24gYWRkT3JpZ2luKGJhc2UsIGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIG9yaWdpbiA9IGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMub3JpZ2luKTtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBhZGROb2RlVG8ob3JpZ2luLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlKTtcblxuICAgICAgICAgICAgYWRkTm9kZVRvKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvdWNoQXJlYSk7XG5cbiAgICAgICAgICAgIGhhbmRsZS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhbmRsZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5rZXlib2FyZFN1cHBvcnQpIHtcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVE1ML0dsb2JhbF9hdHRyaWJ1dGVzL3RhYmluZGV4XG4gICAgICAgICAgICAgICAgLy8gMCA9IGZvY3VzYWJsZSBhbmQgcmVhY2hhYmxlXG4gICAgICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICBoYW5kbGUuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaGFuZGxlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJzbGlkZXJcIik7XG4gICAgICAgICAgICBoYW5kbGUuc2V0QXR0cmlidXRlKFwiYXJpYS1vcmllbnRhdGlvblwiLCBvcHRpb25zLm9ydCA/IFwidmVydGljYWxcIiA6IFwiaG9yaXpvbnRhbFwiKTtcblxuICAgICAgICAgICAgaWYgKGhhbmRsZU51bWJlciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGhhbmRsZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmhhbmRsZUxvd2VyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFuZGxlTnVtYmVyID09PSBvcHRpb25zLmhhbmRsZXMgLSAxKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoaGFuZGxlLCBvcHRpb25zLmNzc0NsYXNzZXMuaGFuZGxlVXBwZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gb3JpZ2luO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5zZXJ0IG5vZGVzIGZvciBjb25uZWN0IGVsZW1lbnRzXG4gICAgICAgIGZ1bmN0aW9uIGFkZENvbm5lY3QoYmFzZSwgYWRkKSB7XG4gICAgICAgICAgICBpZiAoIWFkZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhiYXNlLCBvcHRpb25zLmNzc0NsYXNzZXMuY29ubmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgaGFuZGxlcyB0byB0aGUgc2xpZGVyIGJhc2UuXG4gICAgICAgIGZ1bmN0aW9uIGFkZEVsZW1lbnRzKGNvbm5lY3RPcHRpb25zLCBiYXNlKSB7XG4gICAgICAgICAgICB2YXIgY29ubmVjdEJhc2UgPSBhZGROb2RlVG8oYmFzZSwgb3B0aW9ucy5jc3NDbGFzc2VzLmNvbm5lY3RzKTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlcyA9IFtdO1xuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMgPSBbXTtcblxuICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMucHVzaChhZGRDb25uZWN0KGNvbm5lY3RCYXNlLCBjb25uZWN0T3B0aW9uc1swXSkpO1xuXG4gICAgICAgICAgICAvLyBbOjo6Ok89PT09Tz09PT1PPT09PV1cbiAgICAgICAgICAgIC8vIGNvbm5lY3RPcHRpb25zID0gWzAsIDEsIDEsIDFdXG5cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3B0aW9ucy5oYW5kbGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBLZWVwIGEgbGlzdCBvZiBhbGwgYWRkZWQgaGFuZGxlcy5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVzLnB1c2goYWRkT3JpZ2luKGJhc2UsIGkpKTtcbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzW2ldID0gaTtcbiAgICAgICAgICAgICAgICBzY29wZV9Db25uZWN0cy5wdXNoKGFkZENvbm5lY3QoY29ubmVjdEJhc2UsIGNvbm5lY3RPcHRpb25zW2kgKyAxXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhIHNpbmdsZSBzbGlkZXIuXG4gICAgICAgIGZ1bmN0aW9uIGFkZFNsaWRlcihhZGRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIEFwcGx5IGNsYXNzZXMgYW5kIGRhdGEgdG8gdGhlIHRhcmdldC5cbiAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcmdldCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpciA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmx0cik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnJ0bCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLm9ydCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzKGFkZFRhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLmhvcml6b250YWwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52ZXJ0aWNhbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0ZXh0RGlyZWN0aW9uID0gZ2V0Q29tcHV0ZWRTdHlsZShhZGRUYXJnZXQpLmRpcmVjdGlvbjtcblxuICAgICAgICAgICAgaWYgKHRleHREaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhhZGRUYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50ZXh0RGlyZWN0aW9uUnRsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3MoYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMudGV4dERpcmVjdGlvbkx0cik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBhZGROb2RlVG8oYWRkVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuYmFzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhZGRUb29sdGlwKGhhbmRsZSwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMudG9vbHRpcHNbaGFuZGxlTnVtYmVyXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vZGVUbyhoYW5kbGUuZmlyc3RDaGlsZCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRvb2x0aXApO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNTbGlkZXJEaXNhYmxlZCgpIHtcbiAgICAgICAgICAgIHJldHVybiBzY29wZV9UYXJnZXQuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEaXNhYmxlIHRoZSBzbGlkZXIgZHJhZ2dpbmcgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICBmdW5jdGlvbiBpc0hhbmRsZURpc2FibGVkKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGhhbmRsZU9yaWdpbiA9IHNjb3BlX0hhbmRsZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHJldHVybiBoYW5kbGVPcmlnaW4uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZW1vdmVUb29sdGlwcygpIHtcbiAgICAgICAgICAgIGlmIChzY29wZV9Ub29sdGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUV2ZW50KFwidXBkYXRlXCIgKyBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMuZm9yRWFjaChmdW5jdGlvbih0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVFbGVtZW50KHRvb2x0aXApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgc2NvcGVfVG9vbHRpcHMgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIHRvb2x0aXBzIG9wdGlvbiBpcyBhIHNob3J0aGFuZCBmb3IgdXNpbmcgdGhlICd1cGRhdGUnIGV2ZW50LlxuICAgICAgICBmdW5jdGlvbiB0b29sdGlwcygpIHtcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzKCk7XG5cbiAgICAgICAgICAgIC8vIFRvb2x0aXBzIGFyZSBhZGRlZCB3aXRoIG9wdGlvbnMudG9vbHRpcHMgaW4gb3JpZ2luYWwgb3JkZXIuXG4gICAgICAgICAgICBzY29wZV9Ub29sdGlwcyA9IHNjb3BlX0hhbmRsZXMubWFwKGFkZFRvb2x0aXApO1xuXG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLnRvb2x0aXBzLCBmdW5jdGlvbih2YWx1ZXMsIGhhbmRsZU51bWJlciwgdW5lbmNvZGVkKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzY29wZV9Ub29sdGlwc1toYW5kbGVOdW1iZXJdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSB2YWx1ZXNbaGFuZGxlTnVtYmVyXTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0gIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkVmFsdWUgPSBvcHRpb25zLnRvb2x0aXBzW2hhbmRsZU51bWJlcl0udG8odW5lbmNvZGVkW2hhbmRsZU51bWJlcl0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHNjb3BlX1Rvb2x0aXBzW2hhbmRsZU51bWJlcl0uaW5uZXJIVE1MID0gZm9ybWF0dGVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFyaWEoKSB7XG4gICAgICAgICAgICByZW1vdmVFdmVudChcInVwZGF0ZVwiICsgSU5URVJOQUxfRVZFTlRfTlMuYXJpYSk7XG4gICAgICAgICAgICBiaW5kRXZlbnQoXCJ1cGRhdGVcIiArIElOVEVSTkFMX0VWRU5UX05TLmFyaWEsIGZ1bmN0aW9uKHZhbHVlcywgaGFuZGxlTnVtYmVyLCB1bmVuY29kZWQsIHRhcCwgcG9zaXRpb25zKSB7XG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIEFyaWEgVmFsdWVzIGZvciBhbGwgaGFuZGxlcywgYXMgYSBjaGFuZ2UgaW4gb25lIGNoYW5nZXMgbWluIGFuZCBtYXggdmFsdWVzIGZvciB0aGUgbmV4dC5cbiAgICAgICAgICAgICAgICBzY29wZV9IYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhhbmRsZSA9IHNjb3BlX0hhbmRsZXNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBtaW4gPSBjaGVja0hhbmRsZVBvc2l0aW9uKHNjb3BlX0xvY2F0aW9ucywgaW5kZXgsIDAsIHRydWUsIHRydWUsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4ID0gY2hlY2tIYW5kbGVQb3NpdGlvbihzY29wZV9Mb2NhdGlvbnMsIGluZGV4LCAxMDAsIHRydWUsIHRydWUsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBwb3NpdGlvbnNbaW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdHRlZCB2YWx1ZSBmb3IgZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IG9wdGlvbnMuYXJpYUZvcm1hdC50byh1bmVuY29kZWRbaW5kZXhdKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBNYXAgdG8gc2xpZGVyIHJhbmdlIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICBtaW4gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWluKS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBtYXggPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobWF4KS50b0ZpeGVkKDEpO1xuICAgICAgICAgICAgICAgICAgICBub3cgPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcobm93KS50b0ZpeGVkKDEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWluXCIsIG1pbik7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbWF4XCIsIG1heCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVlbm93XCIsIG5vdyk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZS5jaGlsZHJlblswXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLXZhbHVldGV4dFwiLCB0ZXh0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0R3JvdXAobW9kZSwgdmFsdWVzLCBzdGVwcGVkKSB7XG4gICAgICAgICAgICAvLyBVc2UgdGhlIHJhbmdlLlxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwicmFuZ2VcIiB8fCBtb2RlID09PSBcInN0ZXBzXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0ueFZhbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG1vZGUgPT09IFwiY291bnRcIikge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMgPCAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogJ3ZhbHVlcycgKD49IDIpIHJlcXVpcmVkIGZvciBtb2RlICdjb3VudCcuXCIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIERpdmlkZSAwIC0gMTAwIGluICdjb3VudCcgcGFydHMuXG4gICAgICAgICAgICAgICAgdmFyIGludGVydmFsID0gdmFsdWVzIC0gMTtcbiAgICAgICAgICAgICAgICB2YXIgc3ByZWFkID0gMTAwIC8gaW50ZXJ2YWw7XG5cbiAgICAgICAgICAgICAgICB2YWx1ZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIC8vIExpc3QgdGhlc2UgcGFydHMgYW5kIGhhdmUgdGhlbSBoYW5kbGVkIGFzICdwb3NpdGlvbnMnLlxuICAgICAgICAgICAgICAgIHdoaWxlIChpbnRlcnZhbC0tKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpbnRlcnZhbF0gPSBpbnRlcnZhbCAqIHNwcmVhZDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaCgxMDApO1xuXG4gICAgICAgICAgICAgICAgbW9kZSA9IFwicG9zaXRpb25zXCI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInBvc2l0aW9uc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gTWFwIGFsbCBwZXJjZW50YWdlcyB0byBvbi1yYW5nZSB2YWx1ZXMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX1NwZWN0cnVtLmZyb21TdGVwcGluZyhzdGVwcGVkID8gc2NvcGVfU3BlY3RydW0uZ2V0U3RlcCh2YWx1ZSkgOiB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChtb2RlID09PSBcInZhbHVlc1wiKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIHZhbHVlIG11c3QgYmUgc3RlcHBlZCwgaXQgbmVlZHMgdG8gYmUgY29udmVydGVkIHRvIGEgcGVyY2VudGFnZSBmaXJzdC5cbiAgICAgICAgICAgICAgICBpZiAoc3RlcHBlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0byBwZXJjZW50YWdlLCBhcHBseSBzdGVwLCByZXR1cm4gdG8gdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAoc2NvcGVfU3BlY3RydW0udG9TdGVwcGluZyh2YWx1ZSkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBjYW4gc2ltcGx5IHVzZSB0aGUgdmFsdWVzLlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZW5lcmF0ZVNwcmVhZChkZW5zaXR5LCBtb2RlLCBncm91cCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gc2FmZUluY3JlbWVudCh2YWx1ZSwgaW5jcmVtZW50KSB7XG4gICAgICAgICAgICAgICAgLy8gQXZvaWQgZmxvYXRpbmcgcG9pbnQgdmFyaWFuY2UgYnkgZHJvcHBpbmcgdGhlIHNtYWxsZXN0IGRlY2ltYWwgcGxhY2VzLlxuICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUgKyBpbmNyZW1lbnQpLnRvRml4ZWQoNykgLyAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaW5kZXhlcyA9IHt9O1xuICAgICAgICAgICAgdmFyIGZpcnN0SW5SYW5nZSA9IHNjb3BlX1NwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB2YXIgbGFzdEluUmFuZ2UgPSBzY29wZV9TcGVjdHJ1bS54VmFsW3Njb3BlX1NwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB2YXIgaWdub3JlRmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBpZ25vcmVMYXN0ID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgcHJldlBjdCA9IDA7XG5cbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIGNvcHkgb2YgdGhlIGdyb3VwLCBzb3J0IGl0IGFuZCBmaWx0ZXIgYXdheSBhbGwgZHVwbGljYXRlcy5cbiAgICAgICAgICAgIGdyb3VwID0gdW5pcXVlKFxuICAgICAgICAgICAgICAgIGdyb3VwLnNsaWNlKCkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHRoZSByYW5nZSBzdGFydHMgd2l0aCB0aGUgZmlyc3QgZWxlbWVudC5cbiAgICAgICAgICAgIGlmIChncm91cFswXSAhPT0gZmlyc3RJblJhbmdlKSB7XG4gICAgICAgICAgICAgICAgZ3JvdXAudW5zaGlmdChmaXJzdEluUmFuZ2UpO1xuICAgICAgICAgICAgICAgIGlnbm9yZUZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTGlrZXdpc2UgZm9yIHRoZSBsYXN0IG9uZS5cbiAgICAgICAgICAgIGlmIChncm91cFtncm91cC5sZW5ndGggLSAxXSAhPT0gbGFzdEluUmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBncm91cC5wdXNoKGxhc3RJblJhbmdlKTtcbiAgICAgICAgICAgICAgICBpZ25vcmVMYXN0ID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ3JvdXAuZm9yRWFjaChmdW5jdGlvbihjdXJyZW50LCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCBzdGVwIGFuZCB0aGUgbG93ZXIgKyB1cHBlciBwb3NpdGlvbnMuXG4gICAgICAgICAgICAgICAgdmFyIHN0ZXA7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIHE7XG4gICAgICAgICAgICAgICAgdmFyIGxvdyA9IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgdmFyIGhpZ2ggPSBncm91cFtpbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIHZhciBuZXdQY3Q7XG4gICAgICAgICAgICAgICAgdmFyIHBjdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIHBjdFBvcztcbiAgICAgICAgICAgICAgICB2YXIgdHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RlcHM7XG4gICAgICAgICAgICAgICAgdmFyIHJlYWxTdGVwcztcbiAgICAgICAgICAgICAgICB2YXIgc3RlcFNpemU7XG4gICAgICAgICAgICAgICAgdmFyIGlzU3RlcHMgPSBtb2RlID09PSBcInN0ZXBzXCI7XG5cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHVzaW5nICdzdGVwcycgbW9kZSwgdXNlIHRoZSBwcm92aWRlZCBzdGVwcy5cbiAgICAgICAgICAgICAgICAvLyBPdGhlcndpc2UsIHdlJ2xsIHN0ZXAgb24gdG8gdGhlIG5leHQgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RlcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCA9IHNjb3BlX1NwZWN0cnVtLnhOdW1TdGVwc1tpbmRleF07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBhICdmdWxsJyBzdGVwLlxuICAgICAgICAgICAgICAgIGlmICghc3RlcCkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gaGlnaCAtIGxvdztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMb3cgY2FuIGJlIDAsIHNvIHRlc3QgZm9yIGZhbHNlLiBJbmRleCAwIGlzIGFscmVhZHkgaGFuZGxlZC5cbiAgICAgICAgICAgICAgICBpZiAobG93ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gSWYgaGlnaCBpcyB1bmRlZmluZWQgd2UgYXJlIGF0IHRoZSBsYXN0IHN1YnJhbmdlLiBNYWtlIHN1cmUgaXQgaXRlcmF0ZXMgb25jZSAoIzEwODgpXG4gICAgICAgICAgICAgICAgaWYgKGhpZ2ggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBoaWdoID0gbG93O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIE1ha2Ugc3VyZSBzdGVwIGlzbid0IDAsIHdoaWNoIHdvdWxkIGNhdXNlIGFuIGluZmluaXRlIGxvb3AgKCM2NTQpXG4gICAgICAgICAgICAgICAgc3RlcCA9IE1hdGgubWF4KHN0ZXAsIDAuMDAwMDAwMSk7XG5cbiAgICAgICAgICAgICAgICAvLyBGaW5kIGFsbCBzdGVwcyBpbiB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkgPSBzYWZlSW5jcmVtZW50KGksIHN0ZXApKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgcGVyY2VudGFnZSB2YWx1ZSBmb3IgdGhlIGN1cnJlbnQgc3RlcCxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FsY3VsYXRlIHRoZSBzaXplIGZvciB0aGUgc3VicmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIG5ld1BjdCA9IHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcoaSk7XG4gICAgICAgICAgICAgICAgICAgIHBjdERpZmZlcmVuY2UgPSBuZXdQY3QgLSBwcmV2UGN0O1xuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBzID0gcGN0RGlmZmVyZW5jZSAvIGRlbnNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHJlYWxTdGVwcyA9IE1hdGgucm91bmQoc3RlcHMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRoaXMgcmF0aW8gcmVwcmVzZW50cyB0aGUgYW1vdW50IG9mIHBlcmNlbnRhZ2Utc3BhY2UgYSBwb2ludCBpbmRpY2F0ZXMuXG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciBhIGRlbnNpdHkgMSB0aGUgcG9pbnRzL3BlcmNlbnRhZ2UgPSAxLiBGb3IgZGVuc2l0eSAyLCB0aGF0IHBlcmNlbnRhZ2UgbmVlZHMgdG8gYmUgcmUtZGl2aWRlZC5cbiAgICAgICAgICAgICAgICAgICAgLy8gUm91bmQgdGhlIHBlcmNlbnRhZ2Ugb2Zmc2V0IHRvIGFuIGV2ZW4gbnVtYmVyLCB0aGVuIGRpdmlkZSBieSB0d29cbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gc3ByZWFkIHRoZSBvZmZzZXQgb24gYm90aCBzaWRlcyBvZiB0aGUgcmFuZ2UuXG4gICAgICAgICAgICAgICAgICAgIHN0ZXBTaXplID0gcGN0RGlmZmVyZW5jZSAvIHJlYWxTdGVwcztcblxuICAgICAgICAgICAgICAgICAgICAvLyBEaXZpZGUgYWxsIHBvaW50cyBldmVubHksIGFkZGluZyB0aGUgY29ycmVjdCBudW1iZXIgdG8gdGhpcyBzdWJyYW5nZS5cbiAgICAgICAgICAgICAgICAgICAgLy8gUnVuIHVwIHRvIDw9IHNvIHRoYXQgMTAwJSBnZXRzIGEgcG9pbnQsIGV2ZW50IGlmIGlnbm9yZUxhc3QgaXMgc2V0LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKHEgPSAxOyBxIDw9IHJlYWxTdGVwczsgcSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmF0aW8gYmV0d2VlbiB0aGUgcm91bmRlZCB2YWx1ZSBhbmQgdGhlIGFjdHVhbCBzaXplIG1pZ2h0IGJlIH4xJSBvZmYuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb3JyZWN0IHRoZSBwZXJjZW50YWdlIG9mZnNldCBieSB0aGUgbnVtYmVyIG9mIHBvaW50c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGVyIHN1YnJhbmdlLiBkZW5zaXR5ID0gMSB3aWxsIHJlc3VsdCBpbiAxMDAgcG9pbnRzIG9uIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZnVsbCByYW5nZSwgMiBmb3IgNTAsIDQgZm9yIDI1LCBldGMuXG4gICAgICAgICAgICAgICAgICAgICAgICBwY3RQb3MgPSBwcmV2UGN0ICsgcSAqIHN0ZXBTaXplO1xuICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXhlc1twY3RQb3MudG9GaXhlZCg1KV0gPSBbc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHBjdFBvcyksIDBdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBwb2ludCB0eXBlLlxuICAgICAgICAgICAgICAgICAgICB0eXBlID0gZ3JvdXAuaW5kZXhPZihpKSA+IC0xID8gUElQU19MQVJHRV9WQUxVRSA6IGlzU3RlcHMgPyBQSVBTX1NNQUxMX1ZBTFVFIDogUElQU19OT19WQUxVRTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBFbmZvcmNlIHRoZSAnaWdub3JlRmlyc3QnIG9wdGlvbiBieSBvdmVyd3JpdGluZyB0aGUgdHlwZSBmb3IgMC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbmRleCAmJiBpZ25vcmVGaXJzdCAmJiBpICE9PSBoaWdoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgPT09IGhpZ2ggJiYgaWdub3JlTGFzdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgdGhlICd0eXBlJyBvZiB0aGlzIHBvaW50LiAwID0gcGxhaW4sIDEgPSByZWFsIHZhbHVlLCAyID0gc3RlcCB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ZXNbbmV3UGN0LnRvRml4ZWQoNSldID0gW2ksIHR5cGVdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBwZXJjZW50YWdlIGNvdW50LlxuICAgICAgICAgICAgICAgICAgICBwcmV2UGN0ID0gbmV3UGN0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5kZXhlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXJGdW5jLCBmb3JtYXR0ZXIpIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gc2NvcGVfRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuICAgICAgICAgICAgdmFyIHZhbHVlU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2l6ZUNsYXNzZXNbUElQU19OT19WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMudmFsdWVOb3JtYWw7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlTGFyZ2U7XG4gICAgICAgICAgICB2YWx1ZVNpemVDbGFzc2VzW1BJUFNfU01BTExfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlU3ViO1xuXG4gICAgICAgICAgICB2YXIgbWFya2VyU2l6ZUNsYXNzZXMgPSBbXTtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTk9fVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlck5vcm1hbDtcbiAgICAgICAgICAgIG1hcmtlclNpemVDbGFzc2VzW1BJUFNfTEFSR0VfVkFMVUVdID0gb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlckxhcmdlO1xuICAgICAgICAgICAgbWFya2VyU2l6ZUNsYXNzZXNbUElQU19TTUFMTF9WQUxVRV0gPSBvcHRpb25zLmNzc0NsYXNzZXMubWFya2VyU3ViO1xuXG4gICAgICAgICAgICB2YXIgdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgPSBbb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlSG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlVmVydGljYWxdO1xuICAgICAgICAgICAgdmFyIG1hcmtlck9yaWVudGF0aW9uQ2xhc3NlcyA9IFtvcHRpb25zLmNzc0NsYXNzZXMubWFya2VySG9yaXpvbnRhbCwgb3B0aW9ucy5jc3NDbGFzc2VzLm1hcmtlclZlcnRpY2FsXTtcblxuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5jc3NDbGFzc2VzLnBpcHMpO1xuICAgICAgICAgICAgYWRkQ2xhc3MoZWxlbWVudCwgb3B0aW9ucy5vcnQgPT09IDAgPyBvcHRpb25zLmNzc0NsYXNzZXMucGlwc0hvcml6b250YWwgOiBvcHRpb25zLmNzc0NsYXNzZXMucGlwc1ZlcnRpY2FsKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q2xhc3Nlcyh0eXBlLCBzb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgYSA9IHNvdXJjZSA9PT0gb3B0aW9ucy5jc3NDbGFzc2VzLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciBvcmllbnRhdGlvbkNsYXNzZXMgPSBhID8gdmFsdWVPcmllbnRhdGlvbkNsYXNzZXMgOiBtYXJrZXJPcmllbnRhdGlvbkNsYXNzZXM7XG4gICAgICAgICAgICAgICAgdmFyIHNpemVDbGFzc2VzID0gYSA/IHZhbHVlU2l6ZUNsYXNzZXMgOiBtYXJrZXJTaXplQ2xhc3NlcztcblxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2UgKyBcIiBcIiArIG9yaWVudGF0aW9uQ2xhc3Nlc1tvcHRpb25zLm9ydF0gKyBcIiBcIiArIHNpemVDbGFzc2VzW3R5cGVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRTcHJlYWQob2Zmc2V0LCB2YWx1ZSwgdHlwZSkge1xuICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBmaWx0ZXIgZnVuY3Rpb24sIGlmIGl0IGlzIHNldC5cbiAgICAgICAgICAgICAgICB0eXBlID0gZmlsdGVyRnVuYyA/IGZpbHRlckZ1bmModmFsdWUsIHR5cGUpIDogdHlwZTtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSBQSVBTX05PTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFkZCBhIG1hcmtlciBmb3IgZXZlcnkgcG9pbnRcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGFkZE5vZGVUbyhlbGVtZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5tYXJrZXIpO1xuICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcblxuICAgICAgICAgICAgICAgIC8vIFZhbHVlcyBhcmUgb25seSBhcHBlbmRlZCBmb3IgcG9pbnRzIG1hcmtlZCAnMScgb3IgJzInLlxuICAgICAgICAgICAgICAgIGlmICh0eXBlID4gUElQU19OT19WQUxVRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlID0gYWRkTm9kZVRvKGVsZW1lbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jbGFzc05hbWUgPSBnZXRDbGFzc2VzKHR5cGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiZGF0YS12YWx1ZVwiLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGVbb3B0aW9ucy5zdHlsZV0gPSBvZmZzZXQgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5pbm5lckhUTUwgPSBmb3JtYXR0ZXIudG8odmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwZW5kIGFsbCBwb2ludHMuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzcHJlYWQpLmZvckVhY2goZnVuY3Rpb24ob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgYWRkU3ByZWFkKG9mZnNldCwgc3ByZWFkW29mZnNldF1bMF0sIHNwcmVhZFtvZmZzZXRdWzFdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJlbW92ZVBpcHMoKSB7XG4gICAgICAgICAgICBpZiAoc2NvcGVfUGlwcykge1xuICAgICAgICAgICAgICAgIHJlbW92ZUVsZW1lbnQoc2NvcGVfUGlwcyk7XG4gICAgICAgICAgICAgICAgc2NvcGVfUGlwcyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwaXBzKGdyaWQpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNjY5XG4gICAgICAgICAgICByZW1vdmVQaXBzKCk7XG5cbiAgICAgICAgICAgIHZhciBtb2RlID0gZ3JpZC5tb2RlO1xuICAgICAgICAgICAgdmFyIGRlbnNpdHkgPSBncmlkLmRlbnNpdHkgfHwgMTtcbiAgICAgICAgICAgIHZhciBmaWx0ZXIgPSBncmlkLmZpbHRlciB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBncmlkLnZhbHVlcyB8fCBmYWxzZTtcbiAgICAgICAgICAgIHZhciBzdGVwcGVkID0gZ3JpZC5zdGVwcGVkIHx8IGZhbHNlO1xuICAgICAgICAgICAgdmFyIGdyb3VwID0gZ2V0R3JvdXAobW9kZSwgdmFsdWVzLCBzdGVwcGVkKTtcbiAgICAgICAgICAgIHZhciBzcHJlYWQgPSBnZW5lcmF0ZVNwcmVhZChkZW5zaXR5LCBtb2RlLCBncm91cCk7XG4gICAgICAgICAgICB2YXIgZm9ybWF0ID0gZ3JpZC5mb3JtYXQgfHwge1xuICAgICAgICAgICAgICAgIHRvOiBNYXRoLnJvdW5kXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzY29wZV9QaXBzID0gc2NvcGVfVGFyZ2V0LmFwcGVuZENoaWxkKGFkZE1hcmtpbmcoc3ByZWFkLCBmaWx0ZXIsIGZvcm1hdCkpO1xuXG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfUGlwcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3J0aGFuZCBmb3IgYmFzZSBkaW1lbnNpb25zLlxuICAgICAgICBmdW5jdGlvbiBiYXNlU2l6ZSgpIHtcbiAgICAgICAgICAgIHZhciByZWN0ID0gc2NvcGVfQmFzZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgIHZhciBhbHQgPSBcIm9mZnNldFwiICsgW1wiV2lkdGhcIiwgXCJIZWlnaHRcIl1bb3B0aW9ucy5vcnRdO1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMub3J0ID09PSAwID8gcmVjdC53aWR0aCB8fCBzY29wZV9CYXNlW2FsdF0gOiByZWN0LmhlaWdodCB8fCBzY29wZV9CYXNlW2FsdF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGVyIGZvciBhdHRhY2hpbmcgZXZlbnRzIHRyb3VnaCBhIHByb3h5LlxuICAgICAgICBmdW5jdGlvbiBhdHRhY2hFdmVudChldmVudHMsIGVsZW1lbnQsIGNhbGxiYWNrLCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBUaGlzIGZ1bmN0aW9uIGNhbiBiZSB1c2VkIHRvICdmaWx0ZXInIGV2ZW50cyB0byB0aGUgc2xpZGVyLlxuICAgICAgICAgICAgLy8gZWxlbWVudCBpcyBhIG5vZGUsIG5vdCBhIG5vZGVMaXN0XG5cbiAgICAgICAgICAgIHZhciBtZXRob2QgPSBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICAgICAgZSA9IGZpeEV2ZW50KGUsIGRhdGEucGFnZU9mZnNldCwgZGF0YS50YXJnZXQgfHwgZWxlbWVudCk7XG5cbiAgICAgICAgICAgICAgICAvLyBmaXhFdmVudCByZXR1cm5zIGZhbHNlIGlmIHRoaXMgZXZlbnQgaGFzIGEgZGlmZmVyZW50IHRhcmdldFxuICAgICAgICAgICAgICAgIC8vIHdoZW4gaGFuZGxpbmcgKG11bHRpLSkgdG91Y2ggZXZlbnRzO1xuICAgICAgICAgICAgICAgIGlmICghZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gZG9Ob3RSZWplY3QgaXMgcGFzc2VkIGJ5IGFsbCBlbmQgZXZlbnRzIHRvIG1ha2Ugc3VyZSByZWxlYXNlZCB0b3VjaGVzXG4gICAgICAgICAgICAgICAgLy8gYXJlIG5vdCByZWplY3RlZCwgbGVhdmluZyB0aGUgc2xpZGVyIFwic3R1Y2tcIiB0byB0aGUgY3Vyc29yO1xuICAgICAgICAgICAgICAgIGlmIChpc1NsaWRlckRpc2FibGVkKCkgJiYgIWRhdGEuZG9Ob3RSZWplY3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgYW4gYWN0aXZlICd0YXAnIHRyYW5zaXRpb24gaXMgdGFraW5nIHBsYWNlLlxuICAgICAgICAgICAgICAgIGlmIChoYXNDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXApICYmICFkYXRhLmRvTm90UmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50cyA9PT0gYWN0aW9ucy5zdGFydCAmJiBlLmJ1dHRvbnMgIT09IHVuZGVmaW5lZCAmJiBlLmJ1dHRvbnMgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBJZ25vcmUgcmlnaHQgb3IgbWlkZGxlIGNsaWNrcyBvbiBzdGFydCAjNDU0XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaG92ZXIgJiYgZS5idXR0b25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyAnc3VwcG9ydHNQYXNzaXZlJyBpcyBvbmx5IHRydWUgaWYgYSBicm93c2VyIGFsc28gc3VwcG9ydHMgdG91Y2gtYWN0aW9uOiBub25lIGluIENTUy5cbiAgICAgICAgICAgICAgICAvLyBpT1Mgc2FmYXJpIGRvZXMgbm90LCBzbyBpdCBkb2Vzbid0IGdldCB0byBiZW5lZml0IGZyb20gcGFzc2l2ZSBzY3JvbGxpbmcuIGlPUyBkb2VzIHN1cHBvcnRcbiAgICAgICAgICAgICAgICAvLyB0b3VjaC1hY3Rpb246IG1hbmlwdWxhdGlvbiwgYnV0IHRoYXQgYWxsb3dzIHBhbm5pbmcsIHdoaWNoIGJyZWFrc1xuICAgICAgICAgICAgICAgIC8vIHNsaWRlcnMgYWZ0ZXIgem9vbWluZy9vbiBub24tcmVzcG9uc2l2ZSBwYWdlcy5cbiAgICAgICAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzMxMTJcbiAgICAgICAgICAgICAgICBpZiAoIXN1cHBvcnRzUGFzc2l2ZSkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZS5jYWxjUG9pbnQgPSBlLnBvaW50c1tvcHRpb25zLm9ydF07XG5cbiAgICAgICAgICAgICAgICAvLyBDYWxsIHRoZSBldmVudCBoYW5kbGVyIHdpdGggdGhlIGV2ZW50IFsgYW5kIGFkZGl0aW9uYWwgZGF0YSBdLlxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGUsIGRhdGEpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIG1ldGhvZHMgPSBbXTtcblxuICAgICAgICAgICAgLy8gQmluZCBhIGNsb3N1cmUgb24gdGhlIHRhcmdldCBmb3IgZXZlcnkgZXZlbnQgdHlwZS5cbiAgICAgICAgICAgIGV2ZW50cy5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihldmVudE5hbWUpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBtZXRob2QsIHN1cHBvcnRzUGFzc2l2ZSA/IHsgcGFzc2l2ZTogdHJ1ZSB9IDogZmFsc2UpO1xuICAgICAgICAgICAgICAgIG1ldGhvZHMucHVzaChbZXZlbnROYW1lLCBtZXRob2RdKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFByb3ZpZGUgYSBjbGVhbiBldmVudCB3aXRoIHN0YW5kYXJkaXplZCBvZmZzZXQgdmFsdWVzLlxuICAgICAgICBmdW5jdGlvbiBmaXhFdmVudChlLCBwYWdlT2Zmc2V0LCBldmVudFRhcmdldCkge1xuICAgICAgICAgICAgLy8gRmlsdGVyIHRoZSBldmVudCB0byByZWdpc3RlciB0aGUgdHlwZSwgd2hpY2ggY2FuIGJlXG4gICAgICAgICAgICAvLyB0b3VjaCwgbW91c2Ugb3IgcG9pbnRlci4gT2Zmc2V0IGNoYW5nZXMgbmVlZCB0byBiZVxuICAgICAgICAgICAgLy8gbWFkZSBvbiBhbiBldmVudCBzcGVjaWZpYyBiYXNpcy5cbiAgICAgICAgICAgIHZhciB0b3VjaCA9IGUudHlwZS5pbmRleE9mKFwidG91Y2hcIikgPT09IDA7XG4gICAgICAgICAgICB2YXIgbW91c2UgPSBlLnR5cGUuaW5kZXhPZihcIm1vdXNlXCIpID09PSAwO1xuICAgICAgICAgICAgdmFyIHBvaW50ZXIgPSBlLnR5cGUuaW5kZXhPZihcInBvaW50ZXJcIikgPT09IDA7XG5cbiAgICAgICAgICAgIHZhciB4O1xuICAgICAgICAgICAgdmFyIHk7XG5cbiAgICAgICAgICAgIC8vIElFMTAgaW1wbGVtZW50ZWQgcG9pbnRlciBldmVudHMgd2l0aCBhIHByZWZpeDtcbiAgICAgICAgICAgIGlmIChlLnR5cGUuaW5kZXhPZihcIk1TUG9pbnRlclwiKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHBvaW50ZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBFcnJvbmVvdXMgZXZlbnRzIHNlZW0gdG8gYmUgcGFzc2VkIGluIG9jY2FzaW9uYWxseSBvbiBpT1MvaVBhZE9TIGFmdGVyIHVzZXIgZmluaXNoZXMgaW50ZXJhY3Rpbmcgd2l0aFxuICAgICAgICAgICAgLy8gdGhlIHNsaWRlci4gVGhleSBhcHBlYXIgdG8gYmUgb2YgdHlwZSBNb3VzZUV2ZW50LCB5ZXQgdGhleSBkb24ndCBoYXZlIHVzdWFsIHByb3BlcnRpZXMgc2V0LiBJZ25vcmVcbiAgICAgICAgICAgIC8vIGV2ZW50cyB0aGF0IGhhdmUgbm8gdG91Y2hlcyBvciBidXR0b25zIGFzc29jaWF0ZWQgd2l0aCB0aGVtLiAoIzEwNTcsICMxMDc5LCAjMTA5NSlcbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwibW91c2Vkb3duXCIgJiYgIWUuYnV0dG9ucyAmJiAhZS50b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgb25seSB0aGluZyBvbmUgaGFuZGxlIHNob3VsZCBiZSBjb25jZXJuZWQgYWJvdXQgaXMgdGhlIHRvdWNoZXMgdGhhdCBvcmlnaW5hdGVkIG9uIHRvcCBvZiBpdC5cbiAgICAgICAgICAgIGlmICh0b3VjaCkge1xuICAgICAgICAgICAgICAgIC8vIFJldHVybnMgdHJ1ZSBpZiBhIHRvdWNoIG9yaWdpbmF0ZWQgb24gdGhlIHRhcmdldC5cbiAgICAgICAgICAgICAgICB2YXIgaXNUb3VjaE9uVGFyZ2V0ID0gZnVuY3Rpb24oY2hlY2tUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tUb3VjaC50YXJnZXQgPT09IGV2ZW50VGFyZ2V0IHx8XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudFRhcmdldC5jb250YWlucyhjaGVja1RvdWNoLnRhcmdldCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChjaGVja1RvdWNoLnRhcmdldC5zaGFkb3dSb290ICYmIGNoZWNrVG91Y2gudGFyZ2V0LnNoYWRvd1Jvb3QuY29udGFpbnMoZXZlbnRUYXJnZXQpKVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvLyBJbiB0aGUgY2FzZSBvZiB0b3VjaHN0YXJ0IGV2ZW50cywgd2UgbmVlZCB0byBtYWtlIHN1cmUgdGhlcmUgaXMgc3RpbGwgbm8gbW9yZSB0aGFuIG9uZVxuICAgICAgICAgICAgICAgIC8vIHRvdWNoIG9uIHRoZSB0YXJnZXQgc28gd2UgbG9vayBhbW9uZ3N0IGFsbCB0b3VjaGVzLlxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT09IFwidG91Y2hzdGFydFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRUb3VjaGVzID0gQXJyYXkucHJvdG90eXBlLmZpbHRlci5jYWxsKGUudG91Y2hlcywgaXNUb3VjaE9uVGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBEbyBub3Qgc3VwcG9ydCBtb3JlIHRoYW4gb25lIHRvdWNoIHBlciBoYW5kbGUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRUb3VjaGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHggPSB0YXJnZXRUb3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2hlc1swXS5wYWdlWTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBJbiB0aGUgb3RoZXIgY2FzZXMsIGZpbmQgb24gY2hhbmdlZFRvdWNoZXMgaXMgZW5vdWdoLlxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0VG91Y2ggPSBBcnJheS5wcm90b3R5cGUuZmluZC5jYWxsKGUuY2hhbmdlZFRvdWNoZXMsIGlzVG91Y2hPblRhcmdldCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FuY2VsIGlmIHRoZSB0YXJnZXQgdG91Y2ggaGFzIG5vdCBtb3ZlZC5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YXJnZXRUb3VjaCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRhcmdldFRvdWNoLnBhZ2VYO1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwYWdlT2Zmc2V0ID0gcGFnZU9mZnNldCB8fCBnZXRQYWdlT2Zmc2V0KHNjb3BlX0RvY3VtZW50KTtcblxuICAgICAgICAgICAgaWYgKG1vdXNlIHx8IHBvaW50ZXIpIHtcbiAgICAgICAgICAgICAgICB4ID0gZS5jbGllbnRYICsgcGFnZU9mZnNldC54O1xuICAgICAgICAgICAgICAgIHkgPSBlLmNsaWVudFkgKyBwYWdlT2Zmc2V0Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGUucGFnZU9mZnNldCA9IHBhZ2VPZmZzZXQ7XG4gICAgICAgICAgICBlLnBvaW50cyA9IFt4LCB5XTtcbiAgICAgICAgICAgIGUuY3Vyc29yID0gbW91c2UgfHwgcG9pbnRlcjsgLy8gRml4ICM0MzVcblxuICAgICAgICAgICAgcmV0dXJuIGU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUcmFuc2xhdGUgYSBjb29yZGluYXRlIGluIHRoZSBkb2N1bWVudCB0byBhIHBlcmNlbnRhZ2Ugb24gdGhlIHNsaWRlclxuICAgICAgICBmdW5jdGlvbiBjYWxjUG9pbnRUb1BlcmNlbnRhZ2UoY2FsY1BvaW50KSB7XG4gICAgICAgICAgICB2YXIgbG9jYXRpb24gPSBjYWxjUG9pbnQgLSBvZmZzZXQoc2NvcGVfQmFzZSwgb3B0aW9ucy5vcnQpO1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gKGxvY2F0aW9uICogMTAwKSAvIGJhc2VTaXplKCk7XG5cbiAgICAgICAgICAgIC8vIENsYW1wIHByb3Bvc2FsIGJldHdlZW4gMCUgYW5kIDEwMCVcbiAgICAgICAgICAgIC8vIE91dC1vZi1ib3VuZCBjb29yZGluYXRlcyBtYXkgb2NjdXIgd2hlbiAubm9VaS1iYXNlIHBzZXVkby1lbGVtZW50c1xuICAgICAgICAgICAgLy8gYXJlIHVzZWQgKGUuZy4gY29udGFpbmVkIGhhbmRsZXMgZmVhdHVyZSlcbiAgICAgICAgICAgIHByb3Bvc2FsID0gbGltaXQocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kaXIgPyAxMDAgLSBwcm9wb3NhbCA6IHByb3Bvc2FsO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRmluZCBoYW5kbGUgY2xvc2VzdCB0byBhIGNlcnRhaW4gcGVyY2VudGFnZSBvbiB0aGUgc2xpZGVyXG4gICAgICAgIGZ1bmN0aW9uIGdldENsb3Nlc3RIYW5kbGUoY2xpY2tlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB2YXIgc21hbGxlc3REaWZmZXJlbmNlID0gMTAwO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGZhbHNlO1xuXG4gICAgICAgICAgICBzY29wZV9IYW5kbGVzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlLCBpbmRleCkge1xuICAgICAgICAgICAgICAgIC8vIERpc2FibGVkIGhhbmRsZXMgYXJlIGlnbm9yZWRcbiAgICAgICAgICAgICAgICBpZiAoaXNIYW5kbGVEaXNhYmxlZChpbmRleCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVQb3NpdGlvbiA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZSA9IE1hdGguYWJzKGhhbmRsZVBvc2l0aW9uIC0gY2xpY2tlZFBvc2l0aW9uKTtcblxuICAgICAgICAgICAgICAgIC8vIEluaXRpYWwgc3RhdGVcbiAgICAgICAgICAgICAgICB2YXIgY2xpY2tBdEVkZ2UgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPT09IDEwMCAmJiBzbWFsbGVzdERpZmZlcmVuY2UgPT09IDEwMDtcblxuICAgICAgICAgICAgICAgIC8vIERpZmZlcmVuY2Ugd2l0aCB0aGlzIGhhbmRsZSBpcyBzbWFsbGVyIHRoYW4gdGhlIHByZXZpb3VzbHkgY2hlY2tlZCBoYW5kbGVcbiAgICAgICAgICAgICAgICB2YXIgaXNDbG9zZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPCBzbWFsbGVzdERpZmZlcmVuY2U7XG4gICAgICAgICAgICAgICAgdmFyIGlzQ2xvc2VyQWZ0ZXIgPSBkaWZmZXJlbmNlV2l0aFRoaXNIYW5kbGUgPD0gc21hbGxlc3REaWZmZXJlbmNlICYmIGNsaWNrZWRQb3NpdGlvbiA+IGhhbmRsZVBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzQ2xvc2VyIHx8IGlzQ2xvc2VyQWZ0ZXIgfHwgY2xpY2tBdEVkZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgIHNtYWxsZXN0RGlmZmVyZW5jZSA9IGRpZmZlcmVuY2VXaXRoVGhpc0hhbmRsZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZU51bWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmUgJ2VuZCcgd2hlbiBhIG1vdXNlIG9yIHBlbiBsZWF2ZXMgdGhlIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBkb2N1bWVudExlYXZlKGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQudHlwZSA9PT0gXCJtb3VzZW91dFwiICYmIGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gXCJIVE1MXCIgJiYgZXZlbnQucmVsYXRlZFRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV2ZW50RW5kKGV2ZW50LCBkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhhbmRsZSBtb3ZlbWVudCBvbiBkb2N1bWVudCBmb3IgaGFuZGxlIGFuZCByYW5nZSBkcmFnLlxuICAgICAgICBmdW5jdGlvbiBldmVudE1vdmUoZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgICAgIC8vIEZpeCAjNDk4XG4gICAgICAgICAgICAvLyBDaGVjayB2YWx1ZSBvZiAuYnV0dG9ucyBpbiAnc3RhcnQnIHRvIHdvcmsgYXJvdW5kIGEgYnVnIGluIElFMTAgbW9iaWxlIChkYXRhLmJ1dHRvbnNQcm9wZXJ0eSkuXG4gICAgICAgICAgICAvLyBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzkyNzAwNS9tb2JpbGUtaWUxMC13aW5kb3dzLXBob25lLWJ1dHRvbnMtcHJvcGVydHktb2YtcG9pbnRlcm1vdmUtZXZlbnQtYWx3YXlzLXplcm9cbiAgICAgICAgICAgIC8vIElFOSBoYXMgLmJ1dHRvbnMgYW5kIC53aGljaCB6ZXJvIG9uIG1vdXNlbW92ZS5cbiAgICAgICAgICAgIC8vIEZpcmVmb3ggYnJlYWtzIHRoZSBzcGVjIE1ETiBkZWZpbmVzLlxuICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoXCJNU0lFIDlcIikgPT09IC0xICYmIGV2ZW50LmJ1dHRvbnMgPT09IDAgJiYgZGF0YS5idXR0b25zUHJvcGVydHkgIT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRFbmQoZXZlbnQsIGRhdGEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBDaGVjayBpZiB3ZSBhcmUgbW92aW5nIHVwIG9yIGRvd25cbiAgICAgICAgICAgIHZhciBtb3ZlbWVudCA9IChvcHRpb25zLmRpciA/IC0xIDogMSkgKiAoZXZlbnQuY2FsY1BvaW50IC0gZGF0YS5zdGFydENhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIG1vdmVtZW50IGludG8gYSBwZXJjZW50YWdlIG9mIHRoZSBzbGlkZXIgd2lkdGgvaGVpZ2h0XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWwgPSAobW92ZW1lbnQgKiAxMDApIC8gZGF0YS5iYXNlU2l6ZTtcblxuICAgICAgICAgICAgbW92ZUhhbmRsZXMobW92ZW1lbnQgPiAwLCBwcm9wb3NhbCwgZGF0YS5sb2NhdGlvbnMsIGRhdGEuaGFuZGxlTnVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBVbmJpbmQgbW92ZSBldmVudHMgb24gZG9jdW1lbnQsIGNhbGwgY2FsbGJhY2tzLlxuICAgICAgICBmdW5jdGlvbiBldmVudEVuZChldmVudCwgZGF0YSkge1xuICAgICAgICAgICAgLy8gVGhlIGhhbmRsZSBpcyBubyBsb25nZXIgYWN0aXZlLCBzbyByZW1vdmUgdGhlIGNsYXNzLlxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3MoZGF0YS5oYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgICAgIHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCAtPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVbmJpbmQgdGhlIG1vdmUgYW5kIGVuZCBldmVudHMsIHdoaWNoIGFyZSBhZGRlZCBvbiAnc3RhcnQnLlxuICAgICAgICAgICAgZGF0YS5saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbihjKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfRG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoY1swXSwgY1sxXSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHNjb3BlX0FjdGl2ZUhhbmRsZXNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBkcmFnZ2luZyBjbGFzcy5cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnKTtcbiAgICAgICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBjdXJzb3Igc3R5bGVzIGFuZCB0ZXh0LXNlbGVjdGlvbiBldmVudHMgYm91bmQgdG8gdGhlIGJvZHkuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LmN1cnNvcikge1xuICAgICAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0JvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNlbGVjdHN0YXJ0XCIsIHByZXZlbnREZWZhdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRhdGEuaGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcImVuZFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCaW5kIG1vdmUgZXZlbnRzIG9uIGRvY3VtZW50LlxuICAgICAgICBmdW5jdGlvbiBldmVudFN0YXJ0KGV2ZW50LCBkYXRhKSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZXZlbnQgaWYgYW55IGhhbmRsZSBpcyBkaXNhYmxlZFxuICAgICAgICAgICAgaWYgKGRhdGEuaGFuZGxlTnVtYmVycy5zb21lKGlzSGFuZGxlRGlzYWJsZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaGFuZGxlO1xuXG4gICAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVOdW1iZXJzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIHZhciBoYW5kbGVPcmlnaW4gPSBzY29wZV9IYW5kbGVzW2RhdGEuaGFuZGxlTnVtYmVyc1swXV07XG5cbiAgICAgICAgICAgICAgICBoYW5kbGUgPSBoYW5kbGVPcmlnaW4uY2hpbGRyZW5bMF07XG4gICAgICAgICAgICAgICAgc2NvcGVfQWN0aXZlSGFuZGxlc0NvdW50ICs9IDE7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSBoYW5kbGUgYXMgJ2FjdGl2ZScgc28gaXQgY2FuIGJlIHN0eWxlZC5cbiAgICAgICAgICAgICAgICBhZGRDbGFzcyhoYW5kbGUsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5hY3RpdmUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBIGRyYWcgc2hvdWxkIG5ldmVyIHByb3BhZ2F0ZSB1cCB0byB0aGUgJ3RhcCcgZXZlbnQuXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgLy8gUmVjb3JkIHRoZSBldmVudCBsaXN0ZW5lcnMuXG4gICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgbW92ZSBhbmQgZW5kIGV2ZW50cy5cbiAgICAgICAgICAgIHZhciBtb3ZlRXZlbnQgPSBhdHRhY2hFdmVudChhY3Rpb25zLm1vdmUsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRNb3ZlLCB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGV2ZW50IHRhcmdldCBoYXMgY2hhbmdlZCBzbyB3ZSBuZWVkIHRvIHByb3BhZ2F0ZSB0aGUgb3JpZ2luYWwgb25lIHNvIHRoYXQgd2Uga2VlcFxuICAgICAgICAgICAgICAgIC8vIHJlbHlpbmcgb24gaXQgdG8gZXh0cmFjdCB0YXJnZXQgdG91Y2hlcy5cbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBzdGFydENhbGNQb2ludDogZXZlbnQuY2FsY1BvaW50LFxuICAgICAgICAgICAgICAgIGJhc2VTaXplOiBiYXNlU2l6ZSgpLFxuICAgICAgICAgICAgICAgIHBhZ2VPZmZzZXQ6IGV2ZW50LnBhZ2VPZmZzZXQsXG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVyczogZGF0YS5oYW5kbGVOdW1iZXJzLFxuICAgICAgICAgICAgICAgIGJ1dHRvbnNQcm9wZXJ0eTogZXZlbnQuYnV0dG9ucyxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnM6IHNjb3BlX0xvY2F0aW9ucy5zbGljZSgpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIGVuZEV2ZW50ID0gYXR0YWNoRXZlbnQoYWN0aW9ucy5lbmQsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZXZlbnRFbmQsIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGV2ZW50LnRhcmdldCxcbiAgICAgICAgICAgICAgICBoYW5kbGU6IGhhbmRsZSxcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICBkb05vdFJlamVjdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBkYXRhLmhhbmRsZU51bWJlcnNcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB2YXIgb3V0RXZlbnQgPSBhdHRhY2hFdmVudChcIm1vdXNlb3V0XCIsIHNjb3BlX0RvY3VtZW50RWxlbWVudCwgZG9jdW1lbnRMZWF2ZSwge1xuICAgICAgICAgICAgICAgIHRhcmdldDogZXZlbnQudGFyZ2V0LFxuICAgICAgICAgICAgICAgIGhhbmRsZTogaGFuZGxlLFxuICAgICAgICAgICAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGRvTm90UmVqZWN0OiB0cnVlLFxuICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IGRhdGEuaGFuZGxlTnVtYmVyc1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdlIHdhbnQgdG8gbWFrZSBzdXJlIHdlIHB1c2hlZCB0aGUgbGlzdGVuZXJzIGluIHRoZSBsaXN0ZW5lciBsaXN0IHJhdGhlciB0aGFuIGNyZWF0aW5nXG4gICAgICAgICAgICAvLyBhIG5ldyBvbmUgYXMgaXQgaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuICAgICAgICAgICAgbGlzdGVuZXJzLnB1c2guYXBwbHkobGlzdGVuZXJzLCBtb3ZlRXZlbnQuY29uY2F0KGVuZEV2ZW50LCBvdXRFdmVudCkpO1xuXG4gICAgICAgICAgICAvLyBUZXh0IHNlbGVjdGlvbiBpc24ndCBhbiBpc3N1ZSBvbiB0b3VjaCBkZXZpY2VzLFxuICAgICAgICAgICAgLy8gc28gYWRkaW5nIGN1cnNvciBzdHlsZXMgY2FuIGJlIHNraXBwZWQuXG4gICAgICAgICAgICBpZiAoZXZlbnQuY3Vyc29yKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0aGUgJ0knIGN1cnNvciBhbmQgZXh0ZW5kIHRoZSByYW5nZS1kcmFnIGN1cnNvci5cbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LnN0eWxlLmN1cnNvciA9IGdldENvbXB1dGVkU3R5bGUoZXZlbnQudGFyZ2V0KS5jdXJzb3I7XG5cbiAgICAgICAgICAgICAgICAvLyBNYXJrIHRoZSB0YXJnZXQgd2l0aCBhIGRyYWdnaW5nIHN0YXRlLlxuICAgICAgICAgICAgICAgIGlmIChzY29wZV9IYW5kbGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkQ2xhc3Moc2NvcGVfVGFyZ2V0LCBvcHRpb25zLmNzc0NsYXNzZXMuZHJhZyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gUHJldmVudCB0ZXh0IHNlbGVjdGlvbiB3aGVuIGRyYWdnaW5nIHRoZSBoYW5kbGVzLlxuICAgICAgICAgICAgICAgIC8vIEluIG5vVWlTbGlkZXIgPD0gOS4yLjAsIHRoaXMgd2FzIGhhbmRsZWQgYnkgY2FsbGluZyBwcmV2ZW50RGVmYXVsdCBvbiBtb3VzZS90b3VjaCBzdGFydC9tb3ZlLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIGlzIHNjcm9sbCBibG9ja2luZy4gVGhlIHNlbGVjdHN0YXJ0IGV2ZW50IGlzIHN1cHBvcnRlZCBieSBGaXJlRm94IHN0YXJ0aW5nIGZyb20gdmVyc2lvbiA1MixcbiAgICAgICAgICAgICAgICAvLyBtZWFuaW5nIHRoZSBvbmx5IGhvbGRvdXQgaXMgaU9TIFNhZmFyaS4gVGhpcyBkb2Vzbid0IG1hdHRlcjogdGV4dCBzZWxlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIHRoZXJlLlxuICAgICAgICAgICAgICAgIC8vIFRoZSAnY3Vyc29yJyBmbGFnIGlzIGZhbHNlLlxuICAgICAgICAgICAgICAgIC8vIFNlZTogaHR0cDovL2Nhbml1c2UuY29tLyNzZWFyY2g9c2VsZWN0c3RhcnRcbiAgICAgICAgICAgICAgICBzY29wZV9Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoXCJzZWxlY3RzdGFydFwiLCBwcmV2ZW50RGVmYXVsdCwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRhLmhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzdGFydFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlIGNsb3Nlc3QgaGFuZGxlIHRvIHRhcHBlZCBsb2NhdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRUYXAoZXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFRoZSB0YXAgZXZlbnQgc2hvdWxkbid0IHByb3BhZ2F0ZSB1cFxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHZhciBwcm9wb3NhbCA9IGNhbGNQb2ludFRvUGVyY2VudGFnZShldmVudC5jYWxjUG9pbnQpO1xuICAgICAgICAgICAgdmFyIGhhbmRsZU51bWJlciA9IGdldENsb3Nlc3RIYW5kbGUocHJvcG9zYWwpO1xuXG4gICAgICAgICAgICAvLyBUYWNrbGUgdGhlIGNhc2UgdGhhdCBhbGwgaGFuZGxlcyBhcmUgJ2Rpc2FibGVkJy5cbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGbGFnIHRoZSBzbGlkZXIgYXMgaXQgaXMgbm93IGluIGEgdHJhbnNpdGlvbmFsIHN0YXRlLlxuICAgICAgICAgICAgLy8gVHJhbnNpdGlvbiB0YWtlcyBhIGNvbmZpZ3VyYWJsZSBhbW91bnQgb2YgbXMgKGRlZmF1bHQgMzAwKS4gUmUtZW5hYmxlIHRoZSBzbGlkZXIgYWZ0ZXIgdGhhdC5cbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5ldmVudHMuc25hcCkge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yKHNjb3BlX1RhcmdldCwgb3B0aW9ucy5jc3NDbGFzc2VzLnRhcCwgb3B0aW9ucy5hbmltYXRpb25EdXJhdGlvbik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHByb3Bvc2FsLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgc2V0WmluZGV4KCk7XG5cbiAgICAgICAgICAgIGZpcmVFdmVudChcInNsaWRlXCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyLCB0cnVlKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcImNoYW5nZVwiLCBoYW5kbGVOdW1iZXIsIHRydWUpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlciwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLmV2ZW50cy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRTdGFydChldmVudCwgeyBoYW5kbGVOdW1iZXJzOiBbaGFuZGxlTnVtYmVyXSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpcmVzIGEgJ2hvdmVyJyBldmVudCBmb3IgYSBob3ZlcmVkIG1vdXNlL3BlbiBwb3NpdGlvbi5cbiAgICAgICAgZnVuY3Rpb24gZXZlbnRIb3ZlcihldmVudCkge1xuICAgICAgICAgICAgdmFyIHByb3Bvc2FsID0gY2FsY1BvaW50VG9QZXJjZW50YWdlKGV2ZW50LmNhbGNQb2ludCk7XG5cbiAgICAgICAgICAgIHZhciB0byA9IHNjb3BlX1NwZWN0cnVtLmdldFN0ZXAocHJvcG9zYWwpO1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gc2NvcGVfU3BlY3RydW0uZnJvbVN0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMoc2NvcGVfRXZlbnRzKS5mb3JFYWNoKGZ1bmN0aW9uKHRhcmdldEV2ZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKFwiaG92ZXJcIiA9PT0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChzY29wZV9TZWxmLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBrZXlkb3duIG9uIGZvY3VzZWQgaGFuZGxlc1xuICAgICAgICAvLyBEb24ndCBtb3ZlIHRoZSBkb2N1bWVudCB3aGVuIHByZXNzaW5nIGFycm93IGtleXMgb24gZm9jdXNlZCBoYW5kbGVzXG4gICAgICAgIGZ1bmN0aW9uIGV2ZW50S2V5ZG93bihldmVudCwgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICBpZiAoaXNTbGlkZXJEaXNhYmxlZCgpIHx8IGlzSGFuZGxlRGlzYWJsZWQoaGFuZGxlTnVtYmVyKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGhvcml6b250YWxLZXlzID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCJdO1xuICAgICAgICAgICAgdmFyIHZlcnRpY2FsS2V5cyA9IFtcIkRvd25cIiwgXCJVcFwiXTtcbiAgICAgICAgICAgIHZhciBsYXJnZVN0ZXBLZXlzID0gW1wiUGFnZURvd25cIiwgXCJQYWdlVXBcIl07XG4gICAgICAgICAgICB2YXIgZWRnZUtleXMgPSBbXCJIb21lXCIsIFwiRW5kXCJdO1xuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kaXIgJiYgIW9wdGlvbnMub3J0KSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYW4gcmlnaHQtdG8tbGVmdCBzbGlkZXIsIHRoZSBsZWZ0IGFuZCByaWdodCBrZXlzIGFjdCBpbnZlcnRlZFxuICAgICAgICAgICAgICAgIGhvcml6b250YWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5vcnQgJiYgIW9wdGlvbnMuZGlyKSB7XG4gICAgICAgICAgICAgICAgLy8gT24gYSB0b3AtdG8tYm90dG9tIHNsaWRlciwgdGhlIHVwIGFuZCBkb3duIGtleXMgYWN0IGludmVydGVkXG4gICAgICAgICAgICAgICAgdmVydGljYWxLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgICAgICBsYXJnZVN0ZXBLZXlzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gU3RyaXAgXCJBcnJvd1wiIGZvciBJRSBjb21wYXRpYmlsaXR5LiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudC9rZXlcbiAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC5rZXkucmVwbGFjZShcIkFycm93XCIsIFwiXCIpO1xuXG4gICAgICAgICAgICB2YXIgaXNMYXJnZURvd24gPSBrZXkgPT09IGxhcmdlU3RlcEtleXNbMF07XG4gICAgICAgICAgICB2YXIgaXNMYXJnZVVwID0ga2V5ID09PSBsYXJnZVN0ZXBLZXlzWzFdO1xuICAgICAgICAgICAgdmFyIGlzRG93biA9IGtleSA9PT0gdmVydGljYWxLZXlzWzBdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMF0gfHwgaXNMYXJnZURvd247XG4gICAgICAgICAgICB2YXIgaXNVcCA9IGtleSA9PT0gdmVydGljYWxLZXlzWzFdIHx8IGtleSA9PT0gaG9yaXpvbnRhbEtleXNbMV0gfHwgaXNMYXJnZVVwO1xuICAgICAgICAgICAgdmFyIGlzTWluID0ga2V5ID09PSBlZGdlS2V5c1swXTtcbiAgICAgICAgICAgIHZhciBpc01heCA9IGtleSA9PT0gZWRnZUtleXNbMV07XG5cbiAgICAgICAgICAgIGlmICghaXNEb3duICYmICFpc1VwICYmICFpc01pbiAmJiAhaXNNYXgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgdmFyIHRvO1xuXG4gICAgICAgICAgICBpZiAoaXNVcCB8fCBpc0Rvd24pIHtcbiAgICAgICAgICAgICAgICB2YXIgbXVsdGlwbGllciA9IG9wdGlvbnMua2V5Ym9hcmRQYWdlTXVsdGlwbGllcjtcbiAgICAgICAgICAgICAgICB2YXIgZGlyZWN0aW9uID0gaXNEb3duID8gMCA6IDE7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXBzID0gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgdmFyIHN0ZXAgPSBzdGVwc1tkaXJlY3Rpb25dO1xuXG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGVkZ2Ugb2YgYSBzbGlkZXIsIGRvIG5vdGhpbmdcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTm8gc3RlcCBzZXQsIHVzZSB0aGUgZGVmYXVsdCBvZiAxMCUgb2YgdGhlIHN1Yi1yYW5nZVxuICAgICAgICAgICAgICAgIGlmIChzdGVwID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICBzdGVwID0gc2NvcGVfU3BlY3RydW0uZ2V0RGVmYXVsdFN0ZXAoXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRG93bixcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMua2V5Ym9hcmREZWZhdWx0U3RlcFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpc0xhcmdlVXAgfHwgaXNMYXJnZURvd24pIHtcbiAgICAgICAgICAgICAgICAgICAgc3RlcCAqPSBtdWx0aXBsaWVyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFN0ZXAgb3ZlciB6ZXJvLWxlbmd0aCByYW5nZXMgKCM5NDgpO1xuICAgICAgICAgICAgICAgIHN0ZXAgPSBNYXRoLm1heChzdGVwLCAwLjAwMDAwMDEpO1xuXG4gICAgICAgICAgICAgICAgLy8gRGVjcmVtZW50IGZvciBkb3duIHN0ZXBzXG4gICAgICAgICAgICAgICAgc3RlcCA9IChpc0Rvd24gPyAtMSA6IDEpICogc3RlcDtcblxuICAgICAgICAgICAgICAgIHRvID0gc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gKyBzdGVwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpc01heCkge1xuICAgICAgICAgICAgICAgIC8vIEVuZCBrZXlcbiAgICAgICAgICAgICAgICB0byA9IG9wdGlvbnMuc3BlY3RydW0ueFZhbFtvcHRpb25zLnNwZWN0cnVtLnhWYWwubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEhvbWUga2V5XG4gICAgICAgICAgICAgICAgdG8gPSBvcHRpb25zLnNwZWN0cnVtLnhWYWxbMF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHNjb3BlX1NwZWN0cnVtLnRvU3RlcHBpbmcodG8pLCB0cnVlLCB0cnVlKTtcblxuICAgICAgICAgICAgZmlyZUV2ZW50KFwic2xpZGVcIiwgaGFuZGxlTnVtYmVyKTtcbiAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgZmlyZUV2ZW50KFwiY2hhbmdlXCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJzZXRcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQXR0YWNoIGV2ZW50cyB0byBzZXZlcmFsIHNsaWRlciBwYXJ0cy5cbiAgICAgICAgZnVuY3Rpb24gYmluZFNsaWRlckV2ZW50cyhiZWhhdmlvdXIpIHtcbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgc3RhbmRhcmQgZHJhZyBldmVudCB0byB0aGUgaGFuZGxlcy5cbiAgICAgICAgICAgIGlmICghYmVoYXZpb3VyLmZpeGVkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlcy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2UgZXZlbnRzIGFyZSBvbmx5IGJvdW5kIHRvIHRoZSB2aXN1YWwgaGFuZGxlXG4gICAgICAgICAgICAgICAgICAgIC8vIGVsZW1lbnQsIG5vdCB0aGUgJ3JlYWwnIG9yaWdpbiBlbGVtZW50LlxuICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBoYW5kbGUuY2hpbGRyZW5bMF0sIGV2ZW50U3RhcnQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcnM6IFtpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEF0dGFjaCB0aGUgdGFwIGV2ZW50IHRvIHRoZSBzbGlkZXIgYmFzZS5cbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIudGFwKSB7XG4gICAgICAgICAgICAgICAgYXR0YWNoRXZlbnQoYWN0aW9ucy5zdGFydCwgc2NvcGVfQmFzZSwgZXZlbnRUYXAsIHt9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmlyZSBob3ZlciBldmVudHNcbiAgICAgICAgICAgIGlmIChiZWhhdmlvdXIuaG92ZXIpIHtcbiAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLm1vdmUsIHNjb3BlX0Jhc2UsIGV2ZW50SG92ZXIsIHtcbiAgICAgICAgICAgICAgICAgICAgaG92ZXI6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gTWFrZSB0aGUgcmFuZ2UgZHJhZ2dhYmxlLlxuICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5kcmFnKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfQ29ubmVjdHMuZm9yRWFjaChmdW5jdGlvbihjb25uZWN0LCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29ubmVjdCA9PT0gZmFsc2UgfHwgaW5kZXggPT09IDAgfHwgaW5kZXggPT09IHNjb3BlX0Nvbm5lY3RzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVCZWZvcmUgPSBzY29wZV9IYW5kbGVzW2luZGV4IC0gMV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYW5kbGVBZnRlciA9IHNjb3BlX0hhbmRsZXNbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRIb2xkZXJzID0gW2Nvbm5lY3RdO1xuXG4gICAgICAgICAgICAgICAgICAgIGFkZENsYXNzKGNvbm5lY3QsIG9wdGlvbnMuY3NzQ2xhc3Nlcy5kcmFnZ2FibGUpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFdoZW4gdGhlIHJhbmdlIGlzIGZpeGVkLCB0aGUgZW50aXJlIHJhbmdlIGNhblxuICAgICAgICAgICAgICAgICAgICAvLyBiZSBkcmFnZ2VkIGJ5IHRoZSBoYW5kbGVzLiBUaGUgaGFuZGxlIGluIHRoZSBmaXJzdFxuICAgICAgICAgICAgICAgICAgICAvLyBvcmlnaW4gd2lsbCBwcm9wYWdhdGUgdGhlIHN0YXJ0IGV2ZW50IHVwd2FyZCxcbiAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGl0IG5lZWRzIHRvIGJlIGJvdW5kIG1hbnVhbGx5IG9uIHRoZSBvdGhlci5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJlaGF2aW91ci5maXhlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRIb2xkZXJzLnB1c2goaGFuZGxlQmVmb3JlLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5wdXNoKGhhbmRsZUFmdGVyLmNoaWxkcmVuWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50SG9sZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGV2ZW50SG9sZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRhY2hFdmVudChhY3Rpb25zLnN0YXJ0LCBldmVudEhvbGRlciwgZXZlbnRTdGFydCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXM6IFtoYW5kbGVCZWZvcmUsIGhhbmRsZUFmdGVyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzOiBbaW5kZXggLSAxLCBpbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEF0dGFjaCBhbiBldmVudCB0byB0aGlzIHNsaWRlciwgcG9zc2libHkgaW5jbHVkaW5nIGEgbmFtZXNwYWNlXG4gICAgICAgIGZ1bmN0aW9uIGJpbmRFdmVudChuYW1lc3BhY2VkRXZlbnQsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBzY29wZV9FdmVudHNbbmFtZXNwYWNlZEV2ZW50XSA9IHNjb3BlX0V2ZW50c1tuYW1lc3BhY2VkRXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgc2NvcGVfRXZlbnRzW25hbWVzcGFjZWRFdmVudF0ucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBldmVudCBib3VuZCBpcyAndXBkYXRlLCcgZmlyZSBpdCBpbW1lZGlhdGVseSBmb3IgYWxsIGhhbmRsZXMuXG4gICAgICAgICAgICBpZiAobmFtZXNwYWNlZEV2ZW50LnNwbGl0KFwiLlwiKVswXSA9PT0gXCJ1cGRhdGVcIikge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbihhLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaXNJbnRlcm5hbE5hbWVzcGFjZShuYW1lc3BhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuYW1lc3BhY2UgPT09IElOVEVSTkFMX0VWRU5UX05TLmFyaWEgfHwgbmFtZXNwYWNlID09PSBJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVuZG8gYXR0YWNobWVudCBvZiBldmVudFxuICAgICAgICBmdW5jdGlvbiByZW1vdmVFdmVudChuYW1lc3BhY2VkRXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5hbWVzcGFjZWRFdmVudCAmJiBuYW1lc3BhY2VkRXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuICAgICAgICAgICAgdmFyIG5hbWVzcGFjZSA9IGV2ZW50ID8gbmFtZXNwYWNlZEV2ZW50LnN1YnN0cmluZyhldmVudC5sZW5ndGgpIDogbmFtZXNwYWNlZEV2ZW50O1xuXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24oYmluZCkge1xuICAgICAgICAgICAgICAgIHZhciB0RXZlbnQgPSBiaW5kLnNwbGl0KFwiLlwiKVswXTtcbiAgICAgICAgICAgICAgICB2YXIgdE5hbWVzcGFjZSA9IGJpbmQuc3Vic3RyaW5nKHRFdmVudC5sZW5ndGgpO1xuICAgICAgICAgICAgICAgIGlmICgoIWV2ZW50IHx8IGV2ZW50ID09PSB0RXZlbnQpICYmICghbmFtZXNwYWNlIHx8IG5hbWVzcGFjZSA9PT0gdE5hbWVzcGFjZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gb25seSBkZWxldGUgcHJvdGVjdGVkIGludGVybmFsIGV2ZW50IGlmIGludGVudGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNJbnRlcm5hbE5hbWVzcGFjZSh0TmFtZXNwYWNlKSB8fCBuYW1lc3BhY2UgPT09IHROYW1lc3BhY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY29wZV9FdmVudHNbYmluZF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEV4dGVybmFsIGV2ZW50IGhhbmRsaW5nXG4gICAgICAgIGZ1bmN0aW9uIGZpcmVFdmVudChldmVudE5hbWUsIGhhbmRsZU51bWJlciwgdGFwKSB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyhzY29wZV9FdmVudHMpLmZvckVhY2goZnVuY3Rpb24odGFyZ2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gdGFyZ2V0RXZlbnQuc3BsaXQoXCIuXCIpWzBdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gZXZlbnRUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNjb3BlX0V2ZW50c1t0YXJnZXRFdmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdGhlIHNsaWRlciBwdWJsaWMgQVBJIGFzIHRoZSBzY29wZSAoJ3RoaXMnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1NlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIHZhbHVlcyBhcyBhcnJheSwgc28gYXJnXzFbYXJnXzJdIGlzIGFsd2F5cyB2YWxpZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9WYWx1ZXMubWFwKG9wdGlvbnMuZm9ybWF0LnRvKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kZXgsIDAgb3IgMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBVbi1mb3JtYXR0ZWQgc2xpZGVyIHZhbHVlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlX1ZhbHVlcy5zbGljZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEV2ZW50IGlzIGZpcmVkIGJ5IHRhcCwgdHJ1ZSBvciBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBMZWZ0IG9mZnNldCBvZiB0aGUgaGFuZGxlLCBpbiByZWxhdGlvbiB0byB0aGUgc2xpZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGVfTG9jYXRpb25zLnNsaWNlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHRoZSBzbGlkZXIgcHVibGljIEFQSSB0byBhbiBhY2Nlc3NpYmxlIHBhcmFtZXRlciB3aGVuIHRoaXMgaXMgdW5hdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY29wZV9TZWxmXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNwbGl0IG91dCB0aGUgaGFuZGxlIHBvc2l0aW9uaW5nIGxvZ2ljIHNvIHRoZSBNb3ZlIGV2ZW50IGNhbiB1c2UgaXQsIHRvb1xuICAgICAgICBmdW5jdGlvbiBjaGVja0hhbmRsZVBvc2l0aW9uKHJlZmVyZW5jZSwgaGFuZGxlTnVtYmVyLCB0bywgbG9va0JhY2t3YXJkLCBsb29rRm9yd2FyZCwgZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBkaXN0YW5jZTtcblxuICAgICAgICAgICAgLy8gRm9yIHNsaWRlcnMgd2l0aCBtdWx0aXBsZSBoYW5kbGVzLCBsaW1pdCBtb3ZlbWVudCB0byB0aGUgb3RoZXIgaGFuZGxlLlxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIG1hcmdpbiBvcHRpb24gYnkgYWRkaW5nIGl0IHRvIHRoZSBoYW5kbGUgcG9zaXRpb25zLlxuICAgICAgICAgICAgaWYgKHNjb3BlX0hhbmRsZXMubGVuZ3RoID4gMSAmJiAhb3B0aW9ucy5ldmVudHMudW5jb25zdHJhaW5lZCkge1xuICAgICAgICAgICAgICAgIGlmIChsb29rQmFja3dhcmQgJiYgaGFuZGxlTnVtYmVyID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IHNjb3BlX1NwZWN0cnVtLmdldEFic29sdXRlRGlzdGFuY2UocmVmZXJlbmNlW2hhbmRsZU51bWJlciAtIDFdLCBvcHRpb25zLm1hcmdpbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0sIG9wdGlvbnMubWFyZ2luLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVGhlIGxpbWl0IG9wdGlvbiBoYXMgdGhlIG9wcG9zaXRlIGVmZmVjdCwgbGltaXRpbmcgaGFuZGxlcyB0byBhXG4gICAgICAgICAgICAvLyBtYXhpbXVtIGRpc3RhbmNlIGZyb20gYW5vdGhlci4gTGltaXQgbXVzdCBiZSA+IDAsIGFzIG90aGVyd2lzZVxuICAgICAgICAgICAgLy8gaGFuZGxlcyB3b3VsZCBiZSB1bm1vdmFibGUuXG4gICAgICAgICAgICBpZiAoc2NvcGVfSGFuZGxlcy5sZW5ndGggPiAxICYmIG9wdGlvbnMubGltaXQpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9va0JhY2t3YXJkICYmIGhhbmRsZU51bWJlciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKHJlZmVyZW5jZVtoYW5kbGVOdW1iZXIgLSAxXSwgb3B0aW9ucy5saW1pdCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5taW4odG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAobG9va0ZvcndhcmQgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gc2NvcGVfU3BlY3RydW0uZ2V0QWJzb2x1dGVEaXN0YW5jZShyZWZlcmVuY2VbaGFuZGxlTnVtYmVyICsgMV0sIG9wdGlvbnMubGltaXQsIDEpO1xuICAgICAgICAgICAgICAgICAgICB0byA9IE1hdGgubWF4KHRvLCBkaXN0YW5jZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUaGUgcGFkZGluZyBvcHRpb24ga2VlcHMgdGhlIGhhbmRsZXMgYSBjZXJ0YWluIGRpc3RhbmNlIGZyb20gdGhlXG4gICAgICAgICAgICAvLyBlZGdlcyBvZiB0aGUgc2xpZGVyLiBQYWRkaW5nIG11c3QgYmUgPiAwLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMucGFkZGluZykge1xuICAgICAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDAsIG9wdGlvbnMucGFkZGluZ1swXSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIHRvID0gTWF0aC5tYXgodG8sIGRpc3RhbmNlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaGFuZGxlTnVtYmVyID09PSBzY29wZV9IYW5kbGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBzY29wZV9TcGVjdHJ1bS5nZXRBYnNvbHV0ZURpc3RhbmNlKDEwMCwgb3B0aW9ucy5wYWRkaW5nWzFdLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgdG8gPSBNYXRoLm1pbih0bywgZGlzdGFuY2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS5nZXRTdGVwKHRvKTtcblxuICAgICAgICAgICAgLy8gTGltaXQgcGVyY2VudGFnZSB0byB0aGUgMCAtIDEwMCByYW5nZVxuICAgICAgICAgICAgdG8gPSBsaW1pdCh0byk7XG5cbiAgICAgICAgICAgIC8vIFJldHVybiBmYWxzZSBpZiBoYW5kbGUgY2FuJ3QgbW92ZVxuICAgICAgICAgICAgaWYgKHRvID09PSByZWZlcmVuY2VbaGFuZGxlTnVtYmVyXSAmJiAhZ2V0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVzZXMgc2xpZGVyIG9yaWVudGF0aW9uIHRvIGNyZWF0ZSBDU1MgcnVsZXMuIGEgPSBiYXNlIHZhbHVlO1xuICAgICAgICBmdW5jdGlvbiBpblJ1bGVPcmRlcih2LCBhKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG9wdGlvbnMub3J0O1xuICAgICAgICAgICAgcmV0dXJuIChvID8gYSA6IHYpICsgXCIsIFwiICsgKG8gPyB2IDogYSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBNb3ZlcyBoYW5kbGUocykgYnkgYSBwZXJjZW50YWdlXG4gICAgICAgIC8vIChib29sLCAlIHRvIG1vdmUsIFslIHdoZXJlIGhhbmRsZSBzdGFydGVkLCAuLi5dLCBbaW5kZXggaW4gc2NvcGVfSGFuZGxlcywgLi4uXSlcbiAgICAgICAgZnVuY3Rpb24gbW92ZUhhbmRsZXModXB3YXJkLCBwcm9wb3NhbCwgbG9jYXRpb25zLCBoYW5kbGVOdW1iZXJzKSB7XG4gICAgICAgICAgICB2YXIgcHJvcG9zYWxzID0gbG9jYXRpb25zLnNsaWNlKCk7XG5cbiAgICAgICAgICAgIHZhciBiID0gWyF1cHdhcmQsIHVwd2FyZF07XG4gICAgICAgICAgICB2YXIgZiA9IFt1cHdhcmQsICF1cHdhcmRdO1xuXG4gICAgICAgICAgICAvLyBDb3B5IGhhbmRsZU51bWJlcnMgc28gd2UgZG9uJ3QgY2hhbmdlIHRoZSBkYXRhc2V0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXJzID0gaGFuZGxlTnVtYmVycy5zbGljZSgpO1xuXG4gICAgICAgICAgICAvLyBDaGVjayB0byBzZWUgd2hpY2ggaGFuZGxlIGlzICdsZWFkaW5nJy5cbiAgICAgICAgICAgIC8vIElmIHRoYXQgb25lIGNhbid0IG1vdmUgdGhlIHNlY29uZCBjYW4ndCBlaXRoZXIuXG4gICAgICAgICAgICBpZiAodXB3YXJkKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlTnVtYmVycy5yZXZlcnNlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMTogZ2V0IHRoZSBtYXhpbXVtIHBlcmNlbnRhZ2UgdGhhdCBhbnkgb2YgdGhlIGhhbmRsZXMgY2FuIG1vdmVcbiAgICAgICAgICAgIGlmIChoYW5kbGVOdW1iZXJzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyLCBvKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXSArIHByb3Bvc2FsLFxuICAgICAgICAgICAgICAgICAgICAgICAgYltvXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZbb10sXG4gICAgICAgICAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3AgaWYgb25lIG9mIHRoZSBoYW5kbGVzIGNhbid0IG1vdmUuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gMDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2FsID0gdG8gLSBwcm9wb3NhbHNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2Fsc1toYW5kbGVOdW1iZXJdID0gdG87XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgdXNpbmcgb25lIGhhbmRsZSwgY2hlY2sgYmFja3dhcmQgQU5EIGZvcndhcmRcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGIgPSBmID0gW3RydWVdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBmYWxzZTtcblxuICAgICAgICAgICAgLy8gU3RlcCAyOiBUcnkgdG8gc2V0IHRoZSBoYW5kbGVzIHdpdGggdGhlIGZvdW5kIHBlcmNlbnRhZ2VcbiAgICAgICAgICAgIGhhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIsIG8pIHtcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIGxvY2F0aW9uc1toYW5kbGVOdW1iZXJdICsgcHJvcG9zYWwsIGJbb10sIGZbb10pIHx8IHN0YXRlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFN0ZXAgMzogSWYgYSBoYW5kbGUgbW92ZWQsIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVOdW1iZXJzLmZvckVhY2goZnVuY3Rpb24oaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgICAgICBmaXJlRXZlbnQoXCJzbGlkZVwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGFrZXMgYSBiYXNlIHZhbHVlIGFuZCBhbiBvZmZzZXQuIFRoaXMgb2Zmc2V0IGlzIHVzZWQgZm9yIHRoZSBjb25uZWN0IGJhciBzaXplLlxuICAgICAgICAvLyBJbiB0aGUgaW5pdGlhbCBkZXNpZ24gZm9yIHRoaXMgZmVhdHVyZSwgdGhlIG9yaWdpbiBlbGVtZW50IHdhcyAxJSB3aWRlLlxuICAgICAgICAvLyBVbmZvcnR1bmF0ZWx5LCBhIHJvdW5kaW5nIGJ1ZyBpbiBDaHJvbWUgbWFrZXMgaXQgaW1wb3NzaWJsZSB0byBpbXBsZW1lbnQgdGhpcyBmZWF0dXJlXG4gICAgICAgIC8vIGluIHRoaXMgbWFubmVyOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD03OTgyMjNcbiAgICAgICAgZnVuY3Rpb24gdHJhbnNmb3JtRGlyZWN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmRpciA/IDEwMCAtIGEgLSBiIDogYTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc2NvcGVfTG9jYXRpb25zIGFuZCBzY29wZV9WYWx1ZXMsIHVwZGF0ZXMgdmlzdWFsIHN0YXRlXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pIHtcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBsb2NhdGlvbnMuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnNbaGFuZGxlTnVtYmVyXSA9IHRvO1xuXG4gICAgICAgICAgICAvLyBDb252ZXJ0IHRoZSB2YWx1ZSB0byB0aGUgc2xpZGVyIHN0ZXBwaW5nL3JhbmdlLlxuICAgICAgICAgICAgc2NvcGVfVmFsdWVzW2hhbmRsZU51bWJlcl0gPSBzY29wZV9TcGVjdHJ1bS5mcm9tU3RlcHBpbmcodG8pO1xuXG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRpb24gPSAxMCAqICh0cmFuc2Zvcm1EaXJlY3Rpb24odG8sIDApIC0gc2NvcGVfRGlyT2Zmc2V0KTtcbiAgICAgICAgICAgIHZhciB0cmFuc2xhdGVSdWxlID0gXCJ0cmFuc2xhdGUoXCIgKyBpblJ1bGVPcmRlcih0cmFuc2xhdGlvbiArIFwiJVwiLCBcIjBcIikgKyBcIilcIjtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlW29wdGlvbnMudHJhbnNmb3JtUnVsZV0gPSB0cmFuc2xhdGVSdWxlO1xuXG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICB1cGRhdGVDb25uZWN0KGhhbmRsZU51bWJlciArIDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSGFuZGxlcyBiZWZvcmUgdGhlIHNsaWRlciBtaWRkbGUgYXJlIHN0YWNrZWQgbGF0ZXIgPSBoaWdoZXIsXG4gICAgICAgIC8vIEhhbmRsZXMgYWZ0ZXIgdGhlIG1pZGRsZSBsYXRlciBpcyBsb3dlclxuICAgICAgICAvLyBbWzddIFs4XSAuLi4uLi4uLi4uIHwgLi4uLi4uLi4uLiBbNV0gWzRdXG4gICAgICAgIGZ1bmN0aW9uIHNldFppbmRleCgpIHtcbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlyID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0gPiA1MCA/IC0xIDogMTtcbiAgICAgICAgICAgICAgICB2YXIgekluZGV4ID0gMyArIChzY29wZV9IYW5kbGVzLmxlbmd0aCArIGRpciAqIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgc2NvcGVfSGFuZGxlc1toYW5kbGVOdW1iZXJdLnN0eWxlLnpJbmRleCA9IHpJbmRleDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGVzdCBzdWdnZXN0ZWQgdmFsdWVzIGFuZCBhcHBseSBtYXJnaW4sIHN0ZXAuXG4gICAgICAgIC8vIGlmIGV4YWN0SW5wdXQgaXMgdHJ1ZSwgZG9uJ3QgcnVuIGNoZWNrSGFuZGxlUG9zaXRpb24sIHRoZW4gdGhlIGhhbmRsZSBjYW4gYmUgcGxhY2VkIGluIGJldHdlZW4gc3RlcHMgKCM0MzYpXG4gICAgICAgIGZ1bmN0aW9uIHNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBleGFjdElucHV0KSB7XG4gICAgICAgICAgICBpZiAoIWV4YWN0SW5wdXQpIHtcbiAgICAgICAgICAgICAgICB0byA9IGNoZWNrSGFuZGxlUG9zaXRpb24oc2NvcGVfTG9jYXRpb25zLCBoYW5kbGVOdW1iZXIsIHRvLCBsb29rQmFja3dhcmQsIGxvb2tGb3J3YXJkLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwZGF0ZUhhbmRsZVBvc2l0aW9uKGhhbmRsZU51bWJlciwgdG8pO1xuXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc3R5bGUgYXR0cmlidXRlIGZvciBjb25uZWN0IG5vZGVzXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZUNvbm5lY3QoaW5kZXgpIHtcbiAgICAgICAgICAgIC8vIFNraXAgY29ubmVjdHMgc2V0IHRvIGZhbHNlXG4gICAgICAgICAgICBpZiAoIXNjb3BlX0Nvbm5lY3RzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGwgPSAwO1xuICAgICAgICAgICAgdmFyIGggPSAxMDA7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIGwgPSBzY29wZV9Mb2NhdGlvbnNbaW5kZXggLSAxXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSBzY29wZV9Db25uZWN0cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaCA9IHNjb3BlX0xvY2F0aW9uc1tpbmRleF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFdlIHVzZSB0d28gcnVsZXM6XG4gICAgICAgICAgICAvLyAndHJhbnNsYXRlJyB0byBjaGFuZ2UgdGhlIGxlZnQvdG9wIG9mZnNldDtcbiAgICAgICAgICAgIC8vICdzY2FsZScgdG8gY2hhbmdlIHRoZSB3aWR0aCBvZiB0aGUgZWxlbWVudDtcbiAgICAgICAgICAgIC8vIEFzIHRoZSBlbGVtZW50IGhhcyBhIHdpZHRoIG9mIDEwMCUsIGEgdHJhbnNsYXRpb24gb2YgMTAwJSBpcyBlcXVhbCB0byAxMDAlIG9mIHRoZSBwYXJlbnQgKC5ub1VpLWJhc2UpXG4gICAgICAgICAgICB2YXIgY29ubmVjdFdpZHRoID0gaCAtIGw7XG4gICAgICAgICAgICB2YXIgdHJhbnNsYXRlUnVsZSA9IFwidHJhbnNsYXRlKFwiICsgaW5SdWxlT3JkZXIodHJhbnNmb3JtRGlyZWN0aW9uKGwsIGNvbm5lY3RXaWR0aCkgKyBcIiVcIiwgXCIwXCIpICsgXCIpXCI7XG4gICAgICAgICAgICB2YXIgc2NhbGVSdWxlID0gXCJzY2FsZShcIiArIGluUnVsZU9yZGVyKGNvbm5lY3RXaWR0aCAvIDEwMCwgXCIxXCIpICsgXCIpXCI7XG5cbiAgICAgICAgICAgIHNjb3BlX0Nvbm5lY3RzW2luZGV4XS5zdHlsZVtvcHRpb25zLnRyYW5zZm9ybVJ1bGVdID0gdHJhbnNsYXRlUnVsZSArIFwiIFwiICsgc2NhbGVSdWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUGFyc2VzIHZhbHVlIHBhc3NlZCB0byAuc2V0IG1ldGhvZC4gUmV0dXJucyBjdXJyZW50IHZhbHVlIGlmIG5vdCBwYXJzZS1hYmxlLlxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVG9WYWx1ZSh0bywgaGFuZGxlTnVtYmVyKSB7XG4gICAgICAgICAgICAvLyBTZXR0aW5nIHdpdGggbnVsbCBpbmRpY2F0ZXMgYW4gJ2lnbm9yZScuXG4gICAgICAgICAgICAvLyBJbnB1dHRpbmcgJ2ZhbHNlJyBpcyBpbnZhbGlkLlxuICAgICAgICAgICAgaWYgKHRvID09PSBudWxsIHx8IHRvID09PSBmYWxzZSB8fCB0byA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0xvY2F0aW9uc1toYW5kbGVOdW1iZXJdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiBhIGZvcm1hdHRlZCBudW1iZXIgd2FzIHBhc3NlZCwgYXR0ZW1wdCB0byBkZWNvZGUgaXQuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICAgICAgdG8gPSBTdHJpbmcodG8pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0byA9IG9wdGlvbnMuZm9ybWF0LmZyb20odG8pO1xuICAgICAgICAgICAgdG8gPSBzY29wZV9TcGVjdHJ1bS50b1N0ZXBwaW5nKHRvKTtcblxuICAgICAgICAgICAgLy8gSWYgcGFyc2luZyB0aGUgbnVtYmVyIGZhaWxlZCwgdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAgICAgICAgaWYgKHRvID09PSBmYWxzZSB8fCBpc05hTih0bykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0bztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNldCB0aGUgc2xpZGVyIHZhbHVlLlxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldChpbnB1dCwgZmlyZVNldEV2ZW50LCBleGFjdElucHV0KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWVzID0gYXNBcnJheShpbnB1dCk7XG4gICAgICAgICAgICB2YXIgaXNJbml0ID0gc2NvcGVfTG9jYXRpb25zWzBdID09PSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIC8vIEV2ZW50IGZpcmVzIGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIGZpcmVTZXRFdmVudCA9IGZpcmVTZXRFdmVudCA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6ICEhZmlyZVNldEV2ZW50O1xuXG4gICAgICAgICAgICAvLyBBbmltYXRpb24gaXMgb3B0aW9uYWwuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgdGhlIGluaXRpYWwgdmFsdWVzIHdlcmUgc2V0IGJlZm9yZSB1c2luZyBhbmltYXRlZCBwbGFjZW1lbnQuXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmICFpc0luaXQpIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzc0ZvcihzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlcy50YXAsIG9wdGlvbnMuYW5pbWF0aW9uRHVyYXRpb24pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGaXJzdCBwYXNzLCB3aXRob3V0IGxvb2tBaGVhZCBidXQgd2l0aCBsb29rQmFja3dhcmQuIFZhbHVlcyBhcmUgc2V0IGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICBzZXRIYW5kbGUoaGFuZGxlTnVtYmVyLCByZXNvbHZlVG9WYWx1ZSh2YWx1ZXNbaGFuZGxlTnVtYmVyXSwgaGFuZGxlTnVtYmVyKSwgdHJ1ZSwgZmFsc2UsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBpID0gc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGggPT09IDEgPyAwIDogMTtcblxuICAgICAgICAgICAgLy8gU2Vjb25kYXJ5IHBhc3Nlcy4gTm93IHRoYXQgYWxsIGJhc2UgdmFsdWVzIGFyZSBzZXQsIGFwcGx5IGNvbnN0cmFpbnRzLlxuICAgICAgICAgICAgLy8gSXRlcmF0ZSBhbGwgaGFuZGxlcyB0byBlbnN1cmUgY29uc3RyYWludHMgYXJlIGFwcGxpZWQgZm9yIHRoZSBlbnRpcmUgc2xpZGVyIChJc3N1ZSAjMTAwOSlcbiAgICAgICAgICAgIGZvciAoOyBpIDwgc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHNjb3BlX0hhbmRsZU51bWJlcnMuZm9yRWFjaChmdW5jdGlvbihoYW5kbGVOdW1iZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl0sIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRaaW5kZXgoKTtcblxuICAgICAgICAgICAgc2NvcGVfSGFuZGxlTnVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInVwZGF0ZVwiLCBoYW5kbGVOdW1iZXIpO1xuXG4gICAgICAgICAgICAgICAgLy8gRmlyZSB0aGUgZXZlbnQgb25seSBmb3IgaGFuZGxlcyB0aGF0IHJlY2VpdmVkIGEgbmV3IHZhbHVlLCBhcyBwZXIgIzU3OVxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZXNbaGFuZGxlTnVtYmVyXSAhPT0gbnVsbCAmJiBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlyZUV2ZW50KFwic2V0XCIsIGhhbmRsZU51bWJlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZXNldCBzbGlkZXIgdG8gaW5pdGlhbCB2YWx1ZXNcbiAgICAgICAgZnVuY3Rpb24gdmFsdWVSZXNldChmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnMuc3RhcnQsIGZpcmVTZXRFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZXQgdmFsdWUgZm9yIGEgc2luZ2xlIGhhbmRsZVxuICAgICAgICBmdW5jdGlvbiB2YWx1ZVNldEhhbmRsZShoYW5kbGVOdW1iZXIsIHZhbHVlLCBmaXJlU2V0RXZlbnQsIGV4YWN0SW5wdXQpIHtcbiAgICAgICAgICAgIC8vIEVuc3VyZSBudW1lcmljIGlucHV0XG4gICAgICAgICAgICBoYW5kbGVOdW1iZXIgPSBOdW1iZXIoaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKCEoaGFuZGxlTnVtYmVyID49IDAgJiYgaGFuZGxlTnVtYmVyIDwgc2NvcGVfSGFuZGxlTnVtYmVycy5sZW5ndGgpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBpbnZhbGlkIGhhbmRsZSBudW1iZXIsIGdvdDogXCIgKyBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBMb29rIGJvdGggYmFja3dhcmQgYW5kIGZvcndhcmQsIHNpbmNlIHdlIGRvbid0IHdhbnQgdGhpcyBoYW5kbGUgdG8gXCJwdXNoXCIgb3RoZXIgaGFuZGxlcyAoIzk2MCk7XG4gICAgICAgICAgICAvLyBUaGUgZXhhY3RJbnB1dCBhcmd1bWVudCBjYW4gYmUgdXNlZCB0byBpZ25vcmUgc2xpZGVyIHN0ZXBwaW5nICgjNDM2KVxuICAgICAgICAgICAgc2V0SGFuZGxlKGhhbmRsZU51bWJlciwgcmVzb2x2ZVRvVmFsdWUodmFsdWUsIGhhbmRsZU51bWJlciksIHRydWUsIHRydWUsIGV4YWN0SW5wdXQpO1xuXG4gICAgICAgICAgICBmaXJlRXZlbnQoXCJ1cGRhdGVcIiwgaGFuZGxlTnVtYmVyKTtcblxuICAgICAgICAgICAgaWYgKGZpcmVTZXRFdmVudCkge1xuICAgICAgICAgICAgICAgIGZpcmVFdmVudChcInNldFwiLCBoYW5kbGVOdW1iZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gR2V0IHRoZSBzbGlkZXIgdmFsdWUuXG4gICAgICAgIGZ1bmN0aW9uIHZhbHVlR2V0KCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHNjb3BlX1ZhbHVlcy5tYXAob3B0aW9ucy5mb3JtYXQudG8pO1xuXG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBoYW5kbGUgaXMgdXNlZCwgcmV0dXJuIGEgc2luZ2xlIHZhbHVlLlxuICAgICAgICAgICAgaWYgKHZhbHVlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVzWzBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlcyBjbGFzc2VzIGZyb20gdGhlIHJvb3QgYW5kIGVtcHRpZXMgaXQuXG4gICAgICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgcHJvdGVjdGVkIGludGVybmFsIGxpc3RlbmVyc1xuICAgICAgICAgICAgcmVtb3ZlRXZlbnQoSU5URVJOQUxfRVZFTlRfTlMuYXJpYSk7XG4gICAgICAgICAgICByZW1vdmVFdmVudChJTlRFUk5BTF9FVkVOVF9OUy50b29sdGlwcyk7XG5cbiAgICAgICAgICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLmNzc0NsYXNzZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMuY3NzQ2xhc3Nlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzcyhzY29wZV9UYXJnZXQsIG9wdGlvbnMuY3NzQ2xhc3Nlc1trZXldKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hpbGUgKHNjb3BlX1RhcmdldC5maXJzdENoaWxkKSB7XG4gICAgICAgICAgICAgICAgc2NvcGVfVGFyZ2V0LnJlbW92ZUNoaWxkKHNjb3BlX1RhcmdldC5maXJzdENoaWxkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGVsZXRlIHNjb3BlX1RhcmdldC5ub1VpU2xpZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKGhhbmRsZU51bWJlcikge1xuICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gc2NvcGVfTG9jYXRpb25zW2hhbmRsZU51bWJlcl07XG4gICAgICAgICAgICB2YXIgbmVhcmJ5U3RlcHMgPSBzY29wZV9TcGVjdHJ1bS5nZXROZWFyYnlTdGVwcyhsb2NhdGlvbik7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzY29wZV9WYWx1ZXNbaGFuZGxlTnVtYmVyXTtcbiAgICAgICAgICAgIHZhciBpbmNyZW1lbnQgPSBuZWFyYnlTdGVwcy50aGlzU3RlcC5zdGVwO1xuICAgICAgICAgICAgdmFyIGRlY3JlbWVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIC8vIElmIHNuYXBwZWQsIGRpcmVjdGx5IHVzZSBkZWZpbmVkIHN0ZXAgdmFsdWVcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNuYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSAtIG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuc3RhcnRWYWx1ZSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICAgICBuZWFyYnlTdGVwcy5zdGVwQWZ0ZXIuc3RhcnRWYWx1ZSAtIHZhbHVlIHx8IG51bGxcbiAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbmV4dCB2YWx1ZSBpbiB0aGlzIHN0ZXAgbW92ZXMgaW50byB0aGUgbmV4dCBzdGVwLFxuICAgICAgICAgICAgLy8gdGhlIGluY3JlbWVudCBpcyB0aGUgc3RhcnQgb2YgdGhlIG5leHQgc3RlcCAtIHRoZSBjdXJyZW50IHZhbHVlXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSArIGluY3JlbWVudCA+IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGluY3JlbWVudCA9IG5lYXJieVN0ZXBzLnN0ZXBBZnRlci5zdGFydFZhbHVlIC0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYmV5b25kIHRoZSBzdGFydGluZyBwb2ludFxuICAgICAgICAgICAgaWYgKHZhbHVlID4gbmVhcmJ5U3RlcHMudGhpc1N0ZXAuc3RhcnRWYWx1ZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG5lYXJieVN0ZXBzLnRoaXNTdGVwLnN0ZXA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5lYXJieVN0ZXBzLnN0ZXBCZWZvcmUuc3RlcCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBkZWNyZW1lbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gSWYgYSBoYW5kbGUgaXMgYXQgdGhlIHN0YXJ0IG9mIGEgc3RlcCwgaXQgYWx3YXlzIHN0ZXBzIGJhY2sgaW50byB0aGUgcHJldmlvdXMgc3RlcCBmaXJzdFxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVjcmVtZW50ID0gdmFsdWUgLSBuZWFyYnlTdGVwcy5zdGVwQmVmb3JlLmhpZ2hlc3RTdGVwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3csIGlmIGF0IHRoZSBzbGlkZXIgZWRnZXMsIHRoZXJlIGlzIG5vIGluL2RlY3JlbWVudFxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uID09PSAxMDApIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChsb2NhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEFzIHBlciAjMzkxLCB0aGUgY29tcGFyaXNvbiBmb3IgdGhlIGRlY3JlbWVudCBzdGVwIGNhbiBoYXZlIHNvbWUgcm91bmRpbmcgaXNzdWVzLlxuICAgICAgICAgICAgdmFyIHN0ZXBEZWNpbWFscyA9IHNjb3BlX1NwZWN0cnVtLmNvdW50U3RlcERlY2ltYWxzKCk7XG5cbiAgICAgICAgICAgIC8vIFJvdW5kIHBlciAjMzkxXG4gICAgICAgICAgICBpZiAoaW5jcmVtZW50ICE9PSBudWxsICYmIGluY3JlbWVudCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnQgPSBOdW1iZXIoaW5jcmVtZW50LnRvRml4ZWQoc3RlcERlY2ltYWxzKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkZWNyZW1lbnQgIT09IG51bGwgJiYgZGVjcmVtZW50ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGRlY3JlbWVudCA9IE51bWJlcihkZWNyZW1lbnQudG9GaXhlZChzdGVwRGVjaW1hbHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIFtkZWNyZW1lbnQsIGluY3JlbWVudF07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgc3RlcCBzaXplIGZvciB0aGUgc2xpZGVyLlxuICAgICAgICBmdW5jdGlvbiBnZXROZXh0U3RlcHMoKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NvcGVfSGFuZGxlTnVtYmVycy5tYXAoZ2V0TmV4dFN0ZXBzRm9ySGFuZGxlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZWFibGU6IG1hcmdpbiwgbGltaXQsIHBhZGRpbmcsIHN0ZXAsIHJhbmdlLCBhbmltYXRlLCBzbmFwXG4gICAgICAgIGZ1bmN0aW9uIHVwZGF0ZU9wdGlvbnMob3B0aW9uc1RvVXBkYXRlLCBmaXJlU2V0RXZlbnQpIHtcbiAgICAgICAgICAgIC8vIFNwZWN0cnVtIGlzIGNyZWF0ZWQgdXNpbmcgdGhlIHJhbmdlLCBzbmFwLCBkaXJlY3Rpb24gYW5kIHN0ZXAgb3B0aW9ucy5cbiAgICAgICAgICAgIC8vICdzbmFwJyBhbmQgJ3N0ZXAnIGNhbiBiZSB1cGRhdGVkLlxuICAgICAgICAgICAgLy8gSWYgJ3NuYXAnIGFuZCAnc3RlcCcgYXJlIG5vdCBwYXNzZWQsIHRoZXkgc2hvdWxkIHJlbWFpbiB1bmNoYW5nZWQuXG4gICAgICAgICAgICB2YXIgdiA9IHZhbHVlR2V0KCk7XG5cbiAgICAgICAgICAgIHZhciB1cGRhdGVBYmxlID0gW1xuICAgICAgICAgICAgICAgIFwibWFyZ2luXCIsXG4gICAgICAgICAgICAgICAgXCJsaW1pdFwiLFxuICAgICAgICAgICAgICAgIFwicGFkZGluZ1wiLFxuICAgICAgICAgICAgICAgIFwicmFuZ2VcIixcbiAgICAgICAgICAgICAgICBcImFuaW1hdGVcIixcbiAgICAgICAgICAgICAgICBcInNuYXBcIixcbiAgICAgICAgICAgICAgICBcInN0ZXBcIixcbiAgICAgICAgICAgICAgICBcImZvcm1hdFwiLFxuICAgICAgICAgICAgICAgIFwicGlwc1wiLFxuICAgICAgICAgICAgICAgIFwidG9vbHRpcHNcIlxuICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgLy8gT25seSBjaGFuZ2Ugb3B0aW9ucyB0aGF0IHdlJ3JlIGFjdHVhbGx5IHBhc3NlZCB0byB1cGRhdGUuXG4gICAgICAgICAgICB1cGRhdGVBYmxlLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciB1bmRlZmluZWQuIG51bGwgcmVtb3ZlcyB0aGUgdmFsdWUuXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnNUb1VwZGF0ZVtuYW1lXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsT3B0aW9uc1tuYW1lXSA9IG9wdGlvbnNUb1VwZGF0ZVtuYW1lXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIG5ld09wdGlvbnMgPSB0ZXN0T3B0aW9ucyhvcmlnaW5hbE9wdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyBMb2FkIG5ldyBvcHRpb25zIGludG8gdGhlIHNsaWRlciBzdGF0ZVxuICAgICAgICAgICAgdXBkYXRlQWJsZS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9uc1RvVXBkYXRlW25hbWVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uc1tuYW1lXSA9IG5ld09wdGlvbnNbbmFtZV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHNjb3BlX1NwZWN0cnVtID0gbmV3T3B0aW9ucy5zcGVjdHJ1bTtcblxuICAgICAgICAgICAgLy8gTGltaXQsIG1hcmdpbiBhbmQgcGFkZGluZyBkZXBlbmQgb24gdGhlIHNwZWN0cnVtIGJ1dCBhcmUgc3RvcmVkIG91dHNpZGUgb2YgaXQuICgjNjc3KVxuICAgICAgICAgICAgb3B0aW9ucy5tYXJnaW4gPSBuZXdPcHRpb25zLm1hcmdpbjtcbiAgICAgICAgICAgIG9wdGlvbnMubGltaXQgPSBuZXdPcHRpb25zLmxpbWl0O1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0gbmV3T3B0aW9ucy5wYWRkaW5nO1xuXG4gICAgICAgICAgICAvLyBVcGRhdGUgcGlwcywgcmVtb3ZlcyBleGlzdGluZy5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlbW92ZVBpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVXBkYXRlIHRvb2x0aXBzLCByZW1vdmVzIGV4aXN0aW5nLlxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudG9vbHRpcHMpIHtcbiAgICAgICAgICAgICAgICB0b29sdGlwcygpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZW1vdmVUb29sdGlwcygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJbnZhbGlkYXRlIHRoZSBjdXJyZW50IHBvc2l0aW9uaW5nIHNvIHZhbHVlU2V0IGZvcmNlcyBhbiB1cGRhdGUuXG4gICAgICAgICAgICBzY29wZV9Mb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgICAgIHZhbHVlU2V0KG9wdGlvbnNUb1VwZGF0ZS5zdGFydCB8fCB2LCBmaXJlU2V0RXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW5pdGlhbGl6YXRpb24gc3RlcHNcbiAgICAgICAgZnVuY3Rpb24gc2V0dXBTbGlkZXIoKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIGJhc2UgZWxlbWVudCwgaW5pdGlhbGl6ZSBIVE1MIGFuZCBzZXQgY2xhc3Nlcy5cbiAgICAgICAgICAgIC8vIEFkZCBoYW5kbGVzIGFuZCBjb25uZWN0IGVsZW1lbnRzLlxuICAgICAgICAgICAgc2NvcGVfQmFzZSA9IGFkZFNsaWRlcihzY29wZV9UYXJnZXQpO1xuXG4gICAgICAgICAgICBhZGRFbGVtZW50cyhvcHRpb25zLmNvbm5lY3QsIHNjb3BlX0Jhc2UpO1xuXG4gICAgICAgICAgICAvLyBBdHRhY2ggdXNlciBldmVudHMuXG4gICAgICAgICAgICBiaW5kU2xpZGVyRXZlbnRzKG9wdGlvbnMuZXZlbnRzKTtcblxuICAgICAgICAgICAgLy8gVXNlIHRoZSBwdWJsaWMgdmFsdWUgbWV0aG9kIHRvIHNldCB0aGUgc3RhcnQgdmFsdWVzLlxuICAgICAgICAgICAgdmFsdWVTZXQob3B0aW9ucy5zdGFydCk7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnBpcHMpIHtcbiAgICAgICAgICAgICAgICBwaXBzKG9wdGlvbnMucGlwcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnRvb2x0aXBzKSB7XG4gICAgICAgICAgICAgICAgdG9vbHRpcHMoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJpYSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgc2V0dXBTbGlkZXIoKTtcblxuICAgICAgICAvLyBub2luc3BlY3Rpb24gSlNVbnVzZWRHbG9iYWxTeW1ib2xzXG4gICAgICAgIHNjb3BlX1NlbGYgPSB7XG4gICAgICAgICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgICAgICAgc3RlcHM6IGdldE5leHRTdGVwcyxcbiAgICAgICAgICAgIG9uOiBiaW5kRXZlbnQsXG4gICAgICAgICAgICBvZmY6IHJlbW92ZUV2ZW50LFxuICAgICAgICAgICAgZ2V0OiB2YWx1ZUdldCxcbiAgICAgICAgICAgIHNldDogdmFsdWVTZXQsXG4gICAgICAgICAgICBzZXRIYW5kbGU6IHZhbHVlU2V0SGFuZGxlLFxuICAgICAgICAgICAgcmVzZXQ6IHZhbHVlUmVzZXQsXG4gICAgICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgICAgICBfX21vdmVIYW5kbGVzOiBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICAgICAgICAgICAgbW92ZUhhbmRsZXMoYSwgYiwgc2NvcGVfTG9jYXRpb25zLCBjKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRpb25zOiBvcmlnaW5hbE9wdGlvbnMsIC8vIElzc3VlICM2MDAsICM2NzhcbiAgICAgICAgICAgIHVwZGF0ZU9wdGlvbnM6IHVwZGF0ZU9wdGlvbnMsXG4gICAgICAgICAgICB0YXJnZXQ6IHNjb3BlX1RhcmdldCwgLy8gSXNzdWUgIzU5N1xuICAgICAgICAgICAgcmVtb3ZlUGlwczogcmVtb3ZlUGlwcyxcbiAgICAgICAgICAgIHJlbW92ZVRvb2x0aXBzOiByZW1vdmVUb29sdGlwcyxcbiAgICAgICAgICAgIGdldFRvb2x0aXBzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGVfVG9vbHRpcHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0T3JpZ2luczogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlX0hhbmRsZXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcGlwczogcGlwcyAvLyBJc3N1ZSAjNTk0XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHNjb3BlX1NlbGY7XG4gICAgfVxuXG4gICAgLy8gUnVuIHRoZSBzdGFuZGFyZCBpbml0aWFsaXplclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemUodGFyZ2V0LCBvcmlnaW5hbE9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCF0YXJnZXQgfHwgIXRhcmdldC5ub2RlTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm9VaVNsaWRlciAoXCIgKyBWRVJTSU9OICsgXCIpOiBjcmVhdGUgcmVxdWlyZXMgYSBzaW5nbGUgZWxlbWVudCwgZ290OiBcIiArIHRhcmdldCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaHJvdyBhbiBlcnJvciBpZiB0aGUgc2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlxuICAgICAgICBpZiAodGFyZ2V0Lm5vVWlTbGlkZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vVWlTbGlkZXIgKFwiICsgVkVSU0lPTiArIFwiKTogU2xpZGVyIHdhcyBhbHJlYWR5IGluaXRpYWxpemVkLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRlc3QgdGhlIG9wdGlvbnMgYW5kIGNyZWF0ZSB0aGUgc2xpZGVyIGVudmlyb25tZW50O1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRlc3RPcHRpb25zKG9yaWdpbmFsT3B0aW9ucywgdGFyZ2V0KTtcbiAgICAgICAgdmFyIGFwaSA9IHNjb3BlKHRhcmdldCwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zKTtcblxuICAgICAgICB0YXJnZXQubm9VaVNsaWRlciA9IGFwaTtcblxuICAgICAgICByZXR1cm4gYXBpO1xuICAgIH1cblxuICAgIC8vIFVzZSBhbiBvYmplY3QgaW5zdGVhZCBvZiBhIGZ1bmN0aW9uIGZvciBmdXR1cmUgZXhwYW5kYWJpbGl0eTtcbiAgICByZXR1cm4ge1xuICAgICAgICAvLyBFeHBvc2VkIGZvciB1bml0IHRlc3RpbmcsIGRvbid0IHVzZSB0aGlzIGluIHlvdXIgYXBwbGljYXRpb24uXG4gICAgICAgIF9fc3BlY3RydW06IFNwZWN0cnVtLFxuICAgICAgICB2ZXJzaW9uOiBWRVJTSU9OLFxuICAgICAgICAvLyBBIHJlZmVyZW5jZSB0byB0aGUgZGVmYXVsdCBjbGFzc2VzLCBhbGxvd3MgZ2xvYmFsIGNoYW5nZXMuXG4gICAgICAgIC8vIFVzZSB0aGUgY3NzQ2xhc3NlcyBvcHRpb24gZm9yIGNoYW5nZXMgdG8gb25lIHNsaWRlci5cbiAgICAgICAgY3NzQ2xhc3NlczogY3NzQ2xhc3NlcyxcbiAgICAgICAgY3JlYXRlOiBpbml0aWFsaXplXG4gICAgfTtcbn0pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG52YXIgcnVudGltZSA9IChmdW5jdGlvbiAoZXhwb3J0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcblxuICAgIHJldHVybiBnZW5lcmF0b3I7XG4gIH1cbiAgZXhwb3J0cy53cmFwID0gd3JhcDtcblxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiAoYW5kIHdhcyBwcmV2aW91c2x5KSBkZXNpZ25lZCB0byB0YWtlIGEgY2xvc3VyZSB0byBiZVxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgLy8gdG8gY3JlYXRlIGEgbmV3IGZ1bmN0aW9uIG9iamVjdC4gV2UgY2FuIGV2ZW4gZ2V0IGF3YXkgd2l0aCBhc3N1bWluZ1xuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcbiAgLy8gb25seSBhZGRpdGlvbmFsIGFsbG9jYXRpb24gcmVxdWlyZWQgaXMgdGhlIGNvbXBsZXRpb24gcmVjb3JkLCB3aGljaFxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICByZXR1cm4geyB0eXBlOiBcInRocm93XCIsIGFyZzogZXJyIH07XG4gICAgfVxuICB9XG5cbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xuICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSBcImV4ZWN1dGluZ1wiO1xuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xuXG4gIC8vIFJldHVybmluZyB0aGlzIG9iamVjdCBmcm9tIHRoZSBpbm5lckZuIGhhcyB0aGUgc2FtZSBlZmZlY3QgYXNcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xuXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0cy4gRm9yIGZ1bGwgc3BlYyBjb21wbGlhbmNlLCB5b3UgbWF5IHdpc2ggdG8gY29uZmlndXJlIHlvdXJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb24oKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XG5cbiAgLy8gVGhpcyBpcyBhIHBvbHlmaWxsIGZvciAlSXRlcmF0b3JQcm90b3R5cGUlIGZvciBlbnZpcm9ubWVudHMgdGhhdFxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcbiAgSXRlcmF0b3JQcm90b3R5cGVbaXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xuICBpZiAoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgJiZcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xuICAgIC8vIFRoaXMgZW52aXJvbm1lbnQgaGFzIGEgbmF0aXZlICVJdGVyYXRvclByb3RvdHlwZSU7IHVzZSBpdCBpbnN0ZWFkXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XG4gIH1cblxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxuICAgIEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTtcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcbiAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBkZWZpbmUoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgdG9TdHJpbmdUYWdTeW1ib2wsXG4gICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICk7XG5cbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cbiAgZnVuY3Rpb24gZGVmaW5lSXRlcmF0b3JNZXRob2RzKHByb3RvdHlwZSkge1xuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgICAgZGVmaW5lKHByb3RvdHlwZSwgbWV0aG9kLCBmdW5jdGlvbihhcmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ludm9rZShtZXRob2QsIGFyZyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgZGVmaW5lKGdlbkZ1biwgdG9TdHJpbmdUYWdTeW1ib2wsIFwiR2VuZXJhdG9yRnVuY3Rpb25cIik7XG4gICAgfVxuICAgIGdlbkZ1bi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEdwKTtcbiAgICByZXR1cm4gZ2VuRnVuO1xuICB9O1xuXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxuICAvLyBgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKWAgdG8gZGV0ZXJtaW5lIGlmIHRoZSB5aWVsZGVkIHZhbHVlIGlzXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXG4gIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4geyBfX2F3YWl0OiBhcmcgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBBc3luY0l0ZXJhdG9yKGdlbmVyYXRvciwgUHJvbWlzZUltcGwpIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGdlbmVyYXRvclttZXRob2RdLCBnZW5lcmF0b3IsIGFyZyk7XG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbih1bndyYXBwZWQpIHtcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxuICAgICAgICAgIC8vIGN1cnJlbnQgaXRlcmF0aW9uLlxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgIH0sIGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgICAgLy8gSWYgYSByZWplY3RlZCBQcm9taXNlIHdhcyB5aWVsZGVkLCB0aHJvdyB0aGUgcmVqZWN0aW9uIGJhY2tcbiAgICAgICAgICAvLyBpbnRvIHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gc28gaXQgY2FuIGJlIGhhbmRsZWQgdGhlcmUuXG4gICAgICAgICAgcmV0dXJuIGludm9rZShcInRocm93XCIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xuXG4gICAgZnVuY3Rpb24gZW5xdWV1ZShtZXRob2QsIGFyZykge1xuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XG4gICAgICAgIC8vIElmIGVucXVldWUgaGFzIGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIHdhaXQgdW50aWxcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcbiAgICAgICAgLy8gZW5xdWV1ZSBoYXMgbm90IGJlZW4gY2FsbGVkIGJlZm9yZSwgdGhlbiBpdCBpcyBpbXBvcnRhbnQgdG9cbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXG4gICAgICAgIC8vIGFueSBuZWNlc3Nhcnkgc2V0dXAgaW4gYSBwcmVkaWN0YWJsZSB3YXkuIFRoaXMgcHJlZGljdGFiaWxpdHlcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcbiAgICAgICAgLy8gZXhlY3V0ZSBjb2RlIGJlZm9yZSB0aGUgZmlyc3QgYXdhaXQuIFNpbmNlIHdlIGltcGxlbWVudCBzaW1wbGVcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxuICAgICAgICBwcmV2aW91c1Byb21pc2UgPyBwcmV2aW91c1Byb21pc2UudGhlbihcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxuICAgICAgICAgIC8vIGludm9jYXRpb25zIG9mIHRoZSBpdGVyYXRvci5cbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcbiAgICB9XG5cbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gKHNlZSBkZWZpbmVJdGVyYXRvck1ldGhvZHMpLlxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcblxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxuICAvLyB0aGUgZmluYWwgcmVzdWx0IHByb2R1Y2VkIGJ5IHRoZSBpdGVyYXRvci5cbiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0LCBQcm9taXNlSW1wbCkge1xuICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7XG5cbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCksXG4gICAgICBQcm9taXNlSW1wbFxuICAgICk7XG5cbiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxuICAgICAgOiBpdGVyLm5leHQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgfTtcblxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcbiAgICB2YXIgc3RhdGUgPSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHRocm93IGFyZztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJlIGZvcmdpdmluZywgcGVyIDI1LjMuMy4zLjMgb2YgdGhlIHNwZWM6XG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcbiAgICAgIH1cblxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XG4gICAgICBjb250ZXh0LmFyZyA9IGFyZztcblxuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gY29udGV4dC5kZWxlZ2F0ZTtcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG4gICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0KSB7XG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgICAgIGNvbnRleHQuc2VudCA9IGNvbnRleHQuX3NlbnQgPSBjb250ZXh0LmFyZztcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQpIHtcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcblxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcblxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIC8vIElmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZnJvbSBpbm5lckZuLCB3ZSBsZWF2ZSBzdGF0ZSA9PT1cbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcbiAgICAgICAgICAgID8gR2VuU3RhdGVDb21wbGV0ZWRcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcblxuICAgICAgICAgIGlmIChyZWNvcmQuYXJnID09PSBDb250aW51ZVNlbnRpbmVsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXG4gICAgICAgICAgICBkb25lOiBjb250ZXh0LmRvbmVcbiAgICAgICAgICB9O1xuXG4gICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxuICAgICAgICAgIC8vIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpIGNhbGwgYWJvdmUuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxuICAvLyByZXN1bHQsIGVpdGhlciBieSByZXR1cm5pbmcgYSB7IHZhbHVlLCBkb25lIH0gcmVzdWx0IGZyb20gdGhlXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cbiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBBIC50aHJvdyBvciAucmV0dXJuIHdoZW4gdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBubyAudGhyb3dcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yW1wicmV0dXJuXCJdKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAgIC8vIGNoYW5jZSB0byBjbGVhbiB1cC5cbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XG5cbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0aWYgKGNhY2hlZE1vZHVsZS5lcnJvciAhPT0gdW5kZWZpbmVkKSB0aHJvdyBjYWNoZWRNb2R1bGUuZXJyb3I7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdHRyeSB7XG5cdFx0dmFyIGV4ZWNPcHRpb25zID0geyBpZDogbW9kdWxlSWQsIG1vZHVsZTogbW9kdWxlLCBmYWN0b3J5OiBfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXSwgcmVxdWlyZTogX193ZWJwYWNrX3JlcXVpcmVfXyB9O1xuXHRcdF9fd2VicGFja19yZXF1aXJlX18uaS5mb3JFYWNoKGZ1bmN0aW9uKGhhbmRsZXIpIHsgaGFuZGxlcihleGVjT3B0aW9ucyk7IH0pO1xuXHRcdG1vZHVsZSA9IGV4ZWNPcHRpb25zLm1vZHVsZTtcblx0XHRleGVjT3B0aW9ucy5mYWN0b3J5LmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGV4ZWNPcHRpb25zLnJlcXVpcmUpO1xuXHR9IGNhdGNoKGUpIHtcblx0XHRtb2R1bGUuZXJyb3IgPSBlO1xuXHRcdHRocm93IGU7XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuX193ZWJwYWNrX3JlcXVpcmVfXy5jID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fO1xuXG4vLyBleHBvc2UgdGhlIG1vZHVsZSBleGVjdXRpb24gaW50ZXJjZXB0b3Jcbl9fd2VicGFja19yZXF1aXJlX18uaSA9IFtdO1xuXG4iLCIvLyBUaGlzIGZ1bmN0aW9uIGFsbG93IHRvIHJlZmVyZW5jZSBhbGwgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmh1ID0gKGNodW5rSWQpID0+IHtcblx0Ly8gcmV0dXJuIHVybCBmb3IgZmlsZW5hbWVzIGJhc2VkIG9uIHRlbXBsYXRlXG5cdHJldHVybiBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgX193ZWJwYWNrX3JlcXVpcmVfXy5oKCkgKyBcIi5ob3QtdXBkYXRlLmpzXCI7XG59OyIsIi8vIFRoaXMgZnVuY3Rpb24gYWxsb3cgdG8gcmVmZXJlbmNlIGFsbCBjaHVua3Ncbl9fd2VicGFja19yZXF1aXJlX18ubWluaUNzc0YgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIHVuZGVmaW5lZDtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGID0gKCkgPT4gKFwiY2hpbmEuXCIgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmgoKSArIFwiLmhvdC11cGRhdGUuanNvblwiKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmggPSAoKSA9PiAoXCJmNGJhMGJhNzAwZGRhNmFkMTRiY1wiKSIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsInZhciBjdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xudmFyIGluc3RhbGxlZE1vZHVsZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmM7XG5cbi8vIG1vZHVsZSBhbmQgcmVxdWlyZSBjcmVhdGlvblxudmFyIGN1cnJlbnRDaGlsZE1vZHVsZTtcbnZhciBjdXJyZW50UGFyZW50cyA9IFtdO1xuXG4vLyBzdGF0dXNcbnZhciByZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMgPSBbXTtcbnZhciBjdXJyZW50U3RhdHVzID0gXCJpZGxlXCI7XG5cbi8vIHdoaWxlIGRvd25sb2FkaW5nXG52YXIgYmxvY2tpbmdQcm9taXNlcztcblxuLy8gVGhlIHVwZGF0ZSBpbmZvXG52YXIgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnM7XG52YXIgcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbl9fd2VicGFja19yZXF1aXJlX18uaG1yRCA9IGN1cnJlbnRNb2R1bGVEYXRhO1xuXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmkucHVzaChmdW5jdGlvbiAob3B0aW9ucykge1xuXHR2YXIgbW9kdWxlID0gb3B0aW9ucy5tb2R1bGU7XG5cdHZhciByZXF1aXJlID0gY3JlYXRlUmVxdWlyZShvcHRpb25zLnJlcXVpcmUsIG9wdGlvbnMuaWQpO1xuXHRtb2R1bGUuaG90ID0gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG9wdGlvbnMuaWQsIG1vZHVsZSk7XG5cdG1vZHVsZS5wYXJlbnRzID0gY3VycmVudFBhcmVudHM7XG5cdG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRvcHRpb25zLnJlcXVpcmUgPSByZXF1aXJlO1xufSk7XG5cbl9fd2VicGFja19yZXF1aXJlX18uaG1yQyA9IHt9O1xuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJID0ge307XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlcXVpcmUocmVxdWlyZSwgbW9kdWxlSWQpIHtcblx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG5cdGlmICghbWUpIHJldHVybiByZXF1aXJlO1xuXHR2YXIgZm4gPSBmdW5jdGlvbiAocmVxdWVzdCkge1xuXHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG5cdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuXHRcdFx0XHR2YXIgcGFyZW50cyA9IGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cztcblx0XHRcdFx0aWYgKHBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPT09IC0xKSB7XG5cdFx0XHRcdFx0cGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuXHRcdFx0XHRjdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG5cdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuXHRcdFx0XHRcdHJlcXVlc3QgK1xuXHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG5cdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdCk7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IFtdO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVxdWlyZShyZXF1ZXN0KTtcblx0fTtcblx0dmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIHJlcXVpcmVbbmFtZV07XG5cdFx0XHR9LFxuXHRcdFx0c2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcblx0XHRcdFx0cmVxdWlyZVtuYW1lXSA9IHZhbHVlO1xuXHRcdFx0fVxuXHRcdH07XG5cdH07XG5cdGZvciAodmFyIG5hbWUgaW4gcmVxdWlyZSkge1xuXHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVxdWlyZSwgbmFtZSkgJiYgbmFtZSAhPT0gXCJlXCIpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKG5hbWUpKTtcblx0XHR9XG5cdH1cblx0Zm4uZSA9IGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0cmV0dXJuIHRyYWNrQmxvY2tpbmdQcm9taXNlKHJlcXVpcmUuZShjaHVua0lkKSk7XG5cdH07XG5cdHJldHVybiBmbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTW9kdWxlSG90T2JqZWN0KG1vZHVsZUlkLCBtZSkge1xuXHR2YXIgaG90ID0ge1xuXHRcdC8vIHByaXZhdGUgc3R1ZmZcblx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxuXHRcdF9hY2NlcHRlZEVycm9ySGFuZGxlcnM6IHt9LFxuXHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXG5cdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXG5cdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXG5cdFx0X3NlbGZJbnZhbGlkYXRlZDogZmFsc2UsXG5cdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXG5cdFx0X21haW46IGN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXG5cdFx0X3JlcXVpcmVTZWxmOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50UGFyZW50cyA9IG1lLnBhcmVudHMuc2xpY2UoKTtcblx0XHRcdGN1cnJlbnRDaGlsZE1vZHVsZSA9IG1vZHVsZUlkO1xuXHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCk7XG5cdFx0fSxcblxuXHRcdC8vIE1vZHVsZSBBUElcblx0XHRhY3RpdmU6IHRydWUsXG5cdFx0YWNjZXB0OiBmdW5jdGlvbiAoZGVwLCBjYWxsYmFjaywgZXJyb3JIYW5kbGVyKSB7XG5cdFx0XHRpZiAoZGVwID09PSB1bmRlZmluZWQpIGhvdC5fc2VsZkFjY2VwdGVkID0gdHJ1ZTtcblx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIikgaG90Ll9zZWxmQWNjZXB0ZWQgPSBkZXA7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbCkge1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWRFcnJvckhhbmRsZXJzW2RlcFtpXV0gPSBlcnJvckhhbmRsZXI7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBdID0gZXJyb3JIYW5kbGVyO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0ZGVjbGluZTogZnVuY3Rpb24gKGRlcCkge1xuXHRcdFx0aWYgKGRlcCA9PT0gdW5kZWZpbmVkKSBob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XG5cdFx0XHRlbHNlIGlmICh0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiICYmIGRlcCAhPT0gbnVsbClcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcblx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcblx0XHR9LFxuXHRcdGRpc3Bvc2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG5cdFx0fSxcblx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcblx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcblx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fSxcblx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aGlzLl9zZWxmSW52YWxpZGF0ZWQgPSB0cnVlO1xuXHRcdFx0c3dpdGNoIChjdXJyZW50U3RhdHVzKSB7XG5cdFx0XHRcdGNhc2UgXCJpZGxlXCI6XG5cdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJJW2tleV0oXG5cdFx0XHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVyc1xuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG5cdFx0XHRcdFx0T2JqZWN0LmtleXMoX193ZWJwYWNrX3JlcXVpcmVfXy5obXJJKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdFx0XHRtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnNcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuXHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuXHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcblx0XHRcdFx0XHQocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID0gcXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzIHx8IFtdKS5wdXNoKFxuXHRcdFx0XHRcdFx0bW9kdWxlSWRcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdC8vIGlnbm9yZSByZXF1ZXN0cyBpbiBlcnJvciBzdGF0ZXNcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Ly8gTWFuYWdlbWVudCBBUElcblx0XHRjaGVjazogaG90Q2hlY2ssXG5cdFx0YXBwbHk6IGhvdEFwcGx5LFxuXHRcdHN0YXR1czogZnVuY3Rpb24gKGwpIHtcblx0XHRcdGlmICghbCkgcmV0dXJuIGN1cnJlbnRTdGF0dXM7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnMucHVzaChsKTtcblx0XHR9LFxuXHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uIChsKSB7XG5cdFx0XHR2YXIgaWR4ID0gcmVnaXN0ZXJlZFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XG5cdFx0XHRpZiAoaWR4ID49IDApIHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcblx0XHR9LFxuXG5cdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG5cdFx0ZGF0YTogY3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG5cdH07XG5cdGN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcblx0cmV0dXJuIGhvdDtcbn1cblxuZnVuY3Rpb24gc2V0U3RhdHVzKG5ld1N0YXR1cykge1xuXHRjdXJyZW50U3RhdHVzID0gbmV3U3RhdHVzO1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHJlZ2lzdGVyZWRTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcblx0XHRyZWdpc3RlcmVkU3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xufVxuXG5mdW5jdGlvbiB0cmFja0Jsb2NraW5nUHJvbWlzZShwcm9taXNlKSB7XG5cdHN3aXRjaCAoY3VycmVudFN0YXR1cykge1xuXHRcdGNhc2UgXCJyZWFkeVwiOlxuXHRcdFx0c2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcblx0XHRcdGJsb2NraW5nUHJvbWlzZXMucHVzaChwcm9taXNlKTtcblx0XHRcdHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0c2V0U3RhdHVzKFwicmVhZHlcIik7XG5cdFx0XHR9KTtcblx0XHRcdHJldHVybiBwcm9taXNlO1xuXHRcdGNhc2UgXCJwcmVwYXJlXCI6XG5cdFx0XHRibG9ja2luZ1Byb21pc2VzLnB1c2gocHJvbWlzZSk7XG5cdFx0XHRyZXR1cm4gcHJvbWlzZTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIHByb21pc2U7XG5cdH1cbn1cblxuZnVuY3Rpb24gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pIHtcblx0aWYgKGJsb2NraW5nUHJvbWlzZXMubGVuZ3RoID09PSAwKSByZXR1cm4gZm4oKTtcblx0dmFyIGJsb2NrZXIgPSBibG9ja2luZ1Byb21pc2VzO1xuXHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdHJldHVybiBQcm9taXNlLmFsbChibG9ja2VyKS50aGVuKGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gd2FpdEZvckJsb2NraW5nUHJvbWlzZXMoZm4pO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gaG90Q2hlY2soYXBwbHlPblVwZGF0ZSkge1xuXHRpZiAoY3VycmVudFN0YXR1cyAhPT0gXCJpZGxlXCIpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcblx0fVxuXHRzZXRTdGF0dXMoXCJjaGVja1wiKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uaG1yTSgpLnRoZW4oZnVuY3Rpb24gKHVwZGF0ZSkge1xuXHRcdGlmICghdXBkYXRlKSB7XG5cdFx0XHRzZXRTdGF0dXMoYXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKTtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHNldFN0YXR1cyhcInByZXBhcmVcIik7XG5cblx0XHR2YXIgdXBkYXRlZE1vZHVsZXMgPSBbXTtcblx0XHRibG9ja2luZ1Byb21pc2VzID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblxuXHRcdHJldHVybiBQcm9taXNlLmFsbChcblx0XHRcdE9iamVjdC5rZXlzKF9fd2VicGFja19yZXF1aXJlX18uaG1yQykucmVkdWNlKGZ1bmN0aW9uIChcblx0XHRcdFx0cHJvbWlzZXMsXG5cdFx0XHRcdGtleVxuXHRcdFx0KSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1yQ1trZXldKFxuXHRcdFx0XHRcdHVwZGF0ZS5jLFxuXHRcdFx0XHRcdHVwZGF0ZS5yLFxuXHRcdFx0XHRcdHVwZGF0ZS5tLFxuXHRcdFx0XHRcdHByb21pc2VzLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzLFxuXHRcdFx0XHRcdHVwZGF0ZWRNb2R1bGVzXG5cdFx0XHRcdCk7XG5cdFx0XHRcdHJldHVybiBwcm9taXNlcztcblx0XHRcdH0sXG5cdFx0XHRbXSlcblx0XHQpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHdhaXRGb3JCbG9ja2luZ1Byb21pc2VzKGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0aWYgKGFwcGx5T25VcGRhdGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gaW50ZXJuYWxBcHBseShhcHBseU9uVXBkYXRlKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzZXRTdGF0dXMoXCJyZWFkeVwiKTtcblxuXHRcdFx0XHRcdHJldHVybiB1cGRhdGVkTW9kdWxlcztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG5cdGlmIChjdXJyZW50U3RhdHVzICE9PSBcInJlYWR5XCIpIHtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG5cdFx0fSk7XG5cdH1cblx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGludGVybmFsQXBwbHkob3B0aW9ucykge1xuXHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRhcHBseUludmFsaWRhdGVkTW9kdWxlcygpO1xuXG5cdHZhciByZXN1bHRzID0gY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG5cdFx0cmV0dXJuIGhhbmRsZXIob3B0aW9ucyk7XG5cdH0pO1xuXHRjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycyA9IHVuZGVmaW5lZDtcblxuXHR2YXIgZXJyb3JzID0gcmVzdWx0c1xuXHRcdC5tYXAoZnVuY3Rpb24gKHIpIHtcblx0XHRcdHJldHVybiByLmVycm9yO1xuXHRcdH0pXG5cdFx0LmZpbHRlcihCb29sZWFuKTtcblxuXHRpZiAoZXJyb3JzLmxlbmd0aCA+IDApIHtcblx0XHRzZXRTdGF0dXMoXCJhYm9ydFwiKTtcblx0XHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdFx0XHR0aHJvdyBlcnJvcnNbMF07XG5cdFx0fSk7XG5cdH1cblxuXHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2Vcblx0c2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcblxuXHRyZXN1bHRzLmZvckVhY2goZnVuY3Rpb24gKHJlc3VsdCkge1xuXHRcdGlmIChyZXN1bHQuZGlzcG9zZSkgcmVzdWx0LmRpc3Bvc2UoKTtcblx0fSk7XG5cblx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuXHRzZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuXHR2YXIgZXJyb3I7XG5cdHZhciByZXBvcnRFcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcblx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcblx0fTtcblxuXHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XG5cdHJlc3VsdHMuZm9yRWFjaChmdW5jdGlvbiAocmVzdWx0KSB7XG5cdFx0aWYgKHJlc3VsdC5hcHBseSkge1xuXHRcdFx0dmFyIG1vZHVsZXMgPSByZXN1bHQuYXBwbHkocmVwb3J0RXJyb3IpO1xuXHRcdFx0aWYgKG1vZHVsZXMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gobW9kdWxlc1tpXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG5cdGlmIChlcnJvcikge1xuXHRcdHNldFN0YXR1cyhcImZhaWxcIik7XG5cdFx0cmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge1xuXHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0cmV0dXJuIGludGVybmFsQXBwbHkob3B0aW9ucykudGhlbihmdW5jdGlvbiAobGlzdCkge1xuXHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0fSk7XG5cdH1cblxuXHRzZXRTdGF0dXMoXCJpZGxlXCIpO1xuXHRyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuXHRpZiAocXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG5cdFx0aWYgKCFjdXJyZW50VXBkYXRlQXBwbHlIYW5kbGVycykgY3VycmVudFVwZGF0ZUFwcGx5SGFuZGxlcnMgPSBbXTtcblx0XHRPYmplY3Qua2V5cyhfX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0cXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZHVsZUlkKSB7XG5cdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18uaG1ySVtrZXldKFxuXHRcdFx0XHRcdG1vZHVsZUlkLFxuXHRcdFx0XHRcdGN1cnJlbnRVcGRhdGVBcHBseUhhbmRsZXJzXG5cdFx0XHRcdCk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0XHRxdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMgPSB1bmRlZmluZWQ7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cbn0iLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsIi8vIG5vIGJhc2VVUklcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQzNTU6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG52YXIgY3VycmVudFVwZGF0ZWRNb2R1bGVzTGlzdDtcbnZhciB3YWl0aW5nVXBkYXRlUmVzb2x2ZXMgPSB7fTtcbmZ1bmN0aW9uIGxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gcmVzb2x2ZTtcblx0XHQvLyBzdGFydCB1cGRhdGUgY2h1bmsgbG9hZGluZ1xuXHRcdHZhciB1cmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBfX3dlYnBhY2tfcmVxdWlyZV9fLmh1KGNodW5rSWQpO1xuXHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcblx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoKTtcblx0XHR2YXIgbG9hZGluZ0VuZGVkID0gKGV2ZW50KSA9PiB7XG5cdFx0XHRpZih3YWl0aW5nVXBkYXRlUmVzb2x2ZXNbY2h1bmtJZF0pIHtcblx0XHRcdFx0d2FpdGluZ1VwZGF0ZVJlc29sdmVzW2NodW5rSWRdID0gdW5kZWZpbmVkXG5cdFx0XHRcdHZhciBlcnJvclR5cGUgPSBldmVudCAmJiAoZXZlbnQudHlwZSA9PT0gJ2xvYWQnID8gJ21pc3NpbmcnIDogZXZlbnQudHlwZSk7XG5cdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG5cdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBob3QgdXBkYXRlIGNodW5rICcgKyBjaHVua0lkICsgJyBmYWlsZWQuXFxuKCcgKyBlcnJvclR5cGUgKyAnOiAnICsgcmVhbFNyYyArICcpJztcblx0XHRcdFx0ZXJyb3IubmFtZSA9ICdDaHVua0xvYWRFcnJvcic7XG5cdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG5cdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuXHRcdFx0XHRyZWplY3QoZXJyb3IpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5sKHVybCwgbG9hZGluZ0VuZGVkKTtcblx0fSk7XG59XG5cbnNlbGZbXCJ3ZWJwYWNrSG90VXBkYXRlZ2VvX3NhdGVsbGl0ZXNcIl0gPSAoY2h1bmtJZCwgbW9yZU1vZHVsZXMsIHJ1bnRpbWUpID0+IHtcblx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcblx0XHRcdGlmKGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QpIGN1cnJlbnRVcGRhdGVkTW9kdWxlc0xpc3QucHVzaChtb2R1bGVJZCk7XG5cdFx0fVxuXHR9XG5cdGlmKHJ1bnRpbWUpIGN1cnJlbnRVcGRhdGVSdW50aW1lLnB1c2gocnVudGltZSk7XG5cdGlmKHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSkge1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSgpO1xuXHRcdHdhaXRpbmdVcGRhdGVSZXNvbHZlc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcblx0fVxufTtcblxudmFyIGN1cnJlbnRVcGRhdGVDaHVua3M7XG52YXIgY3VycmVudFVwZGF0ZTtcbnZhciBjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcztcbnZhciBjdXJyZW50VXBkYXRlUnVudGltZTtcbmZ1bmN0aW9uIGFwcGx5SGFuZGxlcihvcHRpb25zKSB7XG5cdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmYpIGRlbGV0ZSBfX3dlYnBhY2tfcmVxdWlyZV9fLmYuanNvbnBIbXI7XG5cdGN1cnJlbnRVcGRhdGVDaHVua3MgPSB1bmRlZmluZWQ7XG5cdGZ1bmN0aW9uIGdldEFmZmVjdGVkTW9kdWxlRWZmZWN0cyh1cGRhdGVNb2R1bGVJZCkge1xuXHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xuXG5cdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLm1hcChmdW5jdGlvbiAoaWQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGNoYWluOiBbaWRdLFxuXHRcdFx0XHRpZDogaWRcblx0XHRcdH07XG5cdFx0fSk7XG5cdFx0d2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcblx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcblx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcblx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcblx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlSWRdO1xuXHRcdFx0aWYgKFxuXHRcdFx0XHQhbW9kdWxlIHx8XG5cdFx0XHRcdChtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQgJiYgIW1vZHVsZS5ob3QuX3NlbGZJbnZhbGlkYXRlZClcblx0XHRcdClcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRpZiAobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXG5cdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuXHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1vZHVsZS5ob3QuX21haW4pIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcblx0XHRcdFx0XHRjaGFpbjogY2hhaW4sXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdHZhciBwYXJlbnRJZCA9IG1vZHVsZS5wYXJlbnRzW2ldO1xuXHRcdFx0XHR2YXIgcGFyZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW3BhcmVudElkXTtcblx0XHRcdFx0aWYgKCFwYXJlbnQpIGNvbnRpbnVlO1xuXHRcdFx0XHRpZiAocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcblx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgIT09IC0xKSBjb250aW51ZTtcblx0XHRcdFx0aWYgKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xuXHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxuXHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XG5cdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdLCBbbW9kdWxlSWRdKTtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdO1xuXHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XG5cdFx0XHRcdHF1ZXVlLnB1c2goe1xuXHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXG5cdFx0XHRcdFx0aWQ6IHBhcmVudElkXG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXG5cdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXG5cdFx0XHRvdXRkYXRlZE1vZHVsZXM6IG91dGRhdGVkTW9kdWxlcyxcblx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IGJbaV07XG5cdFx0XHRpZiAoYS5pbmRleE9mKGl0ZW0pID09PSAtMSkgYS5wdXNoKGl0ZW0pO1xuXHRcdH1cblx0fVxuXG5cdC8vIGF0IGJlZ2luIGFsbCB1cGRhdGVzIG1vZHVsZXMgYXJlIG91dGRhdGVkXG5cdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cblx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcblx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcblxuXHR2YXIgd2FyblVuZXhwZWN0ZWRSZXF1aXJlID0gZnVuY3Rpb24gd2FyblVuZXhwZWN0ZWRSZXF1aXJlKG1vZHVsZSkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgbW9kdWxlLmlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiXG5cdFx0KTtcblx0fTtcblxuXHRmb3IgKHZhciBtb2R1bGVJZCBpbiBjdXJyZW50VXBkYXRlKSB7XG5cdFx0aWYgKF9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRcdHZhciBuZXdNb2R1bGVGYWN0b3J5ID0gY3VycmVudFVwZGF0ZVttb2R1bGVJZF07XG5cdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG5cdFx0XHR2YXIgcmVzdWx0O1xuXHRcdFx0aWYgKG5ld01vZHVsZUZhY3RvcnkpIHtcblx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRNb2R1bGVFZmZlY3RzKG1vZHVsZUlkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJlc3VsdCA9IHtcblx0XHRcdFx0XHR0eXBlOiBcImRpc3Bvc2VkXCIsXG5cdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0XHQvKiogQHR5cGUge0Vycm9yfGZhbHNlfSAqL1xuXHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcblx0XHRcdHZhciBkb0FwcGx5ID0gZmFsc2U7XG5cdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XG5cdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcblx0XHRcdGlmIChyZXN1bHQuY2hhaW4pIHtcblx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xuXHRcdFx0fVxuXHRcdFx0c3dpdGNoIChyZXN1bHQudHlwZSkge1xuXHRcdFx0XHRjYXNlIFwic2VsZi1kZWNsaW5lZFwiOlxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGVjbGluZWQpIG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcblx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG5cdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgK1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG5cdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcblx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG5cdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuXHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0Lm1vZHVsZUlkICtcblx0XHRcdFx0XHRcdFx0XHRcIiBpbiBcIiArXG5cdFx0XHRcdFx0XHRcdFx0cmVzdWx0LnBhcmVudElkICtcblx0XHRcdFx0XHRcdFx0XHRjaGFpbkluZm9cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25VbmFjY2VwdGVkKSBvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xuXHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVVbmFjY2VwdGVkKVxuXHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcblx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlIFwiYWNjZXB0ZWRcIjpcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkFjY2VwdGVkKSBvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcblx0XHRcdFx0XHRkb0FwcGx5ID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XG5cdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EaXNwb3NlZCkgb3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XG5cdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGFib3J0RXJyb3IpIHtcblx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRlcnJvcjogYWJvcnRFcnJvclxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdFx0aWYgKGRvQXBwbHkpIHtcblx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBuZXdNb2R1bGVGYWN0b3J5O1xuXHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xuXHRcdFx0XHRmb3IgKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8ocmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcblx0XHRcdFx0XHRcdGlmICghb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0gPSBbXTtcblx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KFxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sXG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoZG9EaXNwb3NlKSB7XG5cdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xuXHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblx0Y3VycmVudFVwZGF0ZSA9IHVuZGVmaW5lZDtcblxuXHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXG5cdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcblx0Zm9yICh2YXIgaiA9IDA7IGogPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBqKyspIHtcblx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tqXTtcblx0XHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXy5jW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdGlmIChcblx0XHRcdG1vZHVsZSAmJlxuXHRcdFx0bW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmXG5cdFx0XHQvLyByZW1vdmVkIHNlbGYtYWNjZXB0ZWQgbW9kdWxlcyBzaG91bGQgbm90IGJlIHJlcXVpcmVkXG5cdFx0XHRhcHBsaWVkVXBkYXRlW291dGRhdGVkTW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcblx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG5cdFx0XHQhbW9kdWxlLmhvdC5fc2VsZkludmFsaWRhdGVkXG5cdFx0KSB7XG5cdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XG5cdFx0XHRcdG1vZHVsZTogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0cmVxdWlyZTogbW9kdWxlLmhvdC5fcmVxdWlyZVNlbGYsXG5cdFx0XHRcdGVycm9ySGFuZGxlcjogbW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkXG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XG5cblx0cmV0dXJuIHtcblx0XHRkaXNwb3NlOiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjdXJyZW50VXBkYXRlUmVtb3ZlZENodW5rcy5mb3JFYWNoKGZ1bmN0aW9uIChjaHVua0lkKSB7XG5cdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG5cdFx0XHR9KTtcblx0XHRcdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gdW5kZWZpbmVkO1xuXG5cdFx0XHR2YXIgaWR4O1xuXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XG5cdFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcblx0XHRcdFx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cdFx0XHRcdGlmICghbW9kdWxlKSBjb250aW51ZTtcblxuXHRcdFx0XHR2YXIgZGF0YSA9IHt9O1xuXG5cdFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuXHRcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xuXHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgZGlzcG9zZUhhbmRsZXJzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0ZGlzcG9zZUhhbmRsZXJzW2pdLmNhbGwobnVsbCwgZGF0YSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5obXJEW21vZHVsZUlkXSA9IGRhdGE7XG5cblx0XHRcdFx0Ly8gZGlzYWJsZSBtb2R1bGUgKHRoaXMgZGlzYWJsZXMgcmVxdWlyZXMgZnJvbSB0aGlzIG1vZHVsZSlcblx0XHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuXHRcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcblx0XHRcdFx0ZGVsZXRlIF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF07XG5cblx0XHRcdFx0Ly8gd2hlbiBkaXNwb3NpbmcgdGhlcmUgaXMgbm8gbmVlZCB0byBjYWxsIGRpc3Bvc2UgaGFuZGxlclxuXHRcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG5cdFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXG5cdFx0XHRcdGZvciAoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0XHR2YXIgY2hpbGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcblx0XHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcblx0XHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xuXHRcdFx0XHRcdGlmIChpZHggPj0gMCkge1xuXHRcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cblx0XHRcdHZhciBkZXBlbmRlbmN5O1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18uY1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRpZiAobW9kdWxlKSB7XG5cdFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9XG5cdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW291dGRhdGVkTW9kdWxlSWRdO1xuXHRcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcblx0XHRcdFx0XHRcdFx0aWR4ID0gbW9kdWxlLmNoaWxkcmVuLmluZGV4T2YoZGVwZW5kZW5jeSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0YXBwbHk6IGZ1bmN0aW9uIChyZXBvcnRFcnJvcikge1xuXHRcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXG5cdFx0XHRmb3IgKHZhciB1cGRhdGVNb2R1bGVJZCBpbiBhcHBsaWVkVXBkYXRlKSB7XG5cdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm8oYXBwbGllZFVwZGF0ZSwgdXBkYXRlTW9kdWxlSWQpKSB7XG5cdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tW3VwZGF0ZU1vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbdXBkYXRlTW9kdWxlSWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIHJ1biBuZXcgcnVudGltZSBtb2R1bGVzXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGN1cnJlbnRVcGRhdGVSdW50aW1lLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lW2ldKF9fd2VicGFja19yZXF1aXJlX18pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuXHRcdFx0Zm9yICh2YXIgb3V0ZGF0ZWRNb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xuXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5vKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBvdXRkYXRlZE1vZHVsZUlkKSkge1xuXHRcdFx0XHRcdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmNbb3V0ZGF0ZWRNb2R1bGVJZF07XG5cdFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuXHRcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPVxuXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1tvdXRkYXRlZE1vZHVsZUlkXTtcblx0XHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcblx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0XHR2YXIgZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzID0gW107XG5cdFx0XHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdFx0XHRcdHZhciBkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XG5cdFx0XHRcdFx0XHRcdHZhciBhY2NlcHRDYWxsYmFjayA9XG5cdFx0XHRcdFx0XHRcdFx0bW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XG5cdFx0XHRcdFx0XHRcdHZhciBlcnJvckhhbmRsZXIgPVxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZS5ob3QuX2FjY2VwdGVkRXJyb3JIYW5kbGVyc1tkZXBlbmRlbmN5XTtcblx0XHRcdFx0XHRcdFx0aWYgKGFjY2VwdENhbGxiYWNrKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKGNhbGxiYWNrcy5pbmRleE9mKGFjY2VwdENhbGxiYWNrKSAhPT0gLTEpIGNvbnRpbnVlO1xuXHRcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGFjY2VwdENhbGxiYWNrKTtcblx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzLnB1c2goZXJyb3JIYW5kbGVyKTtcblx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3MucHVzaChkZXBlbmRlbmN5KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Zm9yICh2YXIgayA9IDA7IGsgPCBjYWxsYmFja3MubGVuZ3RoOyBrKyspIHtcblx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRjYWxsYmFja3Nba10uY2FsbChudWxsLCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0XHRcdFx0XHRcdGlmICh0eXBlb2YgZXJyb3JIYW5kbGVyc1trXSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvckhhbmRsZXJzW2tdKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogZGVwZW5kZW5jaWVzRm9yQ2FsbGJhY2tzW2tdXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBvdXRkYXRlZE1vZHVsZUlkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBkZXBlbmRlbmNpZXNGb3JDYWxsYmFja3Nba10sXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogb3V0ZGF0ZWRNb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IGRlcGVuZGVuY2llc0ZvckNhbGxiYWNrc1trXSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcblx0XHRcdGZvciAodmFyIG8gPSAwOyBvIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgbysrKSB7XG5cdFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW29dO1xuXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRpdGVtLnJlcXVpcmUobW9kdWxlSWQpO1xuXHRcdFx0XHR9IGNhdGNoIChlcnIpIHtcblx0XHRcdFx0XHRpZiAodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVyciwge1xuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRtb2R1bGU6IF9fd2VicGFja19yZXF1aXJlX18uY1ttb2R1bGVJZF1cblx0XHRcdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnIyKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3ItaGFuZGxlci1lcnJvcmVkXCIsXG5cdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcblx0XHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxuXHRcdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGlmICghb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyMik7XG5cdFx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuXHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxuXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcblx0XHRcdFx0XHRcdFx0cmVwb3J0RXJyb3IoZXJyKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG91dGRhdGVkTW9kdWxlcztcblx0XHR9XG5cdH07XG59XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckkuanNvbnAgPSBmdW5jdGlvbiAobW9kdWxlSWQsIGFwcGx5SGFuZGxlcnMpIHtcblx0aWYgKCFjdXJyZW50VXBkYXRlKSB7XG5cdFx0Y3VycmVudFVwZGF0ZSA9IHt9O1xuXHRcdGN1cnJlbnRVcGRhdGVSdW50aW1lID0gW107XG5cdFx0Y3VycmVudFVwZGF0ZVJlbW92ZWRDaHVua3MgPSBbXTtcblx0XHRhcHBseUhhbmRsZXJzLnB1c2goYXBwbHlIYW5kbGVyKTtcblx0fVxuXHRpZiAoIV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlLCBtb2R1bGVJZCkpIHtcblx0XHRjdXJyZW50VXBkYXRlW21vZHVsZUlkXSA9IF9fd2VicGFja19yZXF1aXJlX18ubVttb2R1bGVJZF07XG5cdH1cbn07XG5fX3dlYnBhY2tfcmVxdWlyZV9fLmhtckMuanNvbnAgPSBmdW5jdGlvbiAoXG5cdGNodW5rSWRzLFxuXHRyZW1vdmVkQ2h1bmtzLFxuXHRyZW1vdmVkTW9kdWxlcyxcblx0cHJvbWlzZXMsXG5cdGFwcGx5SGFuZGxlcnMsXG5cdHVwZGF0ZWRNb2R1bGVzTGlzdFxuKSB7XG5cdGFwcGx5SGFuZGxlcnMucHVzaChhcHBseUhhbmRsZXIpO1xuXHRjdXJyZW50VXBkYXRlQ2h1bmtzID0ge307XG5cdGN1cnJlbnRVcGRhdGVSZW1vdmVkQ2h1bmtzID0gcmVtb3ZlZENodW5rcztcblx0Y3VycmVudFVwZGF0ZSA9IHJlbW92ZWRNb2R1bGVzLnJlZHVjZShmdW5jdGlvbiAob2JqLCBrZXkpIHtcblx0XHRvYmpba2V5XSA9IGZhbHNlO1xuXHRcdHJldHVybiBvYmo7XG5cdH0sIHt9KTtcblx0Y3VycmVudFVwZGF0ZVJ1bnRpbWUgPSBbXTtcblx0Y2h1bmtJZHMuZm9yRWFjaChmdW5jdGlvbiAoY2h1bmtJZCkge1xuXHRcdGlmIChcblx0XHRcdF9fd2VicGFja19yZXF1aXJlX18ubyhpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmXG5cdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdCkge1xuXHRcdFx0cHJvbWlzZXMucHVzaChsb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCwgdXBkYXRlZE1vZHVsZXNMaXN0KSk7XG5cdFx0XHRjdXJyZW50VXBkYXRlQ2h1bmtzW2NodW5rSWRdID0gdHJ1ZTtcblx0XHR9XG5cdH0pO1xuXHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5mKSB7XG5cdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5mLmpzb25wSG1yID0gZnVuY3Rpb24gKGNodW5rSWQsIHByb21pc2VzKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGN1cnJlbnRVcGRhdGVDaHVua3MgJiZcblx0XHRcdFx0IV9fd2VicGFja19yZXF1aXJlX18ubyhjdXJyZW50VXBkYXRlQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8oaW5zdGFsbGVkQ2h1bmtzLCBjaHVua0lkKSAmJlxuXHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gIT09IHVuZGVmaW5lZFxuXHRcdFx0KSB7XG5cdFx0XHRcdHByb21pc2VzLnB1c2gobG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpKTtcblx0XHRcdFx0Y3VycmVudFVwZGF0ZUNodW5rc1tjaHVua0lkXSA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufTtcblxuX193ZWJwYWNrX3JlcXVpcmVfXy5obXJNID0gKCkgPT4ge1xuXHRpZiAodHlwZW9mIGZldGNoID09PSBcInVuZGVmaW5lZFwiKSB0aHJvdyBuZXcgRXJyb3IoXCJObyBicm93c2VyIHN1cHBvcnQ6IG5lZWQgZmV0Y2ggQVBJXCIpO1xuXHRyZXR1cm4gZmV0Y2goX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgX193ZWJwYWNrX3JlcXVpcmVfXy5obXJGKCkpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG5cdFx0aWYocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHJldHVybjsgLy8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuXHRcdGlmKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGZldGNoIHVwZGF0ZSBtYW5pZmVzdCBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQpO1xuXHRcdHJldHVybiByZXNwb25zZS5qc29uKCk7XG5cdH0pO1xufTtcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIi8vIG1vZHVsZSBjYWNoZSBhcmUgdXNlZCBzbyBlbnRyeSBpbmxpbmluZyBpcyBkaXNhYmxlZFxuLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMzkzMyk7XG4iXSwic291cmNlUm9vdCI6IiJ9